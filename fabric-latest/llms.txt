README.rst

---

[![PyPI - Package Version](https://img.shields.io/pypi/v/fabric)](https://pypi.org/project/fabric/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fabric)](https://pypi.org/project/fabric/) [![PyPI - License](https://img.shields.io/pypi/l/fabric)](https://github.com/fabric/fabric/blob/main/LICENSE) [![CircleCI](https://img.shields.io/circleci/build/github/fabric/fabric/main)](https://app.circleci.com/pipelines/github/fabric/fabric) [![Codecov](https://img.shields.io/codecov/c/gh/fabric/fabric)](https://app.codecov.io/gh/fabric/fabric)

Welcome to Fabric!
==================

Fabric is a high level Python (2.7, 3.4+) library designed to execute shell commands remotely over SSH, yielding useful Python objects in return. It builds on top of [Invoke](https://pyinvoke.org) (subprocess command execution and command-line features) and [Paramiko](https://paramiko.org) (SSH protocol implementation), extending their APIs to complement one another and provide additional functionality.

To find out what\'s new in this version of Fabric, please see [the changelog](https://fabfile.org/changelog.html#%7B%7D).

The project maintainer keeps a [roadmap](https://bitprophet.org/projects#roadmap) on his website.


---

SECURITY.md

---

# Security Policy

## Security contact information

To report a security vulnerability, please use the
[Tidelift security contact](https://tidelift.com/security).
Tidelift will coordinate the fix and disclosure.


---

dev-requirements.txt

---

# Us, of course
-e .
invoke>=2.0
# Invocations for common project tasks
invocations>=3.2.0
# pytest-relaxed for test organization, display etc tweaks
pytest-relaxed>=2.0.1
# pytest-cov for coverage
pytest-cov>=4
# Delicious print() alternative
icecream>=2.1
# Formatting
# Flake8 5.x seems to have an odd importlib-metadata incompatibility?
flake8>=4,<5
black>=22.8,<22.9
# Coverage!
coverage>=6.2,<7
# Documentation tools
releases>=2
alabaster==0.7.13


---

auth.md

---

# `auth`

<div class="automodule">

fabric.auth

</div>

---

config.md

---

# `config`

<div class="automodule">

fabric.config

</div>

---

connection.md

---

# `connection`

<div class="automodule">

fabric.connection

</div>

---

exceptions.md

---

# `exceptions`

<div class="automodule">

fabric.exceptions

</div>

---

executor.md

---

# `executor`

<div class="automodule">

fabric.executor

</div>

---

group.md

---

# `group`

<div class="automodule">

fabric.group

</div>

---

runners.md

---

# `runners`

<div class="automodule">

fabric.runners

</div>

---

tasks.md

---

# `tasks`

<div class="automodule">

fabric.tasks

</div>

---

testing.md

---

# `testing`

The `fabric.testing` subpackage contains a handful of test helper modules:

  - <span class="title-ref">fabric.testing.base</span> which only depends on things like `mock` and is appropriate in just about any test paradigm;
  - <span class="title-ref">fabric.testing.fixtures</span>, containing `pytest` fixtures and thus only of interest for users of `pytest`.

All are documented below. Please note the module-level documentation which contains install instructions\!

## `testing.base`

<div class="automodule">

fabric.testing.base

</div>

## `testing.fixtures`

<div class="automodule">

fabric.testing.fixtures

</div>

---

transfer.md

---

# `transfer`

<div class="automodule" data-member-order="bysource">

fabric.transfer

</div>

---

tunnels.md

---

# `tunnels`

<div class="automodule">

fabric.tunnels

</div>

---

util.md

---

# `util`

<div class="automodule">

fabric.util

</div>

---

cli.md

---

# Command-line interface

This page documents the details of Fabric's command-line interface, `fab`.

## Options & arguments

<div class="note">

<div class="title">

Note

</div>

By default, `fab` honors all of the same CLI options as \[Invoke's 'inv' program \<inv\>\](\#invoke's

</div>

\----'inv'-program-\<inv\>); only additions and overrides are listed here\!

> For example, Fabric implements `--prompt-for-passphrase` and `--prompt-for-login-password` because they are SSH specific, but it inherits a related option -- \[--prompt-for-sudo-password \<prompt-for-sudo-password\>\](\#--prompt-for-sudo-password

  - \----\<prompt-for-sudo-password\>) -- from Invoke, which handles sudo autoresponse  
    concerns.

<div class="option">

\-H, --hosts

Takes a comma-separated string listing hostnames against which tasks should be executed, in serial. See \[runtime-hosts\](\#runtime-hosts).

</div>

<div class="option">

\-i, --identity

Overrides the `key_filename` value in the `connect_kwargs` config setting (which is read by <span class="title-ref">.Connection</span>, and eventually makes its way into Paramiko; see the docstring for <span class="title-ref">.Connection</span> for details.)

Typically this can be thought of as identical to `ssh -i <path>`, i.e. supplying a specific, runtime private key file. Like `ssh -i`, it builds an iterable of strings and may be given multiple times.

New in version 3.1: this also ends up in the `authentication.identities` \[configuration value \</concepts/configuration\>\](configuration value \</concepts/configuration\>.md) and will be referenced by <span class="title-ref">fabric.auth.OpenSSHAuthStrategy</span>, if in use.

Default: `[]`.

</div>

<div class="option">

\--prompt-for-login-password

Causes Fabric to prompt 'up front' for a value to store as the `connect_kwargs.password` config setting (used by Paramiko when authenticating via passwords and, in some versions, also used for key passphrases.) Useful if you do not want to configure such values in on-disk conf files or via shell environment variables.

</div>

<div class="option">

\--prompt-for-passphrase

Causes Fabric to prompt 'up front' for a value to store as the `connect_kwargs.passphrase` config setting (used by Paramiko to decrypt private key files.) Useful if you do not want to configure such values in on-disk conf files or via shell environment variables.

</div>

<div class="option">

\-S, --ssh-config

Takes a path to load as a runtime SSH config file. See \[ssh-config\](\#ssh-config).

</div>

<div class="option">

\-t, --connect-timeout

Takes an integer of seconds after which connection should time out. Supplies the default value for the `timeouts.connect` config setting.

</div>

## Seeking & loading tasks

`fab` follows all the same rules as Invoke's \[collection loading \<collection-discovery\>\](\#collection-loading \<collection-discovery\>), with the sole exception that the default collection name sought is `fabfile` instead of `tasks`. Thus, whenever Invoke's documentation mentions `tasks` or `tasks.py`, Fabric substitutes `fabfile` / `fabfile.py`.

For example, if your current working directory is `/home/myuser/projects/mywebapp`, running `fab --list` will cause Fabric to look for `/home/myuser/projects/mywebapp/fabfile.py` (or `/home/myuser/projects/mywebapp/fabfile/__init__.py` - Python's import system treats both the same). If it's not found there, `/home/myuser/projects/fabfile.py` is sought next; and so forth.

## Runtime specification of host lists

While advanced use cases may need to take matters into their own hands, you can go reasonably far with the core `--hosts` flag, which specifies one or more hosts the given task(s) should execute against.

By default, execution is a serial process: for each task on the command line, run it once for each host given to `--hosts`. Imagine tasks that simply print `Running <task name> on <host>!`:

    $ fab --hosts host1,host2,host3 taskA taskB
    Running taskA on host1!
    Running taskA on host2!
    Running taskA on host3!
    Running taskB on host1!
    Running taskB on host2!
    Running taskB on host3!

<div class="note">

<div class="title">

Note

</div>

When `--hosts` is not given, `fab` behaves similarly to Invoke's \[command-line interface \<inv\>\](\#command-line-interface-\<inv\>), generating regular instances of <span class="title-ref">\~invoke.context.Context</span> instead of <span class="title-ref">Connections \<.Connection\></span>.

</div>

## Executing arbitrary/ad-hoc commands

`fab` leverages a lesser-known command line convention and may be called in the following manner:

    $ fab [options] -- [shell command]

where everything after the `--` is turned into a temporary <span class="title-ref">.Connection.run</span> call, and is not parsed for `fab` options. If you've specified a host list via an earlier task or the core CLI flags, this usage will act like a one-line anonymous task.

For example, let's say you wanted kernel info for a bunch of systems:

    $ fab -H host1,host2,host3 -- uname -a

Such a command is equivalent to the following Fabric library code:

    from fabric import Group
    
    Group('host1', 'host2', 'host3').run("uname -a")

Most of the time you will want to just write out the task in your fabfile (anything you use once, you're likely to use again) but this feature provides a handy, fast way to dash off an SSH-borne command while leveraging predefined connection settings.

---

authentication.md

---

# Authentication

Even in the 'vanilla' OpenSSH client, authenticating to remote servers involves multiple potential sources for secrets and configuration; Fabric not only supports most of those, but has more of its own. This document outlines the available methods for setting authentication secrets.

<div class="note">

<div class="title">

Note

</div>

Since Fabric itself tries not to reinvent too much Paramiko functionality, most of the time configuring authentication values boils down to "how to set keyword argument values for <span class="title-ref">SSHClient.connect \<paramiko.client.SSHClient.connect\></span>", which in turn means to set values inside either the `connect_kwargs` \[config \</concepts/configuration\>\](config \</concepts/configuration\>.md) subtree, or the `connect_kwargs` keyword argument of <span class="title-ref">.Connection</span>.

</div>

## Private key files

Private keys stored on-disk are probably the most common auth mechanism for SSH. Fabric offers multiple methods of configuring which paths to use, most of which end up merged into one list of paths handed to `SSHClient.connect(key_filename=[...])`, in the following order:

  - If a `key_filename` key exists in the `connect_kwargs` argument to <span class="title-ref">.Connection</span>, they come first in the list. (This is basically the "runtime" option for non-CLI users.)
  - The config setting `connect_kwargs.key_filename` can be set in a number of ways (as per the \[config docs \</concepts/configuration\>\](config docs \</concepts/configuration\>.md)) including via the `--identity` CLI flag (which sets the `overrides` level of the config; so when this flag is used, key filename values from other config sources will be overridden.) This value comes next in the overall list.
  - Using an \[ssh\_config \<ssh-config\>\](\#ssh\_config-\<ssh-config\>) file with `IdentityFile` directives lets you share configuration with other SSH clients; such values come last.

### Encryption passphrases

If your private key file is protected via a passphrase, it can be supplied in a handful of ways:

  - The `connect_kwargs.passphrase` config option is the most direct way to supply a passphrase to be used automatically.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    Using actual on-disk config files for this type of material isn't always wise, but recall that the \[configuration system \</concepts/configuration\>\](configuration system \</concepts/configuration\>.md) is capable of loading data from other sources, such as your shell environment or even arbitrary remote databases.
    
    </div>

  - If you prefer to enter the passphrase manually at runtime, you may use the command-line option `--prompt-for-passphrase`, which will cause Fabric to interactively prompt the user at the start of the process, and store the entered value in `connect_kwargs.passphrase` (at the 'overrides' level.)

## Private key objects

Instantiate your own <span class="title-ref">PKey \<paramiko.pkey.PKey\></span> object (see its subclasses' API docs for details) and place it into `connect_kwargs.pkey`. That's it\! You'll be responsible for any handling of passphrases, if the key material you're loading (these classes can load from file paths or strings) is encrypted.

## SSH agents

By default (similar to how OpenSSH behaves) Paramiko will attempt to connect to a running SSH agent (Unix style, e.g. a live `SSH_AUTH_SOCK`, or Pageant if one is on Windows). This can be disabled by setting `connect_kwargs.allow_agent` to `False`.

## Passwords

Password authentication is relatively straightforward:

  - You can configure it via `connect_kwargs.password` directly.
  - If you want to be prompted for it at the start of a session, specify `--prompt-for-login-password`.

## GSSAPI

Fabric doesn't provide any extra GSSAPI support on top of Paramiko's existing connect-time parameters (see e.g. `gss_kex`/`gss_auth`/`gss_host`/etc in <span class="title-ref">SSHClient.connect \<paramiko.client.SSHClient.connect\></span>) and the modules implementing the functionality itself (such as <span class="title-ref">paramiko.ssh\_gss</span>.) Thus, as usual, you should be looking to modify the `connect_kwargs` configuration tree.

---

configuration.md

---

# Configuration

## Basics

The heart of Fabric's configuration system (as with much of the rest of Fabric) relies on Invoke functionality, namely <span class="title-ref">invoke.config.Config</span> (technically, a lightweight subclass, <span class="title-ref">fabric.config.Config</span>). For practical details on what this means re: configuring Fabric's behavior, please see \[Invoke's configuration documentation \<invoke:configuration\>\](\#invoke's configuration-documentation-\<invoke:configuration\>).

The primary differences from that document are as follows:

  - The configuration file paths sought are all named `fabric.*` instead of `invoke.*` - e.g. `/etc/fabric.yml` instead of `/etc/invoke.yml`, `~/.fabric.py` instead of `~/.invoke.py`, etc.

<!-- end list -->

  - \* In addition to \[Invoke's own default configuration values  
    \<invoke:default-values\>\](\#invoke's-own-default-configuration-values

  - \--\<invoke:default-values\>), Fabric merges in some of its own, such as the fact  
    that SSH's default port number is 22. See \[default-values\](\#default-values) for details.

  - \* Fabric has facilities for loading SSH config files, and will automatically  
    create (or update) a configuration subtree on a per <span class="title-ref">Connection \<fabric.connection.Connection\></span> basis, loaded with the interpreted SSH configuration for that specific host (since an SSH config file is only ever useful via such a lens). See \[ssh-config\](\#ssh-config).

  - \* Fabric plans to offer a framework for managing per-host and  
    per-host-collection configuration details and overrides, though this is not yet implemented (it will be analogous to, but improved upon, the `env.hosts` and `env.roles` structures from Fabric 1.x).
    
    >   - This functionality will supplement that of the SSH config loading described earlier; we expect most users will prefer to configure as much as possible via an SSH config file, but not all Fabric settings have `ssh_config` analogues, nor do all use cases fit neatly into such files.

## Default configuration values

### Overrides of Invoke-level defaults

  - `run.replace_env`: defaults to `True`, instead of `False`, so that remote commands run with a 'clean', empty environment instead of inheriting a copy of the current process' environment.
    
    This is for security purposes: leaking local environment data remotely by default would be unsanitary. It's also compatible with the behavior of OpenSSH.
    
    <div class="seealso">
    
    The warning under <span class="title-ref">paramiko.channel.Channel.set\_environment\_variable</span>.
    
    </div>
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    This is currently accomplished with a keyword argument override, as the config setting itself was applying to both `run` and `local`. Future updates will ensure the two methods use separate config values.
    
    </div>

### Extensions to Invoke-level defaults

  - `runners.remote`: In Invoke, the `runners` tree has a single subkey, `local` (mapping to <span class="title-ref">\~invoke.runners.Local</span>). Fabric adds this new subkey, `remote`, which is mapped to <span class="title-ref">\~fabric.runners.Remote</span>.

### New default values defined by Fabric

<div class="note">

<div class="title">

Note

</div>

Most of these settings are also available in the constructor of <span class="title-ref">.Connection</span>, if they only need modification on a per-connection basis.

</div>

<div class="warning">

<div class="title">

Warning

</div>

Many of these are also configurable via \[ssh\_config files \<ssh-config\>\](\#ssh\_config-files

</div>

  - \----\<ssh-config\>). **Such values take precedence over those defined via the core configuration**, so make sure you're aware of whether you're loading  
    such files (or \[disable them to be sure \<disabling-ssh-config\>\](\#disable-them-to-be-sure-\<disabling-ssh-config\>)).

<!-- end list -->

  - `authentication`: Authentication-related options.
    
    >   - `identities`: A list of private key paths (<span class="title-ref">str</span> or <span class="title-ref">pathlib.Path</span>) to use for authentication. This is filled in by `fab -i <-i>` as well.
    >   - `strategy_class`: If given (defaults to `None`), must be a subclass of <span class="title-ref">\~paramiko.auth\_strategy.AuthStrategy</span>; when not `None`, triggers use of this new Paramiko authentication framework. Fabric 3.1 ships with <span class="title-ref">\~fabric.auth.OpenSSHAuthStrategy</span>; see its API doc entry for how this interacts with things like `connect_kwargs`.

  - `connect_kwargs`: Keyword arguments (<span class="title-ref">dict</span>) given to <span class="title-ref">SSHClient.connect \<paramiko.client.SSHClient.connect\></span> when <span class="title-ref">.Connection</span> performs that method call. This is often a way of supplying options Fabric has no native setting for. Default: `{}`.

  - `forward_agent`: Whether to attempt forwarding of your local SSH authentication agent to the remote end. Default: `False` (same as in OpenSSH.)

  - `gateway`: Used as the default value of the `gateway` kwarg for <span class="title-ref">.Connection</span>. May be any value accepted by that argument. Default: `None`.

<!-- end list -->

  - \- `load_ssh_configs`: Whether to automatically seek out \[SSH config  
    files \<ssh-config\>\](\#ssh-config

  - \--files-\<ssh-config\>). When `False`, no automatic loading occurs. Default:  
    `True`.

  - \- `port`: TCP port number used by <span class="title-ref">.Connection</span> objects when not otherwise  
    specified. Default: `22`.

  - \- `inline_ssh_env`: Boolean serving as global default for the value of  
    <span class="title-ref">.Connection</span>'s `inline_ssh_env` parameter; see its docs for details. Default: `True`.

  - \- `ssh_config_path`: Runtime SSH config path; see \[ssh-config\](\#ssh-config). Default:  
    `None`.

<!-- end list -->

  - `timeouts`: Various timeouts, specifically:
    
    >   - `connect`: Connection timeout, in seconds; defaults to `None`, meaning no timeout / block forever.

  - `user`: Username given to the remote `sshd` when connecting. Default: your local system username.

## Loading and using `ssh_config` files

### How files are loaded

Fabric uses Paramiko's SSH config file machinery to load and parse `ssh_config`-format files (following OpenSSH's behavior re: which files to load, when possible):

  - An already-parsed <span class="title-ref">\~paramiko.config.SSHConfig</span> object may be given to <span class="title-ref">.Config.\_\_init\_\_</span> via its `ssh_config` keyword argument; if this value is given, no files are loaded, even if they exist.

  - A runtime file path may be specified via configuration itself, as the `ssh_config_path` key; such a path will be loaded into a new <span class="title-ref">\~paramiko.config.SSHConfig</span> object at the end of <span class="title-ref">.Config.\_\_init\_\_</span> and no other files will be sought out.
    
    >   - It will be filled in by the `fab` CLI tool if the `--ssh-config` flag is given.

  - If no runtime config (object or path) was given to <span class="title-ref">.Config.\_\_init\_\_</span>, it will automatically seek out and load `~/.ssh/config` and/or `/etc/ssh/ssh_config`, if they exist (and in that order.)
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    Rules present in both files will result in the user-level file 'winning', as the first rule found during lookup is always used.
    
    </div>

  - If none of the above vectors yielded SSH config data, a blank/empty <span class="title-ref">\~paramiko.config.SSHConfig</span> is the final result.

  - Regardless of how the object was generated, it is exposed as `Config.base_ssh_config`.

### `Connection`'s use of `ssh_config` values

<span class="title-ref">.Connection</span> objects expose a per-host 'view' of their config's SSH data (obtained via <span class="title-ref">\~paramiko.config.SSHConfig.lookup</span>) as <span class="title-ref">.Connection.ssh\_config</span>. <span class="title-ref">.Connection</span> itself references these values as described in the following subsections, usually as simple defaults for the appropriate config key or parameter (`port`, `forward_agent`, etc.)

Unless otherwise specified, these values override regular configuration values for the same keys, but may themselves be overridden by <span class="title-ref">.Connection.\_\_init\_\_</span> parameters.

Take for example a `~/.fabric.yaml`:

``` yaml
user: foo
```

Absent any other configuration, `Connection('myhost')` connects as the `foo` user.

If we also have an `~/.ssh/config`:

    Host *
        User bar

then `Connection('myhost')` connects as `bar` (the SSH config wins over the Fabric config.)

*However*, in both cases, `Connection('myhost', user='biz')` will connect as `biz`.

<div class="note">

<div class="title">

Note

</div>

The below sections use capitalized versions of `ssh_config` keys for easier correlation with `man ssh_config`, **but** the actual <span class="title-ref">\~paramiko.config.SSHConfig</span> data structure is normalized to lowercase keys, since SSH config files are technically case-insensitive.

</div>

#### Connection parameters

  - `Hostname`: replaces the original value of `host` (which is preserved as `.original_host`.)
  - `Port`: supplies the default value for the `port` config option / parameter.
  - `User`: supplies the default value for the `user` config option / parameter.
  - `ConnectTimeout`: sets the default value for the `timeouts.connect` config option / `timeout` parameter.

#### Proxying

  - `ProxyCommand`: supplies default (string) value for `gateway`.
  - `ProxyJump`: supplies default (<span class="title-ref">Connection \<fabric.connection.Connection\></span>) value for `gateway`.
      - Nested-style `ProxyJump`, i.e. `user1@hop1.host,user2@hop2.host,...`, will result in an appropriate series of nested `gateway` values under the hood - as if the user had manually specified `Connecton(..., gateway=Connection('user1@hop1.host', gateway=Connection('user2@hop2.host', gateway=...)))`.

<div class="note">

<div class="title">

Note

</div>

If both are specified for a given host, `ProxyJump` will override `ProxyCommand`. This is slightly different from OpenSSH, where the order the directives are loaded determines which one wins. Doing so on our end (where we view the config as a dictionary structure) requires additional work.

</div>

#### Authentication

  - `ForwardAgent`: controls default behavior of `forward_agent`.
  - `IdentityFile`: appends to the `key_filename` key within `connect_kwargs` (similar to `--identity`.)

### Disabling (most) `ssh_config` loading

Users who need tighter control over how their environment gets configured may want to disable the automatic loading of system/user level SSH config files; this can prevent hard-to-expect errors such as a new user's `~/.ssh/config` overriding values that are being set in the regular config hierarchy.

To do so, simply set the top level config option `load_ssh_configs` to `False`.

<div class="note">

<div class="title">

Note

</div>

Changing this setting does *not* disable loading of runtime-level config files (e.g. via `-F`). If a user is explicitly telling us to load such a file, we assume they know what they're doing.

</div>

---

networking.md

---

# Networking

## SSH connection gateways

### Background

When connecting to well-secured networks whose internal hosts are not directly reachable from the Internet, a common pattern is "bouncing", "gatewaying" or "proxying" SSH connections via an intermediate host (often called a "bastion", "gateway" or "jump box").

Gatewaying requires making an initial/outer SSH connection to the gateway system, then using that connection as a transport for the "real" connection to the final/internal host.

At a basic level, one could `ssh gatewayhost`, then `ssh internalhost` from the resulting shell. This works for individual long-running sessions, but becomes a burden when it must be done frequently.

There are two gateway solutions available in Fabric, mirroring the functionality of OpenSSH's client: `ProxyJump` style (easier, less overhead, can be nested) or `ProxyCommand` style (more overhead, can't be nested, sometimes more flexible). Both support the usual range of configuration sources: Fabric's own config framework, SSH config files, or runtime parameters.

### `ProxyJump`

This style of gateway uses the SSH protocol's `direct-tcpip` channel type - a lightweight method of requesting that the gateway's `sshd` open a connection on our behalf to another system. (This has been possible in OpenSSH server for a long time; support in OpenSSH's client is new as of 7.3.)

Channel objects (instances of <span class="title-ref">paramiko.channel.Channel</span>) implement Python's socket API and are thus usable in place of real operating system sockets for nearly any Python code.

`ProxyJump` style gatewaying is simple to use: create a new <span class="title-ref">.Connection</span> object parameterized for the gateway, and supply it as the `gateway` parameter when creating your inner/real \`.Connection\`:

    from fabric import Connection
    
    c = Connection('internalhost', gateway=Connection('gatewayhost'))

As with any other <span class="title-ref">.Connection</span>, the gateway connection may be configured with its own username, port number, and so forth. (This includes `gateway` itself - they can be chained indefinitely\!)

### `ProxyCommand`

The traditional OpenSSH command-line client has long offered a `ProxyCommand` directive (see [man ssh\_config](http://man.openbsd.org/ssh_config)), which pipes the inner connection's input and output through an arbitrary local subprocess.

Compared to `ProxyJump` style gateways, this adds overhead (the extra subprocess) and can't easily be nested. In trade, it allows for advanced tricks like use of SOCKS proxies, or custom filtering/gatekeeping applications.

`ProxyCommand` subprocesses are typically another `ssh` command, such as `ssh -W %h:%p gatewayhost`; or (on SSH versions lacking `-W`) the widely available `netcat`, via `ssh gatewayhost nc %h %p`.

Fabric supports `ProxyCommand` by accepting command string objects in the `gateway` kwarg of <span class="title-ref">.Connection</span>; this is used to populate a <span class="title-ref">paramiko.proxy.ProxyCommand</span> object at connection time.

### Additional concerns

If you're unsure which of the two approaches to use: use `ProxyJump` style. It performs better, uses fewer resources on your local system, and has an easier-to-use API.

<div class="warning">

<div class="title">

Warning

</div>

Requesting both types of gateways simultaneously to the same host (i.e. supplying a <span class="title-ref">.Connection</span> as the `gateway` via kwarg or config, *and* loading a config file containing `ProxyCommand`) is considered an error and will result in an exception.

</div>

---

getting-started.md

---

# Getting started

Welcome\! This tutorial highlights Fabric's core features; for further details, see the links within, or the documentation index which has links to conceptual and API doc sections.

## A note about imports

Fabric composes a couple of other libraries as well as providing its own layer on top; user code will most often import from the `fabric` package, but you'll sometimes import directly from `invoke` or `paramiko` too:

  - [Invoke](https://www.pyinvoke.org) implements CLI parsing, task organization, and shell command execution (a generic framework plus specific implementation for local commands.)
    
    >   - Anything that isn't specific to remote systems tends to live in Invoke, and it is often used standalone by programmers who don't need any remote functionality.
    >   - Fabric users will frequently import Invoke objects, in cases where Fabric itself has no need to subclass or otherwise modify what Invoke provides.

  - [Paramiko](https://www.paramiko.org) implements low/mid level SSH functionality - SSH and SFTP sessions, key management, etc.
    
    >   - Fabric mostly uses this under the hood; users will only rarely import from Paramiko directly.

  - Fabric glues the other libraries together and provides its own high level objects too, e.g.:
    
    >   - Subclassing Invoke's context and command-runner classes, wrapping them around Paramiko-level primitives;
    >   - Extending Invoke's configuration system by using Paramiko's `ssh_config` parsing machinery;
    >   - Implementing new high-level primitives of its own, such as port-forwarding context managers. (These may, in time, migrate downwards into Paramiko.)

## Run commands via Connections and `run`

The most basic use of Fabric is to execute a shell command on a remote system via SSH, then (optionally) interrogate the result. By default, the remote program's output is printed directly to your terminal, *and* captured. A basic example:

<div class="testsetup">

basic

mock = MockRemote() mock.expect(out=b'Linuxn')

</div>

<div class="testcleanup">

basic

mock.stop()

</div>

<div class="doctest">

basic

\>\>\> from fabric import Connection \>\>\> c = Connection('web1') \>\>\> result = c.run('uname -s') Linux \>\>\> result.stdout.strip() == 'Linux' True \>\>\> result.exited 0 \>\>\> result.ok True \>\>\> result.command 'uname -s' \>\>\> result.connection \<Connection host=web1\> \>\>\> result.connection.host 'web1'

</div>

Meet <span class="title-ref">.Connection</span>, which represents an SSH connection and provides the core of Fabric's API, such as <span class="title-ref">\~.Connection.run</span>. <span class="title-ref">.Connection</span> objects need at least a hostname to be created successfully, and may be further parameterized by username and/or port number. You can give these explicitly via args/kwargs:

    Connection(host='web1', user='deploy', port=2202)

Or by stuffing a `[user@]host[:port]` string into the `host` argument (though this is purely convenience; always use kwargs whenever ambiguity appears\!):

    Connection('deploy@web1:2202')

<span class="title-ref">.Connection</span> objects' methods (like <span class="title-ref">\~.Connection.run</span>) usually return instances of <span class="title-ref">invoke.runners.Result</span> (or subclasses thereof) exposing the sorts of details seen above: what was requested, what happened while the remote action occurred, and what the final result was.

<div class="note">

<div class="title">

Note

</div>

Many lower-level SSH connection arguments (such as private keys and timeouts) can be given directly to the SSH backend by using the \[connect\_kwargs argument \<connect\_kwargs-arg\>\](\#connect\_kwargs-argument-\<connect\_kwargs-arg\>).

</div>

## Superuser privileges via auto-response

Need to run things as the remote system's superuser? You could invoke the `sudo` program via <span class="title-ref">\~.Connection.run</span>, and (if your remote system isn't configured with passwordless sudo) respond to the password prompt by hand, as below. (Note how we need to request a remote pseudo-terminal; most `sudo` implementations get grumpy at password-prompt time otherwise.)

<div class="testsetup">

sudo-by-hand

mock = MockRemote() mock.expect(commands=( Command(out=b'\[sudo\] password:n'), Command(out=b'1001n'), ))

</div>

<div class="testcleanup">

sudo-by-hand

mock.stop()

</div>

<div class="doctest">

sudo-by-hand

\>\>\> from fabric import Connection \>\>\> c = Connection('db1') \>\>\> c.run('sudo useradd mydbuser', pty=True) \[sudo\] password: \<Result cmd='sudo useradd mydbuser' exited=0\> \>\>\> c.run('id -u mydbuser') 1001 \<Result cmd='id -u mydbuser' exited=0\>

</div>

Giving passwords by hand every time can get old; thankfully Invoke's powerful command-execution functionality includes the ability to \[auto-respond \<autoresponding\>\](\#auto-respond \<autoresponding\>) to program output with pre-defined input. We can use this for `sudo`:

<div class="testsetup">

sudo-with-responses

mock = MockRemote() mock.expect(out=b'\[sudo\] password:nrootn', [in]()=b'mypasswordn')

</div>

<div class="testcleanup">

sudo-with-responses

mock.stop()

</div>

<div class="doctest">

sudo-with-responses

\>\>\> from invoke import Responder \>\>\> from fabric import Connection \>\>\> c = Connection('host') \>\>\> sudopass = Responder( ... pattern=r'\[sudo\] password:', ... response='mypasswordn', ... ) \>\>\> c.run('sudo whoami', pty=True, watchers=\[sudopass\]) \[sudo\] password: root \<Result cmd='sudo whoami' exited=0\>

</div>

It's difficult to show in a snippet, but when the above was executed, the user didn't need to type anything; `mypassword` was sent to the remote program automatically. Much easier\!

### The `sudo` helper

Using watchers/responders works well here, but it's a lot of boilerplate to set up every time - especially as real-world use cases need more work to detect failed/incorrect passwords.

To help with that, Invoke provides a <span class="title-ref">Context.sudo \<invoke.context.Context.sudo\></span> method which handles most of the boilerplate for you (as <span class="title-ref">.Connection</span> subclasses <span class="title-ref">\~invoke.context.Context</span>, it gets this method for free.) <span class="title-ref">\~invoke.context.Context.sudo</span> doesn't do anything users can't do themselves - but as always, common problems are best solved with commonly shared solutions.

All the user needs to do is ensure the `sudo.password` \[configuration value \</concepts/configuration\>\](configuration value \</concepts/configuration\>.md) is filled in (via config file, environment variable, or `--prompt-for-sudo-password`) and <span class="title-ref">.Connection.sudo</span> handles the rest. For the sake of clarity, here's an example where a library/shell user performs their own <span class="title-ref">getpass</span>-based password prompt:

<div class="testsetup">

sudo

from unittest.mock import patch gp\_patcher = patch('getpass.getpass', side\_effect=lambda x: print(x)) gp\_patcher.start() mock = MockRemote() mock.expect(commands=( Command(out=b'rootn'), Command(), Command(out=b'1001n'), ))

</div>

<div class="testcleanup">

sudo

mock.stop() gp\_patcher.stop()

</div>

<div class="doctest" data-options="+ELLIPSIS">

sudo

\>\>\> import getpass \>\>\> from fabric import Connection, Config \>\>\> sudo\_pass = getpass.getpass("What's your sudo password?") What's your sudo password? \>\>\> config = Config(overrides={'sudo': {'password': sudo\_pass}}) \>\>\> c = Connection('db1', config=config) \>\>\> c.sudo('whoami', hide='stderr') root \<Result cmd="...whoami" exited=0\> \>\>\> c.sudo('useradd mydbuser') \<Result cmd="...useradd mydbuser" exited=0\> \>\>\> c.run('id -u mydbuser') 1001 \<Result cmd='id -u mydbuser' exited=0\>

</div>

We filled in the sudo password up-front at runtime in this example; in real-world situations, you might also supply it via the configuration system (perhaps using environment variables, to avoid polluting config files), or ideally, use a secrets management system.

## Transfer files

Besides shell command execution, the other common use of SSH connections is file transfer; <span class="title-ref">.Connection.put</span> and <span class="title-ref">.Connection.get</span> exist to fill this need. For example, say you had an archive file you wanted to upload:

<div class="testsetup">

transfers

mock = MockRemote(enable\_sftp=True)

</div>

<div class="testcleanup">

transfers

mock.stop()

</div>

<div class="doctest">

transfers

\>\>\> from fabric import Connection \>\>\> result = Connection('web1').put('myfiles.tgz', remote='/opt/mydata/') \>\>\> print("Uploaded {0.local} to {0.remote}".format(result)) Uploaded /local/myfiles.tgz to /opt/mydata/

</div>

These methods typically follow the behavior of `cp` and `scp`/`sftp` in terms of argument evaluation - for example, in the above snippet, we omitted the filename part of the remote path argument.

## Multiple actions

One-liners are good examples but aren't always realistic use cases - one typically needs multiple steps to do anything interesting. At the most basic level, you could do this by calling <span class="title-ref">.Connection</span> methods multiple times:

    from fabric import Connection
    c = Connection('web1')
    c.put('myfiles.tgz', '/opt/mydata')
    c.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')

You could (but don't have to) turn such blocks of code into functions, parameterized with a <span class="title-ref">.Connection</span> object from the caller, to encourage reuse:

    def upload_and_unpack(c):
        c.put('myfiles.tgz', '/opt/mydata')
        c.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')

As you'll see below, such functions can be handed to other API methods to enable more complex use cases as well.

## Multiple servers

Most real use cases involve doing things on more than one server. The straightforward approach could be to iterate over a list or tuple of <span class="title-ref">.Connection</span> arguments (or <span class="title-ref">.Connection</span> objects themselves, perhaps via `map`):

    >>> from fabric import Connection
    >>> for host in ('web1', 'web2', 'mac1'):
    ...     result = Connection(host).run('uname -s')
    ...     print("{}: {}".format(host, result.stdout.strip()))
    ...
    ...
    web1: Linux
    web2: Linux
    mac1: Darwin

This approach works, but as use cases get more complex it can be useful to think of a collection of hosts as a single object. Enter <span class="title-ref">.Group</span>, a class wrapping one-or-more <span class="title-ref">.Connection</span> objects and offering a similar API; specifically, you'll want to use one of its concrete subclasses like <span class="title-ref">.SerialGroup</span> or <span class="title-ref">.ThreadingGroup</span>.

The previous example, using <span class="title-ref">.Group</span> (<span class="title-ref">.SerialGroup</span> specifically), looks like this:

    >>> from fabric import SerialGroup as Group
    >>> results = Group('web1', 'web2', 'mac1').run('uname -s')
    >>> print(results)
    <GroupResult: {
        <Connection 'web1'>: <CommandResult 'uname -s'>,
        <Connection 'web2'>: <CommandResult 'uname -s'>,
        <Connection 'mac1'>: <CommandResult 'uname -s'>,
    }>
    >>> for connection, result in results.items():
    ...     print("{0.host}: {1.stdout}".format(connection, result))
    ...
    ...
    web1: Linux
    web2: Linux
    mac1: Darwin

Where <span class="title-ref">.Connection</span> methods return single `Result` objects (e.g. <span class="title-ref">fabric.runners.Result</span>), <span class="title-ref">.Group</span> methods return <span class="title-ref">.GroupResult</span> - <span class="title-ref">dict</span>-like objects offering access to individual per-connection results as well as metadata about the entire run.

When any individual connections within the <span class="title-ref">.Group</span> encounter errors, the <span class="title-ref">.GroupResult</span> is lightly wrapped in a <span class="title-ref">.GroupException</span>, which is raised. Thus the aggregate behavior resembles that of individual <span class="title-ref">.Connection</span> methods, returning a value on success or raising an exception on failure.

## Bringing it all together

Finally, we arrive at the most realistic use case: you've got a bundle of commands and/or file transfers and you want to apply it to multiple servers. You *could* use multiple <span class="title-ref">.Group</span> method calls to do this:

    from fabric import SerialGroup as Group
    pool = Group('web1', 'web2', 'web3')
    pool.put('myfiles.tgz', '/opt/mydata')
    pool.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')

That approach falls short as soon as logic becomes necessary - for example, if you only wanted to perform the copy-and-untar above when `/opt/mydata` is empty. Performing that sort of check requires execution on a per-server basis.

You could fill that need by using iterables of <span class="title-ref">.Connection</span> objects (though this foregoes some benefits of using <span class="title-ref">Groups \<.Group\></span>):

    from fabric import Connection
    for host in ('web1', 'web2', 'web3'):
        c = Connection(host)
        if c.run('test -f /opt/mydata/myfile', warn=True).failed:
            c.put('myfiles.tgz', '/opt/mydata')
            c.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')

Alternatively, remember how we used a function in that earlier example? You can go that route instead:

    from fabric import SerialGroup as Group
    
    def upload_and_unpack(c):
        if c.run('test -f /opt/mydata/myfile', warn=True).failed:
            c.put('myfiles.tgz', '/opt/mydata')
            c.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')
    
    for connection in Group('web1', 'web2', 'web3'):
        upload_and_unpack(connection)

The only convenience this final approach lacks is a useful analogue to <span class="title-ref">.Group.run</span> - if you want to track the results of all the `upload_and_unpack` call as an aggregate, you have to do that yourself. Look to future feature releases for more in this space\!

## Addendum: the `fab` command-line tool

It's often useful to run Fabric code from a shell, e.g. deploying applications or running sysadmin jobs on arbitrary servers. You could use regular \[Invoke tasks \<defining-and-running-task-functions\>\](\#invoke-tasks-\<defining-and-running-task-functions\>) with Fabric library code in them, but another option is Fabric's own "network-oriented" tool, `fab`.

`fab` wraps Invoke's CLI mechanics with features like host selection, letting you quickly run tasks on various servers - without having to define `host` kwargs on all your tasks or similar.

<div class="note">

<div class="title">

Note

</div>

This mode was the primary API of Fabric 1.x; as of 2.0 it's just a convenience. Whenever your use case falls outside these shortcuts, it should be easy to revert to the library API directly (with or without Invoke's less opinionated CLI tasks wrapped around it).

</div>

For a final code example, let's adapt the previous example into a `fab` task module called `fabfile.py`:

    from fabric import task
    
    @task
    def upload_and_unpack(c):
        if c.run('test -f /opt/mydata/myfile', warn=True).failed:
            c.put('myfiles.tgz', '/opt/mydata')
            c.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')

Not hard - all we did was copy our temporary task function into a file and slap a decorator on it. <span class="title-ref">\~fabric.tasks.task</span> tells the CLI machinery to expose the task on the command line:

    $ fab --list
    Available tasks:
    
      upload_and_unpack

Then, when `fab` actually invokes a task, it knows how to stitch together arguments controlling target servers, and run the task once per server. To run the task once on a single server:

    $ fab -H web1 upload_and_unpack

When this occurs, `c` inside the task is set, effectively, to `Connection("web1")` - as in earlier examples. Similarly, you can give more than one host, which runs the task multiple times, each time with a different <span class="title-ref">.Connection</span> instance handed in:

    $ fab -H web1,web2,web3 upload_and_unpack

---

index.md

---

# Welcome to Fabric's documentation\!

This site covers Fabric's usage & API documentation. For basic info on what Fabric is, including its public changelog & how the project is maintained, please see [the main project website](http://fabfile.org).

## Getting started

Many core ideas & API calls are explained in the tutorial/getting-started document:

<div class="toctree" data-maxdepth="2">

getting-started

</div>

## Upgrading from 1.x

Looking to upgrade from Fabric 1.x? See our \[detailed upgrade guide \<upgrading\>\](\#detailed-upgrade-guide \<upgrading\>) on the nonversioned main project site.

## Concepts

Dig deeper into specific topics:

<div class="toctree" data-maxdepth="2" data-glob="">

concepts/\*

</div>

## The `fab` CLI tool

Details on the CLI interface to Fabric, how it extends Invoke's CLI machinery, and examples of shortcuts for executing tasks across hosts or groups.

<div class="toctree">

cli

</div>

## API

Know what you're looking for & just need API details? View our auto-generated API documentation:

<div class="toctree" data-maxdepth="1" data-glob="">

api/\*

</div>

---

upgrading.md

---

- orphan

# Upgrading - moved\!

If you're here, you're probably following an old link or bookmark. The upgrading page has moved to the unversioned main project site: \[upgrading\](\#upgrading). Please update your bookmarks and links\!

---

changelog-v1.md

---

# Changelog (1.x)

<div class="note">

<div class="title">

Note

</div>

This is the changelog for the legacy 1.x version of Fabric. For the current (2.0+) changelog, please see \[the main changelog \</changelog\>\](the main changelog \</changelog\>.md).

</div>

  - `1.15.0 <2022-04-07>`

  - `-` Merge the longstanding `fabric3` fork back into our v1 branch so users who'd rather port Fabric 1.x code to Python 3 before upgrading to Fabric 2.x, are able to do so in a "blessed" manner.
    
    This change includes making sure that the delta between the fork and our v1 branch still functions correctly & passes tests on both interpreters. It also includes a basic CircleCI configuration to test on 3.6, 3.7 and 3.8, not that we expect to be hosting many future commits on this side...
    
    Major major thanks to Mathias Ertl for his work on the fork, all the contributors on his side of the house during that time, and to Zachary Vance for getting the reconciliation process rolling.
    
    The changes folded in as part of this work (mostly taken from Mathias' changelog) are as follows:
    
      - Installation now requires Paramiko 1.17.0 or later.
    
      - Fix `UnicodeDecodeError` when receiving remote data.
    
      - Clean up imports in main code base and test suite.
    
      - Add Python 2/3/3.5 classifiers in `setup.py`.
    
      - Replace `fabric.utils.RingBuffer` with `collections.deque` from stdlib.
    
      - Under Python 3, Fabric implements its own version of `contextlib.nested` based on `contextlib.ExitStack`, since it's no longer available in Python3.
        
        >   - Please note that it was removed with good reason, we do not encourage you use it.

  - `1.14.1 <2018-11-27>`

  - `1341` (via `1586`) Attempt to `rm -f` the temporary file used by `put`'s sudo mode, when exceptions are encountered; previously, the internal `sudo mv` call could potentially fail and leave the file around. Thanks to Andrei Sura for the report and Uku Loskit for the fix.

  - `1242` (via `1243`) \`\~fabric.contrib.project.rsync\_project\`: only supply the `-p <number>` option to generated `rsync` commands when the port number differs from the default; this allows removing `--rsh` entirely most of the time, and thus enables things like using rsync's daemon mode on the remote end. Reported & patched by Arnaud Rocher.

  - `1227` Remove a bash/zsh-ism from <span class="title-ref">\~fabric.contrib.files.upload\_template</span> when backing up the target file, preventing issues on simpler remote shells. Patch courtesy of Paul Chakravarti.

  - `983` Move a `getpass` import inside a Windows-oriented `try`/`except ImportError` so password prompting is less likely to explode on certain systems. Thanks to `@dongweiming` for the patch.

  - `- backported` Update packaging metadata so wheel archives include the `LICENSE` file.

  - `1.14.0 <2017-08-25>`

  - `1475` Honor `env.timeout` when opening new remote sessions (as opposed to the initial overall connection, which already honored timeout settings.) Thanks to `@EugeniuZ` for the report & `@jrmsgit` for the first draft of the patch.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    This feature only works with Paramiko 1.14.3 and above; if your Paramiko version is older, no timeout can be set, and the previous behavior will occur instead.
    
    </div>

  - `1.13.2 <2017-04-24>`

  - `1.12.2 <2017-04-24>`

  - `1542` (via `1543`) Catch Paramiko-level gateway connection errors (`ChannelError`) when raising `NetworkError`; this prevents an issue where gateway related issues were being treated as authentication errors. Thanks to Charlie Stanley for catch & patch.

  - `1555` Multiple simultaneous <span class="title-ref">\~fabric.operations.get</span> and/or <span class="title-ref">\~fabric.operations.put</span> with `use_sudo=True` and for the same remote host and path could fail unnecessarily. Thanks `@arnimarj` for the report and Pierce Lopez for the patch.

  - `1427` (via `1428`) Locate `.pyc` files when searching for fabfiles to load; previously we only used the presence of `.py` files to determine whether loading should be attempted. Credit: Ray Chen.

  - `1294` fix text escaping for <span class="title-ref">\~fabric.contrib.files.contains</span> and <span class="title-ref">\~fabric.contrib.files.append</span> which would fail if the text contained e.g. `>`. Thanks to `@ecksun` for report & Pierce Lopez for the patch.

  - `1065 backported` Fix incorrect SSH config reference in the docs for `env.keepalive`; it corresponds to `ServerAliveInterval`, not `ClientAliveInterval`. Credit: Harry Percival.

  - `1574` <span class="title-ref">\~fabric.contrib.project.upload\_project</span> failed for folder in current directory specified without any path separator. Thanks `@aidanmelen` for the report and Pierce Lopez for the patch.

  - `1590 backported` Replace a reference to `fab` in a test subprocess, to use the `python -m <package>` style instead; this allows `python setup.py test` to run the test suite without having Fabric already installed. Thanks to `@BenSturmfels` for catch & patch.

  - `- backported` Backport `1462` to 1.12.x (was previously only backported to 1.13.x.)

  - `1416 backported` Add explicit "Python 2 only" note to `setup.py` trove classifiers to help signal that fact to various info-gathering tools. Patch courtesy of Gavin Bisesi.

  - `1526` Disable use of PTY and shell for a background command execution within `contrib.sed`, preventing a small class of issues on some platforms/environments. Thanks to `@doflink` for the report and Pierce Lopez for the final patch.

  - `1539 backported` Add documentation for `env.output_prefix`. Thanks `@jphalip`.

  - `1514` Compatibility with Python 2.5 was broken by using the `format()` method of a string (only in 1.11+). Report by `@pedrudehuere`.

  - `1.13.1 <2016-12-09>`

  - `1462` Make a PyCrypto-specific import and method call optional to avoid `ImportError` problems under Paramiko 2.x. Thanks to Alex Gaynor for catch & patch\!

  - `1.13.0 <2016-12-09>`

  - `1461` Update setup requirements to allow Paramiko 2.x, now that it's stable and been out in the wild for some time. Paramiko 1.x still works like it always did; the only change to Paramiko 2 was the backend moving from PyCrypto to Cryptography.
    
    <div class="warning">
    
    <div class="title">
    
    Warning
    
    </div>
    
    If you are upgrading an existing environment, the install dependencies have changed; please see Paramiko's installation docs for details: <http://www.paramiko.org/installing.html>
    
    </div>

  - `1.12.1 <2016-12-05>`

  - `1.11.3 <2016-12-05>`

  - `1.10.5 <2016-12-05>`

  - `1470` When using `fabric.operations.get` with glob expressions, a lack of matches for the glob would result in an empty file named after the glob expression (in addition to raising an error). This has been fixed so the empty file is no longer generated. Thanks to Georgy Kibardin for the catch & initial patch.

  - `1495` Update the internals of `fabric.contrib.files` so its members work with SSH servers running on Windows. Thanks to Hamdi Sahloul for the patch.

  - `1483 backported` (also re: `1386`, `1374`, `1300`) Add an FAQ about quote problems in remote `csh` causing issues with Fabric's shell-wrapping and quote-escaping. Thanks to Michael Radziej for the update.

  - `1379 backported` (also `1464`) Clean up a lot of unused imports and similar cruft (many found via `flake8 --select E4`). Thanks to Mathias Ertl for the original patches.

  - `1458` Detect `known_hosts`-related instances of `paramiko.SSHException` and prevent them from being handled like authentication errors (which is the default behavior). This fixes issues with incorrect password prompts or prompt-related exceptions when using `reject_unknown_hosts` and encountering missing or bad `known_hosts` entries. Thanks to Lukáš Doktor for catch & patch.

  - `1.12.0 <2016-07-25>`

  - `1.11.2 <2016-07-25>`

  - `1.10.4 <2016-07-25>`

  - `1491` Implement `sudo`-specific password caching. This can be used to work around issues where over-eager submission of `env.password` at login time causes authentication problems (e.g. during two-factor auth).

  - `1447` Fix a relative import in `fabric.network` to be correctly/consistently absolute instead. Thanks to `@bildzeitung` for catch & patch.

  - `1.11.1 <2016-04-09>`

  - `- (==1.11)` Bumped version to `1.11.1` due to apparently accidentally uploading a false `1.11.0` to PyPI sometime in the past (PyPI is secure & prevents reusing deleted filenames.) We have no memory of this, but databases don't lie\!

  - `1.11.0 <2016-04-09>`

  - `1.10.3 <2016-04-09>`

  - `1135` (via `1241`) Modified order of operations in `fabric.operations.run`/`fabric.operations.sudo` to apply environment vars before prefixing commands (instead of after). Report by `@warsamebashir`, patch by Curtis Mattoon.

  - `1203` (via `1240`) Add a `case_sensitive` kwarg to `fabric.contrib.files.contains` (which toggles use of `egrep -i`). Report by `@xoul`, patch by Curtis Mattoon.

  - `800` Add `capture_buffer_size` kwarg to `fabric.operations.run`/`fabric.operations.sudo` so users can limit memory usage in situations where subprocesses generate very large amounts of stdout/err. Thanks to Jordan Starcher for the report & Omri Bahumi for an early version of the patchset.

  - `1161` Add `use_sudo` kwarg to `fabric.operations.reboot`. Credit: Bryce Verdier.

  - `943 backported` Tweak `env.warn_only` docs to note that it applies to all operations, not just `run`/`sudo`. Thanks `@akitada`.

  - `932` Add a `temp_dir` kwarg to `fabric.contrib.files.upload_template` which is passed into its inner `fabric.operations.put` call. Thanks to `@nburlett` for the patch.

  - `1257 backported` Add notes to the usage docs for `fab` regarding the program's exit status. Credit: `@koalaman`.

  - `1261` Expose Paramiko's Kerberos functionality as Fabric config vars & command-line options. Thanks to Ramanan Sivaranjan for catch & patch, and to Johannes Löthberg & Michael Bennett for additional testing.

  - `1271` Allow users whose fabfiles use `fabric.colors` to disable colorization at runtime by specifying `FABRIC_DISABLE_COLORS=1` (or any other non-empty value). Credit: Eric Berg.

  - `1326` Make `fabric.contrib.project.rsync_project` aware of `env.gateway`, using a `ProxyCommand` under the hood. Credit: David Rasch.

  - `1359` Add a more-visible top-level `CHANGELOG.rst` pointing users to the actual changelog stored within the Sphinx directory tree. Thanks to Jonathan Vanasco for catch & patch.

  - `1388` Expose Jinja's `keep_trailing_newline` parameter in `fabric.contrib.files.upload_template` so users can force template renders to preserve trailing newlines. Thanks to Chen Lei for the patch.

  - `1389 major` Gently overhaul SSH port derivation so it's less surprising; previously, any non-default value stored in `env.port` was overriding all SSH-config derived values. See the API docs for `fabric.network.normalize` for details on how it now behaves. Thanks to Harry Weppner for catch & patch.

  - `1454 backported` Remove use of `:option:` directives in the changelog, it's currently broken in modern Sphinx & doesn't seem to have actually functioned on Renaissance-era Sphinx either.

  - `1365` (via `1372`) Classic-style fabfiles (ones not using `@task`) erroneously included custom exception subclasses when collecting tasks. This is now fixed thanks to `@mattvonrocketstein`.

  - `1348` (via `1361`) Fix a bug in `fabric.operations.get` where remote file paths containing Python string formatting escape codes caused an exception. Thanks to `@natecode` for the report and Bradley Spink for the fix.

  - `1.10.2 <2015-06-19>`

  - `1325` Clarify `fabric.operations.put` docs re: the `mode` argument. Thanks to `@mjmare` for the catch.

  - `1318` Update functionality added in `1213` so abort error messages don't get printed twice (once by us, once by `sys.exit`) but the annotated exception error message is retained. Thanks to Felix Almeida for the report.

  - `1305` (also `1313`) Fix a couple minor issues with the operation of & demo code for the `JobQueue` class. Thanks to `@dioh` and Horst Gutmann for the report & Cameron Lane for the patch.

  - `980` (also `1312`) Redirect output of `cd` to `/dev/null` so users enabling bash's `CDPATH` (or similar features in other shells) don't have polluted output captures. Thanks to Alex North-Keys for the original report & Steve Ivy for the fix.

  - `1289` Fix "NameError: free variable referenced before assignment in enclosing scope". Thanks to `@SamuelMarks` for catch & patch.

  - `1286` (also `971`, `1032`) Recursively unwrap decorators instead of only unwrapping a single decorator level, when obtaining task docstrings. Thanks to Avishai Ish-Shalom for the original report & Max Kovgan for the patch.

  - `1273` Fix issue with ssh/config not having a cross-platform default path. Thanks to `@SamuelMarks` for catch & patch.

  - `1200` Introduced `exceptions` output level, so users don't have to deal with the debug output just to see tracebacks.

  - `1239` Update README to work better under raw docutils so the example code block is highlighted as Python on PyPI (and not just on our Sphinx-driven website). Thanks to Marc Abramowitz.

  - `1.10.1 <2014-12-19>`

  - `1.9.2 <2014-12-19>`

  - `1201` Don't naively glob all `fabric.operations.get` targets - only glob actual directories. This avoids incorrectly yielding permission errors in edge cases where a requested file is within a directory lacking the read permission bit. Thanks to Sassa Nf for the original report.

  - `1019` (also `1022`, `1186`) Fix "is a tty" tests in environments where streams (eg `sys.stdout`) have been replaced with objects lacking a `.isatty()` method. Thanks to Miki Tebeka for the original report, Lele Long for a subsequent patch, and Julien Phalip for the final/merged patch.

  - `1213 backported` Add useful exception message to the implicit `SystemExit` raised by Fabric's use of `sys.exit` inside the `fabric.api.abort` function. This allows client code catching `SystemExit` to have better introspection into the error. Thanks to Ioannis Panousis.

  - `1228` Update the `CommandTimeout` class so it has a useful `str` instead of appearing blank when caught by Fabric's top level exception handling. Catch & patch from Tomaz Muraus.

  - `1180` Fix issue with unicode steam outputs crashing if stream encoding type is None. Thanks to `@joekiller` for catch & patch.

  - `958 backported` Remove the Git SHA portion of our version string generation; it was rarely useful & occasionally caused issues for users with non-Git-based source checkouts.

  - `1229 backported` Add some missing API doc hyperlink references. Thanks to Tony Narlock.

  - `1226` Update `fabric.operations.get` to ensure that `env.user` has access to tempfiles before changing permissions. Also corrected permissions from 404 to 0400 to match comment. Patch by Curtis Mattoon; original report from Daniel Watkins.

  - `1.10.0 <2014-09-04>`

  - `1188 major` Update `fabric.operations.local` to close non-pipe file descriptors in the child process so subsequent calls to `fabric.operations.local` aren't blocked on e.g. already-connected network sockets. Thanks to Tolbkni Kao for catch & patch.

  - `700` Added `use_sudo` and `temp_dir` params to `fabric.operations.get`. This allows downloading files normally not accessible to the user using `sudo`. Thanks to Jason Coombs for initial report and to Alex Plugaru for the patch (`1121`).

  - `1098` Add support for dict style roledefs. Thanks to Jonas Lundberg.

  - `1090` Add option to skip unknown tasks. Credit goes to Jonas Lundberg.

  - `975` Fabric can now be invoked via `python -m fabric` in addition to the typical use of the `fab` entrypoint. Patch courtesy of Jason Coombs.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    This functionality is only available under Python 2.7.
    
    </div>

  - `1.9.1 <2014-08-06>`

  - `1.8.5 <2014-08-06>`

  - `1.7.5 <2014-08-06>`

  - `1165` Prevent infinite loop condition when a gateway host is enabled & the same host is in the regular target host list. Thanks to `@CzBiX` for catch & patch.

  - `1147` Use `stat` instead of `lstat` when testing directory-ness in the SFTP module. This allows recursive downloads to avoid recursing into symlinks unexpectedly. Thanks to Igor Kalnitsky for the patch.

  - `1146` Fix a bug where `fabric.contrib.files.upload_template` failed to honor `lcd` when `mirror_local_mode` is `True`. Thanks to Laszlo Marai for catch & patch.

  - `1134` Skip bad hosts when the tasks are executed in parallel. Thanks to Igor Maravić `@i-maravic`.

  - `852` Fix to respect `template_dir` for non Jinja2 templates in `fabric.contrib.files.upload_template`. Thanks to Adam Kowalski for the patch and Alex Plugaru for the initial test case.

  - `1096` Encode Unicode text appropriately for its target stream object to avoid issues on non-ASCII systems. Thanks to Toru Uetani for the original patch.

  - `1059` Update IPv6 support to work with link-local address formats. Fix courtesy of `@obormot`.

  - `1026` Fix a typo preventing quiet operation of `fabric.contrib.files.is_link`. Caught by `@dongweiming`.

  - `600` Clear out connection caches in full when prepping parallel-execution subprocesses. This avoids corner cases causing hangs/freezes due to client/socket reuse. Thanks to Ruslan Lutsenko for the initial report and Romain Chossart for the suggested fix.

  - `1167` Add Jinja to `test_requires` in `setup.py` for the couple of newish tests that now require it. Thanks to Kubilay Kocak for the catch.

  - `1.9.0 <2014-06-08>`

  - `1078` Add `.command` and `.real_command` attributes to `local` return value. Thanks to Alexander Teves (`@alexanderteves`) and Konrad Hałas (`@konradhalas`).

  - `938` Add an env var `env.effective_roles` specifying roles used in the currently executing command. Thanks to Piotr Betkier for the patch.

  - `1101` Reboot operation now supports custom command. Thanks to Jonas Lejon.

  - `1106` Fix a misleading/ambiguous example snippet in the `fab` usage docs to be clearer. Thanks to `@zed`.

  - `1.8.4 <2014-06-08>`

  - `1.7.4 <2014-06-08>`

  - `898` Treat paths that begin with tilde "\~" as absolute paths instead of relative. Thanks to Alex Plugaru for the patch and Dan Craig for the suggestion.

  - `1105 backported` Enhance `setup.py` to allow Paramiko 1.13+ under Python 2.6+. Thanks to to `@Arfrever` for catch & patch.

  - `1.8.3 <2014-03-21>`

  - `1.7.3 <2014-03-21>`

  - `- backported` Modified packaging data to reflect that Fabric requires Paramiko \< 1.13 (which dropped Python 2.5 support.)

  - `1082` Add `pty` passthrough kwarg to `fabric.contrib.files.upload_template`.

  - `1.8.2 <2014-02-14>`

  - `1.7.2 <2014-02-14>`

  - `955` Quote directories created as part of `put`'s recursive directory uploads when `use_sudo=True` so directories with shell meta-characters (such as spaces) work correctly. Thanks to John Harris for the catch.

  - `917` Correct an issue with `put(use_sudo=True, mode=xxx)` where the `chmod` was trying to apply to the wrong location. Thanks to Remco (`@nl5887`) for catch & patch.

  - `1046` Fix typo preventing use of ProxyCommand in some situations. Thanks to Keith Yang.

  - `1.8.1 <2013-12-24>`

  - `1.7.1 <2013-12-24>`

  - `1.6.4 <2013-12-24>` 956, 957

  - `1.5.5 <2013-12-24>` 956, 957

  - `956` Fix pty size detection when running inside Emacs. Thanks to `@akitada` for catch & patch.

  - `957` Fix bug preventing use of `env.gateway` with targets requiring password authentication. Thanks to Daniel González, `@Bengrunt` and `@adrianbn` for their bug reports.

  - `741` Add `env.prompts` dictionary, allowing users to set up custom prompt responses (similar to the built-in sudo prompt auto-responder.) Thanks to Nigel Owens and David Halter for the patch.

  - `965 major` Tweak IO flushing behavior when in linewise (& thus parallel) mode so interwoven output is less frequent. Thanks to `@akidata` for catch & patch.

  - `948` Handle connection failures due to server load and try connecting to hosts a number of times specified in `env.connection_attempts`.

  - `1.8.0 <2013-09-20>`

  - `931` Allow overriding of `abort` behavior via a custom exception-returning callable set as `env.abort_exception`. Thanks to Chris Rose for the patch.

  - `984 backported` Make this changelog easier to read\! Now with per-release sections, generated automatically from the old timeline source format.

  - `910` Added a keyword argument to rsync\_project to configure the default options. Thanks to `@moorepants` for the patch.

  - `1.7.0 <2013-07-26>`

  - `1.6.2 <2013-07-26>`

  - `925` Added `contrib.files.is_link`. Thanks to `@jtangas` for the patch.

  - `922` Task argument strings are now displayed when using `fab -d`. Thanks to Kevin Qiu for the patch.

  - `912` Leaving `template_dir` un-specified when using `upload_template` in Jinja mode used to cause `'NoneType' has no attribute 'startswith'` errors. This has been fixed. Thanks to Erick Yellott for catch & to Erick Yellott + Kevin Williams for patches.

  - `924` Add new env var option `colorize-errors` to enable coloring errors and warnings. Thanks to Aaron Meurer for the patch.

  - `593` Non-ASCII character sets in Jinja templates rendered within `upload_template` would cause `UnicodeDecodeError` when uploaded. This has been addressed by encoding as `utf-8` prior to upload. Thanks to Sébastien Fievet for the catch.

  - `908` Support loading SSH keys from memory. Thanks to Caleb Groom for the patch.

  - `171` Added missing cross-references from `env` variables documentation to corresponding command-line options. Thanks to Daniel D. Beck for the contribution.

  - `884` The password cache feature was not working correctly with password-requiring SSH gateway connections. That's fixed now. Thanks to Marco Nenciarini for the catch.

  - `826` Enable sudo extraction of compressed archive via `use_sudo` kwarg in `upload_project`. Thanks to `@abec` for the patch.

  - `694 major` Allow users to work around ownership issues in the default remote login directory: add `temp_dir` kwarg for explicit specification of which "bounce" folder to use when calling `put` with `use_sudo=True`. Thanks to Devin Bayer for the report & Dieter Plaetinck / Jesse Myers for suggesting the workaround.

  - `882` Fix a `get` bug regarding spaces in remote working directory names. Thanks to Chris Rose for catch & patch.

  - `1.6.1 <2013-05-23>`

  - `868` Substantial speedup of parallel tasks by removing an unnecessary blocking timeout in the `JobQueue` loop. Thanks to Simo Kinnunen for the patch.

  - `328` `lcd` was no longer being correctly applied to `upload_template`; this has been fixed. Thanks to Joseph Lawson for the catch.

  - `812` Add `use_glob` option to `put` so users trying to upload real filenames containing glob patterns (`*`, `[` etc) can disable the default globbing behavior. Thanks to Michael McHugh for the patch.

  - `864 major` Allow users to disable Fabric's auto-escaping in `run`/`sudo`. Thanks to Christian Long and Michael McHugh for the patch.

  - `870` Changes to shell env var escaping highlighted some extraneous and now damaging whitespace in `with path():`. This has been removed and a regression test added.

  - `871` Use of string mode values in `put(local, remote, mode="NNNN")` would sometimes cause `Unsupported operand` errors. This has been fixed.

  - `84 major` Fixed problem with missing -r flag in Mac OS X sed version. Thanks to Konrad Hałas for the patch.

  - `861` Gracefully handle situations where users give a single string literal to `env.hosts`. Thanks to Bill Tucker for catch & patch.

  - `367` Expand paths with tilde inside (`contrib.files`). Thanks to Konrad Hałas for catch & patch.

  - `845 backported` Downstream synchronization option implemented for `fabric.contrib.project.rsync_project`. Thanks to Antonio Barrero for the patch.

  - `1.6.0 <2013-03-01>`

  - `1.5.4 <2013-03-01>`

  - `844` Account for SSH config overhaul in Paramiko 1.10 by e.g. updating treatment of `IdentityFile` to handle multiple values. **This and related SSH config parsing changes are backwards incompatible**; we are including them in this release because they do fix incorrect, off-spec behavior.

  - `843` Ensure string `pool_size` values get run through `int()` before deriving final result (stdlib `min()` has odd behavior here...). Thanks to Chris Kastorff for the catch.

  - `839` Fix bug in `fabric.contrib.project.rsync_project` where IPv6 address were not always correctly detected. Thanks to Antonio Barrero for catch & patch.

  - `587` Warn instead of aborting when `env.use_ssh_config` is True but the configured SSH conf file doesn't exist. This allows multi-user fabfiles to enable SSH config without causing hard stops for users lacking SSH configs. Thanks to Rodrigo Pimentel for the report.

  - `821` Add `fabric.context_managers.remote_tunnel` to allow reverse SSH tunneling (exposing locally-visible network ports to the remote end). Thanks to Giovanni Bajo for the patch.

  - `823` Add `env.remote_interrupt` which controls whether Ctrl-C is forwarded to the remote end or is captured locally (previously, only the latter behavior was implemented). Thanks to Geert Jansen for the patch.

  - `1.5.3 <2013-01-28>`

  - `806` Force strings given to `getpass` during password prompts to be ASCII, to prevent issues on some platforms when Unicode is encountered. Thanks to Alex Louden for the patch.

  - `805` Update `fabric.context_managers.shell_env` to play nice with Windows (7, at least) systems and `fabric.operations.local`. Thanks to Fernando Macedo for the patch.

  - `654` Parallel runs whose sum total of returned data was large (e.g. large return values from the task, or simply a large number of hosts in the host list) were causing frustrating hangs. This has been fixed.

  - `402` Attempt to detect stale SSH sessions and reconnect when they arise. Thanks to `@webengineer` for the patch.

  - `791` Cast `fabric.operations.reboot`'s `wait` parameter to a numeric type in case the caller submitted a string by mistake. Thanks to Thomas Schreiber for the patch.

  - `703 major` Add a `shell` kwarg to many methods in `fabric.contrib.files` to help avoid conflicts with `fabric.context_managers.cd` and similar. Thanks to `@mikek` for the patch.

  - `730` Add `env.system_known_hosts`/`--system-known-hosts` to allow loading a user-specified system-level SSH `known_hosts` file. Thanks to Roy Smith for the patch.

  - `1.5.2 <2013-01-15>`

  - `818` Added `env.eagerly_disconnect` option to help prevent pile-up of many open connections.

  - `706` Added `env.tasks`, returning list of tasks to be executed by current `fab` command.

  - `766` Use the variable name of a new-style `fabric.tasks.Task` subclass object when the object name attribute is undefined. Thanks to `@todddeluca` for the patch.

  - `604` Fixed wrong treatment of backslashes in put operation when uploading directory tree on Windows. Thanks to Jason Coombs for the catch and `@diresys` & Oliver Janik for the patch. for the patch.

  - `792` The newish `fabric.context_managers.shell_env` context manager was incorrectly omitted from the `fabric.api` import endpoint. This has been remedied. Thanks to Vishal Rana for the catch.

  - `735` Add `ok_ret_codes` option to `env` to allow alternate return codes to be treated os "ok". Thanks to Andy Kraut for the pull request.

  - `775` Shell escaping was incorrectly applied to the value of `$PATH` updates in our shell environment handling, causing (at the very least) `fabric.operations.local` binary paths to become inoperable in certain situations. This has been fixed.

  - `787` Utilize new Paramiko feature allowing us to skip the use of temporary local files when using file-like objects in `fabric.operations.get`/`fabric.operations.put`.

  - `249` Allow specification of remote command timeout value by setting `env.command_timeout`. Thanks to Paul McMillan for suggestion & initial patch.

  - Added current host string to prompt abort error messages.

  - `1.5.1 <2012-11-15>`

  - `776` Fixed serious-but-non-obvious bug in direct-tcpip driven gatewaying (e.g. that triggered by `-g` or `env.gateway`.) Should work correctly now.

  - `771` Sphinx autodoc helper `fabric.docs.unwrap_tasks` didn't play nice with `@task(name=xxx)` in some situations. This has been fixed.

  - `1.5.0 <2012-11-06>`

  - `1.4.4 <2012-11-06>`

  - `38` (also `698`) Implement both SSH-level and `ProxyCommand`-based gatewaying for SSH traffic. (This is distinct from tunneling non-SSH traffic over the SSH connection, which is `78` and not implemented yet.)
    
    >   - Thanks in no particular order to Erwin Bolwidt, Oskari Saarenmaa, Steven Noonan, Vladimir Lazarenko, Lincoln de Sousa, Valentino Volonghi, Olle Lundberg and Github user `@acrish` for providing the original patches to both Fabric and Paramiko.

  - `684 backported` (also `569`) Update how `fabric.decorators.task` wraps task functions to preserve additional metadata; this allows decorated functions to play nice with Sphinx autodoc. Thanks to Jaka Hudoklin for catch & patch.

  - `103` (via `748`) Long standing Sphinx autodoc issue requiring error-prone duplication of function signatures in our API docs has been fixed. Thanks to Alex Morega for the patch.

  - `767 major` Fix (and add test for) regression re: having linewise output automatically activate when parallelism is in effect. Thanks to Alexander Fortin and Dustin McQuay for the bug reports.

  - `736 major` Ensure context managers that build env vars play nice with `contextlib.nested` by deferring env var reference to entry time, not call time. Thanks to Matthew Tretter for catch & patch.

  - `763` Add `--initial-password-prompt` to allow prefilling the password cache at the start of a run. Great for sudo-powered parallel runs.

  - `665` (and \#629) Update `fabric.contrib.files.upload_template` to have a more useful return value, namely that of its internal `fabric.operations.put` call. Thanks to Miquel Torres for the catch & Rodrigue Alcazar for the patch.

  - `578` Add `name` argument to `fabric.decorators.task` to allow overriding of the default "function name is task name" behavior. Thanks to Daniel Simmons for catch & patch.

  - `761` Allow advanced users to parameterize `fabric.main.main()` to force loading of specific fabfiles.

  - `749` Gracefully work around calls to `fabric.version` on systems lacking `/bin/sh` (which causes an `OSError` in `subprocess.Popen` calls.)

  - `723` Add the `group=` argument to `fabric.operations.sudo`. Thanks to Antti Kaihola for the pull request.

  - `725` Updated `fabric.operations.local` to allow override of which local shell is used. Thanks to Mustafa Khattab.

  - `704 major` Fix up a bunch of Python 2.x style `print` statements to be forwards compatible. Thanks to Francesco Del Degan for the patch.

  - `491` (also `385`) IPv6 host string support. Thanks to Max Arnold for the patch.

  - `699` Allow `name` attribute on file-like objects for get/put. Thanks to Peter Lyons for the pull request.

  - `711 major` `fabric.sftp.get` would fail when filenames had % in their path. Thanks to John Begeman

  - `702 major` `fabric.operations.require` failed to test for "empty" values in the env keys it checks (e.g. `require('a-key-whose-value-is-an-empty-list')` would register a successful result instead of alerting that the value was in fact empty. This has been fixed, thanks to Rich Schumacher.

  - `718` `isinstance(foo, Bar)` is used in `fabric.main` instead of `type(foo) == Bar` in order to fix some edge cases. Thanks to Mikhail Korobov.

  - `693` Fixed edge case where `abort` driven failures within parallel tasks could result in a top level exception (a `KeyError`) regarding error handling. Thanks to Marcin Kuźmiński for the report.

  - `681 backported` Fixed outdated docstring for `fabric.decorators.runs_once` which claimed it would get run multiple times in parallel mode. That behavior was fixed in an earlier release but the docs were not updated. Thanks to Jan Brauer for the catch.

  - `1.4.3 <2012-07-06>`

  - `1.3.8 <2012-07-06>`

  - `263` Shell environment variable support for `fabric.operations.run`/`fabric.operations.sudo` added in the form of the `fabric.context_managers.shell_env` context manager. Thanks to Oliver Tonnhofer for the original pull request, and to Kamil Kisiel for the final implementation.

  - `669` Updates to our Windows compatibility to rely more heavily on cross-platform Python stdlib implementations. Thanks to Alexey Diyan for the patch.

  - `671` `reject-unknown-hosts` sometimes resulted in a password prompt instead of an abort. This has been fixed. Thanks to Roy Smith for the report.

  - `659` Update docs to reflect that `fabric.operations.local` currently honors `env.path`. Thanks to [@floledermann](https://github.com/floledermann) for the catch.

  - `652` Show available commands when aborting on invalid command names.

  - `651 backported` Added note about nesting `with` statements on Python 2.6+. Thanks to Jens Rantil for the patch.

  - `649` Don't swallow non-`abort`-driven exceptions in parallel mode. Fabric correctly printed such exceptions, and returned them from `fabric.tasks.execute`, but did not actually cause the child or parent processes to halt with a nonzero status. This has been fixed. `fabric.tasks.execute` now also honors `env.warn_only` so users may still opt to call it by hand and inspect the returned exceptions, instead of encountering a hard stop. Thanks to Matt Robenolt for the catch.

  - `241` Add the command executed as a `.command` attribute to the return value of `fabric.operations.run`/`fabric.operations.sudo`. (Also includes a second attribute containing the "real" command executed, including the shell wrapper and any escaping.)

  - `646` Allow specification of which local streams to use when `fabric.operations.run`/`fabric.operations.sudo` print the remote stdout/stderr, via e.g. `run("command", stderr=sys.stdout)`.

  - `645 backported` Update Sphinx docs to work well when run out of a source tarball as opposed to a Git checkout. Thanks again to `@Arfrever` for the catch.

  - `640 backported` (also `644`) Update packaging manifest so sdist tarballs include all necessary test & doc files. Thanks to Mike Gilbert and `@Arfrever` for catch & patch.

  - `627` Added convenient `quiet` and `warn_only` keyword arguments to `fabric.operations.run`/`fabric.operations.sudo` which are aliases for `settings(hide('everything'), warn_only=True)` and `settings(warn_only=True)`, respectively. (Also added corresponding context managers.) Useful for remote program calls which are expected to fail and/or whose output doesn't need to be shown to users.

  - `633` Allow users to turn off host list deduping by setting `env.dedupe_hosts` to `False`. This enables running the same task multiple times on a single host, which was previously not possible.

  - `634 backported` Clarified that `fabric.context_managers.lcd` does no special handling re: the user's current working directory, and thus relative paths given to it will be relative to `os.getcwd()`. Thanks to [@techtonik](https://github.com/techtonik) for the catch.

  - `1.4.2 <2012-05-07>`

  - `1.3.7 <2012-05-07>`

  - `562` Agent forwarding would error out or freeze when multiple uses of the forwarded agent were used per remote invocation (e.g. a single `fabric.operations.run` command resulting in multiple Git or SVN checkouts.) This has been fixed thanks to Steven McDonald and GitHub user `@lynxis`.

  - `626 backported` Clarity updates to the tutorial. Thanks to GitHub user `m4z` for the patches.

  - `625` `fabric.context_managers.hide`/`fabric.context_managers.show` did not correctly restore prior display settings if an exception was raised inside the block. This has been fixed.

  - `624` Login password prompts did not always display the username being authenticated for. This has been fixed. Thanks to Nick Zalutskiy for catch & patch.

  - `617` Fix the `clean_revert` behavior of `fabric.context_managers.settings` so it doesn't `KeyError` for newly created settings keys. Thanks to Chris Streeter for the catch.

  - `615` Updated `fabric.operations.sudo` to honor the new setting `env.sudo_user` as a default for its `user` kwarg.

  - `616` Add port number to the error message displayed upon connection failures.

  - `609` (and `564`) Document and clean up `env.sudo_prefix` so it can be more easily modified by users facing uncommon use cases. Thanks to GitHub users `3point2` for the cleanup and `SirScott` for the documentation catch.

  - `610` Change detection of `env.key_filename`'s type (added as part of SSH config support in 1.4) so it supports arbitrary iterables. Thanks to Brandon Rhodes for the catch.

  - `1.4.1 <2012-04-04>`

  - `1.3.6 <2012-04-04>`

  - `608` Add `capture` kwarg to `fabric.contrib.project.rsync_project` to aid in debugging rsync problems.

  - `607` Allow `fabric.operations.local` to display stdout/stderr when it warns/aborts, if it was capturing them.

  - `395` Added an FAQ entry detailing how to handle init scripts which misbehave when a pseudo-tty is allocated.

  - `568` `fabric.tasks.execute` allowed too much of its internal state changes (to variables such as `env.host_string` and `env.parallel`) to persist after execution completed; this caused a number of different incorrect behaviors. `fabric.tasks.execute` has been overhauled to clean up its own state changes -- while preserving any state changes made by the task being executed.

  - `584` `fabric.contrib.project.upload_project` did not take explicit remote directory location into account when untarring, and now uses `fabric.context_managers.cd` to address this. Thanks to Ben Burry for the patch.

  - `458` `fabric.decorators.with_settings` did not perfectly match `fabric.context_managers.settings`, re: ability to inline additional context managers. This has been corrected. Thanks to Rory Geoghegan for the patch.

  - `499` `contrib.files.first` used an outdated function signature in its wrapped `fabric.contrib.files.exists` call. This has been fixed. Thanks to Massimiliano Torromeo for catch & patch.

  - `551` `--list` output now detects terminal window size and truncates (or doesn't truncate) accordingly. Thanks to Horacio G. de Oro for the initial pull request.

  - `572` Parallel task aborts (as oppposed to unhandled exceptions) now correctly print their abort messages instead of tracebacks, and cause the parent process to exit with the correct (nonzero) return code. Thanks to Ian Langworth for the catch.

  - `306` Remote paths now use posixpath for a separator. Thanks to Jason Coombs for the patch.

  - `1.4.0 <2012-02-13>`

  - `1.3.5 <2012-02-13>`

  - `1.2.6 <2012-02-13>`

  - `1.1.8 <2012-02-13>`

  - `495` Fixed documentation example showing how to subclass `fabric.tasks.Task`. Thanks to Brett Haydon for the catch and Mark Merritt for the patch.

  - `410` Fixed a bug where using the `fabric.decorators.task` decorator inside/under another decorator such as `fabric.decorators.hosts` could cause that task to become invalid when invoked by name (due to how old-style vs new-style tasks are detected.) Thanks to Dan Colish for the initial patch.

  - `559` `fabric.contrib.project.rsync_project` now allows users to append extra SSH-specific arguments to `rsync`'s `--rsh` flag.

  - `138` `env.port` may now be written to at fabfile module level to set a default nonstandard port number. Previously this value was read-only.

  - `3` Fabric can now load a subset of SSH config functionality directly from your local `~/.ssh/config` if `env.use_ssh_config` is set to `True`. See `ssh-config` for details. Thanks to Kirill Pinchuk for the initial patch.

  - `12` Added the ability to try connecting multiple times to temporarily-down remote systems, instead of immediately failing. (Default behavior is still to only try once.) See `env.timeout` and `env.connection_attempts` for controlling both connection timeouts and total number of attempts. `fabric.operations.reboot` has also been overhauled (but practically deprecated -- see its updated docs.)

  - `474` `fabric.tasks.execute` now allows you to access the executed task's return values, by itself returning a dictionary whose keys are the host strings executed against.

  - `487 major` Overhauled the regular expression escaping performed in `fabric.contrib.files.append` and `fabric.contrib.files.contains` to try and handle more corner cases. Thanks to Neilen Marais for the patch.

  - `532` Reorganized and cleaned up the output of `fab --help`.

  - `8` Added `--skip-bad-hosts`/`env.skip_bad_hosts` option to allow skipping past temporarily down/unreachable hosts.

  - `13` Env vars may now be set at runtime via the new `--set` command-line flag.

  - `506` A new output alias, `commands`, has been added, which allows hiding remote stdout and local "running command X" output lines.

  - `72` SSH agent forwarding support has made it into Fabric's SSH library, and hooks for using it have been added (disabled by default; use `-A` or `env.forward_agent` to enable.) Thanks to Ben Davis for porting an existing Paramiko patch to `ssh` and providing the necessary tweak to Fabric.

  - `1.3.4 <2012-01-12>`

  - `492` `@parallel` did not automatically trigger linewise output, as was intended. This has been fixed. Thanks to Brandon Huey for the catch.

  - `510` Parallel mode is incompatible with user input, such as password/hostname prompts, and was causing cryptic `Operation not supported by device` errors when such prompts needed to be displayed. This behavior has been updated to cleanly and obviously `abort` instead.

  - `494` Fixed regression bug affecting some `env` values such as `env.port` under parallel mode. Symptoms included `fabric.contrib.project.rsync_project` bailing out due to a None port value when run under `@parallel`. Thanks to Rob Terhaar for the report.

  - `339` Don't show imported `fabric.colors` members in `--list` output. Thanks to Nick Trew for the report.

  - `1.3.3 <2011-11-23>`

  - `1.2.5 <2011-11-23>`

  - `1.1.7 <2011-11-23>`

  - `441` Specifying a task module as a task on the command line no longer blows up but presents the usual "no task by that name" error message instead. Thanks to Mitchell Hashimoto for the catch.

  - `475` Allow escaping of equals signs in per-task args/kwargs.

  - `450` Improve traceback display when handling `ImportError` for dependencies. Thanks to David Wolever for the patches.

  - `446` Add QNX to list of secondary-case `fabric.contrib.files.sed` targets. Thanks to Rodrigo Madruga for the tip.

  - `443` `fabric.contrib.files.exists` didn't expand tildes; now it does. Thanks to Riccardo Magliocchetti for the patch.

  - `437` `fabric.decorators.with_settings` now correctly preserves the wrapped function's docstring and other attributes. Thanks to Eric Buckley for the catch and Luke Plant for the patch.

  - `400` Handle corner case of systems where `pwd.getpwuid` raises `KeyError` for the user's UID instead of returning a valid string. Thanks to Dougal Matthews for the catch.

  - `397` Some poorly behaved objects in third party modules triggered exceptions during Fabric's "classic or new-style task?" test. A fix has been added which tries to work around these.

  - `341` `fabric.contrib.files.append` incorrectly failed to detect that the line(s) given already existed in files hidden to the remote user, and continued appending every time it ran. This has been fixed. Thanks to Dominique Peretti for the catch and Martin Vilcans for the patch.

  - `342` Combining `fabric.context_managers.cd` with `fabric.operations.put` and its `use_sudo` keyword caused an unrecoverable error. This has been fixed. Thanks to Egor M for the report.

  - `482` Parallel mode should imply linewise output; omission of this behavior was an oversight.

  - `230` Fix regression re: combo of no fabfile & arbitrary command use. Thanks to Ali Saifee for the catch.

  - `1.3.2 <2011-11-07>`

  - `1.2.4 <2011-11-07>`

  - `1.1.6 <2011-11-07>`

  - `459 backported` Update our `setup.py` files to note that PyCrypto released 2.4.1, which fixes the setuptools problems.

  - `467 backported` (also `468`, `469`) Handful of documentation clarification tweaks. Thanks to Paul Hoffman for the patches.

  - `1.3.1 <2011-10-24>`

  - `457` Ensured that Fabric fast-fails parallel tasks if any child processes encountered errors. Previously, multi-task invocations would continue to the 2nd, etc task when failures occurred, which does not fit with how Fabric usually behaves. Thanks to Github user `sdcooke` for the report and Morgan Goose for the fix.

  - `1.3.0 <2011-10-23>`

  - `1.2.3 <2011-10-23>`

  - `1.1.5 <2011-10-23>`

  - `1.0.5 <2011-10-23>`

  - `275` To support an edge use case of the features released in `19`, and to lay the foundation for `275`, we have forked Paramiko into the [Python 'ssh' library](https://pypi.org/project/ssh/) and changed our dependency to it for Fabric 1.3 and higher. This may have implications for the more uncommon install use cases, and package maintainers, but we hope to iron out any issues as they come up.

  - `323` `fabric.operations.put` forgot how to expand leading tildes in the remote file path. This has been corrected. Thanks to Piet Delport for the catch.

  - `21` It is now possible, using the new `fabric.tasks.execute` API call, to execute task objects (by reference or by name) from within other tasks or in library mode. `fabric.tasks.execute` honors the other tasks' `fabric.decorators.hosts`/`fabric.decorators.roles` decorators, and also supports passing in explicit host and/or role arguments.

  - `19` Tasks may now be optionally executed in parallel. Please see the parallel execution docs for details. Major thanks to Morgan Goose for the initial implementation.

  - `182` During display of remote stdout/stderr, Fabric occasionally printed extraneous line prefixes (which in turn sometimes overwrote wrapped text.) This has been fixed.

  - `430` Tasks decorated with `fabric.decorators.runs_once` printed extraneous 'Executing...' status lines on subsequent invocations. This is noisy at best and misleading at worst, and has been corrected. Thanks to Jacob Kaplan-Moss for the report.

  - `1.2.2 <2011-09-01>`

  - `1.1.4 <2011-09-01>`

  - `1.0.4 <2011-09-01>`

  - `252` `fabric.context_managers.settings` would silently fail to set `env` values for keys which did not exist outside the context manager block. It now works as expected. Thanks to Will Maier for the catch and suggested solution.

  - `393 backported` Fixed a typo in an example code snippet in the task docs. Thanks to Hugo Garza for the catch.

  - `396` `--shortlist` broke after the addition of `--list-format` and no longer displayed the short list format correctly. This has been fixed.

  - `373` Re-added missing functionality preventing host exclusion from working correctly.

  - `303` Updated terminal size detection to correctly skip over non-tty stdout, such as when running `fab taskname | other_command`.

  - `1.2.1 <2011-08-21>`

  - `1.1.3 <2011-08-21>`

  - `1.0.3 <2011-08-21>`

  - `417` `abort-on-prompts` would incorrectly abort when set to True, even if both password and host were defined. This has been fixed. Thanks to Valerie Ishida for the report.

  - `416 backported` Updated documentation to reflect move from Redmine to Github.

  - `389` Fixed/improved error handling when Paramiko import fails. Thanks to Brian Luft for the catch.

  - `1.2.0 <2011-07-12>`

  - `22` Enhanced `@task` to add aliasing, per-module default tasks, and control over the wrapping task class. Thanks to Travis Swicegood for the initial work and collaboration.

  - `380` Improved unicode support when testing objects for being string-like. Thanks to Jiri Barton for catch & patch.

  - `382` Experimental overhaul of changelog formatting & process to make supporting multiple lines of development less of a hassle.

  - `1.1.2 <2011-07-07>`

  - `1.0.2 <2011-06-24>`

---

changelog.md

---

# Changelog

<div class="note">

<div class="title">

Note

</div>

Looking for the Fabric 1.x changelog? See \[/changelog-v1\](/changelog-v1.md).

</div>

<div class="warning">

<div class="title">

Warning

</div>

Keep in mind that Fabric is largely a wrapper around [Paramiko](https://paramiko.org/changelog.html) and [Invoke](https://pyinvoke.org/changelog.html) - Fabric's capabilities can often improve simply by upgrading your copies of those libraries\! Click their names in this paragraph to visit their changelogs and see what you might get if you upgrade your dependencies.

</div>

  - `3.2.2 <2023-08-30>`

  - `2204` The signal handling functionality added in Fabric 2.6 caused unrecoverable tracebacks when invoked from inside a thread (such as the use of <span class="title-ref">fabric.group.ThreadingGroup</span>) under certain interpreter versions. This has been fixed by simply refusing to register signal handlers when not in the main thread. Thanks to Francesco Giordano and others for the reports.

  - `-` <span class="title-ref">fabric.runners.Remote</span> failed to properly deregister its `SIGWINCH` signal handler on shutdown; in rare situations this could cause tracebacks when the Python process receives `SIGWINCH` while no remote session is active. This has been fixed.

  - `3.2.1 <2023-08-06>`

  - `-` Neglected to actually add `deprecated` to our runtime dependency specification (it was still in our development dependencies). This has been fixed.

  - `3.2.0 <2023-08-06>`

  - `-` Enhanced \[fabric.testing \<testing-subpackage\>\](\#fabric.testing-\<testing-subpackage\>) in ways large and small:
    
    >   - Backwards-compatibly merged the functionality of <span class="title-ref">\~fabric.testing.base.MockSFTP</span> into <span class="title-ref">\~fabric.testing.base.MockRemote</span> (may be opted-into by instantiating the latter with `enable_sftp=True`) so you can mock out both SSH *and* SFTP functionality in the same test, which was previously impossible. It also means you can use this in a Pytest autouse fixture to prevent any tests from accidentally hitting the network\!
    >   - A new pytest fixture, <span class="title-ref">\~fabric.testing.fixtures.remote\_with\_sftp</span>, has been added which leverages the previous bullet point (an all-in-one fixture suitable for, eg, preventing any incidental ssh/sftp attempts during test execution).
    >   - A pile of documentation and test enhancements (yes, testing our testing helpers is a thing).

<!-- end list -->

  - \- `-` Language update: applied `s/sanity/safety/g` to the codebase  
    (with the few actual API members using the term now marked deprecated & new ones added in the meantime, mostly in \[fabric.testing \<testing-subpackage\>\](\#fabric.testing

\--\<testing-subpackage\>)). - `-` Added a new runtime dependency on the [Deprecated](https://pypi.org/project/Deprecated/) library. - `3.1.0 <2023-05-25>` - `-` Implement opt-in support for Paramiko 3.2's <span class="title-ref">\~paramiko.auth\_strategy.AuthStrategy</span> machinery, as follows:

>   - Added a new module and class, <span class="title-ref">fabric.auth.OpenSSHAuthStrategy</span>, which leverages aforementioned new Paramiko functionality to marry loaded SSH config files with Fabric-level and runtime-level parameters, arriving at what should be OpenSSH-client-compatible authentication behavior. See its API docs for details.
>   - Added new \[configuration settings \<fab-configuration\>\](\#configuration-settings-\<fab-configuration\>):
>       - `authentication.strategy_class`, which defaults to `None`, but can be set to `OpenSSHAuthStrategy` to opt-in to the new behavior.
>       - `authentication.identities`, which defaults to the empty list, and can be a list of private key paths for use by the new strategy class.
> 
> <div class="warning">
> 
> <div class="title">
> 
> Warning
> 
> </div>
> 
> This feature is **EXPERIMENTAL**, **incomplete**, and subject to change\!
> 
> (For example, it lacks passphrase support, and doesn't implement 100% of all auth sources yet, focusing mostly on private keys and interactive-password.)
> 
> </div>

  - `-` Add a new CLI flag to `fab`, `fab --list-agent-keys`, which will attempt to connect to your local SSH agent and print a key list, similarly to `ssh-add -l`. This is mostly useful for expectations-checking Fabric and Paramiko's agent functionality, or for situations where you might not have `ssh-add` handy.
    
    <div class="warning">
    
    <div class="title">
    
    Warning
    
    </div>
    
    This feature requires Paramiko 3.2 or above.
    
    </div>

  - `2263 major` Explicitly add our dependency on `decorator` to `setup.py` instead of using Invoke's old, now removed, vendored copy of same. This allows Fabric to happily use Invoke 2.1 and above. Thanks to Luke Robison, Nick Humrich, and others, for the reports.

  - `3.0.1 <2023-04-29>`

  - `2241` A typo prevented Fabric's command runner from properly calling its superclass `stop()` method, which in tandem with a related Invoke bug meant messy or long shutdowns in many scenarios. Thanks to Orlando Rodríguez for report and initial patch.

  - `3.0.0 <2023-01-20>`

  - `1981 major` (fixed in `2195`) Automatically close any open SFTP session during <span class="title-ref">fabric.connection.Connection.close</span>; this avoids issues encountered upon re-opening a previously-closed connection object. Thanks to Alexander Bodnya for the report and David JM Emmett for the patch.

  - `-` Change the default configuration value for `inline_ssh_env` from `False` to `True`, to better align with the practicalities of common SSH server configurations.
    
    <div class="warning">
    
    <div class="title">
    
    Warning
    
    </div>
    
    This change is backwards incompatible if you were using environment-variable-setting kwargs or config settings, such as `Connection.run(command, env={'SOME': 'ENV VARS'})`, and were not already explicitly specifying the value of `inline_ssh_env`.
    
    </div>

  - `-` Drop support for Python \<3.6, including Python 2.
    
    <div class="warning">
    
    <div class="title">
    
    Warning
    
    </div>
    
    This is a backwards incompatible change if you are not yet on Python 3.6 or above; however, pip shouldn't offer you this version of Fabric as long as your pip version understands `python_requires` metadata.
    
    </div>

  - `2.7.1 <2022-07-14>`

  - `1924` (also `2007`) Overhaul behavior and testing re: merging together different sources for the `key_filename` parameter in `Connection.connect_kwargs`. This fixes a number of type-related errors (string objects have no `extend` attribute, cannot add lists to strings, etc). Thanks to Joey Dumont, Joseph Conti, and Jared Punzel for the reports; and to Kyle Meyer for submitting an early version of the patch.

  - `2.7.0 <2022-03-25>`

  - `-` Overhaul administrative metadata and migrate to Circle-CI from Travis-CI.

  - `-` Add <span class="title-ref">\~fabric.connection.Connection.shell</span>, a belated port of the v1 `open_shell()` feature.
    
      - This wasn't needed initially, as the modern implementation of <span class="title-ref">\~fabric.connection.Connection.run</span> is as good or better for full interaction than `open_shell()` was, provided you're happy supplying a specific shell to execute.
      - <span class="title-ref">\~fabric.connection.Connection.shell</span> serves the corner case where you *aren't* happy doing that, eg when you're speaking to network appliances or other targets which are not typical Unix server environments.
      - Like `open_shell()`, this new method is primarily for interactive use, and has a slightly less useful return value. See its API docs for more details.

  - `-` Forward local terminal resizes to the remote end, when applicable. (For the technical: this means we now turn `SIGWINCH` into SSH `window-change` messages.)

  - `2142 major` Update <span class="title-ref">\~fabric.connection.Connection</span> temporarily so that it doesn't incidentally apply `replace_env=True` to local shell commands, only remote ones. On Windows under Python 3.7+, this was causing local commands to fail due to lack of some environment variables. Future updates will cleanly separate the config tree for remote vs local methods.
    
    Thanks to Bartosz Lachowicz for the report and David JM Emmett for the patch.

  - `2.6.0 <2021-01-18>`

  - `- major` Fix a handful of issues in the handling and mocking of SFTP local paths and `os.path` members within \[fabric.testing \<testing-subpackage\>\](\#fabric.testing-\<testing-subpackage\>); this should remove some occasional "useless Mocks" as well as hewing closer to the real behavior of things like `os.path.abspath` re: path normalization.

  - `-` When the `local` path argument to <span class="title-ref">Transfer.get \<fabric.transfer.Transfer.get\></span> contains nonexistent directories, they are now created instead of raising an error.
    
    <div class="warning">
    
    <div class="title">
    
    Warning
    
    </div>
    
    This change introduces a new runtime dependency: `pathlib2`.
    
    </div>

  - `1868` Ported a feature from v1: interpolating the local path argument in <span class="title-ref">Transfer.get \<fabric.transfer.Transfer.get\></span> with connection and remote filepath attributes.
    
    For example, `cxn.get(remote="/var/log/foo.log", local="{host}/")` is now feasible for storing a file in per-host-named directories or files, and in fact <span class="title-ref">Group.get \<fabric.group.Group.get\></span> does this by default.

  - `1810` Add <span class="title-ref">put \<fabric.group.Group.put\></span>/<span class="title-ref">get \<fabric.group.Group.get\></span> support to <span class="title-ref">\~fabric.group.Group</span>.

  - `1999` Add <span class="title-ref">sudo \<fabric.group.Group.sudo\></span> support to <span class="title-ref">\~fabric.group.Group</span>. Thanks to Bonnie Hardin for the report and to Winston Nolan for an early patchset.

  - `2.5.0 <2019-08-06>`

  - `-` Update minimum Invoke version requirement to `>=1.3`.

  - `1985` Add support for explicitly closing remote subprocess' stdin when local stdin sees an EOF, by implementing a new command-runner method recently added to Invoke; this prevents remote programs that 'follow' stdin from blocking forever.

  - `- major` Anonymous/'remainder' subprocess execution (eg `fab -H host -- command`, as opposed to the use of <span class="title-ref">Connection.run \<fabric.connection.Connection.run\></span> inside tasks) was explicitly specifying `in_stream=False` (i.e. "disconnect from stdin") under the hood; this was leftover from early development and prevented use of interactive (or other stdin-reading) programs via this avenue.
    
    It has been removed; `cat 'text' | fab -H somehost -- reads-from-stdin` (or similar use cases) should work again.

  - `-` Removed unnecessary Cryptography version pin from packaging metadata; this was an artifact from early development. At this point in time, only Paramiko's own direct dependency specification should matter.
    
    This is unlikely to affect anybody's install, since Paramiko has required newer Cryptography versions for a number of years now.

  - `-` Allow specifying connection timeouts (already available via <span class="title-ref">\~fabric.connection.Connection</span> constructor argument and configuration option) on the command-line, via `-t/--connect-timeout <-t>`.

  - `1989` Reinstate command timeouts, by supporting the implementation of that feature in Invoke ([pyinvoke/invoke\#539](https://github.com/pyinvoke/invoke/issues/539)). Thanks to Israel Fruchter for report and early patchset.

  - `2.4.0 <2018-09-13>`

  - `2.3.2 <2018-09-13>`

  - `2.2.3 <2018-09-13>`

  - `2.1.6 <2018-09-13>`

  - `2.0.5 <2018-09-13>`

  - `1849` Add <span class="title-ref">Connection.from\_v1 \<fabric.connection.Connection.from\_v1\></span> (and <span class="title-ref">Config.from\_v1 \<fabric.config.Config.from\_v1\></span>) for easy creation of modern `Connection`/`Config` objects from the currently configured Fabric 1.x environment. Should make upgrading piecemeal much easier for many use cases.

  - `1780` Add context manager behavior to <span class="title-ref">\~fabric.group.Group</span>, to match the same feature in <span class="title-ref">\~fabric.connection.Connection</span>. Feature request by István Sárándi.

  - `1709` Add <span class="title-ref">Group.close \<fabric.group.Group.close\></span> to allow closing an entire group's worth of connections at once. Patch via Johannes Löthberg.

  - `-` Fix a bug preventing tab completion (using the Invoke-level `--complete` flag) from completing task names correctly (behavior was to act as if there were never any tasks present, even if there was a valid fabfile nearby).

  - `1850` Skip over `ProxyJump` configuration directives in SSH config data when they would cause self-referential `RecursionError` (e.g. due to wildcard-using `Host` stanzas which include the jump server itself). Reported by Chris Adams.

  - `-` Some debug logging was reusing Invoke's logger object, generating log messages "named" after `invoke` instead of `fabric`. This has been fixed by using Fabric's own logger everywhere instead.

  - `1852` Grant internal <span class="title-ref">\~fabric.connection.Connection</span> objects created during `ProxyJump` based gateways/proxies a copy of the outer `Connection`'s configuration object. This was not previously done, which among other things meant one could not fully disable SSH config file loading (as the internal `Connection` objects would revert to the default behavior). Thanks to Chris Adams for the report.

  - `2.3.1 <2018-08-08>`

  - `- (2.3+)` Update the new functionality added for `1826` so it uses `export`; without this, nontrivial shell invocations like `command1 && command2` end up only applying the env vars to the first command.

  - `2.3.0 <2018-08-08>`

  - `1826` Add a new Boolean configuration and <span class="title-ref">\~fabric.connection.Connection</span> parameter, `inline_ssh_env`, which (when set to `True`) changes how Fabric submits shell environment variables to remote servers; this feature helps work around commonly restrictive `AcceptEnv` settings on SSH servers. Thanks to Massimiliano Torromeo and Max Arnold for the reports.

  - `2.2.2 <2018-07-31>`

  - `2.1.5 <2018-07-31>`

  - `2.0.4 <2018-07-31>`

  - `-` Implement `__lt__` on <span class="title-ref">\~fabric.connection.Connection</span> so it can be sorted; this was overlooked when implementing things like `__eq__` and `__hash__`. (No, sorting doesn't usually matter much for this object type, but when you gotta, you gotta...)

  - `1819 backported` Moved example code from the README into the Sphinx landing page so that we could apply doctests; includes a bunch of corrections to invalid example code\! Thanks to Antonio Feitosa for the initial catch & patch.

  - `1749` Improve <span class="title-ref">\~fabric.transfer.Transfer.put</span> behavior when uploading to directory (vs file) paths, which was documented as working but had not been fully implemented. The local path's basename (or file-like objects' `.name` attribute) is now appended to the remote path in this case. Thanks to Peter Uhnak for the report.

  - `1831` Grant <span class="title-ref">\~fabric.group.Group</span> (and subclasses) the ability to take arbitrary keyword arguments and pass them onto the internal <span class="title-ref">\~fabric.connection.Connection</span> constructors. This allows code such as:
    
        mygroup = Group('host1', 'host2', 'host3', user='admin')
    
    which was previously impossible without manually stuffing premade `Connection` objects into <span class="title-ref">Group.from\_connections \<fabric.group.Group.from\_connections\></span>.

  - `1762` Fix problem where lower configuration levels' setting of `connect_kwargs.key_filename` were being overwritten by the CLI `--identity` flag's value...even when that value was the empty list. CLI-given values are supposed to win, but not quite that hard. Reported by `@garu57`.

  - `1653 backported` Clarify <span class="title-ref">\~fabric.transfer.Transfer</span> API docs surrounding remote file paths, such as the lack of tilde expansion (a buggy and ultimately unnecessary v1 feature). Thanks to `@pint12` for bringing it up.

  - `2.2.1 <2018-07-18>`

  - `1824` The changes implementing `1772` failed to properly account for backwards compatibility with Invoke-level task objects. This has been fixed; thanks to `@ilovezfs` and others for the report.

  - `2.2.0 <2018-07-13>`

  - `2.1.4 <2018-07-13>`

  - `2.0.3 <2018-07-13>`

  - `-` The <span class="title-ref">fabric.testing.fixtures.remote</span> pytest fixture was found to not be properly executing expectation/sanity tests on teardown; this was an oversight and has been fixed.

  - `-` Updated the minimum required Invoke version to `1.1`.

  - `1772` `@hosts` is back -- as a <span class="title-ref">@task \<fabric.tasks.task\></span>/<span class="title-ref">Task \<fabric.tasks.Task\></span> parameter of the same name. Acts much like a per-task `--hosts`, but can optionally take dicts of <span class="title-ref">fabric.connection.Connection</span> kwargs as well as the typical shorthand host strings.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    As of this change, we are now recommending the use of the new-in-this-release Fabric-level <span class="title-ref">@task \<fabric.tasks.task\></span>/<span class="title-ref">Task \<fabric.tasks.Task\></span> objects instead of their Invoke counterparts, even if you're not using the `hosts` kwarg -- it will help future-proof your code for similar feature-adds later, and generally be less confusing than having mixed Invoke/Fabric imports for these object types.
    
    </div>

  - `1766` Reinstate support for use as `python -m fabric`, which (as in v1) now behaves identically to invoking `fab`. Thanks to `@RupeshPatro` for the original patchset.

  - `1753` Set one of our test modules to skip user/system SSH config file loading by default, as it was too easy to forget to do so for tests aimed at related functionality. Reported by Chris Rose.

  - `2.1.3 <2018-05-24>`

  - `-` Our packaging metadata lacked a proper `MANIFEST.in` and thus some distributions were not including ancillary directories like tests and documentation. This has been fixed.

  - `-` Our `packages=` argument to `setuptools.setup` was too specific and did not allow for subpackages...such as the newly added `fabric.testing`. Fixed now.

  - `2.1.2 <2018-05-24>`

  - `-` Minor fix to `extras_require` re: having `fabric[pytest]` encompass the contents of `fabric[testing]`.

  - `2.1.1 <2018-05-24>`

  - `-` Somehow neglected to actually add `extras_require` to our `setup.py` to enable `pip install fabric[testing]` et al. This has been fixed. We hope.

  - `2.1.0 <2018-05-24>`

  - `2.0.2 <2018-05-24>`

  - `-` Exposed our previously internal test helpers for use by downstream test suites, as the \[fabric.testing \<testing-subpackage\>\](\#fabric.testing-\<testing-subpackage\>) subpackage.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    As this code requires non-production dependencies, we've also updated our packaging metadata to publish some setuptools "extras", `fabric[testing]` (base) and `fabric[pytest]` (for pytest users).
    
    </div>

  - `1761 backported` Integration tests were never added to Travis or ported to pytest before 2.0's release; this has been addressed.

  - `1759 backported` Apply the `black` code formatter to the codebase and engage it on Travis-CI. Thanks to Chris Rose.

  - `1745 backported` Wrap any imports of `invoke.vendor.*` with `try`/`except` such that downstream packages which have removed `invoke.vendor` are still able to function by using stand-alone dependencies. Patch courtesy of Othmane Madjoudj.

  - `2.0.1 <2018-05-14>`

  - `1740` A Python 3 wheel was not uploaded during the previous release as expected; it turned out we were lacking the typical 'build universal wheels' setting in our `setup.cfg` (due to copying it from the one other project in our family of projects which explicitly cannot build universal wheels\!) This has been fixed and a proper universal wheel is now built.

  - `2.0.0 <2018-05-08>`

  - `-` Rewrite for 2.0\! See \[upgrading\](\#upgrading).

---

contact.md

---

# Contact

If you've scoured the \[conceptual \<concepts-docs\>\](\#conceptual-\<concepts-docs\>) and \[API \<api-docs\>\](\#api \<api-docs\>) documentation and still can't find an answer to your question, below are various support resources that should help. We do request that you do at least skim the documentation before posting tickets or mailing list questions, however\!

## Mailing list

The best way to get help with using Fabric is via the [fab-user mailing list](http://lists.nongnu.org/mailman/listinfo/fab-user) (currently hosted at `nongnu.org`.) The Fabric developers do their best to reply promptly, and the list contains an active community of other Fabric users and contributors as well.

## Twitter

Fabric has an official Twitter account, [@pyfabric](https://twitter.com/pyfabric), which is used for announcements and occasional related news tidbits (e.g. "Hey, check out this neat article on Fabric\!").

You may also want to follow the principal developer, [@bitprophet](https://twitter.com/bitprophet), for development updates and colorful commentary.

## Bugs/ticket tracker

To file new bugs or search existing ones, you may visit Fabric's [Github Issues](https://github.com/fabric/fabric/issues) page. This does require a (free, easy to set up) Github account.

## Blog posts

The developer posts occasional (but usually important) news on his blog; there is a dedicated Fabric category: <https://bitprophet.org/categories/fabric/>

---

development.md

---

# Development

The Fabric development team is headed by [Jeff Forcier](https://bitprophet.org), aka `bitprophet`. However, dozens of other developers pitch in by submitting patches and ideas via [GitHub issues and pull requests](https://github.com/fabric/fabric), \[IRC \<irc\>\](\#irc-\<irc\>) or the [mailing list](http://lists.nongnu.org/mailman/listinfo/fab-user).

## Get the code

Please see the \[source-code-checkouts\](\#source-code-checkouts) section of the \[installing\](installing.md) page for details on how to obtain Fabric's source code.

## Contributing

There are a number of ways to get involved with Fabric:

  - **Use Fabric and send us feedback\!** This is both the easiest and arguably the most important way to improve the project -- let us know how you currently use Fabric and how you want to use it. (Please do try to search the [ticket tracker](https://github.com/fabric/fabric/issues) first, though, when submitting feature ideas.)
  - **Report bugs or submit feature requests.** We follow [contribution-guide.org](https://contribution-guide.org)'s guidelines, so please check them out before visiting the [ticket tracker](https://github.com/fabric/fabric/issues).

While we may not always reply promptly, we do try to make time eventually to inspect all contributions and either incorporate them or explain why we don't feel the change is a good fit.

## Support of older releases

Major and minor releases do not usually mark the end of the previous line or lines of development:

  - Recent minor release branches typically continue to receive critical bugfixes, often extending back two or three release lines (so e.g. if 2.4 was the currently active release line, 2.3 and perhaps even 2.2 might get patches).
  - Depending on the nature of bugs found and the difficulty in backporting them, older release lines may also continue to get bugfixes -- but there's no guarantee of any kind. Thus, if a bug were found in 2.4 that affected 2.1 and could be easily applied, a new 2.1.x version *might* be released.

---

faq.md

---

# Frequently Asked/Answered Questions (FAQ)

These are some of the most commonly encountered problems or frequently asked questions which we receive from users. They aren't intended as a substitute for reading the rest of the documentation, so please make sure you check it out if your question is not answered here.

<div class="note">

<div class="title">

Note

</div>

Most API examples and links are for version 2 and up; FAQs specific to version 1 will typically be marked as such.

</div>

<div class="warning">

<div class="title">

Warning

</div>

Many questions about shell command execution and task behavior are answered on [Invoke's FAQ page](http://www.pyinvoke.org/faq.html) - please check there also\!

</div>

## Explicitly set env variables are not being set correctly on the remote end\!

If your attempts to set environment variables for things like <span class="title-ref">Connection.run \<fabric.connection.Connection.run\></span> appear to silently fail, you're almost certainly talking to an SSH server which is setting a highly restrictive [AcceptEnv](https://man.openbsd.org/sshd_config#AcceptEnv).

To fix, you can either modify the server's configuration to allow the env vars you're setting, or use the `inline_ssh_env` <span class="title-ref">\~fabric.connection.Connection</span> parameter (or the \[global config option \<default-values\>\](\#global-config-option-\<default-values\>) of the same name) to force Fabric to send env vars prefixed before your command strings instead.

## The remote shell environment doesn't match interactive shells\!

You may find environment variables (or the behavior they trigger) differ interactively vs scripted via Fabric. For example, a program that's on your `$PATH` when you manually `ssh` in might not be visible when using <span class="title-ref">Connection.run \<fabric.connection.Connection.run\></span>; or special per-program env vars such as those for Python, pip, Java etc are not taking effect; etc.

The root cause of this is typically because the SSH server runs non-interactive commands via a very limited shell call: `/path/to/shell -c "command"` (for example, [OpenSSH](https://github.com/fabric/fabric/issues/1519#issuecomment-411247228)). Most shells, when run this way, are not considered to be either **interactive** or **login** shells; and this then impacts which startup files get loaded.

Users typically only modify shell files related to interactive operation (such as `~/.bash_profile` or `/etc/zshrc`); such changes do not take effect when the SSH server is running one-off commands.

To work around this, consult your shell's documentation to see if it offers any non-login, non-interactive config files; for example, `zsh` lets you configure `/etc/zshrc` or `~/.zshenv` for this purpose.

<div class="note">

<div class="title">

Note

</div>

`bash` does not appear to offer standard non-login/non-interactive startup files, even in version 4. However, it may attempt to determine if it's being run by a remote-execution daemon and will apparently source `~/.bashrc` if so; check to see if this is the case on your target systems.

</div>

<div class="note">

<div class="title">

Note

</div>

Another workaround for `bash` users is to reply on its `$BASH_ENV` functionality, which names a file path as the startup file to load:

  - configure your SSH server to `AcceptEnv BASH_ENV`, so that you can actually set that env var for the remote session at the top level (most SSH servers disallow this method by default).
  - decide which file this should be, though if you're already modifying files like `~/.bash_profile` or `~/.bashrc`, you may want to just point at that exact path.
  - set the Fabric configuration value `run.env` to aim at the above path, e.g. `{"BASH_ENV": "~/.bash_profile"}`.

</div>

## My (`cd`/`workon`/`export`/etc) calls don't seem to work\!

While Fabric can be used for many shell-script-like tasks, there's a slightly unintuitive catch: each <span class="title-ref">\~fabric.connection.Connection.run</span> or <span class="title-ref">\~fabric.connection.Connection.sudo</span> call (or the `run`/`sudo` functions in v1) has its own distinct shell session. This is required in order for Fabric to reliably figure out, after your command has run, what its standard out/error and return codes were.

Unfortunately, it means that code like the following doesn't behave as you might assume:

    @task
    def deploy(c):
        c.run("cd /path/to/application")
        c.run("./update.sh")

If that were a shell script, the second <span class="title-ref">\~fabric.connection.Connection.run</span> call would have executed with a current working directory of `/path/to/application/` -- but because both commands are run in their own distinct session over SSH, it actually tries to execute `$HOME/update.sh` instead (since your remote home directory is the default working directory).

A simple workaround is to make use of shell logic operations such as `&&`, which link multiple expressions together (provided the left hand side executed without error) like so:

    def deploy(c):
        c.run("cd /path/to/application && ./update.sh")

<div class="note">

<div class="title">

Note

</div>

You might also get away with an absolute path and skip directory changing altogether:

  - def deploy(c):  
    c.run("/path/to/application/update.sh")

However, this requires that the command in question makes no assumptions about your current working directory\!

</div>

## Why do I sometimes see `err: stdin: is not a tty`?

See \[Invoke's FAQ \<stdin-not-tty\>\](\#invoke's-faq-\<stdin-not-tty\>) for this; even for Fabric v1, which is not based on Invoke, the answer is the same.

## Why can't I run programs in the background with `&`? It makes Fabric hang.

Because SSH executes a new shell session on the remote end for each invocation of `run` or `sudo` (\[see also \<one-shell-per-command\>\](\#see-also-\<one-shell-per-command\>)), backgrounded processes may prevent the calling shell from exiting until the processes stop running, which in turn prevents Fabric from continuing on with its own execution.

The key to fixing this is to ensure that your process' standard pipes are all disassociated from the calling shell, which may be done in a number of ways (listed in order of robustness):

  - Use a pre-existing daemonization technique if one exists for the program at hand -- for example, calling an init script instead of directly invoking a server binary.
    
    >   - Or leverage a process manager such as `supervisord`, `upstart` or `systemd` - such tools let you define what it means to "run" one of your background processes, then issue init-script-like start/stop/restart/status commands. They offer many advantages over classic init scripts as well.

  - Use `tmux`, `screen` or `dtach` to fully detach the process from the running shell; these tools have the benefit of allowing you to reattach to the process later on if needed (though they are more ad-hoc than `supervisord`-like tools).

  - Run the program under `nohup` or similar "in-shell" tools - note that this approach has seen limited success for most users.

## I'm sometimes incorrectly asked for a passphrase instead of a password.

Due to a bug of sorts in our SSH layer, it's not currently possible for Fabric to always accurately detect the type of authentication needed. We have to try and guess whether we're being asked for a private key passphrase or a remote server password, and in some cases our guess ends up being wrong.

The most common such situation is where you, the local user, appear to have an SSH keychain agent running, but the remote server is not able to honor your SSH key, e.g. you haven't yet transferred the public key over or are using an incorrect username. In this situation, Fabric will prompt you with "Please enter passphrase for private key", but the text you enter is actually being sent to the remote end's password authentication.

We hope to address this in future releases by contributing to the aforementioned SSH library.

---

index.md

---

[![PyPI - Package Version](https://img.shields.io/pypi/v/fabric)](https://pypi.org/project/fabric/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fabric)](https://pypi.org/project/fabric/) [![PyPI - License](https://img.shields.io/pypi/l/fabric)](https://github.com/fabric/fabric/blob/main/LICENSE) [![CircleCI](https://img.shields.io/circleci/build/github/fabric/fabric/main)](https://app.circleci.com/pipelines/github/fabric/fabric) [![Codecov](https://img.shields.io/codecov/c/gh/fabric/fabric)](https://app.codecov.io/gh/fabric/fabric)

# Welcome to Fabric\!

Fabric is a high level Python (2.7, 3.4+) library designed to execute shell commands remotely over SSH, yielding useful Python objects in return. It builds on top of [Invoke](https://pyinvoke.org) (subprocess command execution and command-line features) and [Paramiko](https://paramiko.org) (SSH protocol implementation), extending their APIs to complement one another and provide additional functionality.

To find out what's new in this version of Fabric, please see [the changelog](https://fabfile.org/changelog.html#%7B%7D).

The project maintainer keeps a [roadmap](https://bitprophet.org/projects#roadmap) on his website.

This website covers project information for Fabric such as the changelog, contribution guidelines, and so forth. Detailed usage and API documentation can be found at our code documentation site, [docs.fabfile.org](https://docs.fabfile.org).

Please see below for a high level intro, or the navigation on the left for the rest of the site content.

## What is Fabric?

Fabric is a high level Python (2.7, 3.4+) library designed to execute shell commands remotely over SSH, yielding useful Python objects in return:

<div class="testsetup">

opener

mock = MockRemote() \# NOTE: hard to get trailing whitespace in a doctest/snippet block, so we \# just leave the 'real' newline off here too. Whatever. mock.expect(out=b"Linux")

</div>

<div class="testcleanup">

opener

mock.stop()

</div>

<div class="doctest">

opener

\>\>\> from fabric import Connection \>\>\> result = Connection('web1.example.com').run('uname -s', hide=True) \>\>\> msg = "Ran {0.command\!r} on {0.connection.host}, got stdout:n{0.stdout}" \>\>\> print(msg.format(result)) Ran 'uname -s' on web1.example.com, got stdout: Linux

</div>

It builds on top of [Invoke](https://pyinvoke.org) (subprocess command execution and command-line features) and [Paramiko](https://paramiko.org) (SSH protocol implementation), extending their APIs to complement one another and provide additional functionality.

<div class="note">

<div class="title">

Note

</div>

Fabric users may also be interested in two *strictly optional* libraries which implement best-practice user-level code: [Invocations](https://invocations.readthedocs.io) (Invoke-only, locally-focused CLI tasks) and [Patchwork](https://fabric-patchwork.readthedocs.io) (remote-friendly, typically shell-command-focused, utility functions).

</div>

## How is it used?

Core use cases for Fabric include (but are not limited to):

  - Single commands on individual hosts:
    
    <div class="testsetup">
    
    single-command
    
    from fabric import Connection mock = MockRemote() mock.expect(out=b"web1")
    
    </div>
    
    <div class="testcleanup">
    
    single-command
    
    mock.stop()
    
    </div>
    
    <div class="doctest">
    
    single-command
    
    \>\>\> result = Connection('web1').run('hostname') web1 \>\>\> result \<Result cmd='hostname' exited=0\>
    
    </div>

  - Single commands across multiple hosts (via varying methodologies: serial, parallel, etc):
    
    <div class="testsetup">
    
    multiple-hosts
    
    from fabric import Connection mock = MockRemote() mock.expect\_sessions( Session(host='web1', cmd='hostname', out=b'web1n'), Session(host='web2', cmd='hostname', out=b'web2n'), )
    
    </div>
    
    <div class="testcleanup">
    
    multiple-hosts
    
    mock.stop()
    
    </div>
    
    <div class="doctest">
    
    multiple-hosts
    
    \>\>\> from fabric import SerialGroup \>\>\> result = SerialGroup('web1', 'web2').run('hostname') web1 web2 \>\>\> \# Sorting for consistency...it's a dict\! \>\>\> sorted(result.items()) \[(\<Connection host=web1\>, \<Result cmd='hostname' exited=0\>), ...\]
    
    </div>

  - Python code blocks (functions/methods) targeted at individual connections:
    
    <div class="testsetup">
    
    tasks
    
    from fabric import Connection mock = MockRemote() mock.expect(commands=\[ Command("uname -s", out=b"Linuxn"), Command("df -h / | tail -n1 | awk '{print $5}'", out=b'33%n'), \])
    
    </div>
    
    <div class="testcleanup">
    
    tasks
    
    mock.stop()
    
    </div>
    
    <div class="doctest">
    
    tasks
    
    \>\>\> def disk\_free(c): ... uname = c.run('uname -s', hide=True) ... if 'Linux' in uname.stdout: ... command = "df -h / | tail -n1 | awk '{print $5}'" ... return c.run(command, hide=True).stdout.strip() ... err = "No idea how to get disk space on {}\!".format(uname) ... raise Exit(err) ... \>\>\> print(disk\_free(Connection('web1'))) 33%
    
    </div>

  - Python code blocks on multiple hosts:
    
    <div class="testsetup">
    
    tasks-on-multiple-hosts
    
    from fabric import Connection, SerialGroup mock = MockRemote() mock.expect\_sessions( Session(host='web1', commands=\[ Command("uname -s", out=b"Linuxn"), Command("df -h / | tail -n1 | awk '{print $5}'", out=b'33%n'), \]), Session(host='web2', commands=\[ Command("uname -s", out=b"Linuxn"), Command("df -h / | tail -n1 | awk '{print $5}'", out=b'17%n'), \]), Session(host='db1', commands=\[ Command("uname -s", out=b"Linuxn"), Command("df -h / | tail -n1 | awk '{print $5}'", out=b'2%n'), \]), )
    
    </div>
    
    <div class="testcleanup">
    
    tasks-on-multiple-hosts
    
    mock.stop()
    
    </div>
    
    <div class="doctest">
    
    tasks-on-multiple-hosts
    
    \>\>\> \# NOTE: Same code as above\! \>\>\> def disk\_free(c): ... uname = c.run('uname -s', hide=True) ... if 'Linux' in uname.stdout: ... command = "df -h / | tail -n1 | awk '{print $5}'" ... return c.run(command, hide=True).stdout.strip() ... err = "No idea how to get disk space on {}\!".format(uname) ... raise Exit(err) ... \>\>\> for cxn in SerialGroup('web1', 'web2', 'db1'): ... print("{}: {}".format(cxn, disk\_free(cxn))) \<Connection host=web1\>: 33% \<Connection host=web2\>: 17% \<Connection host=db1\>: 2%
    
    </div>

In addition to these library-oriented use cases, Fabric makes it easy to integrate with Invoke's command-line task functionality, invoking via a `fab` binary stub:

  - Python functions, methods or entire objects can be used as CLI-addressable tasks, e.g. `fab deploy`;
  - Tasks may indicate other tasks to be run before or after they themselves execute (pre- or post-tasks);
  - Tasks are parameterized via regular GNU-style arguments, e.g. `fab deploy --env=prod -d`;
  - Multiple tasks may be given in a single CLI session, e.g. `fab build deploy`;
  - Much more - all other Invoke functionality is supported - see [its documentation](https://docs.pyinvoke.org) for details.

## I'm a user of Fabric 1, how do I upgrade?

We've packaged modern Fabric in a manner that allows installation alongside Fabric 1, so you can upgrade at whatever pace your use case requires. There are multiple possible approaches -- see our \[detailed upgrade documentation \<upgrading\>\](\#detailed-upgrade-documentation \<upgrading\>) for details.

## What is this website?

`www.fabfile.org` provides project information for Fabric such as the changelog, contribution guidelines, development roadmap, news/blog, and so forth.

Detailed conceptual and API documentation can be found at our code documentation site, [docs.fabfile.org](https://docs.fabfile.org).

<div class="toctree" hidden="">

changelog changelog-v1 FAQs \<faq\> installing installing-1.x upgrading development troubleshooting Roadmap \<roadmap\> contact

</div>

---

installing-1.x.md

---

# Installing (1.x)

<div class="note">

<div class="title">

Note

</div>

Installing Fabric 2.0 or above? Looking for non-PyPI downloads or source code checkout instructions? See \[installing\](installing.md).

</div>

This document includes legacy notes on installing Fabric 1.x. Users are strongly encouraged to upgrade to 2.x when possible.

## Basic installation

Fabric is best installed via [pip](http://pip-installer.org); to ensure you get Fabric 1 instead of the new but incompatible Fabric 2, specify `<2.0`:

    $ pip install 'fabric<2.0'

All advanced `pip` use cases work too, such as installing the latest copy of the `v1` development branch:

    $ pip install -e 'git+https://github.com/fabric/fabric@v1#egg=fabric'

Or cloning the Git repository and running:

    $ git checkout v1
    $ pip install -e .

within it.

Your operating system may also have a Fabric package available (though these are typically older and harder to support), typically called `fabric` or `python-fabric`. E.g.:

    $ sudo apt-get install fabric

<div class="note">

<div class="title">

Note

</div>

Make sure to confirm which major version is currently packaged\!

</div>

## Dependencies

In order for Fabric's installation to succeed, you will need four primary pieces of software:

  - the Python programming language;
  - the `setuptools` packaging/installation library;
  - the Python [Paramiko](http://paramiko.org) SSH library;
  - and Paramiko's dependency, [Cryptography](https://cryptography.io).

and, if using parallel execution mode,

  - the [multiprocessing](#multiprocessing) library.

Please read on for important details on each dependency -- there are a few gotchas.

### Python

Fabric requires [Python](http://python.org) version 2.5+.

### setuptools

[Setuptools](https://pypi.org/project/setuptools) comes with most Python installations by default; if yours doesn't, you'll need to grab it. In such situations it's typically packaged as `python-setuptools`, `py26-setuptools` or similar.

### `multiprocessing`

An optional dependency, the `multiprocessing` library is included in Python's standard library in version 2.6 and higher. If you're using Python 2.5 and want to make use of Fabric's parallel execution features you'll need to install it manually; the recommended route, as usual, is via `pip`. Please see the [multiprocessing PyPI page](https://pypi.org/project/multiprocessing/) for details.

<div class="warning">

<div class="title">

Warning

</div>

Early versions of Python 2.6 (in our testing, 2.6.0 through 2.6.2) ship with a buggy `multiprocessing` module that appears to cause Fabric to hang at the end of sessions involving large numbers of concurrent hosts. If you encounter this problem, either use `env.pool_size` / `-z` to limit the amount of concurrency, or upgrade to Python \>=2.6.3.

Python 2.5 is unaffected, as it requires the PyPI version of `multiprocessing`, which is newer than that shipped with Python \<2.6.3.

</div>

---

installing.md

---

# Installing

<div class="note">

<div class="title">

Note

</div>

Users looking to install Fabric 1.x should see \[installing-1.x\](installing-1.x.md). However, \[upgrading \<upgrading\>\](upgrading \<upgrading\>.md) to 2.x is strongly recommended.

</div>

Fabric is best installed via [pip](https://pip-installer.org):

    $ pip install fabric

All advanced `pip` use cases work too, such as:

    $ pip install -e git+https://github.com/fabric/fabric

Or cloning the Git repository and running:

    $ pip install -e .

within it.

Your operating system may also have a Fabric package available (though these are typically older and harder to support), typically called `fabric` or `python-fabric`. E.g.:

    $ sudo apt-get install fabric

## Installing modern Fabric as `fabric2`

Users who are migrating from Fabric 1 to Fabric 2+ may find it useful to have both versions installed side-by-side. The easiest way to do this is to use the handy `fabric2` PyPI entry:

    $ pip install fabric2

This upload is generated from the normal Fabric repository, but is tweaked at build time so that it installs a `fabric2` package instead of a `fabric` one (and a `fab2` binary instead of a `fab` one.) The codebase is otherwise unchanged.

Users working off of the Git repository can enable that same tweak with an environment variable, e.g.:

    $ PACKAGE_AS_FABRIC2=yes pip install -e .

<div class="note">

<div class="title">

Note

</div>

The value of the environment variable doesn't matter, as long as it is not empty.

</div>

### `fabric` and `fabric2` vs `fabric3`

Unfortunately, the `fabric3` entry on PyPI is an unauthorized fork of Fabric 1.x which we do not control. Once modern Fabric gets up to 3.x, 4.x etc, we'll likely continue distributing it via both `fabric` and `fabric2` for convenience; there will never be any official `fabric3`, `fabric4` etc.

In other words, `fabric2` is purely there to help users of 1.x cross the 2.0 "major rewrite" barrier; future major versions will *not* be large rewrites and will only have small sets of backward incompatibilities.

### Inability to `pip install -e` both versions

You may encounter issues if *both* versions of Fabric are installed via `pip install -e`, due to how that functionality works (tl;dr it just adds the checkout directories to `sys.path`, regardless of whether you wanted to "install" all packages within them - so Fabric 2+'s `fabric/` package still ends up visible to the import system alongside `fabric2/`).

Thus, you may only have one of the local copies of Fabric installed in 'editable' fashion at a time, and the other must be repeatedly reinstalled via `pip install` (no `-e`) if you need to make edits to it.

### Order of installations

Due to the same pip quirk mentioned above, if either of your Fabric versions are installed in 'editable' mode, you **must** install the 'editable' version first, and then install the 'static' version second.

For example, if you're migrating from some public release of Fabric 1 to a checkout of modern Fabric:

    $ PACKAGE_AS_FABRIC2=yes pip install -e /path/to/fabric2
    $ pip install fabric==1.14.0

You may see some warnings on that second `pip install` (eg `Not uninstalling fabric` or `Can't uninstall 'fabric'`) but as long as it exits cleanly and says something like `Successfully installed fabric-1.14.0`, you should be okay. Double check with e.g. `pip list` and you should have entries for both `fabric` and `fabric2`.

## Dependencies

In order for Fabric's installation to succeed, you will need the following:

  - the Python programming language, versions 2.7 or 3.4+;
  - the [Invoke](https://pyinvoke.org) command-running and task-execution library;
  - and the [Paramiko](https://paramiko.org) SSH library (as well as its own dependencies; see [its install docs](https://paramiko.org/installing.html).)

### Development dependencies

If you are interested in doing development work on Fabric (or even just running the test suite), you'll need the libraries listed in the `dev-requirements.txt` (included in the source distribution.) Usually it's easy to simply `pip install -r dev-requirements.txt`.

## Downloads

To obtain a tar.gz or zip archive of the Fabric source code, you may visit [Fabric's PyPI page](https://pypi.org/project/fabric), which offers manual downloads in addition to being the entry point for `pip`.

## Source code checkouts

The Fabric developers manage the project's source code with the [Git](http://git-scm.com) DVCS. To follow Fabric's development via Git instead of downloading official releases, you have the following options:

  - Clone the canonical repository straight from [the Fabric organization's repository on Github](https://github.com/fabric/fabric) (cloning instructions available on that page).
  - Make your own fork of the Github repository by making a Github account, visiting [fabric/fabric](https://github.com/fabric/fabric) and clicking the "fork" button.

\> **Note** \> If you've obtained the Fabric source via source control and plan on updating your checkout in the future, we highly suggest using `pip install     -e .` (or `python setup.py develop`) instead -- it will use symbolic links instead of file copies, ensuring that imports of the library or use of the command-line tool will always refer to your checkout.

For information on the hows and whys of Fabric development, including which branches may be of interest and how you can help out, please see the \[development\](development.md) page.

---

roadmap.md

---

# Development roadmap

This document outlines Fabric's intended development path. Please make sure you're reading [the latest version](https://fabfile.org/roadmap.html) of this document, and also see the page about \[upgrading \<upgrading\>\](\#upgrading-\<upgrading\>) if you are migrating from version 1 to versions 2 or above.

<div class="seealso">

The primary project maintainer keeps an overall [roadmap](https://bitprophet.org/projects#roadmap) on his website, which can help contextualize when Fabric may get its next update.

</div>

## Fabric 2 and above

Modern Fabric versions (2+) receive active feature and bugfix development:

  - **2.0**: Initial public release, arguably a technology preview and a packaging/upgrade trial. Intent is to act as a jolt for users of 1.x who aren't pinning their dependencies (sorry, folks\!), enable installation via PyPI so users don't have to install via Git to start upgrading, and generally get everything above-board and iterating in classic semantic versioning fashion.
  - **2.1, 2.2, 2.3, etc**: Implement the most pressing "missing features", including features which were present in 1.0 (see \[upgrading\](\#upgrading) for details on these) as well as any brand new features we've been wanting in 2.x for a while (though most of these will come via Invoke and/or Paramiko releases -- see note below for more).
  - **3.0, 4.0, etc**: Subsequent major releases will **not** be full-on rewrites as 2.0 was, but will be *small* (feature-release-sized) releases that just happen to contain one or more backwards incompatible API changes. These will be clearly marked in the changelog and reflected in the upgrading documentation.

<div class="note">

<div class="title">

Note

</div>

Many features that you may use via Fabric will only need development in the libraries Fabric wraps -- [Invoke](https://pyinvoke.org) and [Paramiko](https://paramiko.org) -- and unless Fabric itself needs changes to match, you can often get new features by upgrading only one of the three. Make sure to check the other projects' changelogs periodically\!

</div>

## Fabric 1.x

Fabric 1.x has reached a tipping point regarding internal tech debt, lack of testability & ability to make improvements without harming backwards compatibility. As such, the 1.x line now receives bugfixes only. We **strongly** encourage all users to \[upgrade \<upgrading\>\](\#upgrade-\<upgrading\>) to Fabric 2.x.

---

troubleshooting.md

---

# Troubleshooting

Stuck? Having a problem? Here are the steps to try before you submit a bug report.

  - **Make sure you're on the latest version.** If you're not on the most recent version, your problem may have been solved already\! Upgrading is always the best first step.

  - **Try older versions.** If you're already *on* the latest Fabric, try rolling back a few minor versions (e.g. if on 2.3, try Fabric 2.2 or 2.1) and see if the problem goes away. This will help the devs narrow down when the problem first arose in the commit log.

  - **Try switching up your Paramiko.** Fabric relies heavily on the Paramiko library for its SSH functionality, so try applying the above two steps to your Paramiko install as well.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    Fabric versions sometimes have different Paramiko dependencies - so to try older Paramikos you may need to downgrade Fabric as well.
    
    </div>

  - **Make sure Fabric is really the problem.** If your problem is in the behavior or output of a remote command, try recreating it without Fabric involved:
    
    >   - Find out the exact command Fabric is executing on your behalf:
    >     
    >     >   - In 2.x and up, activate command echoing via the `echo=True` keyword argument, the `run.echo` config setting, or the `-e` CLI option.
    >     >   - In 1.x, run Fabric with `--show=debug` and look for `run:` or `sudo:` lines.
    > 
    >   - Execute the command in an interactive remote shell first, to make sure it works for a regular human; this will catch issues such as errors in command construction.
    > 
    >   - If that doesn't find the issue, run the command over a non-shell SSH session, e.g. `ssh yourserver "your command"`. Depending on your settings and Fabric version, you may want to use `ssh -T` (disable PTY) or `-t` (enable PTY) to most closely match how Fabric is executing the command.

  - **Enable Paramiko-level debug logging.** If your issue is in the lower level Paramiko library, it can help us to see the debug output Paramiko prints. At top level in your fabfile (or in an appropriate module, if not using a fabfile), add the following:
    
        import logging
        logging.basicConfig(level=logging.DEBUG)
    
    This should start printing Paramiko's debug statements to your standard error stream. (Feel free to add more logging kwargs to `basicConfig()` such as `filename='/path/to/a/file'` if you like.)
    
    Then submit this info to anybody helping you on IRC or in your bug report.

---

upgrading.md

---

# Upgrading from 1.x

Modern Fabric (2+) represents a near-total reimplementation & reorganization of the software. It's been \[broken in two \<invoke-split-from-fabric\>\](\#broken-in-two-\<invoke-split-from-fabric\>), cleaned up, made more explicit, and so forth. In some cases, upgrading requires only basic search & replace; in others, more work is needed.

If you read this document carefully, it should guide you in the right direction until you're fully upgraded. If any functionality you're using in Fabric 1 isn't listed here, please file a ticket [on Github](https://github.com/fabric/fabric) and we'll update it ASAP.

<div class="warning">

<div class="title">

Warning

</div>

As of the 2.0 release line, Fabric 2 is **not** at 100% feature parity with 1.x\! Some features have been explicitly dropped, but others simply have not been ported over yet, either due to time constraints or because said features need to be re-examined in a modern context.

Please review the information below, including the \[upgrade-specifics\](\#upgrade-specifics) section which contains a very detailed list, before filing bug reports\!

Also see \[the roadmap \<roadmap\>\](\#the-roadmap-\<roadmap\>) for additional notes about release versioning.

</div>

## Why upgrade?

We'd like to call out, in no particular order, some specific improvements in modern Fabric that might make upgrading worth your time.

<div class="note">

<div class="title">

Note

</div>

These are all listed in the rest of the doc too, so if you're already sold, just skip there.

</div>

  - Thread-safe - no more requirement on multiprocessing for concurrency;
  - API reorganized around <span class="title-ref">fabric.connection.Connection</span> objects instead of global module state;
  - Command-line parser overhauled to allow for regular GNU/POSIX style flags and options on a per-task basis (no more `fab mytask:weird=custom,arg=format`);
  - Task organization is more explicit and flexible / has less 'magic';
  - Tasks can declare other tasks to always be run before or after themselves;
  - Configuration massively expanded to allow for multiple config files & formats, env vars, per-user/project/module configs, and much more;
  - SSH config file loading enabled by default & has been fleshed out re: system/user/runtime file selection;
  - Shell command execution API consistent across local and remote method calls -no more differentiation between `local` and `run` (besides where the command runs, of course\!);
  - Shell commands significantly more flexible re: interactive behavior, simultaneous capture & display (now applies to local subprocesses, not just remote), encoding control, and auto-responding;
  - Use of Paramiko's APIs for the SSH layer much more transparent - e.g. <span class="title-ref">fabric.connection.Connection</span> allows control over the kwargs given to <span class="title-ref">SSHClient.connect \<paramiko.client.SSHClient.connect\></span>;
  - Gateway/jump-host functionality offers a `ProxyJump` style 'native' (no proxy-command subprocesses) option, which can be nested infinitely;

## 'Sidegrading' to Invoke

We linked to a note about this above, but to be explicit: modern Fabric is really a few separate libraries, and anything not strictly SSH or network related has been \[split out into the Invoke project \<invoke-split-from-fabric\>\](\#split-out-into-the-invoke-project \<invoke-split-from-fabric\>).

This means that if you're in the group of users leveraging Fabric solely for its task execution or `local`, and never used `run`, `put` or similar - **you don't need to use Fabric itself anymore** and can simply **'sidegrade' to Invoke instead**.

You'll still want to read over this document to get a sense of how things have changed, but be aware that you can get away with `pip install invoke` and won't need Fabric, Paramiko, cryptography dependencies, or anything else.

## Using modern Fabric from within Invoke

We intend to enhance modern Fabric until it encompasses the bulk of Fabric 1's use cases, such that you can use `fab` and fabfiles on their own without caring too much about how it's built on top of Invoke.

However, prior to that point -- and very useful on its own for intermediate-to-advanced users -- is the fact that modern Fabric is designed with library or direct API use in mind. **It's entirely possible, and in some cases preferable, to use Invoke for your CLI needs and Fabric as a pure API within your Invoke tasks.**

In other words, you can eschew `fab`/fabfiles entirely unless you find yourself strongly needing the conveniences it wraps around ad-hoc sessions, such as `--hosts` and the like.

## Running both Fabric versions simultaneously

To help with gradual upgrades, modern Fabric may be installed under the name `fabric2` (in addition to being made available "normally" as versions 2.0+ of `fabric`) and can live alongside installations of version 1.x.

Thus, if you have a large codebase and don't want to make the jump to modern versions in one leap, it's possible to have both Fabric 1 (`fabric`, as you presumably had it installed previously) and modern Fabric (as `fabric2`) resident in your Python environment simultaneously.

<div class="note">

<div class="title">

Note

</div>

We strongly recommend that you eventually migrate all code using Fabric 1, to versions 2 or above, so that you can move back to installing and importing under the `fabric` name. `fabric2` as a distinct package and module is intended to be a stopgap, and there will not be any `fabric3` or above (not least because some of those names are already taken\!)

</div>

For details on how to obtain the `fabric2` version of the package, see \[installing-as-fabric2\](\#installing-as-fabric2).

### Creating `Connection` and/or `Config` objects from v1 settings

A common tactic when upgrading piecemeal is to generate modern Fabric objects whose contents match the current Fabric 1 environment. Whereas Fabric 1 stores *all* configuration (including the "current host") in a single place -- the `env` object -- modern Fabric breaks things up into multiple (albeit composed) objects: <span class="title-ref">\~fabric.connection.Connection</span> for per-connection parameters, and <span class="title-ref">\~fabric.config.Config</span> for general settings and defaults.

In most cases, you'll only need to generate a <span class="title-ref">\~fabric.connection.Connection</span> object using the alternate class constructor <span class="title-ref">Connection.from\_v1 \<fabric.connection.Connection.from\_v1\></span>, which should be fed your appropriate local `fabric.api.env` object; see its API docs for details.

A contrived example:

    from fabric.api import env, run
    from fabric2 import Connection
    
    env.host_string = "admin@myserver"
    run("whoami") # v1
    cxn = Connection.from_v1(env)
    cxn.run("whoami") # v2+

By default, this constructor calls another API member -- <span class="title-ref">Config.from\_v1 \<fabric.config.Config.from\_v1\></span> -- internally on your behalf. Users who need tighter control over modern-style config options may opt to call that classmethod explicitly and hand their modified result into <span class="title-ref">Connection.from\_v1 \<fabric.connection.Connection.from\_v1\></span>, which will cause the latter to skip any implicit config creation.

### Mapping of v1 `env` vars to modern API members

The `env` vars and how they map to <span class="title-ref">\~fabric.connection.Connection</span> arguments or <span class="title-ref">\~fabric.config.Config</span> values (when fed into the `.from_v1` constructors described above) are listed below.

<table>
<thead>
<tr class="header">
<th>v1 <code>env</code> var</th>
<th>v2+ usage (prefixed with the class it ends up in)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>always_use_pty</code></td>
<td>Config: <code>run.pty</code>.</td>
</tr>
<tr class="even">
<td><code>command_timeout</code></td>
<td>Config: <code>timeouts.command</code>; timeouts are now their own config subtree, whereas in v1 it was possible for the ambiguous <code>timeout</code> setting -- see below -- to work for either connect OR command timeouts.</td>
</tr>
<tr class="odd">
<td><code>forward_agent</code></td>
<td>Config: <code>connect_kwargs.forward_agent</code>.</td>
</tr>
<tr class="even">
<td><code>gateway</code></td>
<td>Config: <code>gateway</code>.</td>
</tr>
<tr class="odd">
<td><code>host_string</code></td>
<td>Connection: <code>host</code> kwarg (which can handle host-string like values, including user/port).</td>
</tr>
<tr class="even">
<td><p><code>key</code></p></td>
<td><p><strong>Not supported</strong>: Fabric 1 performed extra processing on this (trying a bunch of key classes to instantiate) before handing it into Paramiko; modern Fabric prefers to just let you handle Paramiko-level parameters directly.</p>
<p>If you're filling your Fabric 1 <code>key</code> data from a file, we recommend switching to <code>key_filename</code> instead, which is supported.</p>
<p>If you're loading key data from some other source as a string, you should know what type of key your data is and manually instantiate it instead, then supply it to the <code>connect_kwargs</code> parameter. For example:</p>
<pre><code>from io import StringIO
from fabric.state import env
from fabric2 import Connection
from paramiko import RSAKey
from somewhere import load_my_key_string

pkey = RSAKey.from_private_key(StringIO(load_my_key_string()))
cxn = Connection.from_v1(env, connect_kwargs={&quot;pkey&quot;: pkey})</code></pre></td>
</tr>
<tr class="odd">
<td><code>key_filename</code></td>
<td>Config: <code>connect_kwargs.key_filename</code>.</td>
</tr>
<tr class="even">
<td><code>no_agent</code></td>
<td>Config: <code>connect_kwargs.allow_agent</code> (inverted).</td>
</tr>
<tr class="odd">
<td><code>password</code></td>
<td>Config: <code>connect_kwargs.password</code>, as well as <code>sudo.password</code> <strong>if and only if</strong> the env's <code>sudo_password</code> (see below) is unset. (This mimics how v1 uses this particular setting - in earlier versions there was no <code>sudo_password</code> at all.)</td>
</tr>
<tr class="even">
<td><p><code>port</code></p></td>
<td><p>Connection: <code>port</code> kwarg. Is casted to an integer due to Fabric 1's default being a string value (which is not valid in v2).</p>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Since v1's <code>port</code> is used both for a default <em>and</em> to store the current connection state, v2 uses it to fill in the Connection only, and not the Config, on assumption that it will typically be the current connection state.</p>
</div></td>
</tr>
<tr class="odd">
<td><code>ssh_config_path</code></td>
<td>Config: <code>ssh_config_path</code>.</td>
</tr>
<tr class="even">
<td><code>sudo_password</code></td>
<td>Config: <code>sudo.password</code>.</td>
</tr>
<tr class="odd">
<td><code>sudo_prompt</code></td>
<td>Config: <code>sudo.prompt</code>.</td>
</tr>
<tr class="even">
<td><code>timeout</code></td>
<td>Config: <code>timeouts.connection</code>, for connection timeouts, or <code>timeouts.command</code> for command timeouts (see above).</td>
</tr>
<tr class="odd">
<td><code>use_ssh_config</code></td>
<td>Config: <code>load_ssh_configs</code>.</td>
</tr>
<tr class="even">
<td><code>user</code></td>
<td>Connection: <code>user</code> kwarg.</td>
</tr>
<tr class="odd">
<td><code>warn_only</code></td>
<td>Config: <code>run.warn</code></td>
</tr>
</tbody>
</table>

## Upgrade specifics

This is (intended to be) an exhaustive list of *all* Fabric 1.x functionality, as well as new-to-Invoke-or-Fabric-2 functionality not present in 1.x; it specifies whether upgrading is necessary, how to upgrade if so, and tracks features which haven't been implemented in modern versions yet.

Most sections are broken down in table form, as follows:

|                              |                                 |                                         |
| ---------------------------- | ------------------------------- | --------------------------------------- |
| Fabric 1 feature or behavior | Status, see below for breakdown | Migration notes, removal rationale, etc |

Below are the typical values for the 'status' column, though some of them are a bit loose - make sure to read the notes column in all cases\! Also note that things are not ironclad - eg any 'removed' item has some chance of returning if enough users request it or use cases are made that workarounds are insufficient.

  - **Ported**: available already, possibly renamed or moved (frequently, moved into the [Invoke](https://pyinvoke.org) codebase.)
  - **Pending**: would fit, but has not yet been ported, good candidate for a patch. *These entries link to the appropriate Github ticket* - please do not make new ones\!
  - **Removed**: explicitly *not* ported (no longer fits with vision, had too poor a maintenance-to-value ratio, etc) and unlikely to be reinstated.

Here's a quick local table of contents for navigation purposes:

<div class="contents" data-local="">

</div>

### General / conceptual

  - The CLI task-oriented workflow remains a primary design goal, but the library use case is no longer a second-class citizen; instead, the library functionality has been designed first, with the CLI/task features built on top of it.

  - Additionally, within the CLI use case, version 1 placed too much emphasis on 'lazy' interactive prompts for authentication secrets or even connection parameters, driven in part by a lack of strong configuration mechanisms. Over time it became clear this wasn't worth the tradeoffs of having confusing noninteractive behavior and difficult debugging/testing procedures.
    
    Modern Fabric takes an arguably cleaner approach (based on functionality added to v1 over time) where users are encouraged to leverage the configuration system and/or serve the user prompts for runtime secrets at the *start* of the process; if the system determines it's missing information partway through, it raises exceptions instead of prompting.

<!-- end list -->

  - \- Invoke's design includes \[explicit user-facing testing functionality  
    \<testing-user-code\>\](\#explicit-user-facing-testing-functionality

  - \--\<testing-user-code\>); if you didn't find a way to write tests for your  
    Fabric-using code before, it should be much easier now.
    
    >   - We recommend trying to write tests early on; they will help clarify the upgrade process for you & also make the process safer\!

### API organization

High level code flow and API member concerns.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td>Import everything via <code>fabric.api</code></td>
<td>Removed</td>
<td>All useful imports are now available at the top level, e.g. <code>from fabric import Connection</code>.</td>
</tr>
<tr class="even">
<td><p>Configure connection parameters globally (via <code>env.host_string</code>, <code>env.host</code>, <code>env.port</code>, <code>env.user</code>) and call global methods which implicitly reference them (<code>run</code>/<code>sudo</code>/etc)</p></td>
<td><p>Removed</p></td>
<td><p>The primary API is now properly OOP: instantiate <span class="title-ref">fabric.connection.Connection</span> objects and call their methods. These objects encapsulate all connection state (user, host, gateway, etc) and have their own SSH client instances.</p>
<div class="seealso">
<p><span class="title-ref">Connection.from_v1 &lt;fabric.connection.Connection.from_v1&gt;</span></p>
</div></td>
</tr>
<tr class="odd">
<td><p>Emphasis on serialized "host strings" as method of setting user, host, port, etc</p></td>
<td><p>Ported/Removed</p></td>
<td><p><span class="title-ref">fabric.connection.Connection</span> <em>can</em> accept a shorthand "host string"-like argument, but the primary API is now explicit user, host, port, etc keyword arguments.</p>
<p>Additionally, many arguments/settings/etc that expected a host string in v1 will now expect a <span class="title-ref">fabric.connection.Connection</span> instance instead.</p></td>
</tr>
<tr class="even">
<td><p>Use of "roles" as global named lists of host strings</p></td>
<td><p>Ported</p></td>
<td><p>This need is now served by <span class="title-ref">fabric.group.Group</span> objects (which wrap some number of <span class="title-ref">fabric.connection.Connection</span> instances with "do a thing to all members" methods.) Users can create &amp; organize these any way they want.</p>
<p>See the line items for <code>--roles</code> ([upgrading-cli](#upgrading-cli)), <code>env.roles</code> ([upgrading-env](#upgrading-env)) and <code>@roles</code> ([upgrading-tasks](#upgrading-tasks)) for the status of those specifics.</p></td>
</tr>
</tbody>
</table>

### Task functions & decorators

<div class="note">

<div class="title">

Note

</div>

Nearly all task-related functionality is implemented in Invoke; for more details see its \[execution \<invoking-tasks\>\](\#execution-\<invoking-tasks\>) and \[namespaces \<task-namespaces\>\](\#namespaces

</div>

\----\<task-namespaces\>) documentation.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td>By default, tasks are loaded from a <code>fabfile.py</code> which is sought up towards filesystem root from the user's current working directory</td>
<td>Ported</td>
<td>This behavior is basically identical today, with minor modifications and enhancements (such as tighter control over the load process, and API hooks for implementing custom loader logic - see [loading-collections](#loading-collections).)</td>
</tr>
<tr class="even">
<td>"Classic" style implicit task functions lacking a <code>@task</code> decorator</td>
<td>Removed</td>
<td>These were on the way out even in v1, and arbitrary task/namespace creation is more explicitly documented now, via Invoke's <span class="title-ref">~invoke.tasks.Task</span> and <span class="title-ref">~invoke.collection.Collection</span>.</td>
</tr>
<tr class="odd">
<td>"New" style <code>@task</code>-decorated, module-level task functions</td>
<td>Ported</td>
<td>Largely the same, though now with superpowers - <span class="title-ref">@task &lt;fabric.tasks.task&gt;</span> can still be used without any parentheses, but where v1 only had a single <code>task_class</code> argument, the new version (largely based on Invoke's) has a number of namespace and parser hints, as well as execution related options (such as those formerly served by <code>@hosts</code> and friends).</td>
</tr>
<tr class="even">
<td><p>Arbitrary task function arguments (i.e. <code>def mytask(any, thing, at, all)</code>)</p></td>
<td><p>Ported</p></td>
<td><p>This gets its own line item because: tasks must now take a <span class="title-ref">~invoke.context.Context</span> (vanilla Invoke) or <span class="title-ref">fabric.connection.Connection</span> (Fabric) object as their first positional argument. The rest of the function signature is, as before, totally up to the user &amp; will get automatically turned into CLI flags.</p>
<p>This sacrifices a small bit of the "quick DSL" of v1 in exchange for a cleaner, easier to understand/debug, and more user-overrideable API structure.</p>
<p>As a side effect, it lessens the distinction between "module of functions" and "class of methods"; users can more easily start with the former and migrate to the latter when their needs grow/change.</p></td>
</tr>
<tr class="odd">
<td><p>Implicit task tree generation via import-crawling</p></td>
<td><p>Ported/Removed</p></td>
<td><p>Namespace construction is now more explicit; for example, imported modules in your <code>fabfile.py</code> are no longer auto-scanned and auto-added to the task tree.</p>
<p>However, the root <code>fabfile.py</code> <em>is</em> automatically loaded (using <span class="title-ref">Collection.from_module &lt;invoke.collection.Collection.from_module&gt;</span>), preserving the simple/common case. See [task-namespaces](#task-namespaces) for details.</p>
<p>We may reinstate (in an opt-in fashion) imported module scanning later, since the use of explicit namespace objects still allows users control over the tree that results.</p></td>
</tr>
<tr class="even">
<td><code>@hosts</code> for determining the default host or list of hosts a given task uses</td>
<td>Ported</td>
<td>Reinstated as the <code>hosts</code> parameter of <span class="title-ref">@task &lt;fabric.tasks.task&gt;</span>. Further, it can now handle dicts of <span class="title-ref">fabric.connection.Connection</span> kwargs in addition to simple host strings.</td>
</tr>
<tr class="odd">
<td><code>@roles</code> for determining the default list of group-of-host targets a given task uses</td>
<td>Pending</td>
<td>See [upgrading-api](#upgrading-api) for details on the overall 'roles' concept. When it returns, this will probably follow <code>@hosts</code> and become some <code>@task</code> argument.</td>
</tr>
<tr class="even">
<td><p><code>@serial</code>/<code>@parallel</code>/<code>@runs_once</code></p></td>
<td><p>Ported/<a href="https://github.com/pyinvoke/invoke/issues/63">Pending</a></p></td>
<td><p>Parallel execution is currently offered at the API level via <span class="title-ref">fabric.group.Group</span> subclasses such as <span class="title-ref">fabric.group.ThreadingGroup</span>; however, designating entire sessions and/or tasks to run in parallel (or to exempt from parallelism) has not been solved yet.</p>
<p>The problem needs solving at a higher level than just SSH targets, so this links to an Invoke-level ticket.</p></td>
</tr>
<tr class="odd">
<td><code>execute</code> for calling named tasks from other tasks while honoring decorators and other execution mechanics (as opposed to calling them simply as functions)</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/170">Pending</a></td>
<td>This is one of the top "missing features" from the rewrite; link is to Invoke's tracker.</td>
</tr>
<tr class="even">
<td><code>Task</code> class for programmatic creation of tasks (as opposed to using some function object and the <code>@task</code> decorator)</td>
<td>Ported</td>
<td>While not sharing many implementation details with v1, modern Fabric (via Invoke) has a publicly exposed <span class="title-ref">~invoke.tasks.Task</span> class, which alongside <span class="title-ref">~invoke.collection.Collection</span> allow full programmatic creation of task trees, no decorator needed.</td>
</tr>
</tbody>
</table>

### CLI arguments, options and behavior

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td>Exposure of task arguments as custom colon/comma delimited CLI arguments, e.g. <code>fab mytask:posarg,kwarg=val</code></td>
<td>Removed</td>
<td>CLI arguments are now proper GNU/POSIX-style long and short flags, including globbing shortflags together, space or equals signs to attach values, optional values, and much more. See [invoking-tasks](#invoking-tasks).</td>
</tr>
<tr class="even">
<td>Task definition names are mirrored directly on the command-line, e.g for task <code>def journald_logs()</code>, command line argument is <code>fab journald_logs</code></td>
<td>Removed</td>
<td>Tasks names now get converted from underscores to hyphens. Eg. task <code>def journald_logs()</code> now evaluates to <code>fab journald-logs</code> on the commandline.</td>
</tr>
<tr class="odd">
<td>Ability to invoke multiple tasks in a single command line, e.g. <code>fab task1 task2</code></td>
<td>Ported</td>
<td>Works great!</td>
</tr>
<tr class="even">
<td><code>python -m fabric</code> as stand-in for <code>fab</code></td>
<td>Ported</td>
<td>Ported in 2.2.</td>
</tr>
<tr class="odd">
<td><code>-a</code>/<code>--no_agent</code> for disabling automatic SSH agent key selection</td>
<td>Removed</td>
<td>To disable use of an agent permanently, set config value <code>connect_kwargs.allow_agent</code> to <code>False</code>; to disable temporarily, unset the <code>SSH_AUTH_SOCK</code> env var.</td>
</tr>
<tr class="even">
<td><code>-A</code>/<code>--forward-agent</code> for enabling agent forwarding to the remote end</td>
<td>Removed</td>
<td>The config and kwarg versions of this are ported, but there is currently no CLI flag. Usual "you can set the config value at runtime with a shell env variable" clause is in effect, so this <em>may</em> not get ported, depending.</td>
</tr>
<tr class="odd">
<td><code>--abort-on-prompts</code> to turn interactive prompts into exceptions (helps avoid 'hanging' sessions)</td>
<td>Removed</td>
<td>See the notes about interactive prompts going away in [upgrading-general](#upgrading-general). Without mid-session prompts, there's no need for this option.</td>
</tr>
<tr class="even">
<td><code>-c</code>/<code>--config</code> for specifying an alternate config file path</td>
<td>Ported</td>
<td><code>--config</code> lives on, but the short flag is now <code>-f</code> (<code>-c</code> now determines which collection module name is sought by the task loader.)</td>
</tr>
<tr class="odd">
<td><code>--colorize-errors</code> (and <code>env.colorize_errors</code>) to enable ANSI coloring of error output</td>
<td><a href="https://github.com/fabric/fabric/issues/101">Pending</a></td>
<td>Very little color work has been done yet and this is one of the potentially missing pieces. We're unsure how often this was used in v1 so it's possible it won't show up again, but generally, we like using color as an additional output vector, so...</td>
</tr>
<tr class="even">
<td><code>-d</code>/<code>--display</code> for showing info on a given command</td>
<td>Ported</td>
<td>This is now the more standard <code>-h</code>/<code>--help</code>, and can be given in either "direction": <code>fab -h mytask</code> or <code>fab mytask -h</code>.</td>
</tr>
<tr class="odd">
<td><code>-D</code>/<code>--disable-known-hosts</code> to turn off Paramiko's automatic loading of user-level <code>known_hosts</code> files</td>
<td><a href="https://github.com/fabric/fabric/issues/1804">Pending</a></td>
<td>Not ported yet, probably will be.</td>
</tr>
<tr class="even">
<td><code>-e</code>/<code>--eagerly-disconnect</code> (and <code>env.eagerly_disconnect</code>) which tells the execution system to disconnect from hosts as soon as a task is done running</td>
<td>Ported/<a href="https://github.com/fabric/fabric/issues/1805">Pending</a></td>
<td>There's no explicit connection cache anymore, so eager disconnection should be less necessary. However, investigation and potential feature toggles are still pending.</td>
</tr>
<tr class="odd">
<td><code>-f</code>/<code>--fabfile</code> to select alternate fabfile location</td>
<td>Ported</td>
<td>This is now split up into <code>-c</code>/<code>--collection</code> and <code>-r</code>/<code>--search-root</code>; see [loading-collections](#loading-collections).</td>
</tr>
<tr class="even">
<td><p><code>-g</code>/<code>--gateway</code> (and <code>env.gateway</code>) for selecting a global SSH gateway host string</p></td>
<td><p><a href="https://github.com/fabric/fabric/issues/1806">Pending</a></p></td>
<td><p>One can set the global <code>gateway</code> config option via an environment variable, which at a glance would remove the need for a dedicated CLI option. However, this approach only allows setting string values, which in turn only get used for <code>ProxyCommand</code> style gatewaying, so it <em>doesn't</em> replace v1's <code>--gateway</code> (which took a host string and turned it into a <code>ProxyJump</code> style gateway).</p>
<p>Thus, if enough users notice the lack, we'll consider a feature-add that largely mimics the v1 behavior: string becomes first argument to <span class="title-ref">fabric.connection.Connection</span> and that resulting object is then set as <code>gateway</code>.</p></td>
</tr>
<tr class="odd">
<td><code>--gss-auth</code>/<code>--gss-deleg</code>/<code>--gss-kex</code></td>
<td>Removed</td>
<td>These didn't seem used enough to be worth porting over, especially since they fall under the usual umbrella of "Paramiko-level connect passthrough" covered by the <code>connect_kwargs</code> config option. (Which, if necessary, can be set at runtime via shell environment variables, like any other config value.)</td>
</tr>
<tr class="even">
<td><code>--hide</code>/<code>--show</code> for tweaking output display globally</td>
<td>Removed</td>
<td>This is configurable via the config system and env vars.</td>
</tr>
<tr class="odd">
<td><code>-H</code>/<code>--hosts</code></td>
<td>Ported</td>
<td>Works basically the same as before - if given, is shorthand for executing any given tasks once per host.</td>
</tr>
<tr class="even">
<td><code>-i</code> for SSH key filename selection</td>
<td>Ported</td>
<td>Works same as v1, including ability to give multiple times to build a list of keys to try.</td>
</tr>
<tr class="odd">
<td><code>-I</code>/<code>--initial-password-prompt</code> for requesting an initial pre-execution password prompt</td>
<td>Ported</td>
<td>It's now <code class="interpreted-text" role="option">--prompt-for-login-password</code>, [--prompt-for-sudo-password &lt;prompt-for-sudo-password&gt;](#--prompt-for-sudo-password-&lt;prompt-for-sudo-password&gt;) or <code class="interpreted-text" role="option">--prompt-for-passphrase</code>, depending on whether you were using the former to fill in passwords or key passphrases (or both.)</td>
</tr>
<tr class="even">
<td><code>--initial-sudo-password-prompt</code> for requesting an initial pre-execution sudo password prompt</td>
<td>Ported</td>
<td>This is now <code class="interpreted-text" role="option">--prompt-for-sudo-password</code>. Still a bit of a mouthful but still 4 characters shorter!</td>
</tr>
<tr class="odd">
<td><code>-k</code>/<code>--no-keys</code> which prevents Paramiko's automatic loading of key files such as <code>~/.ssh/id_rsa</code></td>
<td>Removed</td>
<td>Use environment variables to set the <code>connect_kwargs.look_for_keys</code> config value to <code>False</code>.</td>
</tr>
<tr class="even">
<td><code>--keepalive</code> for setting network keepalive</td>
<td><a href="https://github.com/fabric/fabric/issues/1807">Pending</a></td>
<td>Not ported yet.</td>
</tr>
<tr class="odd">
<td><code>-l</code>/<code>--list</code> for listing tasks, plus <code>-F</code>/<code>--list-format</code> for tweaking list display format</td>
<td>Ported</td>
<td>Now with bonus JSON list-format! Which incidentally replaces <code>-F short</code>/<code>--shortlist</code>.</td>
</tr>
<tr class="even">
<td><code>--linewise</code> for buffering output line by line instead of roughly byte by byte</td>
<td>Removed</td>
<td>This doesn't really fit with the way modern command execution code views the world, so it's gone.</td>
</tr>
<tr class="odd">
<td><code>-n</code>/<code>--connection-attempts</code> controlling multiple connect retries</td>
<td><a href="https://github.com/fabric/fabric/issues/1808">Pending</a></td>
<td>Not ported yet.</td>
</tr>
<tr class="even">
<td><code>--no-pty</code> to disable automatic PTY allocation in <code>run</code>, etc</td>
<td>Ported</td>
<td>Is now <code>-p</code>/<code>--pty</code> as the default behavior was switched around.</td>
</tr>
<tr class="odd">
<td><code>--password</code>/<code>--sudo-password</code> for specifying login/sudo password values</td>
<td>Removed</td>
<td>This is typically not very secure to begin with, and there are now many other avenues for setting the related configuration values, so they're gone at least for now.</td>
</tr>
<tr class="even">
<td><code>-P</code>/<code>--parallel</code> for activating global parallelism</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/63">Pending</a></td>
<td>See the notes around <code>@parallel</code> in [upgrading-tasks](#upgrading-tasks).</td>
</tr>
<tr class="odd">
<td><code>--port</code> to set default SSH port</td>
<td>Removed</td>
<td>Our gut says this is best left up to the configuration system's env var layer, or use of the <code>port</code> kwarg on <span class="title-ref">fabric.connection.Connection</span>; however it may find its way back.</td>
</tr>
<tr class="even">
<td><code>r</code>/<code>--reject-unknown-hosts</code> to modify Paramiko known host behavior</td>
<td><a href="https://github.com/fabric/fabric/issues/1804">Pending</a></td>
<td>Not ported yet.</td>
</tr>
<tr class="odd">
<td><code>-R</code>/<code>--roles</code> for global list-of-hosts target selection</td>
<td><a href="https://github.com/fabric/fabric/issues/1594">Pending</a></td>
<td>As noted under [upgrading-api](#upgrading-api), role lists are only partially applicable to the new API and we're still feeling out whether/how they would work at a global or CLI level.</td>
</tr>
<tr class="even">
<td><code>--set key=value</code> for setting <code>fabric.state.env</code> vars at runtime</td>
<td>Removed</td>
<td>This is largely obviated by the new support for shell environment variables (just do <code>INVOKE_KEY=value fab mytask</code> or similar), though it's remotely possible a CLI flag method of setting config values will reappear later.</td>
</tr>
<tr class="odd">
<td><code>-s</code>/<code>--shell</code> to override default shell path</td>
<td>Removed</td>
<td>Use the configuration system for this.</td>
</tr>
<tr class="even">
<td><code>--shortlist</code> for short/computer-friendly list output</td>
<td>Ported</td>
<td>See <code>--list</code>/<code>--list-format</code> - there's now a JSON format instead. No point reinventing the wheel.</td>
</tr>
<tr class="odd">
<td><code>--skip-bad-hosts</code> (and <code>env.skip_bad_hosts</code>) to bypass problematic hosts</td>
<td><a href="https://github.com/fabric/fabric/issues/1809">Pending</a></td>
<td>Not ported yet.</td>
</tr>
<tr class="even">
<td><code>--skip-unknown-tasks</code> and <code>env.skip_unknown_tasks</code> for silently skipping past bogus task names on CLI invocation</td>
<td>Removed</td>
<td>This felt mostly like bloat to us and could require nontrivial parser changes to reimplement, so it's out for now.</td>
</tr>
<tr class="odd">
<td><code>--ssh-config-path</code> and <code>env.ssh_config_path</code> for selecting an SSH config file</td>
<td>Ported</td>
<td>This is now <code>-S</code>/<code>--ssh-config</code>.</td>
</tr>
<tr class="even">
<td><code>--system-known-hosts</code> to trigger loading systemwide <code>known_hosts</code> files</td>
<td><a href="https://github.com/fabric/fabric/issues/1804">Pending</a>/Removed</td>
<td>This isn't super likely to come back as its own CLI flag but it may well return as a configuration value.</td>
</tr>
<tr class="odd">
<td><code>-t</code>/<code>--timeout</code> controlling connection timeout</td>
<td>Ported</td>
<td>It's now <code>-t</code>/<code>--connect-timeout</code> as <code>--timeout</code> was technically ambiguous re: connect vs command timeout.</td>
</tr>
<tr class="even">
<td><code>-T</code>/<code>--command-timeout</code></td>
<td>Ported</td>
<td>Implemented in Invoke and preserved in <code>fab</code> under the same name.</td>
</tr>
<tr class="odd">
<td><code>-u</code>/<code>--user</code> to set global default username</td>
<td>Removed</td>
<td>Most of the time, configuration (env vars for true runtime, or eg user/project level config files as appropriate) should be used for this, but it may return.</td>
</tr>
<tr class="even">
<td><code>-w</code>/<code>--warn-only</code> to toggle warn-vs-abort behavior</td>
<td>Ported</td>
<td>Ported as-is, no changes.</td>
</tr>
<tr class="odd">
<td><code>-x</code>/<code>--exclude-hosts</code> (and <code>env.exclude_hosts</code>) for excluding otherwise selected targets</td>
<td><a href="https://github.com/fabric/fabric/issues/1594">Pending</a></td>
<td>Not ported yet, is pending an in depth rework of global (vs hand-instantiated) connection/group selection.</td>
</tr>
<tr class="even">
<td><code>-z</code>/<code>--pool-size</code> for setting parallel-mode job queue pool size</td>
<td>Removed</td>
<td>There's no job queue anymore, or at least at present. Whatever replaces it (besides the already-implemented threading model) is likely to look pretty different.</td>
</tr>
</tbody>
</table>

### Shell command execution (`local`/`run`/`sudo`)

#### General

Behaviors shared across either `run`/`sudo`, or all of `run`/`sudo`/`local`. Subsequent sections go into per-function differences.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><code>local</code> and <code>run</code>/<code>sudo</code> have wildly differing APIs and implementations</p></td>
<td><p>Removed</p></td>
<td><p>All command execution is now unified; all three functions (now methods on <span class="title-ref">fabric.connection.Connection</span>, though <code>local</code> is also available as <span class="title-ref">invoke.run</span> for standalone use) have the same underlying protocol and logic (the <span class="title-ref">~invoke.runners.Runner</span> class hierarchy), with only low-level details like process creation and pipe consumption differing.</p>
<p>For example, in v1 <code>local</code> required you to choose between displaying and capturing subprocess output; modern <code>local</code> is like <code>run</code> and does both at the same time.</p></td>
</tr>
<tr class="even">
<td><p>Prompt auto-response, via <code>env.prompts</code> and/or <code>sudo</code>'s internals</p></td>
<td><p>Ported</p></td>
<td><p>The <code>env.prompts</code> functionality has been significantly fleshed out, into a framework of [Watchers &lt;autoresponding&gt;](#watchers-&lt;autoresponding&gt;) which operate on any (local or remote!) running command's input and output streams.</p>
<p>In addition, <code>sudo</code> has been rewritten to use that framework; while still useful enough to offer an implementation in core, it no longer does anything users cannot do themselves using public APIs.</p></td>
</tr>
<tr class="odd">
<td><code>fabric.context_managers.cd</code>/<code>lcd</code> (and <code>prefix</code>) allow scoped mutation of executed comments</td>
<td>Ported/<a href="https://github.com/fabric/fabric/issues/1752">Pending</a></td>
<td>These are now methods on <span class="title-ref">~invoke.context.Context</span> (<span class="title-ref">Context.cd &lt;invoke.context.Context.cd&gt;</span>, <span class="title-ref">Context.prefix &lt;invoke.context.Context.prefix&gt;</span>) but need work in its subclass <span class="title-ref">fabric.connection.Connection</span> (quite possibly including recreating <code>lcd</code>) so that local vs remote state are separated.</td>
</tr>
<tr class="even">
<td><code>fabric.context_managers.shell_env</code> and its specific expression <code>path</code> (plus <code>env.shell_env</code>, <code>env.path</code> and <code>env.path_behavior</code>), for modifying remote environment variables (locally, one would just modify <span class="title-ref">os.environ</span>.)</td>
<td>Ported</td>
<td>The context managers were the only way to set environment variables at any scope; in modern Fabric, subprocess shell environment is controllable per-call (directly in <span class="title-ref">fabric.connection.Connection.run</span> and siblings via an <code>env</code> kwarg) <em>and</em> across multiple calls (by manipulating the configuration system, statically or at runtime.)</td>
</tr>
<tr class="odd">
<td><p>Controlling subprocess output &amp; other activity display text by manipulating <code>fabric.state.output</code> (directly or via <code>fabric.context_managers.hide</code>, <code>show</code> or <code>quiet</code> as well as the <code>quiet</code> kwarg to <code>run</code>/<code>sudo</code>; plus <code>utils.puts</code>/<code>fastprint</code>)</p></td>
<td><p>Ported/<a href="https://github.com/pyinvoke/invoke/issues/15">Pending</a></p></td>
<td><p>The core concept of "output levels" is gone, likely to be replaced in the near term by a logging module (stdlib or other) which output levels poorly reimplemented.</p>
<p>Command execution methods like <span class="title-ref">~invoke.runners.Runner.run</span> retain a <code>hide</code> kwarg controlling which subprocess streams are copied to your terminal, and an <code>echo</code> kwarg controlling whether commands are printed before execution. All of these also honor the configuration system.</p></td>
</tr>
<tr class="even">
<td><code>timeout</code> kwarg and the <code>CommandTimeout</code> exception raised when said command-runtime timeout was violated</td>
<td>Ported</td>
<td>Primarily lives at the Invoke layer now, but applies to all command execution, local or remote; see the <code>timeout</code> argument to <span class="title-ref">~invoke.runners.Runner.run</span> and its related configuration value and CLI flag.</td>
</tr>
<tr class="odd">
<td><p><code>pty</code> kwarg and <code>env.always_use_pty</code>, controlling whether commands run in a pseudo-terminal or are invoked directly</p></td>
<td><p>Ported</p></td>
<td><p>This has been thoroughly ported (and its behavior often improved) including preservation of the <code>pty</code> kwarg and updating the config value to be simply <code>run.pty</code>. However, a major change is that pty allocation is now <code>False</code> by default instead of <code>True</code>.</p>
<p>Fabric 0.x and 1.x already changed this value around; during Fabric 1's long lifetime it became clear that neither default works for all or even most users, so we opted to return the default to <code>False</code> as it's cleaner and less wasteful.</p></td>
</tr>
<tr class="even">
<td><p><code>combine_stderr</code> (kwarg and <code>env.combine_stderr</code>) controlling whether Paramiko weaves remote stdout and stderr into the stdout stream</p></td>
<td><p>Removed</p></td>
<td><p>This wasn't terrifically useful, and often caused conceptual problems in tandem with <code>pty</code> (as pseudo-terminals by their nature always combine the two streams.)</p>
<p>We recommend users who really need both streams to be merged, either use shell redirection in their command, or set <code>pty=True</code>.</p></td>
</tr>
<tr class="odd">
<td><code>warn_only</code> kwarg for preventing automatic abort on non-zero return codes</td>
<td>Ported</td>
<td>This is now just <code>warn</code>, both kwarg and config value. It continues to default to <code>False</code>.</td>
</tr>
<tr class="even">
<td><code>stdout</code> and <code>stderr</code> kwargs for reassigning default stdout/err mirroring targets, which otherwise default to the appropriate <span class="title-ref">sys</span> members</td>
<td>Ported</td>
<td>These are now <code>out_stream</code> and <code>err_stream</code> but otherwise remain similar in nature. They are also accompanied by the new, rather obvious in hindsight <code>in_stream</code>.</td>
</tr>
<tr class="odd">
<td><code>capture_buffer_size</code> arg &amp; use of a ring buffer for storing captured stdout/stderr to limit total size</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/344">Pending</a></td>
<td>Existing <span class="title-ref">~invoke.runners.Runner</span> implementation uses regular lists for capture buffers, but we fully expect to upgrade this to a ring buffer or similar at some point.</td>
</tr>
<tr class="even">
<td><p>Return values are string-like objects with extra attributes like <code>succeeded</code> and <code>return_code</code> sprinkled on top</p></td>
<td><p>Ported</p></td>
<td><p>Return values are no longer string-a-likes with a semi-private API, but are full fledged regular objects of type <span class="title-ref">~invoke.runners.Result</span>. They expose all of the same info as the old "attribute strings", and only really differ in that they don't pretend to be strings themselves.</p>
<p>They do, however, still behave as booleans - just ones reflecting the exit code's relation to zero instead of whether there was any stdout.</p></td>
</tr>
<tr class="odd">
<td><code>open_shell</code> for obtaining interactive-friendly remote shell sessions (something that <code>run</code> historically was bad at )</td>
<td>Ported</td>
<td>Not only is the new version of <code>run</code> vastly improved and able to deal with interactive sessions at least as well as the old <code>open_shell</code> (provided you supply <code>pty=True</code>), but for corner cases there's also a direct port: <span class="title-ref">~fabric.connection.Connection.shell</span>.</td>
</tr>
</tbody>
</table>

#### `run`

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><code>shell</code> / <code>env.use_shell</code> designating whether or not to wrap commands within an explicit call to e.g. <code>/bin/sh -c "real command"</code>; plus their attendant options like <code>shell_escape</code></p></td>
<td><p>Removed</p></td>
<td><p>Non-<code>sudo</code> remote execution never truly required an explicit shell wrapper: the remote SSH daemon hands your command string off to the connecting user's login shell in almost all cases. Since wrapping is otherwise extremely error-prone and requires frustrating escaping rules, we dropped it for this use case.</p>
<p>See the matching line items for <code>local</code> and <code>sudo</code> as their situations differ. (For now, because they all share the same underpinnings, <span class="title-ref">fabric.connection.Connection.run</span> does accept a <code>shell</code> kwarg - it just doesn't do anything with it.)</p></td>
</tr>
</tbody>
</table>

#### `sudo`

Unless otherwise noted, all common `run`+`sudo` args/functionality (e.g. `pty`, `warn_only` etc) are covered above in the section on `run`; the below are `sudo` specific.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><code>shell</code> / <code>env.use_shell</code> designating whether or not to wrap commands within an explicit call to e.g. <code>/bin/sh -c "real command"</code></p></td>
<td><p><a href="https://github.com/pyinvoke/invoke/issues/459">Pending</a>/Removed</p></td>
<td><p>See the note above under <code>run</code> for details on shell wrapping as a general strategy; unfortunately for <code>sudo</code>, some sort of manual wrapping is still necessary for nontrivial commands (i.e. anything using actual shell syntax as opposed to a single program's argv) due to how the command string is handed off to the <code>sudo</code> program.</p>
<p>We hope to upgrade <code>sudo</code> soon so it can perform a common-best-case, no-escaping-required shell wrapping on your behalf; see the 'Pending' link.</p></td>
</tr>
<tr class="even">
<td><code>user</code> argument (and <code>env.sudo_user</code>) allowing invocation via <code>sudo -u &lt;user&gt;</code> (instead of defaulting to root)</td>
<td>Ported</td>
<td>This is still here, and still called <code>user</code>.</td>
</tr>
<tr class="odd">
<td><code>group</code> argument controlling the effective group of the sudo'd command</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/540">Pending</a></td>
<td>This has not been ported yet.</td>
</tr>
</tbody>
</table>

#### `local`

See the 'general' notes at top of this section for most details about the new `local`. A few specific extras are below.

|                                                                                                     |        |                                                                                                                                                                                                                                                                                                                                 |
| --------------------------------------------------------------------------------------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `shell` kwarg designating which shell to ask <span class="title-ref">subprocess.Popen</span> to use | Ported | Basically the same as in v1, though there are now situations where <span class="title-ref">os.execve</span> (or similar) is used instead of <span class="title-ref">subprocess.Popen</span>. Behavior is much the same: no shell wrapping (as in legacy `run`), just informing the operating system what actual program to run. |

#### `open_shell`

As noted in the main list, this is now <span class="title-ref">\~fabric.connection.Connection.shell</span>, and behaves similarly to `open_shell` (exit codes, if any, are ignored; a PTY is assumed; etc). It has some improvements too, such as a return value (which is slightly lacking compared to that from <span class="title-ref">\~fabric.connection.Connection.run</span> but still a big improvement over `None`).

|                                                                                                             |         |                                                                                                                                                                                                                                                                                                                                                                                                                    |
| ----------------------------------------------------------------------------------------------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `command` optional kwarg allowing 'prefilling' the input stream with a specific command string plus newline | Removed | If you needed this, you should instead try the modern version of <span class="title-ref">\~fabric.connection.Connection.run</span>, which is equally capable of interaction as <span class="title-ref">\~fabric.connection.Connection.shell</span> but takes a command to execute. There's a small chance we'll add this back later if anybody misses it (there's a few corner cases that could possibly want it). |

### Utilities

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p>Error handling via <code>abort</code> and <code>warn</code></p></td>
<td><p>Ported</p></td>
<td><p>The old functionality leaned too far in the "everything is a DSL" direction &amp; didn't offer enough value to offset how it gets in the way of experienced Pythonistas.</p>
<p>These functions have been removed in favor of "just raise an exception" (with one useful option being Invoke's <span class="title-ref">~invoke.exceptions.Exit</span>) as exception handling feels more Pythonic than thin wrappers around <code>sys.exit</code> or having to <code>except SystemExit:</code> and hope it was a <span class="title-ref">SystemExit</span> your own code raised!</p></td>
</tr>
<tr class="even">
<td><p>ANSI color helpers in <code>fabric.colors</code> allowed users to easily print ANSI colored text without a standalone library</p></td>
<td><p>Removed</p></td>
<td><p>There seemed no point to poorly replicating one of the many fine terminal-massaging libraries out there (such as those listed in the description of <a href="https://github.com/fabric/fabric/issues/101">#101</a>) in the rewrite, so we didn't.</p>
<p>That said, it seems highly plausible we'll end up vendoring such a library in the future to offer internal color support, at which point "baked-in" color helpers would again be within easy reach.</p></td>
</tr>
<tr class="odd">
<td><code>with char_buffered</code> context manager for forcing a local stream to be character buffered</td>
<td>Ported</td>
<td>This is now <span class="title-ref">~invoke.terminals.character_buffered</span>.</td>
</tr>
<tr class="even">
<td><code>docs.unwrap_tasks</code> for extracting docstrings from wrapped task functions</td>
<td>Ported</td>
<td>v1 required using a Fabric-specific 'unwrap_tasks' helper function somewhere in your Sphinx build pipeline; now you can instead just enable the new <a href="https://invocations.readthedocs.io/en/latest/api/autodoc.html">invocations.autodoc</a> Sphinx mini-plugin in your extensions list; see link for details.</td>
</tr>
<tr class="odd">
<td><code>network.normalize</code>, <code>denormalize</code> and <code>parse_host_string</code>, ostensibly internals but sometimes exposed to users for dealing with host strings</td>
<td>Removed</td>
<td>As with other host-string-related tools, these are gone and serve no purpose. <span class="title-ref">fabric.connection.Connection</span> is now the primary API focus and has individual attributes for all "host string" components.</td>
</tr>
<tr class="even">
<td><code>utils.indent</code> for indenting/wrapping text (uncommonly used)</td>
<td>Pending</td>
<td>Not ported yet; ideally we'll just vendor a third party lib in Invoke.</td>
</tr>
<tr class="odd">
<td><p><code>reboot</code> for rebooting and reconnecting to a remote system</p></td>
<td><p>Removed</p></td>
<td><p>No equivalent has been written for modern Fabric; now that the connection/client objects are made explicit, one can simply instantiate a new object with the same parameters (potentially with sufficient timeout parameters to get past the reboot, if one doesn't want to manually call something like <span class="title-ref">time.sleep</span>.)</p>
<p>There is a small chance it will return if there appears to be enough need; if so, it's likely to be a more generic reconnection related <span class="title-ref">fabric.connection.Connection</span> method, where the user is responsible for issuing the restart shell command via <code>sudo</code> themselves.</p></td>
</tr>
<tr class="even">
<td><code>require</code> for ensuring certain key(s) in <code>env</code> have values set, optionally by noting they can be <code>provided_by=</code> a list of setup tasks</td>
<td>Removed</td>
<td>This has not been ported, in part because the maintainers never used it themselves, and is unlikely to be directly reimplemented. However, its core use case of "require certain data to be available to run a given task" may return within the upcoming dependency framework.</td>
</tr>
<tr class="odd">
<td><code>prompt</code> for prompting the user &amp; storing the entered data (optionally with validation) directly into <code>env</code></td>
<td>Removed</td>
<td>Like <code>require</code>, this seemed like a less-used feature (especially compared to its sibling <code>confirm</code>) and was not ported. If it returns it's likely to be via <code>invocations</code>, which is where <code>confirm</code> ended up.</td>
</tr>
</tbody>
</table>

### Networking

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><code>env.gateway</code> for setting an SSH jump gateway</p></td>
<td><p>Ported</p></td>
<td><p>This is now the <code>gateway</code> kwarg to <span class="title-ref">fabric.connection.Connection</span>, and -- for the newly supported <code>ProxyJump</code> style gateways, which can be nested indefinitely! -- should be another <span class="title-ref">fabric.connection.Connection</span> object instead of a host string.</p>
<p>(You may specify a runtime, non-SSH-config-driven <code>ProxyCommand</code>-style string as the <code>gateway</code> kwarg instead, which will act just like a regular <code>ProxyCommand</code>.)</p></td>
</tr>
<tr class="even">
<td><code>ssh_config</code>-driven <code>ProxyCommand</code> support</td>
<td>Ported</td>
<td>This continues to work as it did in v1.</td>
</tr>
<tr class="odd">
<td><code>with remote_tunnel(...):</code> port forwarding</td>
<td>Ported</td>
<td>This is now <span class="title-ref">fabric.connection.Connection.forward_local</span>, since it's used to <em>forward</em> a <em>local</em> port to the remote end. (Newly added is the logical inverse, <span class="title-ref">fabric.connection.Connection.forward_remote</span>.)</td>
</tr>
<tr class="even">
<td><code>NetworkError</code> raised on some network related errors</td>
<td>Removed</td>
<td>In v1 this was simply a (partially implemented) stepping-back from the original "just sys.exit on any error!" behavior. Modern Fabric is significantly more exception-friendly; situations that would raise <code>NetworkError</code> in v1 now simply become the real underlying exceptions, typically from Paramiko or the stdlib.</td>
</tr>
<tr class="odd">
<td><code>env.keepalive</code> for setting network keepalive value</td>
<td><a href="https://github.com/fabric/fabric/issues/1807">Pending</a></td>
<td>Not ported yet.</td>
</tr>
<tr class="even">
<td><code>env.connection_attempts</code> for setting connection retries</td>
<td><a href="https://github.com/fabric/fabric/issues/1808">Pending</a></td>
<td>Not ported yet.</td>
</tr>
<tr class="odd">
<td><code>env.timeout</code> for controlling connection (and sometimes command execution) timeout</td>
<td>Ported</td>
<td>Connection timeout is now controllable both via the configuration system (as <code>timeouts.connect</code>) and a direct kwarg on <span class="title-ref">fabric.connection.Connection</span>. Command execution timeout is its own setting now, <code>timeouts.command</code> and a <code>timeout</code> kwarg to <code>run</code> and friends.</td>
</tr>
</tbody>
</table>

### Authentication

<div class="note">

<div class="title">

Note

</div>

Some `env` keys from v1 were simply passthroughs to Paramiko's <span class="title-ref">SSHClient.connect \<paramiko.client.SSHClient.connect\></span> method. Modern Fabric gives you explicit control over the arguments it passes to that method, via the `connect_kwargs` \[configuration \<fab-configuration\>\](\#configuration-\<fab-configuration\>) subtree, and the below table will frequently refer you to that approach.

</div>

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><code>env.key_filename</code></td>
<td>Ported</td>
<td>Use <code>connect_kwargs</code>.</td>
</tr>
<tr class="even">
<td><p><code>env.password</code></p></td>
<td><p>Ported</p></td>
<td><p>Use <code>connect_kwargs</code>.</p>
<p>Also note that this used to perform double duty as connection <em>and</em> sudo password; the latter is now found in the <code>sudo.password</code> setting.</p></td>
</tr>
<tr class="odd">
<td><code>env.gss_(auth|deleg|kex)</code></td>
<td>Ported</td>
<td>Use <code>connect_kwargs</code>.</td>
</tr>
<tr class="even">
<td><code>env.key</code>, a string or file object holding private key data, whose specific type is auto-determined and instantiated for use as the <code>pkey</code> connect kwarg</td>
<td>Removed</td>
<td>This has been dropped as unnecessary (&amp; bug-prone) obfuscation of Paramiko-level APIs; users should already know which type of key they're dealing with and instantiate a <code>PKey</code> subclass themselves, placing the result in <code>connect_kwargs.pkey</code>.</td>
</tr>
<tr class="odd">
<td><code>env.no_agent</code>, which is a renaming/inversion of Paramiko's <code>allow_agent</code> connect kwarg</td>
<td>Ported</td>
<td>Users who were setting this to <code>True</code> should now simply set <code>connect_kwargs.allow_agent</code> to <code>False</code> instead.</td>
</tr>
<tr class="even">
<td><code>env.no_keys</code>, similar to <code>no_agent</code>, just an inversion of the <code>look_for_keys</code> connect kwarg</td>
<td>Ported</td>
<td>Use <code>connect_kwargs.look_for_keys</code> instead (setting it to <code>False</code> to disable Paramiko's default key-finding behavior.)</td>
</tr>
<tr class="odd">
<td><p><code>env.passwords</code> (and <code>env.sudo_passwords</code>) stores connection/sudo passwords in a dict keyed by host strings</p></td>
<td><p>Ported/<a href="https://github.com/fabric/fabric/issues/4">Pending</a></p></td>
<td><p>Each <span class="title-ref">fabric.connection.Connection</span> object may be configured with its own <code>connect_kwargs</code> given at instantiation time, allowing for per-host password configuration already.</p>
<p>However, we expect users may want a simpler way to set configuration values that are turned into implicit <span class="title-ref">fabric.connection.Connection</span> objects automatically; such a feature is still pending.</p></td>
</tr>
<tr class="even">
<td>Configuring <code>IdentityFile</code> in one's <code>ssh_config</code></td>
<td>Ported</td>
<td>Still honored, along with a bunch of newly honored <code>ssh_config</code> settings; see [ssh-config](#ssh-config).</td>
</tr>
</tbody>
</table>

### File transfer

The below feature breakdown applies to the `put` and/or `get` "operation" functions from v1.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p>Transferring individual files owned by the local and remote user</p></td>
<td><p>Ported</p></td>
<td><p>Basic file transfer in either direction works and is offered as <span class="title-ref">fabric.connection.Connection.get</span>/<span class="title-ref">fabric.connection.Connection.put</span> (though the code is split out into a separate-responsibility class, <span class="title-ref">fabric.transfer.Transfer</span>.)</p>
<p>The signature of these methods has been cleaned up compared to v1, though their positional-argument essence (<code>get(remote, local)</code> and <code>put(local, remote)</code> remains the same.</p></td>
</tr>
<tr class="even">
<td>Omit the 'destination' argument for implicit 'relative to local context' behavior (e.g. <code>put("local.txt")</code> implicitly uploading to remote <code>$HOME/local.txt</code>.)</td>
<td>Ported</td>
<td>You should probably still be explicit, because this is Python.</td>
</tr>
<tr class="odd">
<td>Use either file paths <em>or</em> file-like objects on either side of the transfer operation (e.g. uploading a <code>StringIO</code> instead of an on-disk file)</td>
<td>Ported</td>
<td>This was a useful enough and simple enough trick to keep around.</td>
</tr>
<tr class="even">
<td>Preservation of source file mode at destination (e.g. ensuring an executable bit that would otherwise be dropped by the destination's umask, is re-added.)</td>
<td>Ported</td>
<td>Not only was this ported, but it is now the default behavior. It may be disabled via kwarg if desired.</td>
</tr>
<tr class="odd">
<td><p>Bundled <code>sudo</code> operations as part of file transfer</p></td>
<td><p>Removed</p></td>
<td><p>This was one of the absolute buggiest parts of v1 and never truly did anything users could not do themselves with a followup call to <code>sudo</code>, so we opted not to port it.</p>
<p>Should enough users pine for its loss, we <em>may</em> reconsider, but if we do it will be with a serious eye towards simplification and/or an approach not involving intermediate files.</p></td>
</tr>
<tr class="even">
<td><p>Recursive multi-file transfer (e.g. <code>put(a_directory)</code> uploads entire directory and all its contents)</p></td>
<td><p>Removed</p></td>
<td><p>This was <em>another</em> one of the buggiest parts of v1, and over time it became clear that its maintenance burden far outweighed the fact that it was poorly reinventing <code>rsync</code> and/or the use of archival file tools like ye olde <code>tar</code>+<code>gzip</code>.</p>
<p>For one potential workaround, see the <code>rsync</code> function in <a href="https://github.com/fabric/patchwork">patchwork</a>.</p></td>
</tr>
<tr class="odd">
<td>Remote file path tilde expansion</td>
<td>Removed</td>
<td>This behavior is ultimately unnecessary (one can simply leave the tilde off for the same result) and had a few pernicious bugs of its own, so it's gone.</td>
</tr>
<tr class="even">
<td>Naming downloaded files after some aspect of the remote destination, to avoid overwriting during multi-server actions</td>
<td>Ported</td>
<td>Added back (to <span class="title-ref">fabric.transfer.Transfer.get</span>) in Fabric 2.6.</td>
</tr>
</tbody>
</table>

### Configuration

In general, configuration has been massively improved over the old `fabricrc` files; most config logic comes from \[Invoke's configuration system \<configuration\>\](\#invoke's-configuration-system \<configuration\>), which offers a full-fledged configuration hierarchy (in-code config, multiple config file locations, environment variables, CLI flags, and more) and multiple file formats. Nearly all configuration avenues in Fabric 1 become, in modern Fabric, manipulation of whatever part of the config hierarchy is most appropriate for your needs.

Modern versions of Fabric only make minor modifications to (or parameterizations of) Invoke's setup; see \[our locally-specific config doc page \<fab-configuration\>\](\#our-locally-specific-config-doc page-\<fab-configuration\>) for details.

<div class="note">

<div class="title">

Note

</div>

Make sure to look elsewhere in this document for details on any given v1 `env` setting, as many have moved outside the configuration system into object or method keyword arguments.

</div>

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td>Modifying <code>fabric.(api.)env</code> directly</td>
<td>Ported</td>
<td>To effect truly global-scale config changes, use config files, task-collection-level config data, or the invoking shell's environment variables.</td>
</tr>
<tr class="even">
<td><p>Making locally scoped <code>fabric.env</code> changes via <code>with settings(...):</code> or its decorator equivalent, <code>@with_settings</code></p></td>
<td><p>Ported/Pending</p></td>
<td><p>Most of the use cases surrounding <code>settings</code> are now served by the fact that <span class="title-ref">fabric.connection.Connection</span> objects keep per-host/connection state - the pattern of switching the implicit global context around was a design antipattern which is now gone.</p>
<p>The remaining such use cases have been turned into context-manager methods of <span class="title-ref">fabric.connection.Connection</span> (or its parent class), or have such methods pending.</p></td>
</tr>
<tr class="odd">
<td><p>SSH config file loading (off by default, limited to <code>~/.ssh/config</code> only unless configured to a different, single path)</p></td>
<td><p>Ported</p></td>
<td><p>Much improved: SSH config file loading is <strong>on</strong> by default (which [can be changed &lt;disabling-ssh-config&gt;](#can-be-changed-&lt;disabling-ssh-config&gt;)), multiple sources are loaded and merged just like OpenSSH, and more besides; see [ssh-config](#ssh-config).</p>
<p>In addition, we've added support for some <code>ssh_config</code> directives which were ignored by v1, such as <code>ConnectTimeout</code> and <code>ProxyCommand</code>, and going forwards we intend to support as much of <code>ssh_config</code> as is reasonably possible.</p></td>
</tr>
</tbody>
</table>

### `contrib`

The old `contrib` module represented "best practice" functions that did not, themselves, require core support from the rest of Fabric but were built using the same primitives available to users.

In modern Fabric, that responsibility has been removed from the core library into other standalone libraries which have their own identity & release process, typically either [invocations](https://github.com/pyinvoke/invocations) (local-oriented code that does not use SSH) or [patchwork](https://github.com/fabric/patchwork) (primarily remote-oriented code, though anything not explicitly dealing with both ends of the connection will work just as well locally.)

Those libraries are still a work in progress, not least because we still need to identify the best way to bridge the gap between them (as many operations are not intrinsically local-or-remote but can work on either end.)

Since they are by definition built on the core APIs available to all users, they currently get less development focus; users can always implement their own versions without sacrificing much (something less true for the core libraries.) We expect to put more work into curating these collections once the core APIs have settled down.

Details about what happened to each individual chunk of `fabric.contrib` are in the below table:

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><code>console.confirm</code> for easy bool-returning confirmation prompts</td>
<td>Ported</td>
<td>Moved to <code>invocations.console.confirm</code>, with minor signature tweaks.</td>
</tr>
<tr class="even">
<td><code>django.*</code>, supporting integration with a local Django project re: importing and using Django models and other code</td>
<td>Removed</td>
<td>We aren't even sure if this is useful a decade after it was written, given how much Django has surely changed since then. If you're reading and are sad that this is gone, let us know!</td>
</tr>
<tr class="odd">
<td><p><code>files.*</code> (e.g. <code>exists</code>, <code>append</code>, <code>contains</code> etc) for interrogating and modifying remote files</p></td>
<td><p>Ported/Pending</p></td>
<td><p>Many of the more useful functions in this file have been ported to <code>patchwork.files</code> but are still in an essentially alpha state.</p>
<p>Others, such as <code>is_link</code>, <code>comment</code>/<code>uncomment</code>, etc have not been ported yet. If they are, the are likely to end up in the same place.</p></td>
</tr>
<tr class="even">
<td><code>project.rsync_project</code> for rsyncing the entire host project remotely</td>
<td>Ported</td>
<td>Now <code>patchwork.transfers.rsync</code>, with some modifications.</td>
</tr>
<tr class="odd">
<td><code>project.rsync_project</code> for uploading host project via archive file and scp</td>
<td>Removed</td>
<td>This did not seem worth porting; the overall pattern of "copy my local bits remotely" is already arguably an antipattern (vs repeatable deploys of artifacts, or at least remote checkout of a VCS tag) and if one is going down that road anyways, rsync is a much smarter choice.</td>
</tr>
</tbody>
</table>

### `fabric.env` reference

Many/most of the members in v1's `fabric.env` are covered in the above per-topic sections; any that are *not* covered elsewhere, live here. All are explicitly noted as `env.<name>` for ease of searching in your browser or viewer.

A small handful of env vars were never publicly documented & were thus implicitly private; those are not represented here.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td><code>env.abort_exception</code> for setting which exception is used to abort</td>
<td>Removed</td>
<td>Aborting as a concept is gone, just raise whatever exception seems most reasonable to surface to an end user, or use <span class="title-ref">~invoke.exceptions.Exit</span>. See also [upgrading-utility](#upgrading-utility).</td>
</tr>
<tr class="even">
<td><p><code>env.all_hosts</code> and <code>env.tasks</code> listing execution targets</p></td>
<td><p>Ported/<a href="https://github.com/pyinvoke/invoke/issues/443">Pending</a></p></td>
<td><p>Fabric's <span class="title-ref">~invoke.executor.Executor</span> subclass stores references to all CLI parsing results (including the value of <code class="interpreted-text" role="option">--hosts</code>, the tasks requested and their args, etc) and the intent is for users to have access to that information.</p>
<p>However, the details for that API (e.g. exposing the executor via a task's <span class="title-ref">~invoke.context.Context</span>/<span class="title-ref">fabric.connection.Connection</span>) are still in flux.</p></td>
</tr>
<tr class="odd">
<td><code>env.command</code> noting currently executing task name (in hindsight, quite the misnomer...)</td>
<td>Ported/<a href="https://github.com/pyinvoke/invoke/issues/443">Pending</a></td>
<td>See the notes for <code>env.all_hosts</code> above - same applies here re: user visibility into CLI parsing results.</td>
</tr>
<tr class="even">
<td><code>env.command_prefixes</code> for visibility into (arguably also mutation of) the shell command prefixes to be applied to <code>run</code>/<code>sudo</code></td>
<td>Ported</td>
<td>This is now <span class="title-ref">~invoke.context.Context.command_prefixes</span>.</td>
</tr>
<tr class="odd">
<td><p><code>env.cwd</code> noting current intended working directory</p></td>
<td><p>Ported</p></td>
<td><p>This is now <span class="title-ref">~invoke.context.Context.command_cwds</span> (a list, not a single string, to more properly model the intended contextmanager-driven use case.)</p>
<p>Note that remote-vs-local context for this data isn't yet set up; see the notes about <code>with cd</code> under [upgrading-commands](#upgrading-commands).</p></td>
</tr>
<tr class="even">
<td><code>env.dedupe_hosts</code> controlling whether duplicate hosts in merged host lists get deduplicated or not</td>
<td><a href="https://github.com/fabric/fabric/issues/1594">Pending</a></td>
<td>Not ported yet, will probably get tackled as part of roles/host lists overhaul.</td>
</tr>
<tr class="odd">
<td><code>env.echo_stdin</code> (undocumented) for turning off the default echoing of standard input</td>
<td>Ported</td>
<td>Is now a config option under the <code>run</code> tree, with much the same behavior.</td>
</tr>
<tr class="even">
<td><code>env.local_user</code> for read-only access to the discovered local username</td>
<td>Removed</td>
<td>We're not entirely sure why v1 felt this was worth caching in the config; if you need this info, just import and call <span class="title-ref">fabric.util.get_local_user</span>.</td>
</tr>
<tr class="odd">
<td><code>env.output_prefix</code> determining whether or not line-by-line host-string prefixes are displayed</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/15">Pending</a></td>
<td>Differentiating parallel stdout/err is still a work in progress; we may end up reusing line-by-line logging and prefixing (ideally via actual logging) or we may try for something cleaner such as streaming to per-connection log files.</td>
</tr>
<tr class="even">
<td><code>env.prompts</code> controlling prompt auto-response</td>
<td>Ported</td>
<td>Prompt auto-response is now publicly implemented as the <span class="title-ref">~invoke.watchers.StreamWatcher</span> and <span class="title-ref">~invoke.watchers.Responder</span> class hierarchy, instances of which can be handed to <code>run</code> via kwarg or stored globally in the config as <code>run.watchers</code>.</td>
</tr>
<tr class="odd">
<td><code>env.real_fabfile</code> storing read-only fabfile path which was loaded by the CLI machinery</td>
<td>Ported</td>
<td>The loaded task <span class="title-ref">~invoke.collection.Collection</span> is stored on both the top level <span class="title-ref">~invoke.program.Program</span> object as well as the <span class="title-ref">~invoke.executor.Executor</span> which calls tasks; and <span class="title-ref">~invoke.collection.Collection</span> has a <code>loaded_from</code> attribute with this information.</td>
</tr>
<tr class="even">
<td><p><code>env.remote_interrupt</code> controlling how interrupts (i.e. a local <span class="title-ref">KeyboardInterrupt</span> are caught, forwarded or other</p></td>
<td><p>Ported/Removed</p></td>
<td><p>Invoke's interrupt capture behavior is currently "always just send the interrupt character to the subprocess and continue", allowing subprocesses to handle <code>^C</code> however they need to, which is an improvement over Fabric 1 and roughly equivalent to setting <code>env.remote_interrupt = True</code>.</p>
<p>Allowing users to change this behavior via config is not yet implemented, and may not be, depending on whether anybody needs it - it was added as an option in v1 for backwards compat reasons.</p>
<p>It is also technically possible to change interrupt behavior by subclassing and overriding <span class="title-ref">invoke.runners.Runner.send_interrupt</span>.</p></td>
</tr>
<tr class="odd">
<td><p><code>env.roles</code>, <code>env.roledefs</code> and <code>env.effective_roles</code> controlling/exposing what roles are available or currently in play</p></td>
<td><p><a href="https://github.com/fabric/fabric/issues/1594">Pending</a></p></td>
<td><p>As noted in [upgrading-api](#upgrading-api), roles as a concept were ported to <span class="title-ref">fabric.group.Group</span>, but there's no central clearinghouse in which to store them.</p>
<p>We <em>may</em> delegate this to userland forever, but seems likely a common-best-practice option (such as creating <span class="title-ref">Groups &lt;fabric.group.Group&gt;</span> from some configuration subtree and storing them as a <span class="title-ref">~invoke.context.Context</span> attribute) will appear in early 2.x.</p></td>
</tr>
<tr class="even">
<td><code>env.ok_ret_codes</code> for overriding the default "0 good, non-0 bad" error detection for subprocess commands</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/541">Pending</a></td>
<td>Not ported yet, but should involve some presumably minor updates to <span class="title-ref">invoke.runners.Runner.generate_result</span> and <span class="title-ref">~invoke.runners.Result</span>.</td>
</tr>
<tr class="odd">
<td><code>env.sudo_prefix</code> determining the sudo binary name + its flags used when creating <code>sudo</code> command strings</td>
<td><a href="https://github.com/pyinvoke/invoke/issues/540">Pending</a></td>
<td>Sudo command construction does not currently look at the config for anything but the actual sudo prompt.</td>
</tr>
<tr class="even">
<td><code>env.sudo_prompt</code> for setting the prompt string handed to <code>sudo</code> (and then expected in return for auto-replying with a configured password)</td>
<td>Ported</td>
<td>Is now <code>sudo.prompt</code> in the configuration system.</td>
</tr>
<tr class="odd">
<td><code>env.use_exceptions_for</code> to note which actions raise exceptions</td>
<td>Removed</td>
<td>As with most other functionality surrounding Fabric 1's "jump straight to <span class="title-ref">sys.exit</span>" design antipattern, this is gone - modern Fabric will not be hiding any exceptions from user-level code.</td>
</tr>
<tr class="even">
<td><code>env.use_ssh_config</code> to enable off-by-default SSH config loading</td>
<td>Ported</td>
<td>SSH config loading is now on by default, but an option remains to disable it. See [upgrading-configuration](#upgrading-configuration) for more.</td>
</tr>
<tr class="odd">
<td><code>env.version</code> exposing current Fabric version number</td>
<td>Removed</td>
<td>Just <code>import fabric</code> and reference <code>fabric.__version__</code> (string) or <code>fabric.__version_info__</code> (tuple).</td>
</tr>
</tbody>
</table>

## Example upgrade process

This section goes over upgrading a small but nontrivial Fabric 1 fabfile to work with modern Fabric. It's not meant to be exhaustive, merely illustrative; for a full list of how to upgrade individual features or concepts, see \[upgrade-specifics\](\#upgrade-specifics).

### Sample original fabfile

Here's a (slightly modified to concur with 'modern' Fabric 1 best practices) copy of Fabric 1's final tutorial snippet, which we will use as our test case for upgrading:

    from fabric.api import abort, env, local, run, settings, task
    from fabric.contrib.console import confirm
    
    env.hosts = ["my-server"]
    
    @task
    def test():
        with settings(warn_only=True):
            result = local("./manage.py test my_app", capture=True)
        if result.failed and not confirm("Tests failed. Continue anyway?"):
            abort("Aborting at user request.")
    
    @task
    def commit():
        local("git add -p && git commit")
    
    @task
    def push():
        local("git push")
    
    @task
    def prepare_deploy():
        test()
        commit()
        push()
    
    @task
    def deploy():
        code_dir = "/srv/django/myproject"
        with settings(warn_only=True):
            if run("test -d {}".format(code_dir)).failed:
                cmd = "git clone user@vcshost:/path/to/repo/.git {}"
                run(cmd.format(code_dir))
        with cd(code_dir):
            run("git pull")
            run("touch app.wsgi")

We'll port this directly, meaning the result will still be `fabfile.py`, though we'd like to note that writing your code in a more library-oriented fashion - even just as functions not wrapped in `@task` - can make testing and reusing code easier.

### Imports

In modern Fabric, we don't need to import nearly as many functions, due to the emphasis on object methods instead of global functions. We only need the following:

  - <span class="title-ref">\~invoke.exceptions.Exit</span>, a friendlier way of requesting a <span class="title-ref">sys.exit</span>;
  - <span class="title-ref">@task \<invoke.tasks.task\></span>, as before, but coming from Invoke as it's not SSH-specific;
  - `confirm`, which now comes from the Invocations library (also not SSH-specific; though Invocations is one of the descendants of `fabric.contrib`, which no longer exists);

<!-- end list -->

    from fabric import task
    from invoke import Exit
    from invocations.console import confirm

### Host list

The idea of a predefined *global* host list is gone; there is currently no direct replacement. In general, users can set up their own execution context, creating explicit <span class="title-ref">fabric.connection.Connection</span> and/or <span class="title-ref">fabric.group.Group</span> objects as needed; core Fabric is in the process of building convenience helpers on top of this, but "create your own Connections" will always be there as a backstop.

Speaking of convenience helpers: most of the functionality of `fab --hosts` and `@hosts` has been ported over -- the former directly (see `--hosts`), the latter as a <span class="title-ref">@task \<fabric.tasks.task\></span> keyword argument. Thus, for now our example will be turning the global `env.hosts` into a lightweight module-level variable declaration, intended for use in the subsequent calls to `@task`:

    my_hosts = ["my-server"]

<div class="note">

<div class="title">

Note

</div>

This is an area under active development, so feedback is welcomed.

</div>

### Test task

The first task in the fabfile uses a good spread of the API. We'll outline the changes here (though again, all details are in \[upgrade-specifics\](\#upgrade-specifics)):

  - Declaring a function as a task is nearly the same as before: use a `@task` decorator (which, in modern Fabric, can take more optional keyword arguments than its predecessor, including some which replace some of v1's decorators).
  - `@task`-wrapped functions must now take an explicit initial context argument, whose value will be a <span class="title-ref">fabric.connection.Connection</span> object at runtime.
  - The use of `with settings(warn_only=True)` can be replaced by a simple kwarg to the `local` call.
  - That `local` call is now a method call on the <span class="title-ref">fabric.connection.Connection</span>, <span class="title-ref">fabric.connection.Connection.local</span>.
  - `capture` is no longer a useful argument; we can now capture and display at the same time, locally or remotely. If you don't actually *want* a local subprocess to mirror its stdout/err while it runs, you can simply say `hide=True` (or `hide="stdout"` or etc.)
  - Result objects are pretty similar between versions; modern Fabric's results no longer pretend to "be" strings, but instead act more like booleans, acting truthy if the command exited cleanly, and falsey otherwise. In terms of attributes exhibited, most of the same info is available, and more besides.
  - `abort` is gone; you should use whatever exceptions you feel are appropriate, or <span class="title-ref">\~invoke.exceptions.Exit</span> for a <span class="title-ref">sys.exit</span> equivalent. (Or just call <span class="title-ref">sys.exit</span> if you want a no-questions-asked immediate exit that even our CLI machinery won't touch.)

The result:

    @task
    def test(c):
        result = c.local("./manage.py test my_app", warn=True)
        if not result and not confirm("Tests failed. Continue anyway?"):
            raise Exit("Aborting at user request.")

### Other simple tasks

The next two tasks are simple one-liners, and you've already seen what replaced the global `local` function:

    @task
    def commit(c):
        c.local("git add -p && git commit")
    
    @task
    def push(c):
        c.local("git push")

### Calling tasks from other tasks

This is another area that is in flux at the Invoke level, but for now, we can simply call the other tasks as functions, just as was done in v1. The main difference is that we want to pass along our context object to preserve the configuration context (such as loaded config files or CLI flags):

    @task
    def prepare_deploy(c):
        test(c)
        commit(c)
        push(c)

### Actual remote steps

Note that up to this point, nothing truly Fabric-related has been in play -<span class="title-ref">fabric.connection.Connection.local</span> is just a rebinding of <span class="title-ref">Context.run \<invoke.context.Context.run\></span>, Invoke's local subprocess execution method. Now we get to the actual deploy step, which invokes <span class="title-ref">fabric.connection.Connection.run</span> instead, executing remotely (on whichever host the <span class="title-ref">fabric.connection.Connection</span> has been bound to).

`with cd` is not fully implemented for the remote side of things, but we expect it will be soon. For now we fall back to command chaining with `&&`. And, notably, now that we care about selecting host targets, we refer to our earlier definition of a default host list -- `my_hosts` -- when declaring the default host list for this task.

    @task(hosts=my_hosts)
    def deploy(c):
        code_dir = "/srv/django/myproject"
        if not c.run("test -d {}".format(code_dir), warn=True):
            cmd = "git clone user@vcshost:/path/to/repo/.git {}"
            c.run(cmd.format(code_dir))
        c.run("cd {} && git pull".format(code_dir))
        c.run("cd {} && touch app.wsgi".format(code_dir))

### The whole thing

Now we have the entire, upgraded fabfile that will work with modern Fabric:

    from invoke import Exit
    from invocations.console import confirm
    
    from fabric import task
    
    my_hosts = ["my-server"]
    
    @task
    def test(c):
        result = c.local("./manage.py test my_app", warn=True)
        if not result and not confirm("Tests failed. Continue anyway?"):
            raise Exit("Aborting at user request.")
    
    @task
    def commit(c):
        c.local("git add -p && git commit")
    
    @task
    def push(c):
        c.local("git push")
    
    @task
    def prepare_deploy(c):
        test(c)
        commit(c)
        push(c)
    
    @task(hosts=my_hosts)
    def deploy(c):
        code_dir = "/srv/django/myproject"
        if not c.run("test -d {}".format(code_dir), warn=True):
            cmd = "git clone user@vcshost:/path/to/repo/.git {}"
            c.run(cmd.format(code_dir))
        c.run("cd {} && git pull".format(code_dir))
        c.run("cd {} && touch app.wsgi".format(code_dir))