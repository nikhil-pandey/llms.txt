api.md

---

# API reference

<div class="currentmodule">

seaborn.objects

</div>

## Objects interface

### Plot object

<div class="autosummary" data-toctree="generated/" data-template="plot" data-nosignatures="">

Plot

</div>

### Mark objects

**Dot marks**

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Dot Dots

</div>

**Line marks**

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Line Lines Path Paths Dash Range

</div>

**Bar marks**

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Bar Bars

</div>

**Fill marks**

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Area Band

</div>

**Text marks**

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Text

</div>

### Stat objects

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Agg Est Count Hist KDE Perc PolyFit

</div>

### Move objects

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Dodge Jitter Norm Stack Shift

</div>

### Scale objects

<div class="autosummary" data-toctree="generated/" data-template="scale" data-nosignatures="">

Boolean Continuous Nominal Temporal

</div>

### Base classes

<div class="autosummary" data-toctree="generated/" data-template="object" data-nosignatures="">

Mark Stat Move Scale

</div>

<div class="currentmodule">

seaborn

</div>

## Function interface

### Relational plots

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

relplot scatterplot lineplot

</div>

### Distribution plots

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

displot histplot kdeplot ecdfplot rugplot distplot

</div>

### Categorical plots

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

catplot stripplot swarmplot boxplot violinplot boxenplot pointplot barplot countplot

</div>

### Regression plots

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

lmplot regplot residplot

</div>

### Matrix plots

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

heatmap clustermap

</div>

## Multi-plot grids

### Facet grids

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

FacetGrid

</div>

### Pair grids

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

pairplot PairGrid

</div>

### Joint grids

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

jointplot JointGrid

</div>

## Themeing

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

set\_theme axes\_style set\_style plotting\_context set\_context set\_color\_codes reset\_defaults reset\_orig set

</div>

## Color palettes

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

set\_palette color\_palette husl\_palette hls\_palette cubehelix\_palette dark\_palette light\_palette diverging\_palette blend\_palette xkcd\_palette crayon\_palette mpl\_palette

</div>

### Palette widgets

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

choose\_colorbrewer\_palette choose\_cubehelix\_palette choose\_light\_palette choose\_dark\_palette choose\_diverging\_palette

</div>

## Utility functions

<div class="autosummary" data-toctree="generated/" data-nosignatures="">

despine move\_legend saturate desaturate set\_hls\_values load\_dataset get\_dataset\_names get\_data\_home

</div>

---

citing.md

---

# Citing and logo

## Citing seaborn

If seaborn is integral to a scientific publication, please cite it. A paper describing seaborn has been published in the [Journal of Open Source Software](https://joss.theoj.org/papers/10.21105/joss.03021):

> Waskom, M. L., (2021). seaborn: statistical data visualization. Journal of Open Source Software, 6(60), 3021, <https://doi.org/10.21105/joss.03021>.

Here is a ready-made BibTeX entry:

``` none
@article{Waskom2021,
    doi = {10.21105/joss.03021},
    url = {https://doi.org/10.21105/joss.03021},
    year = {2021},
    publisher = {The Open Journal},
    volume = {6},
    number = {60},
    pages = {3021},
    author = {Michael L. Waskom},
    title = {seaborn: statistical data visualization},
    journal = {Journal of Open Source Software}
 }
```

In most situations where seaborn is cited, a citation to [matplotlib](https://matplotlib.org/stable/citing.html) would also be appropriate.

## Logo files

Additional logo files, including hi-res PNGs and images suitable for use over a dark background, are available [on GitHub](https://github.com/mwaskom/seaborn/tree/master/doc/_static).

### Wide logo

![image](logo-wide-lightbg.svg)

### Tall logo

![image](logo-tall-lightbg.svg)

### Logo mark

![image](logo-mark-lightbg.svg)

Credit to [Matthias Bussonnier](https://github.com/Carreau) for the initial design and implementation of the logo.

---

faq.md

---

<div class="currentmodule">

seaborn

</div>

# Frequently asked questions

This is a collection of answers to questions that are commonly raised about seaborn.

## Getting started

### I've installed seaborn, why can't I import it?

*It looks like you successfully installed seaborn by doing* <span class="title-ref">pip install seaborn</span> *but it cannot be imported. You get an error like "ModuleNotFoundError: No module named 'seaborn'" when you try.*

This is probably not a <span class="title-ref">seaborn</span> problem, *per se*. If you have multiple Python environments on your computer, it is possible that you did <span class="title-ref">pip install</span> in one environment and tried to import the library in another. On a unix system, you could check whether the terminal commands <span class="title-ref">which pip</span>, <span class="title-ref">which python</span>, and (if applicable) <span class="title-ref">which jupyter</span> point to the same <span class="title-ref">bin/</span> directory. If not, you'll need to sort out the definition of your <span class="title-ref">$PATH</span> variable.

Two alternate patterns for installing with <span class="title-ref">pip</span> may also be more robust to this problem:

  - Invoke <span class="title-ref">pip</span> on the command line with <span class="title-ref">python -m pip install \<package\></span> rather than <span class="title-ref">pip install \<package\></span>
  - Use <span class="title-ref">%pip install \<package\></span> in a Jupyter notebook to install it in the same place as the kernel

### I can't import seaborn, even though it's definitely installed\!

*You've definitely installed seaborn in the right place, but importing it produces a long traceback and a confusing error message, perhaps something like* <span class="title-ref">ImportError: DLL load failed: The specified module could not be found</span>.

Such errors usually indicate a problem with the way Python libraries are using compiled resources. Because seaborn is pure Python, it won't directly encounter these problems, but its dependencies (numpy, scipy, matplotlib, and pandas) might. To fix the issue, you'll first need to read through the traceback and figure out which dependency was being imported at the time of the error. Then consult the installation documentation for the relevant package, which might have advice for getting an installation working on your specific system.

The most common culprit of these issues is scipy, which has many compiled components. Starting in seaborn version 0.12, scipy is an optional dependency, which should help to reduce the frequency of these issues.

### Why aren't my plots showing up?

*You're calling seaborn functions — maybe in a terminal or IDE with an integrated IPython console — but not seeing any plots.)*

In matplotlib, there is a distinction between *creating* a figure and *showing* it, and in some cases it's necessary to explicitly call <span class="title-ref">matplotlib.pyplot.show</span> at the point when you want to see the plot. Because that command blocks by default and is not always desired (for instance, you may be executing a script that saves files to disk) seaborn does not deviate from standard matplotlib practice here.

Yet most of the examples in the seaborn docs do not have this line, because there are multiple ways to avoid needing it. In a Jupyter notebook with the ["inline"](https://ipython.readthedocs.io/en/stable/interactive/plotting.html#id1) (default) or ["widget"](https://github.com/matplotlib/ipympl) backends, <span class="title-ref">matplotlib.pyplot.show</span> is automatically called after executing a cell, so any figures will appear in the cell's outputs. You can also activate a more interactive experience by executing <span class="title-ref">%matplotlib</span> in any Jupyter or IPython interface or by calling <span class="title-ref">matplotlib.pyplot.ion</span> anywhere in Python. Both methods will configure matplotlib to show or update the figure after every plotting command.

### Why is something printed after every notebook cell?

*You're using seaborn in a Jupyter notebook, and every cell prints something like \<AxesSuplot:\> or \<seaborn.axisgrid.FacetGrid at 0x7f840e279c10\> before showing the plot.*

Jupyter notebooks will show the result of the final statement in the cell as part of its output, and each of seaborn's plotting functions return a reference to the matplotlib or seaborn object that contain the plot. If this is bothersome, you can suppress this output in a few ways:

  - Always assign the result of the final statement to a variable (e.g. <span class="title-ref">ax = sns.histplot(...)</span>)
  - Add a semicolon to the end of the final statement (e.g. <span class="title-ref">sns.histplot(...);</span>)
  - End every cell with a function that has no return value (e.g. <span class="title-ref">plt.show()</span>, which isn't needed but also causes no problems)
  - Add [cell metadata tags](https://nbformat.readthedocs.io/en/latest/format_description.html#cell-metadata), if you're converting the notebook to a different representation

### Why do the plots look fuzzy in a Jupyter notebook?

The default "inline" backend (defined by [IPython](https://github.com/ipython/matplotlib-inline)) uses an unusually low dpi (["dots per inch"](https://en.wikipedia.org/wiki/Dots_per_inch)) for figure output. This is a space-saving measure: lower dpi figures take up less disk space. (Also, lower dpi inline graphics appear *physically* smaller because they are represented as [PNGs](https://en.wikipedia.org/wiki/Portable_Network_Graphics), which do not exactly have a concept of resolution.) So one faces an economy/quality tradeoff.

You can increase the DPI by resetting the rc parameters through the matplotlib API, using

    plt.rcParams.update({"figure.dpi": 96})

Or do it as you activate the seaborn theme:

    sns.set_theme(rc={"figure.dpi": 96})

If you have a high pixel-density monitor, you can make your plots sharper using "retina mode":

    %config InlineBackend.figure_format = "retina"

This won't change the apparent size of your plots in a Jupyter interface, but they might appear very large in other contexts (i.e. on GitHub). And they will take up 4x the disk space. Alternatively, you can make SVG plots:

    %config InlineBackend.figure_format = "svg"

This will configure matplotlib to emit [vector graphics](https://en.wikipedia.org/wiki/Vector_graphics) with "infinite resolution". The downside is that file size will now scale with the number and complexity of the artists in your plot, and in some cases (e.g., a large scatterplot matrix) the load will impact browser responsiveness.

## Tricky concepts

### What do "figure-level" and "axes-level" mean?

*You've encountered the term "figure-level" or "axes-level", maybe in the seaborn docs, StackOverflow answer, or GitHub thread, but you don't understand what it means.*

In brief, all plotting functions in seaborn fall into one of two categories:

  - "axes-level" functions, which plot onto a single subplot that may or may not exist at the time the function is called
  - "figure-level" functions, which internally create a matplotlib figure, potentially including multiple subplots

This design is intended to satisfy two objectives:

  - seaborn should offer functions that are "drop-in" replacements for matplotlib methods
  - seaborn should be able to produce figures that show "facets" or marginal distributions on distinct subplots

The figure-level functions always combine one or more axes-level functions with an object that manages the layout. So, for example, <span class="title-ref">relplot</span> is a figure-level function that combines either <span class="title-ref">scatterplot</span> or <span class="title-ref">lineplot</span> with a <span class="title-ref">FacetGrid</span>. In contrast, <span class="title-ref">jointplot</span> is a figure-level function that can combine multiple different axes-level functions — <span class="title-ref">scatterplot</span> and <span class="title-ref">histplot</span> by default — with a <span class="title-ref">JointGrid</span>.

If all you're doing is creating a plot with a single seaborn function call, this is not something you need to worry too much about. But it becomes relevant when you want to customize at a level beyond what the API of each function offers. It is also the source of various other points of confusion, so it is an important distinction understand (at least broadly) and keep in mind.

This is explained in more detail in the \[tutorial \</tutorial/function\_overview\>\](tutorial \</tutorial/function\_overview\>.md) and in [this blog post](https://michaelwaskom.medium.com/three-common-seaborn-difficulties-10fdd0cc2a8b).

### What is a "categorical plot" or "categorical function"?

Next to the figure-level/axes-level distinction, this concept is probably the second biggest source of confusing behavior.

Several \[seaborn functions \<categorical\_api\>\](\#seaborn-functions-\<categorical\_api\>) are referred to as "categorical" because they are designed to support a use-case where either the x or y variable in a plot is categorical (that is, the variable takes a finite number of potentially non-numeric values).

At the time these functions were written, matplotlib did not have any direct support for non-numeric data types. So seaborn internally builds a mapping from unique values in the data to 0-based integer indexes, which is what it passes to matplotlib. If your data are strings, that's great, and it more-or-less matches how [matplotlib now handles](https://matplotlib.org/stable/gallery/lines_bars_and_markers/categorical_variables.html) string-typed data.

But a potential gotcha is that these functions *always do this by default*, even if both the x and y variables are numeric. This gives rise to a number of confusing behaviors, especially when mixing categorical and non-categorical plots (e.g., a combo bar-and-line plot).

The v0.13 release added a <span class="title-ref">native\_scale</span> parameter which provides control over this behavior. It is <span class="title-ref">False</span> by default, but setting it to <span class="title-ref">True</span> will preserve the original properties of the data used for categorical grouping.

## Specifying data

### How does my data need to be organized?

To get the most out of seaborn, your data should have a "long-form" or "tidy" representation. In a dataframe, [this means that](https://r4ds.had.co.nz/tidy-data.html#tidy-data) each variable has its own column, each observation has its own row, and each value has its own cell. With long-form data, you can succinctly and exactly specify a visualization by assigning variables in the dataset (columns) to roles in the plot.

Data organization is a common stumbling block for beginners, in part because data are often not collected or stored in a long-form representation. Therefore, it is often necessary to [reshape](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html) the data using pandas before plotting. Data reshaping can be a complex undertaking, requiring both a solid grasp of dataframe structure and knowledge of the pandas API. Investing some time in developing this skill can pay large dividends.

But while seaborn is *most* powerful when provided with long-form data, nearly every seaborn function will accept and plot "wide-form" data too. You can trigger this by passing an object to seaborn's <span class="title-ref">data=</span> parameter without specifying other plot variables (<span class="title-ref">x</span>, <span class="title-ref">y</span>, ...). You'll be limited when using wide-form data: each function can make only one kind of wide-form plot. In most cases, seaborn tries to match what matplotlib or pandas would do with a dataset of the same structure. Reshaping your data into long-form will give you substantially more flexibility, but it can be helpful to take a quick look at your data very early in the process, and seaborn tries to make this possible.

Understanding how your data should be represented — and how to get it that way if it starts out messy — is very important for making efficient and complete use of seaborn, and it is elaborated on at length in the \[user-guide \</tutorial/data\_structure\>\](user-guide \</tutorial/data\_structure\>.md).

### Does seaborn only work with pandas?

Generally speaking, no: seaborn is [quite flexible](https://seaborn.pydata.org/tutorial/data_structure.html#options-for-visualizing-long-form-data) about how your dataset needs to be represented.

In most cases, \[long-form data \<faq\_data\_format\>\](\#long-form-data-\<faq\_data\_format\>) represented by multiple vector-like types can be passed directly to <span class="title-ref">x</span>, <span class="title-ref">y</span>, or other plotting parameters. Or you can pass a dictionary of vector types to <span class="title-ref">data</span> rather than a DataFrame. And when plotting with wide-form data, you can use a 2D numpy array or even nested lists to plot in wide-form mode.

There are a couple older functions (namely, <span class="title-ref">catplot</span> and <span class="title-ref">lmplot</span>) that do require you to pass a <span class="title-ref">pandas.DataFrame</span>. But at this point, they are the exception, and they will gain more flexibility over the next few release cycles.

## Layout problems

### How do I change the figure size?

This is going to be more complicated than you might hope, in part because there are multiple ways to change the figure size in matplotlib, and in part because of the \[figure-level/axes-level \<faq\_function\_levels\>\](\#figure-level/axes-level-\<faq\_function\_levels\>) distinction in seaborn.

In matplotlib, you can usually set the default size for all figures through the [rc parameters](https://matplotlib.org/stable/tutorials/introductory/customizing.html), specifically <span class="title-ref">figure.figsize</span>. And you can set the size of an individual figure when you create it (e.g. <span class="title-ref">plt.subplots(figsize=(w, h))</span>). If you're using an axes-level seaborn function, both of these will work as expected.

Figure-level functions both ignore the default figure size and \[parameterize the figure size differently \<figure\_size\_tutorial\>\](\#parameterize-the-figure-size-differently-\<figure\_size\_tutorial\>). When calling a figure-level function, you can pass values to <span class="title-ref">height=</span> and <span class="title-ref">aspect=</span> to set (roughly) the size of each *subplot*. The advantage here is that the size of the figure automatically adapts when you add faceting variables. But it can be confusing.

Fortunately, there's a consistent way to set the exact figure size in a function-independent manner. Instead of setting the figure size when the figure is created, modify it after you plot by calling <span class="title-ref">obj.figure.set\_size\_inches(...)</span>, where <span class="title-ref">obj</span> is either a matplotlib axes (usually assigned to <span class="title-ref">ax</span>) or a seaborn <span class="title-ref">FacetGrid</span> (usually assigned to <span class="title-ref">g</span>).

Note that <span class="title-ref">FacetGrid.figure</span> exists only on seaborn \>= 0.11.2; before that you'll have to access <span class="title-ref">FacetGrid.fig</span>.

Also, if you're making pngs (or in a Jupyter notebook), you can — perhaps surprisingly — scale all your plots up or down by \[changing the dpi \<faq\_inline\_dpi\>\](\#changing-the-dpi-\<faq\_inline\_dpi\>).

### Why isn't seaborn drawing the plot where I tell it to?

*You've explicitly created a matplotlib figure with one or more subplots and tried to draw a seaborn plot on it, but you end up with an extra figure and a blank subplot. Perhaps your code looks something like*

    f, ax = plt.subplots()
    sns.catplot(..., ax=ax)

This is a \[figure-level/axes-level \<faq\_function\_levels\>\](\#figure-level/axes-level-\<faq\_function\_levels\>) gotcha. Figure-level functions always create their own figure, so you can't direct them towards an existing axes the way you can with axes-level functions. Most functions will warn you when this happens, suggest the appropriate axes-level function, and ignore the <span class="title-ref">ax=</span> parameter. A few older functions might put the plot where you want it (because they internally pass <span class="title-ref">ax</span> to their axes-level function) while still creating an extra figure. This latter behavior should be considered a bug, and it is not to be relied on.

The way things currently work, you can either set up the matplotlib figure yourself, or you can use a figure-level function, but you can't do both at the same time.

### Why can't I draw a line over a bar/box/strip/violin plot?

*You're trying to create a single plot using multiple seaborn functions, perhaps by drawing a lineplot or regplot over a barplot or violinplot. You expect the line to go through the mean value for each box (etc.), but it looks to be misalgined, or maybe it's all the way off to the side.*

You are trying to combine a \["categorical plot" \<faq\_categorical\_plots\>\](\#"categorical-plot"-\<faq\_categorical\_plots\>) with another plot type. If your <span class="title-ref">x</span> variable has numeric values, it seems like this should work. But recall: seaborn's categorical plots map unique values on the categorical axis to integer indexes. So if your data have unique <span class="title-ref">x</span> values of 1, 6, 20, 94, the corresponding plot elements will get drawn at 0, 1, 2, 3 (and the tick labels will be changed to represent the actual value).

The line or regression plot doesn't know that this has happened, so it will use the actual numeric values, and the plots won't line up at all.

As of now, there are two ways to work around this. In situations where you want to draw a line, you could use the (somewhat misleadingly named) <span class="title-ref">pointplot</span> function, which is also a "categorical" function and will use the same rules for drawing the plot. If this doesn't solve the problem (for one, it's not as visually flexible as <span class="title-ref">lineplot</span>, you could implement the mapping from actual values to integer indexes yourself and draw the plot that way:

    unique_xs = sorted(df["x"].unique())
    sns.violinplot(data=df, x="x", y="y")
    sns.lineplot(data=df, x=df["x"].map(unique_xs.index), y="y")

This is something that will be easier in a planned future release, as it will become possible to make the categorical functions treat numeric data as numeric. (As of v0.12, it's possible only in <span class="title-ref">stripplot</span> and <span class="title-ref">swarmplot</span>, using <span class="title-ref">native\_scale=True</span>).

### How do I move the legend?

*When applying a semantic mapping to a plot, seaborn will automatically create a legend and add it to the figure. But the automatic choice of legend position is not always ideal.*

With seaborn v0.11.2 or later, use the <span class="title-ref">move\_legend</span> function.

On older versions, a common pattern was to call <span class="title-ref">ax.legend(loc=...)</span> after plotting. While this appears to move the legend, it actually *replaces* it with a new one, using any labeled artists that happen to be attached to the axes. This does [not consistently work](https://github.com/mwaskom/seaborn/issues/2280) across plot types. And it does not propagate the legend title or positioning tweaks that are used to format a multi-variable legend.

The <span class="title-ref">move\_legend</span> function is actually more powerful than its name suggests, and it can also be used to modify other [legend parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html) (font size, handle length, etc.) after plotting.

## Other customizations

### How can I can I change something about the figure?

*You want to make a very specific plot, and seaborn's defaults aren't doing it for you.*

There's basically a four-layer hierarchy to customizing a seaborn figure:

1.  Explicit seaborn function parameters
2.  Passed-through matplotlib keyword arguments
3.  Matplotlib axes methods
4.  Matplotlib artist methods

First, read through the API docs for the relevant seaborn function. Each has a lot of parameters (probably too many), and you may be able to accomplish your desired customization using seaborn's own API.

But seaborn does delegate a lot of customization to matplotlib. Most functions have <span class="title-ref">\*\*kwargs</span> in their signature, which will catch extra keyword arguments and pass them through to the underlying matplotlib function. For example, <span class="title-ref">scatterplot</span> has a number of parameters, but you can also use any valid keyword argument for <span class="title-ref">matplotlib.axes.Axes.scatter</span>, which it calls internally.

Passing through keyword arguments lets you customize the artists that represent data, but often you will want to customize other aspects of the figure, such as labels, ticks, and titles. You can do this by calling methods on the object that seaborn's plotting functions return. Depending on whether you're calling an \[axes-level or figure-level function \<faq\_function\_levels\>\](\#axes-level-or-figure-level-function-\<faq\_function\_levels\>), this may be a <span class="title-ref">matplotlib.axes.Axes</span> object or a seaborn wrapper (such as <span class="title-ref">seaborn.FacetGrid</span>). Both kinds of objects have numerous methods that you can call to customize nearly anything about the figure. The easiest thing is usually to call <span class="title-ref">matplotlib.axes.Axes.set</span> or <span class="title-ref">seaborn.FacetGrid.set</span>, which let you modify multiple attributes at once, e.g.:

    ax = sns.scatterplot(...)
    ax.set(
        xlabel="The x label",
        ylabel="The y label",
        title="The title"
        xlim=(xmin, xmax),
        xticks=[...],
        xticklabels=[...],
    )

Finally, the deepest customization may require you to reach "into" the matplotlib axes and tweak the artists that are stored on it. These will be in artist lists, such as <span class="title-ref">ax.lines</span>, <span class="title-ref">ax.collections</span>, <span class="title-ref">ax.patches</span>, etc.

*Warning:* Neither matplotlib nor seaborn consider the specific artists produced by their plotting functions to be part of stable API. Because it's not possible to gracefully warn about upcoming changes to the artist types or the order in which they are stored, code that interacts with these attributes could break unexpectedly. With that said, seaborn does try hard to avoid making this kind of change.

### Wait, I need to learn how to use matplotlib too?

It really depends on how much customization you need. You can certainly perform a lot of exploratory data analysis while primarily or exclusively interacting with the seaborn API. But, if you're polishing a figure for a presentation or publication, you'll likely find yourself needing to understand at least a little bit about how matplotlib works. Matplotlib is extremely flexible, and it lets you control literally everything about a figure if you drill down far enough.

Seaborn was originally designed with the idea that it would handle a specific set of well-defined operations through a very high-level API, while letting users "drop down" to matplotlib when they desired additional customization. This can be a pretty powerful combination, and it works reasonably well if you already know how to use matplotlib. But as seaborn as gained more features, it has become more feasible to learn seaborn *first*. In that situation, the need to switch APIs tends to be a bit more confusing / frustrating. This has motivated the development of seaborn's new \[objects interface \</tutorial/objects\_interface\>\](objects interface \</tutorial/objects\_interface\>.md), which aims to provide a more cohesive API for both high-level and low-level figure specification. Hopefully, it will alleviate the "two-library problem" as it matures.

With that said, the level of deep control that matplotlib affords really can't be beat, so if you care about doing very specific things, it really is worth learning.

### How do I use seaborn with matplotlib's object-oriented interface?

*You prefer to use matplotlib's explicit or* ["object-oriented"](https://matplotlib.org/stable/users/explain/api_interfaces.html) *interface, because it makes your code easier to reason about and maintain. But the object-orient interface consists of methods on matplotlib objects, whereas seaborn offers you independent functions.*

This is another case where it will be helpful to keep the \[figure-level/axes-level \<faq\_function\_levels\>\](\#figure-level/axes-level-\<faq\_function\_levels\>) distinction in mind.

Axes-level functions can be used like any matplotlib axes method, but instead of calling <span class="title-ref">ax.func(...)</span>, you call <span class="title-ref">func(..., ax=ax)</span>. They also return the axes object (which they may have created, if no figure was currently active in matplotlib's global state). You can use the methods on that object to further customize the plot even if you didn't start with <span class="title-ref">matplotlib.pyplot.figure</span> or \`matplotlib.pyplot.subplots\`:

    ax = sns.histplot(...)
    ax.set(...)

Figure-level functions \[can't be directed towards an existing figure \<faq\_plot\_misplaced\>\](\#can't-be-directed-towards-an-existing-figure-\<faq\_plot\_misplaced\>), but they do store the matplotlib objects on the <span class="title-ref">FacetGrid</span> object that they return (which seaborn docs always assign to a variable named <span class="title-ref">g</span>).

If your figure-level function created only one subplot, you can access it directly:

    g = sns.displot(...)
    g.ax.set(...)

For multiple subplots, you can either use <span class="title-ref">FacetGrid.axes</span> (which is always a 2D array of axes) or <span class="title-ref">FacetGrid.axes\_dict</span> (which maps the row/col keys to the corresponding matplotlib object):

    g = sns.displot(..., col=...)
    for col, ax in g.axes_dict.items():
        ax.set(...)

But if you're batch-setting attributes on all subplots, use the <span class="title-ref">FacetGrid.set</span> method rather than iterating over the individual axes:

    g = sns.displot(...)
    g.set(...)

To access the underlying matplotlib *figure*, use <span class="title-ref">FacetGrid.figure</span> on seaborn \>= 0.11.2 (or <span class="title-ref">FacetGrid.fig</span> on any other version).

### Can I annotate bar plots with the bar values?

Nothing like this is built into seaborn, but matplotlib v3.4.0 added a convenience function (<span class="title-ref">matplotlib.axes.Axes.bar\_label</span>) that makes it relatively easy. Here are a couple of recipes; note that you'll need to use a different approach depending on whether your bars come from a \[figure-level or axes-level function \<faq\_function\_levels\>\](\#figure-level-or-axes-level-function-\<faq\_function\_levels\>):

    # Axes-level
    ax = sns.histplot(df, x="x_var")
    for bars in ax.containers:
        ax.bar_label(bars)
    
    # Figure-level, one subplot
    g = sns.displot(df, x="x_var")
    for bars in g.ax.containers:
        g.ax.bar_label(bars)
    
    # Figure-level, multiple subplots
    g = sns.displot(df, x="x_var", col="col_var)
    for ax in g.axes.flat:
        for bars in ax.containers:
            ax.bar_label(bars)

### Can I use seaborn in dark mode?

There's no direct support for this in seaborn, but matplotlib has a ["dark\_background"](https://matplotlib.org/stable/gallery/style_sheets/dark_background.html) style-sheet that you could use, e.g.:

    sns.set_theme(style="ticks", rc=plt.style.library["dark_background"])

Note that "dark\_background" changes the default color palette to "Set2", and that will override any palette you define in <span class="title-ref">set\_theme</span>. If you'd rather use a different color palette, you'll have to call <span class="title-ref">sns.set\_palette</span> separately. The default \[seaborn palette \</tutorial/color\_palettes\>\](seaborn palette \</tutorial/color\_palettes\>.md) ("deep") has poor contrast against a dark background, so you'd be better off using "muted", "bright", or "pastel".

## Statistical inquiries

### Can I access the results of seaborn's statistical transformations?

Because seaborn performs some statistical operations as it builds plots (aggregating, bootstrapping, fitting regression models), some users would like access to the statistics that it computes. This is not possible: it's explicitly considered out of scope for seaborn (a visualization library) to offer an API for interrogating statistical models.

If you simply want to be diligent and verify that seaborn is doing things correctly (or that it matches your own code), it's open-source, so feel free to read the code. Or, because it's Python, you can call into the private methods that calculate the stats (just don't do this in production code). But don't expect seaborn to offer features that are more at home in [scipy](https://scipy.org/) or [statsmodels](https://www.statsmodels.org/).

### Can I show standard error instead of a confidence interval?

As of v0.12, this is possible in most places, using the new <span class="title-ref">errorbar</span> API (see the \[tutorial \</tutorial/error\_bars\>\](tutorial \</tutorial/error\_bars\>.md) for more details).

### Why does the y axis for a KDE plot go above 1?

*You've estimated a probability distribution for your data using* <span class="title-ref">kdeplot</span>, *but the y axis goes above 1. Aren't probabilities bounded by 1? Is this a bug?*

This is not a bug, but it is a common confusion (about kernel density plots and probability distributions more broadly). A continuous probability distribution is defined by a [probability density function](https://en.wikipedia.org/wiki/Probability_density_function), which <span class="title-ref">kdeplot</span> estimates. The probability density function does **not** output *a probability*: a continuous random variable can take an infinite number of values, so the probability of observing any *specific* value is infinitely small. You can only talk meaningfully about the probability of observing a value that falls within some *range*. The probability of observing a value that falls within the complete range of possible values is 1. Likewise, the probability density function is normalized so that the area under it (that is, the integral of the function across its domain) equals 1. If the range of likely values is small, the curve will have to go above 1 to make this possible.

## Common curiosities

### Why is seaborn imported as <span class="title-ref">sns</span>?

This is an obscure reference to the [namesake](https://pbs.twimg.com/media/C3C6q1ZUYAALXX0.jpg) of the library, but you can also think of it as "seaborn name space".

### Why is ggplot so much better than seaborn?

Good question. Probably because you get to use the word "geom" a lot, and it's fun to say. "Geom". "Geeeeeooom".

---

index.md

---

- html\_theme.sidebar\_secondary.remove

# seaborn: statistical data visualization

<div class="grid" data-gutter="1">

6

<div class="grid-item">

[![image](example_thumbs/scatterplot_matrix_thumb.png)](./examples/scatterplot_matrix.html)

</div>

<div class="grid-item">

[![image](example_thumbs/errorband_lineplots_thumb.png)](examples/errorband_lineplots.html)

</div>

<div class="grid-item">

[![image](example_thumbs/scatterplot_sizes_thumb.png)](examples/scatterplot_sizes.html)

</div>

<div class="grid-item">

[![image](example_thumbs/timeseries_facets_thumb.png)](examples/timeseries_facets.html)

</div>

<div class="grid-item">

[![image](example_thumbs/horizontal_boxplot_thumb.png)](examples/horizontal_boxplot.html)

</div>

<div class="grid-item">

[![image](example_thumbs/regression_marginals_thumb.png)](examples/regression_marginals.html)

</div>

</div>

<div class="grid">

1 1 3 3

<div class="grid-item" data-columns="12 12 6 6">

Seaborn is a Python data visualization library based on [matplotlib](https://matplotlib.org). It provides a high-level interface for drawing attractive and informative statistical graphics.

For a brief introduction to the ideas behind the library, you can read the \[introductory notes \<tutorial/introduction\>\](introductory notes \<tutorial/introduction\>.md) or the [paper](https://joss.theoj.org/papers/10.21105/joss.03021). Visit the \[installation page \<installing\>\](installation page \<installing\>.md) to see how you can download the package and get started with it. You can browse the \[example gallery \<examples/index\>\](example gallery \<examples/index\>.md) to see some of the things that you can do with seaborn, and then check out the \[tutorials \<tutorial\>\](tutorials \<tutorial\>.md) or \[API reference \<api\>\](API reference \<api\>.md) to find out how.

To see the code or report a bug, please visit the [GitHub repository](https://github.com/mwaskom/seaborn). General support questions are most at home on [stackoverflow](https://stackoverflow.com/questions/tagged/seaborn/), which has a dedicated channel for seaborn.

</div>

<div class="grid-item-card" data-columns="12 12 2 2" data-class-title="sd-fs-5" data-class-body="sd-pl-4">

Contents

<div class="toctree" data-maxdepth="1">

Installing \<installing\> Gallery \<examples/index\> Tutorial \<tutorial\> API \<api\> Releases \<whatsnew/index\> Citing \<citing\> FAQ \<faq\>

</div>

</div>

<div class="grid-item-card" data-columns="12 12 4 4" data-class-title="sd-fs-5" data-class-body="sd-pl-3">

Features

  - `New` Objects: \[API \<objects\_api\>\](\#api-\<objects\_api\>) | \[Tutorial \<tutorial/objects\_interface\>\](Tutorial \<tutorial/objects\_interface\>.md)
  - Relational plots: \[API \<relational\_api\>\](\#api-\<relational\_api\>) | \[Tutorial \<tutorial/relational\>\](Tutorial \<tutorial/relational\>.md)
  - Distribution plots: \[API \<distribution\_api\>\](\#api-\<distribution\_api\>) | \[Tutorial \<tutorial/distributions\>\](Tutorial \<tutorial/distributions\>.md)
  - Categorical plots: \[API \<categorical\_api\>\](\#api-\<categorical\_api\>) | \[Tutorial \<tutorial/categorical\>\](Tutorial \<tutorial/categorical\>.md)
  - Regression plots: \[API \<regression\_api\>\](\#api-\<regression\_api\>) | \[Tutorial \<tutorial/regression\>\](Tutorial \<tutorial/regression\>.md)
  - Multi-plot grids: \[API \<grid\_api\>\](\#api-\<grid\_api\>) | \[Tutorial \<tutorial/axis\_grids\>\](Tutorial \<tutorial/axis\_grids\>.md)
  - Figure theming: \[API \<style\_api\>\](\#api-\<style\_api\>) | \[Tutorial \<tutorial/aesthetics\>\](Tutorial \<tutorial/aesthetics\>.md)
  - Color palettes: \[API \<palette\_api\>\](\#api-\<palette\_api\>) | \[Tutorial \<tutorial/color\_palettes\>\](Tutorial \<tutorial/color\_palettes\>.md)

</div>

</div>

---

installing.md

---

<div id="installing">

<div class="currentmodule">

seaborn

</div>

</div>

# Installing and getting started

Official releases of seaborn can be installed from [PyPI](https://pypi.org/project/seaborn/):

    pip install seaborn

The basic invocation of <span class="title-ref">pip</span> will install seaborn and, if necessary, its mandatory dependencies. It is possible to include optional dependencies that give access to a few advanced features:

    pip install seaborn[stats]

The library is also included as part of the [Anaconda](https://repo.anaconda.com/) distribution, and it can be installed with \`conda\`:

    conda install seaborn

As the main Anaconda repository can be slow to add new releases, you may prefer using the [conda-forge](https://conda-forge.org/) channel:

    conda install seaborn -c conda-forge

## Dependencies

### Supported Python versions

  - Python 3.8+

### Mandatory dependencies

  - [numpy](https://numpy.org/)
  - [pandas](https://pandas.pydata.org/)
  - [matplotlib](https://matplotlib.org)

### Optional dependencies

  - [statsmodels](https://www.statsmodels.org/), for advanced regression plots
  - [scipy](https://www.scipy.org/), for clustering matrices and some advanced options
  - [fastcluster](https://pypi.org/project/fastcluster/), faster clustering of large matrices

## Quickstart

Once you have seaborn installed, you're ready to get started. To test it out, you could load and plot one of the example datasets:

    import seaborn as sns
    df = sns.load_dataset("penguins")
    sns.pairplot(df, hue="species")

If you're working in a Jupyter notebook or an IPython terminal with [matplotlib mode](https://ipython.readthedocs.io/en/stable/interactive/plotting.html) enabled, you should immediately see \[the plot \<scatterplot\_matrix\>\](\#the-plot-\<scatterplot\_matrix\>). Otherwise, you may need to explicitly call \`matplotlib.pyplot.show\`:

    import matplotlib.pyplot as plt
    plt.show()

While you can get pretty far with only seaborn imported, having access to matplotlib functions is often useful. The tutorials and API documentation typically assume the following imports:

    import numpy as np
    import pandas as pd
    
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    
    import seaborn as sns
    import seaborn.objects as so

## Debugging install issues

The seaborn codebase is pure Python, and the library should generally install without issue. Occasionally, difficulties will arise because the dependencies include compiled code and link to system libraries. These difficulties typically manifest as errors on import with messages such as `"DLL load failed"`. To debug such problems, read through the exception trace to figure out which specific library failed to import, and then consult the installation docs for that package to see if they have tips for your particular system.

In some cases, an installation of seaborn will appear to succeed, but trying to import it will raise an error with the message `"No module named seaborn"`. This usually means that you have multiple Python installations on your system and that your `pip` or `conda` points towards a different installation than where your interpreter lives. Resolving this issue will involve sorting out the paths on your system, but it can sometimes be avoided by invoking `pip` with `python -m pip install seaborn`.

## Getting help

If you think you've encountered a bug in seaborn, please report it on the [GitHub issue tracker](https://github.com/mwaskom/seaborn/issues). To be useful, bug reports must include the following information:

  - A reproducible code example that demonstrates the problem
  - The output that you are seeing (an image of a plot, or the error message)
  - A clear explanation of why you think something is wrong
  - The specific versions of seaborn and matplotlib that you are working with

Bug reports are easiest to address if they can be demonstrated using one of the example datasets from the seaborn docs (i.e. with <span class="title-ref">load\_dataset</span>). Otherwise, it is preferable that your example generate synthetic data to reproduce the problem. If you can only demonstrate the issue with your actual dataset, you will need to share it, ideally as a csv.

If you've encountered an error, searching the specific text of the message before opening a new issue can often help you solve the problem quickly and avoid making a duplicate report.

Because matplotlib handles the actual rendering, errors or incorrect outputs may be due to a problem in matplotlib rather than one in seaborn. It can save time if you try to reproduce the issue in an example that uses only matplotlib, so that you can report it in the right place. But it is alright to skip this step if it's not obvious how to do it.

General support questions are more at home on [stackoverflow](https://stackoverflow.com/questions/tagged/seaborn/), where there is a larger audience of people who will see your post and may be able to offer assistance. Your chance of getting a quick answer will be higher if you include [runnable code](https://stackoverflow.com/help/minimal-reproducible-example), a precise statement of what you are hoping to achieve, and a clear explanation of the problems that you have encountered.

---

index.md

---

# What's new in each version

## v0.13

<div class="toctree" data-maxdepth="2">

v0.13.2 v0.13.1 v0.13.0

</div>

## v0.12

<div class="toctree" data-maxdepth="2">

v0.12.2 v0.12.1 v0.12.0

</div>

## v0.11

<div class="toctree" data-maxdepth="2">

v0.11.2 v0.11.1 v0.11.0

</div>

## v0.10

<div class="toctree" data-maxdepth="2">

v0.10.1 v0.10.0

</div>

## v0.9

<div class="toctree" data-maxdepth="2">

v0.9.1 v0.9.0

</div>

## v0.8

<div class="toctree" data-maxdepth="2">

v0.8.1 v0.8.0

</div>

## v0.7

<div class="toctree" data-maxdepth="2">

v0.7.1 v0.7.0

</div>

## v0.6

<div class="toctree" data-maxdepth="2">

v0.6.0

</div>

## v0.5

<div class="toctree" data-maxdepth="2">

v0.5.1 v0.5.0

</div>

## v0.4

<div class="toctree" data-maxdepth="2">

v0.4.0

</div>

## v0.3

<div class="toctree" data-maxdepth="2">

v0.3.1 v0.3.0

</div>

## v0.2

<div class="toctree" data-maxdepth="2">

v0.2.1 v0.2.0

</div>

---

v0.10.0.md

---

# v0.10.0 (January 2020)

This is a major update that is being released simultaneously with version 0.9.1. It has all of the same features (and bugs\!) as 0.9.1, but there are important changes to the dependencies.

Most notably, all support for Python 2 has now been dropped. Support for Python 3.5 has also been dropped. Seaborn is now strictly compatible with Python 3.6+.

Minimally supported versions of the dependent PyData libraries have also been increased, in some cases substantially. While seaborn has tended to be very conservative about maintaining compatibility with older dependencies, this was causing increasing pain during development. At the same time, these libraries are now much easier to install. Going forward, seaborn will likely stay close to the [Numpy community guidelines](https://numpy.org/neps/nep-0029-deprecation_policy.html) for version support.

This release also removes a few previously-deprecated features:

  - The `tsplot` function and `seaborn.timeseries` module have been removed. Recall that `tsplot` was replaced with <span class="title-ref">lineplot</span>.
  - The `seaborn.apionly` entry-point has been removed.
  - The `seaborn.linearmodels` module (previously renamed to `seaborn.regression`) has been removed.

---

v0.10.1.md

---

# v0.10.1 (April 2020)

This is minor release with bug fixes for issues identified since 0.10.0.

  - Fixed a bug that appeared within the bootstrapping algorithm on 32-bit systems.
  - Fixed a bug where <span class="title-ref">regplot</span> would crash on singleton inputs. Now a crash is avoided and regression estimation/plotting is skipped.
  - Fixed a bug where <span class="title-ref">heatmap</span> would ignore user-specified under/over/bad values when recentering a colormap.
  - Fixed a bug where <span class="title-ref">heatmap</span> would use values from masked cells when computing default colormap limits.
  - Fixed a bug where <span class="title-ref">despine</span> would cause an error when trying to trim spines on a matplotlib categorical axis.
  - Adapted to a change in matplotlib that caused problems with single swarm plots.
  - Added the `showfliers` parameter to <span class="title-ref">boxenplot</span> to suppress plotting of outlier data points, matching the API of <span class="title-ref">boxplot</span>.
  - Avoided seeing an error from statmodels when data with an IQR of 0 is passed to <span class="title-ref">kdeplot</span>.
  - Added the `legend.title_fontsize` to the <span class="title-ref">plotting\_context</span> definition.
  - Deprecated several utility functions that are no longer used internally (`percentiles`, `sig_stars`, `pmf_hist`, and `sort_df`).

---

v0.11.0.md

---

# v0.11.0 (September 2020)

This is a major release with several important new features, enhancements to existing functions, and changes to the library. Highlights include an overhaul and modernization of the distributions plotting functions, more flexible data specification, new colormaps, and better narrative documentation.

For an overview of the new features and a guide to updating, see [this Medium post](https://medium.com/@michaelwaskom/announcing-the-release-of-seaborn-0-11-3df0341af042?source=friends_link&sk=85146c0b2f01d2b41d214f8c3835b697).

## Required keyword arguments

Most plotting functions now require all of their parameters to be specified using keyword arguments. To ease adaptation, code without keyword arguments will trigger a `FutureWarning` in v0.11. In a future release (v0.12 or v0.13, depending on release cadence), this will become an error. Once keyword arguments are fully enforced, the signature of the plotting functions will be reorganized to accept `data` as the first and only positional argument (`2052,2081`).

## Modernization of distribution functions

The distribution module has been completely overhauled, modernizing the API and introducing several new functions and features within existing functions. Some new features are explained here; the \[tutorial documentation \</tutorial/distributions\>\](tutorial documentation \</tutorial/distributions\>.md) has also been rewritten and serves as a good introduction to the functions.

### New plotting functions

First, three new functions, <span class="title-ref">displot</span>, <span class="title-ref">histplot</span> and <span class="title-ref">ecdfplot</span> have been added (`2157`, `2125`, `2141`).

The figure-level <span class="title-ref">displot</span> function is an interface to the various distribution plots (analogous to <span class="title-ref">relplot</span> or <span class="title-ref">catplot</span>). It can draw univariate or bivariate histograms, density curves, ECDFs, and rug plots on a <span class="title-ref">FacetGrid</span>.

The axes-level <span class="title-ref">histplot</span> function draws univariate or bivariate histograms with a number of features, including:

  - mapping multiple distributions with a `hue` semantic
  - normalization to show density, probability, or frequency statistics
  - flexible parameterization of bin size, including proper bins for discrete variables
  - adding a KDE fit to show a smoothed distribution over all bin statistics
  - experimental support for histograms over categorical and datetime variables.

The axes-level <span class="title-ref">ecdfplot</span> function draws univariate empirical cumulative distribution functions, using a similar interface.

### Changes to existing functions

Second, the existing functions <span class="title-ref">kdeplot</span> and <span class="title-ref">rugplot</span> have been completely overhauled (`2060,2104`).

The overhauled functions now share a common API with the rest of seaborn, they can show conditional distributions by mapping a third variable with a `hue` semantic, and they have been improved in numerous other ways. The github pull request (`2104`) has a longer explanation of the changes and the motivation behind them.

This is a necessarily API-breaking change. The parameter names for the positional variables are now `x` and `y`, and the old names have been deprecated. Efforts were made to handle and warn when using the deprecated API, but it is strongly suggested to check your plots carefully.

Additionally, the statsmodels-based computation of the KDE has been removed. Because there were some inconsistencies between the way different parameters (specifically, `bw`, `clip`, and `cut`) were implemented by each backend, this may cause plots to look different with non-default parameters. Support for using non-Gaussian kernels, which was available only in the statsmodels backend, has been removed.

Other new features include:

  - several options for representing multiple densities (using the `multiple` and `common_norm` parameters)
  - weighted density estimation (using the new `weights` parameter)
  - better control over the smoothing bandwidth (using the new `bw_adjust` parameter)
  - more meaningful parameterization of the contours that represent a bivariate density (using the `thresh` and `levels` parameters)
  - log-space density estimation (using the new `log_scale` parameter, or by scaling the data axis before plotting)
  - "bivariate" rug plots with a single function call (by assigning both `x` and `y`)

### Deprecations

Finally, the <span class="title-ref">distplot</span> function is now formally deprecated. Its features have been subsumed by <span class="title-ref">displot</span> and <span class="title-ref">histplot</span>. Some effort was made to gradually transition <span class="title-ref">distplot</span> by adding the features in <span class="title-ref">displot</span> and handling backwards compatibility, but this proved to be too difficult. The similarity in the names will likely cause some confusion during the transition, which is regrettable.

### Related enhancements and changes

These additions facilitated new features (and forced changes) in <span class="title-ref">jointplot</span> and <span class="title-ref">JointGrid</span> (`2210`) and in <span class="title-ref">pairplot</span> and <span class="title-ref">PairGrid</span> (`2234`).

  - Added support for the `hue` semantic in <span class="title-ref">jointplot</span>/<span class="title-ref">JointGrid</span>. This support is lightweight and simply delegates the mapping to the underlying axes-level functions.
  - Delegated the handling of `hue` in <span class="title-ref">PairGrid</span>/<span class="title-ref">pairplot</span> to the plotting function when it understands `hue`, meaning that (1) the zorder of scatterplot points will be determined by row in dataframe, (2) additional options for resolving hue (e.g. the `multiple` parameter) can be used, and (3) numeric hue variables can be naturally mapped when using <span class="title-ref">scatterplot</span>.
  - Added `kind="hist"` to <span class="title-ref">jointplot</span>, which draws a bivariate histogram on the joint axes and univariate histograms on the marginal axes, as well as both `kind="hist"` and `kind="kde"` to <span class="title-ref">pairplot</span>, which behaves likewise.
  - The various modes of <span class="title-ref">jointplot</span> that plot marginal histograms now use <span class="title-ref">histplot</span> rather than <span class="title-ref">distplot</span>. This slightly changes the default appearance and affects the valid keyword arguments that can be passed to customize the plot. Likewise, the marginal histogram plots in <span class="title-ref">pairplot</span> now use <span class="title-ref">histplot</span>.

## Standardization and enhancements of data ingest

The code that processes input data has been refactored and enhanced. In v0.11, this new code takes effect for the relational and distribution modules; other modules will be refactored to use it in future releases (`2071`).

These changes should be transparent for most use-cases, although they allow a few new features:

  - Named variables for long-form data can refer to the named index of a <span class="title-ref">pandas.DataFrame</span> or to levels in the case of a multi-index. Previously, it was necessary to call <span class="title-ref">pandas.DataFrame.reset\_index</span> before using index variables (e.g., after a groupby operation).
  - <span class="title-ref">relplot</span> now has the same flexibility as the axes-level functions to accept data in long- or wide-format and to accept data vectors (rather than named variables) in long-form mode.
  - The data parameter can now be a Python `dict` or an object that implements that interface. This is a new feature for wide-form data. For long-form data, it was previously supported but not documented.
  - A wide-form data object can have a mixture of types; the non-numeric types will be removed before plotting. Previously, this caused an error.
  - There are better error messages for other instances of data mis-specification.

See the new user guide chapter on \[data formats \</tutorial/data\_structure\>\](data formats \</tutorial/data\_structure\>.md) for more information about what is supported.

## Other changes

### Documentation improvements

  - Added two new chapters to the user guide, one giving an overview of the \[types of functions in seaborn \</tutorial/function\_overview\>\](types of functions in seaborn \</tutorial/function\_overview\>.md), and one discussing the different \[data formats \</tutorial/data\_structure\>\](data formats \</tutorial/data\_structure\>.md) that seaborn understands.
  - Expanded the \[color palette tutorial \</tutorial/color\_palettes\>\](color palette tutorial \</tutorial/color\_palettes\>.md) to give more background on color theory and better motivate the use of color in statistical graphics.
  - Added more information to the \[installation guidelines \</installing\>\](installation guidelines \</installing\>.md) and streamlined the \[introduction \</tutorial/introduction\>\](introduction \</tutorial/introduction\>.md) page.
  - Improved cross-linking within the seaborn docs and between the seaborn and matplotlib docs.

### Theming

  - The <span class="title-ref">set</span> function has been renamed to <span class="title-ref">set\_theme</span> for more clarity about what it does. For the foreseeable future, <span class="title-ref">set</span> will remain as an alias, but it is recommended to update your code.

### Relational plots

  - Reduced some of the surprising behavior of relational plot legends when using a numeric hue or size mapping (`2229`):
      - Added an "auto" mode (the new default) that chooses between "brief" and "full" legends based on the number of unique levels of each variable.
      - Modified the ticking algorithm for a "brief" legend to show up to 6 values and not to show values outside the limits of the data.
      - Changed the approach to the legend title: the normal matplotlib legend title is used when only one variable is assigned a semantic mapping, whereas the old approach of adding an invisible legend artist with a subtitle label is used only when multiple semantic variables are defined.
      - Modified legend subtitles to be left-aligned and to be drawn in the default legend title font size.
  - Changed how functions that use different representations for numeric and categorical data handle vectors with an `object` data type. Previously, data was considered numeric if it could be coerced to a float representation without error. Now, object-typed vectors are considered numeric only when their contents are themselves numeric. As a consequence, numbers that are encoded as strings will now be treated as categorical data (`2084`).
  - Plots with a `style` semantic can now generate an infinite number of unique dashes and/or markers by default. Previously, an error would be raised if the `style` variable had more levels than could be mapped using the default lists. The existing defaults were slightly modified as part of this change; if you need to exactly reproduce plots from earlier versions, refer to the [old defaults](https://github.com/mwaskom/seaborn/blob/v0.10.1/seaborn/relational.py#L24) (`2075`).
  - Changed how <span class="title-ref">scatterplot</span> sets the default linewidth for the edges of the scatter points. New behavior is to scale with the point sizes themselves (on a plot-wise, not point-wise basis). This change also slightly reduces the default width when point sizes are not varied. Set `linewidth=0.75` to reproduce the previous behavior. (`2708`).
  - Improved support for datetime variables in <span class="title-ref">scatterplot</span> and <span class="title-ref">lineplot</span> (`2138`).
  - Fixed a bug where <span class="title-ref">lineplot</span> did not pass the `linestyle` parameter down to matplotlib (`2095`).
  - Adapted to a change in matplotlib that prevented passing vectors of literal values to `c` and `s` in <span class="title-ref">scatterplot</span> (`2079`).

### Categorical plots

  - Fixed a few computational issues in <span class="title-ref">boxenplot</span> and improved its visual appearance (`2086`):
      - Changed the default method for computing the number of boxes to`k_depth="tukey"`, as the previous default (`k_depth="proportion"`) is based on a heuristic that produces too many boxes for small datasets.
      - Added the option to specify the specific number of boxes (e.g. `k_depth=6`) or to plot boxes that will cover most of the data points (`k_depth="full"`).
      - Added a new parameter, `trust_alpha`, to control the number of boxes when `k_depth="trustworthy"`.
      - Changed the visual appearance of <span class="title-ref">boxenplot</span> to more closely resemble <span class="title-ref">boxplot</span>. Notably, thin boxes will remain visible when the edges are white.
  - Allowed <span class="title-ref">catplot</span> to use different values on the categorical axis of each facet when axis sharing is turned off (e.g. by specifying `sharex=False`) (`2196`).
  - Improved the error messages produced when categorical plots process the orientation parameter.
  - Added an explicit warning in <span class="title-ref">swarmplot</span> when more than 5% of the points overlap in the "gutters" of the swarm (`2045`).

### Multi-plot grids

  - A few small changes to make life easier when using <span class="title-ref">PairGrid</span> (`2234`):
      - Added public access to the legend object through the `legend` attribute (also affects <span class="title-ref">FacetGrid</span>).
      - The `color` and `label` parameters are no longer passed to the plotting functions when `hue` is not used.
      - The data is no longer converted to a numpy object before plotting on the marginal axes.
      - It is possible to specify only one of `x_vars` or `y_vars`, using all variables for the unspecified dimension.
      - The `layout_pad` parameter is stored and used every time you call the <span class="title-ref">PairGrid.tight\_layout</span> method.
  - Added a `tight_layout` method to <span class="title-ref">FacetGrid</span> and <span class="title-ref">PairGrid</span>, which runs the <span class="title-ref">matplotlib.pyplot.tight\_layout</span> algorithm without interference from the external legend (`2073`).
  - Added the `axes_dict` attribute to <span class="title-ref">FacetGrid</span> for named access to the component axes (`2046`).
  - Made <span class="title-ref">FacetGrid.set\_axis\_labels</span> clear labels from "interior" axes (`2046`).
  - Added the `marginal_ticks` parameter to <span class="title-ref">JointGrid</span> which, if set to `True`, will show ticks on the count/density axis of the marginal plots (`2210`).
  - Improved <span class="title-ref">FacetGrid.set\_titles</span> with `margin_titles=True`, such that texts representing the original row titles are removed before adding new ones (`2083`).
  - Changed the default value for `dropna` to `False` in <span class="title-ref">FacetGrid</span>, <span class="title-ref">PairGrid</span>, <span class="title-ref">JointGrid</span>, and corresponding functions. As all or nearly all seaborn and matplotlib plotting functions handle missing data well, this option is no longer useful, but it causes problems in some edge cases. It may be deprecated in the future. (`2204`).
  - Fixed a bug in <span class="title-ref">PairGrid</span> that appeared when setting `corner=True` and `despine=False` (`2203`).

## Color palettes

  - Improved and modernized the \[color palettes chapter \</tutorial/color\_palettes\>\](color palettes chapter \</tutorial/color\_palettes\>.md) of the seaborn tutorial.
  - Added two new perceptually-uniform colormaps: "flare" and "crest". The new colormaps are similar to "rocket" and "mako", but their luminance range is reduced. This makes them well suited to numeric mappings of line or scatter plots, which need contrast with the axes background at the extremes (`2237`).
  - Enhanced numeric colormap functionality in several ways (`2237`):
      - Added string-based access within the <span class="title-ref">color\_palette</span> interface to <span class="title-ref">dark\_palette</span>, <span class="title-ref">light\_palette</span>, and <span class="title-ref">blend\_palette</span>. This means that anywhere you specify a palette in seaborn, a name like `"dark:blue"` will use <span class="title-ref">dark\_palette</span> with the input `"blue"`.
      - Added the `as_cmap` parameter to <span class="title-ref">color\_palette</span> and changed internal code that uses a continuous colormap to take this route.
      - Tweaked the <span class="title-ref">light\_palette</span> and <span class="title-ref">dark\_palette</span> functions to use an endpoint that is a very desaturated version of the input color, rather than a pure gray. This produces smoother ramps. To exactly reproduce previous plots, use <span class="title-ref">blend\_palette</span> with `".13"` for dark or `".95"` for light.
      - Changed <span class="title-ref">diverging\_palette</span> to have a default value of `sep=1`, which gives better results.
  - Added a rich HTML representation to the object returned by <span class="title-ref">color\_palette</span> (`2225`).
  - Fixed the `"{palette}_d"` logic to modify reversed colormaps and to use the correct direction of the luminance ramp in both cases.

### Deprecations and removals

  - Removed an optional (and undocumented) dependency on BeautifulSoup (`2190`) in <span class="title-ref">get\_dataset\_names</span>.
  - Deprecated the `axlabel` function; use `ax.set(xlabel=, ylabel=)` instead.
  - Deprecated the `iqr` function; use <span class="title-ref">scipy.stats.iqr</span> instead.
  - Final removal of the previously-deprecated `annotate` method on <span class="title-ref">JointGrid</span>, along with related parameters.
  - Final removal of the `lvplot` function (the previously-deprecated name for <span class="title-ref">boxenplot</span>).

---

v0.11.1.md

---

# v0.11.1 (December 2020)

This a bug fix release and is a recommended upgrade for all users on v0.11.0.

  - Reduced the use of matplotlib global state in the \[multi-grid classes \<grid\_api\>\](\#multi-grid-classes-\<grid\_api\>) (`2388`).
  - Restored support for using tuples or numeric keys to reference fields in a long-form <span class="title-ref">data</span> object (`2386`).
  - Fixed a bug in <span class="title-ref">lineplot</span> where NAs were propagating into the confidence interval, sometimes erasing it from the plot (`2273`).
  - Fixed a bug in <span class="title-ref">PairGrid</span>/<span class="title-ref">pairplot</span> where diagonal axes would be empty when the grid was not square and the diagonal axes did not contain the marginal plots (`2270`).
  - Fixed a bug in <span class="title-ref">PairGrid</span>/<span class="title-ref">pairplot</span> where off-diagonal plots would not appear when column names in <span class="title-ref">data</span> had non-string type (`2368`).
  - Fixed a bug where categorical dtype information was ignored when data consisted of boolean or boolean-like values (`2379`).
  - Fixed a bug in <span class="title-ref">FacetGrid</span> where interior tick labels would be hidden when only the orthogonal axis was shared (`2347`).
  - Fixed a bug in <span class="title-ref">FacetGrid</span> that caused an error when <span class="title-ref">legend\_out=False</span> was set (`2304`).
  - Fixed a bug in <span class="title-ref">kdeplot</span> where `common_norm=True` was ignored if `hue` was not assigned (`2378`).
  - Fixed a bug in <span class="title-ref">displot</span> where the `row_order` and `col_order` parameters were not used (`2262`).
  - Fixed a bug in <span class="title-ref">PairGrid</span>/<span class="title-ref">pairplot</span> that caused an exception when using <span class="title-ref">corner=True</span> and <span class="title-ref">diag\_kind=None</span> (`2382`).
  - Fixed a bug in <span class="title-ref">clustermap</span> where <span class="title-ref">annot=False</span> was ignored (`2323`).
  - Fixed a bug in <span class="title-ref">clustermap</span> where row/col color annotations could not have a categorical dtype (`2389`).
  - Fixed a bug in <span class="title-ref">boxenplot</span> where the <span class="title-ref">linewidth</span> parameter was ignored (`2287`).
  - Raise a more informative error in <span class="title-ref">PairGrid</span>/<span class="title-ref">pairplot</span> when no variables can be found to define the rows/columns of the grid (`2382`).
  - Raise a more informative error from <span class="title-ref">clustermap</span> if row/col color objects have semantic index but data object does not (`2313`).

---

v0.11.2.md

---

# v0.11.2 (August 2021)

This is a minor release that addresses issues in the v0.11 series and adds a small number of targeted enhancements. It is a recommended upgrade for all users.

  - In <span class="title-ref">lmplot</span>, added a new <span class="title-ref">facet\_kws</span> parameter and deprecated the <span class="title-ref">sharex</span>, <span class="title-ref">sharey</span>, and <span class="title-ref">legend\_out</span> parameters from the function signature; pass them in a <span class="title-ref">facet\_kws</span> dictionary instead (`2576`).
  - Added a <span class="title-ref">move\_legend</span> convenience function for repositioning the legend on an existing axes or figure, along with updating its properties. This function should be preferred over calling <span class="title-ref">ax.legend</span> with no legend data, which does not reliably work across seaborn plot types (`2643`).
  - In <span class="title-ref">histplot</span>, added <span class="title-ref">stat="percent"</span> as an option for normalization such that bar heights sum to 100 and <span class="title-ref">stat="proportion"</span> as an alias for the existing <span class="title-ref">stat="probability"</span> (`2461`, `2634`).
  - Added <span class="title-ref">FacetGrid.refline</span> and <span class="title-ref">JointGrid.refline</span> methods for plotting horizontal and/or vertical reference lines on every subplot in one step (`2620`).
  - In <span class="title-ref">kdeplot</span>, added a <span class="title-ref">warn\_singular</span> parameter to silence the warning about data with zero variance (`2566`).
  - In <span class="title-ref">histplot</span>, improved performance with large datasets and many groupings/facets (`2559`, `2570`).
  - The <span class="title-ref">FacetGrid</span>, <span class="title-ref">PairGrid</span>, and <span class="title-ref">JointGrid</span> objects now reference the underlying matplotlib figure with a <span class="title-ref">.figure</span> attribute. The existing <span class="title-ref">.fig</span> attribute still exists but is discouraged and may eventually be deprecated. The effect is that you can now call <span class="title-ref">obj.figure</span> on the return value from any seaborn function to access the matplotlib object (`2639`).
  - In <span class="title-ref">FacetGrid</span> and functions that use it, visibility of the interior axis labels is now disabled, and exterior axis labels are no longer erased when adding additional layers. This produces the same results for plots made by seaborn functions, but it may produce different (better, in most cases) results for customized facet plots (`2583`).
  - In <span class="title-ref">FacetGrid</span>, <span class="title-ref">PairGrid</span>, and functions that use them, the matplotlib <span class="title-ref">figure.autolayout</span> parameter is disabled to avoid having the legend overlap the plot (`2571`).
  - The <span class="title-ref">load\_dataset</span> helper now produces a more informative error when fed a dataframe, easing a common beginner mistake (`2604`).
  - Improved robustness to missing data, including some additional support for the <span class="title-ref">pd.NA</span> type (`2417`, `2435`).
  - In <span class="title-ref">ecdfplot</span> and <span class="title-ref">rugplot</span>, fixed a bug where results were incorrect if the data axis had a log scale before plotting (`2504`).
  - In <span class="title-ref">histplot</span>, fixed a bug where using <span class="title-ref">shrink</span> with non-discrete bins shifted bar positions inaccurately (`2477`).
  - In <span class="title-ref">displot</span>, fixed a bug where <span class="title-ref">common\_norm=False</span> was ignored when faceting was used without assigning <span class="title-ref">hue</span> (`2468`).
  - In <span class="title-ref">histplot</span>, fixed two bugs where automatically computed edge widths were too thick for log-scaled histograms and for categorical histograms on the y axis (`2522`).
  - In <span class="title-ref">histplot</span> and <span class="title-ref">kdeplot</span>, fixed a bug where the <span class="title-ref">alpha</span> parameter was ignored when <span class="title-ref">fill=False</span> (`2460`).
  - In <span class="title-ref">histplot</span> and <span class="title-ref">kdeplot</span>, fixed a bug where the <span class="title-ref">multiple</span> parameter was ignored when <span class="title-ref">hue</span> was provided as a vector without a name (`2462`).
  - In <span class="title-ref">displot</span>, the default alpha value now adjusts to a provided <span class="title-ref">multiple</span> parameter even when <span class="title-ref">hue</span> is not assigned (`2462`).
  - In <span class="title-ref">displot</span>, fixed a bug that caused faceted 2D histograms to error out with <span class="title-ref">common\_bins=False</span> (`2640`).
  - In <span class="title-ref">rugplot</span>, fixed a bug that prevented the use of datetime data (`2458`).
  - In <span class="title-ref">relplot</span> and <span class="title-ref">displot</span>, fixed a bug where the dataframe attached to the returned <span class="title-ref">FacetGrid</span> object dropped columns that were not used in the plot (`2623`).
  - In <span class="title-ref">relplot</span>, fixed an error that would be raised when one of the column names in the dataframe shared a name with one of the plot variables (`2581`).
  - In the relational plots, fixed a bug where legend entries for the <span class="title-ref">size</span> semantic were incorrect when <span class="title-ref">size\_norm</span> extrapolated beyond the range of the data (`2580`).
  - In <span class="title-ref">lmplot</span> and <span class="title-ref">regplot</span>, fixed a bug where the x axis was clamped to the data limits with <span class="title-ref">truncate=True</span> (`2576`).
  - In <span class="title-ref">lmplot</span>, fixed a bug where <span class="title-ref">sharey=False</span> did not always work as expected (`2576`).
  - In <span class="title-ref">heatmap</span>, fixed a bug where vertically-rotated y-axis tick labels would be misaligned with their rows (`2574`).
  - Fixed an issue that prevented Python from running in <span class="title-ref">-OO</span> mode while using seaborn (`2473`).
  - Improved the API documentation for theme-related functions (`2573`).
  - Added docstring pages for all methods on documented classes (`2644`).

---

v0.12.0.md

---

# v0.12.0 (September 2022)

## Introduction of the objects interface

This release debuts the <span class="title-ref">seaborn.objects</span> interface, an entirely new approach to making plots with seaborn. It is the product of several years of design and 16 months of implementation work. The interface aims to provide a more declarative, composable, and extensible API for making statistical graphics. It is inspired by Wilkinson's grammar of graphics, offering a Pythonic API that is informed by the design of libraries such as <span class="title-ref">ggplot2</span> and <span class="title-ref">vega-lite</span> along with lessons from the past 10 years of seaborn's development.

For more information and numerous examples, see the \[tutorial chapter \</tutorial/objects\_interface\>\](tutorial chapter \</tutorial/objects\_interface\>.md) and \[API reference \<objects\_api\>\](\#api-reference-\<objects\_api\>)

This initial release should be considered "experimental". While it is stable enough for serious use, there are definitely some rough edges, and some key features remain to be implemented. It is possible that breaking changes may occur over the next few minor releases. Please be patient with any limitations that you encounter and help the development by reporting issues when you find behavior surprising.

## Keyword-only arguments

Seaborn's plotting functions now require explicit keywords for most arguments, following the deprecation of positional arguments in v0.11.0. With this enforcement, most functions have also had their parameter lists rearranged so that <span class="title-ref">data</span> is the first and only positional argument. This adds consistency across the various functions in the library. It also means that calling <span class="title-ref">func(data)</span> will do something for nearly all functions (those that support wide-form data) and that <span class="title-ref">pandas.DataFrame</span> can be piped directly into a plot. It is possible that the signatures will be loosened a bit in future releases so that <span class="title-ref">x</span> and <span class="title-ref">y</span> can be positional, but minimal support for positional arguments after this change will reduce the chance of inadvertent mis-specification (`2804`).

## Modernization of categorical scatterplots

This release begins the process of modernizing the \[categorical plots \<categorical\_api\>\](\#categorical-plots-\<categorical\_api\>), beginning with <span class="title-ref">stripplot</span> and <span class="title-ref">swarmplot</span>. These functions are sporting some enhancements that alleviate a few long-running frustrations (`2413`, `2447`):

  - The new <span class="title-ref">native\_scale</span> parameter allows numeric or datetime categories to be plotted with their original scale rather than converted to strings and plotted at fixed intervals.
  - The new <span class="title-ref">formatter</span> parameter allows more control over the string representation of values on the categorical axis. There should also be improved defaults for some types, such as dates.
  - It is now possible to assign <span class="title-ref">hue</span> when using only one coordinate variable (i.e. only <span class="title-ref">x</span> or <span class="title-ref">y</span>).
  - It is now possible to disable the legend.

The updates also harmonize behavior with functions that have been more recently introduced. This should be relatively non-disruptive, although a few defaults will change:

  - The functions now hook into matplotlib's unit system for plotting categorical data. (Seaborn's categorical functions actually predate support for categorical data in matplotlib.) This should mostly be transparent to the user, but it may resolve a few edge cases. For example, matplotlib interactivity should work better (e.g., for showing the data value under the cursor).
  - A color palette is no longer applied to levels of the categorical variable by default. It is now necessary to explicitly assign <span class="title-ref">hue</span> to see multiple colors (i.e., assign the same variable to <span class="title-ref">x</span>/<span class="title-ref">y</span> and <span class="title-ref">hue</span>). Passing <span class="title-ref">palette</span> without <span class="title-ref">hue</span> will continue to be honored for one release cycle.
  - Numeric <span class="title-ref">hue</span> variables now receive a continuous mapping by default, using the same rules as <span class="title-ref">scatterplot</span>. Pass <span class="title-ref">palette="deep"</span> to reproduce previous defaults.
  - The plots now follow the default property cycle; i.e. calling an axes-level function multiple times with the same active axes will produce different-colored artists.
  - Currently, assigning <span class="title-ref">hue</span> and then passing a <span class="title-ref">color</span> will produce a gradient palette. This is now deprecated, as it is easy to request a gradient with, e.g. <span class="title-ref">palette="light:blue"</span>.

Similar enhancements / updates should be expected to roll out to other categorical plotting functions in future releases. There are also several function-specific enhancements:

  - In <span class="title-ref">stripplot</span>, a "strip" with a single observation will be plotted without jitter (`2413`)
  - In <span class="title-ref">swarmplot</span>, the points are now swarmed at draw time, meaning that the plot will adapt to further changes in axis scaling or tweaks to the plot layout (`2443`).
  - In <span class="title-ref">swarmplot</span>, the proportion of points that must overlap before issuing a warning can now be controlled with the <span class="title-ref">warn\_thresh</span> parameter (`2447`).
  - In <span class="title-ref">swarmplot</span>, the order of the points in each swarm now matches the order in the original dataset; previously they were sorted. This affects only the underlying data stored in the matplotlib artist, not the visual representation (`2443`).

## More flexible errorbars

Increased the flexibility of what can be shown by the internally-calculated errorbars for <span class="title-ref">lineplot</span>, <span class="title-ref">barplot</span>, and <span class="title-ref">pointplot</span>.

With the new <span class="title-ref">errorbar</span> parameter, it is now possible to select bootstrap confidence intervals, percentile / predictive intervals, or intervals formed by scaled standard deviations or standard errors. The parameter also accepts an arbitrary function that maps from a vector to an interval. There is a new \[user guide chapter \</tutorial/error\_bars\>\](user guide chapter \</tutorial/error\_bars\>.md) demonstrating these options and explaining when you might want to use each one.

As a consequence of this change, the <span class="title-ref">ci</span> parameter has been deprecated. Note that <span class="title-ref">regplot</span> retains the previous API, but it will likely be updated in a future release (`2407`, `2866`).

## Other updates

  - It is now possible to aggregate / sort a <span class="title-ref">lineplot</span> along the y axis using <span class="title-ref">orient="y"</span> (`2854`).
  - Made it easier to customize <span class="title-ref">FacetGrid</span> / <span class="title-ref">PairGrid</span> / <span class="title-ref">JointGrid</span> with a fluent (method-chained) style by adding <span class="title-ref">apply</span>/ <span class="title-ref">pipe</span> methods. Additionally, fixed the <span class="title-ref">tight\_layout</span> and <span class="title-ref">refline</span> methods so that they return <span class="title-ref">self</span> (`2926`).
  - Added <span class="title-ref">FacetGrid.tick\_params</span> and <span class="title-ref">PairGrid.tick\_params</span> to customize the appearance of the ticks, tick labels, and gridlines of all subplots at once (`2944`).
  - Added a <span class="title-ref">width</span> parameter to <span class="title-ref">barplot</span> (`2860`).
  - It is now possible to specify <span class="title-ref">estimator</span> as a string in <span class="title-ref">barplot</span> and <span class="title-ref">pointplot</span>, in addition to a callable (`2866`).
  - Error bars in <span class="title-ref">regplot</span> now inherit the alpha value of the points they correspond to (`2540`).
  - When using <span class="title-ref">pairplot</span> with <span class="title-ref">corner=True</span> and <span class="title-ref">diag\_kind=None</span>, the top left y axis label is no longer hidden (`2850`).
  - It is now possible to plot a discrete <span class="title-ref">histplot</span> as a step function or polygon (`2859`).
  - It is now possible to customize the appearance of elements in a <span class="title-ref">boxenplot</span> with <span class="title-ref">box\_kws</span>/<span class="title-ref">line\_kws</span>/<span class="title-ref">flier\_kws</span> (`2909`).
  - Improved integration with the matplotlib color cycle in most axes-level functions (`2449`).
  - Fixed a regression in 0.11.2 that caused some functions to stall indefinitely or raise when the input data had a duplicate index (`2776`).
  - Fixed a bug in <span class="title-ref">histplot</span> and <span class="title-ref">kdeplot</span> where weights were not factored into the normalization (`2812`).
  - Fixed two edgecases in <span class="title-ref">histplot</span> when only <span class="title-ref">binwidth</span> was provided (`2813`).
  - Fixed a bug in <span class="title-ref">violinplot</span> where inner boxes/points could be missing with unpaired split violins (`2814`).
  - Fixed a bug in <span class="title-ref">PairGrid</span> where an error would be raised when defining <span class="title-ref">hue</span> only in the mapping methods (`2847`).
  - Fixed a bug in <span class="title-ref">scatterplot</span> where an error would be raised when <span class="title-ref">hue\_order</span> was a subset of the hue levels (`2848`).
  - Fixed a bug in <span class="title-ref">histplot</span> where dodged bars would have different widths on a log scale (`2849`).
  - In <span class="title-ref">lineplot</span>, allowed the <span class="title-ref">dashes</span> keyword to set the style of a line without mapping a <span class="title-ref">style</span> variable (`2449`).
  - Improved support in <span class="title-ref">relplot</span> for "wide" data and for faceting variables passed as non-pandas objects (`2846`).
  - Subplot titles will no longer be reset when calling <span class="title-ref">FacetGrid.map</span> or <span class="title-ref">FacetGrid.map\_dataframe</span> (`2705`).
  - Added a workaround for a matplotlib issue that caused figure-level functions to freeze when <span class="title-ref">plt.show</span> was called (`2925`).
  - Improved robustness to numerical errors in <span class="title-ref">kdeplot</span> (`2862`).
  - Fixed a bug where <span class="title-ref">rugplot</span> was ignoring expand\_margins=False (`2953`).
  - The <span class="title-ref">patch.facecolor</span> rc param is no longer set by <span class="title-ref">set\_palette</span> (or <span class="title-ref">set\_theme</span>). This should have no general effect, because the matplotlib default is now <span class="title-ref">"C0"</span> (`2906`).
  - Made <span class="title-ref">scipy</span> an optional dependency and added <span class="title-ref">pip install seaborn\[stats\]</span> as a method for ensuring the availability of compatible <span class="title-ref">scipy</span> and <span class="title-ref">statsmodels</span> libraries at install time. This has a few minor implications for existing code, which are explained in the Github pull request (`2398`).
  - Example datasets are now stored in an OS-specific cache location (as determined by <span class="title-ref">appdirs</span>) rather than in the user's home directory. Users should feel free to remove <span class="title-ref">\~/seaborn-data</span> if desired (`2773`).
  - The unit test suite is no longer part of the source or wheel distribution. Seaborn has never had a runtime API for exercising the tests, so this should not have workflow implications (`2833`).
  - Following [NEP29](https://numpy.org/neps/nep-0029-deprecation_policy.html), dropped support for Python 3.6 and bumped the minimally-supported versions of the library dependencies.
  - Removed the previously-deprecated <span class="title-ref">factorplot</span> along with several previously-deprecated utility functions (<span class="title-ref">iqr</span>, <span class="title-ref">percentiles</span>, <span class="title-ref">pmf\_hist</span>, and <span class="title-ref">sort\_df</span>).
  - Removed the (previously-unused) option to pass additional keyword arguments to <span class="title-ref">pointplot</span>.

---

v0.12.1.md

---

# v0.12.1 (October 2022)

This is an incremental release that is a recommended upgrade for all users. It addresses a handful of bugs / regressions in v0.12.0 and adds several features and enhancements to the new \[objects interface \</tutorial/objects\_interface\>\](objects interface \</tutorial/objects\_interface\>.md).

  - Added the <span class="title-ref">objects.Text</span> mark (`3051`).
  - Added the <span class="title-ref">objects.Dash</span> mark (`3074`).
  - Added the <span class="title-ref">objects.Perc</span> stat (`3063`).
  - Added the <span class="title-ref">objects.Count</span> stat (`3086`).
  - The <span class="title-ref">objects.Band</span> and <span class="title-ref">objects.Range</span> marks will now cover the full extent of the data if <span class="title-ref">min</span> / <span class="title-ref">max</span> variables are not explicitly assigned or added in a transform (`3056`).
  - The <span class="title-ref">objects.Jitter</span> move now applies a small amount of jitter by default (`3066`).
  - Axes with a <span class="title-ref">objects.Nominal</span> scale now appear like categorical axes in classic seaborn, with fixed margins, no grid, and an inverted y axis (`3069`).
  - The <span class="title-ref">objects.Continuous.label</span> method now accepts <span class="title-ref">base=None</span> to override the default formatter with a log transform (`3087`).
  - Marks that sort along the orient axis (e.g. <span class="title-ref">objects.Line</span>) now use a stable algorithm (`3064`).
  - Added a <span class="title-ref">label</span> parameter to <span class="title-ref">pointplot</span>, which addresses a regression in 0.12.0 when <span class="title-ref">pointplot</span> is passed to <span class="title-ref">FacetGrid</span> (`3016`).
  - Fixed a bug that caused an exception when more than two layers with the same mappings were added to <span class="title-ref">objects.Plot</span> (`3055`).
  - Made <span class="title-ref">objects.PolyFit</span> robust to missing data (`3010`).
  - Fixed a bug in <span class="title-ref">objects.Plot</span> that occurred when data assigned to the orient coordinate had zero variance (`3084`).
  - Fixed a regression in <span class="title-ref">kdeplot</span> where passing <span class="title-ref">cmap</span> for an unfilled bivariate plot would raise an exception (`3065`).
  - Addressed a performance regression in <span class="title-ref">lineplot</span> with a large number of unique x values (`3081`).
  - Seaborn no longer contains doctest-style examples, simplifying the testing infrastructure (`3034`).

---

v0.12.2.md

---

# v0.12.2 (December 2022)

This is an incremental release that is a recommended upgrade for all users. It is very likely the final release of the 0.12 series and the last version to support Python 3.7.

  - Added the <span class="title-ref">objects.KDE</span> stat (`3111`).
  - Added the <span class="title-ref">objects.Boolean</span> scale (`3205`).
  - Improved user feedback for failures during plot compilation by catching exceptions and re-raising with a <span class="title-ref">PlotSpecError</span> that provides additional context. (`3203`).
  - Improved calculation of automatic mark widths with unshared facet axes (`3119`).
  - Improved robustness to empty data in several components of the objects interface (`3202`).
  - Fixed a bug where legends for numeric variables with large values would be incorrectly shown (i.e. with a missing offset or exponent; `3187`).
  - Fixed a regression in v0.12.0 where manually-added labels could have duplicate legend entries (`3116`).
  - Fixed a bug in <span class="title-ref">histplot</span> with <span class="title-ref">kde=True</span> and <span class="title-ref">log\_scale=True</span> where the curve was not scaled properly (`3173`).
  - Fixed a bug in <span class="title-ref">relplot</span> where inner axis labels would be shown when axis sharing was disabled (`3180`).
  - Fixed a bug in <span class="title-ref">objects.Continuous</span> to avoid an exception with boolean data (`3189`).

---

v0.13.0.md

---

# v0.13.0 (September 2023)

This is a major release with a number of important new features and changes. The highlight is a major overhaul to seaborn's categorical plotting functions, providing them with many new capabilities and better aligning their API with the rest of the library. There is also provisional support for alternate dataframe libraries like [polars](https://www.pola.rs), a new theme and display configuration system for <span class="title-ref">objects.Plot</span>, and many smaller bugfixes and enhancements.

Updating is recommended, but users are encouraged to carefully check the outputs of existing code that uses the categorical functions, and they should be aware of some deprecations and intentional changes to the default appearance of the resulting plots (see notes below with and tags).

## Major enhancements to categorical plots

Seaborn's \[categorical functions \<categorical\_api\>\](\#categorical-functions-\<categorical\_api\>) have been completely rewritten for this release. This provided the opportunity to address some longstanding quirks as well as to add a number of smaller but much-desired features and enhancements.

### Support for numeric and datetime data

The categorical functions have historically treated *all* data as categorical, even when it has a numeric or datetime type. This can now be controlled with the new <span class="title-ref">native\_scale</span> parameter. The default remains <span class="title-ref">False</span> to preserve existing behavior. But with <span class="title-ref">native\_scale=True</span>, values will be treated as they would by other seaborn or matplotlib functions. Element widths will be derived from the minimum distance between two unique values on the categorical axis.

Additionally, while seaborn previously determined the mapping from categorical values to ordinal positions internally, this is now delegated to matplotlib. The change should mostly be transparent to the user, but categorical plots (even with <span class="title-ref">native\_scale=False</span>) will better align with artists added by other seaborn or matplotlib functions in most cases, and matplotlib's interactive machinery will work better.

### Changes to color defaults and specification

The categorical functions now act more like the rest of seaborn in that they will produce a plot with a single main color unless the <span class="title-ref">hue</span> variable is assigned. Previously, there would be an implicit redundant color mapping (e.g., each box in a boxplot would get a separate color from the default palette). To retain the previous behavior, explicitly assign a redundant <span class="title-ref">hue</span> variable (e.g., <span class="title-ref">boxplot(data, x="x", y="y", hue="x")</span>).

Two related idiosyncratic color specifications are deprecated, but they will continue to work (with a warning) for one release cycle:

  - Passing a <span class="title-ref">palette</span> without explicitly assigning <span class="title-ref">hue</span> is no longer supported (add an explicitly redundant <span class="title-ref">hue</span> assignment instead).
  - Passing a <span class="title-ref">color</span> while assigning <span class="title-ref">hue</span> to produce a gradient is no longer supported (use <span class="title-ref">palette="dark:{color}"</span> or <span class="title-ref">palette="light:{color}"</span> instead).

Finally, like other seaborn functions, the default palette now depends on the variable type, and a sequential palette will be used with numeric data. To retain the previous behavior, pass the name of a qualitative palette (e.g., <span class="title-ref">palette="deep"</span> for seaborn's default). Accordingly, the functions have gained a parameter to control numeric color mappings (<span class="title-ref">hue\_norm</span>).

### Other features, enhancements, and changes

The following updates apply to multiple categorical functions.

  - All functions now accept a <span class="title-ref">legend</span> parameter, which can be a boolean (to suppress the legend) or one of <span class="title-ref">{"auto", "brief", "full"}</span> to control the amount of information shown in the legend for a numerical color mapping.
  - All functions now accept a callable <span class="title-ref">formatter</span> parameter to control the string representation of the data.
  - All functions that draw a solid patch now accept a boolean <span class="title-ref">fill</span> parameter, which when set to <span class="title-ref">False</span> will draw line-art elements.
  - All functions that support dodging now have an additional <span class="title-ref">gap</span> parameter that can be set to a non-zero value to leave space between dodged elements.
  - The <span class="title-ref">boxplot</span>, <span class="title-ref">boxenplot</span>, and <span class="title-ref">violinplot</span> functions now support a single <span class="title-ref">linecolor</span> parameter.
  - The default value for <span class="title-ref">dodge</span> has changed from <span class="title-ref">True</span> to <span class="title-ref">"auto"</span>. With <span class="title-ref">"auto"</span>, elements will dodge only when at least one set of elements would otherwise overlap.
  - When the value axis of the plot has a non-linear scale, the statistical operations (e.g. an aggregation in <span class="title-ref">pointplot</span> or the kernel density fit in <span class="title-ref">violinplot</span>) are now applied in that scale space.
  - All functions now accept a <span class="title-ref">log\_scale</span> parameter. With a single argument, this will set the scale on the "value" axis (*opposite* the categorical axis). A tuple will set each axis directly (although setting a log scale categorical axis also requires <span class="title-ref">native\_scale=True</span>).
  - The <span class="title-ref">orient</span> parameter now accepts <span class="title-ref">"x"/"y"</span> to specify the categorical axis, matching the objects interface.
  - The categorical functions are generally more deferential to the user's additional matplotlib keyword arguments.
  - Using <span class="title-ref">"gray"</span> to select an automatic gray value that complements the main palette is now deprecated in favor of <span class="title-ref">"auto"</span>.

The following updates are function-specific.

  - In <span class="title-ref">pointplot</span>, a single <span class="title-ref">matplotlib.lines.Line2D</span> artist is now used rather than adding separate <span class="title-ref">matplotlib.collections.PathCollection</span> artist for the points. As a result, it is now possible to pass additional keyword arguments for complete customization the appearance of both the lines and markers; additionally, the legend representation is improved. Accordingly, parameters that previously allowed only partial customization (<span class="title-ref">scale</span>, <span class="title-ref">join</span>, and <span class="title-ref">errwidth</span>) are now deprecated. The old parameters will now trigger detailed warning messages with instructions for adapting existing code.
  - The bandwidth specification in <span class="title-ref">violinplot</span> better aligns with <span class="title-ref">kdeplot</span>, as the <span class="title-ref">bw</span> parameter is now deprecated in favor of <span class="title-ref">bw\_method</span> and <span class="title-ref">bw\_adjust</span>.
  - In <span class="title-ref">boxenplot</span>, the boxen are now drawn with separate patch artists in each tail. This may have consequences for code that works with the underlying artists, but it produces a better result for low-alpha / unfilled plots and enables proper area/density scaling.
  - In <span class="title-ref">barplot</span>, the <span class="title-ref">errcolor</span> and <span class="title-ref">errwidth</span> parameters are now deprecated in favor of a more general <span class="title-ref">err\_kws</span>\` dictionary. The existing parameters will continue to work for two releases.
  - In <span class="title-ref">violinplot</span>, the <span class="title-ref">scale</span> and <span class="title-ref">scale\_hue</span> parameters have been renamed to <span class="title-ref">density\_norm</span> and <span class="title-ref">common\_norm</span> for clarity and to reflect the fact that common normalization is now applied over both hue and faceting variables in <span class="title-ref">catplot</span>.
  - In <span class="title-ref">boxenplot</span>, the <span class="title-ref">scale</span> parameter has been renamed to <span class="title-ref">width\_method</span> as part of a broader effort to de-confound the meaning of "scale" in seaborn parameters.
  - When passing a vector to the <span class="title-ref">data</span> parameter of <span class="title-ref">barplot</span> or <span class="title-ref">pointplot</span>, a bar or point will be drawn for each entry in the vector rather than plotting a single aggregated value. To retain the previous behavior, assign the vector to the <span class="title-ref">y</span> variable.
  - In <span class="title-ref">boxplot</span>, the default flier marker now follows the matplotlib rcparams so that it can be globally customized.
  - When using <span class="title-ref">split=True</span> and <span class="title-ref">inner="box"</span> in <span class="title-ref">violinplot</span>, a separate mini-box is now drawn for each split violin.
  - In <span class="title-ref">boxenplot</span>, all plots now use a consistent luminance ramp for the different box levels. This leads to a change in the appearance of existing plots, but reduces the chances of a misleading result.
  - The <span class="title-ref">"area"</span> scaling in <span class="title-ref">boxenplot</span> now approximates the density of the underlying observations, including for asymmetric distributions. This produces a substantial change in the appearance of plots with <span class="title-ref">width\_method="area"</span>, although the existing behavior was poorly defined.
  - In <span class="title-ref">countplot</span>, the new <span class="title-ref">stat</span> parameter can be used to apply a normalization (e.g to show a <span class="title-ref">"percent"</span> or <span class="title-ref">"proportion"</span>).
  - The <span class="title-ref">split</span> parameter in <span class="title-ref">violinplot</span> is now more general and can be set to <span class="title-ref">True</span> regardless of the number of <span class="title-ref">hue</span> variable levels (or even without <span class="title-ref">hue</span>). This is probably most useful for showing half violins.
  - In <span class="title-ref">violinplot</span>, the new <span class="title-ref">inner\_kws</span> parameter allows additional control over the interior artists.
  - It is no longer required to use a <span class="title-ref">DataFrame</span> in <span class="title-ref">catplot</span>, as data vectors can now be passed directly.
  - In <span class="title-ref">boxplot</span>, the artists that comprise each box plot are now packaged in a <span class="title-ref">BoxPlotContainer</span> for easier post-plotting access.

## Support for alternate dataframe libraries

  - Nearly all functions / objects now use the [dataframe exchange protocol](https://data-apis.org/dataframe-protocol/latest/index.html) to accept <span class="title-ref">DataFrame</span> objects from libraries other than <span class="title-ref">pandas</span> (e.g. <span class="title-ref">polars</span>). Note that seaborn will still convert the data object to pandas internally, but this feature will simplify code for users of other dataframe libraries (`3369`).

## Improved configuration for the objects interface

  - Added control over the default theme to <span class="title-ref">objects.Plot</span> (`3223`)
  - Added control over the default notebook display to <span class="title-ref">objects.Plot</span> (`3225`).
  - Added the concept of a "layer legend" in <span class="title-ref">objects.Plot</span> via the new <span class="title-ref">label</span> parameter in <span class="title-ref">objects.Plot.add</span> (`3456`).
  - In <span class="title-ref">objects.Plot.scale</span>, <span class="title-ref">objects.Plot.limit</span>, and <span class="title-ref">objects.Plot.label</span> the <span class="title-ref">x</span> / <span class="title-ref">y</span> parameters can be used to set a common scale / limit / label for paired subplots (`3458`).

## Other updates

  - Improved the legend display for relational and categorical functions to better represent the user's additional keyword arguments (`3467`).
  - In <span class="title-ref">ecdfplot</span>, <span class="title-ref">stat="percent"</span> is now a valid option (`3336`).
  - Data values outside the scale transform domain (e.g. non-positive values with a log scale) are now dropped prior to any statistical operations (`3488`).
  - In <span class="title-ref">histplot</span>, infinite values are now ignored when choosing the default bin range (`3488`).
  - There is now generalized support for performing statistics in the appropriate space based on axes scales; previously support for this was spotty and at best worked only for log scales (`3440`).
  - Updated <span class="title-ref">load\_dataset</span> to use an approach more compatible with <span class="title-ref">pyiodide</span> (`3234`).
  - Support for array-typed palettes is now deprecated. This was not previously documented as supported, but it worked by accident in a few places (`3452`).
  - In <span class="title-ref">histplot</span>, treatment of the <span class="title-ref">binwidth</span> parameter has changed such that the actual bin width will be only approximately equal to the requested width when that value does not evenly divide the bin range. This fixes an issue where the largest data value was sometimes dropped due to floating point error (`3489`).
  - Fixed <span class="title-ref">objects.Bar</span> and <span class="title-ref">objects.Bars</span> widths when using a nonlinear scale (`3217`).
  - Worked around an issue in matplotlib that caused incorrect results in <span class="title-ref">move\_legend</span> when <span class="title-ref">labels</span> were provided (`3454`).
  - Fixed a bug introduced in v0.12.0 where <span class="title-ref">histplot</span> added a stray empty <span class="title-ref">BarContainer</span> (`3246`).
  - Fixed a bug where <span class="title-ref">objects.Plot.on</span> would override a figure's layout engine (`3216`).
  - Fixed a bug introduced in v0.12.0 where <span class="title-ref">lineplot</span> with a list of tuples for the keyword argument dashes caused a TypeError (`3316`).
  - Fixed a bug in <span class="title-ref">PairGrid</span> that caused an exception when the input dataframe had a column multiindex (`3407`).
  - Improved a few edge cases when using pandas nullable dtypes (`3394`).

---

v0.13.1.md

---

# v0.13.1 (December 2023)

This is a minor release with some bug fixes and a couple new features. All users are encouraged to update.

  - Added support for weighted mean estimation (with boostrap CIs) in <span class="title-ref">lineplot</span>, <span class="title-ref">barplot</span>, <span class="title-ref">pointplot</span>, and <span class="title-ref">objects.Est</span> (`3580`, `3586`).
  - Added the <span class="title-ref">extent</span> option to <span class="title-ref">objects.Plot.layout</span> (`3552`).
  - Fixed a regression in v0.13.0 that triggered an exception when working with non-numpy data types (`3516`).
  - Fixed a bug in <span class="title-ref">objects.Plot</span> so that tick labels are shown for wrapped axes that aren't in the bottom-most row (`3600`).
  - Fixed a bug in <span class="title-ref">catplot</span> where a blank legend would be added when <span class="title-ref">hue</span> was redundantly assigned (`3540`).
  - Fixed a bug in <span class="title-ref">catplot</span> where the <span class="title-ref">edgecolor</span> parameter was ignored with <span class="title-ref">kind="bar"</span> (`3547`).
  - Fixed a bug in <span class="title-ref">boxplot</span> where an exception was raised when using the matplotlib <span class="title-ref">bootstrap</span> option (`3562`).
  - Fixed a bug in <span class="title-ref">lineplot</span> where an exception was raised when <span class="title-ref">hue</span> was assigned with an empty dataframe (`3569`).
  - Fixed a bug in multiple categorical plots that raised with <span class="title-ref">hue=None</span> and <span class="title-ref">dodge=True</span>; this is now has no effect (`3605`).

---

v0.13.2.md

---

# v0.13.2 (January 2024)

This is a minor release containing internal changes that adapt to upcoming deprecations in pandas. All users are encouraged to update.

---

v0.2.0.md

---

# v0.2.0 (December 2013)

This is a major release from 0.1 with a number of API changes, enhancements, and bug fixes.

Highlights include an overhaul of timeseries plotting to work intelligently with dataframes, the new function `interactplot()` for visualizing continuous interactions, bivariate kernel density estimates in `kdeplot()`, and significant improvements to color palette handling.

Version 0.2 also introduces experimental support for Python 3.

In addition to the library enhancements, the documentation has been substantially rewritten to reflect the new features and improve the presentation of the ideas behind the package.

## API changes

  - The `tsplot()` function was rewritten to accept data in a long-form `DataFrame` and to plot different traces by condition. This introduced a relatively minor but unavoidable API change, where instead of doing `sns.tsplot(time, heights)`, you now must do `sns.tsplot(heights, time=time)` (the `time` parameter is now optional, for quicker specification of simple plots). Additionally, the `"obs_traces"` and `"obs_points"` error styles in `tsplot()` have been renamed to `"unit_traces"` and `"unit_points"`, respectively.
  - Functions that fit kernel density estimates (`kdeplot()` and `violinplot()`) now use `statsmodels` instead of `scipy`, and the parameters that influence the density estimate have changed accordingly. This allows for increased flexibility in specifying the bandwidth and kernel, and smarter choices for defining the range of the support. Default options should produce plots that are very close to the old defaults.
  - The `kdeplot()` function now takes a second positional argument of data for drawing bivariate densities.
  - The `violin()` function has been changed to `violinplot()`, for consistency. In 0.2, `violin` will still work, but it will fire a `UserWarning`.

## New plotting functions

  - The `interactplot()` function draws a contour plot for an interactive linear model (i.e., the contour shows `y-hat` from the model `y ~ x1 * x2`) over a scatterplot between the two predictor variables. This plot should aid the understanding of an interaction between two continuous variables.
  - The `kdeplot()` function can now draw a bivariate density estimate as a contour plot if provided with two-dimensional input data.
  - The `palplot()` function provides a simple grid-based visualization of a color palette.

## Other changes

### Plotting functions

  - The `corrplot()` function can be drawn without the correlation coefficient annotation and with variable names on the side of the plot to work with large datasets.
  - Additionally, `corrplot()` sets the color palette intelligently based on the direction of the specified test.
  - The `distplot()` histogram uses a reference rule to choose the bin size if it is not provided.
  - Added the `x_bins` option in `lmplot()` for binning a continuous predictor variable, allowing for clearer trends with many datapoints.
  - Enhanced support for labeling plot elements and axes based on `name` attributes in several distribution plot functions and `tsplot()` for smarter Pandas integration.
  - Scatter points in `lmplot()` are slightly transparent so it is easy to see where observations overlap.
  - Added the `order` parameter to `boxplot()` and `violinplot()` to control the order of the bins when using a Pandas object.
  - When an `ax` argument is not provided to a plotting function, it grabs the currently active axis instead of drawing a new one.

### Color palettes

  - Added the `dark_palette()` and `blend_palette()` for on-the-fly creation of blended color palettes.
  - The color palette machinery is now intelligent about qualitative ColorBrewer palettes (`Set1`, `Paired`, etc.), which are properly treated as discrete.
  - Seaborn color palettes (`deep`, `muted`, etc.) have been standardized in terms of basic hue sequence, and all palettes now have 6 colors.
  - Introduced `{mpl_palette}_d` palettes, which make a palette with the basic color scheme of the source palette, but with a sequential blend from dark instead of light colors for use with line/scatter/contour plots.
  - Added the `palette_context()` function for blockwise color palettes controlled by a `with` statement.

### Plot styling

  - Added the `despine()` function for easily removing plot spines.
  - A new plot style, `"ticks"` has been added.
  - Tick labels are padded a bit farther from the axis in all styles, avoiding collisions at (0, 0).

### General package issues

  - Reorganized the package by breaking up the monolithic `plotobjs` module into smaller modules grouped by general objective of the constituent plots.
  - Removed the `scikits-learn` dependency in `moss`.
  - Installing with `pip` should automatically install most missing dependencies.
  - The example notebooks are now used as an automated test suite.

## Bug fixes

  - Fixed a bug where labels did not match data for `boxplot()` and `violinplot()` when using a groupby.
  - Fixed a bug in the `desaturate()` function.
  - Fixed a bug in the `coefplot()` figure size calculation.
  - Fixed a bug where `regplot()` choked on list input.
  - Fixed buggy behavior when drawing horizontal boxplots.
  - Specifying bins for the `distplot()` histogram now works.
  - Fixed a bug where `kdeplot()` would reset the axis height and cut off existing data.
  - All axis styling has been moved out of the top-level `seaborn.set()` function, so context or color palette can be cleanly changed.

---

v0.2.1.md

---

# v0.2.1 (December 2013)

This is a bugfix release, with no new features.

## Bug fixes

  - Changed the mechanics of `violinplot()` and `boxplot()` when using a `Series` object as data and performing a `groupby` to assign data to bins to address a problem that arises in Pandas 0.13.
  - Additionally fixed the `groupby` code to work with all styles of group specification (specifically, using a dictionary or a function now works).
  - Fixed a bug where artifacts from the kde fitting could undershoot and create a plot where the density axis starts below 0.
  - Ensured that data used for kde fitting is double-typed to avoid a low-level statsmodels error.
  - Changed the implementation of the histogram bin-width reference rule to take a ceiling of the estimated number of bins.

---

v0.3.0.md

---

# v0.3.0 (March 2014)

This is a major release from 0.2 with a number of enhancements to the plotting capabilities and styles. Highlights include <span class="title-ref">FacetGrid</span>, `factorplot`, <span class="title-ref">jointplot</span>, and an overhaul to \[style management \<aesthetics\_tutorial\>\](\#style-management-\<aesthetics\_tutorial\>). There is also lots of new documentation, including an \[example gallery \<example\_gallery\>\](\#example-gallery-\<example\_gallery\>) and reorganized \[tutorial \<tutorial\>\](\#tutorial-\<tutorial\>).

## New plotting functions

  - The <span class="title-ref">FacetGrid</span> class adds a new form of functionality to seaborn, providing a way to abstractly structure a grid of plots corresponding to subsets of a dataset. It can be used with a wide variety of plotting functions (including most of the matplotlib and seaborn APIs. See the \[tutorial \<facet\_grid\>\](\#tutorial-\<facet\_grid\>) for more information.
  - Version 0.3 introduces the `factorplot` function, which is similar in spirit to <span class="title-ref">lmplot</span> but intended for use when the main independent variable is categorical instead of quantitative. `factorplot` can draw a plot in either a point or bar representation using the corresponding Axes-level functions <span class="title-ref">pointplot</span> and <span class="title-ref">barplot</span> (which are also new). Additionally, the `factorplot` function can be used to draw box plots on a faceted grid. For examples of how to use these functions, you can refer to the tutorial.
  - Another new function is <span class="title-ref">jointplot</span>, which is built using the new <span class="title-ref">JointGrid</span> object. <span class="title-ref">jointplot</span> generalizes the behavior of <span class="title-ref">regplot</span> in previous versions of seaborn (<span class="title-ref">regplot</span> has changed somewhat in 0.3; see below for details) by drawing a bivariate plot of the relationship between two variables with their marginal distributions drawn on the side of the plot. With <span class="title-ref">jointplot</span>, you can draw a scatterplot or regression plot as before, but you can now also draw bivariate kernel densities or hexbin plots with appropriate univariate graphs for the marginal distributions. Additionally, it's easy to use <span class="title-ref">JointGrid</span> directly to build up more complex plots when the default methods offered by <span class="title-ref">jointplot</span> are not suitable for your visualization problem. The tutorial for <span class="title-ref">JointGrid</span> has more examples of how this object can be useful.
  - The <span class="title-ref">residplot</span> function complements <span class="title-ref">regplot</span> and can be quickly used to diagnose problems with a linear model by calculating and plotting the residuals of a simple regression. There is also a `"resid"` kind for <span class="title-ref">jointplot</span>.

## API changes

  - The most noticeable change will be that <span class="title-ref">regplot</span> no longer produces a multi-component plot with distributions in marginal axes. Instead. <span class="title-ref">regplot</span> is now an "Axes-level" function that can be plotted into any existing figure on a specific set of axes. <span class="title-ref">regplot</span> and <span class="title-ref">lmplot</span> have also been unified (the latter uses the former behind the scenes), so all options for how to fit and represent the regression model can be used for both functions. To get the old behavior of <span class="title-ref">regplot</span>, use <span class="title-ref">jointplot</span> with `kind="reg"`.
  - As noted above, <span class="title-ref">lmplot</span> has been rewritten to exploit the <span class="title-ref">FacetGrid</span> machinery. This involves a few changes. The `color` keyword argument has been replaced with `hue`, for better consistency across the package. The `hue` parameter will always take a variable *name*, while `color` will take a color name or (in some cases) a palette. The <span class="title-ref">lmplot</span> function now returns the <span class="title-ref">FacetGrid</span> used to draw the plot instance.
  - The functions that interact with matplotlib rc parameters have been updated and standardized. There are now three pairs of functions, <span class="title-ref">axes\_style</span> and <span class="title-ref">set\_style</span>, <span class="title-ref">plotting\_context</span> and <span class="title-ref">set\_context</span>, and <span class="title-ref">color\_palette</span> and <span class="title-ref">set\_palette</span>. In each case, the pairs take the exact same arguments. The first function defines and returns the parameters, and the second sets the matplotlib defaults. Additionally, the first function in each pair can be used in a `with` statement to temporarily change the defaults. Both the style and context functions also now accept a dictionary of matplotlib rc parameters to override the seaborn defaults, and <span class="title-ref">set</span> now also takes a dictionary to update any of the matplotlib defaults. See the \[tutorial \<aesthetics\_tutorial\>\](\#tutorial-\<aesthetics\_tutorial\>) for more information.
  - The `nogrid` style has been deprecated and changed to `white` for more uniformity (i.e. there are now `darkgrid`, `dark`, `whitegrid`, and `white` styles).

## Other changes

### Using the package

  - If you want to use plotting functions provided by the package without setting the matplotlib style to a seaborn theme, you can now do `import seaborn.apionly as sns` or `from seaborn.apionly import lmplot`, etc. This is using the (also new) <span class="title-ref">reset\_orig</span> function, which returns the rc parameters to what they are at matplotlib import time — i.e. they will respect any custom <span class="title-ref">matplotlibrc</span> settings on top of the matplotlib defaults.
  - The dependency load of the package has been reduced. It can now be installed and used with only `numpy`, `scipy`, `matplotlib`, and `pandas`. Although `statsmodels` is still recommended for full functionality, it is not required.

### Plotting functions

  - <span class="title-ref">lmplot</span> (and <span class="title-ref">regplot</span>) have two new options for fitting regression models: `lowess` and `robust`. The former fits a nonparametric smoother, while the latter fits a regression using methods that are less sensitive to outliers.
  - The regression uncertainty in <span class="title-ref">lmplot</span> and <span class="title-ref">regplot</span> is now estimated with fewer bootstrap iterations, so plotting should be faster.
  - The univariate <span class="title-ref">kdeplot</span> can now be drawn as a *cumulative* density plot.
  - Changed <span class="title-ref">interactplot</span> to use a robust calculation of the data range when finding default limits for the contour colormap to work better when there are outliers in the data.

### Style

  - There is a new style, `dark`, which shares most features with `darkgrid` but does not draw a grid by default.
  - There is a new function, <span class="title-ref">offset\_spines</span>, and a corresponding option in <span class="title-ref">despine</span> called `trim`. Together, these can be used to make plots where the axis spines are offset from the main part of the figure and limited within the range of the ticks. This is recommended for use with the `ticks` style.
  - Other aspects of the seaborn styles have been tweaked for more attractive plots.

---

v0.3.1.md

---

# v0.3.1 (April 2014)

This is a minor release from 0.3 with fixes for several bugs.

## Plotting functions

  - The size of the points in <span class="title-ref">pointplot</span> and `factorplot` are now scaled with the linewidth for better aesthetics across different plotting contexts.
  - The <span class="title-ref">pointplot</span> glyphs for different levels of the hue variable are drawn at different z-orders so that they appear uniform.

## Bug Fixes

  - Fixed a bug in <span class="title-ref">FacetGrid</span> (and thus affecting lmplot and factorplot) that appeared when `col_wrap` was used with a number of facets that did not evenly divide into the column width.
  - Fixed an issue where the support for kernel density estimates was sometimes computed incorrectly.
  - Fixed a problem where `hue` variable levels that were not strings were missing in <span class="title-ref">FacetGrid</span> legends.
  - When passing a color palette list in a `with` statement, the entire palette is now used instead of the first six colors.

---

v0.4.0.md

---

# v0.4.0 (September 2014)

This is a major release from 0.3. Highlights include new approaches for \[quick, high-level dataset exploration \<scatterplot\_matrix\>\](\#quick,-high-level-dataset-exploration-\<scatterplot\_matrix\>) (along with a more \[flexible interface \<pair\_grid\_with\_kde\>\](\#flexible-interface-\<pair\_grid\_with\_kde\>)) and easy creation of \[perceptually-appropriate color palettes \<cubehelix\_palettes\>\](\#perceptually-appropriate-color-palettes-\<cubehelix\_palettes\>) using the cubehelix system. Along with these additions, there are a number of smaller changes that make visualizing data with seaborn easier and more powerful.

## Plotting functions

  - A new object, <span class="title-ref">PairGrid</span>, and a corresponding function <span class="title-ref">pairplot</span>, for drawing grids of pairwise relationships in a dataset. This style of plot is sometimes called a "scatterplot matrix", but the representation of the data in <span class="title-ref">PairGrid</span> is flexible and many styles other than scatterplots can be used. See the \[docs \<pair\_grid\>\](\#docs-\<pair\_grid\>) for more information. **Note:** due to a bug in older versions of matplotlib, you will have best results if you use these functions with matplotlib 1.4 or later.
  - The rules for choosing default color palettes when variables are mapped to different colors have been unified (and thus changed in some cases). Now when no specific palette is requested, the current global color palette will be used, unless the number of variables to be mapped exceeds the number of unique colors in the palette, in which case the `"husl"` palette will be used to avoid cycling.
  - Added a keyword argument `hist_norm` to <span class="title-ref">distplot</span>. When a <span class="title-ref">distplot</span> is now drawn without a KDE or parametric density, the histogram is drawn as counts instead of a density. This can be overridden by by setting `hist_norm` to `True`.
  - When using <span class="title-ref">FacetGrid</span> with a `hue` variable, the legend is no longer drawn by default when you call <span class="title-ref">FacetGrid.map</span>. Instead, you have to call <span class="title-ref">FacetGrid.add\_legend</span> manually. This should make it easier to layer multiple plots onto the grid without having duplicated legends.
  - Made some changes to `factorplot` so that it behaves better when not all levels of the `x` variable are represented in each facet.
  - Added the `logx` option to <span class="title-ref">regplot</span> for fitting the regression in log space.
  - When <span class="title-ref">violinplot</span> encounters a bin with only a single observation, it will now plot a horizontal line at that value instead of erroring out.

## Style and color palettes

  - Added the <span class="title-ref">cubehelix\_palette</span> function for generating sequential palettes from the cubehelix system. See the \[palette docs \<cubehelix\_palettes\>\](\#palette-docs-\<cubehelix\_palettes\>) for more information on how these palettes can be used. There is also the <span class="title-ref">choose\_cubehelix</span> which will launch an interactive app to select cubehelix parameters in the notebook.
  - Added the <span class="title-ref">xkcd\_palette</span> and the `xkcd_rgb` dictionary so that colors can be specified with names from the [xkcd color survey](https://blog.xkcd.com/2010/05/03/color-survey-results/).
  - Added the `font_scale` option to <span class="title-ref">plotting\_context</span>, <span class="title-ref">set\_context</span>, and <span class="title-ref">set</span>. `font_scale` can independently increase or decrease the size of the font elements in the plot.
  - Font-handling should work better on systems without Arial installed. This is accomplished by adding the `font.sans-serif` field to the `axes_style` definition with Arial and Liberation Sans prepended to matplotlib defaults. The font family can also be set through the `font` keyword argument in <span class="title-ref">set</span>. Due to matplotlib bugs, this might not work as expected on matplotlib 1.3.
  - The <span class="title-ref">despine</span> function gets a new keyword argument `offset`, which replaces the deprecated <span class="title-ref">offset\_spines</span> function. You no longer need to offset the spines before plotting data.
  - Added a default value for `pdf.fonttype` so that text in PDFs is editable in Adobe Illustrator.

## Other API Changes

  - Removed the deprecated `set_color_palette` and `palette_context` functions. These were replaced in version 0.3 by the <span class="title-ref">set\_palette</span> function and ability to use <span class="title-ref">color\_palette</span> directly in a `with` statement.
  - Removed the ability to specify a `nogrid` style, which was renamed to `white` in 0.3.

---

v0.5.0.md

---

# v0.5.0 (November 2014)

This is a major release from 0.4. Highlights include new functions for plotting heatmaps, possibly while applying clustering algorithms to discover structured relationships. These functions are complemented by new custom colormap functions and a full set of IPython widgets that allow interactive selection of colormap parameters. The palette tutorial has been rewritten to cover these new tools and more generally provide guidance on how to use color in visualizations. There are also a number of smaller changes and bugfixes.

## Plotting functions

  - Added the <span class="title-ref">heatmap</span> function for visualizing a matrix of data by color-encoding the values. See the docs for more information.
  - Added the <span class="title-ref">clustermap</span> function for clustering and visualizing a matrix of data, with options to label individual rows and columns by colors. See the docs for more information. This work was lead by Olga Botvinnik.
  - <span class="title-ref">lmplot</span> and <span class="title-ref">pairplot</span> get a new keyword argument, `markers`. This can be a single kind of marker or a list of different markers for each level of the `hue` variable. Using different markers for different hues should let plots be more comprehensible when reproduced to black-and-white (i.e. when printed). See the [github pull request (\#323)](https://github.com/mwaskom/seaborn/pull/323) for examples.
  - More generally, there is a new keyword argument in <span class="title-ref">FacetGrid</span> and <span class="title-ref">PairGrid</span>, `hue_kws`. This similarly lets plot aesthetics vary across the levels of the hue variable, but more flexibly. `hue_kws` should be a dictionary that maps the name of keyword arguments to lists of values that are as long as the number of levels of the hue variable.
  - The argument `subplot_kws` has been added to `FacetGrid`. This allows for faceted plots with custom projections, including [maps with Cartopy](https://nbviewer.ipython.org/gist/shoyer/16db9cd187886a3effd8).

## Color palettes

  - Added two new functions to create custom color palettes. For sequential palettes, you can use the <span class="title-ref">light\_palette</span> function, which takes a seed color and creates a ramp from a very light, desaturated variant of it. For diverging palettes, you can use the <span class="title-ref">diverging\_palette</span> function to create a balanced ramp between two endpoints to a light or dark midpoint. See the \[palette tutorial \<palette\_tutorial\>\](\#palette-tutorial-\<palette\_tutorial\>) for more information.
  - Added the ability to specify the seed color for <span class="title-ref">light\_palette</span> and <span class="title-ref">dark\_palette</span> as a tuple of `husl` or `hls` space values or as a named `xkcd` color. The interpretation of the seed color is now provided by the new `input` parameter to these functions.
  - Added several new interactive palette widgets: <span class="title-ref">choose\_colorbrewer\_palette</span>, <span class="title-ref">choose\_light\_palette</span>, <span class="title-ref">choose\_dark\_palette</span>, and <span class="title-ref">choose\_diverging\_palette</span>. For consistency, renamed the cubehelix widget to <span class="title-ref">choose\_cubehelix\_palette</span> (and fixed a bug where the cubehelix palette was reversed). These functions also now return either a color palette list or a matplotlib colormap when called, and that object will be live-updated as you play with the widget. This should make it easy to iterate over a plot until you find a good representation for the data. See the [Github pull request](https://github.com/mwaskom/seaborn/pull/286) or [this notebook (download it to use the widgets)](https://nbviewer.ipython.org/381a5f5f7e38f8e45bd6) for more information.
  - Overhauled the color \[palette tutorial \<palette\_tutorial\>\](\#palette-tutorial-\<palette\_tutorial\>) to organize the discussion by class of color palette and provide more motivation behind the various choices one might make when choosing colors for their data.

## Bug fixes

  - Fixed a bug in <span class="title-ref">PairGrid</span> that gave incorrect results (or a crash) when the input DataFrame has a non-default index.
  - Fixed a bug in <span class="title-ref">PairGrid</span> where passing columns with a date-like datatype raised an exception.
  - Fixed a bug where <span class="title-ref">lmplot</span> would show a legend when the hue variable was also used on either the rows or columns (making the legend redundant).
  - Worked around a matplotlib bug that was forcing outliers in <span class="title-ref">boxplot</span> to appear as blue.
  - <span class="title-ref">kdeplot</span> now accepts pandas Series for the `data` and `data2` arguments.
  - Using a non-default correlation method in <span class="title-ref">corrplot</span> now implies `sig_stars=False` as the permutation test used to significance values for the correlations uses a pearson metric.
  - Removed `pdf.fonttype` from the style definitions, as the value used in version 0.4 resulted in very large PDF files.

---

v0.5.1.md

---

# v0.5.1 (November 2014)

This is a bugfix release that includes a workaround for an issue in matplotlib 1.4.2 and fixes for two bugs in functions that were new in 0.5.0.

  - Implemented a workaround for a bug in matplotlib 1.4.2 that prevented point markers from being drawn when the seaborn styles had been set. See this [github issue](https://github.com/mwaskom/seaborn/issues/344) for more information.
  - Fixed a bug in <span class="title-ref">heatmap</span> where the mask was vertically reversed relative to the data.
  - Fixed a bug in <span class="title-ref">clustermap</span> when using nested lists of side colors.

---

v0.6.0.md

---

# v0.6.0 (June 2015)

This is a major release from 0.5. The main objective of this release was to unify the API for categorical plots, which means that there are some relatively large API changes in some of the older functions. See below for details of those changes, which may break code written for older versions of seaborn. There are also some new functions (<span class="title-ref">stripplot</span>, and <span class="title-ref">countplot</span>), numerous enhancements to existing functions, and bug fixes.

Additionally, the documentation has been completely revamped and expanded for the 0.6 release. Now, the API docs page for each function has multiple examples with embedded plots showing how to use the various options. These pages should be considered the most comprehensive resource for examples, and the tutorial pages are now streamlined and oriented towards a higher-level overview of the various features.

## Changes and updates to categorical plots

In version 0.6, the "categorical" plots have been unified with a common API. This new category of functions groups together plots that show the relationship between one numeric variable and one or two categorical variables. This includes plots that show distribution of the numeric variable in each bin (<span class="title-ref">boxplot</span>, <span class="title-ref">violinplot</span>, and <span class="title-ref">stripplot</span>) and plots that apply a statistical estimation within each bin (<span class="title-ref">pointplot</span>, <span class="title-ref">barplot</span>, and <span class="title-ref">countplot</span>). There is a new \[tutorial chapter \<categorical\_tutorial\>\](\#tutorial-chapter-\<categorical\_tutorial\>) that introduces these functions.

The categorical functions now each accept the same formats of input data and can be invoked in the same way. They can plot using long- or wide-form data, and can be drawn vertically or horizontally. When long-form data is used, the orientation of the plots is inferred from the types of the input data. Additionally, all functions natively take a `hue` variable to add a second layer of categorization.

With the (in some cases new) API, these functions can all be drawn correctly by <span class="title-ref">FacetGrid</span>. However, `factorplot` can also now create faceted versions of any of these kinds of plots, so in most cases it will be unnecessary to use <span class="title-ref">FacetGrid</span> directly. By default, `factorplot` draws a point plot, but this is controlled by the `kind` parameter.

Here are details on what has changed in the process of unifying these APIs:

  - Changes to <span class="title-ref">boxplot</span> and <span class="title-ref">violinplot</span> will probably be the most disruptive. Both functions maintain backwards-compatibility in terms of the kind of data they can accept, but the syntax has changed to be more similar to other seaborn functions. These functions are now invoked with `x` and/or `y` parameters that are either vectors of data or names of variables in a long-form DataFrame passed to the new `data` parameter. You can still pass wide-form DataFrames or arrays to `data`, but it is no longer the first positional argument. See the [github pull request (\#410)](https://github.com/mwaskom/seaborn/pull/410) for more information on these changes and the logic behind them.
  - As <span class="title-ref">pointplot</span> and <span class="title-ref">barplot</span> can now plot with the major categorical variable on the y axis, the `x_order` parameter has been renamed to `order`.
  - Added a `hue` argument to <span class="title-ref">boxplot</span> and <span class="title-ref">violinplot</span>, which allows for nested grouping the plot elements by a third categorical variable. For <span class="title-ref">violinplot</span>, this nesting can also be accomplished by splitting the violins when there are two levels of the `hue` variable (using `split=True`). To make this functionality feasible, the ability to specify where the plots will be draw in data coordinates has been removed. These plots now are drawn at set positions, like (and identical to) <span class="title-ref">barplot</span> and <span class="title-ref">pointplot</span>.
  - Added a `palette` parameter to <span class="title-ref">boxplot</span>/<span class="title-ref">violinplot</span>. The `color` parameter still exists, but no longer does double-duty in accepting the name of a seaborn palette. `palette` supersedes `color` so that it can be used with a <span class="title-ref">FacetGrid</span>.

Along with these API changes, the following changes/enhancements were made to the plotting functions:

  - The default rules for ordering the categories has changed. Instead of automatically sorting the category levels, the plots now show the levels in the order they appear in the input data (i.e., the order given by `Series.unique()`). Order can be specified when plotting with the `order` and `hue_order` parameters. Additionally, when variables are pandas objects with a "categorical" dtype, the category order is inferred from the data object. This change also affects <span class="title-ref">FacetGrid</span> and <span class="title-ref">PairGrid</span>.
  - Added the `scale` and `scale_hue` parameters to <span class="title-ref">violinplot</span>. These control how the width of the violins are scaled. The default is `area`, which is different from how the violins used to be drawn. Use `scale='width'` to get the old behavior.
  - Used a different style for the `box` kind of interior plot in <span class="title-ref">violinplot</span>, which shows the whisker range in addition to the quartiles. Use `inner='quartile'` to get the old style.

## New plotting functions

  - Added the <span class="title-ref">stripplot</span> function, which draws a scatterplot where one of the variables is categorical. This plot has the same API as <span class="title-ref">boxplot</span> and <span class="title-ref">violinplot</span>. It is useful both on its own and when composed with one of these other plot kinds to show both the observations and underlying distribution.
  - Added the <span class="title-ref">countplot</span> function, which uses a bar plot representation to show counts of variables in one or more categorical bins. This replaces the old approach of calling <span class="title-ref">barplot</span> without a numeric variable.

## Other additions and changes

  - The <span class="title-ref">corrplot</span> and underlying <span class="title-ref">symmatplot</span> functions have been deprecated in favor of <span class="title-ref">heatmap</span>, which is much more flexible and robust. These two functions are still available in version 0.6, but they will be removed in a future version.
  - Added the <span class="title-ref">set\_color\_codes</span> function and the `color_codes` argument to <span class="title-ref">set</span> and <span class="title-ref">set\_palette</span>. This changes the interpretation of shorthand color codes (i.e. "b", "g", k", etc.) within matplotlib to use the values from one of the named seaborn palettes (i.e. "deep", "muted", etc.). That makes it easier to have a more uniform look when using matplotlib functions directly with seaborn imported. This could be disruptive to existing plots, so it does not happen by default. It is possible this could change in the future.
  - The <span class="title-ref">color\_palette</span> function no longer trims palettes that are longer than 6 colors when passed into it.
  - Added the `as_hex` method to color palette objects, to return a list of hex codes rather than rgb tuples.
  - <span class="title-ref">jointplot</span> now passes additional keyword arguments to the function used to draw the plot on the joint axes.
  - Changed the default `linewidths` in <span class="title-ref">heatmap</span> and <span class="title-ref">clustermap</span> to 0 so that larger matrices plot correctly. This parameter still exists and can be used to get the old effect of lines demarcating each cell in the heatmap (the old default `linewidths` was 0.5).
  - <span class="title-ref">heatmap</span> and <span class="title-ref">clustermap</span> now automatically use a mask for missing values, which previously were shown with the "under" value of the colormap per default <span class="title-ref">plt.pcolormesh</span> behavior.
  - Added the `seaborn.crayons` dictionary and the <span class="title-ref">crayon\_palette</span> function to define colors from the 120 box (\!) of [Crayola crayons](https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors).
  - Added the `line_kws` parameter to <span class="title-ref">residplot</span> to change the style of the lowess line, when used.
  - Added open-ended `**kwargs` to the `add_legend` method on <span class="title-ref">FacetGrid</span> and <span class="title-ref">PairGrid</span>, which will pass additional keyword arguments through when calling the legend function on the `Figure` or `Axes`.
  - Added the `gridspec_kws` parameter to <span class="title-ref">FacetGrid</span>, which allows for control over the size of individual facets in the grid to emphasize certain plots or account for differences in variable ranges.
  - The interactive palette widgets now show a continuous colorbar, rather than a discrete palette, when <span class="title-ref">as\_cmap</span> is True.
  - The default Axes size for <span class="title-ref">pairplot</span> and <span class="title-ref">PairGrid</span> is now slightly smaller.
  - Added the `shade_lowest` parameter to <span class="title-ref">kdeplot</span> which will set the alpha for the lowest contour level to 0, making it easier to plot multiple bivariate distributions on the same axes.
  - The `height` parameter of <span class="title-ref">rugplot</span> is now interpreted as a function of the axis size and is invariant to changes in the data scale on that axis. The rug lines are also slightly narrower by default.
  - Added a catch in <span class="title-ref">distplot</span> when calculating a default number of bins. For highly skewed data it will now use sqrt(n) bins, where previously the reference rule would return "infinite" bins and cause an exception in matplotlib.
  - Added a ceiling (50) to the default number of bins used for <span class="title-ref">distplot</span> histograms. This will help avoid confusing errors with certain kinds of datasets that heavily violate the assumptions of the reference rule used to get a default number of bins. The ceiling is not applied when passing a specific number of bins.
  - The various property dictionaries that can be passed to `plt.boxplot` are now applied after the seaborn restyling to allow for full customizability.
  - Added a `savefig` method to <span class="title-ref">JointGrid</span> that defaults to a tight bounding box to make it easier to save figures using this class, and set a tight bbox as the default for the `savefig` method on other Grid objects.
  - You can now pass an integer to the `xticklabels` and `yticklabels` parameter of <span class="title-ref">heatmap</span> (and, by extension, <span class="title-ref">clustermap</span>). This will make the plot use the ticklabels inferred from the data, but only plot every `n` label, where `n` is the number you pass. This can help when visualizing larger matrices with some sensible ordering to the rows or columns of the dataframe.
  - Added <span class="title-ref">"figure.facecolor"</span> to the style parameters and set the default to white.
  - The <span class="title-ref">load\_dataset</span> function now caches datasets locally after downloading them, and uses the local copy on subsequent calls.

## Bug fixes

  - Fixed bugs in <span class="title-ref">clustermap</span> where the mask and specified ticklabels were not being reorganized using the dendrograms.
  - Fixed a bug in <span class="title-ref">FacetGrid</span> and <span class="title-ref">PairGrid</span> that lead to incorrect legend labels when levels of the `hue` variable appeared in `hue_order` but not in the data.
  - Fixed a bug in <span class="title-ref">FacetGrid.set\_xticklabels</span> or <span class="title-ref">FacetGrid.set\_yticklabels</span> when `col_wrap` is being used.
  - Fixed a bug in <span class="title-ref">PairGrid</span> where the `hue_order` parameter was ignored.
  - Fixed two bugs in <span class="title-ref">despine</span> that caused errors when trying to trim the spines on plots that had inverted axes or no ticks.
  - Improved support for the `margin_titles` option in <span class="title-ref">FacetGrid</span>, which can now be used with a legend.

---

v0.7.0.md

---

# v0.7.0 (January 2016)

This is a major release from 0.6. The main new feature is <span class="title-ref">swarmplot</span> which implements the beeswarm approach for drawing categorical scatterplots. There are also some performance improvements, bug fixes, and updates for compatibility with new versions of dependencies.

  - Added the <span class="title-ref">swarmplot</span> function, which draws beeswarm plots. These are categorical scatterplots, similar to those produced by <span class="title-ref">stripplot</span>, but position of the points on the categorical axis is chosen to avoid overlapping points. See the \[categorical plot tutorial \<categorical\_tutorial\>\](\#categorical-plot-tutorial-\<categorical\_tutorial\>) for more information.
  - Changed some of the <span class="title-ref">stripplot</span> defaults to be closer to <span class="title-ref">swarmplot</span>. Points are now somewhat smaller, have no outlines, and are not split by default when using `hue`. These settings remain customizable through function parameters.
  - Added an additional rule when determining category order in categorical plots. Now, when numeric variables are used in a categorical role, the default behavior is to sort the unique levels of the variable (i.e they will be in proper numerical order). This can still be overridden by the appropriate `{*_}order` parameter, and variables with a `category` datatype will still follow the category order even if the levels are strictly numerical.
  - Changed how <span class="title-ref">stripplot</span> draws points when using `hue` nesting with `split=False` so that the different `hue` levels are not drawn strictly on top of each other.
  - Improve performance for large dendrograms in <span class="title-ref">clustermap</span>.
  - Added `font.size` to the plotting context definition so that the default output from `plt.text` will be scaled appropriately.
  - Fixed a bug in <span class="title-ref">clustermap</span> when `fastcluster` is not installed.
  - Fixed a bug in the zscore calculation in <span class="title-ref">clustermap</span>.
  - Fixed a bug in <span class="title-ref">distplot</span> where sometimes the default number of bins would not be an integer.
  - Fixed a bug in <span class="title-ref">stripplot</span> where a legend item would not appear for a `hue` level if there were no observations in the first group of points.
  - Heatmap colorbars are now rasterized for better performance in vector plots.
  - Added workarounds for some matplotlib boxplot issues, such as strange colors of outlier points.
  - Added workarounds for an issue where violinplot edges would be missing or have random colors.
  - Added a workaround for an issue where only one <span class="title-ref">heatmap</span> cell would be annotated on some matplotlib backends.
  - Fixed a bug on newer versions of matplotlib where a colormap would be erroneously applied to scatterplots with only three observations.
  - Updated seaborn for compatibility with matplotlib 1.5.
  - Added compatibility for various IPython (and Jupyter) versions in functions that use widgets.

---

v0.7.1.md

---

# v0.7.1 (June 2016)

  - Added the ability to put "caps" on the error bars that are drawn by <span class="title-ref">barplot</span> or <span class="title-ref">pointplot</span> (and, by extension, `factorplot`). Additionally, the line width of the error bars can now be controlled. These changes involve the new parameters `capsize` and `errwidth`. See the [github pull request (\#898)](https://github.com/mwaskom/seaborn/pull/898) for examples of usage.
  - Improved the row and column colors display in <span class="title-ref">clustermap</span>. It is now possible to pass Pandas objects for these elements and, when possible, the semantic information in the Pandas objects will be used to add labels to the plot. When Pandas objects are used, the color data is matched against the main heatmap based on the index, not on position. This is more accurate, but it may lead to different results if current code assumed positional matching.
  - Improved the luminance calculation that determines the annotation color in <span class="title-ref">heatmap</span>.
  - The `annot` parameter of <span class="title-ref">heatmap</span> now accepts a rectangular dataset in addition to a boolean value. If a dataset is passed, its values will be used for the annotations, while the main dataset will be used for the heatmap cell colors.
  - Fixed a bug in <span class="title-ref">FacetGrid</span> that appeared when using `col_wrap` with missing `col` levels.
  - Made it possible to pass a tick locator object to the <span class="title-ref">heatmap</span> colorbar.
  - Made it possible to use different styles (e.g., step) for <span class="title-ref">PairGrid</span> histograms when there are multiple hue levels.
  - Fixed a bug in scipy-based univariate kernel density bandwidth calculation.
  - The <span class="title-ref">reset\_orig</span> function (and, by extension, importing `seaborn.apionly`) resets matplotlib rcParams to their values at the time seaborn itself was imported, which should work better with rcParams changed by the jupyter notebook backend.
  - Removed some objects from the top-level `seaborn` namespace.
  - Improved unicode compatibility in <span class="title-ref">FacetGrid</span>.

---

v0.8.0.md

---

# v0.8.0 (July 2017)

  - The default style is no longer applied when seaborn is imported. It is now necessary to explicitly call <span class="title-ref">set</span> or one or more of <span class="title-ref">set\_style</span>, <span class="title-ref">set\_context</span>, and <span class="title-ref">set\_palette</span>. Correspondingly, the `seaborn.apionly` module has been deprecated.
  - Changed the behavior of <span class="title-ref">heatmap</span> (and by extension <span class="title-ref">clustermap</span>) when plotting divergent dataesets (i.e. when the `center` parameter is used). Instead of extending the lower and upper limits of the colormap to be symmetrical around the `center` value, the colormap is modified so that its middle color corresponds to `center`. This means that the full range of the colormap will not be used (unless the data or specified `vmin` and `vmax` are symmetric), but the upper and lower limits of the colorbar will correspond to the range of the data. See the Github pull request [(\#1184)](https://github.com/mwaskom/seaborn/pull/1184) for examples of the behavior.
  - Removed automatic detection of diverging data in <span class="title-ref">heatmap</span> (and by extension <span class="title-ref">clustermap</span>). If you want the colormap to be treated as diverging (see above), it is now necessary to specify the `center` value. When no colormap is specified, specifying `center` will still change the default to be one that is more appropriate for displaying diverging data.
  - Added four new colormaps, created using [viscm](https://github.com/matplotlib/viscm) for perceptual uniformity. The new colormaps include two sequential colormaps ("rocket" and "mako") and two diverging colormaps ("icefire" and "vlag"). These colormaps are registered with matplotlib on seaborn import and the colormap objects can be accessed in the `seaborn.cm` namespace.
  - Changed the default <span class="title-ref">heatmap</span> colormaps to be "rocket" (in the case of sequential data) or "icefire" (in the case of diverging data). Note that this change reverses the direction of the luminance ramp from the previous defaults. While potentially confusing and disruptive, this change better aligns the seaborn defaults with the new matplotlib default colormap ("viridis") and arguably better aligns the semantics of a "heat" map with the appearance of the colormap.
  - Added `"auto"` as a (default) option for tick labels in <span class="title-ref">heatmap</span> and <span class="title-ref">clustermap</span>. This will try to estimate how many ticks can be labeled without the text objects overlapping, which should improve performance for larger matrices.
  - Added the `dodge` parameter to <span class="title-ref">boxplot</span>, <span class="title-ref">violinplot</span>, and <span class="title-ref">barplot</span> to allow use of `hue` without changing the position or width of the plot elements, as when the `hue` variable is not nested within the main categorical variable.
  - Correspondingly, the `split` parameter for <span class="title-ref">stripplot</span> and <span class="title-ref">swarmplot</span> has been renamed to `dodge` for consistency with the other categorical functions (and for differentiation from the meaning of `split` in <span class="title-ref">violinplot</span>).
  - Added the ability to draw a colorbar for a bivariate <span class="title-ref">kdeplot</span> with the `cbar` parameter (and related `cbar_ax` and `cbar_kws` parameters).
  - Added the ability to use error bars to show standard deviations rather than bootstrap confidence intervals in most statistical functions by putting `ci="sd"`.
  - Allow side-specific offsets in <span class="title-ref">despine</span>.
  - Figure size is no longer part of the seaborn plotting context parameters.
  - Put a cap on the number of bins used in <span class="title-ref">jointplot</span> for `type=="hex"` to avoid hanging when the reference rule prescribes too many.
  - Changed the y axis in <span class="title-ref">heatmap</span>. Instead of reversing the rows of the data internally, the y axis is now inverted. This may affect code that draws on top of the heatmap in data coordinates.
  - Turn off dendrogram axes in <span class="title-ref">clustermap</span> rather than setting the background color to white.
  - New matplotlib qualitative palettes (e.g. "tab10") are now handled correctly.
  - Some modules and functions have been internally reorganized; there should be no effect on code that uses the `seaborn` namespace.
  - Added a deprecation warning to `tsplot` function to indicate that it will be removed or replaced with a substantially altered version in a future release.
  - The `interactplot` and `coefplot` functions are officially deprecated and will be removed in a future release.

---

v0.8.1.md

---

# v0.8.1 (September 2017)

  - Added a warning in <span class="title-ref">FacetGrid</span> when passing a categorical plot function without specifying `order` (or `hue_order` when `hue` is used), which is likely to produce a plot that is incorrect.
  - Improved compatibility between <span class="title-ref">FacetGrid</span> or <span class="title-ref">PairGrid</span> and interactive matplotlib backends so that the legend no longer remains inside the figure when using `legend_out=True`.
  - Changed categorical plot functions with small plot elements to use <span class="title-ref">dark\_palette</span> instead of <span class="title-ref">light\_palette</span> when generating a sequential palette from a specified color.
  - Improved robustness of <span class="title-ref">kdeplot</span> and <span class="title-ref">distplot</span> to data with fewer than two observations.
  - Fixed a bug in <span class="title-ref">clustermap</span> when using `yticklabels=False`.
  - Fixed a bug in <span class="title-ref">pointplot</span> where colors were wrong if exactly three points were being drawn.
  - Fixed a bug in <span class="title-ref">pointplot</span> where legend entries for missing data appeared with empty markers.
  - Fixed a bug in <span class="title-ref">clustermap</span> where an error was raised when annotating the main heatmap and showing category colors.
  - Fixed a bug in <span class="title-ref">clustermap</span> where row labels were not being properly rotated when they overlapped.
  - Fixed a bug in <span class="title-ref">kdeplot</span> where the maximum limit on the density axes was not being updated when multiple densities were drawn.
  - Improved compatibility with future versions of pandas.

---

v0.9.0.md

---

# v0.9.0 (July 2018)

This is a major release with several substantial and long-desired new features. There are also updates/modifications to the themes and color palettes that give better consistency with matplotlib 2.0 and some notable API changes.

## New relational plots

Three completely new plotting functions have been added: <span class="title-ref">relplot</span>, <span class="title-ref">scatterplot</span>, and <span class="title-ref">lineplot</span>. The first is a figure-level interface to the latter two that combines them with a <span class="title-ref">FacetGrid</span>. The functions bring the high-level, dataset-oriented API of the seaborn categorical plotting functions to more general plots (scatter plots and line plots).

These functions can visualize a relationship between two numeric variables while mapping up to three additional variables by modifying `hue`, `size`, and/or `style` semantics. The common high-level API is implemented differently in the two functions. For example, the size semantic in <span class="title-ref">scatterplot</span> scales the area of scatter plot points, but in <span class="title-ref">lineplot</span> it scales width of the line plot lines. The API is dataset-oriented, meaning that in both cases you pass the variable in your dataset rather than directly specifying the matplotlib parameters to use for point area or line width.

Another way the relational functions differ from existing seaborn functionality is that they have better support for using numeric variables for `hue` and `size` semantics. This functionality may be propagated to other functions that can add a `hue` semantic in future versions; it has not been in this release.

The <span class="title-ref">lineplot</span> function also has support for statistical estimation and is replacing the older `tsplot` function, which still exists but is marked for removal in a future release. <span class="title-ref">lineplot</span> is better aligned with the API of the rest of the library and more flexible in showing relationships across additional variables by modifying the size and style semantics independently. It also has substantially improved support for date and time data, a major pain factor in `tsplot`. The cost is that some of the more esoteric options in `tsplot` for representing uncertainty (e.g. a colormapped KDE of the bootstrap distribution) have not been implemented in the new function.

There is quite a bit of new documentation that explains these new functions in more detail, including detailed examples of the various options in the \[API reference \<relational\_api\>\](\#api-reference-\<relational\_api\>) and a more verbose \[tutorial \<relational\_tutorial\>\](\#tutorial-\<relational\_tutorial\>).

These functions should be considered in a "stable beta" state. They have been thoroughly tested, but some unknown corner cases may remain to be found. The main features are in place, but not all planned functionality has been implemented. There are planned improvements to some elements, particularly the default legend, that are a little rough around the edges in this release. Finally, some of the default behavior (e.g. the default range of point/line sizes) may change somewhat in future releases.

## Updates to themes and palettes

Several changes have been made to the seaborn style themes, context scaling, and color palettes. In general the aim of these changes was to make the seaborn styles more consistent with the [style updates in matplotlib 2.0](https://matplotlib.org/users/dflt_style_changes.html) and to leverage some of the new style parameters for better implementation of some aspects of the seaborn styles. Here is a list of the changes:

  - Reorganized and updated some <span class="title-ref">axes\_style</span>/<span class="title-ref">plotting\_context</span> parameters to take advantage of improvements in the matplotlib 2.0 update. The biggest change involves using several new parameters in the "style" spec while moving parameters that used to implement the corresponding aesthetics to the "context" spec. For example, axes spines and ticks are now off instead of having their width/length zeroed out for the darkgrid style. That means the width/length of these elements can now be scaled in different contexts. The effect is a more cohesive appearance of the plots, especially in larger contexts. These changes include only minimal support for the 1.x matplotlib series. Users who are stuck on matplotlib 1.5 but wish to use seaborn styling may want to use the seaborn parameters that can be accessed through the [matplotlib stylesheet interface](https://matplotlib.org/users/style_sheets.html).
  - Updated the seaborn palettes ("deep", "muted", "colorblind", etc.) to correspond with the new 10-color matplotlib default. The legacy palettes are now available at "deep6", "muted6", "colorblind6", etc. Additionally, a few individual colors were tweaked for better consistency, aesthetics, and accessibility.
  - Calling <span class="title-ref">color\_palette</span> (or <span class="title-ref">set\_palette</span>) with a named qualitative palettes (i.e. one of the seaborn palettes, the colorbrewer qualitative palettes, or the matplotlib matplotlib tableau-derived palettes) and no specified number of colors will return all of the colors in the palette. This means that for some palettes, the returned list will have a different length than it did in previous versions.
  - Enhanced <span class="title-ref">color\_palette</span> to accept a parameterized specification of a cubehelix palette in in a string, prefixed with `"ch:"` (e.g. `"ch:-.1,.2,l=.7"`). Note that keyword arguments can be spelled out or referenced using only their first letter. Reversing the palette is accomplished by appending `"_r"`, as with other matplotlib colormaps. This specification will be accepted by any seaborn function with a `palette=` parameter.
  - Slightly increased the base font sizes in <span class="title-ref">plotting\_context</span> and increased the scaling factors for `"talk"` and `"poster"` contexts.
  - Calling <span class="title-ref">set</span> will now call <span class="title-ref">set\_color\_codes</span> to re-assign the single letter color codes by default

## API changes

A few functions have been renamed or have had changes to their default parameters.

  - The `factorplot` function has been renamed to <span class="title-ref">catplot</span>. The new name ditches the original R-inflected terminology to use a name that is more consistent with terminology in pandas and in seaborn itself. This change should hopefully make <span class="title-ref">catplot</span> easier to discover, and it should make more clear what its role is. `factorplot` still exists and will pass its arguments through to <span class="title-ref">catplot</span> with a warning. It may be removed eventually, but the transition will be as gradual as possible.
  - The other reason that the `factorplot` name was changed was to ease another alteration which is that the default `kind` in <span class="title-ref">catplot</span> is now `"strip"` (corresponding to <span class="title-ref">stripplot</span>). This plots a categorical scatter plot which is usually a much better place to start and is more consistent with the default in <span class="title-ref">relplot</span>. The old default style in `factorplot` (`"point"`, corresponding to <span class="title-ref">pointplot</span>) remains available if you want to show a statistical estimation.
  - The `lvplot` function has been renamed to <span class="title-ref">boxenplot</span>. The "letter-value" terminology that was used to name the original kind of plot is obscure, and the abbreviation to `lv` did not help anything. The new name should make the plot more discoverable by describing its format (it plots multiple boxes, also known as "boxen"). As with `factorplot`, the `lvplot` function still exists to provide a relatively smooth transition.
  - Renamed the `size` parameter to `height` in multi-plot grid objects (<span class="title-ref">FacetGrid</span>, <span class="title-ref">PairGrid</span>, and <span class="title-ref">JointGrid</span>) along with functions that use them (`factorplot`, <span class="title-ref">lmplot</span>, <span class="title-ref">pairplot</span>, and <span class="title-ref">jointplot</span>) to avoid conflicts with the `size` parameter that is used in `scatterplot` and `lineplot` (necessary to make <span class="title-ref">relplot</span> work) and also makes the meaning of the parameter a bit more clear.
  - Changed the default diagonal plots in <span class="title-ref">pairplot</span> to use func:<span class="title-ref">kdeplot</span> when a `"hue"` dimension is used.
  - Deprecated the statistical annotation component of <span class="title-ref">JointGrid</span>. The method is still available but will be removed in a future version.
  - Two older functions that were deprecated in earlier versions, `coefplot` and `interactplot`, have undergone final removal from the code base.

## Documentation improvements

There has been some effort put into improving the documentation. The biggest change is that the \[introduction to the library \<introduction\>\](\#introduction-to-the-library-\<introduction\>) has been completely rewritten to provide much more information and, critically, examples. In addition to the high-level motivation, the introduction also covers some important topics that are often sources of confusion, like the distinction between figure-level and axes-level functions, how datasets should be formatted for use in seaborn, and how to customize the appearance of the plots.

Other improvements have been made throughout, most notably a thorough re-write of the \[categorical tutorial \<categorical\_tutorial\>\](\#categorical-tutorial-\<categorical\_tutorial\>).

## Other small enhancements and bug fixes

  - Changed <span class="title-ref">rugplot</span> to plot a matplotlib `LineCollection` instead of many `Line2D` objects, providing a big speedup for large arrays.
  - Changed the default off-diagonal plots to use <span class="title-ref">scatterplot</span>. (Note that the `"hue"` currently draws three separate scatterplots instead of using the hue semantic of the scatterplot function).
  - Changed color handling when using <span class="title-ref">kdeplot</span> with two variables. The default colormap for the 2D density now follows the color cycle, and the function can use `color` and `label` kwargs, adding more flexibility and avoiding a warning when using with multi-plot grids.
  - Added the `subplot_kws` parameter to <span class="title-ref">PairGrid</span> for more flexibility.
  - Removed a special case in <span class="title-ref">PairGrid</span> that defaulted to drawing stacked histograms on the diagonal axes.
  - Fixed <span class="title-ref">jointplot</span>/<span class="title-ref">JointGrid</span> and <span class="title-ref">regplot</span> so that they now accept list inputs.
  - Fixed a bug in <span class="title-ref">FacetGrid</span> when using a single row/column level or using `col_wrap=1`.
  - Fixed functions that set axis limits so that they preserve auto-scaling state on matplotlib 2.0.
  - Avoided an error when using matplotlib backends that cannot render a canvas (e.g. PDF).
  - Changed the install infrastructure to explicitly declare dependencies in a way that `pip` is aware of. This means that `pip install seaborn` will now work in an empty environment. Additionally, the dependencies are specified with strict minimal versions.
  - Updated the testing infrastructure to execute tests with [pytest](https://docs.pytest.org/en/latest/) (although many individual tests still use nose assertion).

---

v0.9.1.md

---

# v0.9.1 (January 2020)

This is a minor release with a number of bug fixes and adaptations to changes in seaborn's dependencies. There are also several new features.

This is the final version of seaborn that will support Python 2.7 or 3.5.

## New features

  - Added more control over the arrangement of the elements drawn by <span class="title-ref">clustermap</span> with the `{dendrogram,colors}_ratio` and `cbar_pos` parameters. Additionally, the default organization and scaling with different figure sizes has been improved.
  - Added the `corner` option to <span class="title-ref">PairGrid</span> and <span class="title-ref">pairplot</span> to make a grid without the upper triangle of bivariate axes.
  - Added the ability to seed the random number generator for the bootstrap used to define error bars in several plots. Relevant functions now have a `seed` parameter, which can take either fixed seed (typically an `int`) or a numpy random number generator object (either the newer <span class="title-ref">numpy.random.Generator</span> or the older <span class="title-ref">numpy.random.mtrand.RandomState</span>).
  - Generalized the idea of "diagonal" axes in <span class="title-ref">PairGrid</span> to any axes that share an x and y variable.
  - In <span class="title-ref">PairGrid</span>, the `hue` variable is now excluded from the default list of variables that make up the rows and columns of the grid.
  - Exposed the `layout_pad` parameter in <span class="title-ref">PairGrid</span> and set a smaller default than what matptlotlib sets for more efficient use of space in dense grids.
  - It is now possible to force a categorical interpretation of the `hue` variable in a relational plot by passing the name of a categorical palette (e.g. `"deep"`, or `"Set2"`). This complements the (previously supported) option of passing a list/dict of colors.
  - Added the `tree_kws` parameter to <span class="title-ref">clustermap</span> to control the properties of the lines in the dendrogram.
  - Added the ability to pass hierarchical label names to the <span class="title-ref">FacetGrid</span> legend, which also fixes a bug in <span class="title-ref">relplot</span> when the same label appeared in different semantics.
  - Improved support for grouping observations based on pandas index information in categorical plots.

## Bug fixes and adaptations

  - Avoided an error when singular data is passed to <span class="title-ref">kdeplot</span>, issuing a warning instead. This makes <span class="title-ref">pairplot</span> more robust.
  - Fixed the behavior of `dropna` in <span class="title-ref">PairGrid</span> to properly exclude null datapoints from each plot when set to `True`.
  - Fixed an issue where <span class="title-ref">regplot</span> could interfere with other axes in a multi-plot matplotlib figure.
  - Semantic variables with a `category` data type will always be treated as categorical in relational plots.
  - Avoided a warning about color specifications that arose from <span class="title-ref">boxenplot</span> on newer matplotlibs.
  - Adapted to a change in how matplotlib scales axis margins, which caused multiple calls to <span class="title-ref">regplot</span> with `truncate=False` to progressively expand the x axis limits. Because there are currently limitations on how autoscaling works in matplotlib, the default value for `truncate` in seaborn has also been changed to `True`.
  - Relational plots no longer error when hue/size data are inferred to be numeric but stored with a string datatype.
  - Relational plots now consider semantics with only a single value that can be interpreted as boolean (0 or 1) to be categorical, not numeric.
  - Relational plots now handle list or dict specifications for `sizes` correctly.
  - Fixed an issue in <span class="title-ref">pointplot</span> where missing levels of a hue variable would cause an exception after a recent update in matplotlib.
  - Fixed a bug when setting the rotation of x tick labels on a <span class="title-ref">FacetGrid</span>.
  - Fixed a bug where values would be excluded from categorical plots when only one variable was a pandas `Series` with a non-default index.
  - Fixed a bug when using `Series` objects as arguments for `x_partial` or `y_partial` in <span class="title-ref">regplot</span>.
  - Fixed a bug when passing a `norm` object and using color annotations in <span class="title-ref">clustermap</span>.
  - Fixed a bug where annotations were not rearranged to match the clustering in <span class="title-ref">clustermap</span>.
  - Fixed a bug when trying to call <span class="title-ref">set</span> while specifying a list of colors for the palette.
  - Fixed a bug when resetting the color code short-hands to the matplotlib default.
  - Avoided errors from stricter type checking in upcoming `numpy` changes.
  - Avoided error/warning in <span class="title-ref">lineplot</span> when plotting categoricals with empty levels.
  - Allowed `colors` to be passed through to a bivariate <span class="title-ref">kdeplot</span>.
  - Standardized the output format of custom color palette functions.
  - Fixed a bug where legends for numerical variables in a relational plot could show a surprisingly large number of decimal places.
  - Improved robustness to missing values in distribution plots.
  - Made it possible to specify the location of the <span class="title-ref">FacetGrid</span> legend using matplotlib keyword arguments.

---

LICENSE.md

---

Copyright (c) 2012-2023, Michael L. Waskom
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the project nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


---

README.md

---

<img src="https://raw.githubusercontent.com/mwaskom/seaborn/master/doc/_static/logo-wide-lightbg.svg"><br>

--------------------------------------

seaborn: statistical data visualization
=======================================

[![PyPI Version](https://img.shields.io/pypi/v/seaborn.svg)](https://pypi.org/project/seaborn/)
[![License](https://img.shields.io/pypi/l/seaborn.svg)](https://github.com/mwaskom/seaborn/blob/master/LICENSE.md)
[![DOI](https://joss.theoj.org/papers/10.21105/joss.03021/status.svg)](https://doi.org/10.21105/joss.03021)
[![Tests](https://github.com/mwaskom/seaborn/workflows/CI/badge.svg)](https://github.com/mwaskom/seaborn/actions)
[![Code Coverage](https://codecov.io/gh/mwaskom/seaborn/branch/master/graph/badge.svg)](https://codecov.io/gh/mwaskom/seaborn)

Seaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.


Documentation
-------------

Online documentation is available at [seaborn.pydata.org](https://seaborn.pydata.org).

The docs include a [tutorial](https://seaborn.pydata.org/tutorial.html), [example gallery](https://seaborn.pydata.org/examples/index.html), [API reference](https://seaborn.pydata.org/api.html), [FAQ](https://seaborn.pydata.org/faq), and other useful information.

To build the documentation locally, please refer to [`doc/README.md`](doc/README.md).

Dependencies
------------

Seaborn supports Python 3.8+.

Installation requires [numpy](https://numpy.org/), [pandas](https://pandas.pydata.org/), and [matplotlib](https://matplotlib.org/). Some advanced statistical functionality requires [scipy](https://www.scipy.org/) and/or [statsmodels](https://www.statsmodels.org/).


Installation
------------

The latest stable release (and required dependencies) can be installed from PyPI:

    pip install seaborn

It is also possible to include optional statistical dependencies:

    pip install seaborn[stats]

Seaborn can also be installed with conda:

    conda install seaborn

Note that the main anaconda repository lags PyPI in adding new releases, but conda-forge (`-c conda-forge`) typically updates quickly.

Citing
------

A paper describing seaborn has been published in the [Journal of Open Source Software](https://joss.theoj.org/papers/10.21105/joss.03021). The paper provides an introduction to the key features of the library, and it can be used as a citation if seaborn proves integral to a scientific publication.

Testing
-------

Testing seaborn requires installing additional dependencies; they can be installed with the `dev` extra (e.g., `pip install .[dev]`).

To test the code, run `make test` in the source directory. This will exercise the unit tests (using [pytest](https://docs.pytest.org/)) and generate a coverage report.

Code style is enforced with `flake8` using the settings in the [`setup.cfg`](./setup.cfg) file. Run `make lint` to check. Alternately, you can use `pre-commit` to automatically run lint checks on any files you are committing: just run `pre-commit install` to set it up, and then commit as usual going forward.

Development
-----------

Seaborn development takes place on Github: https://github.com/mwaskom/seaborn

Please submit bugs that you encounter to the [issue tracker](https://github.com/mwaskom/seaborn/issues) with a reproducible example demonstrating the problem. Questions about usage are more at home on StackOverflow, where there is a [seaborn tag](https://stackoverflow.com/questions/tagged/seaborn).


---

SECURITY.md

---

# Security Policy

If you have discovered a security vulnerability in this project, please report it
privately. **Do not disclose it as a public issue.** This gives me time to work with you
to fix the issue before public exposure, reducing the chance that the exploit will be
used before a patch is released.

You may submit the report by filling out
[this form](https://github.com/mwaskom/seaborn/security/advisories/new).

Please provide the following information in your report:

- A description of the vulnerability and its impact
- How to reproduce the issue

This project is maintained by a single maintainer on a reasonable-effort basis. As such,
I ask that you give me 90 days to work on a fix before public exposure.
