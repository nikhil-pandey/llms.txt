advanced.md

---

# Advanced Patterns

<div class="currentmodule">

click

</div>

In addition to common functionality that is implemented in the library itself, there are countless patterns that can be implemented by extending Click. This page should give some insight into what can be accomplished.

## Command Aliases

Many tools support aliases for commands. For example, you can configure `git` to accept `git ci` as alias for `git commit`. Other tools also support auto-discovery for aliases by automatically shortening them.

It's possible to customize <span class="title-ref">Group</span> to provide this functionality. As explained in \[custom-groups\](\#custom-groups), a group provides two methods: <span class="title-ref">\~Group.list\_commands</span> and <span class="title-ref">\~Group.get\_command</span>. In this particular case, you only need to override the latter as you generally don't want to enumerate the aliases on the help page in order to avoid confusion.

The following example implements a subclass of <span class="title-ref">Group</span> that accepts a prefix for a command. If there was a command called `push`, it would accept `pus` as an alias (so long as it was unique):

It can be used like this:

See the [alias example](https://github.com/pallets/click/tree/main/examples/aliases) in Click's repository for another example.

## Parameter Modifications

Parameters (options and arguments) are forwarded to the command callbacks as you have seen. One common way to prevent a parameter from being passed to the callback is the <span class="title-ref">expose\_value</span> argument to a parameter which hides the parameter entirely. The way this works is that the <span class="title-ref">Context</span> object has a <span class="title-ref">\~Context.params</span> attribute which is a dictionary of all parameters. Whatever is in that dictionary is being passed to the callbacks.

This can be used to make up additional parameters. Generally this pattern is not recommended but in some cases it can be useful. At the very least it's good to know that the system works this way.

In this case the callback returns the URL unchanged but also passes a second `fp` value to the callback. What's more recommended is to pass the information in a wrapper however:

## Token Normalization

<div class="versionadded">

2.0

</div>

Starting with Click 2.0, it's possible to provide a function that is used for normalizing tokens. Tokens are option names, choice values, or command values. This can be used to implement case insensitive options, for instance.

In order to use this feature, the context needs to be passed a function that performs the normalization of the token. For instance, you could have a function that converts the token to lowercase:

And how it works on the command line:

## Invoking Other Commands

Sometimes, it might be interesting to invoke one command from another command. This is a pattern that is generally discouraged with Click, but possible nonetheless. For this, you can use the <span class="title-ref">Context.invoke</span> or <span class="title-ref">Context.forward</span> methods.

They work similarly, but the difference is that <span class="title-ref">Context.invoke</span> merely invokes another command with the arguments you provide as a caller, whereas <span class="title-ref">Context.forward</span> fills in the arguments from the current command. Both accept the command as the first argument and everything else is passed onwards as you would expect.

Example:

And what it looks like:

## Callback Evaluation Order

Click works a bit differently than some other command line parsers in that it attempts to reconcile the order of arguments as defined by the programmer with the order of arguments as defined by the user before invoking any callbacks.

This is an important concept to understand when porting complex patterns to Click from optparse or other systems. A parameter callback invocation in optparse happens as part of the parsing step, whereas a callback invocation in Click happens after the parsing.

The main difference is that in optparse, callbacks are invoked with the raw value as it happens, whereas a callback in Click is invoked after the value has been fully converted.

Generally, the order of invocation is driven by the order in which the user provides the arguments to the script; if there is an option called `--foo` and an option called `--bar` and the user calls it as `--bar --foo`, then the callback for `bar` will fire before the one for `foo`.

There are three exceptions to this rule which are important to know:

  - Eagerness:  
    An option can be set to be "eager". All eager parameters are evaluated before all non-eager parameters, but again in the order as they were provided on the command line by the user.
    
    This is important for parameters that execute and exit like `--help` and `--version`. Both are eager parameters, but whatever parameter comes first on the command line will win and exit the program.

  - Repeated parameters:  
    If an option or argument is split up on the command line into multiple places because it is repeated -- for instance, `--exclude foo --include baz --exclude bar` -- the callback will fire based on the position of the first option. In this case, the callback will fire for `exclude` and it will be passed both options (`foo` and `bar`), then the callback for `include` will fire with `baz` only.
    
    Note that even if a parameter does not allow multiple versions, Click will still accept the position of the first, but it will ignore every value except the last. The reason for this is to allow composability through shell aliases that set defaults.

  - Missing parameters:  
    If a parameter is not defined on the command line, the callback will still fire. This is different from how it works in optparse where undefined values do not fire the callback. Missing parameters fire their callbacks at the very end which makes it possible for them to default to values from a parameter that came before.

Most of the time you do not need to be concerned about any of this, but it is important to know how it works for some advanced cases.

## Forwarding Unknown Options

In some situations it is interesting to be able to accept all unknown options for further manual processing. Click can generally do that as of Click 4.0, but it has some limitations that lie in the nature of the problem. The support for this is provided through a parser flag called `ignore_unknown_options` which will instruct the parser to collect all unknown options and to put them to the leftover argument instead of triggering a parsing error.

This can generally be activated in two different ways:

1.  It can be enabled on custom <span class="title-ref">Command</span> subclasses by changing the <span class="title-ref">\~Command.ignore\_unknown\_options</span> attribute.
2.  It can be enabled by changing the attribute of the same name on the context class (<span class="title-ref">Context.ignore\_unknown\_options</span>). This is best changed through the `context_settings` dictionary on the command.

For most situations the easiest solution is the second. Once the behavior is changed something needs to pick up those leftover options (which at this point are considered arguments). For this again you have two options:

1.  You can use <span class="title-ref">pass\_context</span> to get the context passed. This will only work if in addition to <span class="title-ref">\~Context.ignore\_unknown\_options</span> you also set <span class="title-ref">\~Context.allow\_extra\_args</span> as otherwise the command will abort with an error that there are leftover arguments. If you go with this solution, the extra arguments will be collected in <span class="title-ref">Context.args</span>.
2.  You can attach an <span class="title-ref">argument</span> with `nargs` set to <span class="title-ref">-1</span> which will eat up all leftover arguments. In this case it's recommended to set the <span class="title-ref">type</span> to <span class="title-ref">UNPROCESSED</span> to avoid any string processing on those arguments as otherwise they are forced into unicode strings automatically which is often not what you want.

In the end you end up with something like this:

And what it looks like:

As you can see the verbosity flag is handled by Click, everything else ends up in the <span class="title-ref">timeit\_args</span> variable for further processing which then for instance, allows invoking a subprocess. There are a few things that are important to know about how this ignoring of unhandled flag happens:

  - Unknown long options are generally ignored and not processed at all. So for instance if `--foo=bar` or `--foo bar` are passed they generally end up like that. Note that because the parser cannot know if an option will accept an argument or not, the `bar` part might be handled as an argument.
  - Unknown short options might be partially handled and reassembled if necessary. For instance in the above example there is an option called `-v` which enables verbose mode. If the command would be ignored with `-va` then the `-v` part would be handled by Click (as it is known) and `-a` would end up in the leftover parameters for further processing.
  - Depending on what you plan on doing you might have some success by disabling interspersed arguments (<span class="title-ref">\~Context.allow\_interspersed\_args</span>) which instructs the parser to not allow arguments and options to be mixed. Depending on your situation this might improve your results.

Generally though the combined handling of options and arguments from your own commands and commands from another application are discouraged and if you can avoid it, you should. It's a much better idea to have everything below a subcommand be forwarded to another application than to handle some arguments yourself.

## Global Context Access

<div class="versionadded">

5.0

</div>

Starting with Click 5.0 it is possible to access the current context from anywhere within the same thread through the use of the <span class="title-ref">get\_current\_context</span> function which returns it. This is primarily useful for accessing the context bound object as well as some flags that are stored on it to customize the runtime behavior. For instance the <span class="title-ref">echo</span> function does this to infer the default value of the <span class="title-ref">color</span> flag.

Example usage:

    def get_current_command_name():
        return click.get_current_context().info_name

It should be noted that this only works within the current thread. If you spawn additional threads then those threads will not have the ability to refer to the current context. If you want to give another thread the ability to refer to this context you need to use the context within the thread as a context manager:

    def spawn_thread(ctx, func):
        def wrapper():
            with ctx:
                func()
        t = threading.Thread(target=wrapper)
        t.start()
        return t

Now the thread function can access the context like the main thread would do. However if you do use this for threading you need to be very careful as the vast majority of the context is not thread safe\! You are only allowed to read from the context, but not to perform any modifications on it.

## Detecting the Source of a Parameter

In some situations it's helpful to understand whether or not an option or parameter came from the command line, the environment, the default value, or <span class="title-ref">Context.default\_map</span>. The <span class="title-ref">Context.get\_parameter\_source</span> method can be used to find this out. It will return a member of the <span class="title-ref">\~click.core.ParameterSource</span> enum.

## Managing Resources

It can be useful to open a resource in a group, to be made available to subcommands. Many types of resources need to be closed or otherwise cleaned up after use. The standard way to do this in Python is by using a context manager with the `with` statement.

For example, the `Repo` class from \[complex\](complex.md) might actually be defined as a context manager:

`` `python     class Repo:         def __init__(self, home=None):             self.home = os.path.abspath(home or ".")             self.db = None          def __enter__(self):             path = os.path.join(self.home, "repo.db")             self.db = open_database(path)             return self          def __exit__(self, exc_type, exc_value, tb):             self.db.close()  Ordinarily, it would be used with the ``with`statement:  .. code-block:: python      with Repo() as repo:         repo.db.query(...)  However, a`with`block in a group would exit and close the database`\` before it could be used by a subcommand.

Instead, use the context's <span class="title-ref">\~click.Context.with\_resource</span> method to enter the context manager and return the resource. When the group and any subcommands finish, the context's resources are cleaned up.

`` `python     @click.group()     @click.option("--repo-home", default=".repo")     @click.pass_context     def cli(ctx, repo_home):         ctx.obj = ctx.with_resource(Repo(repo_home))      @cli.command()     @click.pass_obj     def log(obj):         # obj is the repo opened in the cli group         for entry in obj.db.query(...):             click.echo(entry)  If the resource isn't a context manager, usually it can be wrapped in ``<span class="title-ref"> one using something from :mod:\`contextlib</span>. If that's not possible, use the context's <span class="title-ref">\~click.Context.call\_on\_close</span> method to register a cleanup function.

`` `python     @click.group()     @click.option("--name", default="repo.db")     @click.pass_context     def cli(ctx, repo_home):         ctx.obj = db = open_db(repo_home)          @ctx.call_on_close         def close_db():             db.record_use()             db.save()             db.close()   .. versionchanged:: 8.2 ``Context.call\_on\_close`and context managers registered     via`Context.with\_resource`will be closed when the CLI exits. These were     previously not called on exit.`\`

---

api.md

---

# API

<div class="module">

click

</div>

This part of the documentation lists the full API reference of all public classes and functions.

## Decorators

<div class="autofunction">

command

</div>

<div class="autofunction">

group

</div>

<div class="autofunction">

argument

</div>

<div class="autofunction">

option

</div>

<div class="autofunction">

password\_option

</div>

<div class="autofunction">

confirmation\_option

</div>

<div class="autofunction">

version\_option

</div>

<div class="autofunction">

help\_option

</div>

<div class="autofunction">

pass\_context

</div>

<div class="autofunction">

pass\_obj

</div>

<div class="autofunction">

make\_pass\_decorator

</div>

<div class="autofunction">

click.decorators.pass\_meta\_key

</div>

## Utilities

<div class="autofunction">

echo

</div>

<div class="autofunction">

echo\_via\_pager

</div>

<div class="autofunction">

prompt

</div>

<div class="autofunction">

confirm

</div>

<div class="autofunction">

progressbar

</div>

<div class="autofunction">

clear

</div>

<div class="autofunction">

style

</div>

<div class="autofunction">

unstyle

</div>

<div class="autofunction">

secho

</div>

<div class="autofunction">

edit

</div>

<div class="autofunction">

launch

</div>

<div class="autofunction">

getchar

</div>

<div class="autofunction">

pause

</div>

<div class="autofunction">

get\_binary\_stream

</div>

<div class="autofunction">

get\_text\_stream

</div>

<div class="autofunction">

open\_file

</div>

<div class="autofunction">

get\_app\_dir

</div>

<div class="autofunction">

format\_filename

</div>

## Commands

<div class="autoclass" data-members="">

BaseCommand

</div>

<div class="autoclass" data-members="">

Command

</div>

<div class="autoclass" data-members="">

MultiCommand

</div>

<div class="autoclass" data-members="">

Group

</div>

<div class="autoclass" data-members="">

CommandCollection

</div>

## Parameters

<div class="autoclass" data-members="">

Parameter

</div>

<div class="autoclass">

Option

</div>

<div class="autoclass">

Argument

</div>

## Context

<div class="autoclass" data-members="">

Context

</div>

<div class="autofunction">

get\_current\_context

</div>

<div class="autoclass" data-members="" data-member-order="bysource">

click.core.ParameterSource

</div>

## Types

<div class="autodata">

STRING

</div>

<div class="autodata">

INT

</div>

<div class="autodata">

FLOAT

</div>

<div class="autodata">

BOOL

</div>

<div class="autodata">

UUID

</div>

<div class="autodata">

UNPROCESSED

</div>

<div class="autoclass">

File

</div>

<div class="autoclass">

Path

</div>

<div class="autoclass" data-members="">

Choice

</div>

<div class="autoclass">

IntRange

</div>

<div class="autoclass">

FloatRange

</div>

<div class="autoclass">

DateTime

</div>

<div class="autoclass">

Tuple

</div>

<div class="autoclass" data-members="">

ParamType

</div>

## Exceptions

<div class="autoexception">

ClickException

</div>

<div class="autoexception">

Abort

</div>

<div class="autoexception">

UsageError

</div>

<div class="autoexception">

BadParameter

</div>

<div class="autoexception">

FileError

</div>

<div class="autoexception">

NoSuchOption

</div>

<div class="autoexception">

BadOptionUsage

</div>

<div class="autoexception">

BadArgumentUsage

</div>

## Formatting

<div class="autoclass" data-members="">

HelpFormatter

</div>

<div class="autofunction">

wrap\_text

</div>

## Parsing

<div class="autoclass" data-members="">

OptionParser

</div>

## Shell Completion

See \[/shell-completion\](/shell-completion.md) for information about enabling and customizing Click's shell completion system.

<div class="currentmodule">

click.shell\_completion

</div>

<div class="autoclass">

CompletionItem

</div>

<div class="autoclass" data-members="" data-member-order="bysource">

ShellComplete

</div>

<div class="autofunction">

add\_completion\_class

</div>

## Testing

<div class="currentmodule">

click.testing

</div>

<div class="autoclass" data-members="">

CliRunner

</div>

<div class="autoclass" data-members="">

Result

</div>

---

arguments.md

---

# Arguments

<div class="currentmodule">

click

</div>

Arguments work similarly to \[options \<options\>\](\#options-\<options\>) but are positional. They also only support a subset of the features of options due to their syntactical nature. Click will also not attempt to document arguments for you and wants you to \[document them manually \<documenting-arguments\>\](\#document-them-manually-\<documenting-arguments\>) in order to avoid ugly help pages.

## Basic Arguments

The most basic option is a simple string argument of one value. If no type is provided, the type of the default value is used, and if no default value is provided, the type is assumed to be <span class="title-ref">STRING</span>.

Example:

And what it looks like:

## Variadic Arguments

The second most common version is variadic arguments where a specific (or unlimited) number of arguments is accepted. This can be controlled with the `nargs` parameter. If it is set to `-1`, then an unlimited number of arguments is accepted.

The value is then passed as a tuple. Note that only one argument can be set to `nargs=-1`, as it will eat up all arguments.

Example:

And what it looks like:

Note that this is not how you would write this application. The reason for this is that in this particular example the arguments are defined as strings. Filenames, however, are not strings\! They might be on certain operating systems, but not necessarily on all. For better ways to write this, see the next sections.

<div class="admonition">

Note on Non-Empty Variadic Arguments

If you come from `argparse`, you might be missing support for setting `nargs` to `+` to indicate that at least one argument is required.

This is supported by setting `required=True`. However, this should not be used if you can avoid it as we believe scripts should gracefully degrade into becoming noops if a variadic argument is empty. The reason for this is that very often, scripts are invoked with wildcard inputs from the command line and they should not error out if the wildcard is empty.

</div>

## File Arguments

Since all the examples have already worked with filenames, it makes sense to explain how to deal with files properly. Command line tools are more fun if they work with files the Unix way, which is to accept `-` as a special file that refers to stdin/stdout.

Click supports this through the <span class="title-ref">click.File</span> type which intelligently handles files for you. It also deals with Unicode and bytes correctly for all versions of Python so your script stays very portable.

Example:

And what it does:

## File Path Arguments

In the previous example, the files were opened immediately. But what if we just want the filename? The naïve way is to use the default string argument type. The <span class="title-ref">Path</span> type has several checks available which raise nice errors if they fail, such as existence. Filenames in these error messages are formatted with <span class="title-ref">format\_filename</span>, so any undecodable bytes will be printed nicely.

Example:

And what it does:

## File Opening Safety

The <span class="title-ref">FileType</span> type has one problem it needs to deal with, and that is to decide when to open a file. The default behavior is to be "intelligent" about it. What this means is that it will open stdin/stdout and files opened for reading immediately. This will give the user direct feedback when a file cannot be opened, but it will only open files for writing the first time an IO operation is performed by automatically wrapping the file in a special wrapper.

This behavior can be forced by passing `lazy=True` or `lazy=False` to the constructor. If the file is opened lazily, it will fail its first IO operation by raising an <span class="title-ref">FileError</span>.

Since files opened for writing will typically immediately empty the file, the lazy mode should only be disabled if the developer is absolutely sure that this is intended behavior.

Forcing lazy mode is also very useful to avoid resource handling confusion. If a file is opened in lazy mode, it will receive a `close_intelligently` method that can help figure out if the file needs closing or not. This is not needed for parameters, but is necessary for manually prompting with the <span class="title-ref">prompt</span> function as you do not know if a stream like stdout was opened (which was already open before) or a real file that needs closing.

Starting with Click 2.0, it is also possible to open files in atomic mode by passing `atomic=True`. In atomic mode, all writes go into a separate file in the same folder, and upon completion, the file will be moved over to the original location. This is useful if a file regularly read by other users is modified.

## Environment Variables

Like options, arguments can also grab values from an environment variable. Unlike options, however, this is only supported for explicitly named environment variables.

Example usage:

And from the command line:

In that case, it can also be a list of different environment variables where the first one is picked.

Generally, this feature is not recommended because it can cause the user a lot of confusion.

## Option-Like Arguments

Sometimes, you want to process arguments that look like options. For instance, imagine you have a file named `-foo.txt`. If you pass this as an argument in this manner, Click will treat it as an option.

To solve this, Click does what any POSIX style command line script does, and that is to accept the string `--` as a separator for options and arguments. After the `--` marker, all further parameters are accepted as arguments.

Example usage:

And from the command line:

If you don't like the `--` marker, you can set ignore\_unknown\_options to True to avoid checking unknown options:

And from the command line:

---

changes.md

---

# Changes

<div class="currentmodule">

click

</div>

## Version 8.2.0

Unreleased

  - Drop support for Python 3.7. `2588`
  - Use modern packaging metadata with `pyproject.toml` instead of `setup.cfg`. `326`
  - Use `flit_core` instead of `setuptools` as build backend.
  - Deprecate the `__version__` attribute. Use feature detection, or `importlib.metadata.version("click")`, instead. `2598`
  - `BaseCommand` is deprecated. `Command` is the base class for all commands. `2589`
  - `MultiCommand` is deprecated. `Group` is the base class for all group commands. `2590`
  - The current parser and related classes and methods, are deprecated. `2205`
      - `OptionParser` and the `parser` module, which is a modified copy of `optparse` in the standard library.
      - `Context.protected_args` is unneeded. `Context.args` contains any remaining arguments while parsing.
      - `Parameter.add_to_parser` (on both `Argument` and `Option`) is unneeded. Parsing works directly without building a separate parser.
      - `split_arg_string` is moved from `parser` to `shell_completion`.
  - Enable deferred evaluation of annotations with `from __future__ import annotations`. `2270`
  - When generating a command's name from a decorated function's name, the suffixes `_command`, `_cmd`, `_group`, and `_grp` are removed. `2322`
  - Show the `types.ParamType.name` for `types.Choice` options within `--help` message if `show_choices=False` is specified. `2356`
  - Do not display default values in prompts when `Option.show_default` is `False`. `2509`
  - Add `get_help_extra` method on `Option` to fetch the generated extra items used in `get_help_record` to render help text. `2516` `2517`
  - Keep stdout and stderr streams independent in `CliRunner`. Always collect stderr output and never raise an exception. Add a new output\` stream to simulate what the user sees in its terminal. Removes the `mix_stderr` parameter in `CliRunner`. `2522` `2523`
  - `Option.show_envvar` now also shows environment variable in error messages. `2695` `2696`
  - `Context.close` will be called on exit. This results in all `Context.call_on_close` callbacks and context managers added via `Context.with_resource` to be closed on exit as well. `2680`
  - Add `ProgressBar(hidden: bool)` to allow hiding the progressbar. `2609`
  - A `UserWarning` will be shown when multiple parameters attempt to use the same name. `2396`\`
  - When using `Option.envvar` with `Option.flag_value`, the `flag_value` will always be used instead of the value of the environment variable. `2746` `2788`
  - Add `Choice.get_invalid_choice_message` method for customizing the invalid choice message. `2621` `2622`
  - If help is shown because `no_args_is_help` is enabled (defaults to `True` for groups, `False` for commands), the exit code is 2 instead of 0. `1489` `1489`
  - Contexts created during shell completion are closed properly, fixing `ResourceWarning`s when using `click.File`. `2644` `2800` `2767`
  - `click.edit(filename)` now supports passing an iterable of filenames in case the editor supports editing multiple files at once. Its return type is now also typed: `AnyStr` if `text` is passed, otherwise `None`. `2067` `2068`
  - Specialized typing of `progressbar(length=...)` as `ProgressBar[int]`. `2630`
  - Improve `echo_via_pager` behaviour in face of errors. `2674`
      - Terminate the pager in case a generator passed to `echo_via_pager` raises an exception.
      - Ensure to always close the pipe to the pager process and wait for it to terminate.
      - `echo_via_pager` will not ignore `KeyboardInterrupt` anymore. This allows the user to search for future output of the generator when using less and then aborting the program using ctrl-c.

## Version 8.1.8

Unreleased

  - Fix an issue with type hints for `click.open_file()`. `2717`
  - Fix issue where error message for invalid `click.Path` displays on multiple lines. `2697`
  - Fixed issue that prevented a default value of `""` from being displayed in the help for an option. `2500`
  - The test runner handles stripping color consistently on Windows. `2705`
  - Show correct value for flag default when using `default_map`. `2632`
  - Fix `click.echo(color=...)` passing `color` to coloroma so it can be forced on Windows. `2606`.

## Version 8.1.7

Released 2023-08-17

  - Fix issue with regex flags in shell completion. `2581`
  - Bash version detection issues a warning instead of an error. `2574`
  - Fix issue with completion script for Fish shell. `2567`

## Version 8.1.6

Released 2023-07-18

  - Fix an issue with type hints for `@click.group()`. `2558`

## Version 8.1.5

Released 2023-07-13

  - Fix an issue with type hints for `@click.command()`, `@click.option()`, and other decorators. Introduce typing tests. `2558`

## Version 8.1.4

Released 2023-07-06

  - Replace all `typing.Dict` occurrences to `typing.MutableMapping` for parameter hints. `2255`
  - Improve type hinting for decorators and give all generic types parameters. `2398`
  - Fix return value and type signature of <span class="title-ref">shell\_completion.add\_completion\_class</span> function. `2421`
  - Bash version detection doesn't fail on Windows. `2461`
  - Completion works if there is a dot (`.`) in the program name. `2166`
  - Improve type annotations for pyright type checker. `2268`
  - Improve responsiveness of `click.clear()`. `2284`
  - Improve command name detection when using Shiv or PEX. `2332`
  - Avoid showing empty lines if command help text is empty. `2368`
  - ZSH completion script works when loaded from `fpath`. `2344`.
  - `EOFError` and `KeyboardInterrupt` tracebacks are not suppressed when `standalone_mode` is disabled. `2380`
  - `@group.command` does not fail if the group was created with a custom `command_class`. `2416`
  - `multiple=True` is allowed for flag options again and does not require setting `default=()`. `2246, 2292, 2295`
  - Make the decorators returned by `@argument()` and `@option()` reusable when the `cls` parameter is used. `2294`
  - Don't fail when writing filenames to streams with strict errors. Replace invalid bytes with the replacement character (`�`). `2395`
  - Remove unnecessary attempt to detect MSYS2 environment. `2355`
  - Remove outdated and unnecessary detection of App Engine environment. `2554`
  - `echo()` does not fail when no streams are attached, such as with `pythonw` on Windows. `2415`
  - Argument with `expose_value=False` do not cause completion to fail. `2336`

## Version 8.1.3

Released 2022-04-28

  - Use verbose form of `typing.Callable` for `@command` and `@group`. `2255`
  - Show error when attempting to create an option with `multiple=True, is_flag=True`. Use `count` instead. `2246`

## Version 8.1.2

Released 2022-03-31

  - Fix error message for readable path check that was mixed up with the executable check. `2236`
  - Restore parameter order for `Path`, placing the `executable` parameter at the end. It is recommended to use keyword arguments instead of positional arguments. `2235`

## Version 8.1.1

Released 2022-03-30

  - Fix an issue with decorator typing that caused type checking to report that a command was not callable. `2227`

## Version 8.1.0

Released 2022-03-28

  - Drop support for Python 3.6. `2129`
  - Remove previously deprecated code. `2130`
      - `Group.resultcallback` is renamed to `result_callback`.
      - `autocompletion` parameter to `Command` is renamed to `shell_complete`.
      - `get_terminal_size` is removed, use `shutil.get_terminal_size` instead.
      - `get_os_args` is removed, use `sys.argv[1:]` instead.
  - Rely on `538` and `540` to handle selecting UTF-8 encoding instead of ASCII. Click's locale encoding detection is removed. `2198`
  - Single options boolean flags with `show_default=True` only show the default if it is `True`. `1971`
  - The `command` and `group` decorators can be applied with or without parentheses. `1359`
  - The `Path` type can check whether the target is executable. `1961`
  - `Command.show_default` overrides `Context.show_default`, instead of the other way around. `1963`
  - Parameter decorators and `@group` handles `cls=None` the same as not passing `cls`. `@option` handles `help=None` the same as not passing `help`. `#1959`
  - A flag option with `required=True` requires that the flag is passed instead of choosing the implicit default value. `1978`
  - Indentation in help text passed to `Option` and `Command` is cleaned the same as using the `@option` and `@command` decorators does. A command's `epilog` and `short_help` are also processed. `1985`
  - Store unprocessed `Command.help`, `epilog` and `short_help` strings. Processing is only done when formatting help text for output. `2149`
  - Allow empty str input for `prompt()` when `confirmation_prompt=True` and `default=""`. `2157`
  - Windows glob pattern expansion doesn't fail if a value is an invalid pattern. `2195`
  - It's possible to pass a list of `params` to `@command`. Any params defined with decorators are appended to the passed params. `2131`.
  - `@command` decorator is annotated as returning the correct type if a `cls` argument is used. `2211`
  - A `Group` with `invoke_without_command=True` and `chain=False` will invoke its result callback with the group function's return value. `2124`
  - `to_info_dict` will not fail if a `ParamType` doesn't define a `name`. `2168`
  - Shell completion prioritizes option values with option prefixes over new options. `2040`
  - Options that get an environment variable value using `autoenvvar_prefix` treat an empty value as `None`, consistent with a direct `envvar`. `2146`

## Version 8.0.4

Released 2022-02-18

  - `open_file` recognizes `Path("-")` as a standard stream, the same as the string `"-"`. `2106`
  - The `option` and `argument` decorators preserve the type annotation of the decorated function. `2155`
  - A callable default value can customize its help text by overriding `__str__` instead of always showing `(dynamic)`. `2099`
  - Fix a typo in the Bash completion script that affected file and directory completion. If this script was generated by a previous version, it should be regenerated. `2163`
  - Fix typing for `echo` and `secho` file argument. `2174, 2185`

## Version 8.0.3

Released 2021-10-10

  - Fix issue with `Path(resolve_path=True)` type creating invalid paths. `2088`
  - Importing `readline` does not cause the `confirm()` prompt to disappear when pressing backspace. `2092`
  - Any default values injected by `invoke()` are cast to the corresponding parameter's type. `2089, 2090`

## Version 8.0.2

Released 2021-10-08

  - `is_bool_flag` is not set to `True` if `is_flag` is `False`. `1925`
  - Bash version detection is locale independent. `1940`
  - Empty `default` value is not shown for `multiple=True`. `1969`
  - Fix shell completion for arguments that start with a forward slash such as absolute file paths. `1929`
  - `Path` type with `resolve_path=True` resolves relative symlinks to be relative to the containing directory. `1921`
  - Completion does not skip Python's resource cleanup when exiting, avoiding some unexpected warning output. `1738, 2017`
  - Fix type annotation for `type` argument in `prompt` function. `2062`
  - Fix overline and italic styles, which were incorrectly added when adding underline. `2058`
  - An option with `count=True` will not show "\[x\>=0\]" in help text. `2072`
  - Default values are not cast to the parameter type twice during processing. `2085`
  - Options with `multiple` and `flag_value` use the flag value instead of leaving an internal placeholder. `2001`

## Version 8.0.1

Released 2021-05-19

  - Mark top-level names as exported so type checking understand imports in user projects. `1879`
  - Annotate `Context.obj` as `Any` so type checking allows all operations on the arbitrary object. `1885`
  - Fix some types that weren't available in Python 3.6.0. `1882`
  - Fix type checking for iterating over `ProgressBar` object. `1892`
  - The `importlib_metadata` backport package is installed on Python \< 3.8. `1889`
  - Arguments with `nargs=-1` only use env var value if no command line values are given. `1903`
  - Flag options guess their type from `flag_value` if given, like regular options do from `default`. `1886`
  - Added documentation that custom parameter types may be passed already valid values in addition to strings. `1898`
  - Resolving commands returns the name that was given, not `command.name`, fixing an unintended change to help text and `default_map` lookups. When using patterns like `AliasedGroup`, override `resolve_command` to change the name that is returned if needed. `1895`
  - If a default value is invalid, it does not prevent showing help text. `1889`
  - Pass `windows_expand_args=False` when calling the main command to disable pattern expansion on Windows. There is no way to escape patterns in CMD, so if the program needs to pass them on as-is then expansion must be disabled. `1901`

## Version 8.0.0

Released 2021-05-11

  - Drop support for Python 2 and 3.5.
  - Colorama is always installed on Windows in order to provide style and color support. `1784`
  - Adds a repr to Command, showing the command name for friendlier debugging. `1267`, `1295`
  - Add support for distinguishing the source of a command line parameter. `1264`, `1329`
  - Add an optional parameter to `ProgressBar.update` to set the `current_item`. `1226`, `1332`
  - `version_option` uses `importlib.metadata` (or the `importlib_metadata` backport) instead of `pkg_resources`. The version is detected based on the package name, not the entry point name. The Python package name must match the installed package name, or be passed with `package_name=`. `1582`
  - If validation fails for a prompt with `hide_input=True`, the value is not shown in the error message. `1460`
  - An `IntRange` or `FloatRange` option shows the accepted range in its help text. `1525`, `1303`
  - `IntRange` and `FloatRange` bounds can be open (`<`) instead of closed (`<=`) by setting `min_open` and `max_open`. Error messages have changed to reflect this. `1100`
  - An option defined with duplicate flag names (`"--foo/--foo"`) raises a `ValueError`. `1465`
  - `echo()` will not fail when using pytest's `capsys` fixture on Windows. `1590`
  - Resolving commands returns the canonical command name instead of the matched name. This makes behavior such as help text and `Context.invoked_subcommand` consistent when using patterns like `AliasedGroup`. `1422`
  - The `BOOL` type accepts the values "on" and "off". `1629`
  - A `Group` with `invoke_without_command=True` will always invoke its result callback. `1178`
  - `nargs == -1` and `nargs > 1` is parsed and validated for values from environment variables and defaults. `729`
  - Detect the program name when executing a module or package with `python -m name`. `1603`
  - Include required parent arguments in help synopsis of subcommands. `1475`
  - Help for boolean flags with `show_default=True` shows the flag name instead of `True` or `False`. `1538`
  - Non-string objects passed to `style()` and `secho()` will be converted to string. `1146`
  - `edit(require_save=True)` will detect saves for editors that exit very fast on filesystems with 1 second resolution. `1050`
  - New class attributes make it easier to use custom core objects throughout an entire application. `938`
      - `Command.context_class` controls the context created when running the command.
      - `Context.invoke` creates new contexts of the same type, so a custom type will persist to invoked subcommands.
      - `Context.formatter_class` controls the formatter used to generate help and usage.
      - `Group.command_class` changes the default type for subcommands with `@group.command()`.
      - `Group.group_class` changes the default type for subgroups with `@group.group()`. Setting it to `type` will create subgroups of the same type as the group itself.
      - Core objects use `super()` consistently for better support of subclassing.
  - Use `Context.with_resource()` to manage resources that would normally be used in a `with` statement, allowing them to be used across subcommands and callbacks, then cleaned up when the context ends. `1191`
  - The result object returned by the test runner's `invoke()` method has a `return_value` attribute with the value returned by the invoked command. `1312`
  - Required arguments with the `Choice` type show the choices in curly braces to indicate that one is required (`{a|b|c}`). `1272`
  - If only a name is passed to `option()`, Click suggests renaming it to `--name`. `1355`
  - A context's `show_default` parameter defaults to the value from the parent context. `1565`
  - `click.style()` can output 256 and RGB color codes. Most modern terminals support these codes. `1429`
  - When using `CliRunner.invoke()`, the replaced `stdin` file has `name` and `mode` attributes. This lets `File` options with the `-` value match non-testing behavior. `1064`
  - When creating a `Group`, allow passing a list of commands instead of a dict. `1339`
  - When a long option name isn't valid, use `difflib` to make better suggestions for possible corrections. `1446`
  - Core objects have a `to_info_dict()` method. This gathers information about the object's structure that could be useful for a tool generating user-facing documentation. To get the structure of an entire CLI, use `Context(cli).to_info_dict()`. `461`
  - Redesign the shell completion system. `1484`, `1622`
      - Support Bash \>= 4.4, Zsh, and Fish, with the ability for extensions to add support for other shells.
      - Allow commands, groups, parameters, and types to override their completions suggestions.
      - Groups complete the names commands were registered with, which can differ from the name they were created with.
      - The `autocompletion` parameter for options and arguments is renamed to `shell_complete`. The function must take `ctx, param, incomplete`, must do matching rather than return all values, and must return a list of strings or a list of `CompletionItem`. The old name and behavior is deprecated and will be removed in 8.1.
      - The env var values used to start completion have changed order. The shell now comes first, such as `{shell}_source` rather than `source_{shell}`, and is always required.
  - Completion correctly parses command line strings with incomplete quoting or escape sequences. `1708`
  - Extra context settings (`obj=...`, etc.) are passed on to the completion system. `942`
  - Include `--help` option in completion. `1504`
  - `ParameterSource` is an `enum.Enum` subclass. `1530`
  - Boolean and UUID types strip surrounding space before converting. `1605`
  - Adjusted error message from parameter type validation to be more consistent. Quotes are used to distinguish the invalid value. `1605`
  - The default value for a parameter with `nargs` \> 1 and `multiple=True` must be a list of tuples. `1649`
  - When getting the value for a parameter, the default is tried in the same section as other sources to ensure consistent processing. `1649`
  - All parameter types accept a value that is already the correct type. `1649`
  - For shell completion, an argument is considered incomplete if its value did not come from the command line args. `1649`
  - Added `ParameterSource.PROMPT` to track parameter values that were prompted for. `1649`
  - Options with `nargs` \> 1 no longer raise an error if a default is not given. Parameters with `nargs` \> 1 default to `None`, and parameters with `multiple=True` or `nargs=-1` default to an empty tuple. `472`
  - Handle empty env vars as though the option were not passed. This extends the change introduced in 7.1 to be consistent in more cases. `1285`
  - `Parameter.get_default()` checks `Context.default_map` to handle overrides consistently in help text, `invoke()`, and prompts. `1548`
  - Add `prompt_required` param to `Option`. When set to `False`, the user will only be prompted for an input if no value was passed. `736`
  - Providing the value to an option can be made optional through `is_flag=False`, and the value can instead be prompted for or passed in as a default value. `549, 736, 764, 921, 1015, 1618`
  - Fix formatting when `Command.options_metavar` is empty. `1551`
  - Revert adding space between option help text that wraps. `1831`
  - The default value passed to `prompt` will be cast to the correct type like an input value would be. `1517`
  - Automatically generated short help messages will stop at the first ending of a phrase or double linebreak. `1082`
  - Skip progress bar render steps for efficiency with very fast iterators by setting `update_min_steps`. `676`
  - Respect `case_sensitive=False` when doing shell completion for `Choice` `1692`
  - Use `mkstemp()` instead of `mktemp()` in pager implementation. `1752`
  - If `Option.show_default` is a string, it is displayed even if `default` is `None`. `1732`
  - `click.get_terminal_size()` is deprecated and will be removed in 8.1. Use <span class="title-ref">shutil.get\_terminal\_size</span> instead. `1736`
  - Control the location of the temporary directory created by `CLIRunner.isolated_filesystem` by passing `temp_dir`. A custom directory will not be removed automatically. `395`
  - `click.confirm()` will prompt until input is given if called with `default=None`. `1381`
  - Option prompts validate the value with the option's callback in addition to its type. `457`
  - `confirmation_prompt` can be set to a custom string. `723`
  - Allow styled output in Jupyter on Windows. `1271`
  - `style()` supports the `strikethrough`, `italic`, and `overline` styles. `805, 1821`
  - Multiline marker is removed from short help text. `1597`
  - Restore progress bar behavior of echoing only the label if the file is not a TTY. `1138`
  - Progress bar output is shown even if execution time is less than 0.5 seconds. `1648`
  - Progress bar `item_show_func` shows the current item, not the previous item. `1353`
  - The `Path` param type can be passed `path_type=pathlib.Path` to return a path object instead of a string. `405`
  - `TypeError` is raised when parameter with `multiple=True` or `nargs > 1` has non-iterable default. `1749`
  - Add a `pass_meta_key` decorator for passing a key from `Context.meta`. This is useful for extensions using `meta` to store information. `1739`
  - `Path` `resolve_path` resolves symlinks on Windows Python \< 3.8. `1813`
  - Command deprecation notice appears at the start of the help text, as well as in the short help. The notice is not in all caps. `1791`
  - When taking arguments from `sys.argv` on Windows, glob patterns, user dir, and env vars are expanded. `1096`
  - Marked messages shown by the CLI with `gettext()` to allow applications to translate Click's built-in strings. `303`
  - Writing invalid characters to `stderr` when using the test runner does not raise a `UnicodeEncodeError`. `848`
  - Fix an issue where `readline` would clear the entire `prompt()` line instead of only the input when pressing backspace. `665`
  - Add all kwargs passed to `Context.invoke()` to `ctx.params`. Fixes an inconsistency when nesting `Context.forward()` calls. `1568`
  - The `MultiCommand.resultcallback` decorator is renamed to `result_callback`. The old name is deprecated. `1160`
  - Fix issues with `CliRunner` output when using `echo_stdin=True`. `1101`
  - Fix a bug of `click.utils.make_default_short_help` for which the returned string could be as long as `max_width + 3`. `1849`
  - When defining a parameter, `default` is validated with `multiple` and `nargs`. More validation is done for values being processed as well. `1806`
  - `HelpFormatter.write_text` uses the full line width when wrapping text. `1871`

## Version 7.1.2

Released 2020-04-27

  - Revert applying shell quoting to commands for `echo_with_pager` and `edit`. This was intended to allows spaces in commands, but caused issues if the string was actually a command and arguments, or on Windows. Instead, the string must be quoted manually as it should appear on the command line. `1514`

## Version 7.1.1

Released 2020-03-09

  - Fix `ClickException` output going to stdout instead of stderr. `1495`

## Version 7.1

Released 2020-03-09

  - Fix PyPI package name, "click" is lowercase again.
  - Fix link in `unicode_literals` error message. `1151`
  - Add support for colored output on UNIX Jupyter notebooks. `1185`
  - Operations that strip ANSI controls will strip the cursor hide/show sequences. `1216`
  - Remove unused compat shim for `bytes`. `1195`
  - Expand testing around termui, especially getchar on Windows. `1116`
  - Fix output on Windows Python 2.7 built with MSVC 14. `1342`
  - Fix `OSError` when running in MSYS2. `1338`
  - Fix `OSError` when redirecting to `NUL` stream on Windows. `1065`
  - Fix memory leak when parsing Unicode arguments on Windows. `1136`
  - Fix error in new AppEngine environments. `1462`
  - Always return one of the passed choices for `click.Choice` `1277`, `1318`
  - Add `no_args_is_help` option to `click.Command`, defaults to False `1167`
  - Add `show_default` parameter to `Context` to enable showing defaults globally. `1018`
  - Handle `env MYPATH=''` as though the option were not passed. `1196`
  - It is once again possible to call `next(bar)` on an active progress bar instance. `1125`
  - `open_file` with `atomic=True` retains permissions of existing files and respects the current umask for new files. `1376`
  - When using the test `CliRunner` with `mix_stderr=False`, if `result.stderr` is empty it will not raise a `ValueError`. `1193`
  - Remove the unused `mix_stderr` parameter from `CliRunner.invoke`. `1435`
  - Fix `TypeError` raised when using bool flags and specifying `type=bool`. `1287`
  - Newlines in option help text are replaced with spaces before re-wrapping to avoid uneven line breaks. `834`
  - `MissingParameter` exceptions are printable in the Python interpreter. `1139`
  - Fix how default values for file-type options are shown during prompts. `914`
  - Fix environment variable automatic generation for commands containing `-`. `1253`
  - Option help text replaces newlines with spaces when rewrapping, but preserves paragraph breaks, fixing multiline formatting. `834, 1066, 1397`
  - Option help text that is wrapped adds an extra newline at the end to distinguish it from the next option. `1075`
  - Consider `sensible-editor` when determining the editor to use for `click.edit()`. `1469`
  - Arguments to system calls such as the executable path passed to `click.edit` can contains spaces. `1470`
  - Add ZSH completion autoloading and error handling. `1348`
  - Add a repr to `Command`, `Group`, `Option`, and `Argument`, showing the name for friendlier debugging. `1267`
  - Completion doesn't consider option names if a value starts with `-` after the `--` separator. `1247`
  - ZSH completion escapes special characters in values. `1418`
  - Add completion support for Fish shell. `1423`
  - Decoding bytes option values falls back to UTF-8 in more cases. `1468`
  - Make the warning about old 2-arg parameter callbacks a deprecation warning, to be removed in 8.0. This has been a warning since Click 2.0. `1492`
  - Adjust error messages to standardize the types of quotes used so they match error messages from Python.

## Version 7.0

Released 2018-09-25

  - Drop support for Python 2.6 and 3.3. `967, 976`
  - Wrap `click.Choice`'s missing message. `202`, `1000`
  - Add native ZSH autocompletion support. `323`, `865`
  - Document that ANSI color info isn't parsed from bytearrays in Python
    2.  `334`
  - Document byte-stripping behavior of `CliRunner`. `334`, `1010`
  - Usage errors now hint at the `--help` option. `393`, `557`
  - Implement streaming pager. `409`, `889`
  - Extract bar formatting to its own method. `414`
  - Add `DateTime` type for converting input in given date time formats. `423`
  - `secho`'s first argument can now be `None`, like in `echo`. `424`
  - Fixes a `ZeroDivisionError` in `ProgressBar.make_step`, when the arg passed to the first call of `ProgressBar.update` is 0. `447`, `1012`
  - Show progressbar only if total execution time is visible. `487`
  - Added the ability to hide commands and options from help. `500`
  - Document that options can be `required=True`. `514`, `1022`
  - Non-standalone calls to `Context.exit` return the exit code, rather than calling `sys.exit`. `667`, `533, 1098`
  - `click.getchar()` returns Unicode in Python 3 on Windows, consistent with other platforms. `537, 821, 822, 1088`, `1108`
  - Added `FloatRange` type. `538, 553`
  - Added support for bash completion of `type=click.Choice` for `Options` and `Arguments`. `535`, `681`
  - Only allow one positional arg for `Argument` parameter declaration. `568, 574`, `1014`
  - Add `case_sensitive=False` as an option to Choice. `569`
  - `click.getchar()` correctly raises `KeyboardInterrupt` on "^C" and `EOFError` on "^D" on Linux. `583`, `1115`
  - Fix encoding issue with `click.getchar(echo=True)` on Linux. `1115`
  - `param_hint` in errors now derived from param itself. `598, 704`, `709`
  - Add a test that ensures that when an argument is formatted into a usage error, its metavar is used, not its name. `612`
  - Allow setting `prog_name` as extra in `CliRunner.invoke`. `616`, `999`
  - Help text taken from docstrings truncates at the `\f` form feed character, useful for hiding Sphinx-style parameter documentation. `629, 1091`
  - `launch` now works properly under Cygwin. `650`
  - Update progress after iteration. `651`, `706`
  - `CliRunner.invoke` now may receive `args` as a string representing a Unix shell command. `664`
  - Make `Argument.make_metavar()` default to type metavar. `675`
  - Add documentation for `ignore_unknown_options`. `684`
  - Add bright colors support for `click.style` and fix the reset option for parameters `fg` and `bg`. `703`, `809`
  - Add `show_envvar` for showing environment variables in help. `710`
  - Avoid `BrokenPipeError` during interpreter shutdown when stdout or stderr is a closed pipe. `712`, `1106`
  - Document customizing option names. `725`, `1016`
  - Disable `sys._getframes()` on Python interpreters that don't support it. `728`
  - Fix bug in test runner when calling `sys.exit` with `None`. `739`
  - Clarify documentation on command line options. `741`, `1003`
  - Fix crash on Windows console. `744`
  - Fix bug that caused bash completion to give improper completions on chained commands. `754`, `774`
  - Added support for dynamic bash completion from a user-supplied callback. `755`
  - Added support for bash completions containing spaces. `773`
  - Allow autocompletion function to determine whether or not to return completions that start with the incomplete argument. `790`, `806`
  - Fix option naming routine to match documentation and be deterministic. `793`, `794`
  - Fix path validation bug. `795`, `1020`
  - Add test and documentation for `Option` naming: functionality. `799`
  - Update doc to match arg name for `path_type`. `801`
  - Raw strings added so correct escaping occurs. `807`
  - Fix 16k character limit of `click.echo` on Windows. `816`, `819`
  - Overcome 64k character limit when writing to binary stream on Windows 7. `825`, `830`
  - Add bool conversion for "t" and "f". `842`
  - `NoSuchOption` errors take `ctx` so that `--help` hint gets printed in error output. `860`
  - Fixed the behavior of Click error messages with regards to Unicode on 2.x and 3.x. Message is now always Unicode and the str and Unicode special methods work as you expect on that platform. `862`
  - Progress bar now uses stderr by default. `863`
  - Add support for auto-completion documentation. `866`, `869`
  - Allow `CliRunner` to separate stdout and stderr. `868`
  - Fix variable precedence. `873`, `874`
  - Fix invalid escape sequences. `877`
  - Fix `ResourceWarning` that occurs during some tests. `878`
  - When detecting a misconfigured locale, don't fail if the `locale` command fails. `880`
  - Add `case_sensitive=False` as an option to `Choice` types. `887`
  - Force stdout/stderr writable. This works around issues with badly patched standard streams like those from Jupyter. `918`
  - Fix completion of subcommand options after last argument `919`, `930`
  - `_AtomicFile` now uses the `realpath` of the original filename so that changing the working directory does not affect it. `920`
  - Fix incorrect completions when defaults are present `925`, `930`
  - Add copy option attrs so that custom classes can be re-used. `926`, `994`
  - "x" and "a" file modes now use stdout when file is `"-"`. `929`
  - Fix missing comma in `__all__` list. `935`
  - Clarify how parameters are named. `949`, `1009`
  - Stdout is now automatically set to non blocking. `954`
  - Do not set options twice. `962`
  - Move `fcntl` import. `965`
  - Fix Google App Engine `ImportError`. `995`
  - Better handling of help text for dynamic default option values. `996`
  - Fix `get_winter_size()` so it correctly returns `(0,0)`. `997`
  - Add test case checking for custom param type. `1001`
  - Allow short width to address cmd formatting. `1002`
  - Add details about Python version support. `1004`
  - Added deprecation flag to commands. `1005`
  - Fixed issues where `fd` was undefined. `1007`
  - Fix formatting for short help. `1008`
  - Document how `auto_envvar_prefix` works with command groups. `1011`
  - Don't add newlines by default for progress bars. `1013`
  - Use Python sorting order for ZSH completions. `1047`, `1059`
  - Document that parameter names are converted to lowercase by default. `1055`
  - Subcommands that are named by the function now automatically have the underscore replaced with a dash. If you register a function named `my_command` it becomes `my-command` in the command line interface.
  - Hide hidden commands and options from completion. `1058`, `1061`
  - Fix absolute import blocking Click from being vendored into a project on Windows. `1068`, `1069`
  - Fix issue where a lowercase `auto_envvar_prefix` would not be converted to uppercase. `1105`

## Version 6.7

Released 2017-01-06

  - Make `click.progressbar` work with `codecs.open` files. `637`
  - Fix bug in bash completion with nested subcommands. `639`
  - Fix test runner not saving caller env correctly. `644`
  - Fix handling of SIGPIPE. `62`
  - Deal with broken Windows environments such as Google App Engine's. `711`

## Version 6.6

Released 2016-04-04

  - Fix bug in `click.Path` where it would crash when passed a `-`. `551`

## Version 6.4

Released 2016-03-24

  - Fix bug in bash completion where click would discard one or more trailing arguments. `471`

## Version 6.3

Released 2016-02-22

  - Fix argument checks for interpreter invoke with `-m` and `-c` on Windows.
  - Fixed a bug that cased locale detection to error out on Python 3.

## Version 6.2

Released 2015-11-27

  - Correct fix for hidden progress bars.

## Version 6.1

Released 2015-11-27

  - Resolved an issue with invisible progress bars no longer rendering.
  - Disable chain commands with subcommands as they were inherently broken.
  - Fix `MissingParameter` not working without parameters passed.

## Version 6.0

Released 2015-11-24, codename "pow pow"

  - Optimized the progressbar rendering to not render when it did not actually change.
  - Explicitly disallow `nargs=-1` with a set default.
  - The context is now closed before it's popped from the stack.
  - Added support for short aliases for the false flag on toggles.
  - Click will now attempt to aid you with debugging locale errors better by listing with the help of the OS what locales are available.
  - Click used to return byte strings on Python 2 in some unit-testing situations. This has been fixed to correctly return unicode strings now.
  - For Windows users on Python 2, Click will now handle Unicode more correctly handle Unicode coming in from the system. This also has the disappointing side effect that filenames will now be always unicode by default in the `Path` type which means that this can introduce small bugs for code not aware of this.
  - Added a `type` parameter to `Path` to force a specific string type on the value.
  - For users running Python on Windows the `echo` and `prompt` functions now work with full unicode functionality in the Python windows console by emulating an output stream. This also applies to getting the virtual output and input streams via `click.get_text_stream(...)`.
  - Unittests now always force a certain virtual terminal width.
  - Added support for allowing dashes to indicate standard streams to the `Path` type.
  - Multi commands in chain mode no longer propagate arguments left over from parsing to the callbacks. It's also now disallowed through an exception when optional arguments are attached to multi commands if chain mode is enabled.
  - Relaxed restriction that disallowed chained commands to have other chained commands as child commands.
  - Arguments with positive nargs can now have defaults implemented. Previously this configuration would often result in slightly unexpected values be returned.

## Version 5.1

Released 2015-08-17

  - Fix a bug in `pass_obj` that would accidentally pass the context too.

## Version 5.0

Released 2015-08-16, codename "tok tok"

  - Removed various deprecated functionality.
  - Atomic files now only accept the `w` mode.
  - Change the usage part of help output for very long commands to wrap their arguments onto the next line, indented by 4 spaces.
  - Fix a bug where return code and error messages were incorrect when using `CliRunner`.
  - Added `get_current_context`.
  - Added a `meta` dictionary to the context which is shared across the linked list of contexts to allow click utilities to place state there.
  - Introduced `Context.scope`.
  - The `echo` function is now threadsafe: It calls the `write` method of the underlying object only once.
  - `prompt(hide_input=True)` now prints a newline on `^C`.
  - Click will now warn if users are using `unicode_literals`.
  - Click will now ignore the `PAGER` environment variable if it is empty or contains only whitespace.
  - The `click-contrib` GitHub organization was created.

## Version 4.1

Released 2015-07-14

  - Fix a bug where error messages would include a trailing `None` string.
  - Fix a bug where Click would crash on docstrings with trailing newlines.
  - Support streams with encoding set to `None` on Python 3 by barfing with a better error.
  - Handle ^C in less-pager properly.
  - Handle return value of `None` from `sys.getfilesystemencoding`
  - Fix crash when writing to unicode files with `click.echo`.
  - Fix type inference with multiple options.

## Version 4.0

Released 2015-03-31, codename "zoom zoom"

  - Added `color` parameters to lots of interfaces that directly or indirectly call into echoing. This previously was always autodetection (with the exception of the `echo_via_pager` function). Now you can forcefully enable or disable it, overriding the auto detection of Click.
  - Added an `UNPROCESSED` type which does not perform any type changes which simplifies text handling on 2.x / 3.x in some special advanced usecases.
  - Added `NoSuchOption` and `BadOptionUsage` exceptions for more generic handling of errors.
  - Added support for handling of unprocessed options which can be useful in situations where arguments are forwarded to underlying tools.
  - Added `max_content_width` parameter to the context which can be used to change the maximum width of help output. By default Click will not format content for more than 80 characters width.
  - Added support for writing prompts to stderr.
  - Fix a bug when showing the default for multiple arguments.
  - Added support for custom subclasses to `option` and `argument`.
  - Fix bug in `clear()` on Windows when colorama is installed.
  - Reject `nargs=-1` for options properly. Options cannot be variadic.
  - Fixed an issue with bash completion not working properly for commands with non ASCII characters or dashes.
  - Added a way to manually update the progressbar.
  - Changed the formatting of missing arguments. Previously the internal argument name was shown in error messages, now the metavar is shown if passed. In case an automated metavar is selected, it's stripped of extra formatting first.

## Version 3.3

Released 2014-09-08

  - Fixed an issue with error reporting on Python 3 for invalid forwarding of commands.

## Version 3.2

Released 2014-08-22

  - Added missing `err` parameter forwarding to the `secho` function.
  - Fixed default parameters not being handled properly by the context invoke method. This is a backwards incompatible change if the function was used improperly.
  - Removed the `invoked_subcommands` attribute largely. It is not possible to provide it to work error free due to how the parsing works so this API has been deprecated.
  - Restored the functionality of `invoked_subcommand` which was broken as a regression in 3.1.

## Version 3.1

Released 2014-08-13

  - Fixed a regression that caused contexts of subcommands to be created before the parent command was invoked which was a regression from earlier Click versions.

## Version 3.0

Released 2014-08-12, codename "clonk clonk"

  - Formatter now no longer attempts to accommodate for terminals smaller than 50 characters. If that happens it just assumes a minimal width.
  - Added a way to not swallow exceptions in the test system.
  - Added better support for colors with pagers and ways to override the autodetection.
  - The CLI runner's result object now has a traceback attached.
  - Improved automatic short help detection to work better with dots that do not terminate sentences.
  - When defining options without actual valid option strings now, Click will give an error message instead of silently passing. This should catch situations where users wanted to created arguments instead of options.
  - Restructured Click internally to support vendoring.
  - Added support for multi command chaining.
  - Added support for defaults on options with `multiple` and options and arguments with `nargs != 1`.
  - Label passed to `progressbar` is no longer rendered with whitespace stripped.
  - Added a way to disable the standalone mode of the `main` method on a Click command to be able to handle errors better.
  - Added support for returning values from command callbacks.
  - Added simplifications for printing to stderr from `echo`.
  - Added result callbacks for groups.
  - Entering a context multiple times defers the cleanup until the last exit occurs.
  - Added `open_file`.

## Version 2.6

Released 2014-08-11

  - Fixed an issue where the wrapped streams on Python 3 would be reporting incorrect values for seekable.

## Version 2.5

Released 2014-07-28

  - Fixed a bug with text wrapping on Python 3.

## Version 2.4

Released 2014-07-04

  - Corrected a bug in the change of the help option in 2.3.

## Version 2.3

Released 2014-07-03

  - Fixed an incorrectly formatted help record for count options.
  - Add support for ansi code stripping on Windows if colorama is not available.
  - Restored the Click 1.0 handling of the help parameter for certain edge cases.

## Version 2.2

Released 2014-06-26

  - Fixed tty detection on PyPy.
  - Fixed an issue that progress bars were not rendered when the context manager was entered.

## Version 2.1

Released 2014-06-14

  - Fixed the <span class="title-ref">launch</span> function on windows.
  - Improved the colorama support on windows to try hard to not screw up the console if the application is interrupted.
  - Fixed windows terminals incorrectly being reported to be 80 characters wide instead of 79
  - Use colorama win32 bindings if available to get the correct dimensions of a windows terminal.
  - Fixed an issue with custom function types on Python 3.
  - Fixed an issue with unknown options being incorrectly reported in error messages.

## Version 2.0

Released 2014-06-06, codename "tap tap tap"

  - Added support for opening stdin/stdout on Windows in binary mode correctly.
  - Added support for atomic writes to files by going through a temporary file.
  - Introduced <span class="title-ref">BadParameter</span> which can be used to easily perform custom validation with the same error messages as in the type system.
  - Added <span class="title-ref">progressbar</span>; a function to show progress bars.
  - Added <span class="title-ref">get\_app\_dir</span>; a function to calculate the home folder for configs.
  - Added transparent handling for ANSI codes into the <span class="title-ref">echo</span> function through `colorama`.
  - Added <span class="title-ref">clear</span> function.
  - Breaking change: parameter callbacks now get the parameter object passed as second argument. There is legacy support for old callbacks which will warn but still execute the script.
  - Added <span class="title-ref">style</span>, <span class="title-ref">unstyle</span> and <span class="title-ref">secho</span> for ANSI styles.
  - Added an <span class="title-ref">edit</span> function that invokes the default editor.
  - Added an <span class="title-ref">launch</span> function that launches browsers and applications.
  - Nargs of -1 for arguments can now be forced to be a single item through the required flag. It defaults to not required.
  - Setting a default for arguments now implicitly makes it non required.
  - Changed "yN" / "Yn" to "y/N" and "Y/n" in confirmation prompts.
  - Added basic support for bash completion.
  - Added <span class="title-ref">getchar</span> to fetch a single character from the terminal.
  - Errors now go to stderr as intended.
  - Fixed various issues with more exotic parameter formats like DOS/Windows style arguments.
  - Added <span class="title-ref">pause</span> which works similar to the Windows `pause` cmd built-in but becomes an automatic noop if the application is not run through a terminal.
  - Added a bit of extra information about missing choice parameters.
  - Changed how the help function is implemented to allow global overriding of the help option.
  - Added support for token normalization to implement case insensitive handling.
  - Added support for providing defaults for context settings.

## Version 1.1

Released 2014-05-23

  - Fixed a bug that caused text files in Python 2 to not accept native strings.

## Version 1.0

Released 2014-05-21

  - Initial release.

---

commands.md

---

# Commands and Groups

<div class="currentmodule">

click

</div>

The structure of a Click application is defined with <span class="title-ref">Command</span>, which defines an individual named command, and <span class="title-ref">Group</span>, which defines a nested collection of commands (or more groups) under a name.

## Callback Invocation

For a regular command, the callback is executed whenever the command runs. If the script is the only command, it will always fire (unless a parameter callback prevents it. This for instance happens if someone passes `--help` to the script).

For groups, the situation looks different. In this case, the callback fires whenever a subcommand fires. What this means in practice is that an outer command runs when an inner command runs:

Here is what this looks like:

## Passing Parameters

Click strictly separates parameters between commands and subcommands. What this means is that options and arguments for a specific command have to be specified *after* the command name itself, but *before* any other command names.

This behavior is already observable with the predefined `--help` option. Suppose we have a program called `tool.py`, containing a subcommand called `sub`.

  - `tool.py --help` will return the help for the whole program (listing subcommands).
  - `tool.py sub --help` will return the help for the `sub` subcommand.
  - But `tool.py --help sub` will treat `--help` as an argument for the main program. Click then invokes the callback for `--help`, which prints the help and aborts the program before click can process the subcommand.

## Nested Handling and Contexts

As you can see from the earlier example, the basic command group accepts a debug argument which is passed to its callback, but not to the sync command itself. The sync command only accepts its own arguments.

This allows tools to act completely independent of each other, but how does one command talk to a nested one? The answer to this is the <span class="title-ref">Context</span>.

Each time a command is invoked, a new context is created and linked with the parent context. Normally, you can't see these contexts, but they are there. Contexts are passed to parameter callbacks together with the value automatically. Commands can also ask for the context to be passed by marking themselves with the <span class="title-ref">pass\_context</span> decorator. In that case, the context is passed as first argument.

The context can also carry a program specified object that can be used for the program's purposes. What this means is that you can build a script like this:

If the object is provided, each context will pass the object onwards to its children, but at any level a context's object can be overridden. To reach to a parent, `context.parent` can be used.

In addition to that, instead of passing an object down, nothing stops the application from modifying global state. For instance, you could just flip a global `DEBUG` variable and be done with it.

## Decorating Commands

As you have seen in the earlier example, a decorator can change how a command is invoked. What actually happens behind the scenes is that callbacks are always invoked through the <span class="title-ref">Context.invoke</span> method which automatically invokes a command correctly (by either passing the context or not).

This is very useful when you want to write custom decorators. For instance, a common pattern would be to configure an object representing state and then storing it on the context and then to use a custom decorator to find the most recent object of this sort and pass it as first argument.

For instance, the <span class="title-ref">pass\_obj</span> decorator can be implemented like this:

The <span class="title-ref">Context.invoke</span> command will automatically invoke the function in the correct way, so the function will either be called with `f(ctx, obj)` or `f(obj)` depending on whether or not it itself is decorated with <span class="title-ref">pass\_context</span>.

This is a very powerful concept that can be used to build very complex nested applications; see \[complex-guide\](\#complex-guide) for more information.

## Group Invocation Without Command

By default, a group is not invoked unless a subcommand is passed. In fact, not providing a command automatically passes `--help` by default. This behavior can be changed by passing `invoke_without_command=True` to a group. In that case, the callback is always invoked instead of showing the help page. The context object also includes information about whether or not the invocation would go to a subcommand.

## Custom Groups

You can customize the behavior of a group beyond the arguments it accepts by subclassing <span class="title-ref">click.Group</span>.

The most common methods to override are <span class="title-ref">\~click.Group.get\_command</span> and <span class="title-ref">\~click.Group.list\_commands</span>.

The following example implements a basic plugin system that loads commands from Python files in a folder. The command is lazily loaded to avoid slow startup.

`` `python     import importlib.util     import os     import click      class PluginGroup(click.Group):         def __init__(self, name=None, plugin_folder="commands", **kwargs):             super().__init__(name=name, **kwargs)             self.plugin_folder = plugin_folder          def list_commands(self, ctx):             rv = []              for filename in os.listdir(self.plugin_folder):                 if filename.endswith(".py"):                     rv.append(filename[:-3])              rv.sort()             return rv          def get_command(self, ctx, name):             path = os.path.join(self.plugin_folder, f"{name}.py")             spec = importlib.util.spec_from_file_location(name, path)             module = importlib.util.module_from_spec(spec)             spec.loader.exec_module(module)             return module.cli      cli = PluginGroup(         plugin_folder=os.path.join(os.path.dirname(__file__), "commands")     )      if __name__ == "__main__":         cli()  Custom classes can also be used with decorators:  .. code-block:: python      @click.group(         cls=PluginGroup,         plugin_folder=os.path.join(os.path.dirname(__file__), "commands")     )     def cli():         pass   .. _command-chaining:  Command Chaining ``\` ----------------

It is useful to invoke more than one subcommand in one call. For example, `my-app validate build upload` would invoke `validate`, then `build`, then `upload`. To implement this, pass `chain=True` when creating a group.

You can invoke it like this:

When using chaining, there are a few restrictions:

  - Only the last command may use `nargs=-1` on an argument, otherwise the parser will not be able to find further commands.
  - It is not possible to nest groups below a chain group.
  - On the command line, options must be specified before arguments for each command in the chain.
  - The <span class="title-ref">Context.invoked\_subcommand</span> attribute will be `'*'` because the parser doesn't know the full list of commands that will run yet.

## Command Pipelines

When using chaining, a common pattern is to have each command process the result of the previous command.

A straightforward way to do this is to use <span class="title-ref">make\_pass\_decorator</span> to pass a context object to each command, and store and read the data on that object.

Another way to do this is to collect data returned by each command, then process it at the end of the chain. Use the group's <span class="title-ref">\~Group.result\_callback</span> decorator to register a function that is called after the chain is finished. It is passed the list of return values as well as any parameters registered on the group.

A command can return anything, including a function. Here's an example of that, where each subcommand creates a function that processes the input, then the result callback calls each function. The command takes a file, processes each line, then outputs it. If no subcommands are given, it outputs the contents of the file unchanged.

`` `python     @click.group(chain=True, invoke_without_command=True)     @click.argument("fin", type=click.File("r"))     def cli(fin):         pass      @cli.result_callback()     def process_pipeline(processors, fin):         iterator = (x.rstrip("\r\n") for x in input)          for processor in processors:             iterator = processor(iterator)          for item in iterator:             click.echo(item)      @cli.command("upper")     def make_uppercase():         def processor(iterator):             for line in iterator:                 yield line.upper()         return processor      @cli.command("lower")     def make_lowercase():         def processor(iterator):             for line in iterator:                 yield line.lower()         return processor      @cli.command("strip")     def make_strip():         def processor(iterator):             for line in iterator:                 yield line.strip()         return processor  That's a lot in one go, so let's go through it step by step.  1.  The first thing is to make a `group` that is chainable.  In     addition to that we also instruct Click to invoke even if no     subcommand is defined.  If this would not be done, then invoking an     empty pipeline would produce the help page instead of running the     result callbacks. ``\` 2. The next thing we do is to register a result callback on our group. This callback will be invoked with an argument which is the list of all return values of all subcommands and then the same keyword parameters as our group itself. This means we can access the input file easily there without having to use the context object. 3. In this result callback we create an iterator of all the lines in the input file and then pass this iterator through all the returned callbacks from all subcommands and finally we print all lines to stdout.

After that point we can register as many subcommands as we want and each subcommand can return a processor function to modify the stream of lines.

One important thing of note is that Click shuts down the context after each callback has been run. This means that for instance file types cannot be accessed in the <span class="title-ref">processor</span> functions as the files will already be closed there. This limitation is unlikely to change because it would make resource handling much more complicated. For such it's recommended to not use the file type and manually open the file through <span class="title-ref">open\_file</span>.

For a more complex example that also improves upon handling of the pipelines, see the [imagepipe example](https://github.com/pallets/click/tree/main/examples/imagepipe) in the Click repository. It implements a pipeline based image editing tool that has a nice internal structure.

## Overriding Defaults

By default, the default value for a parameter is pulled from the `default` flag that is provided when it's defined, but that's not the only place defaults can be loaded from. The other place is the <span class="title-ref">Context.default\_map</span> (a dictionary) on the context. This allows defaults to be loaded from a configuration file to override the regular defaults.

This is useful if you plug in some commands from another package but you're not satisfied with the defaults.

The default map can be nested arbitrarily for each subcommand:

`` `python     default_map = {         "debug": True,  # default for a top level option         "runserver": {"port": 5000}  # default for a subcommand     }  The default map can be provided when the script is invoked, or ``\` overridden at any point by commands. For instance, a top-level command could load the defaults from a configuration file.

Example usage:

And in action:

## Context Defaults

<div class="versionadded">

2.0

</div>

Starting with Click 2.0 you can override defaults for contexts not just when calling your script, but also in the decorator that declares a command. For instance given the previous example which defines a custom `default_map` this can also be accomplished in the decorator now.

This example does the same as the previous example:

And again the example in action:

## Command Return Values

<div class="versionadded">

3.0

</div>

One of the new introductions in Click 3.0 is the full support for return values from command callbacks. This enables a whole range of features that were previously hard to implement.

In essence any command callback can now return a value. This return value is bubbled to certain receivers. One usecase for this has already been show in the example of \[command-chaining\](\#command-chaining) where it has been demonstrated that chained groups can have callbacks that process all return values.

When working with command return values in Click, this is what you need to know:

  - The return value of a command callback is generally returned from the <span class="title-ref">Command.invoke</span> method. The exception to this rule has to do with <span class="title-ref">Group</span>s:
      - In a group the return value is generally the return value of the subcommand invoked. The only exception to this rule is that the return value is the return value of the group callback if it's invoked without arguments and <span class="title-ref">invoke\_without\_command</span> is enabled.
      - If a group is set up for chaining then the return value is a list of all subcommands' results.
      - Return values of groups can be processed through a <span class="title-ref">Group.result\_callback</span>. This is invoked with the list of all return values in chain mode, or the single return value in case of non chained commands.
  - The return value is bubbled through from the <span class="title-ref">Context.invoke</span> and <span class="title-ref">Context.forward</span> methods. This is useful in situations where you internally want to call into another command.
  - Click does not have any hard requirements for the return values and does not use them itself. This allows return values to be used for custom decorators or workflows (like in the command chaining example).
  - When a Click script is invoked as command line application (through <span class="title-ref">Command.main</span>) the return value is ignored unless the <span class="title-ref">standalone\_mode</span> is disabled in which case it's bubbled through.

---

complex.md

---

# Complex Applications

<div class="currentmodule">

click

</div>

Click is designed to assist with the creation of complex and simple CLI tools alike. However, the power of its design is the ability to arbitrarily nest systems together. For instance, if you have ever used Django, you will have realized that it provides a command line utility, but so does Celery. When using Celery with Django, there are two tools that need to interact with each other and be cross-configured.

In a theoretical world of two separate Click command line utilities, they could solve this problem by nesting one inside the other. For instance, the web framework could also load the commands for the message queue framework.

## Basic Concepts

To understand how this works, you need to understand two concepts: contexts and the calling convention.

### Contexts

Whenever a Click command is executed, a <span class="title-ref">Context</span> object is created which holds state for this particular invocation. It remembers parsed parameters, what command created it, which resources need to be cleaned up at the end of the function, and so forth. It can also optionally hold an application-defined object.

Context objects build a linked list until they hit the top one. Each context is linked to a parent context. This allows a command to work below another command and store its own information there without having to be afraid of altering up the state of the parent command.

Because the parent data is available, however, it is possible to navigate to it if needed.

Most of the time, you do not see the context object, but when writing more complex applications it comes in handy. This brings us to the next point.

### Calling Convention

When a Click command callback is executed, it's passed all the non-hidden parameters as keyword arguments. Notably absent is the context. However, a callback can opt into being passed to the context object by marking itself with <span class="title-ref">pass\_context</span>.

So how do you invoke a command callback if you don't know if it should receive the context or not? The answer is that the context itself provides a helper function (<span class="title-ref">Context.invoke</span>) which can do this for you. It accepts the callback as first argument and then invokes the function correctly.

## Building a Git Clone

In this example, we want to build a command line tool that resembles a version control system. Systems like Git usually provide one over-arching command that already accepts some parameters and configuration, and then have extra subcommands that do other things.

### The Root Command

At the top level, we need a group that can hold all our commands. In this case, we use the basic <span class="title-ref">click.group</span> which allows us to register other Click commands below it.

For this command, we also want to accept some parameters that configure the state of our tool:

Let's understand what this does. We create a group command which can have subcommands. When it is invoked, it will create an instance of a `Repo` class. This holds the state for our command line tool. In this case, it just remembers some parameters, but at this point it could also start loading configuration files and so on.

This state object is then remembered by the context as <span class="title-ref">\~Context.obj</span>. This is a special attribute where commands are supposed to remember what they need to pass on to their children.

In order for this to work, we need to mark our function with <span class="title-ref">pass\_context</span>, because otherwise, the context object would be entirely hidden from us.

### The First Child Command

Let's add our first child command to it, the clone command:

So now we have a clone command, but how do we get access to the repo? As you can imagine, one way is to use the <span class="title-ref">pass\_context</span> function which again will make our callback also get the context passed on which we memorized the repo. However, there is a second version of this decorator called <span class="title-ref">pass\_obj</span> which will just pass the stored object, (in our case the repo):

### Interleaved Commands

While not relevant for the particular program we want to build, there is also quite good support for interleaving systems. Imagine for instance that there was a super cool plugin for our version control system that needed a lot of configuration and wanted to store its own configuration as <span class="title-ref">\~Context.obj</span>. If we would then attach another command below that, we would all of a sudden get the plugin configuration instead of our repo object.

One obvious way to remedy this is to store a reference to the repo in the plugin, but then a command needs to be aware that it's attached below such a plugin.

There is a much better system that can be built by taking advantage of the linked nature of contexts. We know that the plugin context is linked to the context that created our repo. Because of that, we can start a search for the last level where the object stored by the context was a repo.

Built-in support for this is provided by the <span class="title-ref">make\_pass\_decorator</span> factory, which will create decorators for us that find objects (it internally calls into <span class="title-ref">Context.find\_object</span>). In our case, we know that we want to find the closest `Repo` object, so let's make a decorator for this:

If we now use `pass_repo` instead of `pass_obj`, we will always get a repo instead of something else:

### Ensuring Object Creation

The above example only works if there was an outer command that created a `Repo` object and stored it in the context. For some more advanced use cases, this might become a problem. The default behavior of <span class="title-ref">make\_pass\_decorator</span> is to call <span class="title-ref">Context.find\_object</span> which will find the object. If it can't find the object, <span class="title-ref">make\_pass\_decorator</span> will raise an error. The alternative behavior is to use <span class="title-ref">Context.ensure\_object</span> which will find the object, and if it cannot find it, will create one and store it in the innermost context. This behavior can also be enabled for <span class="title-ref">make\_pass\_decorator</span> by passing `ensure=True`:

In this case, the innermost context gets an object created if it is missing. This might replace objects being placed there earlier. In this case, the command stays executable, even if the outer command does not run. For this to work, the object type needs to have a constructor that accepts no arguments.

As such it runs standalone:

As you can see:

## Lazily Loading Subcommands

Large CLIs and CLIs with slow imports may benefit from deferring the loading of subcommands. The interfaces which support this mode of use are <span class="title-ref">Group.list\_commands</span> and <span class="title-ref">Group.get\_command</span>. A custom <span class="title-ref">Group</span> subclass can implement a lazy loader by storing extra data such that <span class="title-ref">Group.get\_command</span> is responsible for running imports.

Since the primary case for this is a <span class="title-ref">Group</span> which loads its subcommands lazily, the following example shows a lazy-group implementation.

\> **Warning** \> Lazy loading of python code can result in hard to track down bugs, circular imports in order-dependent codebases, and other surprising behaviors. It is recommended that this technique only be used in concert with testing which will at least run the `--help` on each subcommand. That will guarantee that each subcommand can be loaded successfully.

### Defining the Lazy Group

The following <span class="title-ref">Group</span> subclass adds an attribute, `lazy_subcommands`, which stores a mapping from subcommand names to the information for importing them.

  - `` `python     # in lazy_group.py     import importlib     import click      class LazyGroup(click.Group):         def __init__(self, *args, lazy_subcommands=None, **kwargs):             super().__init__(*args, **kwargs)             # lazy_subcommands is a map of the form:             #             #   {command-name} -> {module-name}.{command-object-name}             #             self.lazy_subcommands = lazy_subcommands or {}          def list_commands(self, ctx):             base = super().list_commands(ctx)             lazy = sorted(self.lazy_subcommands.keys())             return base + lazy          def get_command(self, ctx, cmd_name):             if cmd_name in self.lazy_subcommands:                 return self._lazy_load(cmd_name)             return super().get_command(ctx, cmd_name)          def _lazy_load(self, cmd_name):             # lazily loading a command, first get the module name and attribute name             import_path = self.lazy_subcommands[cmd_name]             modname, cmd_object_name = import_path.rsplit(".", 1)             # do the import             mod = importlib.import_module(modname)             # get the Command object from that module             cmd_object = getattr(mod, cmd_object_name)             # check the result to make debugging easier             if not isinstance(cmd_object, click.Command):                 raise ValueError(                     f"Lazy loading of {import_path} failed by returning "                     "a non-command object"                 )             return cmd_object  Using LazyGroup To Define a CLI ``<span class="title-ref"> </span>`  ``  ``  ``  ``  ``  ``  ``With`LazyGroup`defined, it's now possible to write a group which lazily loads its subcommands like so:`\`python  
    \# in main.py import click from lazy\_group import LazyGroup
    
      - @click.group(  
        cls=LazyGroup, lazy\_subcommands={"foo": "foo.cli", "bar": "bar.cli"}, help="main CLI command for lazy example",
    
    ) def cli(): pass

<!-- end list -->

``` python
# in foo.py
import click

@click.group(help="foo command for lazy example")
def cli():
    pass
```

``` python
# in bar.py
import click
from lazy_group import LazyGroup

@click.group(
    cls=LazyGroup,
    lazy_subcommands={"baz": "baz.cli"},
    help="bar command for lazy example",
)
def cli():
    pass
```

``` python
# in baz.py
import click

@click.group(help="baz command for lazy example")
def cli():
    pass
```

What triggers Lazy Loading? `` ` ```  ``  ``  ``  ``  ``  `\`

There are several events which may trigger lazy loading by running the <span class="title-ref">Group.get\_command</span> function. Some are intuititve, and some are less so.

All cases are described with respect to the above example, assuming the main program name is `cli`.

1.  Command resolution. If a user runs `cli bar baz`, this must first resolve `bar`, and then resolve `baz`. Each subcommand resolution step does a lazy load.
2.  Helptext rendering. In order to get the short help description of subcommands, `cli --help` will load `foo` and `bar`. Note that it will still not load `baz`.
3.  Shell completion. In order to get the subcommands of a lazy command, `cli <TAB>` will need to resolve the subcommands of `cli`. This process will trigger the lazy loads.

### Further Deferring Imports

It is possible to make the process even lazier, but it is generally more difficult the more you want to defer work.

For example, subcommands could be represented as a custom <span class="title-ref">Command</span> subclass which defers importing the command until it is invoked, but which provides <span class="title-ref">Command.get\_short\_help\_str</span> in order to support completions and helptext. More simply, commands can be constructed whose callback functions defer any actual work until after an import.

This command definition provides `foo`, but any of the work associated with importing the "real" callback function is deferred until invocation time:

Because Click builds helptext and usage info from options, arguments, and command attributes, it has no awareness that the underlying function is in any way handling a deferred import. Therefore, all Click-provided utilities and functionality will work as normal on such a command.

---

contrib.md

---

# click-contrib

As the number of users of Click grows, more and more major feature requests are made. To users it may seem reasonable to include those features with Click; however, many of them are experimental or aren't practical to support generically. Maintainers have to choose what is reasonable to maintain in Click core.

The [click-contrib](https://github.com/click-contrib/) GitHub organization exists as a place to collect third-party packages that extend Click's features. It is also meant to ease the effort of searching for such extensions.

Please note that the quality and stability of those packages may be different than Click itself. While published under a common organization, they are still separate from Click and the Pallets maintainers.

---

documentation.md

---

# Documenting Scripts

<div class="currentmodule">

click

</div>

Click makes it very easy to document your command line tools. First of all, it automatically generates help pages for you. While these are currently not customizable in terms of their layout, all of the text can be changed.

## Help Texts

Commands and options accept help arguments. In the case of commands, the docstring of the function is automatically used if provided.

Simple example:

And what it looks like:

## Documenting Arguments

<span class="title-ref">click.argument</span> does not take a `help` parameter. This is to follow the general convention of Unix tools of using arguments for only the most necessary things, and to document them in the command help text by referring to them by name.

You might prefer to reference the argument in the description:

And what it looks like:

Or you might prefer to explicitly provide a description of the argument:

And what it looks like:

For more examples, see the examples in \[/arguments\](/arguments.md).

## Preventing Rewrapping

The default behavior of Click is to rewrap text based on the width of the terminal, to a maximum 80 characters. In some circumstances, this can become a problem. The main issue is when showing code examples, where newlines are significant.

Rewrapping can be disabled on a per-paragraph basis by adding a line with solely the `\b` escape marker in it. This line will be removed from the help text and rewrapping will be disabled.

Example:

And what it looks like:

To change the maximum width, pass `max_content_width` when calling the command.

`` `python     cli(max_content_width=120)   .. _doc-meta-variables:  Truncating Help Texts ``\` ---------------------

Click gets command help text from function docstrings. However if you already use docstrings to document function arguments you may not want to see :param: and :return: lines in your help text.

You can use the `\f` escape marker to have Click truncate the help text after the marker.

Example:

And what it looks like:

## Meta Variables

Options and parameters accept a `metavar` argument that can change the meta variable in the help page. The default version is the parameter name in uppercase with underscores, but can be annotated differently if desired. This can be customized at all levels:

Example:

## Command Short Help

For commands, a short help snippet is generated. By default, it's the first sentence of the help message of the command, unless it's too long. This can also be overridden:

And what it looks like:

## Command Epilog Help

The help epilog is like the help string but it's printed at the end of the help page after everything else. Useful for showing example command usages or referencing additional help resources.

And what it looks like:

## Help Parameter Customization

<div class="versionadded">

2.0

</div>

The help parameter is implemented in Click in a very special manner. Unlike regular parameters it's automatically added by Click for any command and it performs automatic conflict resolution. By default it's called `--help`, but this can be changed. If a command itself implements a parameter with the same name, the default help parameter stops accepting it. There is a context setting that can be used to override the names of the help parameters called <span class="title-ref">\~Context.help\_option\_names</span>.

This example changes the default parameters to `-h` and `--help` instead of just `--help`:

And what it looks like:

---

entry-points.md

---

# Packaging Entry Points

It's recommended to write command line utilities as installable packages with entry points instead telling users to run `python hello.py`.

A distribution package is a `.whl` file you install with pip or another Python installer. You use a `pyproject.toml` file to describe the project and how it is built into a package. You might upload this package to PyPI, or distribute it to your users in another way.

Python installers create executable scripts that will run a specified Python function. These are known as "entry points". The installer knows how to create an executable regardless of the operating system, so it will work on Linux, Windows, MacOS, etc.

## Project Files

To install your app with an entry point, all you need is the script and a `pyproject.toml` file. Here's an example project directory:

`` `text     hello-project/         src/             hello/                 __init__.py         pyproject.toml  Contents of ``hello.py`:  .. click:example::      import click      @click.command()     def cli():         """Prints a greeting."""         click.echo("Hello, World!")  Contents of`pyproject.toml`:  .. code-block:: toml      [project]     name = "hello"     version = "1.0.0"     description = "Hello CLI"     requires-python = ">=3.11"     dependencies = [         "click>=8.1",     ]      [project.scripts]     hello = "hello:cli"      [build-system]     requires = ["flit_core<4"]     build-backend = "flit_core.buildapi"  The magic is in the`project.scripts`section. Each line identifies one executable`<span class="title-ref"> script. The first part before the equals sign (</span><span class="title-ref">=</span><span class="title-ref">) is the name of the script that should be generated, the second part is the import path followed by a colon (</span><span class="title-ref">:</span>\`) with the function to call (the Click command).

## Installation

When your package is installed, the installer will create an executable script based on the configuration. During development, you can install in editable mode using the `-e` option. Remember to use a virtual environment\!

`` `console     $ python -m venv .venv     $ . .venv/bin/activate     $ pip install -e .  Afterwards, your command should be available:  .. click:run::      invoke(cli, prog_name="hello") ``\`

---

exceptions.md

---

# Exception Handling

<div class="currentmodule">

click

</div>

Click internally uses exceptions to signal various error conditions that the user of the application might have caused. Primarily this is things like incorrect usage.

## Where are Errors Handled?

Click's main error handling is happening in <span class="title-ref">Command.main</span>. In there it handles all subclasses of <span class="title-ref">ClickException</span> as well as the standard <span class="title-ref">EOFError</span> and <span class="title-ref">KeyboardInterrupt</span> exceptions. The latter are internally translated into an <span class="title-ref">Abort</span>.

The logic applied is the following:

1.  If an <span class="title-ref">EOFError</span> or <span class="title-ref">KeyboardInterrupt</span> happens, reraise it as <span class="title-ref">Abort</span>.
2.  If a <span class="title-ref">ClickException</span> is raised, invoke the <span class="title-ref">ClickException.show</span> method on it to display it and then exit the program with <span class="title-ref">ClickException.exit\_code</span>.
3.  If an <span class="title-ref">Abort</span> exception is raised print the string `Aborted!` to standard error and exit the program with exit code `1`.
4.  If it goes through well, exit the program with exit code `0`.

## What if I don't want that?

Generally you always have the option to invoke the <span class="title-ref">invoke</span> method yourself. For instance if you have a <span class="title-ref">Command</span> you can invoke it manually like this:

    ctx = command.make_context('command-name', ['args', 'go', 'here'])
    with ctx:
        result = command.invoke(ctx)

In this case exceptions will not be handled at all and bubbled up as you would expect.

Starting with Click 3.0 you can also use the <span class="title-ref">Command.main</span> method but disable the standalone mode which will do two things: disable exception handling and disable the implicit <span class="title-ref">sys.exit</span> at the end.

So you can do something like this:

    command.main(['command-name', 'args', 'go', 'here'],
                 standalone_mode=False)

## Which Exceptions Exist?

Click has two exception bases: <span class="title-ref">ClickException</span> which is raised for all exceptions that Click wants to signal to the user and <span class="title-ref">Abort</span> which is used to instruct Click to abort the execution.

A <span class="title-ref">ClickException</span> has a <span class="title-ref">\~ClickException.show</span> method which can render an error message to stderr or the given file object. If you want to use the exception yourself for doing something check the API docs about what else they provide.

The following common subclasses exist:

  - <span class="title-ref">UsageError</span> to inform the user that something went wrong.
  - <span class="title-ref">BadParameter</span> to inform the user that something went wrong with a specific parameter. These are often handled internally in Click and augmented with extra information if possible. For instance if those are raised from a callback Click will automatically augment it with the parameter name if possible.
  - <span class="title-ref">FileError</span> this is an error that is raised by the <span class="title-ref">FileType</span> if Click encounters issues opening the file.

---

index.md

---

<div class="rst-class">

hide-header

</div>

# Welcome to Click

[![image](click-logo.png)](https://palletsprojects.com/p/click/)

Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It's the "Command Line Interface Creation Kit". It's highly configurable but comes with sensible defaults out of the box.

It aims to make the process of writing command line tools quick and fun while also preventing any frustration caused by the inability to implement an intended CLI API.

Click in three points:

  - arbitrary nesting of commands
  - automatic help page generation
  - supports lazy loading of subcommands at runtime

What does it look like? Here is an example of a simple Click program:

And what it looks like when run:

It automatically generates nicely formatted help pages:

You can get the library directly from PyPI:

    pip install click

## Documentation

This part of the documentation guides you through all of the library's usage patterns.

<div class="toctree" data-maxdepth="2">

why quickstart entry-points virtualenv setuptools parameters options arguments commands prompts documentation complex advanced testing utils shell-completion exceptions unicode-support wincmd

</div>

## API Reference

If you are looking for information on a specific function, class, or method, this part of the documentation is for you.

<div class="toctree" data-maxdepth="2">

api

</div>

## Miscellaneous Pages

<div class="toctree" data-maxdepth="2">

contrib license changes

</div>

---

license.md

---

# BSD-3-Clause License

<div class="literalinclude" data-language="text">

../LICENSE.txt

</div>

---

options.md

---

# Options

<div class="currentmodule">

click

</div>

Adding options to commands can be accomplished by the <span class="title-ref">option</span> decorator. Since options can come in various different versions, there are a ton of parameters to configure their behavior. Options in click are distinct from \[positional arguments \<arguments\>\](\#positional-arguments-\<arguments\>).

## Name Your Options

Options have a name that will be used as the Python argument name when calling the decorated function. This can be inferred from the option names or given explicitly. Names are given as position arguments to the decorator.

A name is chosen in the following order

1.  If a name is not prefixed, it is used as the Python argument name and not treated as an option name on the command line.
2.  If there is at least one name prefixed with two dashes, the first one given is used as the name.
3.  The first name prefixed with one dash is used otherwise.

To get the Python argument name, the chosen name is converted to lower case, up to two dashes are removed as the prefix, and other dashes are converted to underscores.

`` `python     @click.command()     @click.option('-s', '--string-to-echo')     def echo(string_to_echo):         click.echo(string_to_echo)  .. code-block:: python      @click.command()     @click.option('-s', '--string-to-echo', 'string')     def echo(string):         click.echo(string)  - ``"-f", "--foo-bar"`, the name is`foo\_bar`  `<span class="title-ref"> - </span><span class="title-ref">"-x"</span><span class="title-ref">, the name is </span><span class="title-ref">x</span><span class="title-ref"> - </span><span class="title-ref">"-f", "--filename", "dest"</span><span class="title-ref">, the name is </span><span class="title-ref">dest</span><span class="title-ref"> - </span><span class="title-ref">"--CamelCase"</span><span class="title-ref">, the name is </span><span class="title-ref">camelcase</span><span class="title-ref"> - </span><span class="title-ref">"-f", "-fb"</span><span class="title-ref">, the name is </span><span class="title-ref">f</span><span class="title-ref"> - </span><span class="title-ref">"--f", "--foo-bar"</span><span class="title-ref">, the name is </span><span class="title-ref">f</span><span class="title-ref"> - </span><span class="title-ref">"---f"</span><span class="title-ref">, the name is </span><span class="title-ref">\_f</span>\`

## Basic Value Options

The most basic option is a value option. These options accept one argument which is a value. If no type is provided, the type of the default value is used. If no default value is provided, the type is assumed to be <span class="title-ref">STRING</span>. Unless a name is explicitly specified, the name of the parameter is the first long option defined; otherwise the first short one is used. By default, options are not required, however to make an option required, simply pass in <span class="title-ref">required=True</span> as an argument to the decorator.

And on the command line:

In this case the option is of type <span class="title-ref">INT</span> because the default value is an integer.

To show the default values when showing command help, use `show_default=True`

For single option boolean flags, the default remains hidden if the default value is False.

## Multi Value Options

Sometimes, you have options that take more than one argument. For options, only a fixed number of arguments is supported. This can be configured by the `nargs` parameter. The values are then stored as a tuple.

And on the command line:

## Tuples as Multi Value Options

<div class="versionadded">

4.0

</div>

As you can see that by using <span class="title-ref">nargs</span> set to a specific number each item in the resulting tuple is of the same type. This might not be what you want. Commonly you might want to use different types for different indexes in the tuple. For this you can directly specify a tuple as type:

And on the command line:

By using a tuple literal as type, <span class="title-ref">nargs</span> gets automatically set to the length of the tuple and the <span class="title-ref">click.Tuple</span> type is automatically used. The above example is thus equivalent to this:

## Multiple Options

Similarly to `nargs`, there is also the case of wanting to support a parameter being provided multiple times and have all the values recorded --not just the last one. For instance, `git commit -m foo -m bar` would record two lines for the commit message: `foo` and `bar`. This can be accomplished with the `multiple` flag:

Example:

And on the command line:

When passing a `default` with `multiple=True`, the default value must be a list or tuple, otherwise it will be interpreted as a list of single characters.

`` `python     @click.option("--format", multiple=True, default=["json"])   Counting ``\` --------

In some very rare circumstances, it is interesting to use the repetition of options to count an integer up. This can be used for verbosity flags, for instance:

And on the command line:

## Boolean Flags

Boolean flags are options that can be enabled or disabled. This can be accomplished by defining two flags in one go separated by a slash (`/`) for enabling or disabling the option. (If a slash is in an option string, Click automatically knows that it's a boolean flag and will pass `is_flag=True` implicitly.) Click always wants you to provide an enable and disable flag so that you can change the default later.

Example:

And on the command line:

If you really don't want an off-switch, you can just define one and manually inform Click that something is a flag:

And on the command line:

Note that if a slash is contained in your option already (for instance, if you use Windows-style parameters where `/` is the prefix character), you can alternatively split the parameters through `;` instead:

<div class="versionchanged">

6.0

</div>

If you want to define an alias for the second option only, then you will need to use leading whitespace to disambiguate the format string:

Example:

## Feature Switches

In addition to boolean flags, there are also feature switches. These are implemented by setting multiple options to the same parameter name and defining a flag value. Note that by providing the `flag_value` parameter, Click will implicitly set `is_flag=True`.

To set a default flag, assign a value of <span class="title-ref">True</span> to the flag that should be the default.

And on the command line:

## Choice Options

Sometimes, you want to have a parameter be a choice of a list of values. In that case you can use <span class="title-ref">Choice</span> type. It can be instantiated with a list of valid values. The originally passed choice will be returned, not the str passed on the command line. Token normalization functions and `case_sensitive=False` can cause the two to be different but still match.

Example:

What it looks like:

Only pass the choices as list or tuple. Other iterables (like generators) may lead to unexpected results.

Choices work with options that have `multiple=True`. If a `default` value is given with `multiple=True`, it should be a list or tuple of valid choices.

Choices should be unique after considering the effects of `case_sensitive` and any specified token normalization function.

<div class="versionchanged">

7.1 The resulting value from an option will always be one of the originally passed choices regardless of `case_sensitive`.

</div>

## Prompting

In some cases, you want parameters that can be provided from the command line, but if not provided, ask for user input instead. This can be implemented with Click by defining a prompt string.

Example:

And what it looks like:

If you are not happy with the default prompt string, you can ask for a different one:

What it looks like:

It is advised that prompt not be used in conjunction with the multiple flag set to True. Instead, prompt in the function interactively.

By default, the user will be prompted for an input if one was not passed through the command line. To turn this behavior off, see \[optional-value\](\#optional-value).

## Password Prompts

Click also supports hidden prompts and asking for confirmation. This is useful for password input:

Because this combination of parameters is quite common, this can also be replaced with the <span class="title-ref">password\_option</span> decorator:

`` `python     @click.command()     @click.password_option()     def encrypt(password):         click.echo(f"encoded: to {codecs.encode(password, 'rot13')}")   Dynamic Defaults for Prompts ``\` ----------------------------

The `auto_envvar_prefix` and `default_map` options for the context allow the program to read option values from the environment or a configuration file. However, this overrides the prompting mechanism, so that the user does not get the option to change the value interactively.

If you want to let the user configure the default value, but still be prompted if the option isn't specified on the command line, you can do so by supplying a callable as the default value. For example, to get a default from the environment:

`` `python     import os      @click.command()     @click.option(         "--username", prompt=True,         default=lambda: os.environ.get("USER", "")     )     def hello(username):         click.echo(f"Hello, {username}!")  To describe what the default value will be, set it in ``show\_default`.  .. click:example::      import os      @click.command()     @click.option(         "--username", prompt=True,         default=lambda: os.environ.get("USER", ""),         show_default="current user"     )     def hello(username):         click.echo(f"Hello, {username}!")  .. click:run::     invoke(hello, args=["--help"])   Callbacks and Eager Options`\` ---------------------------

Sometimes, you want a parameter to completely change the execution flow. For instance, this is the case when you want to have a `--version` parameter that prints out the version and then exits the application.

Note: an actual implementation of a `--version` parameter that is reusable is available in Click as <span class="title-ref">click.version\_option</span>. The code here is merely an example of how to implement such a flag.

In such cases, you need two concepts: eager parameters and a callback. An eager parameter is a parameter that is handled before others, and a callback is what executes after the parameter is handled. The eagerness is necessary so that an earlier required parameter does not produce an error message. For instance, if `--version` was not eager and a parameter `--foo` was required and defined before, you would need to specify it for `--version` to work. For more information, see \[callback-evaluation-order\](\#callback-evaluation-order).

A callback is a function that is invoked with three parameters: the current <span class="title-ref">Context</span>, the current <span class="title-ref">Parameter</span>, and the value. The context provides some useful features such as quitting the application and gives access to other already processed parameters.

Here's an example for a `--version` flag:

The <span class="title-ref">expose\_value</span> parameter prevents the pretty pointless `version` parameter from being passed to the callback. If that was not specified, a boolean would be passed to the <span class="title-ref">hello</span> script. The <span class="title-ref">resilient\_parsing</span> flag is applied to the context if Click wants to parse the command line without any destructive behavior that would change the execution flow. In this case, because we would exit the program, we instead do nothing.

What it looks like:

## Yes Parameters

For dangerous operations, it's very useful to be able to ask a user for confirmation. This can be done by adding a boolean `--yes` flag and asking for confirmation if the user did not provide it and to fail in a callback:

And what it looks like on the command line:

Because this combination of parameters is quite common, this can also be replaced with the <span class="title-ref">confirmation\_option</span> decorator:

## Values from Environment Variables

A very useful feature of Click is the ability to accept parameters from environment variables in addition to regular parameters. This allows tools to be automated much easier. For instance, you might want to pass a configuration file with a `--config` parameter but also support exporting a `TOOL_CONFIG=hello.cfg` key-value pair for a nicer development experience.

This is supported by Click in two ways. One is to automatically build environment variables which is supported for options only. To enable this feature, the `auto_envvar_prefix` parameter needs to be passed to the script that is invoked. Each command and parameter is then added as an uppercase underscore-separated variable. If you have a subcommand called `run` taking an option called `reload` and the prefix is `WEB`, then the variable is `WEB_RUN_RELOAD`.

Example usage:

And from the command line:

When using `auto_envvar_prefix` with command groups, the command name needs to be included in the environment variable, between the prefix and the parameter name, *i.e.* `PREFIX_COMMAND_VARIABLE`. If you have a subcommand called `run-server` taking an option called `host` and the prefix is `WEB`, then the variable is `WEB_RUN_SERVER_HOST`.

Example:

The second option is to manually pull values in from specific environment variables by defining the name of the environment variable on the option.

Example usage:

And from the command line:

In that case it can also be a list of different environment variables where the first one is picked.

## Multiple Values from Environment Values

As options can accept multiple values, pulling in such values from environment variables (which are strings) is a bit more complex. The way Click solves this is by leaving it up to the type to customize this behavior. For both `multiple` and `nargs` with values other than `1`, Click will invoke the <span class="title-ref">ParamType.split\_envvar\_value</span> method to perform the splitting.

The default implementation for all types is to split on whitespace. The exceptions to this rule are the <span class="title-ref">File</span> and <span class="title-ref">Path</span> types which both split according to the operating system's path splitting rules. On Unix systems like Linux and OS X, the splitting happens for those on every colon (`:`), and for Windows, on every semicolon (`;`).

Example usage:

And from the command line:

## Other Prefix Characters

Click can deal with alternative prefix characters other than `-` for options. This is for instance useful if you want to handle slashes as parameters `/` or something similar. Note that this is strongly discouraged in general because Click wants developers to stay close to POSIX semantics. However in certain situations this can be useful:

And from the command line:

Note that if you are using `/` as prefix character and you want to use a boolean flag you need to separate it with `;` instead of `/`:

## Range Options

The <span class="title-ref">IntRange</span> type extends the <span class="title-ref">INT</span> type to ensure the value is contained in the given range. The <span class="title-ref">FloatRange</span> type does the same for <span class="title-ref">FLOAT</span>.

If `min` or `max` is omitted, that side is *unbounded*. Any value in that direction is accepted. By default, both bounds are *closed*, which means the boundary value is included in the accepted range. `min_open` and `max_open` can be used to exclude that boundary from the range.

If `clamp` mode is enabled, a value that is outside the range is set to the boundary instead of failing. For example, the range `0, 5` would return `5` for the value `10`, or `0` for the value `-1`. When using <span class="title-ref">FloatRange</span>, `clamp` can only be enabled if both bounds are *closed* (the default).

## Callbacks for Validation

<div class="versionchanged">

2.0

</div>

If you want to apply custom validation logic, you can do this in the parameter callbacks. These callbacks can both modify values as well as raise errors if the validation does not work. The callback runs after type conversion. It is called for all sources, including prompts.

In Click 1.0, you can only raise the <span class="title-ref">UsageError</span> but starting with Click 2.0, you can also raise the <span class="title-ref">BadParameter</span> error, which has the added advantage that it will automatically format the error message to also contain the parameter name.

## Optional Value

Providing the value to an option can be made optional, in which case providing only the option's flag without a value will either show a prompt or use its `flag_value`.

Setting `is_flag=False, flag_value=value` tells Click that the option can still be passed a value, but if only the flag is given the `flag_value` is used.

If the option has `prompt` enabled, then setting `prompt_required=False` tells Click to only show the prompt if the option's flag is given, instead of if the option is not provided at all.

If `required=True`, then the option will still prompt if it is not given, but it will also prompt if only the flag is given.

---

parameters.md

---

# Parameters

<div class="currentmodule">

click

</div>

Click supports only two types of parameters for scripts (by design): options and arguments.

## Options

  - Are optional.
  - Recommended to use for everything except subcommands, urls, or files.
  - Can take a fixed number of arguments. The default is 1. They may be specified multiple times using \[multiple-options\](\#multiple-options).
  - Are fully documented by the help page.
  - Have automatic prompting for missing input.
  - Can act as flags (boolean or otherwise).
  - Can be pulled from environment variables.

## Arguments

  - Are optional with in reason, but not entirely so.
  - Recommended to use for subcommands, urls, or files.
  - Can take an arbitrary number of arguments.
  - Are not fully documented by the help page since they may be too specific to be automatically documented. For more see \[documenting-arguments\](\#documenting-arguments).
  - Can be pulled from environment variables but only explicitly named ones. For more see \[environment-variables\](\#environment-variables).

## Parameter Names

Parameters (options and arguments) have a name that will be used as the Python argument name when calling the decorated function with values.

In the above example the argument's name is `filename`. The name must match the python arg name. To provide a different name for use in help text, see \[doc-meta-variables\](\#doc-meta-variables). The option's names are `-t` and `--times`. More names are available for options and are covered in \[options\](\#options).

And what it looks like when run:

## Parameter Types

The supported parameter types are:

  - `str` / \`click.STRING\`:  
    The default parameter type which indicates unicode strings.

  - `int` / \`click.INT\`:  
    A parameter that only accepts integers.

  - `float` / \`click.FLOAT\`:  
    A parameter that only accepts floating point values.

  - `bool` / \`click.BOOL\`:  
    A parameter that accepts boolean values. This is automatically used for boolean flags. The string values "1", "true", "t", "yes", "y", and "on" convert to `True`. "0", "false", "f", "no", "n", and "off" convert to `False`.

  - \`click.UUID\`:  
    A parameter that accepts UUID values. This is not automatically guessed but represented as <span class="title-ref">uuid.UUID</span>.

<div class="autoclass" data-noindex="">

File

</div>

<div class="autoclass" data-noindex="">

Path

</div>

<div class="autoclass" data-noindex="">

Choice

</div>

<div class="autoclass" data-noindex="">

IntRange

</div>

<div class="autoclass" data-noindex="">

FloatRange

</div>

<div class="autoclass" data-noindex="">

DateTime

</div>

## How to Implement Custom Types

To implement a custom type, you need to subclass the <span class="title-ref">ParamType</span> class. For simple cases, passing a Python function that fails with a <span class="title-ref">ValueError</span> is also supported, though discouraged. Override the <span class="title-ref">\~ParamType.convert</span> method to convert the value from a string to the correct type.

The following code implements an integer type that accepts hex and octal numbers in addition to normal integers, and converts them into regular integers.

`` `python     import click      class BasedIntParamType(click.ParamType):         name = "integer"          def convert(self, value, param, ctx):             if isinstance(value, int):                 return value              try:                 if value[:2].lower() == "0x":                     return int(value[2:], 16)                 elif value[:1] == "0":                     return int(value, 8)                 return int(value, 10)             except ValueError:                 self.fail(f"{value!r} is not a valid integer", param, ctx)      BASED_INT = BasedIntParamType()  The `~ParamType.name` attribute is optional and is used for ``<span class="title-ref"> documentation. Call </span>\~ParamType.fail\` if conversion fails. The `param` and `ctx` arguments may be `None` in some cases such as prompts.

Values from user input or the command line will be strings, but default values and Python arguments may already be the correct type. The custom type should check at the top if the value is already valid and pass it through to support those cases.

---

prompts.md

---

# User Input Prompts

<div class="currentmodule">

click

</div>

Click supports prompts in two different places. The first is automated prompts when the parameter handling happens, and the second is to ask for prompts at a later point independently.

This can be accomplished with the <span class="title-ref">prompt</span> function, which asks for valid input according to a type, or the <span class="title-ref">confirm</span> function, which asks for confirmation (yes/no).

## Option Prompts

Option prompts are integrated into the option interface. See \[option-prompting\](\#option-prompting) for more information. Internally, it automatically calls either <span class="title-ref">prompt</span> or <span class="title-ref">confirm</span> as necessary.

## Input Prompts

To manually ask for user input, you can use the <span class="title-ref">prompt</span> function. By default, it accepts any Unicode string, but you can ask for any other type. For instance, you can ask for a valid integer:

    value = click.prompt('Please enter a valid integer', type=int)

Additionally, the type will be determined automatically if a default value is provided. For instance, the following will only accept floats:

    value = click.prompt('Please enter a number', default=42.0)

## Confirmation Prompts

To ask if a user wants to continue with an action, the <span class="title-ref">confirm</span> function comes in handy. By default, it returns the result of the prompt as a boolean value:

    if click.confirm('Do you want to continue?'):
        click.echo('Well done!')

There is also the option to make the function automatically abort the execution of the program if it does not return `True`:

    click.confirm('Do you want to continue?', abort=True)

---

quickstart.md

---

# Quickstart

<div class="currentmodule">

click

</div>

## Install

Install from PyPI:

    pip install click

Installing into a virtual environment is highly recommended. We suggest \[virtualenv-heading\](\#virtualenv-heading).

## Examples

Some standalone examples of Click applications are packaged with Click. They are available in the [examples folder](https://github.com/pallets/click/tree/main/examples) of the repo.

  - [inout](https://github.com/pallets/click/tree/main/examples/inout) : A very simple example of an application that can read from files and write to files and also accept input from stdin or write to stdout.
  - [validation](https://github.com/pallets/click/tree/main/examples/validation) : A simple example of an application that performs custom validation of parameters in different ways.
  - [naval](https://github.com/pallets/click/tree/main/examples/naval) : Port of the [docopt](http://docopt.org/) naval example.
  - [colors](https://github.com/pallets/click/tree/main/examples/colors) : A simple example that colorizes text. Uses colorama on Windows.
  - [aliases](https://github.com/pallets/click/tree/main/examples/aliases) : An advanced example that implements \[aliases\](\#aliases).
  - [imagepipe](https://github.com/pallets/click/tree/main/examples/imagepipe) : A complex example that implements some \[command-pipelines\](\#command-pipelines) . It chains together image processing instructions. Requires pillow.
  - [repo](https://github.com/pallets/click/tree/main/examples/repo) : An advanced example that implements a Git-/Mercurial-like command line interface.
  - [complex](https://github.com/pallets/click/tree/main/examples/complex) : A very advanced example that implements loading subcommands dynamically from a plugin folder.
  - [termui](https://github.com/pallets/click/tree/main/examples/termui) : A simple example that showcases terminal UI helpers provided by click.

## Basic Concepts - Creating a Command

Click is based on declaring commands through decorators. Internally, there is a non-decorator interface for advanced use cases, but it's discouraged for high-level usage.

A function becomes a Click command line tool by decorating it through <span class="title-ref">click.command</span>. At its simplest, just decorating a function with this decorator will make it into a callable script:

What's happening is that the decorator converts the function into a <span class="title-ref">Command</span> which then can be invoked:

    if __name__ == '__main__':
        hello()

And what it looks like:

And the corresponding help page:

## Echoing

Why does this example use <span class="title-ref">echo</span> instead of the regular <span class="title-ref">print</span> function? The answer to this question is that Click attempts to support different environments consistently and to be very robust even when the environment is misconfigured. Click wants to be functional at least on a basic level even if everything is completely broken.

What this means is that the <span class="title-ref">echo</span> function applies some error correction in case the terminal is misconfigured instead of dying with a <span class="title-ref">UnicodeError</span>.

The echo function also supports color and other styles in output. It will automatically remove styles if the output stream is a file. On Windows, colorama is automatically installed and used. See \[ansi-colors\](\#ansi-colors).

If you don't need this, you can also use the <span class="title-ref">print()</span> construct / function.

## Nesting Commands

Commands can be attached to other commands of type <span class="title-ref">Group</span>. This allows arbitrary nesting of scripts. As an example here is a script that implements two commands for managing databases:

As you can see, the <span class="title-ref">group</span> decorator works like the <span class="title-ref">command</span> decorator, but creates a <span class="title-ref">Group</span> object instead which can be given multiple subcommands that can be attached with <span class="title-ref">Group.add\_command</span>.

For simple scripts, it's also possible to automatically attach and create a command by using the <span class="title-ref">Group.command</span> decorator instead. The above script can instead be written like this:

You would then invoke the <span class="title-ref">Group</span> in your entry points or other invocations:

    if __name__ == '__main__':
        cli()

## Registering Commands Later

Instead of using the `@group.command()` decorator, commands can be decorated with the plain `@click.command()` decorator and registered with a group later with `group.add_command()`. This could be used to split commands into multiple Python modules.

`` `python     @click.command()     def greet():         click.echo("Hello, World!")  .. code-block:: python      @click.group()     def group():         pass      group.add_command(greet)   Adding Parameters ``\` -----------------

To add parameters, use the <span class="title-ref">option</span> and <span class="title-ref">argument</span> decorators:

What it looks like:

## Switching to Entry Points

In the code you wrote so far there is a block at the end of the file which looks like this: `if __name__ == '__main__':`. This is traditionally how a standalone Python file looks like. With Click you can continue doing that, but a better way is to package your app with an entry point.

There are two main (and many more) reasons for this:

The first one is that installers automatically generate executable wrappers for Windows so your command line utilities work on Windows too.

The second reason is that entry point scripts work with virtualenv on Unix without the virtualenv having to be activated. This is a very useful concept which allows you to bundle your scripts with all requirements into a virtualenv.

Click is perfectly equipped to work with that and in fact the rest of the documentation will assume that you are writing applications as distributed packages.

Look at the \[entry-points\](entry-points.md) chapter before reading the rest as the examples assume that you will be using entry points.

---

setuptools.md

---

- orphan

# Setuptools Integration

Moved to \[entry-points\](entry-points.md).

---

shell-completion.md

---

<div class="currentmodule">

click.shell\_completion

</div>

# Shell Completion

Click provides tab completion support for Bash (version 4.4 and up), Zsh, and Fish. It is possible to add support for other shells too, and suggestions can be customized at multiple levels.

Shell completion suggests command names, option names, and values for choice, file, and path parameter types. Options are only listed if at least a dash has been entered. Hidden commands and options are not shown.

`` `text     $ repo <TAB><TAB>     clone  commit  copy  delete  setuser     $ repo clone -<TAB><TAB>     --deep  --help  --rev  --shallow  -r   Enabling Completion ``\` -------------------

Completion is only available if a script is installed and invoked through an entry point, not through the `python` command. See \[entry-points\](entry-points.md). Once the executable is installed, calling it with a special environment variable will put Click in completion mode.

To enable shell completion, the user needs to register a special function with their shell. The exact script varies depending on the shell you are using. Click will output it when called with `_{FOO_BAR}_COMPLETE` set to `{shell}_source`. `{FOO_BAR}` is the executable name in uppercase with dashes replaced by underscores. It is conventional but not strictly required for environment variable names to be in upper case. This convention helps distinguish environment variables from regular shell variables and commands, making scripts and configuration files more readable and easier to maintain. The built-in shells are `bash`, `zsh`, and `fish`.

Provide your users with the following instructions customized to your program name. This uses `foo-bar` as an example.

<div class="tabs">

<div class="group-tab">

Bash

Add this to `~/.bashrc`:

  - \`\`\`bash  
    eval "$(\_FOO\_BAR\_COMPLETE=bash\_source foo-bar)"

</div>

<div class="group-tab">

Zsh

Add this to `~/.zshrc`:

``` zsh
eval "$(_FOO_BAR_COMPLETE=zsh_source foo-bar)"
```

</div>

<div class="group-tab">

Fish

Add this to `~/.config/fish/completions/foo-bar.fish`:

``` fish
_FOO_BAR_COMPLETE=fish_source foo-bar | source
```

This is the same file used for the activation script method below. For Fish it's probably always easier to use that method.

</div>

</div>

Using `eval` means that the command is invoked and evaluated every `` ` time a shell is started, which can delay shell responsiveness. To speed it up, write the generated script to a file, then source that. You can generate the files ahead of time and distribute them with your program to save your users a step.  .. tabs::      .. group-tab:: Bash          Save the script somewhere. ``\`bash \_FOO\_BAR\_COMPLETE=bash\_source foo-bar \> \~/.foo-bar-complete.bash

> Source the file in `~/.bashrc`.
> 
> ``` bash
> . ~/.foo-bar-complete.bash
> ```
> 
> <div class="group-tab">
> 
> Zsh
> 
> </div>
> 
> Save the script somewhere.
> 
> ``` bash
> _FOO_BAR_COMPLETE=zsh_source foo-bar > ~/.foo-bar-complete.zsh
> ```
> 
> Source the file in `~/.zshrc`.
> 
> ``` bash
> . ~/.foo-bar-complete.zsh
> ```
> 
> <div class="group-tab">
> 
> Fish
> 
> </div>
> 
> Save the script to `~/.config/fish/completions/foo-bar.fish`:
> 
> ``` fish
> _FOO_BAR_COMPLETE=fish_source foo-bar > ~/.config/fish/completions/foo-bar.fish
> ```

After modifying the shell config, you need to start a new shell in order `` ` for the changes to be loaded.   Custom Type Completion ----------------------  When creating a custom `~click.ParamType`, override its `~click.ParamType.shell_complete` method to provide shell completion for parameters with the type. The method must return a list of `~CompletionItem` objects. Besides the value, these objects hold metadata that shell support might use. The built-in implementations use ``type`to indicate special handling for paths, and`help`for shells that support showing a help string next to a suggestion.  In this example, the type will suggest environment variables that start with the incomplete value.`\`python class EnvVarType(ParamType): name = "envvar"

>   - def shell\_complete(self, ctx, param, incomplete):
>     
>       - return \[  
>         CompletionItem(name) for name in os.environ if name.startswith(incomplete)
>     
>     \]
> 
> @click.command() @click.option("--ev", type=EnvVarType()) def cli(ev): click.echo(os.environ\[ev\])

Overriding Value Completion `` ` ---------------------------  Value completions for a parameter can be customized without a custom type by providing a ``shell\_complete`function. The function is used instead of any completion provided by the type. It is passed 3 keyword arguments:  -`ctx`- The current command context. -`param`- The current parameter requesting completion. -`incomplete``- The partial word that is being completed. May     be an empty string if no characters have been entered yet.  It must return a list of `CompletionItem` objects, or as a shortcut it can return a list of strings.  In this example, the command will suggest environment variables that start with the incomplete value.``\`python def complete\_env\_vars(ctx, param, incomplete): return \[k for k in os.environ if k.startswith(incomplete)\]

> @click.command() @click.argument("name", shell\_complete=complete\_env\_vars) def cli(name): click.echo(f"Name: {name}") click.echo(f"Value: {os.environ\[name\]}")

Adding Support for a Shell `` ` --------------------------  Support can be added for shells that do not come built in. Be sure to check PyPI to see if there's already a package that adds support for your shell. This topic is very technical, you'll want to look at Click's source to study the built-in implementations.  Shell support is provided by subclasses of `ShellComplete` registered with `add_completion_class`. When Click is invoked in completion mode, it calls `~ShellComplete.source` to output the completion script, or `~ShellComplete.complete` to output completions. The base class provides default implementations that require implementing some smaller parts.  First, you'll need to figure out how your shell's completion system works and write a script to integrate it with Click. It must invoke your program with the environment variable ``\_{FOO\_BAR}\_COMPLETE`set to`{shell}\_complete``and pass the complete args and incomplete value. How it passes those values, and the format of the completion response from Click is up to you.  In your subclass, set `~ShellComplete.source_template` to the completion script. The default implementation will perform``%`formatting with the following variables:  -`complete\_func`- A safe name for the completion function defined     in the script. -`complete\_var`- The environment variable name for passing the`{shell}\_complete`instruction. -`foo\_bar`- The name of the executable being completed.  The example code is for a made up shell "My Shell" or "mysh" for short.`\`python from click.shell\_completion import add\_completion\_class from click.shell\_completion import ShellComplete

>   - \_mysh\_source = """%(complete\_func)s {  
>     response=$(%(complete\_var)s=mysh\_complete %(foo\_bar)s) \# parse response and set completions somehow
> 
> } call-on-complete %(foo\_bar)s %(complete\_func)s """
> 
> @add\_completion\_class class MyshComplete(ShellComplete): name = "mysh" source\_template = \_mysh\_source

Next, implement <span class="title-ref">\~ShellComplete.get\_completion\_args</span>. This must `` ` get, parse, and return the complete args and incomplete value from the completion script. For example, for the Bash implementation the ``COMP\_WORDS`env var contains the command line args as a string, and the`COMP\_CWORD`env var contains the index of the incomplete arg. The method must return a`(args, incomplete)`tuple.`\`python import os from click.parser import split\_arg\_string

>   - class MyshComplete(ShellComplete):  
>     ...
>     
>       - def get\_completion\_args(self):  
>         args = split\_arg\_string(os.environ\["COMP\_WORDS"\])
>         
>           - if os.environ\["COMP\_PARTIAL"\] == "1":  
>             incomplete = args.pop() return args, incomplete
>         
>         return args, ""

Finally, implement <span class="title-ref">\~ShellComplete.format\_completion</span>. This is `` ` called to format each `CompletionItem` into a string. For example, the Bash implementation returns ``f"{item.type},{item.value}`(it doesn't support help strings), and the Zsh implementation returns each part separated by a newline, replacing empty help with a`\_`placeholder. This format is entirely up to what you parse with your completion script.  The`type`value is usually`plain`, but it can be another value that the completion script can switch on. For example,`file`or`dir`can tell the shell to handle path completion, since the shell is better at that than Click.`\`python class MyshComplete(ShellComplete): ...

>   - def format\_completion(self, item):  
>     return f"{item.type}t{item.value}"

With those three things implemented, the new shell support is ready. In `` ` case those weren't sufficient, there are more parts that can be overridden, but that probably isn't necessary.  The activation instructions will again depend on how your shell works. Use the following to generate the completion script, then load it into the shell somehow. ``<span class="title-ref">text \_FOO\_BAR\_COMPLETE=mysh\_source foo-bar </span>\`\`

---

testing.md

---

# Testing Click Applications

<div class="currentmodule">

click.testing

</div>

For basic testing, Click provides the `click.testing` module which provides test functionality that helps you invoke command line applications and check their behavior.

These tools should really only be used for testing as they change the entire interpreter state for simplicity and are not in any way thread-safe\!

## Basic Testing

The basic functionality for testing Click applications is the <span class="title-ref">CliRunner</span> which can invoke commands as command line scripts. The <span class="title-ref">CliRunner.invoke</span> method runs the command line script in isolation and captures the output as both bytes and binary data.

The return value is a <span class="title-ref">Result</span> object, which has the captured output data, exit code, and optional exception attached:

``` python
import click

@click.command()
@click.argument('name')
def hello(name):
   click.echo(f'Hello {name}!')
```

``` python
from click.testing import CliRunner
from hello import hello

def test_hello_world():
  runner = CliRunner()
  result = runner.invoke(hello, ['Peter'])
  assert result.exit_code == 0
  assert result.output == 'Hello Peter!\n'
```

For subcommand testing, a subcommand name must be specified in the <span class="title-ref">args</span> parameter of <span class="title-ref">CliRunner.invoke</span> method:

``` python
import click

@click.group()
@click.option('--debug/--no-debug', default=False)
def cli(debug):
   click.echo(f"Debug mode is {'on' if debug else 'off'}")

@cli.command()
def sync():
   click.echo('Syncing')
```

``` python
from click.testing import CliRunner
from sync import cli

def test_sync():
  runner = CliRunner()
  result = runner.invoke(cli, ['--debug', 'sync'])
  assert result.exit_code == 0
  assert 'Debug mode is on' in result.output
  assert 'Syncing' in result.output
```

Additional keyword arguments passed to `.invoke()` will be used to construct the initial Context object. For example, if you want to run your tests against a fixed terminal width you can use the following:

    runner = CliRunner()
    result = runner.invoke(cli, ['--debug', 'sync'], terminal_width=60)

## File System Isolation

For basic command line tools with file system operations, the <span class="title-ref">CliRunner.isolated\_filesystem</span> method is useful for setting the current working directory to a new, empty folder.

``` python
import click

@click.command()
@click.argument('f', type=click.File())
def cat(f):
   click.echo(f.read())
```

``` python
from click.testing import CliRunner
from cat import cat

def test_cat():
   runner = CliRunner()
   with runner.isolated_filesystem():
      with open('hello.txt', 'w') as f:
          f.write('Hello World!')

      result = runner.invoke(cat, ['hello.txt'])
      assert result.exit_code == 0
      assert result.output == 'Hello World!\n'
```

Pass `temp_dir` to control where the temporary directory is created. The directory will not be removed by Click in this case. This is useful to integrate with a framework like Pytest that manages temporary files.

`` `python     def test_keep_dir(tmp_path):         runner = CliRunner()          with runner.isolated_filesystem(temp_dir=tmp_path) as td:             ...   Input Streams ``\` -------------

The test wrapper can also be used to provide input data for the input stream (stdin). This is very useful for testing prompts, for instance:

``` python
import click

@click.command()
@click.option('--foo', prompt=True)
def prompt(foo):
   click.echo(f"foo={foo}")
```

``` python
from click.testing import CliRunner
from prompt import prompt

def test_prompts():
   runner = CliRunner()
   result = runner.invoke(prompt, input='wau wau\n')
   assert not result.exception
   assert result.output == 'Foo: wau wau\nfoo=wau wau\n'
```

Note that prompts will be emulated so that they write the input data to the output stream as well. If hidden input is expected then this obviously does not happen.

---

unicode-support.md

---

# Unicode Support

<div class="currentmodule">

click

</div>

Click has to take extra care to support Unicode text in different environments.

  - The command line in Unix is traditionally bytes, not Unicode. While there are encoding hints, there are some situations where this can break. The most common one is SSH connections to machines with different locales.
    
    Misconfigured environments can cause a wide range of Unicode problems due to the lack of support for roundtripping surrogate escapes. This will not be fixed in Click itself\!

  - Standard input and output is opened in text mode by default. Click has to reopen the stream in binary mode in certain situations. Because there is no standard way to do this, it might not always work. Primarily this can become a problem when testing command-line applications.
    
    This is not supported:
    
        sys.stdin = io.StringIO('Input here')
        sys.stdout = io.StringIO()
    
    Instead you need to do this:
    
        input = 'Input here'
        in_stream = io.BytesIO(input.encode('utf-8'))
        sys.stdin = io.TextIOWrapper(in_stream, encoding='utf-8')
        out_stream = io.BytesIO()
        sys.stdout = io.TextIOWrapper(out_stream, encoding='utf-8')
    
    Remember in that case, you need to use `out_stream.getvalue()` and not `sys.stdout.getvalue()` if you want to access the buffer contents as the wrapper will not forward that method.

  - `sys.stdin`, `sys.stdout` and `sys.stderr` are by default text-based. When Click needs a binary stream, it attempts to discover the underlying binary stream.

  - `sys.argv` is always text. This means that the native type for input values to the types in Click is Unicode, not bytes.
    
    This causes problems if the terminal is incorrectly set and Python does not figure out the encoding. In that case, the Unicode string will contain error bytes encoded as surrogate escapes.

  - When dealing with files, Click will always use the Unicode file system API by using the operating system's reported or guessed filesystem encoding. Surrogates are supported for filenames, so it should be possible to open files through the <span class="title-ref">File</span> type even if the environment is misconfigured.

## Surrogate Handling

Click does all the Unicode handling in the standard library and is subject to its behavior. Unicode requires extra care. The reason for this is that the encoding detection is done in the interpreter, and on Linux and certain other operating systems, its encoding handling is problematic.

The biggest source of frustration is that Click scripts invoked by init systems, deployment tools, or cron jobs will refuse to work unless a Unicode locale is exported.

If Click encounters such an environment it will prevent further execution to force you to set a locale. This is done because Click cannot know about the state of the system once it's invoked and restore the values before Python's Unicode handling kicked in.

If you see something like this error:

    Traceback (most recent call last):
      ...
    RuntimeError: Click will abort further execution because Python was
      configured to use ASCII as encoding for the environment. Consult
      https://click.palletsprojects.com/unicode-support/ for mitigation
      steps.

You are dealing with an environment where Python thinks you are restricted to ASCII data. The solution to these problems is different depending on which locale your computer is running in.

For instance, if you have a German Linux machine, you can fix the problem by exporting the locale to `de_DE.utf-8`:

    export LC_ALL=de_DE.utf-8
    export LANG=de_DE.utf-8

If you are on a US machine, `en_US.utf-8` is the encoding of choice. On some newer Linux systems, you could also try `C.UTF-8` as the locale:

    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8

On some systems it was reported that `UTF-8` has to be written as `UTF8` and vice versa. To see which locales are supported you can invoke `locale -a`.

You need to export the values before you invoke your Python script.

In Python 3.7 and later you will no longer get a `RuntimeError` in many cases thanks to `538` and `540`, which changed the default assumption in unconfigured environments. This doesn't change the general issue that your locale may be misconfigured.

---

utils.md

---

# Utilities

<div class="currentmodule">

click

</div>

Besides the functionality that Click provides to interface with argument parsing and handling, it also provides a bunch of addon functionality that is useful for writing command line utilities.

## Printing to Stdout

The most obvious helper is the <span class="title-ref">echo</span> function, which in many ways works like the Python `print` statement or function. The main difference is that it works the same in many different terminal environments.

Example:

    import click
    
    click.echo('Hello World!')

It can output both text and binary data. It will emit a trailing newline by default, which needs to be suppressed by passing `nl=False`:

    click.echo(b'\xe2\x98\x83', nl=False)

Last but not least <span class="title-ref">echo</span> uses click's intelligent internal output streams to stdout and stderr which support unicode output on the Windows console. This means for as long as you are using <span class="title-ref">click.echo</span> you can output unicode characters (there are some limitations on the default font with regards to which characters can be displayed).

<div class="versionadded">

6.0

</div>

Click emulates output streams on Windows to support unicode to the Windows console through separate APIs. For more information see \[wincmd\](wincmd.md).

<div class="versionadded">

3.0

</div>

You can also easily print to standard error by passing `err=True`:

    click.echo('Hello World!', err=True)

## ANSI Colors

<div class="versionadded">

2.0

</div>

The <span class="title-ref">echo</span> function supports ANSI colors and styles. On Windows this uses [colorama](https://pypi.org/project/colorama/).

Primarily this means that:

  - Click's <span class="title-ref">echo</span> function will automatically strip ANSI color codes if the stream is not connected to a terminal.
  - the <span class="title-ref">echo</span> function will transparently connect to the terminal on Windows and translate ANSI codes to terminal API calls. This means that colors will work on Windows the same way they do on other operating systems.

On Windows, Click uses colorama without calling `colorama.init()`. You can still call that in your code, but it's not required for Click.

For styling a string, the <span class="title-ref">style</span> function can be used:

    import click
    
    click.echo(click.style('Hello World!', fg='green'))
    click.echo(click.style('Some more text', bg='blue', fg='white'))
    click.echo(click.style('ATTENTION', blink=True, bold=True))

The combination of <span class="title-ref">echo</span> and <span class="title-ref">style</span> is also available in a single function called \`secho\`:

    click.secho('Hello World!', fg='green')
    click.secho('Some more text', bg='blue', fg='white')
    click.secho('ATTENTION', blink=True, bold=True)

## Pager Support

In some situations, you might want to show long texts on the terminal and let a user scroll through it. This can be achieved by using the <span class="title-ref">echo\_via\_pager</span> function which works similarly to the <span class="title-ref">echo</span> function, but always writes to stdout and, if possible, through a pager.

Example:

If you want to use the pager for a lot of text, especially if generating everything in advance would take a lot of time, you can pass a generator (or generator function) instead of a string:

## Screen Clearing

<div class="versionadded">

2.0

</div>

To clear the terminal screen, you can use the <span class="title-ref">clear</span> function that is provided starting with Click 2.0. It does what the name suggests: it clears the entire visible screen in a platform-agnostic way:

    import click
    click.clear()

## Getting Characters from Terminal

<div class="versionadded">

2.0

</div>

Normally, when reading input from the terminal, you would read from standard input. However, this is buffered input and will not show up until the line has been terminated. In certain circumstances, you might not want to do that and instead read individual characters as they are being written.

For this, Click provides the <span class="title-ref">getchar</span> function which reads a single character from the terminal buffer and returns it as a Unicode character.

Note that this function will always read from the terminal, even if stdin is instead a pipe.

Example:

    import click
    
    click.echo('Continue? [yn] ', nl=False)
    c = click.getchar()
    click.echo()
    if c == 'y':
        click.echo('We will go on')
    elif c == 'n':
        click.echo('Abort!')
    else:
        click.echo('Invalid input :(')

Note that this reads raw input, which means that things like arrow keys will show up in the platform's native escape format. The only characters translated are `^C` and `^D` which are converted into keyboard interrupts and end of file exceptions respectively. This is done because otherwise, it's too easy to forget about that and to create scripts that cannot be properly exited.

## Waiting for Key Press

<div class="versionadded">

2.0

</div>

Sometimes, it's useful to pause until the user presses any key on the keyboard. This is especially useful on Windows where `cmd.exe` will close the window at the end of the command execution by default, instead of waiting.

In click, this can be accomplished with the <span class="title-ref">pause</span> function. This function will print a quick message to the terminal (which can be customized) and wait for the user to press a key. In addition to that, it will also become a NOP (no operation instruction) if the script is not run interactively.

Example:

    import click
    click.pause()

## Launching Editors

<div class="versionadded">

2.0

</div>

Click supports launching editors automatically through <span class="title-ref">edit</span>. This is very useful for asking users for multi-line input. It will automatically open the user's defined editor or fall back to a sensible default. If the user closes the editor without saving, the return value will be `None`, otherwise the entered text.

Example usage:

    import click
    
    def get_commit_message():
        MARKER = '# Everything below is ignored\n'
        message = click.edit('\n\n' + MARKER)
        if message is not None:
            return message.split(MARKER, 1)[0].rstrip('\n')

Alternatively, the function can also be used to launch editors for files by a specific filename. In this case, the return value is always <span class="title-ref">None</span>.

Example usage:

    import click
    click.edit(filename='/etc/passwd')

## Launching Applications

<div class="versionadded">

2.0

</div>

Click supports launching applications through <span class="title-ref">launch</span>. This can be used to open the default application associated with a URL or filetype. This can be used to launch web browsers or picture viewers, for instance. In addition to this, it can also launch the file manager and automatically select the provided file.

Example usage:

    click.launch("https://click.palletsprojects.com/")
    click.launch("/my/downloaded/file.txt", locate=True)

## Printing Filenames

Because filenames might not be Unicode, formatting them can be a bit tricky.

The way this works with click is through the <span class="title-ref">format\_filename</span> function. It does a best-effort conversion of the filename to Unicode and will never fail. This makes it possible to use these filenames in the context of a full Unicode string.

Example:

    click.echo(f"Path: {click.format_filename(b'foo.txt')}")

## Standard Streams

For command line utilities, it's very important to get access to input and output streams reliably. Python generally provides access to these streams through `sys.stdout` and friends, but unfortunately, there are API differences between 2.x and 3.x, especially with regards to how these streams respond to Unicode and binary data.

Because of this, click provides the <span class="title-ref">get\_binary\_stream</span> and <span class="title-ref">get\_text\_stream</span> functions, which produce consistent results with different Python versions and for a wide variety of terminal configurations.

The end result is that these functions will always return a functional stream object (except in very odd cases; see \[/unicode-support\](/unicode-support.md)).

Example:

    import click
    
    stdin_text = click.get_text_stream('stdin')
    stdout_binary = click.get_binary_stream('stdout')

<div class="versionadded">

6.0

</div>

Click now emulates output streams on Windows to support unicode to the Windows console through separate APIs. For more information see \[wincmd\](wincmd.md).

## Intelligent File Opening

<div class="versionadded">

3.0

</div>

Starting with Click 3.0 the logic for opening files from the <span class="title-ref">File</span> type is exposed through the <span class="title-ref">open\_file</span> function. It can intelligently open stdin/stdout as well as any other file.

Example:

    import click
    
    stdout = click.open_file('-', 'w')
    test_file = click.open_file('test.txt', 'w')

If stdin or stdout are returned, the return value is wrapped in a special file where the context manager will prevent the closing of the file. This makes the handling of standard streams transparent and you can always use it like this:

    with click.open_file(filename, 'w') as f:
        f.write('Hello World!\n')

## Finding Application Folders

<div class="versionadded">

2.0

</div>

Very often, you want to open a configuration file that belongs to your application. However, different operating systems store these configuration files in different locations depending on their standards. Click provides a <span class="title-ref">get\_app\_dir</span> function which returns the most appropriate location for per-user config files for your application depending on the OS.

Example usage:

    import os
    import click
    import ConfigParser
    
    APP_NAME = 'My Application'
    
    def read_config():
        cfg = os.path.join(click.get_app_dir(APP_NAME), 'config.ini')
        parser = ConfigParser.RawConfigParser()
        parser.read([cfg])
        rv = {}
        for section in parser.sections():
            for key, value in parser.items(section):
                rv[f"{section}.{key}"] = value
        return rv

## Showing Progress Bars

Sometimes, you have command line scripts that need to process a lot of data, but you want to quickly show the user some progress about how long that will take. Click supports simple progress bar rendering for that through the <span class="title-ref">progressbar</span> function.

\> **Note** \> If you find that you have requirements beyond what Click's progress bar supports, try using [tqdm]().

> 

The basic usage is very simple: the idea is that you have an iterable that you want to operate on. For each item in the iterable it might take some time to do processing. So say you have a loop like this:

    for user in all_the_users_to_process:
        modify_the_user(user)

To hook this up with an automatically updating progress bar, all you need to do is to change the code to this:

    import click
    
    with click.progressbar(all_the_users_to_process) as bar:
        for user in bar:
            modify_the_user(user)

Click will then automatically print a progress bar to the terminal and calculate the remaining time for you. The calculation of remaining time requires that the iterable has a length. If it does not have a length but you know the length, you can explicitly provide it:

    with click.progressbar(all_the_users_to_process,
                           length=number_of_users) as bar:
        for user in bar:
            modify_the_user(user)

Note that <span class="title-ref">progressbar</span> updates the bar *after* each iteration of the loop. So code like this will render correctly:

    import time
    
    with click.progressbar([1, 2, 3]) as bar:
        for x in bar:
            print(f"sleep({x})...")
            time.sleep(x)

Another useful feature is to associate a label with the progress bar which will be shown preceding the progress bar:

    with click.progressbar(all_the_users_to_process,
                           label='Modifying user accounts',
                           length=number_of_users) as bar:
        for user in bar:
            modify_the_user(user)

Sometimes, one may need to iterate over an external iterator, and advance the progress bar irregularly. To do so, you need to specify the length (and no iterable), and use the update method on the context return value instead of iterating directly over it:

    with click.progressbar(length=total_size,
                           label='Unzipping archive') as bar:
        for archive in zip_file:
            archive.extract()
            bar.update(archive.size)

---

virtualenv.md

---

# Virtualenv

## Why Use Virtualenv?

You should use [Virtualenv](https://virtualenv.pypa.io/en/latest/) because:

  - It allows you to install multiple versions of the same dependency.
  - If you have an operating system version of Python, it prevents you from changing its dependencies and potentially messing up your os.

## How to Use Virtualenv

Create your project folder, then a virtualenv within it:

    $ mkdir myproject
    $ cd myproject
    $ python3 -m venv .venv

Now, whenever you want to work on a project, you only have to activate the corresponding environment.

<div class="tabs">

<div class="group-tab">

OSX/Linux

  - \`\`\`text  
    $ . .venv/bin/activate (venv) $

</div>

<div class="group-tab">

Windows

``` text
> .venv\scripts\activate
(venv) >
```

</div>

</div>

You are now using your virtualenv (notice how the prompt of your shell has changed to show the active environment).

To install packages in the virtual environment:

    $ pip install click

And if you want to stop using the virtualenv, use the following command:

    $ deactivate

After doing this, the prompt of your shell should be as familiar as before. \`\`\`

---

why.md

---

# Why Click?

There are so many libraries out there for writing command line utilities; why does Click exist?

This question is easy to answer: because there is not a single command line utility for Python out there which ticks the following boxes:

  - Is lazily composable without restrictions.
  - Supports implementation of Unix/POSIX command line conventions.
  - Supports loading values from environment variables out of the box.
  - Support for prompting of custom values.
  - Is fully nestable and composable.
  - Supports file handling out of the box.
  - Comes with useful common helpers (getting terminal dimensions, ANSI colors, fetching direct keyboard input, screen clearing, finding config paths, launching apps and editors, etc.).

There are many alternatives to Click; the obvious ones are `optparse` and `argparse` from the standard library. Have a look to see if something else resonates with you.

Click actually implements its own parsing of arguments and does not use `optparse` or `argparse` following the `optparse` parsing behavior. The reason it's not based on `argparse` is that `argparse` does not allow proper nesting of commands by design and has some deficiencies when it comes to POSIX compliant argument handling.

Click is designed to be fun and customizable but not overly flexible. For instance, the customizability of help pages is constrained. This constraint is intentional because Click promises multiple Click instances will continue to function as intended when strung together.

Too much customizability would break this promise.

Click was written to support the [Flask](https://palletsprojects.com/p/flask/) microframework ecosystem because no tool could provide it with the functionality it needed.

To get an understanding of what Click is all about, I strongly recommend looking at the \[complex-guide\](\#complex-guide) chapter.

## Why not Argparse?

Click is internally based on `optparse` instead of `argparse`. This is an implementation detail that a user does not have to be concerned with. Click is not based on `argparse` because it has some behaviors that make handling arbitrary command line interfaces hard:

  - `argparse` has built-in behavior to guess if something is an argument or an option. This becomes a problem when dealing with incomplete command lines; the behaviour becomes unpredictable without full knowledge of a command line. This goes against Click's ambitions of dispatching to subparsers.
  - `argparse` does not support disabling interspersed arguments. Without this feature, it's not possible to safely implement Click's nested parsing.

## Why not Docopt etc.?

Docopt, and many tools like it, are cool in how they work, but very few of these tools deal with nesting of commands and composability in a way like Click. To the best of the developer's knowledge, Click is the first Python library that aims to create a level of composability of applications that goes beyond what the system itself supports.

Docopt, for instance, acts by parsing your help pages and then parsing according to those rules. The side effect of this is that docopt is quite rigid in how it handles the command line interface. The upside of docopt is that it gives you strong control over your help page; the downside is that due to this it cannot rewrap your output for the current terminal width, and it makes translations hard. On top of that, docopt is restricted to basic parsing. It does not handle argument dispatching and callback invocation or types. This means there is a lot of code that needs to be written in addition to the basic help page to handle the parsing results.

Most of all, however, it makes composability hard. While docopt does support dispatching to subcommands, it, for instance, does not directly support any kind of automatic subcommand enumeration based on what's available or it does not enforce subcommands to work in a consistent way.

This is fine, but it's different from how Click wants to work. Click aims to support fully composable command line user interfaces by doing the following:

  - Click does not just parse, it also dispatches to the appropriate code.
  - Click has a strong concept of an invocation context that allows subcommands to respond to data from the parent command.
  - Click has strong information available for all parameters and commands, so it can generate unified help pages for the full CLI and assist the user in converting the input data as necessary.
  - Click has a strong understanding of what types are, and it can give the user consistent error messages if something goes wrong. A subcommand written by a different developer will not suddenly die with a different error message because it's manually handled.
  - Click has enough meta information available for its whole program to evolve over time and improve the user experience without forcing developers to adjust their programs. For instance, if Click decides to change how help pages are formatted, all Click programs will automatically benefit from this.

The aim of Click is to make composable systems. Whereas, the aim of docopt is to build the most beautiful and hand-crafted command line interfaces. These two goals conflict with one another in subtle ways. Click actively prevents people from implementing certain patterns in order to achieve unified command line interfaces. For instance, as a developer, you are given very little choice in formatting your help pages.

## Why Hardcoded Behaviors?

The other question is why Click goes away from optparse and hardcodes certain behaviors instead of staying configurable. There are multiple reasons for this. The biggest one is that too much configurability makes it hard to achieve a consistent command line experience.

The best example for this is optparse's `callback` functionality for accepting an arbitrary number of arguments. Due to syntactical ambiguities on the command line, there is no way to implement fully variadic arguments. There are always tradeoffs that need to be made and in case of `argparse` these tradeoffs have been critical enough, that a system like Click cannot even be implemented on top of it.

In this particular case, Click attempts to stay with a handful of accepted paradigms for building command line interfaces that can be well documented and tested.

## Why No Auto Correction?

The question came up why Click does not auto correct parameters given that even optparse and `argparse` support automatic expansion of long arguments. The reason for this is that it's a liability for backwards compatibility. If people start relying on automatically modified parameters and someone adds a new parameter in the future, the script might stop working. These kinds of problems are hard to find, so Click does not attempt to be magical about this.

This sort of behavior however can be implemented on a higher level to support things such as explicit aliases. For more information see \[aliases\](\#aliases).

---

wincmd.md

---

# Windows Console Notes

<div class="versionadded">

6.0

</div>

Click emulates output streams on Windows to support unicode to the Windows console through separate APIs and we perform different decoding of parameters.

Here is a brief overview of how this works and what it means to you.

## Unicode Arguments

Click internally is generally based on the concept that any argument can come in as either byte string or unicode string and conversion is performed to the type expected value as late as possible. This has some advantages as it allows us to accept the data in the most appropriate form for the operating system and Python version.

This caused some problems on Windows where initially the wrong encoding was used and garbage ended up in your input data. We not only fixed the encoding part, but we also now extract unicode parameters from <span class="title-ref">sys.argv</span>.

There is also another limitation with this: if <span class="title-ref">sys.argv</span> was modified prior to invoking a click handler, we have to fall back to the regular byte input in which case not all unicode values are available but only a subset of the codepage used for parameters.

## Unicode Output and Input

Unicode output and input on Windows is implemented through the concept of a dispatching text stream. What this means is that when click first needs a text output (or input) stream on windows it goes through a few checks to figure out of a windows console is connected or not. If no Windows console is present then the text output stream is returned as such and the encoding for that stream is set to `utf-8` like on all platforms.

However if a console is connected the stream will instead be emulated and use the cmd.exe unicode APIs to output text information. In this case the stream will also use `utf-16-le` as internal encoding. However there is some hackery going on that the underlying raw IO buffer is still bypassing the unicode APIs and byte output through an indirection is still possible.

  - This unicode support is limited to `click.echo`, `click.prompt` as well as `click.get_text_stream`.
  - Depending on if unicode values or byte strings are passed the control flow goes completely different places internally which can have some odd artifacts if data partially ends up being buffered. Click attempts to protect against that by manually always flushing but if you are mixing and matching different string types to `stdout` or `stderr` you will need to manually flush.
  - The raw output stream is set to binary mode, which is a global operation on Windows, so `print` calls will be affected. Prefer `click.echo` over `print`.
  - On Windows 7 and below, there is a limitation where at most 64k characters can be written in one call in binary mode. In this situation, `sys.stdout` and `sys.stderr` are replaced with wrappers that work around the limitation.

Another important thing to note is that the Windows console's default fonts do not support a lot of characters which means that you are mostly limited to international letters but no emojis or special characters.

---

CHANGES.rst

---

::: {.currentmodule}
click
:::

Version 8.2.0
=============

Unreleased

-   Drop support for Python 3.7. `2588`{.interpreted-text role="pr"}
-   Use modern packaging metadata with `pyproject.toml` instead of `setup.cfg`. `326`{.interpreted-text role="pr"}
-   Use `flit_core` instead of `setuptools` as build backend.
-   Deprecate the `__version__` attribute. Use feature detection, or `importlib.metadata.version("click")`, instead. `2598`{.interpreted-text role="issue"}
-   `BaseCommand` is deprecated. `Command` is the base class for all commands. `2589`{.interpreted-text role="issue"}
-   `MultiCommand` is deprecated. `Group` is the base class for all group commands. `2590`{.interpreted-text role="issue"}
-   The current parser and related classes and methods, are deprecated. `2205`{.interpreted-text role="issue"}
    -   `OptionParser` and the `parser` module, which is a modified copy of `optparse` in the standard library.
    -   `Context.protected_args` is unneeded. `Context.args` contains any remaining arguments while parsing.
    -   `Parameter.add_to_parser` (on both `Argument` and `Option`) is unneeded. Parsing works directly without building a separate parser.
    -   `split_arg_string` is moved from `parser` to `shell_completion`.
-   Enable deferred evaluation of annotations with `from __future__ import annotations`. `2270`{.interpreted-text role="pr"}
-   When generating a command\'s name from a decorated function\'s name, the suffixes `_command`, `_cmd`, `_group`, and `_grp` are removed. `2322`{.interpreted-text role="issue"}
-   Show the `types.ParamType.name` for `types.Choice` options within `--help` message if `show_choices=False` is specified. `2356`{.interpreted-text role="issue"}
-   Do not display default values in prompts when `Option.show_default` is `False`. `2509`{.interpreted-text role="pr"}
-   Add `get_help_extra` method on `Option` to fetch the generated extra items used in `get_help_record` to render help text. `2516`{.interpreted-text role="issue"} `2517`{.interpreted-text role="pr"}
-   Keep stdout and stderr streams independent in `CliRunner`. Always collect stderr output and never raise an exception. Add a new output\` stream to simulate what the user sees in its terminal. Removes the `mix_stderr` parameter in `CliRunner`. `2522`{.interpreted-text role="issue"} `2523`{.interpreted-text role="pr"}
-   `Option.show_envvar` now also shows environment variable in error messages. `2695`{.interpreted-text role="issue"} `2696`{.interpreted-text role="pr"}
-   `Context.close` will be called on exit. This results in all `Context.call_on_close` callbacks and context managers added via `Context.with_resource` to be closed on exit as well. `2680`{.interpreted-text role="pr"}
-   Add `ProgressBar(hidden: bool)` to allow hiding the progressbar. `2609`{.interpreted-text role="issue"}
-   A `UserWarning` will be shown when multiple parameters attempt to use the same name. `2396`{.interpreted-text role="issue"}\`
-   When using `Option.envvar` with `Option.flag_value`, the `flag_value` will always be used instead of the value of the environment variable. `2746`{.interpreted-text role="issue"} `2788`{.interpreted-text role="pr"}
-   Add `Choice.get_invalid_choice_message` method for customizing the invalid choice message. `2621`{.interpreted-text role="issue"} `2622`{.interpreted-text role="pr"}
-   If help is shown because `no_args_is_help` is enabled (defaults to `True` for groups, `False` for commands), the exit code is 2 instead of 0. `1489`{.interpreted-text role="issue"} `1489`{.interpreted-text role="pr"}
-   Contexts created during shell completion are closed properly, fixing `ResourceWarning`s when using `click.File`. `2644`{.interpreted-text role="issue"} `2800`{.interpreted-text role="pr"} `2767`{.interpreted-text role="pr"}
-   `click.edit(filename)` now supports passing an iterable of filenames in case the editor supports editing multiple files at once. Its return type is now also typed: `AnyStr` if `text` is passed, otherwise `None`. `2067`{.interpreted-text role="issue"} `2068`{.interpreted-text role="pr"}
-   Specialized typing of `progressbar(length=...)` as `ProgressBar[int]`. `2630`{.interpreted-text role="pr"}
-   Improve `echo_via_pager` behaviour in face of errors. `2674`{.interpreted-text role="issue"}
    -   Terminate the pager in case a generator passed to `echo_via_pager` raises an exception.
    -   Ensure to always close the pipe to the pager process and wait for it to terminate.
    -   `echo_via_pager` will not ignore `KeyboardInterrupt` anymore. This allows the user to search for future output of the generator when using less and then aborting the program using ctrl-c.

Version 8.1.8
=============

Unreleased

-   Fix an issue with type hints for `click.open_file()`. `2717`{.interpreted-text role="issue"}
-   Fix issue where error message for invalid `click.Path` displays on multiple lines. `2697`{.interpreted-text role="issue"}
-   Fixed issue that prevented a default value of `""` from being displayed in the help for an option. `2500`{.interpreted-text role="issue"}
-   The test runner handles stripping color consistently on Windows. `2705`{.interpreted-text role="issue"}
-   Show correct value for flag default when using `default_map`. `2632`{.interpreted-text role="issue"}
-   Fix `click.echo(color=...)` passing `color` to coloroma so it can be forced on Windows. `2606`{.interpreted-text role="issue"}.

Version 8.1.7
=============

Released 2023-08-17

-   Fix issue with regex flags in shell completion. `2581`{.interpreted-text role="issue"}
-   Bash version detection issues a warning instead of an error. `2574`{.interpreted-text role="issue"}
-   Fix issue with completion script for Fish shell. `2567`{.interpreted-text role="issue"}

Version 8.1.6
=============

Released 2023-07-18

-   Fix an issue with type hints for `@click.group()`. `2558`{.interpreted-text role="issue"}

Version 8.1.5
=============

Released 2023-07-13

-   Fix an issue with type hints for `@click.command()`, `@click.option()`, and other decorators. Introduce typing tests. `2558`{.interpreted-text role="issue"}

Version 8.1.4
=============

Released 2023-07-06

-   Replace all `typing.Dict` occurrences to `typing.MutableMapping` for parameter hints. `2255`{.interpreted-text role="issue"}
-   Improve type hinting for decorators and give all generic types parameters. `2398`{.interpreted-text role="issue"}
-   Fix return value and type signature of [shell\_completion.add\_completion\_class]{.title-ref} function. `2421`{.interpreted-text role="pr"}
-   Bash version detection doesn\'t fail on Windows. `2461`{.interpreted-text role="issue"}
-   Completion works if there is a dot (`.`) in the program name. `2166`{.interpreted-text role="issue"}
-   Improve type annotations for pyright type checker. `2268`{.interpreted-text role="issue"}
-   Improve responsiveness of `click.clear()`. `2284`{.interpreted-text role="issue"}
-   Improve command name detection when using Shiv or PEX. `2332`{.interpreted-text role="issue"}
-   Avoid showing empty lines if command help text is empty. `2368`{.interpreted-text role="issue"}
-   ZSH completion script works when loaded from `fpath`. `2344`{.interpreted-text role="issue"}.
-   `EOFError` and `KeyboardInterrupt` tracebacks are not suppressed when `standalone_mode` is disabled. `2380`{.interpreted-text role="issue"}
-   `@group.command` does not fail if the group was created with a custom `command_class`. `2416`{.interpreted-text role="issue"}
-   `multiple=True` is allowed for flag options again and does not require setting `default=()`. `2246, 2292, 2295`{.interpreted-text role="issue"}
-   Make the decorators returned by `@argument()` and `@option()` reusable when the `cls` parameter is used. `2294`{.interpreted-text role="issue"}
-   Don\'t fail when writing filenames to streams with strict errors. Replace invalid bytes with the replacement character (`�`). `2395`{.interpreted-text role="issue"}
-   Remove unnecessary attempt to detect MSYS2 environment. `2355`{.interpreted-text role="issue"}
-   Remove outdated and unnecessary detection of App Engine environment. `2554`{.interpreted-text role="pr"}
-   `echo()` does not fail when no streams are attached, such as with `pythonw` on Windows. `2415`{.interpreted-text role="issue"}
-   Argument with `expose_value=False` do not cause completion to fail. `2336`{.interpreted-text role="issue"}

Version 8.1.3
=============

Released 2022-04-28

-   Use verbose form of `typing.Callable` for `@command` and `@group`. `2255`{.interpreted-text role="issue"}
-   Show error when attempting to create an option with `multiple=True, is_flag=True`. Use `count` instead. `2246`{.interpreted-text role="issue"}

Version 8.1.2
=============

Released 2022-03-31

-   Fix error message for readable path check that was mixed up with the executable check. `2236`{.interpreted-text role="pr"}
-   Restore parameter order for `Path`, placing the `executable` parameter at the end. It is recommended to use keyword arguments instead of positional arguments. `2235`{.interpreted-text role="issue"}

Version 8.1.1
=============

Released 2022-03-30

-   Fix an issue with decorator typing that caused type checking to report that a command was not callable. `2227`{.interpreted-text role="issue"}

Version 8.1.0
=============

Released 2022-03-28

-   Drop support for Python 3.6. `2129`{.interpreted-text role="pr"}
-   Remove previously deprecated code. `2130`{.interpreted-text role="pr"}
    -   `Group.resultcallback` is renamed to `result_callback`.
    -   `autocompletion` parameter to `Command` is renamed to `shell_complete`.
    -   `get_terminal_size` is removed, use `shutil.get_terminal_size` instead.
    -   `get_os_args` is removed, use `sys.argv[1:]` instead.
-   Rely on `538`{.interpreted-text role="pep"} and `540`{.interpreted-text role="pep"} to handle selecting UTF-8 encoding instead of ASCII. Click\'s locale encoding detection is removed. `2198`{.interpreted-text role="issue"}
-   Single options boolean flags with `show_default=True` only show the default if it is `True`. `1971`{.interpreted-text role="issue"}
-   The `command` and `group` decorators can be applied with or without parentheses. `1359`{.interpreted-text role="issue"}
-   The `Path` type can check whether the target is executable. `1961`{.interpreted-text role="issue"}
-   `Command.show_default` overrides `Context.show_default`, instead of the other way around. `1963`{.interpreted-text role="issue"}
-   Parameter decorators and `@group` handles `cls=None` the same as not passing `cls`. `@option` handles `help=None` the same as not passing `help`. `#1959`{.interpreted-text role="issue"}
-   A flag option with `required=True` requires that the flag is passed instead of choosing the implicit default value. `1978`{.interpreted-text role="issue"}
-   Indentation in help text passed to `Option` and `Command` is cleaned the same as using the `@option` and `@command` decorators does. A command\'s `epilog` and `short_help` are also processed. `1985`{.interpreted-text role="issue"}
-   Store unprocessed `Command.help`, `epilog` and `short_help` strings. Processing is only done when formatting help text for output. `2149`{.interpreted-text role="issue"}
-   Allow empty str input for `prompt()` when `confirmation_prompt=True` and `default=""`. `2157`{.interpreted-text role="issue"}
-   Windows glob pattern expansion doesn\'t fail if a value is an invalid pattern. `2195`{.interpreted-text role="issue"}
-   It\'s possible to pass a list of `params` to `@command`. Any params defined with decorators are appended to the passed params. `2131`{.interpreted-text role="issue"}.
-   `@command` decorator is annotated as returning the correct type if a `cls` argument is used. `2211`{.interpreted-text role="issue"}
-   A `Group` with `invoke_without_command=True` and `chain=False` will invoke its result callback with the group function\'s return value. `2124`{.interpreted-text role="issue"}
-   `to_info_dict` will not fail if a `ParamType` doesn\'t define a `name`. `2168`{.interpreted-text role="issue"}
-   Shell completion prioritizes option values with option prefixes over new options. `2040`{.interpreted-text role="issue"}
-   Options that get an environment variable value using `autoenvvar_prefix` treat an empty value as `None`, consistent with a direct `envvar`. `2146`{.interpreted-text role="issue"}

Version 8.0.4
=============

Released 2022-02-18

-   `open_file` recognizes `Path("-")` as a standard stream, the same as the string `"-"`. `2106`{.interpreted-text role="issue"}
-   The `option` and `argument` decorators preserve the type annotation of the decorated function. `2155`{.interpreted-text role="pr"}
-   A callable default value can customize its help text by overriding `__str__` instead of always showing `(dynamic)`. `2099`{.interpreted-text role="issue"}
-   Fix a typo in the Bash completion script that affected file and directory completion. If this script was generated by a previous version, it should be regenerated. `2163`{.interpreted-text role="issue"}
-   Fix typing for `echo` and `secho` file argument. `2174, 2185`{.interpreted-text role="issue"}

Version 8.0.3
=============

Released 2021-10-10

-   Fix issue with `Path(resolve_path=True)` type creating invalid paths. `2088`{.interpreted-text role="issue"}
-   Importing `readline` does not cause the `confirm()` prompt to disappear when pressing backspace. `2092`{.interpreted-text role="issue"}
-   Any default values injected by `invoke()` are cast to the corresponding parameter\'s type. `2089, 2090`{.interpreted-text role="issue"}

Version 8.0.2
=============

Released 2021-10-08

-   `is_bool_flag` is not set to `True` if `is_flag` is `False`. `1925`{.interpreted-text role="issue"}
-   Bash version detection is locale independent. `1940`{.interpreted-text role="issue"}
-   Empty `default` value is not shown for `multiple=True`. `1969`{.interpreted-text role="issue"}
-   Fix shell completion for arguments that start with a forward slash such as absolute file paths. `1929`{.interpreted-text role="issue"}
-   `Path` type with `resolve_path=True` resolves relative symlinks to be relative to the containing directory. `1921`{.interpreted-text role="issue"}
-   Completion does not skip Python\'s resource cleanup when exiting, avoiding some unexpected warning output. `1738, 2017`{.interpreted-text role="issue"}
-   Fix type annotation for `type` argument in `prompt` function. `2062`{.interpreted-text role="issue"}
-   Fix overline and italic styles, which were incorrectly added when adding underline. `2058`{.interpreted-text role="pr"}
-   An option with `count=True` will not show \"\[x\>=0\]\" in help text. `2072`{.interpreted-text role="issue"}
-   Default values are not cast to the parameter type twice during processing. `2085`{.interpreted-text role="issue"}
-   Options with `multiple` and `flag_value` use the flag value instead of leaving an internal placeholder. `2001`{.interpreted-text role="issue"}

Version 8.0.1
=============

Released 2021-05-19

-   Mark top-level names as exported so type checking understand imports in user projects. `1879`{.interpreted-text role="issue"}
-   Annotate `Context.obj` as `Any` so type checking allows all operations on the arbitrary object. `1885`{.interpreted-text role="issue"}
-   Fix some types that weren\'t available in Python 3.6.0. `1882`{.interpreted-text role="issue"}
-   Fix type checking for iterating over `ProgressBar` object. `1892`{.interpreted-text role="issue"}
-   The `importlib_metadata` backport package is installed on Python \< 3.8. `1889`{.interpreted-text role="issue"}
-   Arguments with `nargs=-1` only use env var value if no command line values are given. `1903`{.interpreted-text role="issue"}
-   Flag options guess their type from `flag_value` if given, like regular options do from `default`. `1886`{.interpreted-text role="issue"}
-   Added documentation that custom parameter types may be passed already valid values in addition to strings. `1898`{.interpreted-text role="issue"}
-   Resolving commands returns the name that was given, not `command.name`, fixing an unintended change to help text and `default_map` lookups. When using patterns like `AliasedGroup`, override `resolve_command` to change the name that is returned if needed. `1895`{.interpreted-text role="issue"}
-   If a default value is invalid, it does not prevent showing help text. `1889`{.interpreted-text role="issue"}
-   Pass `windows_expand_args=False` when calling the main command to disable pattern expansion on Windows. There is no way to escape patterns in CMD, so if the program needs to pass them on as-is then expansion must be disabled. `1901`{.interpreted-text role="issue"}

Version 8.0.0
=============

Released 2021-05-11

-   Drop support for Python 2 and 3.5.
-   Colorama is always installed on Windows in order to provide style and color support. `1784`{.interpreted-text role="pr"}
-   Adds a repr to Command, showing the command name for friendlier debugging. `1267`{.interpreted-text role="issue"}, `1295`{.interpreted-text role="pr"}
-   Add support for distinguishing the source of a command line parameter. `1264`{.interpreted-text role="issue"}, `1329`{.interpreted-text role="pr"}
-   Add an optional parameter to `ProgressBar.update` to set the `current_item`. `1226`{.interpreted-text role="issue"}, `1332`{.interpreted-text role="pr"}
-   `version_option` uses `importlib.metadata` (or the `importlib_metadata` backport) instead of `pkg_resources`. The version is detected based on the package name, not the entry point name. The Python package name must match the installed package name, or be passed with `package_name=`. `1582`{.interpreted-text role="issue"}
-   If validation fails for a prompt with `hide_input=True`, the value is not shown in the error message. `1460`{.interpreted-text role="issue"}
-   An `IntRange` or `FloatRange` option shows the accepted range in its help text. `1525`{.interpreted-text role="issue"}, `1303`{.interpreted-text role="pr"}
-   `IntRange` and `FloatRange` bounds can be open (`<`) instead of closed (`<=`) by setting `min_open` and `max_open`. Error messages have changed to reflect this. `1100`{.interpreted-text role="issue"}
-   An option defined with duplicate flag names (`"--foo/--foo"`) raises a `ValueError`. `1465`{.interpreted-text role="issue"}
-   `echo()` will not fail when using pytest\'s `capsys` fixture on Windows. `1590`{.interpreted-text role="issue"}
-   Resolving commands returns the canonical command name instead of the matched name. This makes behavior such as help text and `Context.invoked_subcommand` consistent when using patterns like `AliasedGroup`. `1422`{.interpreted-text role="issue"}
-   The `BOOL` type accepts the values \"on\" and \"off\". `1629`{.interpreted-text role="issue"}
-   A `Group` with `invoke_without_command=True` will always invoke its result callback. `1178`{.interpreted-text role="issue"}
-   `nargs == -1` and `nargs > 1` is parsed and validated for values from environment variables and defaults. `729`{.interpreted-text role="issue"}
-   Detect the program name when executing a module or package with `python -m name`. `1603`{.interpreted-text role="issue"}
-   Include required parent arguments in help synopsis of subcommands. `1475`{.interpreted-text role="issue"}
-   Help for boolean flags with `show_default=True` shows the flag name instead of `True` or `False`. `1538`{.interpreted-text role="issue"}
-   Non-string objects passed to `style()` and `secho()` will be converted to string. `1146`{.interpreted-text role="pr"}
-   `edit(require_save=True)` will detect saves for editors that exit very fast on filesystems with 1 second resolution. `1050`{.interpreted-text role="pr"}
-   New class attributes make it easier to use custom core objects throughout an entire application. `938`{.interpreted-text role="pr"}
    -   `Command.context_class` controls the context created when running the command.
    -   `Context.invoke` creates new contexts of the same type, so a custom type will persist to invoked subcommands.
    -   `Context.formatter_class` controls the formatter used to generate help and usage.
    -   `Group.command_class` changes the default type for subcommands with `@group.command()`.
    -   `Group.group_class` changes the default type for subgroups with `@group.group()`. Setting it to `type` will create subgroups of the same type as the group itself.
    -   Core objects use `super()` consistently for better support of subclassing.
-   Use `Context.with_resource()` to manage resources that would normally be used in a `with` statement, allowing them to be used across subcommands and callbacks, then cleaned up when the context ends. `1191`{.interpreted-text role="pr"}
-   The result object returned by the test runner\'s `invoke()` method has a `return_value` attribute with the value returned by the invoked command. `1312`{.interpreted-text role="pr"}
-   Required arguments with the `Choice` type show the choices in curly braces to indicate that one is required (`{a|b|c}`). `1272`{.interpreted-text role="issue"}
-   If only a name is passed to `option()`, Click suggests renaming it to `--name`. `1355`{.interpreted-text role="pr"}
-   A context\'s `show_default` parameter defaults to the value from the parent context. `1565`{.interpreted-text role="issue"}
-   `click.style()` can output 256 and RGB color codes. Most modern terminals support these codes. `1429`{.interpreted-text role="pr"}
-   When using `CliRunner.invoke()`, the replaced `stdin` file has `name` and `mode` attributes. This lets `File` options with the `-` value match non-testing behavior. `1064`{.interpreted-text role="issue"}
-   When creating a `Group`, allow passing a list of commands instead of a dict. `1339`{.interpreted-text role="issue"}
-   When a long option name isn\'t valid, use `difflib` to make better suggestions for possible corrections. `1446`{.interpreted-text role="issue"}
-   Core objects have a `to_info_dict()` method. This gathers information about the object\'s structure that could be useful for a tool generating user-facing documentation. To get the structure of an entire CLI, use `Context(cli).to_info_dict()`. `461`{.interpreted-text role="issue"}
-   Redesign the shell completion system. `1484`{.interpreted-text role="issue"}, `1622`{.interpreted-text role="pr"}
    -   Support Bash \>= 4.4, Zsh, and Fish, with the ability for extensions to add support for other shells.
    -   Allow commands, groups, parameters, and types to override their completions suggestions.
    -   Groups complete the names commands were registered with, which can differ from the name they were created with.
    -   The `autocompletion` parameter for options and arguments is renamed to `shell_complete`. The function must take `ctx, param, incomplete`, must do matching rather than return all values, and must return a list of strings or a list of `CompletionItem`. The old name and behavior is deprecated and will be removed in 8.1.
    -   The env var values used to start completion have changed order. The shell now comes first, such as `{shell}_source` rather than `source_{shell}`, and is always required.
-   Completion correctly parses command line strings with incomplete quoting or escape sequences. `1708`{.interpreted-text role="issue"}
-   Extra context settings (`obj=...`, etc.) are passed on to the completion system. `942`{.interpreted-text role="issue"}
-   Include `--help` option in completion. `1504`{.interpreted-text role="pr"}
-   `ParameterSource` is an `enum.Enum` subclass. `1530`{.interpreted-text role="issue"}
-   Boolean and UUID types strip surrounding space before converting. `1605`{.interpreted-text role="issue"}
-   Adjusted error message from parameter type validation to be more consistent. Quotes are used to distinguish the invalid value. `1605`{.interpreted-text role="issue"}
-   The default value for a parameter with `nargs` \> 1 and `multiple=True` must be a list of tuples. `1649`{.interpreted-text role="issue"}
-   When getting the value for a parameter, the default is tried in the same section as other sources to ensure consistent processing. `1649`{.interpreted-text role="issue"}
-   All parameter types accept a value that is already the correct type. `1649`{.interpreted-text role="issue"}
-   For shell completion, an argument is considered incomplete if its value did not come from the command line args. `1649`{.interpreted-text role="issue"}
-   Added `ParameterSource.PROMPT` to track parameter values that were prompted for. `1649`{.interpreted-text role="issue"}
-   Options with `nargs` \> 1 no longer raise an error if a default is not given. Parameters with `nargs` \> 1 default to `None`, and parameters with `multiple=True` or `nargs=-1` default to an empty tuple. `472`{.interpreted-text role="issue"}
-   Handle empty env vars as though the option were not passed. This extends the change introduced in 7.1 to be consistent in more cases. `1285`{.interpreted-text role="issue"}
-   `Parameter.get_default()` checks `Context.default_map` to handle overrides consistently in help text, `invoke()`, and prompts. `1548`{.interpreted-text role="issue"}
-   Add `prompt_required` param to `Option`. When set to `False`, the user will only be prompted for an input if no value was passed. `736`{.interpreted-text role="issue"}
-   Providing the value to an option can be made optional through `is_flag=False`, and the value can instead be prompted for or passed in as a default value. `549, 736, 764, 921, 1015, 1618`{.interpreted-text role="issue"}
-   Fix formatting when `Command.options_metavar` is empty. `1551`{.interpreted-text role="pr"}
-   Revert adding space between option help text that wraps. `1831`{.interpreted-text role="issue"}
-   The default value passed to `prompt` will be cast to the correct type like an input value would be. `1517`{.interpreted-text role="pr"}
-   Automatically generated short help messages will stop at the first ending of a phrase or double linebreak. `1082`{.interpreted-text role="issue"}
-   Skip progress bar render steps for efficiency with very fast iterators by setting `update_min_steps`. `676`{.interpreted-text role="issue"}
-   Respect `case_sensitive=False` when doing shell completion for `Choice` `1692`{.interpreted-text role="issue"}
-   Use `mkstemp()` instead of `mktemp()` in pager implementation. `1752`{.interpreted-text role="issue"}
-   If `Option.show_default` is a string, it is displayed even if `default` is `None`. `1732`{.interpreted-text role="issue"}
-   `click.get_terminal_size()` is deprecated and will be removed in 8.1. Use `shutil.get_terminal_size`{.interpreted-text role="func"} instead. `1736`{.interpreted-text role="issue"}
-   Control the location of the temporary directory created by `CLIRunner.isolated_filesystem` by passing `temp_dir`. A custom directory will not be removed automatically. `395`{.interpreted-text role="issue"}
-   `click.confirm()` will prompt until input is given if called with `default=None`. `1381`{.interpreted-text role="issue"}
-   Option prompts validate the value with the option\'s callback in addition to its type. `457`{.interpreted-text role="issue"}
-   `confirmation_prompt` can be set to a custom string. `723`{.interpreted-text role="issue"}
-   Allow styled output in Jupyter on Windows. `1271`{.interpreted-text role="issue"}
-   `style()` supports the `strikethrough`, `italic`, and `overline` styles. `805, 1821`{.interpreted-text role="issue"}
-   Multiline marker is removed from short help text. `1597`{.interpreted-text role="issue"}
-   Restore progress bar behavior of echoing only the label if the file is not a TTY. `1138`{.interpreted-text role="issue"}
-   Progress bar output is shown even if execution time is less than 0.5 seconds. `1648`{.interpreted-text role="issue"}
-   Progress bar `item_show_func` shows the current item, not the previous item. `1353`{.interpreted-text role="issue"}
-   The `Path` param type can be passed `path_type=pathlib.Path` to return a path object instead of a string. `405`{.interpreted-text role="issue"}
-   `TypeError` is raised when parameter with `multiple=True` or `nargs > 1` has non-iterable default. `1749`{.interpreted-text role="issue"}
-   Add a `pass_meta_key` decorator for passing a key from `Context.meta`. This is useful for extensions using `meta` to store information. `1739`{.interpreted-text role="issue"}
-   `Path` `resolve_path` resolves symlinks on Windows Python \< 3.8. `1813`{.interpreted-text role="issue"}
-   Command deprecation notice appears at the start of the help text, as well as in the short help. The notice is not in all caps. `1791`{.interpreted-text role="issue"}
-   When taking arguments from `sys.argv` on Windows, glob patterns, user dir, and env vars are expanded. `1096`{.interpreted-text role="issue"}
-   Marked messages shown by the CLI with `gettext()` to allow applications to translate Click\'s built-in strings. `303`{.interpreted-text role="issue"}
-   Writing invalid characters to `stderr` when using the test runner does not raise a `UnicodeEncodeError`. `848`{.interpreted-text role="issue"}
-   Fix an issue where `readline` would clear the entire `prompt()` line instead of only the input when pressing backspace. `665`{.interpreted-text role="issue"}
-   Add all kwargs passed to `Context.invoke()` to `ctx.params`. Fixes an inconsistency when nesting `Context.forward()` calls. `1568`{.interpreted-text role="issue"}
-   The `MultiCommand.resultcallback` decorator is renamed to `result_callback`. The old name is deprecated. `1160`{.interpreted-text role="issue"}
-   Fix issues with `CliRunner` output when using `echo_stdin=True`. `1101`{.interpreted-text role="issue"}
-   Fix a bug of `click.utils.make_default_short_help` for which the returned string could be as long as `max_width + 3`. `1849`{.interpreted-text role="issue"}
-   When defining a parameter, `default` is validated with `multiple` and `nargs`. More validation is done for values being processed as well. `1806`{.interpreted-text role="issue"}
-   `HelpFormatter.write_text` uses the full line width when wrapping text. `1871`{.interpreted-text role="issue"}

Version 7.1.2
=============

Released 2020-04-27

-   Revert applying shell quoting to commands for `echo_with_pager` and `edit`. This was intended to allows spaces in commands, but caused issues if the string was actually a command and arguments, or on Windows. Instead, the string must be quoted manually as it should appear on the command line. `1514`{.interpreted-text role="issue"}

Version 7.1.1
=============

Released 2020-03-09

-   Fix `ClickException` output going to stdout instead of stderr. `1495`{.interpreted-text role="issue"}

Version 7.1
===========

Released 2020-03-09

-   Fix PyPI package name, \"click\" is lowercase again.
-   Fix link in `unicode_literals` error message. `1151`{.interpreted-text role="pr"}
-   Add support for colored output on UNIX Jupyter notebooks. `1185`{.interpreted-text role="issue"}
-   Operations that strip ANSI controls will strip the cursor hide/show sequences. `1216`{.interpreted-text role="issue"}
-   Remove unused compat shim for `bytes`. `1195`{.interpreted-text role="pr"}
-   Expand testing around termui, especially getchar on Windows. `1116`{.interpreted-text role="issue"}
-   Fix output on Windows Python 2.7 built with MSVC 14. `1342`{.interpreted-text role="pr"}
-   Fix `OSError` when running in MSYS2. `1338`{.interpreted-text role="issue"}
-   Fix `OSError` when redirecting to `NUL` stream on Windows. `1065`{.interpreted-text role="issue"}
-   Fix memory leak when parsing Unicode arguments on Windows. `1136`{.interpreted-text role="issue"}
-   Fix error in new AppEngine environments. `1462`{.interpreted-text role="issue"}
-   Always return one of the passed choices for `click.Choice` `1277`{.interpreted-text role="issue"}, `1318`{.interpreted-text role="pr"}
-   Add `no_args_is_help` option to `click.Command`, defaults to False `1167`{.interpreted-text role="pr"}
-   Add `show_default` parameter to `Context` to enable showing defaults globally. `1018`{.interpreted-text role="issue"}
-   Handle `env MYPATH=''` as though the option were not passed. `1196`{.interpreted-text role="issue"}
-   It is once again possible to call `next(bar)` on an active progress bar instance. `1125`{.interpreted-text role="issue"}
-   `open_file` with `atomic=True` retains permissions of existing files and respects the current umask for new files. `1376`{.interpreted-text role="issue"}
-   When using the test `CliRunner` with `mix_stderr=False`, if `result.stderr` is empty it will not raise a `ValueError`. `1193`{.interpreted-text role="issue"}
-   Remove the unused `mix_stderr` parameter from `CliRunner.invoke`. `1435`{.interpreted-text role="issue"}
-   Fix `TypeError` raised when using bool flags and specifying `type=bool`. `1287`{.interpreted-text role="issue"}
-   Newlines in option help text are replaced with spaces before re-wrapping to avoid uneven line breaks. `834`{.interpreted-text role="issue"}
-   `MissingParameter` exceptions are printable in the Python interpreter. `1139`{.interpreted-text role="issue"}
-   Fix how default values for file-type options are shown during prompts. `914`{.interpreted-text role="issue"}
-   Fix environment variable automatic generation for commands containing `-`. `1253`{.interpreted-text role="issue"}
-   Option help text replaces newlines with spaces when rewrapping, but preserves paragraph breaks, fixing multiline formatting. `834, 1066, 1397`{.interpreted-text role="issue"}
-   Option help text that is wrapped adds an extra newline at the end to distinguish it from the next option. `1075`{.interpreted-text role="issue"}
-   Consider `sensible-editor` when determining the editor to use for `click.edit()`. `1469`{.interpreted-text role="pr"}
-   Arguments to system calls such as the executable path passed to `click.edit` can contains spaces. `1470`{.interpreted-text role="pr"}
-   Add ZSH completion autoloading and error handling. `1348`{.interpreted-text role="issue"}
-   Add a repr to `Command`, `Group`, `Option`, and `Argument`, showing the name for friendlier debugging. `1267`{.interpreted-text role="issue"}
-   Completion doesn\'t consider option names if a value starts with `-` after the `--` separator. `1247`{.interpreted-text role="issue"}
-   ZSH completion escapes special characters in values. `1418`{.interpreted-text role="pr"}
-   Add completion support for Fish shell. `1423`{.interpreted-text role="pr"}
-   Decoding bytes option values falls back to UTF-8 in more cases. `1468`{.interpreted-text role="pr"}
-   Make the warning about old 2-arg parameter callbacks a deprecation warning, to be removed in 8.0. This has been a warning since Click 2.0. `1492`{.interpreted-text role="pr"}
-   Adjust error messages to standardize the types of quotes used so they match error messages from Python.

Version 7.0
===========

Released 2018-09-25

-   Drop support for Python 2.6 and 3.3. `967, 976`{.interpreted-text role="pr"}
-   Wrap `click.Choice`\'s missing message. `202`{.interpreted-text role="issue"}, `1000`{.interpreted-text role="pr"}
-   Add native ZSH autocompletion support. `323`{.interpreted-text role="issue"}, `865`{.interpreted-text role="pr"}
-   Document that ANSI color info isn\'t parsed from bytearrays in Python
    2.  `334`{.interpreted-text role="issue"}
-   Document byte-stripping behavior of `CliRunner`. `334`{.interpreted-text role="issue"}, `1010`{.interpreted-text role="pr"}
-   Usage errors now hint at the `--help` option. `393`{.interpreted-text role="issue"}, `557`{.interpreted-text role="pr"}
-   Implement streaming pager. `409`{.interpreted-text role="issue"}, `889`{.interpreted-text role="pr"}
-   Extract bar formatting to its own method. `414`{.interpreted-text role="pr"}
-   Add `DateTime` type for converting input in given date time formats. `423`{.interpreted-text role="pr"}
-   `secho`\'s first argument can now be `None`, like in `echo`. `424`{.interpreted-text role="pr"}
-   Fixes a `ZeroDivisionError` in `ProgressBar.make_step`, when the arg passed to the first call of `ProgressBar.update` is 0. `447`{.interpreted-text role="issue"}, `1012`{.interpreted-text role="pr"}
-   Show progressbar only if total execution time is visible. `487`{.interpreted-text role="pr"}
-   Added the ability to hide commands and options from help. `500`{.interpreted-text role="pr"}
-   Document that options can be `required=True`. `514`{.interpreted-text role="issue"}, `1022`{.interpreted-text role="pr"}
-   Non-standalone calls to `Context.exit` return the exit code, rather than calling `sys.exit`. `667`{.interpreted-text role="issue"}, `533, 1098`{.interpreted-text role="pr"}
-   `click.getchar()` returns Unicode in Python 3 on Windows, consistent with other platforms. `537, 821, 822, 1088`{.interpreted-text role="issue"}, `1108`{.interpreted-text role="pr"}
-   Added `FloatRange` type. `538, 553`{.interpreted-text role="pr"}
-   Added support for bash completion of `type=click.Choice` for `Options` and `Arguments`. `535`{.interpreted-text role="issue"}, `681`{.interpreted-text role="pr"}
-   Only allow one positional arg for `Argument` parameter declaration. `568, 574`{.interpreted-text role="issue"}, `1014`{.interpreted-text role="pr"}
-   Add `case_sensitive=False` as an option to Choice. `569`{.interpreted-text role="issue"}
-   `click.getchar()` correctly raises `KeyboardInterrupt` on \"\^C\" and `EOFError` on \"\^D\" on Linux. `583`{.interpreted-text role="issue"}, `1115`{.interpreted-text role="pr"}
-   Fix encoding issue with `click.getchar(echo=True)` on Linux. `1115`{.interpreted-text role="pr"}
-   `param_hint` in errors now derived from param itself. `598, 704`{.interpreted-text role="issue"}, `709`{.interpreted-text role="pr"}
-   Add a test that ensures that when an argument is formatted into a usage error, its metavar is used, not its name. `612`{.interpreted-text role="pr"}
-   Allow setting `prog_name` as extra in `CliRunner.invoke`. `616`{.interpreted-text role="issue"}, `999`{.interpreted-text role="pr"}
-   Help text taken from docstrings truncates at the `\f` form feed character, useful for hiding Sphinx-style parameter documentation. `629, 1091`{.interpreted-text role="pr"}
-   `launch` now works properly under Cygwin. `650`{.interpreted-text role="pr"}
-   Update progress after iteration. `651`{.interpreted-text role="issue"}, `706`{.interpreted-text role="pr"}
-   `CliRunner.invoke` now may receive `args` as a string representing a Unix shell command. `664`{.interpreted-text role="pr"}
-   Make `Argument.make_metavar()` default to type metavar. `675`{.interpreted-text role="pr"}
-   Add documentation for `ignore_unknown_options`. `684`{.interpreted-text role="pr"}
-   Add bright colors support for `click.style` and fix the reset option for parameters `fg` and `bg`. `703`{.interpreted-text role="issue"}, `809`{.interpreted-text role="pr"}
-   Add `show_envvar` for showing environment variables in help. `710`{.interpreted-text role="pr"}
-   Avoid `BrokenPipeError` during interpreter shutdown when stdout or stderr is a closed pipe. `712`{.interpreted-text role="issue"}, `1106`{.interpreted-text role="pr"}
-   Document customizing option names. `725`{.interpreted-text role="issue"}, `1016`{.interpreted-text role="pr"}
-   Disable `sys._getframes()` on Python interpreters that don\'t support it. `728`{.interpreted-text role="pr"}
-   Fix bug in test runner when calling `sys.exit` with `None`. `739`{.interpreted-text role="pr"}
-   Clarify documentation on command line options. `741`{.interpreted-text role="issue"}, `1003`{.interpreted-text role="pr"}
-   Fix crash on Windows console. `744`{.interpreted-text role="issue"}
-   Fix bug that caused bash completion to give improper completions on chained commands. `754`{.interpreted-text role="issue"}, `774`{.interpreted-text role="pr"}
-   Added support for dynamic bash completion from a user-supplied callback. `755`{.interpreted-text role="pr"}
-   Added support for bash completions containing spaces. `773`{.interpreted-text role="pr"}
-   Allow autocompletion function to determine whether or not to return completions that start with the incomplete argument. `790`{.interpreted-text role="issue"}, `806`{.interpreted-text role="pr"}
-   Fix option naming routine to match documentation and be deterministic. `793`{.interpreted-text role="issue"}, `794`{.interpreted-text role="pr"}
-   Fix path validation bug. `795`{.interpreted-text role="issue"}, `1020`{.interpreted-text role="pr"}
-   Add test and documentation for `Option` naming: functionality. `799`{.interpreted-text role="pr"}
-   Update doc to match arg name for `path_type`. `801`{.interpreted-text role="pr"}
-   Raw strings added so correct escaping occurs. `807`{.interpreted-text role="pr"}
-   Fix 16k character limit of `click.echo` on Windows. `816`{.interpreted-text role="issue"}, `819`{.interpreted-text role="pr"}
-   Overcome 64k character limit when writing to binary stream on Windows 7. `825`{.interpreted-text role="issue"}, `830`{.interpreted-text role="pr"}
-   Add bool conversion for \"t\" and \"f\". `842`{.interpreted-text role="pr"}
-   `NoSuchOption` errors take `ctx` so that `--help` hint gets printed in error output. `860`{.interpreted-text role="pr"}
-   Fixed the behavior of Click error messages with regards to Unicode on 2.x and 3.x. Message is now always Unicode and the str and Unicode special methods work as you expect on that platform. `862`{.interpreted-text role="issue"}
-   Progress bar now uses stderr by default. `863`{.interpreted-text role="pr"}
-   Add support for auto-completion documentation. `866`{.interpreted-text role="issue"}, `869`{.interpreted-text role="pr"}
-   Allow `CliRunner` to separate stdout and stderr. `868`{.interpreted-text role="pr"}
-   Fix variable precedence. `873`{.interpreted-text role="issue"}, `874`{.interpreted-text role="pr"}
-   Fix invalid escape sequences. `877`{.interpreted-text role="pr"}
-   Fix `ResourceWarning` that occurs during some tests. `878`{.interpreted-text role="pr"}
-   When detecting a misconfigured locale, don\'t fail if the `locale` command fails. `880`{.interpreted-text role="pr"}
-   Add `case_sensitive=False` as an option to `Choice` types. `887`{.interpreted-text role="pr"}
-   Force stdout/stderr writable. This works around issues with badly patched standard streams like those from Jupyter. `918`{.interpreted-text role="pr"}
-   Fix completion of subcommand options after last argument `919`{.interpreted-text role="issue"}, `930`{.interpreted-text role="pr"}
-   `_AtomicFile` now uses the `realpath` of the original filename so that changing the working directory does not affect it. `920`{.interpreted-text role="pr"}
-   Fix incorrect completions when defaults are present `925`{.interpreted-text role="issue"}, `930`{.interpreted-text role="pr"}
-   Add copy option attrs so that custom classes can be re-used. `926`{.interpreted-text role="issue"}, `994`{.interpreted-text role="pr"}
-   \"x\" and \"a\" file modes now use stdout when file is `"-"`. `929`{.interpreted-text role="pr"}
-   Fix missing comma in `__all__` list. `935`{.interpreted-text role="pr"}
-   Clarify how parameters are named. `949`{.interpreted-text role="issue"}, `1009`{.interpreted-text role="pr"}
-   Stdout is now automatically set to non blocking. `954`{.interpreted-text role="pr"}
-   Do not set options twice. `962`{.interpreted-text role="pr"}
-   Move `fcntl` import. `965`{.interpreted-text role="pr"}
-   Fix Google App Engine `ImportError`. `995`{.interpreted-text role="pr"}
-   Better handling of help text for dynamic default option values. `996`{.interpreted-text role="pr"}
-   Fix `get_winter_size()` so it correctly returns `(0,0)`. `997`{.interpreted-text role="pr"}
-   Add test case checking for custom param type. `1001`{.interpreted-text role="pr"}
-   Allow short width to address cmd formatting. `1002`{.interpreted-text role="pr"}
-   Add details about Python version support. `1004`{.interpreted-text role="pr"}
-   Added deprecation flag to commands. `1005`{.interpreted-text role="pr"}
-   Fixed issues where `fd` was undefined. `1007`{.interpreted-text role="pr"}
-   Fix formatting for short help. `1008`{.interpreted-text role="pr"}
-   Document how `auto_envvar_prefix` works with command groups. `1011`{.interpreted-text role="pr"}
-   Don\'t add newlines by default for progress bars. `1013`{.interpreted-text role="pr"}
-   Use Python sorting order for ZSH completions. `1047`{.interpreted-text role="issue"}, `1059`{.interpreted-text role="pr"}
-   Document that parameter names are converted to lowercase by default. `1055`{.interpreted-text role="pr"}
-   Subcommands that are named by the function now automatically have the underscore replaced with a dash. If you register a function named `my_command` it becomes `my-command` in the command line interface.
-   Hide hidden commands and options from completion. `1058`{.interpreted-text role="issue"}, `1061`{.interpreted-text role="pr"}
-   Fix absolute import blocking Click from being vendored into a project on Windows. `1068`{.interpreted-text role="issue"}, `1069`{.interpreted-text role="pr"}
-   Fix issue where a lowercase `auto_envvar_prefix` would not be converted to uppercase. `1105`{.interpreted-text role="pr"}

Version 6.7
===========

Released 2017-01-06

-   Make `click.progressbar` work with `codecs.open` files. `637`{.interpreted-text role="pr"}
-   Fix bug in bash completion with nested subcommands. `639`{.interpreted-text role="pr"}
-   Fix test runner not saving caller env correctly. `644`{.interpreted-text role="pr"}
-   Fix handling of SIGPIPE. `62`{.interpreted-text role="pr"}
-   Deal with broken Windows environments such as Google App Engine\'s. `711`{.interpreted-text role="issue"}

Version 6.6
===========

Released 2016-04-04

-   Fix bug in `click.Path` where it would crash when passed a `-`. `551`{.interpreted-text role="issue"}

Version 6.4
===========

Released 2016-03-24

-   Fix bug in bash completion where click would discard one or more trailing arguments. `471`{.interpreted-text role="issue"}

Version 6.3
===========

Released 2016-02-22

-   Fix argument checks for interpreter invoke with `-m` and `-c` on Windows.
-   Fixed a bug that cased locale detection to error out on Python 3.

Version 6.2
===========

Released 2015-11-27

-   Correct fix for hidden progress bars.

Version 6.1
===========

Released 2015-11-27

-   Resolved an issue with invisible progress bars no longer rendering.
-   Disable chain commands with subcommands as they were inherently broken.
-   Fix `MissingParameter` not working without parameters passed.

Version 6.0
===========

Released 2015-11-24, codename \"pow pow\"

-   Optimized the progressbar rendering to not render when it did not actually change.
-   Explicitly disallow `nargs=-1` with a set default.
-   The context is now closed before it\'s popped from the stack.
-   Added support for short aliases for the false flag on toggles.
-   Click will now attempt to aid you with debugging locale errors better by listing with the help of the OS what locales are available.
-   Click used to return byte strings on Python 2 in some unit-testing situations. This has been fixed to correctly return unicode strings now.
-   For Windows users on Python 2, Click will now handle Unicode more correctly handle Unicode coming in from the system. This also has the disappointing side effect that filenames will now be always unicode by default in the `Path` type which means that this can introduce small bugs for code not aware of this.
-   Added a `type` parameter to `Path` to force a specific string type on the value.
-   For users running Python on Windows the `echo` and `prompt` functions now work with full unicode functionality in the Python windows console by emulating an output stream. This also applies to getting the virtual output and input streams via `click.get_text_stream(...)`.
-   Unittests now always force a certain virtual terminal width.
-   Added support for allowing dashes to indicate standard streams to the `Path` type.
-   Multi commands in chain mode no longer propagate arguments left over from parsing to the callbacks. It\'s also now disallowed through an exception when optional arguments are attached to multi commands if chain mode is enabled.
-   Relaxed restriction that disallowed chained commands to have other chained commands as child commands.
-   Arguments with positive nargs can now have defaults implemented. Previously this configuration would often result in slightly unexpected values be returned.

Version 5.1
===========

Released 2015-08-17

-   Fix a bug in `pass_obj` that would accidentally pass the context too.

Version 5.0
===========

Released 2015-08-16, codename \"tok tok\"

-   Removed various deprecated functionality.
-   Atomic files now only accept the `w` mode.
-   Change the usage part of help output for very long commands to wrap their arguments onto the next line, indented by 4 spaces.
-   Fix a bug where return code and error messages were incorrect when using `CliRunner`.
-   Added `get_current_context`.
-   Added a `meta` dictionary to the context which is shared across the linked list of contexts to allow click utilities to place state there.
-   Introduced `Context.scope`.
-   The `echo` function is now threadsafe: It calls the `write` method of the underlying object only once.
-   `prompt(hide_input=True)` now prints a newline on `^C`.
-   Click will now warn if users are using `unicode_literals`.
-   Click will now ignore the `PAGER` environment variable if it is empty or contains only whitespace.
-   The `click-contrib` GitHub organization was created.

Version 4.1
===========

Released 2015-07-14

-   Fix a bug where error messages would include a trailing `None` string.
-   Fix a bug where Click would crash on docstrings with trailing newlines.
-   Support streams with encoding set to `None` on Python 3 by barfing with a better error.
-   Handle \^C in less-pager properly.
-   Handle return value of `None` from `sys.getfilesystemencoding`
-   Fix crash when writing to unicode files with `click.echo`.
-   Fix type inference with multiple options.

Version 4.0
===========

Released 2015-03-31, codename \"zoom zoom\"

-   Added `color` parameters to lots of interfaces that directly or indirectly call into echoing. This previously was always autodetection (with the exception of the `echo_via_pager` function). Now you can forcefully enable or disable it, overriding the auto detection of Click.
-   Added an `UNPROCESSED` type which does not perform any type changes which simplifies text handling on 2.x / 3.x in some special advanced usecases.
-   Added `NoSuchOption` and `BadOptionUsage` exceptions for more generic handling of errors.
-   Added support for handling of unprocessed options which can be useful in situations where arguments are forwarded to underlying tools.
-   Added `max_content_width` parameter to the context which can be used to change the maximum width of help output. By default Click will not format content for more than 80 characters width.
-   Added support for writing prompts to stderr.
-   Fix a bug when showing the default for multiple arguments.
-   Added support for custom subclasses to `option` and `argument`.
-   Fix bug in `clear()` on Windows when colorama is installed.
-   Reject `nargs=-1` for options properly. Options cannot be variadic.
-   Fixed an issue with bash completion not working properly for commands with non ASCII characters or dashes.
-   Added a way to manually update the progressbar.
-   Changed the formatting of missing arguments. Previously the internal argument name was shown in error messages, now the metavar is shown if passed. In case an automated metavar is selected, it\'s stripped of extra formatting first.

Version 3.3
===========

Released 2014-09-08

-   Fixed an issue with error reporting on Python 3 for invalid forwarding of commands.

Version 3.2
===========

Released 2014-08-22

-   Added missing `err` parameter forwarding to the `secho` function.
-   Fixed default parameters not being handled properly by the context invoke method. This is a backwards incompatible change if the function was used improperly.
-   Removed the `invoked_subcommands` attribute largely. It is not possible to provide it to work error free due to how the parsing works so this API has been deprecated.
-   Restored the functionality of `invoked_subcommand` which was broken as a regression in 3.1.

Version 3.1
===========

Released 2014-08-13

-   Fixed a regression that caused contexts of subcommands to be created before the parent command was invoked which was a regression from earlier Click versions.

Version 3.0
===========

Released 2014-08-12, codename \"clonk clonk\"

-   Formatter now no longer attempts to accommodate for terminals smaller than 50 characters. If that happens it just assumes a minimal width.
-   Added a way to not swallow exceptions in the test system.
-   Added better support for colors with pagers and ways to override the autodetection.
-   The CLI runner\'s result object now has a traceback attached.
-   Improved automatic short help detection to work better with dots that do not terminate sentences.
-   When defining options without actual valid option strings now, Click will give an error message instead of silently passing. This should catch situations where users wanted to created arguments instead of options.
-   Restructured Click internally to support vendoring.
-   Added support for multi command chaining.
-   Added support for defaults on options with `multiple` and options and arguments with `nargs != 1`.
-   Label passed to `progressbar` is no longer rendered with whitespace stripped.
-   Added a way to disable the standalone mode of the `main` method on a Click command to be able to handle errors better.
-   Added support for returning values from command callbacks.
-   Added simplifications for printing to stderr from `echo`.
-   Added result callbacks for groups.
-   Entering a context multiple times defers the cleanup until the last exit occurs.
-   Added `open_file`.

Version 2.6
===========

Released 2014-08-11

-   Fixed an issue where the wrapped streams on Python 3 would be reporting incorrect values for seekable.

Version 2.5
===========

Released 2014-07-28

-   Fixed a bug with text wrapping on Python 3.

Version 2.4
===========

Released 2014-07-04

-   Corrected a bug in the change of the help option in 2.3.

Version 2.3
===========

Released 2014-07-03

-   Fixed an incorrectly formatted help record for count options.
-   Add support for ansi code stripping on Windows if colorama is not available.
-   Restored the Click 1.0 handling of the help parameter for certain edge cases.

Version 2.2
===========

Released 2014-06-26

-   Fixed tty detection on PyPy.
-   Fixed an issue that progress bars were not rendered when the context manager was entered.

Version 2.1
===========

Released 2014-06-14

-   Fixed the `launch`{.interpreted-text role="func"} function on windows.
-   Improved the colorama support on windows to try hard to not screw up the console if the application is interrupted.
-   Fixed windows terminals incorrectly being reported to be 80 characters wide instead of 79
-   Use colorama win32 bindings if available to get the correct dimensions of a windows terminal.
-   Fixed an issue with custom function types on Python 3.
-   Fixed an issue with unknown options being incorrectly reported in error messages.

Version 2.0
===========

Released 2014-06-06, codename \"tap tap tap\"

-   Added support for opening stdin/stdout on Windows in binary mode correctly.
-   Added support for atomic writes to files by going through a temporary file.
-   Introduced `BadParameter`{.interpreted-text role="exc"} which can be used to easily perform custom validation with the same error messages as in the type system.
-   Added `progressbar`{.interpreted-text role="func"}; a function to show progress bars.
-   Added `get_app_dir`{.interpreted-text role="func"}; a function to calculate the home folder for configs.
-   Added transparent handling for ANSI codes into the `echo`{.interpreted-text role="func"} function through `colorama`.
-   Added `clear`{.interpreted-text role="func"} function.
-   Breaking change: parameter callbacks now get the parameter object passed as second argument. There is legacy support for old callbacks which will warn but still execute the script.
-   Added `style`{.interpreted-text role="func"}, `unstyle`{.interpreted-text role="func"} and `secho`{.interpreted-text role="func"} for ANSI styles.
-   Added an `edit`{.interpreted-text role="func"} function that invokes the default editor.
-   Added an `launch`{.interpreted-text role="func"} function that launches browsers and applications.
-   Nargs of -1 for arguments can now be forced to be a single item through the required flag. It defaults to not required.
-   Setting a default for arguments now implicitly makes it non required.
-   Changed \"yN\" / \"Yn\" to \"y/N\" and \"Y/n\" in confirmation prompts.
-   Added basic support for bash completion.
-   Added `getchar`{.interpreted-text role="func"} to fetch a single character from the terminal.
-   Errors now go to stderr as intended.
-   Fixed various issues with more exotic parameter formats like DOS/Windows style arguments.
-   Added `pause`{.interpreted-text role="func"} which works similar to the Windows `pause` cmd built-in but becomes an automatic noop if the application is not run through a terminal.
-   Added a bit of extra information about missing choice parameters.
-   Changed how the help function is implemented to allow global overriding of the help option.
-   Added support for token normalization to implement case insensitive handling.
-   Added support for providing defaults for context settings.

Version 1.1
===========

Released 2014-05-23

-   Fixed a bug that caused text files in Python 2 to not accept native strings.

Version 1.0
===========

Released 2014-05-21

-   Initial release.


---

CONTRIBUTING.rst

---

How to contribute to Click
==========================

Thank you for considering contributing to Click!

Support questions
-----------------

Please don\'t use the issue tracker for this. The issue tracker is a tool to address bugs and feature requests in Click itself. Use one of the following resources for questions about using Click or issues with your own code:

-   The `#get-help` channel on our Discord chat: <https://discord.gg/pallets>
-   The mailing list <flask@python.org> for long term discussion or larger issues.
-   Ask on [Stack Overflow](https://stackoverflow.com/questions/tagged/python-click?tab=Frequent). Search with Google first using: `site:stackoverflow.com python click {search term, exception message, etc.}`

Reporting issues
----------------

Include the following information in your post:

-   Describe what you expected to happen.
-   If possible, include a [minimal reproducible example](https://stackoverflow.com/help/minimal-reproducible-example) to help us identify the issue. This also helps check that the issue is not with your own code.
-   Describe what actually happened. Include the full traceback if there was an exception.
-   List your Python and Click versions. If possible, check if this issue is already fixed in the latest releases or the latest code in the repository.

Submitting patches
------------------

If there is not an open issue for what you want to submit, prefer opening one for discussion before working on a PR. You can work on any issue that doesn\'t have an open PR linked to it or a maintainer assigned to it. These show up in the sidebar. No need to ask if you can work on an issue that interests you.

Include the following in your patch:

-   Use [Black](https://black.readthedocs.io) to format your code. This and other tools will run automatically if you install [pre-commit](https://pre-commit.com) using the instructions below.
-   Include tests if your patch adds or changes code. Make sure the test fails without your patch.
-   Update any relevant docs pages and docstrings. Docs pages and docstrings should be wrapped at 72 characters.
-   Add an entry in `CHANGES.rst`. Use the same style as other entries. Also include `.. versionchanged::` inline changelogs in relevant docstrings.

### First time setup

-   Download and install the [latest version of git](https://git-scm.com/downloads).

-   Configure git with your [username](https://docs.github.com/en/github/using-git/setting-your-username-in-git) and [email](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address).

    ``` {.text}
    $ git config --global user.name 'your name'
    $ git config --global user.email 'your email'
    ```

-   Make sure you have a [GitHub account](https://github.com/join).

-   Fork Click to your GitHub account by clicking the [Fork](https://github.com/pallets/click/fork) button.

-   [Clone](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo#step-2-create-a-local-clone-of-your-fork) the main repository locally.

    ``` {.text}
    $ git clone https://github.com/pallets/click
    $ cd click
    ```

-   Add your fork as a remote to push your work to. Replace `{username}` with your username. This names the remote \"fork\", the default Pallets remote is \"origin\".

    ``` {.text}
    $ git remote add fork https://github.com/{username}/click
    ```

-   Create a virtualenv.

    ``` {.text}
    $ python3 -m venv env
    $ . env/bin/activate
    ```

    On Windows, activating is different.

    ``` {.text}
    > env\Scripts\activate
    ```

-   Install the development dependencies, then install Click in editable mode.

    ``` {.text}
    $ pip install -r requirements/dev.txt && pip install -e .
    ```

-   Install the pre-commit hooks.

    ``` {.text}
    $ pre-commit install
    ```

### Start coding

-   Create a branch to identify the issue you would like to work on. If you\'re submitting a bug or documentation fix, branch off of the latest \".x\" branch.

    ``` {.text}
    $ git fetch origin
    $ git checkout -b your-branch-name origin/8.1.x
    ```

    If you\'re submitting a feature addition or change, branch off of the \"main\" branch.

    ``` {.text}
    $ git fetch origin
    $ git checkout -b your-branch-name origin/main
    ```

-   Using your favorite editor, make your changes, [committing as you go](https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes).

-   Include tests that cover any code changes you make. Make sure the test fails without your patch. Run the tests as described below.

-   Push your commits to your fork on GitHub and [create a pull request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request). Link to the issue being addressed with `fixes #123` in the pull request.

    ``` {.text}
    $ git push --set-upstream fork your-branch-name
    ```

### Running the tests

Run the basic test suite with pytest.

``` {.text}
$ pytest
```

This runs the tests for the current environment, which is usually sufficient. CI will run the full suite when you submit your pull request. You can run the full test suite with tox if you don\'t want to wait.

``` {.text}
$ tox
```

### Running test coverage

Generating a report of lines that do not have test coverage can indicate where to start contributing. Run `pytest` using `coverage` and generate a report.

``` {.text}
$ pip install coverage
$ coverage run -m pytest
$ coverage html
```

Open `htmlcov/index.html` in your browser to explore the report.

Read more about [coverage](https://coverage.readthedocs.io).

### Building the docs

Build the docs in the `docs` directory using Sphinx.

``` {.text}
$ cd docs
$ make html
```

Open `_build/html/index.html` in your browser to view the docs.

Read more about [Sphinx](https://www.sphinx-doc.org/en/stable/).


---

LICENSE.txt

---

Copyright 2014 Pallets

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

3.  Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


---

README.md

---

# $ click_

Click is a Python package for creating beautiful command line interfaces
in a composable way with as little code as necessary. It's the "Command
Line Interface Creation Kit". It's highly configurable but comes with
sensible defaults out of the box.

It aims to make the process of writing command line tools quick and fun
while also preventing any frustration caused by the inability to
implement an intended CLI API.

Click in three points:

-   Arbitrary nesting of commands
-   Automatic help page generation
-   Supports lazy loading of subcommands at runtime


## A Simple Example

```python
import click

@click.command()
@click.option("--count", default=1, help="Number of greetings.")
@click.option("--name", prompt="Your name", help="The person to greet.")
def hello(count, name):
    """Simple program that greets NAME for a total of COUNT times."""
    for _ in range(count):
        click.echo(f"Hello, {name}!")

if __name__ == '__main__':
    hello()
```

```
$ python hello.py --count=3
Your name: Click
Hello, Click!
Hello, Click!
Hello, Click!
```


## Donate

The Pallets organization develops and supports Click and other popular
packages. In order to grow the community of contributors and users, and
allow the maintainers to devote more time to the projects, [please
donate today][].

[please donate today]: https://palletsprojects.com/donate
