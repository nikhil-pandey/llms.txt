blas_lapack.md

---

# BLAS and LAPACK

## Selecting BLAS and LAPACK libraries

BLAS and LAPACK library selection, other than the OpenBLAS default, is implemented via Meson [build options](https://mesonbuild.com/Build-options.html#build-options). For example, to select plain `libblas` and `liblapack` (this is typically Netlib BLAS/LAPACK on Linux distros, and can be dynamically switched between implementations on conda-forge), use:

    $ # for a development build
    $ python dev.py build -C-Dblas=blas -C-Dlapack=lapack
    
    $ # to build and install a wheel
    $ python -m build -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack
    $ pip install dist/scipy*.whl
    
    $ # Or, with pip>=23.1, this works too:
    $ python -m pip -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack

Other options that should work (as long as they're installed with `pkg-config` or CMake support) include `mkl`, `atlas`, `blis` and `accelerate`.

Note that both Accelerate and `scipy-openblas` have flags in `dev.py` that are easier to remember, since they're commonly used for development:

    $ python dev.py build --with-accelerate
    $ python dev.py build --with-scipy-openblas

The `-Dlapack` flag isn't needed for Accelerate, MKL or `scipy-openblas`, since we can be sure that BLAS and LAPACK are the same for those options. E.g., to create a wheel with Accelerate (on macOS \>=13.3 only), use:

    $ python -m build -Csetup-args=-Dblas=accelerate

## Using pkg-config to detect libraries in a nonstandard location

The way BLAS and LAPACK detection works under the hood is that Meson tries to discover the specified libraries first with `pkg-config`, and then with CMake. If all you have is a standalone shared library file (e.g., `armpl_lp64.so` in `/a/random/path/lib/` and a corresponding header file in `/a/random/path/include/`), then what you have to do is craft your own pkg-config file. It should have a matching name (so in this example, `armpl_lp64.pc`) and may be located anywhere. The `PKG_CONFIG_PATH` environment variable should be set to point to the location of the `.pc` file. The contents of that file should be:

    libdir=/path/to/library-dir      # e.g., /a/random/path/lib
    includedir=/path/to/include-dir  # e.g., /a/random/path/include
    version=1.2.3                    # set to actual version
    extralib=-lm -lpthread -lgfortran   # if needed, the flags to link in dependencies
    Name: armpl_lp64
    Description: ArmPL - Arm Performance Libraries
    Version: ${version}
    Libs: -L${libdir} -larmpl_lp64      # linker flags
    Libs.private: ${extralib}
    Cflags: -I${includedir}

To check that this works as expected, you should be able to run:

    $ pkg-config --libs armpl_lp64
    -L/path/to/library-dir -larmpl_lp64
    $ pkg-config --cflags armpl_lp64
    -I/path/to/include-dir

## Specifying the Fortran ABI to use

Some linear algebra libraries are built with the `g77` ABI (also known as "the `f2c` calling convention") and others with GFortran ABI, and these two ABIs are incompatible. Therefore, if you build SciPy with `gfortran` and link to a linear algebra library like MKL, which is built with a `g77` ABI, there'll be an exception or a segfault. SciPy fixes this by using ABI wrappers which rely on the CBLAS API for the few functions in the BLAS API that suffer from this issue.

Note that SciPy needs to know at build time, what needs to be done and the build system will automatically check whether linear algebra library is MKL or Accelerate (which both always use the `g77` ABI) and if so, use the CBLAS API instead of the BLAS API. If autodetection fails or if the user wants to override this autodetection mechanism for building against plain `libblas`/`liblapack` (this is what conda-forge does for example), use the `-Duse-g77-abi=true` build option. E.g.,:

    $ python -m build -C-Duse-g77-abi=true -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack 

## Work-in-progress

These options are planned to be fully supported, but currently not usable out of the box:

  - ILP64 (64-bit integer size) builds: large parts of SciPy support using ILP64 BLAS/LAPACK. Note that support is still incomplete, so SciPy *also* requires LP64 (32-bit integer size) BLAS/LAPACK.
  - Automatically selecting from multiple possible BLAS and LAPACK options, with a user-provided order of precedence

---

compilers_and_options.md

---

# Compiler selection and customizing a build

## Selecting a specific compiler

Meson supports the standard environment variables `CC`, `CXX` and `FC` to select specific C, C++ and/or Fortran compilers. These environment variables are documented in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).

Note that environment variables only get applied from a clean build, because they affect the configure stage (i.e., `meson setup`). An incremental rebuild does not react to changes in environment variables - you have to run `git clean -xdf` and do a full rebuild, or run `meson setup --reconfigure`.

## Adding a custom compiler or linker flag

Meson by design prefers builds being configured through command-line options passed to `meson setup`. It provides many built-in options:

  - For enabling a debug build and the optimization level, see the next section on "build types",
  - Enabling `-Werror` in a portable manner is done via `-Dwerror=true`,
  - Enabling warning levels is done via `-Dwarning_level=<val>`, with `<val>` one of `{0, 1, 2, 3, everything}`,
  - There are many other builtin options, from activating Visual Studio (`-Dvsenv=true`) and building with link time optimization (`-Db_lto`) to changing the default C++ language level (`-Dcpp_std='c++17'`) or linker flags (`-Dcpp_link_args='-Wl,-z,defs'`).

For a comprehensive overview of options, see [Meson's builtin options docs page](https://mesonbuild.com/Builtin-options.html).

Meson also supports the standard environment variables `CFLAGS`, `CXXFLAGS`, `FFLAGS` and `LDFLAGS` to inject extra flags - with the same caveat as in the previous section about those environment variables being picked up only for a clean build and not an incremental build.

## Using different build types with Meson

Meson provides different build types while configuring the project. You can see the available options for build types in [the "core options" section of the Meson documentation](https://mesonbuild.com/Builtin-options.html#core-options).

Assuming that you are building from scratch (do `git clean -xdf` if needed), you can configure the build as following to use the `debug` build type:

    meson setup build --buildtype debug  --prefix=$PWD/build-install

Now, you can use the `dev.py` interface for further building, installing and testing SciPy:

    python dev.py -s linalg

This will work because after initial configuration, Meson will remember the config options.

## Controlling build parallelism

By default, `ninja` will launch `2*n_cpu + 2`, with `n_cpu` the number of physical CPU cores, parallel build jobs. This is fine in the vast majority of cases, and results in close to optimal build times. In some cases, on machines with a small amount of RAM relative to the number of CPU cores, this leads to a job running out of memory. In case that happens, lower the number of jobs `N` such that you have at least 2 GB RAM per job. For example, to launch 6 jobs:

    python -m pip install . -Ccompile-args="-j6"

or:

    python dev.py build -j6

## Use GCC and Clang builds in parallel

It may be useful to have several builds of SciPy in the same repo, for example to compare the differences between two compilers for diagnosing an issue. As discussed, Meson is fully out-of-place, so different builds will not interfere with each other. We assume in the rest of this section that GCC is the default. For example, let us build using GCC and Clang.

1.  Build with GCC:
    
        python dev.py build

Using the above command, meson will build with the (default) GCC compilers in the `build` directory, and install to the `build-install` directory.

2.  Build with Clang:
    
        CC=clang CXX=clang++ FC=gfortran python dev.py --build-dir=build-clang build

Using the above commands, Meson will build with the Clang, Clang++ and Gfortran compilers in the `build-clang` directory, and then install SciPy into `build-clang-install`.

Meson will remember the compiler selection for the `build-clang` directory and it cannot be changed, so each future invocation of `python dev.py --build-dir=build-clang <command>` it will automatically use Clang.

Tip: use an alias to make this easier to use, e.g., `alias dev-clang="python dev.py --build-dir=build-clang"` and then `dev-clang build`.

A common reason to have two builds is to compare between them. For example, to run the `scipy.linalg` tests for builds with both compilers, do:

    python dev.py -s linalg                          # run tests for the GCC build
    python dev.py --build-dir build-clang -s linalg  # run tests for the Clang build

---

cross_compilation.md

---

# Cross compilation

Cross compilation is a complex topic, we only add some hopefully helpful hints here (for now). As of May 2023, cross-compilation based on `crossenv` is known to work, as used (for example) in conda-forge. Cross-compilation without `crossenv` requires some manual overrides. You instruct these overrides by passing options to `meson setup` via [meson-python](https://meson-python.readthedocs.io/en/latest/how-to-guides/meson-args.html).

All distributions that are known to successfully cross compile SciPy are using `python -m build` (`pypa/build`), but using `pip` for that should be possible as well. Here are links to the SciPy's "build recipes" on those distros:

  - [Void Linux](https://github.com/void-linux/void-packages/blob/master/srcpkgs/python3-scipy/template)
  - [Nix](https://github.com/nixos/nixpkgs/blob/master/pkgs/development/python-modules/scipy/default.nix)
  - [Conda-forge](https://github.com/conda-forge/scipy-feedstock/blob/main/recipe/build.sh)

See also [Meson's documentation on cross compilation](https://mesonbuild.com/Cross-compilation.html) to learn what options you may need to pass to Meson to successfully cross compile.

One common hiccup is that `numpy` and `pythran` require running Python code in order to obtain their include directories. This tends to not work well, either accidentally picking up the packages from the build (native) Python rather than the host (cross) Python or requiring `crossenv` or QEMU to run the host Python. To avoid this problem, specify the paths to the relevant directories in your *cross file*:

``` ini
[constants]
sitepkg = '/abspath/to/host-pythons/site-packages/'

[properties]
numpy-include-dir = sitepkg + 'numpy/core/include'
pythran-include-dir = sitepkg + 'pythran'
```

For more details and the current status around cross compilation, see:

  - Tracking issue for SciPy cross-compilation needs and issues: [scipy\#14812](https://github.com/scipy/scipy/issues/14812)
  - The state of cross compilation in Python: [pypackaging-native key issue page](https://pypackaging-native.github.io/key-issues/cross_compilation/)

---

distutils_equivalents.md

---

# Meson and `distutils` ways of doing things

*Old workflows (numpy.distutils based):*

The <span class="title-ref">runtests.py</span> file was removed in commit <span class="title-ref">0f73f92255253ec5dff2de5ca45d8d3bdda03f92</span> \[^1^\_\].

1.  `python runtests.py`
2.  `python setup.py build_ext -i` + `export PYTHONPATH=/home/username/path/to/scipy/reporoot` (and then edit pure Python code in SciPy and run it with `python some_script.py`).
3.  `python setup.py develop` - this is similar to (2), except in-place build is made permanently visible in env.
4.  `python setup.py bdist_wheel` + `pip install dist/scipy*.whl` - build wheel in current env (i.e. uses installed numpy, etc.) and install it.
5.  `pip install .` - build wheel in an isolated build env against deps in `pyproject.toml` and install it. *Note: be careful, this is usually not the correct command for development installs - typically you want to use (4) or* `pip install . -v --no-build-isolation`.

*New workflows (Meson and meson-python based):*

1.  `python dev.py`
2.  `pip install -e . --no-build-isolation` (see the `meson-python` docs)
3.  the same as (2)
4.  `python -m build --no-isolation` + `pip install dist/scipy*.whl` - see [pypa/build](https://pypa-build.readthedocs.io/en/latest/).
5.  `pip install .`

\[^1^\_\]: \[Commit 0f73f92255253ec5dff2de5ca45d8d3bdda03f92 on GitHub\](<https://github.com/scipy/scipy/commit/0f73f92255253ec5dff2de5ca45d8d3bdda03f92>).

---

index.md

---

# Building from source

\> **Note** \> If you are only trying to install SciPy, we recommend using binaries - see [Installation](https://scipy.org/install) for details on that.

Building SciPy from source requires setting up system-level dependencies (compilers, BLAS/LAPACK libraries, etc.) first, and then invoking a build. The build may be done in order to install SciPy for local usage, develop SciPy itself, or build redistributable binary packages. And it may be desired to customize aspects of how the build is done. This guide will cover all these aspects. In addition, it provides background information on how the SciPy build works, and links to up-to-date guides for generic Python build & packaging documentation that is relevant.

## System-level dependencies

SciPy uses compiled code for speed, which means you need compilers and some other system-level (i.e, non-Python / non-PyPI) dependencies to build it on your system.

\> **Note** \> If you are using Conda, you can skip the steps in this section - with the exception of installing compilers for Windows or the Apple Developer Tools for macOS. All other dependencies will be installed automatically by the `mamba env create -f environment.yml` command.

<div class="tab-set">

<div class="tab-item" data-sync="linux">

Linux

If you want to use the system Python and `pip`, you will need:

  - C, C++, and Fortran compilers (typically `gcc`, `g++`, and `gfortran`).
  - Python header files (typically a package named `python3-dev` or `python3-devel`)
  - BLAS and LAPACK libraries. [OpenBLAS](https://github.com/xianyi/OpenBLAS/) is the SciPy default; other variants include [ATLAS](http://math-atlas.sourceforge.net/) and [MKL](https://software.intel.com/en-us/intel-mkl).
  - `pkg-config` for dependency detection.

<div class="tab-set">

<div class="tab-item">

Debian/Ubuntu Linux

To install SciPy build requirements, you can do:

    sudo apt install -y gcc g++ gfortran libopenblas-dev liblapack-dev pkg-config python3-pip python3-dev

Alternatively, you can do:

    sudo apt build-dep scipy

This command installs whatever is needed to build SciPy, with the advantage that new dependencies or updates to required versions are handled by the package managers.

</div>

<div class="tab-item">

Fedora

To install SciPy build requirements, you can do:

    sudo dnf install gcc-gfortran python3-devel openblas-devel lapack-devel pkgconfig

Alternatively, you can do:

    sudo dnf builddep scipy

This command installs whatever is needed to build SciPy, with the advantage that new dependencies or updates to required versions are handled by the package managers.

</div>

<div class="tab-item">

CentOS/RHEL

To install SciPy build requirements, you can do:

    sudo yum install gcc-gfortran python3-devel openblas-devel lapack-devel pkgconfig

Alternatively, you can do:

    sudo yum-builddep scipy

This command installs whatever is needed to build SciPy, with the advantage that new dependencies or updates to required versions are handled by the package managers.

</div>

<div class="tab-item">

Arch

To install SciPy build requirements, you can do:

    sudo pacman -S gcc-fortran openblas pkgconf

</div>

</div>

</div>

<div class="tab-item" data-sync="macos">

macOS

Install Apple Developer Tools. An easy way to do this is to [open a terminal window](https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line), enter the command:

    xcode-select --install

and follow the prompts. Apple Developer Tools includes Git, the Clang C/C++ compilers, and other development utilities that may be required.

Do *not* use the macOS system Python. Instead, install Python with [the python.org installer](https://www.python.org/downloads/) or with a package manager like Homebrew, MacPorts or Fink.

The other system dependencies you need are a Fortran compiler, BLAS and LAPACK libraries, and pkg-config. They're easiest to install with [Homebrew](https://brew.sh/):

    brew install gfortran openblas pkg-config

To allow the build tools to find OpenBLAS, you must run:

    brew info openblas | grep PKG_CONFIG_PATH

This will give you a command starting with `export PKG_CONFIG_PATH=`, which you must run.

<div class="note">

<div class="title">

Note

</div>

As of SciPy 1.14.0, we have added support for the Accelerate library for BLAS and LAPACK. It requires macOS 13.3 or greater. To build with Accelerate instead of OpenBLAS, see \[blas-lapack-selection\](\#blas-lapack-selection).

</div>

</div>

<div class="tab-item" data-sync="windows">

Windows

A compatible set of C, C++ and Fortran compilers is needed to build SciPy. This is trickier on Windows than on other platforms, because MSVC does not support Fortran, and gfortran and MSVC can't be used together. You will need one of these sets of compilers:

1.  Mingw-w64 compilers (`gcc`, `g++`, `gfortran`) - *recommended, because it's easiest to install and is what we use for SciPy's own CI and binaries*
2.  MSVC + Intel Fortran (`ifort`)
3.  Intel compilers (`icc`, `ifort`)

Compared to macOS and Linux, building SciPy on Windows is a little more difficult, due to the need to set up these compilers. It is not possible to just call a one-liner on the command prompt as you would on other platforms.

First, install Microsoft Visual Studio - the 2019 Community Edition or any newer version will work (see the [Visual Studio download site](https://visualstudio.microsoft.com/downloads/)). This is needed even if you use the MinGW-w64 or Intel compilers, in order to ensure you have the Windows Universal C Runtime (the other components of Visual Studio are not needed when using Mingw-w64, and can be deselected if desired, to save disk space).

<div class="tab-set">

<div class="tab-item">

MinGW-w64

There are several sources of binaries for MinGW-w64. We recommend the RTools versions, which can be installed with Chocolatey (see Chocolatey install instructions [here](https://chocolatey.org/install)):

    choco install rtools -y --no-progress --force --version=4.0.0.20220206

In case of issues, we recommend using the exact same version as used in the [SciPy GitHub Actions CI jobs for Windows](https://github.com/scipy/scipy/blob/main/.github/workflows/windows.yml).

</div>

<div class="tab-item">

MSVC

The MSVC installer does not put the compilers on the system path, and the install location may change. To query the install location, MSVC comes with a `vswhere.exe` command-line utility. And to make the C/C++ compilers available inside the shell you are using, you need to run a `.bat` file for the correct bitness and architecture (e.g., for 64-bit Intel CPUs, use `vcvars64.bat`).

For detailed guidance, see [Use the Microsoft C++ toolset from the command line](https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170).

</div>

<div class="tab-item">

Intel

Similar to MSVC, the Intel compilers are designed to be used with an activation script (`Intel\oneAPI\setvars.bat`) that you run in the shell you are using. This makes the compilers available on the path. For detailed guidance, see [Get Started with the Intel® oneAPI HPC Toolkit for Windows](https://www.intel.com/content/www/us/en/docs/oneapi-hpc-toolkit/get-started-guide-windows/2023-1/overview.html).

</div>

</div>

<div class="note">

<div class="title">

Note

</div>

Compilers should be on the system path (i.e., the `PATH` environment variable should contain the directory in which the compiler executables can be found) in order to be found, with the exception of MSVC which will be found automatically if and only if there are no other compilers on the `PATH`. You can use any shell (e.g., Powershell, `cmd` or Git Bash) to invoke a build. To check that this is the case, try invoking a Fortran compiler in the shell you use (e.g., `gfortran --version` or `ifort --version`).

</div>

\> **Warning**

</div>

</div>

  - \>  
    When using a conda environment it is possible that the environment creation will not work due to an outdated Fortran compiler. If that happens, remove the `compilers` entry from `environment.yml` and try again. The Fortran compiler should be installed as described in this section.

## Building SciPy from source

If you want to only install SciPy from source once and not do any development work, then the recommended way to build and install is to use `pip`. Otherwise, conda is recommended.

\> **Note** \> If you don't have a conda installation yet, we recommend using [Miniforge](https://github.com/conda-forge/miniforge#miniforge); any conda flavor will work though.

### Building from source to use SciPy

<div class="tab-set">

<div class="tab-item" data-sync="conda">

Conda env

If you are using a conda environment, `pip` is still the tool you use to invoke a from-source build of SciPy. It is important to always use the `--no-build-isolation` flag to the `pip install` command, to avoid building against a `numpy` wheel from PyPI. In order for that to work you must first install the remaining build dependencies into the conda environment:

    # Either install all SciPy dev dependencies into a fresh conda environment
    mamba env create -f environment.yml
    
    # Or, install only the required build dependencies
    mamba install python numpy cython pythran pybind11 compilers openblas meson-python pkg-config
    
    # To build the latest stable release:
    pip install scipy --no-build-isolation --no-binary scipy
    
    # To build a development version, you need a local clone of the SciPy git repository:
    git clone https://github.com/scipy/scipy.git
    cd scipy
    git submodule update --init
    pip install . --no-build-isolation

</div>

<div class="tab-item" data-sync="pip">

Virtual env or system Python

    # To build the latest stable release:
    pip install scipy --no-binary scipy
    
    # To build a development version, you need a local clone of the SciPy git repository:
    git clone https://github.com/scipy/scipy.git
    cd scipy
    git submodule update --init
    pip install .

</div>

</div>

### Building from source for SciPy development

If you want to build from source in order to work on SciPy itself, first clone the SciPy repository:

    git clone https://github.com/scipy/scipy.git
    cd scipy
    git submodule update --init

Then you want to do the following:

1.  Create a dedicated development environment (virtual environment or conda environment),
2.  Install all needed dependencies (*build*, and also *test*, *doc* and *optional* dependencies),
3.  Build SciPy with our `dev.py` developer interface.

Step (3) is always the same, steps (1) and (2) are different between conda and virtual environments:

<div class="tab-set">

<div class="tab-item" data-sync="conda">

Conda env

To create a `scipy-dev` development environment with every required and optional dependency installed, run:

    mamba env create -f environment.yml
    mamba activate scipy-dev

</div>

<div class="tab-item" data-sync="pip">

Virtual env or system Python

\> **Note**

</div>

</div>

  - \>  
    There are many tools to manage virtual environments, like `venv`, `virtualenv`/`virtualenvwrapper`, `pyenv`/`pyenv-virtualenv`, Poetry, PDM, Hatch, and more. Here we use the basic `venv` tool that is part of the Python stdlib. You can use any other tool; all we need is an activated Python environment.
    
    Create and activate a virtual environment in a new directory named `venv` ( note that the exact activation command may be different based on your OS and shell - see ["How venvs work"](https://docs.python.org/3/library/venv.html#how-venvs-work) in the `venv` docs).
    
    <div class="tab-set">
    
    </div>
    
    <div class="tab-item" data-sync="linux">
    
    Linux
    
        python -m venv venv
        source venv/bin/activate
    
    </div>
    
    <div class="tab-item" data-sync="macos">
    
    macOS
    
        python -m venv venv
        source venv/bin/activate
    
    </div>
    
    <div class="tab-item" data-sync="windows">
    
    Windows
    
        python -m venv venv
        venv\Scripts\Activate.ps1
    
    </div>
    
    Then install the Python-level dependencies (see `pyproject.toml`) from PyPI with:
    
        # All dependencies
    
    python -m pip install -r requirements/all.txt
    
    \# Alternatively, you can install just the dependencies for certain \# development tasks:
    
    \# Build and dev dependencies (for <span class="title-ref">python dev.py {build, lint, mypy}</span>) python -m pip install -r requirements/build.txt -r requirements/dev.txt
    
    \# Doc dependencies (for <span class="title-ref">python dev.py {doc, refguide-check}</span>) python -m pip install -r requirements/doc.txt
    
    \# Test dependencies (for <span class="title-ref">python dev.py {test, bench, refguide-check}</span>) python -m pip install -r requirements/test.txt

To build SciPy in an activated development environment, run:

    python dev.py build

This will install SciPy inside the repository (by default in a `build-install` directory). You can then run tests (`python dev.py test`), drop into IPython (`python dev.py ipython`), or take other development steps like build the html documentation or running benchmarks. The `dev.py` interface is self-documenting, so please see `python dev.py --help` and `python dev.py <subcommand> --help` for detailed guidance.

<div class="admonition">

IDE support & editable installs

While the `dev.py` interface is our recommended way of working on SciPy, it has one limitation: because of the custom install location, SciPy installed using `dev.py` will not be recognized automatically within an IDE (e.g., for running a script via a "run" button, or setting breakpoints visually). This will work better with an *in-place build* (or "editable install").

Editable installs are supported. It is important to understand that **you may use either an editable install or dev.py in a given repository clone, but not both**. If you use editable installs, you have to use `pytest` and other development tools directly instead of using `dev.py`.

To use an editable install, ensure you start from a clean repository (run `git clean -xdf` if you've built with `dev.py` before) and have all dependencies set up correctly as described higher up on this page. Then do:

    # Note: the --no-build-isolation is important! meson-python will
    # auto-rebuild each time SciPy is imported by the Python interpreter.
    pip install -e . --no-build-isolation
    
    # To run the tests for, e.g., the `scipy.linalg` module:
    pytest scipy/linalg

When making changes to SciPy code, including to compiled code, there is no need to manually rebuild or reinstall. When you run `git clean -xdf`, which removes the built extension modules, remember to also uninstall SciPy with `pip uninstall scipy`.

See the [meson-python](https://mesonbuild.com/meson-python/) documentation on editable installs for more details on how things work under the hood.

</div>

## Customizing builds

<div class="toctree" data-maxdepth="1">

compilers\_and\_options blas\_lapack cross\_compilation redistributable\_binaries

</div>

## Background information

<div class="toctree" data-maxdepth="1">

understanding\_meson introspecting\_a\_build distutils\_equivalents

</div>

---

introspecting_a_build.md

---

# Introspecting build steps

When you have an issue with a particular Python extension module or other build target, there are a number of ways to figure out what the build system is doing exactly. Beyond looking at the `meson.build` content for the target of interest, these include:

1.  Reading the generated `build.ninja` file in the build directory,
2.  Using `meson introspect` to learn more about build options, dependencies and flags used for the target,
3.  Reading `<build-dir>/meson-info/*.json` for details on discovered dependencies, where Meson plans to install files to, etc.

These things are all available after the configure stage of the build (i.e., `meson setup`) has run. It is typically more effective to look at this information, rather than running the build and reading the full build log.

## The `ninja.build` file

As an example, let's say we are interested in `scipy.linalg._decomp_update`. From `scipy/linalg/meson.build` we learn that this extension is written in templated Cython code, and there are no special compilation flags used nor include directories beyond the `numpy` one. So the next step is to look at `build.ninja`. Open that file in an editor and search for `_decomp_update`. You will find this set of generic and target-specific rules that apply (note, comments in this code block are not present in `build.ninja` but only added in this doc section to explain what is happening):

`` `bash     # These rules are usually not needed to understand the problem, but can be looked up at the top of the file:     rule c_COMPILER      command = /home/username/anaconda3/envs/scipy-dev/bin/x86_64-conda-linux-gnu-cc $ARGS -MD -MQ $out -MF $DEPFILE -o $out -c $in      deps = gcc      depfile = $DEPFILE_UNQUOTED      description = Compiling C object $out      rule c_LINKER      command = /home/username/anaconda3/envs/scipy-dev/bin/x86_64-conda-linux-gnu-cc $ARGS -o $out $in $LINK_ARGS      description = Linking target $out      # step 1: `.pyx.in` to `.pyx` code generation with Tempita     build scipy/linalg/_decomp_update.pyx: CUSTOM_COMMAND ../scipy/linalg/_decomp_update.pyx.in | ../scipy/_build_utils/tempita.py /home/username/anaconda3/envs/scipy-dev/bin/python3.10      COMMAND = /home/username/anaconda3/envs/scipy-dev/bin/python3.10 ../scipy/_build_utils/tempita.py ../scipy/linalg/_decomp_update.pyx.in -o scipy/linalg      description = Generating$ scipy/linalg/_decomp_update$ with$ a$ custom$ command      # step 2: `.pyx` to `.c` compilation with Cython     build scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c: CUSTOM_COMMAND scipy/linalg/_decomp_update.pyx | /home/username/code/scipy/scipy/_build_utils/cythoner.py scipy/__init__.py scipy/linalg/__init__.py scipy/linalg/cython_blas.pyx      DESC = Generating$ 'scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c'.      COMMAND = /home/username/anaconda3/envs/scipy-dev/bin/python3.10 /home/username/code/scipy/scipy/_build_utils/cythoner.py scipy/linalg/_decomp_update.pyx scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c      # step 3: use C compiler to go from `.c` to object file (`.o`)     build scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o: c_COMPILER scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c      DEPFILE = scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o.d      DEPFILE_UNQUOTED = scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o.d      ARGS = -Iscipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p -Iscipy/linalg -I../scipy/linalg -I/home/username/anaconda3/envs/scipy-dev/lib/python3.10/site-packages/numpy/core/include -I/home/username/anaconda3/envs/scipy-dev/include/python3.10 -fvisibility=hidden -fdiagnostics-color=always -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -std=c99 -O2 -g -Wno-unused-but-set-variable -Wno-unused-function -Wno-conversion -Wno-misleading-indentation -fPIC -Wno-cpp      # step 4: generate a symbol file (uses `meson --internal symbolextractor`); you can safely ignore this step     build scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.cpython-310-x86_64-linux-gnu.so.symbols: SHSYM scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so      IMPLIB = scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so      # step 5: link the `.o` file to obtain the file extension module (`.so`)     build scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so: c_LINKER scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o | /home/username/anaconda3/envs/scipy-dev/x86_64-conda-linux-gnu/sysroot/lib64/libm-2.12.so /home/username/anaconda3/envs/scipy-dev/x86_64-conda-linux-gnu/sysroot/usr/lib64/libm.a      LINK_ARGS = -L/home/username/anaconda3/envs/scipy-dev/lib -Wl,--as-needed -Wl,--allow-shlib-undefined -shared -fPIC -Wl,--start-group -lm -Wl,--end-group -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,--gc-sections -Wl,--allow-shlib-undefined -Wl,-rpath,/home/username/anaconda3/envs/scipy-dev/lib -Wl,-rpath-link,/home/username/anaconda3/envs/scipy-dev/lib  Using ``meson introspect`  `\` --------------------------

If we want to look at `_decomp_update` from another perspective, we can use (for example) `meson introspect --targets -i <build-dir> > targets.json` to generate readable JSON. Searching that generated file for our target of interest shows:

`` `json     {         "name": "_decomp_update",         "id": "b4ac6f0@@_decomp_update@cus",         "type": "custom",         "defined_in": "/home/username/code/scipy/scipy/linalg/meson.build",         "filename": [             "/home/username/code/scipy/build/scipy/linalg/_decomp_update.pyx"         ],         "build_by_default": false,         "target_sources": [             {                 "language": "unknown",                 "compiler": [                     "/home/username/anaconda3/envs/scipy-dev/bin/python3.10",                     "/home/username/code/scipy/scipy/_build_utils/tempita.py",                     "@INPUT@",                     "-o",                     "@OUTDIR@"                 ],                 "parameters": [],                 "sources": [                     "/home/username/code/scipy/scipy/linalg/_decomp_update.pyx.in"                 ],                 "generated_sources": []             }         ],         "extra_files": [],         "subproject": null,         "installed": false     },     {         "name": "_decomp_update.cpython-310-x86_64-linux-gnu",         "id": "b4ac6f0@@_decomp_update.cpython-310-x86_64-linux-gnu@sha",         "type": "shared module",         "defined_in": "/home/username/code/scipy/scipy/linalg/meson.build",         "filename": [             "/home/username/code/scipy/build/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so"         ],         "build_by_default": true,         "target_sources": [             {                 "language": "c",                 "compiler": [                     "/home/username/anaconda3/envs/scipy-dev/bin/x86_64-conda-linux-gnu-cc"                 ],                 "parameters": [                     "-I/home/username/code/scipy/build/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p",                     "-I/home/username/code/scipy/build/scipy/linalg",                     "-I/home/username/code/scipy/scipy/linalg",                     "-I/home/username/anaconda3/envs/scipy-dev/lib/python3.10/site-packages/numpy/core/include",                     "-I/home/username/anaconda3/envs/scipy-dev/include/python3.10",                     "-fvisibility=hidden",                     "-fdiagnostics-color=always",                     "-D_FILE_OFFSET_BITS=64",                     "-Wall",                     "-Winvalid-pch",                     "-std=c99",                     "-O2",                     "-g",                     "-Wno-unused-but-set-variable",                     "-Wno-unused-function",                     "-Wno-conversion",                     "-Wno-misleading-indentation",                     "-fPIC",                     "-Wno-cpp"                 ],                 "sources": [],                 "generated_sources": [                     "/home/username/code/scipy/build/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c"                 ]             }         ],         "extra_files": [],         "subproject": null,         "installed": true,         "install_filename": [             "/home/username/code/scipy/build-install/lib/python3.10/site-packages/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so"         ]     },  This tells us a lot of things, like which include directories will be used, ``<span class="title-ref"> where the Cython-generated C code can be found, and what compile flags are used. </span><span class="title-ref">meson introspect --help</span>\` has good documentation on the full range of capabilities and how to use them.

## `meson-info` JSON files

There are a number of different JSON files in `<build-dir>/meson-info/`. These have descriptive names, hinting at their content. For example, where the final `_decomp_update` extension gets installed to is described in `intro-install_plan.json` (note, these files aren't pretty-printed, running them through a JSON formatter helps):

`` `json       "/home/username/code/scipy/build/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so":{          "destination":"{py_platlib}/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so",          "tag":"runtime"       },  We may also be interested in knowing what dependencies were detected by the ``<span class="title-ref"> configure stage of the build. So we look in </span><span class="title-ref">intro-dependencies.json</span>\`:

`` `json     [        {           "name":"python",           "version":"3.10",           "compile_args":[              "-I/home/username/anaconda3/envs/scipy-dev/include/python3.10"           ],           "link_args":[            ]        },        {           "name":"openblas",           "version":"0.3.20",           "compile_args":[              "-I/home/username/anaconda3/envs/scipy-dev/include"           ],           "link_args":[              "/home/username/anaconda3/envs/scipy-dev/lib/libopenblas.so"           ]        },        {           "name":"threads",           "version":"unknown",           "compile_args":[              "-pthread"           ],           "link_args":[              "-pthread"           ]        }     ]  This tells us that we have three dependencies that were found. Note: ``numpy`  `<span class="title-ref"> and a few other build-time dependencies are missing here because we do not (yet) search for those with the builtin </span><span class="title-ref">dependency()</span>\` Meson command.

---

redistributable_binaries.md

---

# Building redistributable binaries

*The intended audience for this section is anyone who wants to build SciPy and deploy it anywhere else than their own machine - from distro packagers to users who want to build wheels to deploy to their production environment*

When `python -m build` or `pip wheel` is used to build a SciPy wheel, that wheel will rely on external shared libraries (at least for BLAS/LAPACK and a Fortran compiler runtime library, perhaps other libraries). Such wheels therefore will only run on the system on which they are built. See [the pypackaging-native content under "Building and installing or uploading artifacts"](https://pypackaging-native.github.io/meta-topics/build_steps_conceptual/#building-and-installing-or-uploading-artifacts) for more context on that.

A wheel like that is therefore an intermediate stage to producing a binary that can be distributed. That final binary may be a wheel - in that case, run `auditwheel` (Linux), `delocate` (macOS), `delvewheel` (Windows) or `repairwheel` (platform-independent) to vendor the required shared libraries into the wheel.

The final binary may also be in another packaging format (e.g., a `.rpm`, `.deb` or `.conda` package). In that case, there are packaging ecosystem-specific tools to first install the wheel into a staging area, then making the extension modules in that install location relocatable (e.g., by rewriting RPATHs), and then repackaging it into the final package format.

## Build and runtime dependencies

The Python build and runtime dependencies that are needed to build SciPy can be found in the `pyproject.toml` metadata. Note that for released versions of SciPy, dependencies will likely have upper bounds. Each upper bound has comments above it; packagers are free to remove or loosen those upper bound in most cases (except for `numpy`). E.g.:

    # The upper bound on pybind11 is preemptive only
    "pybind11>=2.12.0,<2.13.0",
    
    #   ...
    #   3. The <2.3 upper bound is for matching the numpy deprecation policy,
    #      it should not be loosened.
    "numpy>=2.0.0rc1,<2.3",

Non-Python build requirements are:

  - C, C++ and Fortran compilers
  - BLAS and LAPACK libraries
  - `ninja`
  - `pkg-config`

Minimum versions of common compilers are enforced in the top-level `meson.build` file. The minimum LAPACK version is currently 3.7.1. More detailed information on these build dependencies can be found in \[toolchain-roadmap\](\#toolchain-roadmap).

## Stripping the test suite from a wheel or installed package

By default, an installed version of `scipy` includes the full test suite. That test suite, including data files and compiled extension modules that are test-only, takes up about 4.5 MB in a wheel (for x86-64, as of v1.14.0), and more than that on disk. In cases where binary size matters, packagers may want to remove the test suite. As of SciPy 1.14.0, there is a convenient way of doing this, making use of [Meson's install tags](https://mesonbuild.com/Installing.html#installation-tags) functionality. It is a one-liner:

    $ python -m build -wnx -Cinstall-args=--tags=runtime,python-runtime,devel

\> **Note** \> Note that in the above command `-wnx` means `--wheel --no-isolation    --skip-dependency-check`. It assumes that the packager has already set up the build environment, which is usually the case for distro packaging. The install tags feature works equally well with isolated builds (e.g. `pip    install scipy --no-binary -Cinstall-args=--tags=runtime,python-runtime,devel`).

If you want to produce a separate package for the tests themselves, say under the name `scipy-tests`, then edit `pyproject.toml` to change the project name:

``` toml
[project]
name = "scipy-tests"
```

And then build with:

    $ python -m build -wnx -Cinstall-args=--tags=tests

The above would build the whole package twice; in order to rebuild in a cached fashion, use the `-Cbuild-dir=build` build option:

    $     $ # apply patch to change the project name in pyproject.toml
    $ python -m build -wnx -Cbuild-dir=build -Cinstall-args=--tags=tests

The end result will look something like:

    $ ls -lh dist/*.whl
    ...  20M  ...  dist/scipy-1.14.0-cp311-cp311-linux_x86_64.whl
    ...  4,5M ...  dist/scipy_tests-1.14.0-cp311-cp311-linux_x86_64.whl

---

understanding_meson.md

---

# Understanding Meson

Building SciPy relies on the following tools, which can be considered part of the build system:

  - `meson`: the Meson build system, installable as a pure Python package from PyPI or conda-forge
  - `ninja`: the build tool invoked by Meson to do the actual building (e.g. invoking compilers). Installable also from PyPI (on all common platforms) or conda-forge.
  - `pkg-config`: the tool used for discovering dependencies (in particular BLAS/LAPACK). Available on conda-forge (and Homebrew, Chocolatey, and Linux package managers), but not packaged on PyPI.
  - `meson-python`: the Python build backend (i.e., the thing that gets invoked via a hook in `pyproject.toml` by a build frontend like `pip` or `pypa/build`). This is a thin layer on top of Meson, with as main roles (a) interface with build frontends, and (b) produce sdists and wheels with valid file names and metadata.

Building with Meson happens in stages:

  - A configure stage (`meson setup`) to detect compilers, dependencies and build options, and create the build directory and `build.ninja` file,
  - A compile stage (`meson compile` or `ninja`), where the extension modules that are part of a built SciPy package get compiled,
  - An install stage (`meson install`) to install the installable files from the source and build directories to the target install directory,

Meson has a good build dependency tracking system, so invoking a build for a second time will rebuild only targets for which any sources or dependencies have changed.

## To learn more about Meson

Meson has [very good documentation](https://mesonbuild.com/); it pays off to read it, and is often the best source of answers for "how to do X". Furthermore, an extensive pdf book on Meson can be obtained for free at <https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html>

To learn more about the design principles Meson uses, the recent talks linked from [mesonbuild.com/Videos](https://mesonbuild.com/Videos.html) are also a good resource.

## Explanation of build stages

*This is for teaching purposes only; there should be no need to execute these stages separately. The dev.py scripts in the root of the repo also contains these steps and may be studied for insights.*

Assume we're starting from a clean repo and a fully set up conda environment:

    git clone git@github.com:scipy/scipy.git
    git submodule update --init
    mamba env create -f environment.yml
    mamba activate scipy-dev

To now run the configure stage of the build and instruct Meson to put the build artifacts in `build/` and a local install under `build-install/` relative to the root of the repo, do:

    meson setup build --prefix=$PWD/build-install

To then run the compile stage of the build, do:

    ninja -C build

In the command above, `-C` is followed by the name of the build directory. You can have multiple build directories at the same time. Meson is fully out-of-place, so those builds will not interfere with each other. You can for example have a GCC build, a Clang build and a debug build in different directories.

To then install SciPy into the prefix (`build-install/` here, but note that that's just an arbitrary name we picked here):

    meson install -C build

It will then install to `build-install/lib/python3.11/site-packages/scipy`, which is not on your Python path, so to add it do (*again, this is for learning purposes, using \`\`PYTHONPATH\`\` explicitly is typically not the best idea*):

    export PYTHONPATH=$PWD/build-install/lib/python3.11/site-packages/

Now we should be able to import `scipy` and run the tests. Remembering that we need to move out of the root of the repo to ensure we pick up the package and not the local `scipy/` source directory:

    cd doc
    python -c "from scipy import constants as s; s.test()"

The above runs the tests for a single module, `constants`. Other ways of running the tests should also work, for example:

    pytest --pyargs scipy

The full test suite should pass, without any build warnings on Linux (with the GCC version for which `-Werror` is enforced in CI at least) and with at most a moderate amount of warnings on other platforms.

---

api-dev-toc.md

---

# SciPy API Development Guide

<div class="toctree" data-maxdepth="1">

nan\_policy special\_ufuncs array\_api

</div>

---

array_api.md

---

# Support for the array API standard

<div class="note">

<div class="title">

Note

</div>

Array API standard support is still experimental and hidden behind an environment variable. Only a small part of the public API is covered right now.

</div>

This guide describes how to **use** and **add support for** the [Python array API standard](https://data-apis.org/array-api/latest/index.html). This standard allows users to use any array API compatible array library with parts of SciPy out of the box.

The [RFC](https://github.com/scipy/scipy/issues/18286) defines how SciPy implements support for the standard, with the main principle being *"array type in equals array type out"*. In addition, the implementation does more strict validation of allowed array-like inputs, e.g. rejecting numpy matrix and masked array instances, and arrays with object dtype.

In the following, an array API compatible namespace is noted as `xp`.

## Using array API standard support

To enable the array API standard support, an environment variable must be set before importing SciPy:

``` bash
export SCIPY_ARRAY_API=1
```

This both enables array API standard support and the more strict input validation for array-like arguments. *Note that this environment variable is meant to be temporary, as a way to make incremental changes and merge them into \`\`main\`\` without affecting backwards compatibility immediately. We do not intend to keep this environment variable around long-term.*

This clustering example shows usage with PyTorch tensors as inputs and return values:

``` python
>>> import torch
>>> from scipy.cluster.vq import vq
>>> code_book = torch.tensor([[1., 1., 1.],
...                           [2., 2., 2.]])
>>> features  = torch.tensor([[1.9, 2.3, 1.7],
...                           [1.5, 2.5, 2.2],
...                           [0.8, 0.6, 1.7]])
>>> code, dist = vq(features, code_book)
>>> code
tensor([1, 1, 0], dtype=torch.int32)
>>> dist
tensor([0.4359, 0.7348, 0.8307])
```

Note that the above example works for PyTorch CPU tensors. For GPU tensors or CuPy arrays, the expected result for `vq` is a `TypeError`, because `vq` uses compiled code in its implementation, which won't work on GPU.

More strict array input validation will reject `np.matrix` and `np.ma.MaskedArray` instances, as well as arrays with `object` dtype:

``` python
>>> import numpy as np
>>> from scipy.cluster.vq import vq
>>> code_book = np.array([[1., 1., 1.],
...                       [2., 2., 2.]])
>>> features  = np.array([[1.9, 2.3, 1.7],
...                       [1.5, 2.5, 2.2],
...                       [0.8, 0.6, 1.7]])
>>> vq(features, code_book)
(array([1, 1, 0], dtype=int32), array([0.43588989, 0.73484692, 0.83066239]))

>>> # The above uses numpy arrays; trying to use np.matrix instances or object
>>> # arrays instead will yield an exception with `SCIPY_ARRAY_API=1`:
>>> vq(np.asmatrix(features), code_book)
...
TypeError: 'numpy.matrix' are not supported

>>> vq(np.ma.asarray(features), code_book)
...
TypeError: 'numpy.ma.MaskedArray' are not supported

>>> vq(features.astype(np.object_), code_book)
...
TypeError: object arrays are not supported
```

### Currently supported functionality

The following modules provide array API standard support when the environment variable is set:

  - <span class="title-ref">scipy.cluster</span>
  - <span class="title-ref">scipy.constants</span>
  - <span class="title-ref">scipy.datasets</span>
  - <span class="title-ref">scipy.fft</span>
  - <span class="title-ref">scipy.io</span>
  - <span class="title-ref">scipy.ndimage</span>

Support is provided in <span class="title-ref">scipy.special</span> for the following functions: <span class="title-ref">scipy.special.log\_ndtr</span>, <span class="title-ref">scipy.special.ndtr</span>, <span class="title-ref">scipy.special.ndtri</span>, <span class="title-ref">scipy.special.erf</span>, <span class="title-ref">scipy.special.erfc</span>, <span class="title-ref">scipy.special.i0</span>, <span class="title-ref">scipy.special.i0e</span>, <span class="title-ref">scipy.special.i1</span>, <span class="title-ref">scipy.special.i1e</span>, <span class="title-ref">scipy.special.gammaln</span>, <span class="title-ref">scipy.special.gammainc</span>, <span class="title-ref">scipy.special.gammaincc</span>, <span class="title-ref">scipy.special.logit</span>, <span class="title-ref">scipy.special.expit</span>, <span class="title-ref">scipy.special.entr</span>, <span class="title-ref">scipy.special.rel\_entr</span>, <span class="title-ref">scipy.special.rel\_entr</span>, <span class="title-ref">scipy.special.xlogy</span>, and <span class="title-ref">scipy.special.chdtrc</span>.

Support is provided in <span class="title-ref">scipy.stats</span> for the following functions: <span class="title-ref">scipy.stats.describe</span>, <span class="title-ref">scipy.stats.moment</span>, <span class="title-ref">scipy.stats.skew</span>, <span class="title-ref">scipy.stats.kurtosis</span>, <span class="title-ref">scipy.stats.kstat</span>, <span class="title-ref">scipy.stats.kstatvar</span>, <span class="title-ref">scipy.stats.circmean</span>, <span class="title-ref">scipy.stats.circvar</span>, <span class="title-ref">scipy.stats.circstd</span>, <span class="title-ref">scipy.stats.entropy</span>, <span class="title-ref">scipy.stats.variation</span> , <span class="title-ref">scipy.stats.sem</span>, <span class="title-ref">scipy.stats.ttest\_1samp</span>, <span class="title-ref">scipy.stats.pearsonr</span>, <span class="title-ref">scipy.stats.chisquare</span>, <span class="title-ref">scipy.stats.skewtest</span>, <span class="title-ref">scipy.stats.kurtosistest</span>, <span class="title-ref">scipy.stats.normaltest</span>, <span class="title-ref">scipy.stats.jarque\_bera</span>, <span class="title-ref">scipy.stats.bartlett</span>, <span class="title-ref">scipy.stats.power\_divergence</span>, and <span class="title-ref">scipy.stats.monte\_carlo\_test</span>.

Please see [the tracker issue](https://github.com/scipy/scipy/issues/18867) for updates.

## Implementation notes

A key part of the support for the array API standard and specific compatibility functions for Numpy, CuPy and PyTorch is provided through [array-api-compat](https://github.com/data-apis/array-api-compat). This package is included in the SciPy codebase via a git submodule (under `scipy/_lib`), so no new dependencies are introduced.

`array-api-compat` provides generic utility functions and adds aliases such as `xp.concat` (which, for numpy, mapped to `np.concatenate` before NumPy added `np.concat` in NumPy 2.0). This allows using a uniform API across NumPy, PyTorch, CuPy and JAX (with other libraries, such as Dask, being worked on).

When the environment variable isn't set and hence array API standard support in SciPy is disabled, we still use the wrapped version of the NumPy namespace, which is `array_api_compat.numpy`. That should not change behavior of SciPy functions, as it's effectively the existing `numpy` namespace with a number of aliases added and a handful of functions amended/added for array API standard support. When support is enabled, `xp = array_namespace(input)` will be the standard-compatible namespace matching the input array type to a function (e.g., if the input to <span class="title-ref">cluster.vq.kmeans</span> is a PyTorch tensor, then `xp` is `array_api_compat.torch`).

## Adding array API standard support to a SciPy function

As much as possible, new code added to SciPy should try to follow as closely as possible the array API standard (these functions typically are best-practice idioms for NumPy usage as well). By following the standard, effectively adding support for the array API standard is typically straightforward, and we ideally don't need to maintain any customization.

Various helper functions are available in `scipy._lib._array_api` - please see the `__all__` in that module for a list of current helpers, and their docstrings for more information.

To add support to a SciPy function which is defined in a `.py` file, what you have to change is:

1.  Input array validation,
2.  Using `xp` rather `np` functions,
3.  When calling into compiled code, convert the array to a NumPy array before and convert it back to the input array type after.

Input array validation uses the following pattern:

    xp = array_namespace(arr) # where arr is the input array
    # alternatively, if there are multiple array inputs, include them all:
    xp = array_namespace(arr1, arr2)
    
    # replace np.asarray with xp.asarray
    arr = xp.asarray(arr)
    # uses of non-standard parameters of np.asarray can be replaced with _asarray
    arr = _asarray(arr, order='C', dtype=xp.float64, xp=xp)

Note that if one input is a non-NumPy array type, all array-like inputs have to be of that type; trying to mix non-NumPy arrays with lists, Python scalars or other arbitrary Python objects will raise an exception. For NumPy arrays, those types will continue to be accepted for backwards compatibility reasons.

If a function calls into a compiled code just once, use the following pattern:

    x = np.asarray(x)  # convert to numpy right before compiled call(s)
    y = _call_compiled_code(x)
    y = xp.asarray(y)  # convert back to original array type

If there are multiple calls to compiled code, ensure doing the conversion just once to avoid too much overhead.

Here is an example for a hypothetical public SciPy function `toto`:

    def toto(a, b):
        a = np.asarray(a)
        b = np.asarray(b, copy=True)
    
        c = np.sum(a) - np.prod(b)
    
        # this is some C or Cython call
        d = cdist(c)
    
        return d

You would convert this like so:

    def toto(a, b):
        xp = array_namespace(a, b)
        a = xp.asarray(a)
        b = xp_copy(b, xp=xp)  # our custom helper is needed for copy
    
        c = xp.sum(a) - xp.prod(b)
    
        # this is some C or Cython call
        c = np.asarray(c)
        d = cdist(c)
        d = xp.asarray(d)
    
        return d

Going through compiled code requires going back to a NumPy array, because SciPy's extension modules only work with NumPy arrays (or memoryviews in the case of Cython). For arrays on CPU, the conversions should be zero-copy, while on GPU and other devices the attempt at conversion will raise an exception. The reason for that is that silent data transfer between devices is considered bad practice, as it is likely to be a large and hard-to-detect performance bottleneck.

## Adding tests

The following pytest markers are available:

  - `array_api_compatible -> xp`: use a parametrisation to run a test on multiple array backends.
  - `skip_xp_backends(backend=None, reason=None, np_only=False, cpu_only=False, exceptions=None)`: skip certain backends or categories of backends. `@pytest.mark.usefixtures("skip_xp_backends")` must be used alongside this marker for the skips to apply. See the fixture's docstring in `scipy.conftest` for information on how use this marker to skip tests.
  - `xfail_xp_backends(backend=None, reason=None, np_only=False, cpu_only=False, exceptions=None)`: xfail certain backends or categories of backends. `@pytest.mark.usefixtures("xfail_xp_backends")` must be used alongside this marker for the xfails to apply. See the fixture's docstring in `scipy.conftest` for information on how use this marker to xfail tests.
  - `skip_xp_invalid_arg` is used to skip tests that use arguments which are invalid when `SCIPY_ARRAY_API` is enabled. For instance, some tests of <span class="title-ref">scipy.stats</span> functions pass masked arrays to the function being tested, but masked arrays are incompatible with the array API. Use of the `skip_xp_invalid_arg` decorator allows these tests to protect against regressions when `SCIPY_ARRAY_API` is not used without resulting in failures when `SCIPY_ARRAY_API` is used. In time, we will want these functions to emit deprecation warnings when they receive array API invalid input, and this decorator will check that the deprecation warning is emitted without it causing the test to fail. When `SCIPY_ARRAY_API=1` behavior becomes the default and only behavior, these tests (and the decorator itself) will be removed.

`scipy._lib._array_api` contains array-agnostic assertions such as `xp_assert_close` which can be used to replace assertions from <span class="title-ref">numpy.testing</span>.

The following examples demonstrate how to use the markers:

    from scipy.conftest import array_api_compatible, skip_xp_invalid_arg
    from scipy._lib._array_api import xp_assert_close
    ...
    @pytest.mark.skip_xp_backends(np_only=True, reason='skip reason')
    @pytest.mark.usefixtures("skip_xp_backends")
    @array_api_compatible
    def test_toto1(self, xp):
        a = xp.asarray([1, 2, 3])
        b = xp.asarray([0, 2, 5])
        xp_assert_close(toto(a, b), a)
    ...
    @pytest.mark.skip_xp_backends('array_api_strict',
                                  reason='skip reason 1')
    @pytest.mark.skip_xp_backends('cupy',
                                  reason='skip reason 2')
    @pytest.mark.usefixtures("skip_xp_backends")
    @array_api_compatible
    def test_toto2(self, xp):
        ...
    ...
    # Do not run when SCIPY_ARRAY_API is used
    @skip_xp_invalid_arg
    def test_toto_masked_array(self):
        ...

Passing a custom reason to `reason` when `cpu_only=True` is unsupported since `cpu_only=True` can be used alongside passing `backends`. Also, the reason for using `cpu_only` is likely just that compiled code is used in the function(s) being tested.

Passing names of backends into `exceptions` means that they will not be skipped by `cpu_only=True`. This is useful when delegation is implemented for some, but not all, non-CPU backends, and the CPU code path requires conversion to NumPy for compiled code:

    # array-api-strict and CuPy will always be skipped, for the given reasons.
    # All libraries using a non-CPU device will also be skipped, apart from
    # JAX, for which delegation is implemented (hence non-CPU execution is supported).
    @pytest.mark.skip_xp_backends(cpu_only, exceptions=['jax.numpy'])
    @pytest.mark.skip_xp_backends('array_api_strict', reason='skip reason 1')
    @pytest.mark.skip_xp_backends('cupy', reason='skip reason 2')
    @pytest.mark.usefixtures("skip_xp_backends")
    @array_api_compatible
    def test_toto(self, xp):
        ...

When every test function in a file has been updated for array API compatibility, one can reduce verbosity by telling `pytest` to apply the markers to every test function using `pytestmark`:

    from scipy.conftest import array_api_compatible
    
    pytestmark = [array_api_compatible, pytest.mark.usefixtures("skip_xp_backends")]
    skip_xp_backends = pytest.mark.skip_xp_backends
    ...
    @skip_xp_backends(np_only=True, reason='skip reason')
    def test_toto1(self, xp):
        ...

After applying these markers, `dev.py test` can be used with the new option `-b` or `--array-api-backend`:

    python dev.py test -b numpy -b torch -s cluster

This automatically sets `SCIPY_ARRAY_API` appropriately. To test a library that has multiple devices with a non-default device, a second environment variable (`SCIPY_DEVICE`, only used in the test suite) can be set. Valid values depend on the array library under test, e.g. for PyTorch, valid values are `"cpu", "cuda", "mps"`. To run the test suite with the PyTorch MPS backend, use: `SCIPY_DEVICE=mps python dev.py test -b torch`.

Note that there is a GitHub Actions workflow which tests with array-api-strict, PyTorch, and JAX on CPU.

## Additional information

Here are some additional resources which motivated some design decisions and helped during the development phase:

  - Initial [PR](https://github.com/tupui/scipy/pull/24) with some discussions
  - Quick started from this [PR](https://github.com/scipy/scipy/pull/15395) and some inspiration taken from [scikit-learn](https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/utils/_array_api.py).
  - [PR](https://github.com/scikit-learn/scikit-learn/issues/22352) adding Array API support to scikit-learn
  - Some other relevant scikit-learn PRs: [\#22554](https://github.com/scikit-learn/scikit-learn/pull/22554) and [\#25956](https://github.com/scikit-learn/scikit-learn/pull/25956)

---

nan_policy.md

---

# A Design Specification for `nan_policy`

Many functions in <span class="title-ref">scipy.stats</span> have a parameter called `nan_policy` that determines how the function handles data that contains `nan`. In this section, we provide SciPy developer guidelines for how `nan_policy` is intended to be used, to ensure that as this parameter is added to new functions, we maintain a consistent API.

## The basic API

The parameter `nan_policy` accepts three possible strings: `'omit'`, `'raise'` and `'propagate'`. The meanings are:

  - `nan_policy='omit'`: Ignore occurrences of `nan` in the input. Do not generate a warning if the input contains `nan` (unless the equivalent input with the `nan` values removed would generate a warning). For example, for the simple case of a function that accepts a single array and returns a scalar (and ignoring the possible use of `axis` for the moment):
    
        func([1.0, 3.0, np.nan, 5.0], nan_policy='omit')
    
    should behave the same as:
    
        func([1.0, 3.0, 5.0])
    
    More generally, for functions that return a scalar, `func(a, nan_policy='omit')` should behave the same as `func(a[~np.isnan(a)])`.
    
    For functions that transform a vector to a new vector of the same size and for which each entry in the output array depends on more than just the corresponding value in the input array\[1\] (e.g. <span class="title-ref">scipy.stats.zscore</span>, <span class="title-ref">scipy.stats.boxcox</span> *when* `lmbda` *is None*),:
    
        y = func(a, nan_policy='omit')
    
    should behave the same as:
    
        nan_mask = np.isnan(a)
        y = np.empty(a.shape, dtype=np.float64)
        y[~nan_mask] = func(a[~nan_mask])
        y[nan_mask] = np.nan
    
    (In general, the dtype of `y` might depend on `a` and on the expected behavior of `func`). In other words, a <span class="title-ref">nan</span> in the input gives a corresponding <span class="title-ref">nan</span> in the output, but the presence of that <span class="title-ref">nan</span> does not affect the calculation of the non-<span class="title-ref">nan</span> values.
    
    Unit tests for this property should be used to test functions that handle `nan_policy`.
    
    For functions that return a scalar and that accept two or more arguments but whose values are not related (e.g. <span class="title-ref">scipy.stats.ansari</span>, <span class="title-ref">scipy.stats.f\_oneway</span>), the same idea applies to each input array. So:
    
        func(a, b, nan_policy='omit')
    
    should behave the same as:
    
        func(a[~np.isnan(a)], b[~np.isnan(b)])
    
    For inputs with *related* or *paired* values (e.g. <span class="title-ref">scipy.stats.pearsonr</span>, <span class="title-ref">scipy.stats.ttest\_rel</span>) the recommended behavior is to omit all the values for which any of the related values are `nan`. For a function with two related array inputs, this means:
    
        y = func(a, b, nan_policy='omit')
    
    should behave the same as:
    
        hasnan = np.isnan(a) | np.isnan(b)  # Union of the isnan masks.
        y = func(a[~hasnan], b[~hasnan])
    
    The docstring for such a function should clearly state this behavior.

  - `nan_policy='raise'`: Raise a `ValueError`.

  - `nan_policy='propagate'`: Propagate the `nan` value to the output. Typically, this means just execute the function without checking for `nan`, but see
    
    > <https://github.com/scipy/scipy/issues/7818>
    
    for an example where that might lead to unexpected output.

## `nan_policy` combined with an `axis` parameter

There is nothing surprising here--the principle mentioned above still applies when the function has an `axis` parameter. Suppose, for example, `func` reduces a 1-d array to a scalar, and handles n-d arrays as a collection of 1-d arrays, with the `axis` parameter specifying the axis along which the reduction is to be applied. If, say:

    func([1, 3, 4])     -> 10.0
    func([2, -3, 8, 2]) ->  4.2
    func([7, 8])        ->  9.5
    func([])            -> -inf

then:

    func([[  1, nan,   3,   4],
          [  2,  -3,   8,   2],
          [nan,   7, nan,   8],
          [nan, nan, nan, nan]], nan_policy='omit', axis=-1)

must give the result:

    np.array([10.0, 4.2, 9.5, -inf])

## Edge cases

A function that implements the `nan_policy` parameter should gracefully handle the case where *all* the values in the input array(s) are `nan`. The basic principle described above still applies:

    func([nan, nan, nan], nan_policy='omit')

should behave the same as:

    func([])

In practice, when adding `nan_policy` to an existing function, it is not unusual to find that the function doesn't already handle this case in a well-defined manner, and some thought and design may have to be applied to ensure that it works. The correct behavior (whether that be to return `nan`, return some other value, raise an exception, or something else) will be determined on a case-by-case basis.

## Why doesn't `nan_policy` also apply to `inf`?

Although we learn in grade school that "infinity is not a number", the floating point values `nan` and `inf` are qualitatively different. The values `inf` and `-inf` act much more like regular floating point values than `nan`.

  - One can compare `inf` to other floating point values and it behaves as expected, e.g. `3 < inf` is True.
  - For the most part, arithmetic works "as expected" with `inf`, e.g. `inf + inf = inf`, `-2*inf = -inf`, `1/inf = 0`, etc.
  - Many existing functions work "as expected" with `inf`: `np.log(inf) = inf`, `np.exp(-inf) = 0`, `np.array([1.0, -1.0, np.inf]).min() = -1.0`, etc.

So while `nan` almost always means "something went wrong" or "something is missing", `inf` can in many cases be treated as a useful floating point value.

It is also consistent with the NumPy `nan` functions to not ignore `inf`:

    >>> np.nanmax([1, 2, 3, np.inf, np.nan])
    inf
    >>> np.nansum([1, 2, 3, np.inf, np.nan])
    inf
    >>> np.nanmean([8, -np.inf, 9, 1, np.nan])
    -inf

## How *not* to implement `nan_policy`

In the past (and possibly currently), some `stats` functions handled `nan_policy` by using a masked array to mask the `nan` values, and then computing the result using the functions in the `mstats` subpackage. The problem with this approach is that the masked array code might convert `inf` to a masked value, which we don't want to do (see above). It also means that, if care is not taken, the return value will be a masked array, which will likely be a surprise to the user if they passed in regular arrays.

**Footnotes**

1.  If an element of the output depends only on the corresponding element of the input (e.g. <span class="title-ref">numpy.sin</span>, <span class="title-ref">scipy.special.gamma</span>), then there is no need for a `nan_policy` parameter.

---

special_ufuncs.md

---

# Adding vectorized ufuncs in `scipy.special`

Many of the functions in `special` are vectorized versions of scalar functions. The scalar functions are written by hand and the necessary loops for vectorization are generated automatically. This section discusses the steps necessary to add a new vectorized special function.

The first step in adding a new vectorized function is writing the corresponding scalar function. This can be done in Cython, C, C++, or Fortran. If starting from scratch then Cython should be preferred because the code is easier to maintain for developers only familiar with Python. If the primary code is in Fortran then it is necessary to write a C wrapper around the code; for examples of such wrappers see `specfun_wrappers.c`.

After implementing the scalar function, register the new function by adding an entry to `functions.json`. The docstring in `generate_ufuncs.py` explains the format. Also add documentation for the new function by adding an entry to `add_newdocs.py`; look in the file for examples.

When writing the parameters section of the documentation for ufuncs, the type of an argument should be `array_like`. Discussion of whether an argument can be e.g. real or complex-valued should be saved for the description. So for example, if we were to document the parameters for the Gamma function then it should look like this:

``` none
Parameters
----------
z : array_like
    Real or complex valued argument
```

When documenting the returns section, the type of the returned value should be `scalar or ndarray` since ufuncs return scalars when given scalars as arguments. Also keep in mind that providing a `name` for the return value is optional, and indeed is often not helpful for special functions. So for the Gamma function we might have something like this:

``` none
Returns
-------
scalar or ndarray
    Values of the Gamma function
```

---

code_of_conduct.md

---

# SciPy Code of Conduct

## Introduction

This code of conduct applies to all spaces managed by the SciPy project, including all public and private mailing lists, issue trackers, wikis, blogs, Twitter, and any other communication channel used by our community. The SciPy project does not organize in-person events, however, events related to our community should have a code of conduct similar in spirit to this one.

This code of conduct should be honored by everyone who participates in the SciPy community formally or informally, or claims any affiliation with the project, in any project-related activities, and, especially, when representing the project, in any role.

This code is neither exhaustive nor complete. It serves to distill our common understanding of a collaborative, shared environment and goals. Please try to follow this code in spirit as much as in letter, to create a friendly and productive environment that enriches the surrounding community.

## Specific guidelines

We strive to:

1.  Be open. We invite anyone to participate in our community. We prefer to use public methods of communication for project-related messages, unless discussing something sensitive. This applies to messages for help or project-related support, too; not only is a public-support request much more likely to result in an answer to a question, it also ensures that any inadvertent mistakes in answering are more easily detected and corrected.
2.  Be empathetic, welcoming, friendly, and patient. We work together to resolve conflict, and assume good intentions. We may all experience some frustration from time to time, but we do not allow frustration to turn into a personal attack. A community where people feel uncomfortable or threatened is not a productive one.
3.  Be collaborative. Our work will be used by other people, and in turn we will depend on the work of others. When we make something for the benefit of the project, we are willing to explain to others how it works, so that they can build on the work to make it even better. Any decision we make will affect users and colleagues, and we take those consequences seriously when making decisions.
4.  Be inquisitive. Nobody knows everything\! Asking questions early avoids many problems later, so we encourage questions, although we may direct them to the appropriate forum. We will try hard to be responsive and helpful.
5.  Be careful in the words that we choose. We are careful and respectful in our communication and we take responsibility for our own speech. Be kind to others. Do not insult or put down other participants. We will not accept harassment or other exclusionary behavior, such as:

>   - Violent threats or language directed against another person.
>   - Sexist, racist, or otherwise discriminatory jokes and language.
>   - Posting sexually explicit or violent material.
>   - Posting (or threatening to post) other people's personally identifying information ("doxing").
>   - Sharing private content, such as emails sent privately or non-publicly, or unlogged forums, such as IRC channel history, without the sender's consent.
>   - Personal insults, especially those using racist or sexist terms.
>   - Unwelcome sexual attention.
>   - Excessive profanity. Please avoid swearwords; people differ greatly in their sensitivity to swearing.
>   - Repeated harassment of others. In general, if someone asks you to stop, then stop.
>   - Advocating for, or encouraging, any of the above behavior.

## Diversity statement

The SciPy project welcomes and encourages participation by everyone. We are committed to being a community that everyone enjoys being part of. Although we may not always be able to accommodate each individual's preferences, we try our best to treat everyone kindly.

No matter how you identify yourself or how others perceive you: we welcome you. Though no list can hope to be comprehensive, we explicitly honor diversity in: age, culture, ethnicity, genotype, gender identity or expression, language, national origin, neurotype, phenotype, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, subculture and technical ability, to the extent that these do not conflict with this code of conduct.

Though we welcome people fluent in all languages, SciPy development is conducted in English.

Standards for behavior in the SciPy community are detailed in the Code of Conduct above. Participants in our community should uphold these standards in all their interactions and help others to do so as well (see next section).

## Reporting guidelines

We know that it is painfully common for internet communication to start at or devolve into obvious and flagrant abuse. We also recognize that sometimes people may have a bad day, or be unaware of some of the guidelines in this Code of Conduct. Please keep this in mind when deciding on how to respond to a breach of this Code.

For clearly intentional breaches, report those to the Code of Conduct committee (see below). For possibly unintentional breaches, you may reply to the person and point out this Code of Conduct (either in public or in private, whatever is most appropriate). If you would prefer not to do that, please feel free to report to the Code of Conduct committee directly, or ask the committee for advice, in confidence.

You can report issues to the SciPy Code of Conduct Committee, at <scipy-conduct@googlegroups.com>. Currently, the committee consists of:

  - Stefan van der Walt
  - Nathaniel J. Smith
  - Ralf Gommers

If your report involves any members of the committee, or if they feel they have a conflict of interest in handling it, then they will recuse themselves from considering your report. Alternatively, if, for any reason, you feel uncomfortable making a report to the committee, then you can also contact:

  - Chair of the SciPy Steering Committee: Ralf Gommers, or
  - Senior [NumFOCUS staff](https://numfocus.org/code-of-conduct#persons-responsible): <conduct@numfocus.org>

## Incident reporting resolution & Code of Conduct enforcement

*This section summarizes the most important points, more details can be found in* \[CoC\_reporting\_manual\](\#coc\_reporting\_manual).

We will investigate and respond to all complaints. The SciPy Code of Conduct Committee and the SciPy Steering Committee (if involved) will protect the identity of the reporter, and treat the content of complaints as confidential (unless the reporter agrees otherwise).

In case of severe and obvious breaches, e.g., personal threat or violent, sexist or racist language, we will immediately disconnect the originator from SciPy communication channels; please see the manual for details.

In cases not involving clear severe and obvious breaches of this code of conduct, the process for acting on any received code of conduct violation report will be:

1.  acknowledgement that the report has been received
2.  reasonable discussion/feedback
3.  mediation (if feedback didn't help, and only if both reporter and reportee agree to this)
4.  enforcement via transparent decision (see \[CoC\_resolutions\](\#coc\_resolutions)) by the Code of Conduct Committee

The committee will respond to any report as soon as possible, and at most within 72 hours.

## Endnotes

We are thankful to the groups behind the following documents, from which we drew content and inspiration:

  - [The Apache Foundation Code of Conduct](https://www.apache.org/foundation/policies/conduct.html)
  - [The Contributor Covenant](https://www.contributor-covenant.org/version/1/4/code-of-conduct/)
  - [Jupyter Code of Conduct](https://github.com/jupyter/governance/tree/master/conduct)
  - [Open Source Guides - Code of Conduct](https://opensource.guide/code-of-conduct/)

---

report_handling_manual.md

---

- orphan

# SciPy Code of Conduct - How to follow up on a report

This is the manual followed by SciPy's Code of Conduct Committee. It's used when we respond to an issue to make sure we're consistent and fair.

Enforcing the Code of Conduct impacts our community today and for the future. It's an action that we do not take lightly. When reviewing enforcement measures, the Code of Conduct Committee will keep the following values and guidelines in mind:

  - Act in a personal manner rather than impersonal. The Committee can engage the parties to understand the situation, while respecting the privacy and any necessary confidentiality of reporters. However, sometimes, it is necessary to communicate with one or more individuals directly: the Committee's goal is to improve the health of our community rather than only produce a formal decision.
  - Emphasize empathy for individuals rather than judging behavior, avoiding binary labels of "good" and "bad/evil". Overt, clear-cut aggression and harassment exists and we will be address that firmly. But many scenarios that can prove challenging to resolve are those where normal disagreements devolve into unhelpful or harmful behavior from multiple parties. Understanding the full context and finding a path that re-engages all is hard, but ultimately the most productive for our community.
  - We understand that email is a difficult medium and can be isolating. Receiving criticism over email, without personal contact, can be particularly painful. This makes it especially important to keep an atmosphere of open-minded respect of the views of others. It also means that we must be transparent in our actions, and that we will do everything in our power to make sure that all our members are treated fairly and with sympathy.
  - Discrimination can be subtle and it can be unconscious. It can show itself as unfairness and hostility in otherwise ordinary interactions. We know that this does occur, and we will take care to look out for it. We would very much like to hear from you if you feel you have been treated unfairly, and we will use these procedures to make sure that your complaint is heard and addressed.
  - Help increase engagement in good discussion practice: try to identify where discussion may have broken down and provide actionable information, pointers and resources that can lead to positive change on these points.
  - Be mindful of the needs of new members: provide them with explicit support and consideration, with the aim of increasing participation from underrepresented groups in particular.
  - Individuals come from different cultural backgrounds and native languages. Try to identify any honest misunderstandings caused by a non-native speaker and help them understand the issue and what they can change to avoid causing offense. Complex discussion in a foreign language can be very intimidating, and we want to grow our diversity also across nationalities and cultures.

*Mediation*: voluntary, informal mediation is a tool at our disposal. In contexts, such as when two or more parties have all escalated to the point of inappropriate behavior (something sadly common in human conflict), it may be useful to facilitate a mediation process. This is only an example: the Committee can consider mediation in any case, mindful that the process is meant to be strictly voluntary and no party can be pressured to participate. If the Committee suggests mediation, it should:

  - Find a candidate who can serve as a mediator.
  - Obtain the agreement of the reporter(s). The reporter(s) have complete freedom to decline the mediation idea, or to propose an alternate mediator.
  - Obtain the agreement of the reported person(s).
  - Settle on the mediator: while parties can propose a different mediator than the suggested candidate, only if common agreement is reached on all terms can the process move forward.
  - Establish a timeline for mediation to complete, ideally within two weeks.

The mediator will engage with all the parties and seek a resolution that is satisfactory to all. Upon completion, the mediator will provide a report (vetted by all parties to the process) to the Committee, with recommendations on further steps. The Committee will then evaluate these results (whether satisfactory resolution was achieved or not) and decide on any additional action deemed necessary.

## How the committee will respond to reports

When the committee (or a committee member) receives a report, they will first determine whether the report is about a clear and severe breach (as defined below). If so, immediate action needs to be taken in addition to the regular report-handling process.

### Clear and severe breach actions

We know that it is painfully common for internet communication to start at or devolve into obvious and flagrant abuse. We will deal quickly with clear and severe breaches like personal threats, violent, sexist, or racist language.

When a member of the Code of Conduct committee becomes aware of a clear and severe breach, they will do the following:

  - Immediately disconnect the originator from all SciPy communication channels.
  - Reply to the reporter that their report has been received and that the originator has been disconnected.
  - In every case, the moderator should make a reasonable effort to contact the originator, and tell them specifically how their language or actions qualify as a "clear and severe breach". The moderator should also say that, if the originator believes this is unfair or they want to be reconnected to SciPy, they have the right to ask for a review, as below, by the Code of Conduct Committee. The moderator should copy this explanation to the Code of Conduct Committee.
  - The Code of Conduct Committee will formally review and sign off on all cases where this mechanism has been applied to make sure it is not being used to control ordinary heated disagreement.

### Report handling

When a report is sent to the committee, they will immediately reply to the reporter to confirm receipt. This reply must be sent within 72 hours, and the group should strive to respond much quicker than that.

If a report doesn't contain enough information, the committee will obtain all relevant data before acting. The committee is empowered to act on the Steering Council’s behalf in contacting any individuals involved to get a more complete account of events.

The committee will then review the incident and determine, to the best of their ability:

  - What happened.
  - Whether this event constitutes a Code of Conduct violation.
  - Who are the responsible party(ies).
  - Whether this is an ongoing situation, and there is a threat to anyone's physical safety.

This information will be collected in writing, and whenever possible the group's deliberations will be recorded and retained (i.e., chat transcripts, email discussions, recorded conference calls, summaries of voice conversations, etc.).

It is important to retain an archive of all activities of this committee to ensure consistency in behavior and provide institutional memory for the project. To assist in this, the default channel of discussion for this committee will be a private mailing list accessible to current and future members of the committee as well as members of the Steering Council upon justified request. If the Committee finds the need to use off-list communications (e.g., phone calls for early/rapid response), it should, in all cases, summarize these back to the list so there's a good record of the process.

The Code of Conduct Committee should aim to have a resolution agreed upon within two weeks. In the event that a resolution can't be determined in that time, the committee will respond to the reporter(s) with an update and projected timeline for the resolution.

## Resolutions

The committee must agree on a resolution by consensus. If the group cannot reach consensus and deadlocks for over a week, the group will turn the matter over to the Steering Council for resolution.

Possible responses may include:

  - Taking no further action:
      - if we determine no violations have occurred.
      - if the matter has been resolved publicly while the committee was considering responses.
  - Coordinating voluntary mediation: if all involved parties agree, the Committee may facilitate a mediation process as detailed above.
  - Remind publicly, and point out that some behavior/actions/language have been judged inappropriate and why in the current context, or can but hurtful to some people, requesting the community to self-adjust.
  - A private reprimand from the committee to the individual(s) involved. In this case, the group chair will deliver that reprimand to the individual(s) over email, cc'ing the group.
  - A public reprimand. In this case, the committee chair will deliver that reprimand in the same venue that the violation occurred, within the limits of practicality. E.g., the original mailing list for an email violation, but for a chat room discussion where the person/context may be gone, they can be reached by other means. The group may choose to publish this message elsewhere for documentation purposes.
  - A request for a public or private apology, assuming the reporter agrees to this idea: they may, at their discretion, refuse further contact with the violator. The chair will deliver this request. The committee may, if it chooses, attach "strings" to this request: for example, the group may ask a violator to apologize, in order to retain one’s membership on a mailing list.
  - A "mutually agreed upon hiatus" where the committee asks the individual to temporarily refrain from community participation. If the individual chooses not to take a temporary break voluntarily, the committee may issue a "mandatory cooling off period".
  - A permanent or temporary ban from some or all SciPy spaces (mailing lists, gitter.im, etc.). The group will maintain records of all such bans so that they may be reviewed in the future or otherwise maintained.

Once a resolution is agreed upon, but before it is enacted, the committee will contact the original reporter and any other affected parties and explain the proposed resolution. The committee will ask if this resolution is acceptable, and must note feedback for the record.

Finally, the committee will make a report to the SciPy Steering Council (as well as the SciPy core team in the event of an ongoing resolution, such as a ban).

The committee will never publicly discuss the issue; all public statements will be made by the chair of the Code of Conduct Committee or the SciPy Steering Council.

## Conflicts of interest

In the event of any conflict of interest, a committee member must immediately notify the other members, and recuse themselves if necessary.

---

adding_new.md

---

# Adding New Methods, Functions, and Classes

While adding code to SciPy is in most cases quite straight forward, there are a few places where that is not the case. This document contains detailed information on some specific situations where it may not be clear from the outset what is involved in the task.

## Adding A New Statistics Distribution

For hundreds of years statisticians, mathematicians and scientists have needed to understand, analyze and model data. This has led to a plethora of statistics distributions, many of which are related to others. Modeling of new types of data continues to give rise to new distributions, as does theoretical considerations being applied to new disciplines. SciPy models about a dozen discrete distributions \[discrete-random-variables\](\#discrete-random-variables) and 100 continuous distributions \[continuous-random-variables\](\#continuous-random-variables).

To add a new distribution, a good reference is needed. Scipy typically uses [\[JKB\]](#JKB) as its gold standard, with [WikipediaDistributions](https://en.wikipedia.org/wiki/List_of_probability_distributions) articles often providing some extra details and/or graphical plots.

### How to create a new continuous distribution

There are a few steps to be done to add a continuous distribution to SciPy. (Adding a discrete distribution is similar). We'll use the fictitious "Squirrel" distribution in the instructions below.

#### Before Implementation

1.  See if `Squirrel` has already been implemented--that saves a lot of effort\!
    
      - It may have been implemented with a different name.
      - It may have been implemented with a different parameterization (shape parameters).
      - It may be a specialization of a more general family of distributions.
    
    It is very common for multiple disciplines to discover/rediscover a distribution (or a specialization or different parameterization). There are a few existing SciPy distributions which are specializations of other distributions. E.g. The <span class="title-ref">scipy.stats.arcsine</span> distribution is a specialization of the <span class="title-ref">scipy.stats.beta</span> distribution. These duplications exist for (very\!) historical and widespread usage reasons. At this time, adding new specializations/reparametrizations of existing distributions to SciPy is not supported, mainly due to the increase in user confusion resulting from such additions.

2.  Create a [SciPy Issue on GitHub](https://github.com/scipy/scipy/issues), listing the distribution, references and reasons for its inclusion.

#### Implementation

1.  Find an already existing distribution similar to `Squirrel`. Use its code as a template for `Squirrel`.
2.  Read the docstring for class `rv_continuous` in [scipy/stats/\_distn\_infrastructure.py](https://github.com/scipy/scipy/blob/main/scipy/stats/_distn_infrastructure.py#L1378).
3.  Write the new code for class `squirrel_gen` and insert it into [scipy/stats/\_continuous\_distns.py](https://github.com/scipy/scipy/blob/main/scipy/stats/_continuous_distns.py), which is in (mostly) alphabetical order by distribution name.
4.  Does the distribution have infinite support? If not, left and/or right endpoints `a`, `b` need to be specified in the call to `squirrel_gen(name='squirrel', a=?, b=?)`.
5.  If the support depends upon the shape parameters, `squirrel_gen._get_support()` needs to be implemented.
6.  The default inherited `_argcheck()` implementation checks that the shape parameters are positive. Create a more appropriate implementation.
7.  If `squirrel_gen.ppf()` is expensive to compute relative to `squirrel_gen.pdf()`, consider setting the `momtype` in the call to `squirrel_gen()`.
8.  If `squirrel_gen.rvs()` is expensive to compute, consider implementing a specific `squirrel_gen._rvs()`.
9.  Add the name to the listing in the docstring of [scipy/stats/\_\_init\_\_.py](https://github.com/scipy/scipy/blob/main/scipy/stats/__init__.py).
10. Add the name and a good set of example shape parameters to the `distcont` list in [scipy/stats/\_distr\_params.py](https://github.com/scipy/scipy/blob/main/scipy/stats/_distr_params.py#L5). These shape parameters are used both for testing and automatic documentation generation.
11. Add the name and an \_[invalid]() set of example shape parameters to the list in `invdistcont`, also in [\_distr\_params.py](https://github.com/scipy/scipy/blob/main/scipy/stats/_distr_params.py). These shape parameters are also used for testing.
12. Add a `TestSquirrel` class and any specific tests to [scipy/stats/tests/test\_distributions.py](https://github.com/scipy/scipy/blob/main/scipy/stats/tests/test_distributions.py).
13. Run and pass(\!) the tests.

#### After Implementation

1.  Add a tutorial `doc/source/tutorial/stats/continuous_squirrel.rst`
2.  Add it to the listing of continuous distributions in [doc/source/tutorial/stats/continuous.rst](https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous.md).
3.  Update the `number of continuous distributions` in the example code in [doc/source/tutorial/stats.rst](https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats.md).
4.  Build the documentation successfully.
5.  Submit a PR.

### References

<div id="citations">

  - <span id="JKB" class="citation-label">JKB</span>  
    Johnson, Kotz, and Balakrishnan, "Continuous Univariate Distributions, Volume 1", Second Edition, John Wiley and Sons, p. 173 (1994).

</div>

---

benchmarking.md

---

- orphan

# Benchmarking SciPy with airspeed velocity

*This document introduces benchmarking, including reviewing SciPy benchmark test results online, writing a benchmark test, and running it locally. For a video run-through of writing a test and running it locally, see* [Benchmarking SciPy](https://youtu.be/edLQ8KRpupQ)*.*

As written in the [airspeed velocity (asv) documentation](https://asv.readthedocs.io/en/stable/):

> Airspeed velocity (asv) is a tool for benchmarking Python packages over their lifetime. Runtime, memory consumption, and even custom-computed values may be tracked. The results are displayed in an interactive web frontend that requires only a basic static webserver to host.

To see what this means, take a look at [airspeed velocity of an unladen scipy](https://pv.github.io/scipy-bench/). Each plot summarizes the execution time of a particular test over the commit history of the project; that is, as each commit is merged, the benchmark test is run, its execution time is measured, and the elapsed time is plotted. In addition to tracking the performance of the code, a commit is *intended* to affect, running *all* benchmarks for each commit is helpful for identifying unintentional regressions: significant increases in the execution time of one or more benchmark tests. As SciPy is a web of interconnected code, the repercussions of a small change may not be immediately obvious to a contributor, so this benchmark suite makes it easier to detect regressions and identify the commit that caused them. When you contribute a substantial new feature -or notice a feature that doesn’t already have a benchmark test - please consider writing benchmarks.

## Writing benchmarks

*The* \[Writing benchmarks \<asv:writing-benchmarks\>\](\#writing-benchmarks-\<asv:writing-benchmarks\>) *section of the airspeed velocity documentation is the definitive guide to writing benchmarks. Please see also the* [SciPy benchmarks readme](https://github.com/scipy/scipy/blob/main/benchmarks/README.md)*.*

To see how benchmarks are written, take a look at `scipy/benchmarks/benchmarks/optimize_linprog.py`\_. Each subclass of `Benchmark` defines a benchmark test. For example, the `KleeMinty` class defines a benchmark test based on the [Klee-Minty hypercube problem](https://en.wikipedia.org/wiki/Klee%E2%80%93Minty_cube), a diabolical test of the simplex algorithm for linear programming. The class has four parts:

  - `setup` prepares the benchmark to run. The execution time of this function is *not* counted in the benchmark results, so this is a good place to set up all variables that define the problem. In the `KleeMinty` example, this involves generating arrays `c`, `A_ub`, and `b_ub` corresponding with a Klee-Minty hypercube in `dims` dimensions and storing them as instance variables.
  - `time_klee_minty` actually runs the benchmark test. This function executes after a `KleeMinty` object has been instantiated and `setup` has run, so it gets the arrays defining the problem from `self`. Note that the prefix `time` in the function name indicates to `asv` that the execution time of this function *is* to be counted in the benchmark results.
  - `params` is a list of lists defining parameters of the test. Benchmarks are run for all possible combinations of these parameters. For example, the first time the benchmark is run, the first element of `methods` (`simplex`) is passed into `setup` and `time_klee_minty` as the first argument, `meth`, and the first element of `[3, 6, 9]` (`3`) is passed into `setup` and `time_klee_minty` as the second argument, `dims`. The next time the benchmark is run, `setup` and `time_klee_minty` are passed `revised simplex` and `6` as arguments, and so this continues until all combinations of parameters have been used.
  - `param_names` is a list of human-readable names for each element of the `params` list. These are used for presenting results.

Results of this benchmark over the past few years are available by clicking on the [KleeMinty.time\_klee\_minty](https://pv.github.io/scipy-bench/#optimize_linprog.KleeMinty.time_klee_minty) link at [airspeed velocity of an unladen scipy](https://pv.github.io/scipy-bench/). Note that each trace of the plot corresponds with a combination of benchmark parameters and environment settings (e.g., the Cython version), and that the visibility of the traces can be toggled using the control panel on the left.

## Running benchmarks locally

*Before beginning, ensure that* [airspeed velocity](https://github.com/airspeed-velocity/asv) *is installed.*

After contributing new benchmarks, you should test them locally before submitting a pull request.

To run all benchmarks, navigate to the root SciPy directory at the command line and execute:

``` console
python dev.py bench
```

where `bench` activates the benchmark suite instead of the test suite. This builds SciPy and runs the benchmarks. (*Note: this could take a while. Benchmarks often take longer to run than unit tests, and each benchmark is run multiple times to measure the distribution in execution times.*)

To run benchmarks from a particular benchmark module, such as `optimize_linprog.py`, simply append the filename without the extension:

``` console
python dev.py bench -t optimize_linprog
```

To run a benchmark defined in a class, such as `KleeMinty` from `optimize_linprog.py`:

``` console
python dev.py bench -t optimize_linprog.KleeMinty
```

To compare benchmark results between the active branch and another, such as `main`:

``` console
python dev.py bench --compare main  # select again by `-t optimize_linprog`
```

All of the commands above display the results in plain text in the console, and the results are not saved for comparison with future commits. For greater control, a graphical view, and to have results saved for future comparison, you can use use the `asv` terminal command directly.

To use it, navigate to `scipy/benchmarks` in the console and then execute:

``` console
asv run
```

This command runs the whole benchmark suite and saves the results for comparison against future commits.

To run only a single benchmark, such as `KleeMinty` from `optimize_linprog.py`:

``` console
asv run --bench optimize_linprog.KleeMinty
```

One great feature of `asv` is that it can automatically run a benchmark not just for the current commit, but for every commit in a range. `linprog` `method='interior-point'` was merged into SciPy with commit `7fa17f2369e0e5ad055b23cc1a5ee079f9e8ca32`\_, so let’s run the `KleeMinty` benchmark for 10 commits between then and now to track its performance over time:

``` console
asv run --bench optimize_linprog.KleeMinty --steps 10 7fa17f..
```

\> **Note** \> This will take a while, because SciPy has to be rebuilt for each commit\! To speed up the building process of benchmarks you can install [ccache](https://ccache.dev) and [f90cache](https://perso.univ-rennes1.fr/edouard.canot/f90cache/). The benchmark suite will automatically detect them if they are installed in the `/usr/lib` and `/usr/local/lib`. Otherwise you must add them to the `PATH` environment variable.

> For more information about specifying ranges of commits, see the [git revisions documentation](https://git-scm.com/docs/gitrevisions#_specifying_ranges).

To "publish" the results (prepare them to be viewed) and "preview" them in an interactive console:

``` console
asv publish
asv preview
```

ASV will report that it is running a server. Using any browser, you can review the results by navigating to <http://127.0.0.1:8080> (local machine, port 8080).

For much more information about the `asv` commands, see the airspeed velocity [Commands](https://asv.readthedocs.io/en/stable/commands.html#commands) documentation. (Tip: check out the `asv find` command and the `--quick`, `--skip-existing-commits`, and `--profile` options for `asv run`.)

---

compiled_code.md

---

# Beyond Python

This is a small collection of thoughts related to the inclusion of code written in languages other than Python. Currently, the only option for languages other than Python that we have extra documentation for is \[Cython\<adding-cython\>\](\#cython\<adding-cython\>).

*Can I use a programming language other than Python to speed up my code?*

Yes. The languages used in SciPy are Python, Cython, Pythran, C, C++, and Fortran. All of these have their pros and cons. If Python really doesn't offer enough performance, one of those languages can be used. Important concerns when using compiled languages are maintainability and portability. For maintainability, Pythran and Cython are preferred over C/C++/Fortran. Cython, C and C++ are more portable than Fortran. A lot of the existing Fortran code in SciPy is older, battle-tested code that was only wrapped in (but not specifically written for) Python/SciPy.

Our basic advice is: use Pythran or Cython for accelerating smaller pieces of code. In cases where Pythran or Cython are no longer enough, prefer C or C++. If there are specific reasons why Fortran is preferred, please discuss those reasons first.

*Can I use Numba?*

Not yet, but we're considering it for the future. It is possible to write code that takes user-defined functions which are generated by Numba, see \[ndimage-ccallbacks\](\#ndimage-ccallbacks).

*How do I debug code written in C/C++/Fortran inside SciPy?*

The easiest way to do this is to first write a Python script that invokes the C code whose execution you want to debug. For instance `mytest.py`:

    from scipy.special import hyp2f1
    print(hyp2f1(5.0, 1.0, -1.8, 0.95))

Build SciPy in debug mode:

    python dev.py build -d

Now, you can run:

    gdb --args python dev.py python mytest.py

If you didn't compile with debug symbols enabled before, remove the `build` directory first. While in the debugger:

    (gdb) break cephes_hyp2f1
    (gdb) run

The execution will now stop at the corresponding C function and you can step through it as usual. Instead of plain `gdb` you can, of course, use your favorite alternative debugger; run it on the `python` binary with arguments `python dev.py python mytest.py`.

---

continuous_integration.md

---

# Continuous Integration

Continuous integration (CI) is part of our development process and ensure that every piece of code or documentation which is contributed to SciPy is working and does not have unforeseen effects.

<div class="note">

<div class="title">

Note

</div>

Before submitting or updating your PR, please ensure that you tested your changes locally. See \[pr-checklist\](\#pr-checklist) and \[devpy-test\](\#devpy-test).

</div>

## Workflows

We run more than 20 different workflows with different versions of the dependencies, different architectures, etc. A PR must pass all these checks before it can be merged as to ensure a sustainable state of the project.

Apart from the unit tests, the documentation and examples in the docstrings are also checked. These are common failing workflows as Sphinx and doctests have very strict rules. These aspects are very important as documentation and examples are user facing elements. Ensures that these elements are properly rendered.

The logs can be long, but you will always find out why your build/test did not pass a check. Simply click on `Details` to access the logs.

Following is a list of all the different workflows in use. They are grouped by CI resources providers.

### GitHub Actions

  - `Lint`: PEP8 and code style
  - `Windows Tests`: test suite runs for Windows
  - `Linux Tests`: test suite runs for Linux
  - `macOS Tests`: test suite runs for macOS (`x86_64`)
  - `Wheels builder`: builds wheels for SciPy releases as well as *nightly* builds.
  - `Check the rendered docs here!`: live preview of the documentation
  - `prerelease_deps_coverage_64bit_blas`: use pre-released version of the dependencies and check coverage
  - `gcc-9`: build with minimal supported version of GCC, install the wheel, then run the test suite with <span class="title-ref">python -OO</span>
  - `Array API`: test Array API support

The test suite runs on GitHub Actions and other platforms cover a range of test/environment conditions: Python and NumPy versions (lowest-supported to nightly builds), 32-bit vs. 64-bit, different compilers, and more - for details, see the `.yml` configuration files.

### CircleCI

  - `build_docs`: build the documentation
  - `build_scipy`
  - `run_benchmarks`: verify how the changes impact performance
  - `refguide_check`: doctests from examples and benchmarks

### CirrusCI

  - `Tests`: test suite for specific architecture like `musllinux, arm, aarch`
  - `Wheels`: build and upload some wheels

## Skipping

Being an open-source project, we have access to a quota of CI resources. Ultimately, resources are limited and we should use them with care. This is why we ask you to verify your changes locally before pushing them.

Depending on the proposed change, you might want to skip part of the checks. It will be at the discretion of a maintainer to re-run some tests before integration.

Skipping CI can be achieved by adding a special text in the commit message:

  - `[skip actions]`: will skip GitHub Actions
  - `[skip circle]`: will skip CircleCI
  - `[skip cirrus]`: will skip CirrusCI
  - `[docs only]`: will skip *all but* the CircleCI checks and the linter
  - `[lint only]`: will skip *all but* the linter
  - `[skip ci]`: will skip *all* CI

Of course, you can combine these to skip multiple workflows.

This skip information should be placed on a new line. In this example, we just updated a `.rst` file in the documentation and ask to skip all but the relevant docs checks (skip Cirrus and GitHub Actions' workflows):

    DOC: improve QMCEngine examples.
    
    [docs only]

## Failures due to test duration

Some CI jobs install `pytest-fail-slow`\_ and report failures when the test execution time exceeds a threshold duration.

  - By default, all tests are subject to a 5 second limit; i.e., the option `--fail-slow=5.0` is used in a "full" test job.
  - All tests not marked `slow` (`@pytest.mark.slow`) are subject to a 1 second limit; i.e. the option `--fail-slow=1.0` is used in a "fast" test job.
  - Exceptions are made using the `pytest.mark.fail_slow` decorator; e.g. a test can be marked `@pytest.mark.fail_slow(10)` to give it a ten second limit regardless of whether it is part of the "fast" or "full" test suite.

If a test fails by exceeding the time limit at any point during the development of a PR, please adjust the test to ensure that it does not fail in the future. Even if new tests do not fail, please check the details of workflows that include "fail slow" in their name before PRs merge. These include lists of tests that are approaching (or have exceeded) their time limit. Due to variation in execution times, tests with execution times near the threshold should be adjusted to avoid failure even if their execution time were to increase by 50%; typical tests should have much greater margin (at least 400%). Adjustment options include:

  - Making the test faster.
  - Marking the test as `slow`, if it is acceptable to run the test on a reduced set of platforms.
  - Marking the test as `xslow`, if it is acceptable to run the test only occasionally.
  - Breaking up the test or parameterizing it, and possible marking parts of it as slow. Note that this does not reduce the total test duration, so other options are preferred.
  - For truly critical tests that are unavoidably slow, add an exception using `pytest.mark.fail_slow`.

See \[devpy-test\](\#devpy-test) for more information about working with slow tests locally.

## Wheel builds

Wheels for SciPy releases and [\*nightly\*](https://anaconda.org/scientific-python-nightly-wheels/scipy) builds are built using cibuildwheel in a [Github Action](https://github.com/scipy/scipy/blob/main/.github/workflows/wheels.yml). The Action runs:

  - when the commit message contains the text `[wheel build]`
  - on a scheduled basis once a week
  - when it is started manually.
  - when there is a push to the repository with a GitHub reference starting with `refs/tags/v` (and not ending with `dev0`)

The action does not run on forks of the main SciPy repository. The wheels that are created are available as artifacts associated with a successful run of the Action. When the Action runs on a schedule, or is manually started, the wheels are uploaded to the [\*scientific-python-nightly-wheels\*](https://anaconda.org/scientific-python-nightly-wheels/scipy) repository.

It is not advised to use cibuildwheel to build scipy wheels on your own system as it will automatically install gfortran compilers and various other dependencies. Instead, one could use an isolated Docker container to build Linux wheels.

---

contributor_toc.md

---

# SciPy contributor guide

This guide is designed to help you quickly find the information you need about SciPy development after you've reviewed the introductory material in \[hacking\](\#hacking) or \[dev-quickstart\](\#dev-quickstart).

You can also watch [SciPy Development Workflow](https://youtu.be/HgU01gJbzMY), a five-minute video example of fixing a bug and submitting a pull request (*note: this video is from 2018, so the build steps are different by now - the overall workflow is still the same though*).

  - \[building-from-source\](\#building-from-source) - how to set up a development environment, including installing compilers and SciPy dependencies, cloning the SciPy repository on GitHub and updating git submodules, and using the `dev.py` interface for building and running tests.
  - \[editing-scipy\](\#editing-scipy) - how to edit SciPy Python code, with tips on finding which module contains SciPy functionality to be edited, adding new modules to SciPy, and complying with PEP8 style standards
  - \[unit-tests\](\#unit-tests) - how to write and run unit tests for SciPy with the pytest framework
  - \[docs\](\#docs) - how to write reStructuredText documentation that complies with docstring standards, build documentation locally with Sphinx, and view documentation built during continuous integration checks
  - \[toc-benchmarking\](\#toc-benchmarking) - how to benchmark code with airspeed velocity
  - \[compiled-code\](\#compiled-code) - how to add fast, compiled code to SciPy
  - \[continuous-integration\](\#continuous-integration) - how does our continuous integration system works and how to debug your PR

## Editing SciPy

  - \[development-workflow\](\#development-workflow) lays out what to do after your development environment is set up
  - \[pep8-scipy\](\#pep8-scipy) gives some tips for ensuring that your code is PEP8 compliant
  - \[git-development\](\#git-development) is a guide to using `git`, the distributed version-control system used to manage the changes made to SciPy code from around the world
  - \[scipy-api\](\#scipy-api) contains some important notes about how SciPy code is organized and documents the structure of the SciPy API; if you are going to import other SciPy code, read this first
  - \[reviewing-prs\](\#reviewing-prs) explains how to review another author's SciPy code locally
  - \[triaging\](\#triaging) explains how to curate issues and PRs, as well as how GitHub team permissions work for SciPy
  - \[adding-new\](\#adding-new) has information on how to add new methods, functions and classes
  - \[core-dev-guide\](\#core-dev-guide) has background information including how decisions are made and how a release is prepared; it's geared toward \[Core Developers \<governance\>\](\#core-developers-\<governance\>), but contains useful information for all contributors
  - \[missing-bits\](\#missing-bits) - code and documentation style guide

## Testing

  - \[numpy:reference/testing\](numpy:reference/testing.md) is the definitive guide to writing unit tests of NumPy or SciPy code (part of the NumPy documentation)
  - \[devpy-test\](\#devpy-test) documents `dev.py test`, the command to build SciPy and run tests locally
  - \[debugging-linalg-issues\](\#debugging-linalg-issues)

## Documentation

  - \[numpy:howto-document\](\#numpy:howto-document) contains everything you need to know about writing docstrings, which are rendered to produce HTML documentation using [Sphinx](http://www.sphinx-doc.org/en/master/) (part of the NumPy documentation)
  - \[contributing-docs\](\#contributing-docs) contains information on how to contribute to the SciPy documentation
  - \[rendering-documentation\](\#rendering-documentation) it's important to check how changes to the documentation render before merging a PR; this document explains how you can do that

## Benchmarks

  - \[benchmarking-with-asv\](\#benchmarking-with-asv) explains how to add benchmarks to SciPy using [airspeed velocity](https://asv.readthedocs.io/en/stable/)

## Compiled code

  - \[adding-cython\](\#adding-cython) extending and compiling Python code with [Cython](https://cython.org/) can significantly improve its performance; this document helps you get started
  - \[other-languages\](\#other-languages) discusses the use of C, C++, and Fortran code in SciPy
  - \[public-cython-api\](\#public-cython-api) on guidelines on exposing public Cython APIs

<div class="toctree" hidden="">

development\_workflow pep8 ../gitwash/gitwash reviewing\_prs ../triage adding\_new ../core-dev/index ../missing-bits NumPy testing guidelines \<<https://numpy.org/devdocs/reference/testing.html>\> devpy\_test debugging\_linalg\_issues How to contribute documentation \<<https://numpy.org/devdocs/dev/howto-docs.html>\> rendering\_documentation benchmarking cython compiled\_code public\_cython\_api

</div>

---

cython.md

---

# Adding Cython to SciPy

As written on the [Cython website](https://cython.org/):

> Cython is an optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex). It makes writing C extensions for Python as easy as Python itself.

If your code currently performs a lot of loops in Python, it might benefit from compilation with Cython. This document is intended to be a very brief introduction: just enough to see how to use Cython with SciPy. Once you have your code compiling, you can learn more about how to optimize it by reviewing the [Cython documentation](http://docs.cython.org/en/latest/).

There are only two things you need to do in order for SciPy compile your code with Cython:

1.  Include your code in a file with a `.pyx` extension rather than a `.py` extension. All files with a `.pyx` extension are automatically converted by Cython to `.c` or `.cpp` files when SciPy is built.
2.  Add the new `.pyx` file to the `meson.build` build configuration of the subpackage in which your code lives. Typically, there are already other `.pyx` patterns present (if not, look in another submodule) so there's an example to follow for what exact content to add to `meson.build`.

## Example

`scipy.optimize._linprog_rs.py`\_ contains the implementation of the revised simplex method for `scipy.optimize.linprog`. The revised simplex method performs many elementary row operations on matrices, and so it was a natural candidate to be Cythonized.

Note that `scipy/optimize/_linprog_rs.py` imports the `BGLU` and `LU` classes from `._bglu_dense` exactly as if they were regular Python classes. But they’re not. `BGLU` and `LU` are Cython classes defined in `/scipy/optimize/_bglu_dense.pyx`\_. There is nothing about the way they are imported or used that suggests that they are written in Cython; the only way so far that we can tell they are Cython classes is that they are defined in a file with a `.pyx` extension.

Even in `/scipy/optimize/_bglu_dense.pyx`, most of the code resembles Python. The most notable differences are the presence of `cimport`, `cdef`, and [Cython decorators](https://cython.readthedocs.io/en/latest/src/userguide/numpy_tutorial.html). None of these are strictly necessary. Without them, the pure Python code can still be compiled by Cython. The Cython language extensions are \*just\* tweaks to improve performance. This `.pyx` file is automatically converted to a `.c` file by Cython when SciPy is built.

The only thing left is to add the build configuration, which will look something like:

``` meson
_bglu_dense_c = opt_gen.process('_bglu_dense.pyx')

py3.extension_module('_bglu_dense',
  _bglu_dense_c,
  c_args: cython_c_args,
  dependencies: np_dep,
  link_args: version_link_args,
  install: true,
  subdir: 'scipy/optimize'
)
```

When SciPy is built, `_bglu_dense.pyx` will be transpiled by `cython` to C code, and then that generated C file is treated by Meson like any other C code in SciPy - producing an extension modules that we will be able to import and use the `LU` and `BGLU` classes from.

## Exercise

*See a video run-through of this exercise:* [Cythonizing SciPy Code](https://youtu.be/K9bF7cjUJ7c) \#. Update Cython and create a new branch (e.g., `git checkout -b cython_test`) in which to make some experimental changes to SciPy

1.  Add some simple Python code in a `.py` file in the `/scipy/optimize` directory, say `/scipy/optimize/mypython.py`. For example:
    
        def myfun():
            i = 1
            while i < 10000000:
                i += 1
            return i

2.  Let’s see how long this pure-Python loop takes so we can compare the performance of Cython. For example, in an IPython console in Spyder:
    
        from scipy.optimize.mypython import myfun
        %timeit myfun()
    
    I get something like:
    
        715 ms ± 10.7 ms per loop

3.  Save your `.py` file to a `.pyx` file, e.g. `mycython.pyx`.

4.  Add the `.pyx` to `scipy/optimize/meson.build`, in the way described in the previous section.

5.  Rebuild SciPy. Note that an extension module (a `.so` or `.pyd` file) has been added to the `build/scipy/optimize/` directory.

6.  Time it, e.g. by dropping into IPython with `python dev.py ipython` and then:
    
        from scipy.optimize.mycython import myfun
        %timeit myfun()
    
    I get something like:
    
        359 ms ± 6.98 ms per loop
    
    Cython sped up the pure Python code by a factor of \~2.

7.  That’s not much of an improvement in the scheme of things. To see why, it helps to have Cython create an “annotated” version of our code to show bottlenecks. In a terminal window, call Cython on your `.pyx` file with the `-a` flag:
    
        cython -a scipy/optimize/mycython.pyx
    
    Note that this creates a new `.html` file in the `/scipy/optimize` directory. Open the `.html` file in any browser.

8.  The yellow-highlighted lines in the file indicate potential interaction between the compiled code and Python, which slows things down considerably. The intensity of the highlighting indicates the estimated severity of the interaction. In this case, much of the interaction can be avoided if we define the variable `i` as an integer so that Cython doesn’t have to consider the possibility of it being a general Python object:
    
        def myfun():
            cdef int i = 1  # our first line of Cython code
            while i < 10000000:
                i += 1
            return i
    
    Recreating the annotated `.html` file shows that most of the Python interaction has disappeared.

9.  Rebuild SciPy, open an fresh IPython console, and `%timeit`:

<!-- end list -->

    from scipy.optimize.mycython import myfun
    %timeit myfun()

I get something like: `68.6 ns ± 1.95 ns per loop`. The Cython code ran about 10 million times faster than the original Python code.

In this case, the compiler probably optimized away the loop, simply returning the final result. This sort of speedup is not typical for real code, but this exercise certainly illustrates the power of Cython when the alternative is many low-level operations in Python.

---

debugging_linalg_issues.md

---

# Debugging linear algebra related issues

Linear algebra related bug reports are among the most challenging issues to diagnose and address. This is not only because linear algebra can be challenging mathematically/algorithmically (that is true for many parts of SciPy), but because BLAS/LAPACK libraries are a complex build-time as well as runtime dependency - and we support a significant number of BLAS/LAPACK libraries.

This document aims to provide guidance about how to go about debugging linear algebra issues.

If there is a real bug, it can be in one of three places:

  - In the BLAS library being used,
  - In SciPy's bindings for BLAS or LAPACK (generated by `numpy.f2py` and/or Cython),
  - In SciPy's algorithmic code.

A key first step is to determine whether the bug is in SciPy or in the BLAS library. To do so, the most efficient way to disambiguate the two is to set up your environment in such a way that you can achieve runtime switching between different BLAS libraries (something we don't support out of the box, and isn't possible with SciPy's wheels from PyPI).

Upstream BLAS library authors strongly prefer to get clean reproducers (just like we do), which means: no Python involved. So this guide will also cover how to create reproducers in C or Fortran.

## Finding the BLAS library being used

SciPy has one function, <span class="title-ref">\~scipy.show\_config</span>, to introspect the build configuration of an installed package. This allows querying for details of BLAS and LAPACK. E.g.:

    >>> blas_dep = scipy.show_config(mode='dicts')['Build Dependencies']['blas']
    >>> for key in blas_dep:
    ...     print(f"{key}:  {blas_dep[key]}")
    ...
    name:  openblas
    found:  True
    version:  0.3.23
    detection method:  pkgconfig
    include directory:  /home/user/miniforge/envs/scipy-dev/include
    lib directory:  /home/user/miniforge/envs/scipy-dev/lib
    openblas configuration:  USE_64BITINT=0 DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK=0 NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP=0 PRESCOTT MAX_THREADS=128
    pc file directory:  /home/user/miniforge/envs/scipy-dev/lib/pkgconfig

This method will be correct for SciPy wheels and for local dev builds. It *may* be correct for other installs, however keep in mind that distros like conda-forge and Debian may be building against stub libraries (typically `blas.so`/`lapack.so`) and then installing another library for the user -in such cases, plain `blas` and `lapack` will be reported even if for example OpenBLAS or MKL is installed in the environment. For such installs, [threadpoolctl](https://github.com/joblib/threadpoolctl) will usually be able to report what the actual BLAS library in use is (except it doesn't report on plain Netlib BLAS, see [threadpoolctl\#159](https://github.com/joblib/threadpoolctl/issues/159)):

    $ python -m threadpoolctl -i scipy.linalg
    [
      {
        "user_api": "blas",
        "internal_api": "openblas",
        "prefix": "libopenblas",
        "filepath": "/home/user/miniforge/envs/dev/lib/libopenblasp-r0.3.21.so",
        "version": "0.3.21",
        "threading_layer": "pthreads",
        "architecture": "SkylakeX",
        "num_threads": 24
      }
    ]

Other ways of introspecting that can be helpful in local dev environments include:

1.  Checking dependencies of shared libraries:

<div class="tab-set">

<div class="tab-item" data-sync="linux">

Linux

    $ ldd build/scipy/linalg/_fblas.cpython-*.so
    ...
    libopenblas.so.0 => /home/user/miniforge/envs/scipy-dev/lib/libopenblas.so.0 (0x0000780d6d000000)

</div>

<div class="tab-item" data-sync="macos">

macOS

    % otool -L build/scipy/linalg/_fblas.cpython-310-darwin.so
    build/scipy/linalg/_fblas.*.so:
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1336.61.1)
        @rpath/libopenblas.0.dylib (compatibility version 0.0.0, current version 0.0.0)

</div>

</div>

2.  Checking whether the linked library contains a given symbol. E.g., conda-forge installs a `libblas.so` that may be any supported library:

<div class="tab-set">

<div class="tab-item" data-sync="linux">

Linux

    $ nm -gD ~/miniforge/envs/scipy-dev/lib/libblas.so | rg openblas_set_num_threads
    0000000000362990 T openblas_set_num_threads

</div>

<div class="tab-item" data-sync="macos">

macOS

    % nm ~/miniforge/envs/scipy-dev/lib/libblas.3.dylib | rg openblas_set_num_threads
    000000000015b6b0 T _openblas_set_num_threads

</div>

</div>

## Setting up your environment for switching BLAS libraries

We'll cover several ways of switching between different BLAS libraries, because the easiest method may depend on your OS/distro and on whether you want a released version of SciPy or a development build.

### Conda-forge

Perhaps the easiest way is to use the runtime switching abilities provided by distros. For example, to create a conda environment with the latest SciPy release installed and then switching between OpenBLAS, Netlib BLAS/LAPACK, and MKL is as simple as:

    $ mamba create -n blas-switch scipy threadpoolctl
    $ mamba activate blas-switch
    $ python -m threadpoolctl -i scipy.linalg
    ...
        "user_api": "blas",
        "internal_api": "openblas",
    
    $ mamba install "libblas=*=*netlib"
    ...
      libblas                         3.9.0-21_linux64_openblas --> 3.9.0-5_h92ddd45_netlib
      libcblas                        3.9.0-21_linux64_openblas --> 3.9.0-5_h92ddd45_netlib
      liblapack                       3.9.0-21_linux64_openblas --> 3.9.0-5_h92ddd45_netlib
    
    $ mamba install "libblas=*=*mkl"
    ...
      libblas                           3.9.0-5_h92ddd45_netlib --> 3.9.0-21_linux64_mkl
      libcblas                          3.9.0-5_h92ddd45_netlib --> 3.9.0-21_linux64_mkl
      liblapack                         3.9.0-5_h92ddd45_netlib --> 3.9.0-21_linux64_mkl
    
    $ python -m threadpoolctl -i scipy.linalg
    ...
      "user_api": "blas",
      "internal_api": "mkl",

This can be done for development builds as well, when building via `dev.py` in the exact same way as in [SciPy's conda-forge build recipe](https://github.com/conda-forge/scipy-feedstock/blob/main/recipe/build.sh) (outputs omitted for brevity, they're similar to the ones above):

    $ mamba env create -f environment.yml
    $ mamba activate scipy-dev
    $ mamba install "libblas=*=*netlib"  # necessary, we need to build against blas/lapack
    $ python dev.py build -C-Dblas=blas -C-Dlapack=lapack -C-Duse-g77-abi=true
    $ python dev.py test -s linalg  # run tests to verify
    $ mamba install "libblas=*=*mkl"
    $ python dev.py test -s linalg
    $ mamba install "libblas=*=*openblas"

### Linux distro package managers

A number of Linux distros use the `update-alternatives` mechanism to allow switching between different BLAS libraries via the system package manager. Note that this is a generic mechanism to manage "multiple implementations of the same library or tool" situations, rather than something specific to BLAS/LAPACK. It's similar to the conda-forge method above, in that it works for distro-provided `scipy` packages as well as for development builds against the reference `libblas`/`liblapack` interfaces.

The interface looks like:

    $ update-alternatives --config libblas.so.3
    $ update-alternatives --config liblapack.so.3

which will open a menu in the terminal with all available libraries to choose from. Because the interface and available options are likely to vary across distros, we link here to [the Debian documentation for BLAS/LAPACK switching](https://wiki.debian.org/DebianScience/LinearAlgebraLibraries) and avoid documenting in more detail how this works on other distros.

Note that Fedora is an exception; it is the only distro that ships FlexiBLAS (see the next section for more on that) and allows installing multiple BLAS libraries in parallel so true runtime switching without having to invoke the system package manager becomes possible. See [the Fedora docs on system-level and user-level selection](https://docs.fedoraproject.org/en-US/packaging-guidelines/BLAS_LAPACK/#_backend_selection) for more details.

### FlexiBLAS

[FlexiBLAS](https://github.com/mpimd-csc/flexiblas) provides runtime switching support (among other things) for all installed BLAS libraries that it can detect. There are a few limitations at the time of writing (March 2024), primarily: no support for Windows, no support for macOS Accelerate (the updated version, with `NEWLAPACK` symbols). If those limitations don't matter for you, FlexiBLAS can be a quite useful tool for efficient debugging, including for versions of OpenBLAS and other BLAS libraries that you have to build from source.

Once you have everything set up, the development experience is:

    $ python dev.py build -C-Dblas=flexiblas -C-Dlapack=flexiblas
    $ FLEXIBLAS=NETLIB python dev.py test -s linalg
    $ FLEXIBLAS=OpenBLAS python dev.py test -s linalg
    # Or export the environment variable to make the selection stick:
    $ export FLEXIBLAS=OpenBLAS

You can also provide a path to a built BLAS library (e.g., `FLEXIBLAS="libbhlas_atlas.so"`) - see the [usage docs in its README](https://github.com/mpimd-csc/flexiblas#selecting-the-backend-at-runtime) for more details.

Unless you're on Fedora, you will likely have to build FlexiBLAS from source, which is a bit of work. The good news is that this should work no matter if you're on Linux or macOS, and use Python via virtualenvs, conda environments, or in some other way. We'll go through how to build OpenBLAS and FlexiBLAS from source, to allow debugging whether something in the latest OpenBLAS version is different from Netlib BLAS/LAPACK (or MKL) or not.

The below should work in any environment where you can build SciPy itself; the only additional tool we need is CMake (install with, for example, `pip install cmake`).

Clone each repository:

    $ cd ..  # starting from the root of the local `scipy` repo
    $ mkdir flexiblas-setup && cd flexiblas-setup
    $ git clone https://github.com/OpenMathLib/OpenBLAS.git openblas
    $ git clone https://github.com/mpimd-csc/flexiblas.git
    $ mkdir built-libs  # our local prefix to install everything to

Build OpenBLAS:

    $ cd openblas
    $ mkdir build && cd build
    $ cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$PWD/../../built-libs
    $ cmake --build . -j
    $ cmake --install . --prefix $PWD/../../built-libs
    $ cd ../..

Build FlexiBLAS:

    $ cd flexiblas
    $ mkdir build && cd build
    $ # Note: this will also pick up the libraries in your system/env libdir
    $ cmake .. -DEXTRA="OpenBLAS" -DLAPACK_API_VERSION=3.9.0 \
        -DOpenBLAS_LIBRARY=$PWD/../../built-libs/lib/libopenblas.so \
        -DCMAKE_INSTALL_PREFIX=$PWD/../../built-libs
    $ cmake --build . -j
    $ cmake --install . --prefix $PWD/../../built-libs
    $ cd ../..

We're now ready to build SciPy against FlexiBLAS:

    $ export PKG_CONFIG_PATH=$PWD/flexiblas-setup/built-libs/lib/pkgconfig/
    $ cd scipy
    $ python dev.py build -C-Dblas=flexiblas -C-Dlapack=flexiblas
    ...
    Run-time dependency flexiblas found: YES 3.4.2

Now we can run the tests. Note that the `NETLIB` option is built without having to specify it; it's the default in FlexiBLAS and sources are included in its repository:

    $ FLEXIBLAS=OpenBLAS python dev.py test -s linalg
    $ FLEXIBLAS=NETLIB python dev.py test -s linalg
    $ python dev.py test -s linalg  # uses the default (NETLIB)

This backend switching can also be done inside a Python interpreter with `threadpoolctl` (see [its README](https://github.com/joblib/threadpoolctl#switching-the-flexiblas-backend) for details).

Other libraries available on the system can be inspected with:

    $ ./flexiblas-setup/built-libs/bin/flexiblas list

\> **Note** \> Using local builds of reference BLAS/LAPACK or BLIS is more difficult, because FlexiBLAS requires a single shared library which contains all needed symbols. It [may be feasible](https://github.com/mpimd-csc/flexiblas#setup-with-precompiled-reference-blas-and-lapack) to use a separate `libblas` and `liblapack` as the "system library", but this has proven to be more fragile and difficult to build (so this is YMMV). In case you do want to try:

> Build reference BLAS and LAPACK:
> 
> > $ git clone <https://github.com/Reference-LAPACK/lapack.git> $ cd lapack $ mkdir build && cd build $ cmake -DCBLAS=ON -DBUILD\_SHARED\_LIBS=OFF .. $ cmake --build . -j $ cmake --install . --prefix $PWD/../../built-libs
> 
> Then add the following two lines to the `cmake ..` configure command for FlexiBLAS:
> 
>     -DSYS_BLAS_LIBRARY=$PWD/../../built-libs/lib/libblas.a \
>     -DSYS_LAPACK_LIBRARY=$PWD/../../built-libs/lib/liblapack.a \

## Creating reproducers in C or Fortran

Our experience tells us that a large majority of bugs are inside SciPy rather than in OpenBLAS or another BLAS library. If the testing with different BLAS libraries tells us though that the problem is specific to a single BLAS library (maybe even a single version of that library with a regression), the next step is to produce a reproducer in C or Fortran; doing so is necessary for reporting the bug upstream, and makes it much easier for the BLAS library developers to address the problem.

To get from a Python reproducer which uses a `scipy` function with NumPy arrays as input to a C/Fortran reproducer, it is necessary to find the code path taken in SciPy and determine which exact BLAS or LAPACK function is called, and with what inputs (note: the answer may be contained in the `.pyf.src` f2py signature files; looking into the generated `_flapackmodule.c` in the build directory may be useful too). This can then be reproduced in C/Fortran by defining some integer/float variables and arrays (typically small arrays with hardcoded numbers are enough).

Argument lists of BLAS and LAPACK functions can be looked up in for example [the Netlib LAPACK docs](https://www.netlib.org/lapack/explore-html/) or the [Reference-LAPACK/lapack repository](https://github.com/Reference-LAPACK/lapack).

Below a reproducer is shown for an issue in reference LAPACK, which was reported as a SciPy issue in [scipy\#11577](https://github.com/scipy/scipy/issues/11577). We'll name the file `ggev_repro_gh_11577.c|f90`:

<div class="tab-set">

<div class="tab-item" data-sync="C">

C

<div class="literalinclude" data-language="C">

\_code\_examples/ggev\_repro\_gh\_11577.c

</div>

</div>

<div class="tab-item" data-sync="Fortran">

Fortran

<div class="literalinclude" data-language="fortran">

\_code\_examples/ggev\_repro\_gh\_11577.f90

</div>

</div>

</div>

Now we need to compile this reproducer locally and run it. If we're invoking a compiler directly, we need to add the needed compile and link flags by hand. The include path will depend on your local install, and the link flags will depend on which library you're testing. For example, to test against a local build of OpenBLAS:

<div class="tab-set">

<div class="tab-item" data-sync="C">

C

    $ gcc ggev_repro_gh_11577.c \
      -I$PWD/../flexiblas-setup/built-libs/include/ \
      -L$PWD/../flexiblas-setup/built-libs/lib -lopenblas
    $ ./a.out  # to run the reproducer

</div>

<div class="tab-item" data-sync="Fortran">

Fortran

    $ gfortran ggev_repro_gh_11577.f90 \
      -I/$PWD/../flexiblas-setup/built-libs/include/ \
      -L$PWD/../flexiblas-setup/built-libs/lib -lopenblas
    $ ./a.out  # to run the reproducer

</div>

</div>

For reference BLAS/LAPACK, the `-lopenblas` should be replaced with `-lblas -llapack`.

Note that the explicit paths are only needed for libraries in non-standard locations (like the ones we built in this guide). For building against a package manager-installed library for which the shared library and headers are on the normal compiler search path (e.g., in `/usr/lib` and `/usr/include`, or inside a conda env when using compilers from the same env), they can be left out:

<div class="tab-set">

<div class="tab-item" data-sync="C">

C

    $ gcc ggev_repro_gh_11577.c -lopenblas
    $ ./a.out  # to run the reproducer

</div>

<div class="tab-item" data-sync="Fortran">

Fortran

    $ gfortran ggev_repro_gh_11577.f90 -lopenblas
    $ ./a.out  # to run the reproducer

</div>

</div>

Alternatively (and probably a more robust way), use a small `meson.build` file to automate this and avoid the manual paths:

<div class="tab-set">

<div class="tab-item" data-sync="C">

C

<div class="literalinclude" data-language="meson">

\_code\_examples/meson.build.c

</div>

To then build the test and run it:

    $ export PKG_CONFIG_PATH=~/code/tmp/flexiblas-setup/built-libs/lib/pkgconfig/
    $ meson setup build
    $ ninja -C build
    $ ./build/repro_c  # output may vary
    
    info = 0
    Re(eigv) = 4.000000 , 8.000000 , inf , -inf , 
    Im(eigv = 0.000000 , 0.000000 , -nan , -nan ,

</div>

<div class="tab-item" data-sync="Fortran">

Fortran

<div class="literalinclude" data-language="meson">

\_code\_examples/meson.build.fortran

</div>

To then build the test and run it:

    $ export PKG_CONFIG_PATH=~/code/tmp/flexiblas-setup/built-libs/lib/pkgconfig/
    $ meson setup build
    $ ninja -C build
    $ ./build/repro_f90  # output may vary
    
    workspace query: lwork =           -1
    info =            0
    opt lwork =         156
    
    info =            0
    alphar =    1.0204501477442456        11.707793036240817        3.7423579363517347E-014  -1.1492523608519701E-014
    alphai =    0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    beta =   0.25511253693606051        1.4634741295300704        0.0000000000000000        0.0000000000000000     
    
    Re(eigv) =    4.0000000000000142        8.0000000000001741                       Infinity                 -Infinity
    Im(eigv) =    0.0000000000000000        0.0000000000000000                            NaN                       NaN

</div>

</div>

\> **Warning** \> When you have multiple versions/builds of the same BLAS library on your machine, it's easy to accidentally pick up the wrong one during the build (remember: `-lopenblas` only says "link against *some* `libopenblas.so`). If you're not sure, use `ldd` on the test executable you built to inspect which shared library it's linked against.

## Debugging linalg issues with `gdb`

When debugging linalg issues, it is sometimes useful to step through both Python and C code. You can use `pdb` for the former, and `gdb` for the latter.

First, prepare a small python reproducer, with a breakpoint. For example:

    $ cat chol.py
    import numpy as np
    from scipy import linalg
    n = 40
    rng = np.random.default_rng(1234)
    x = rng.uniform(size=n)
    a = x[:, None] @ x[None, :] + np.identity(n)
    
    breakpoint()      # note a breakpoint
    linalg.cholesky(a)

Then, you will need to run it under the `gdb` and add a C-level breakpoint at the LAPACK function. This way, your execution will stop twice: first on the Python breakpoint and then on the C breakpoint, and you will be able to step through and inspect values of both Python and C variables.

To find out the LAPACK name, read the python source of the SciPy function and use `nm` on the `.so` library to find out the exact name. For the Cholesky factorization above, the LAPACK function is `?potrf`, and the C name on Ubuntu linux is `dpotrf_` (it may be spelled with or without the trailing underscore, in uppper case or lower case, depending on the system).

Here is an example `gdb` session:

    $ gdb --args python chol.py
    ...
    (gdb) b dpotrf_     # this adds a C breakpoint (type "y" below)
    Function "dpotrf_" not defined.
    Make breakpoint pending on future shared library load? (y or [n]) y
    Breakpoint 1 (dpotrf_) pending.
    (gdb) run    # run the python script
    ...
    > /home/br/temp/chol/chol.py(12)<module>()
    -> linalg.cholesky(a)   # execution stopped at the python breakpoint
    (Pdb) p a.shape  # ... inspect the python state here
    (40, 40)
    (Pdb) c     # continue execution until the C breakpoint
    
    Thread 1 "python" hit Breakpoint 1, 0x00007ffff4c48820 in dpotrf_ ()
       from /home/br/miniforge/envs/scipy-dev/lib/python3.10/site-packages/numpy/core/../../../../libcblas.so.3
    (gdb) s     # step through the C function
    Single stepping until exit from function dpotrf_,
    which has no line number information.
    f2py_rout__flapack_dpotrf (capi_self=<optimized out>, capi_args=<optimized out>, 
        capi_keywds=<optimized out>, f2py_func=0x7ffff4c48820 <dpotrf_>)
        at scipy/linalg/_flapackmodule.c:63281
    ....
    (gdb) p lda    # inspect values of C variables
    $1 = 40
    
    # print out the C backtrace
    (gdb) bt
    #0  0x00007ffff3056b1e in f2py_rout.flapack_dpotrf ()
       from /path/to/site-packages/scipy/linalg/_flapack.cpython-311-x86_64-linux-gnu.so
    #1  0x0000555555734323 in _PyObject_MakeTpCall (tstate=0x555555ad0558 <_PyRuntime+166328>,
        callable=<fortran at remote 0x7ffff40ffc00>, args=<optimized out>, nargs=1,
        keywords=('lower', 'overwrite_a', 'clean'))
        at /usr/local/src/conda/python-3.11.8/Objects/call.c:214
    ...

Depending on your system, you may need to build SciPy with debug build type, and unset CFLAGS/CXXFLAGS environment variables. See the [NumPy debugging guide](https://numpy.org/devdocs/dev/development_environment.html#debugging) for more details.

---

development_workflow.md

---

# Development workflow

*Note: consider watching* [SciPy Development Workflow](https://youtu.be/HgU01gJbzMY) *before or after reading to see an example of fixing a bug and submitting a pull request.*

This guide assumes that you have created your own fork (copy) of the SciPy repository, cloned the repository on your own machine, and built SciPy from this source code. If you haven't, check the \[building-from-source\](\#building-from-source) pages appropriate to your system. Before getting started here, there are two other things you need to do just once before you start modifying SciPy.

1.  In a terminal, introduce yourself to Git:
    
        git config --global user.email you@yourdomain.com
        git config --global user.name "Your Name"
    
    This information credits you for your work, but note that it will become publicly available if you "push" your work to GitHub. See [Setting your commit email address in Git](https://help.github.com/en/articles/setting-your-commit-email-address-in-git) for more information.

2.  Navigate to the root directory of your local SciPy repository and enter:
    
        git remote add upstream https://github.com/scipy/scipy.git
    
    This associates the name `upstream` with the official SciPy repository located at <https://github.com/scipy/scipy.git>. Note that when you cloned your fork of the SciPy repository, Git already associated the name `origin` with your fork. The reason you need both of these ["remotes"](https://help.github.com/en/categories/managing-remotes) is that you will typically start with the latest version of SciPy from the official repository `upstream`, make changes, "push" your changes to your fork of the repository `origin`, and then submit a "pull request" asking SciPy to "pull" your changes from your fork into the official repository.

3.  Initialize git submodules:
    
        git submodule update --init
    
    This fetches and updates any submodules that SciPy needs (such as <span class="title-ref">Boost</span>).

## Basic workflow

In short:

1.  Start a new *feature branch* for each set of edits that you do. See \[below \<making-a-new-feature-branch\>\](\#below-\<making-a-new-feature-branch\>).
2.  Hack away\! See \[below \<editing-workflow\>\](\#below-\<editing-workflow\>).
3.  When finished:
      - *Contributors*: push your feature branch to your own Github repo, and \[create a pull request \<asking-for-merging\>\](\#create-a-pull-request-\<asking-for-merging\>).
      - *Core developers* If you want to push changes without further review, see the notes \[below \<pushing-to-main\>\](\#below-\<pushing-to-main\>).

This way of working helps to keep work well organized and the history as clear as possible.

<div class="seealso">

There are many online tutorials to help you [learn git](https://www.atlassian.com/git/tutorials/). For discussions of specific git workflows, see these discussions on [linux git workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html), and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).

</div>

### Making a new feature branch

First, navigate to the SciPy root directory in your terminal and fetch new commits from the `upstream` repository:

    git fetch upstream

Then, create a new branch based on the main branch of the upstream repository:

    git checkout -b my-new-feature upstream/main

Equivalently, you might want to keep the main branch of your own repository up to date and create a new branch based on that:

    git checkout main
    git rebase upstream/main
    git checkout -b my-new-feature

In order, these commands

1.  ensure that the `main` branch of your local repository is checked out,
2.  apply all the latest changes from the `upstream/main` (main SciPy repository main branch) to your local `main` branch, and
3.  create and check out a new branch (`-b`) based on your local `main` branch.

In any case, it's important that your feature branch include the latest changes from the upstream main to help avoid [merge conflicts](https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line) when it's time to submit a pull request.

It's also a good idea to build this branch and run tests before continuing. Assuming you've followed one of the \[building-from-source\](\#building-from-source) pages to set up your development environment, you'll need to activate your development environment and then run tests (note that the `dev.py test` command will perform a build automatically if needed):

    conda activate scipy-dev
    python dev.py test -v

### The editing workflow

#### Overview

    # hack hack
    git status # Optional
    git diff # Optional
    git add modified_file
    git commit
    # push the branch to your own Github repo
    git push origin my-new-feature

#### In more detail

1.  Make some changes. When you feel that you've made a complete, working set of related changes, move on to the next steps.

2.  Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)). You'll see a listing like this one:
    
        # On branch my-new-feature
        # Changed but not updated:
        #   (use "git add <file>..." to update what will be committed)
        #   (use "git checkout -- <file>..." to discard changes in working directory)
        #
        #  modified:   README
        #
        # Untracked files:
        #   (use "git add <file>..." to include in what will be committed)
        #
        #  INSTALL
        no changes added to commit (use "git add" and/or "git commit -a")

3.  Optional: Compare the changes with the previous version using with `git diff` ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)). This brings up a simple text browser interface that highlights the difference between your files and the previous version.

4.  Add any relevant modified or new files using `git add modified_file` (see [git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts the files into a staging area, which is a queue of files that will be added to your next commit. Only add files that have related, complete changes. Leave files with unfinished changes for later commits.

<!-- end list -->

  - \#. To commit the staged files into the local copy of your repo, do `git    commit`. At this point, a text editor will open up to allow you to write a  
    commit message. Read the \[commit message section\<writing-the-commit-message\>\](\#commit-message

  - \---section\<writing-the-commit-message\>) to be sure that you are writing a  
    properly formatted and sufficiently detailed commit message. After saving your message and closing the editor, your commit will be saved. For trivial commits, a short commit message can be passed in through the command line using the `-m` flag. For example, `git commit -am "ENH: Some message"`.
    
    In some cases, you will see this form of the commit command: `git commit -a`. The extra `-a` flag automatically commits all modified files and removes all deleted files. This can save you some typing of numerous `git add` commands; however, it can add unwanted changes to a commit if you're not careful. For more information, see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html) - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).

<!-- end list -->

1.  Push the changes to your forked repo on [github](https://github.com/scipy/scipy):
    
        git push origin my-new-feature
    
    For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).

\> **Note** \> Assuming you have followed the instructions in these pages, git will create a default link to your [github](https://github.com/scipy/scipy) repo called `origin`. In git \>= 1.7, you can ensure that the link to origin is permanently set by using the `--set-upstream` option:

    git push --set-upstream origin my-new-feature
    
    From now on, git_ will know that ``my-new-feature`` is related to the
    ``my-new-feature`` branch in your own github_ repo. Subsequent push calls
    are then simplified to the following::
    
    git push
    
    You have to use ``--set-upstream`` for each new branch that you create.

It may be the case that while you were working on your edits, new commits have been added to `upstream` that affect your work. In this case, follow the \[rebasing-on-main\](\#rebasing-on-main) instructions to apply those changes to your branch.

#### Writing the commit message

Commit messages should be clear and follow a few basic rules.

Example:

    MAINT/TST: fft: remove xp backend skips, test `fftfreq` `device`
    
    The first line of the commit message starts with a capitalized acronym
    (or multiple, options listed below) indicating what type of commit this is.
    Then a blank line, then more text if needed.
    References to code names should be enclosed in backticks.
    If changes are limited to certain submodules or functions, they should be
    included after the acronym(s) - backticks are not needed here.

Example:

    BUG:sparse.linalg.gmres: add early exit when `x0` already solves problem
    
    Lines shouldn't be longer than 72 characters. If the commit is related to an issue,
    indicate that with "See gh-3456", "Closes gh-3456", or similar,
    in the extended description.
    However, if you are pushing many commits to a PR, you should avoid including
    this in every commit message as it will clutter the linked issue.

Describing the motivation for a change, the nature of a bug for bug fixes or some details on what an enhancement does are also good to include in a commit message. Messages should be understandable without looking at the code changes. A commit message like `MAINT: fixed another one` is an example of what not to do; the reader has to go look for context elsewhere.

Standard acronyms to start the commit message with are:

    API: an (incompatible) API change
    BENCH: changes to the benchmark suite
    BLD: change related to building SciPy
    BUG: bug fix
    DEP: deprecate something, or remove a deprecated object
    DEV: development tool or utility
    DOC: documentation
    ENH: enhancement
    MAINT: maintenance commit (refactoring, typos, etc.)
    REV: revert an earlier commit
    STY: style fix (whitespace, PEP8)
    TST: addition or modification of tests
    REL: related to releasing SciPy

<div class="note">

<div class="title">

Note

</div>

You can add some markers to skip part of the continuous integration. See \[continuous-integration\](\#continuous-integration).

</div>

#### Asking for your changes to be merged with the main repo

When you feel your work is finished, you can create a pull request (PR). Github has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).

If your changes involve modifications to the API or addition/modification of a function, you should initiate a code review. This involves sending an email to the [SciPy forum](https://discuss.scientific-python.org/c/contributor/scipy) with a link to your PR along with a description of and a motivation for your changes.

#### Checklist before submitting a PR

  - Did you check that the code can be distributed under a BSD license? See \[license-considerations\](\#license-considerations).
  - Are there unit tests with good code coverage? See [NumPy/SciPy Testing Guidelines](https://docs.scipy.org/doc/numpy/reference/testing.html).
  - Do all unit tests pass locally? See \[the-dev-py-interface\](\#the-dev-py-interface).
  - Do all public function have docstrings including examples? See the [numpydoc docstring guide](https://numpydoc.readthedocs.io/en/latest/format.html).
  - Does the documentation render correctly? See \[rendering-documentation\](\#rendering-documentation).
  - Is the code style correct? See \[pep8-scipy\](\#pep8-scipy).
  - Are there benchmarks? See \[benchmarking-with-asv\](\#benchmarking-with-asv).
  - Is the commit message \[formatted correctly \<numpy:writing-the-commit-message\>\](\#formatted-correctly-\<numpy:writing-the-commit-message\>)?
  - Is the docstring of the new functionality tagged with `.. versionadded:: X.Y.Z` (where `X.Y.Z` is the version number of the next release? See the `updating`, `workers`, and `constraints` documentation of `differential_evolution`\_, for example.
  - In case of larger additions, is there a tutorial or more extensive module-level description? Tutorial files are in `doc/source/tutorial`.
  - If new files are added, are they integrated correctly via `meson.build`? See \[compiled-code\](\#compiled-code) for more information.

---

devpy_test.md

---

# Running SciPy Tests Locally

Basic test writing and execution from within the Python interpreter is documented in the \[NumPy/SciPy testing guidelines \<numpy:reference/testing\>\](NumPy/SciPy testing guidelines \<numpy:reference/testing\>.md). This page includes information about running tests from the command line using SciPy's `dev.py` command line tool. *Note: Before beginning, ensure that* `pytest`\_ *is installed.*

\> **Note** \> The `dev.py` interface is self-documenting, in the sense that everything on this page and more (including usage examples for each command) can be accessed with `python dev.py --help` and for individual commands like `python dev.py <command-name> --help`. In this case, you can check `python dev.py test --help`.

To run all tests, navigate to the root SciPy directory at the command line and execute

    python dev.py test

This builds SciPy (or updates an existing build) and runs the tests.

To run tests on a particular submodule, such as `optimize`, use the `--submodule` option:

    python dev.py test -s optimize

To run a particular test module, use the Pytest syntax of `--test` (or `-t`):

    python dev.py test -t scipy.<module>.tests.<test_file>

Example for `scipy/optimize/tests/test_linprog.py`\_ file tests, run:

    python dev.py test -t scipy.optimize.tests.test_linprog

To run a test class:

    python dev.py test -t scipy.<module>.tests.<test_file>::<TestClass>

Example for `TestLinprogRSCommon` class from `test_linprog.py`:

    python dev.py test -t scipy.optimize.tests.test_linprog::TestLinprogRSCommon

To run a particular test:

    python dev.py test -t scipy.<module>.tests.<test_file>::<test_name>

Example for `test_unknown_solvers_and_options` from `test_linprog.py`:

    python dev.py test -t scipy.optimize.tests.test_linprog::test_unknown_solvers_and_options

For tests within a class, you need to specify the class name and the test name:

    python dev.py test -t scipy.<module>.tests.<test_file>::<TestClass>::<test_name>

Example:

    python dev.py test -t scipy.optimize.tests.test_linprog::TestLinprogRSCommon::test_nontrivial_problem_with_guess

Other useful options include:

  - `-v` or `--verbose`, which activates the verbose option for more detailed output.
  - `-b` or `--array-api-backend` *backend* to include alternative array backends in array-api-compatible tests. See \[dev-arrayapi\](\#dev-arrayapi) for details.
  - `--coverage` to generate a test coverage report in `scipy/build/coverage/index.html`. *Note:* `pytest-cov`\_ *must be installed.*
  - `-n` or `--no-build` to prevent SciPy from updating the build before testing
  - `-j` or `--parallel` *n* to engage *n* cores when building SciPy; e.g. `python dev.py test -j 4` engages four cores. As of [\#10172](https://github.com/scipy/scipy/pull/10172) this also runs the tests on four cores if `pytest-xdist`\_ is installed.
  - `-m full` or `--mode full` to run the "full" test suite, including tests marked `slow` (e.g. with `@pytest.mark.slow`). Note that this does not *run* tests marked `xslow`; see Tips below.
  - `--` to send remaining command line arguments to `pytest` instead of `dev.py test`. For instance, while `-n` sent to `pytest.py` activates the `--no-build` option, `-n` sent to `pytest` runs the tests on multiple cores; e.g. `python dev.py test -- -n 4` runs tests using four cores. *Note:* `pytest-xdist`\_ *must be installed for testing on multiple cores.* Common command line arguments for `pytest` include:
      - `--durations=m` to display durations of the slowest `m` tests. Use `--durations=0` together with `--durations-min=x` to display durations of all tests with durations that exceed `x` seconds.
      - `--fail-slow=x` to cause test to fail if they exceed `x` seconds. (*Note*: `pytest-fail-slow`\_ must be installed.)
      - `--timeout=x` to halt all test execution if any test time exceeds `x` seconds. (*Note*: `pytest-timeout`\_ must be installed.)

For much more information about `pytest`, see the `pytest` [documentation](https://docs.pytest.org/en/latest/usage.html).

## Tips:

If you built SciPy from source but are having trouble running tests after a change to the codebase, try deleting the `scipy/build` directory. This forces `dev.py` to completely rebuild SciPy before performing tests.

There is an additional level of very slow tests (several minutes), which are disabled even when calling `python dev.py test -m full`. They can be enabled by setting the environment variable `SCIPY_XSLOW=1` before running the test suite.

By default, tests that use `Hypothesis` run with the `deterministic` profile defined in `scipy/scipy/conftest.py`. This profile includes the Hypothesis setting `derandomize=True` so the same examples are used until Hypothesis, Python, or the test function are updated. To better use Hypothesis' abilities to find counterexamples, select the `nondeterministic` profile by setting the environment variable `SCIPY_HYPOTHESIS_PROFILE=nondeterministic` before running the test suite. The number of examples that are run can be configured by editing the selected configuration, e.g. adding `max_examples=100_000`.

---

pep8.md

---

# PEP8 and SciPy

All SciPy Python code should adhere to [PEP8](https://www.python.org/dev/peps/pep-0008/) style guidelines, with the exception that line length should be limited to 88 characters rather than 79. It's so important that some continuous integration tests on GitHub will fail due to certain PEP8 violations. Here are a few tips for ensuring PEP8 compliance before pushing your code:

  - Many integrated development environments (IDEs) have options that automatically check for PEP8 compliance. In Spyder, for example, [enable Real-time code style analysis](https://stackoverflow.com/questions/51463223/how-to-use-pep8-module-using-spyder) in Tools Preferences Editor Code Introspection/Analysis and "Automatically remove trailing spaces when saving files" in in Tools Preferences Editor Advanced Settings. This can help you fix PEP8 issues as you write your code.

  - Note, however, that SciPy's linting configuration may not match that of your IDE exactly. See below on how to run the official checks.

  - It is recommended to leave existing style issues alone unless they exist in lines of code you are already modifying. This practice ensures that the codebase is gradually cleaned up without dedicating precious review time to style-only cleanups.

  - Before sending a Pull Request, run the linter on changes made in your feature branch. The checks will also be made during continuous integration, but it's quicker to catch them early.
    
    The easiest way to do so is to install our pre-commit hook (once):
    
        cp tools/pre-commit-hook.py .git/hooks/pre-commit
    
    This will run linting checks before each commit is made.
    
    Alternatively, you can run the check manually from the SciPy root directory:
    
        python dev.py lint
    
    You can also run the linter on specific files, using the `--files` option:
    
        python tools/lint.py --files scipy/odr/models.py scipy/ndimage

  - If you have existing code with a lot of PEP8 issues, consider using `autopep8`\_ to automatically fix them before incorporating the code into SciPy.

The line length limit of 88 characters was chosen to match the defaults of popular tools like [ruff](https://pypi.org/project/ruff/) and [black](https://pypi.org/project/black/). This strikes a balance between producing shorter files and reducing linter errors on the one hand, and maintaining reasonably short lines and the ability to view files side-by-side on the other.

\<\!-- Failed to include \<isonum.txt\> --\>

---

public_cython_api.md

---

# Public Cython APIs

As of Apr 2020, the following modules in SciPy expose functionality via a public `cdef` Cython API declarations:

  - `scipy.linalg.cython_blas`
  - `scipy.linalg.cython_lapack`
  - `scipy.optimize.cython_optimize`
  - `scipy.special.cython_special`

This uses [Cython's declaration sharing features](https://cython.readthedocs.io/en/latest/src/userguide/sharing_declarations.html), where shared `cdef` items are declared in `*.pxd` files that are distributed together with the corresponding DLL/SO files in binary SciPy installations.

## Application Binary Interface

Using these features in SciPy however requires SciPy contributors to take additional care with regard to maintaining Application Binary Interface (ABI) stability. This is similar to developing libraries in C, and different from how backward compatibility works in pure Python.

The main difference to Python originates from the fact that the declarations in the header `.pxd` files are used when code written by users is *compiled*, but they must also match with what is available in SciPy when the user code is *imported*.

User code may be compiled with one version of SciPy, and the compiled binary (which uses the binary interface declared in the `.pxd` files) can be used with a different SciPy version installed on the system. If the interfaces are not compatible, either an exception is raised or runtime memory corruption and crash ensue.

At import time, Cython checks that signatures of functions in the installed SciPy SO/DLL file match the one in the `.pxd` file used by the user during compilation, and raises a Python exception if there is a mismatch. If the SciPy code is structured correctly (see below), this check is performed only for functions that are actually imported in the user code.

We rely on this feature to provide a runtime safety check, which makes it easier for the users to detect incompatible SciPy versions via Python exceptions, instead of hard-to-trace runtime crashes.

## ABI stability aim

SciPy aims to maintain ABI stability in Cython code, in the following sense:

> Binaries produced by compiling user source with one version of SciPy, are compatible with any other SciPy version with which the source code can be compiled.
> 
> Trying to use an incompatible version of SciPy at runtime will result in a Python exception at user module import time.
> 
> Trying to use an incompatible version of SciPy at compile time will result in a Cython error.

This means that users can use any compatible version of SciPy to compile binaries without having to pay attention to ABI, i.e.,

> ABI compatibility = API compatibility

Cython API backward/forward compatibility will be handled with a similar deprecation/removal policy as for the Python API, see \[deprecations\](\#deprecations).

## Implementing ABI stability in SciPy

The following rules in development of Cython APIs in SciPy are necessary to maintain the ABI stability aim above:

  - Adding new `cdef` declarations (functions, structs, types, etc.) **is allowed**.

  - Removing `cdef` declarations **is allowed**, but **should follow** general deprecation/removal policy.

  - `cdef` declarations of functions **may be changed**.
    
    However, changes result in a backward incompatible API change which breaks any code using the changed signature, and **should follow** general deprecation/removal policy.

  - `cdef` declarations of anything else (e.g. `struct`, `enum`, and types) are **final**. Once a declaration is exposed in the public Cython API in a released SciPy version, **it must not be changed**.
    
    If changes are necessary, they need to be carried out by adding new declarations with different names, and removing old ones.

  - `cdef` classes are **not allowed** in the public APIs (TBD: backward compatibility of cdef classes needs more research, but must not be allowed when we are not sure)

  - For each public API module (as in `scipy.linalg.cython_blas`), use a single interface `.pxd` declaration file.
    
    The public interface declaration file **should not** contain `cimport` statements. If it does, Cython's signature check will check all of the cimported functions, not only the ones that are used by user code, so that changing one of them breaks the whole API.

  - If data structures are necessary, **prefer opaque structs** in the public API. The interface declarations should not contain any declarations of struct members. Allocation, freeing, and attribute access of data structures should be done with functions.

## Deprecating public Cython APIs

To deprecate a public Cython API function, for example:

    # scipy/something/foo.pxd
    cdef public int somefunc()
    
    # scipy/something/foo.pyx
    cdef public int somefunc():
        return 42

you can add use the `scipy._lib.deprecation.deprecate_cython_api` function to do the deprecations at the end of the corresponding `.pyx` file:

    # scipy/something/foo.pyx
    cdef public int somefunc():
        return 42
    
    from scipy._lib.deprecation import deprecate_cython_api
    import scipy.something.foo as mod
    deprecate_cython_api(mod, "somefunc", new_name="scipy.something.newfunc",
                         message="Deprecated in Scipy 1.5.0")
    del deprecate_cython_api, mod

After this, Cython modules that `cimport somefunc`, will emit a <span class="title-ref">DeprecationWarning</span> at import time.

There is no way to deprecate Cython data structures and types. They can be however removed after all functions using them in the API are removed, having gone through the deprecation cycle.

Whole Cython modules can be deprecated similarly as Python modules, by emitting a <span class="title-ref">DeprecationWarning</span> on the top-level.

---

rendering_documentation.md

---

# Contributing to the SciPy documentation

We're eager to hear about and fix doc defects. But to attack the biggest problems we end up having to defer or overlook some bug reports. Here are the best defects to go after.

Top priority goes to **technical inaccuracies** – a docstring missing a parameter, a faulty description of a function/parameter/method, and so on. Other “structural” defects like broken links also get priority. All these fixes are easy to confirm and put in place. You can \[submit a pull request (PR)\<editing-workflow\>\](\#submit-a-pull-request-(pr)\<editing-workflow\>) with the fix, if you know how to do that; otherwise please [open an issue](https://github.com/scipy/scipy/issues/new/choose).

**Typos and misspellings** fall on a lower rung; we welcome hearing about them but may not be able to fix them promptly. These too can be handled as pull requests or issues.

Obvious **wording** mistakes (like leaving out a “not”) fall into the typo category, but other rewordings – even for grammar – require a judgment call, which raises the bar. One can imagine cases where it is not clear that a "fix" should be made, e.g.:

  - Attempting to "fix" all the uses (or lack thereof) of the Oxford comma.
  - Cases where the correctness of common usage is evolving, e.g. "comprised of"

The easiest fixes to accept are those where the original version is clearly and unambiguously wrong; changes that require subtle editorial judgement are probably best avoided. (But note that this is not about updating documentation to fix confusing statements or otherwise deal with documentation problems reported by users.)

\> **Note** \> As a general guideline, try to accumulate small documentation changes (such as typos) instead of sending them one by one. Whenever possible, also make sure to use the correct commands to \[skip CI checks \<skip-ci\>\](\#skip-ci-checks-\<skip-ci\>) on documentation changes.

Some functions/objects defined in C or Fortran extension modules have their docstrings defined separately from the actual code. Make sure to do a search for the function docstring you are looking for using either <span class="title-ref">grep</span> or other similar tools.

## Rendering documentation locally with Sphinx

SciPy docstrings are rendered to HTML using [Sphinx](https://www.sphinx-doc.org/en/master/) and the [PyData Sphinx theme](https://pydata-sphinx-theme.readthedocs.io/en/latest/). Writing docstrings is covered in the \[numpy:howto-document\](\#numpy:howto-document); this document explains how to check that docstrings render properly.

*For a video walkthrough, please see* [Rendering SciPy Documentation with Sphinx](https://youtu.be/kGSYU39EhJQ) *.*

To render the documentation on your own machine:

0.  Ensure that you have a working SciPy build (see \[building-from-source\](\#building-from-source)).
1.  Then run `python dev.py doc` to build the documentation. This can take a while the first time, but subsequent documentation builds are typically much faster.
2.  View the documentation in `doc/build/html/`. You can start with `index.html` and browse, or you can jump straight to the file you’re interested in.

**Interactive Examples**

Examples within docstrings can be made interactive using `jupyterlite-sphinx`. The buttons for converting examples sections into embedded interactive notebooks are hidden by default on clean docs builds. To enable interactive examples after building the documentation locally, edit the `ignore_patterns` list in the runtime configuration file `try_examples.json` within `scipy/doc/build/html/`. The initial version of this file in a clean documentation build is

`` `json    {        "global_min_height": "400px",        "ignore_patterns": [".*"]    }  The buttons that turn docstring examples into embedded notebooks will be hidden ``<span class="title-ref"> for all url paths matching the JavaScript Regex patterns in the </span><span class="title-ref">ignore\_patterns</span><span class="title-ref"> list. </span><span class="title-ref">\[".\*"\]</span><span class="title-ref"> includes a pattern which matches all url paths. Removing this pattern from the list will enable interactivity for all examples. See the documentation for the </span><span class="title-ref">jupyterlite-sphinx</span><span class="title-ref"> \`TryExamples directive \<https://jupyterlite-sphinx.readthedocs.io/en/latest/directives/try\_examples.html\#\></span>\_ for more information.

\> **Note** \> - Changes to certain documents do not take effect when Sphinx documentation is rebuilt. In this case, you can build from scratch by deleting the directories `scipy/doc/build` and `source/reference/generated`, then building again.

>   - In case the SciPy version found by the above command is different from that of the latest commit in the repo, you will see a message like:
>     
>         installed scipy 5fd20ec1aa != current repo git version '35fd20ec1a'
>     
>     This indicates that you're likely picking up the wrong SciPy install, check with `python -c "import scipy; print(scipy.__file__)"`.
> 
>   - The interactive examples are not available in CI builds. To see the interactive examples locally in a JupyterLab environment, you can use
>     
>       - \`\`\`bash  
>         python -m http.server --directory doc/build/html
>     
>     The documentation pages should then be available at <span class="title-ref">http://localhost:8000/</span>.

<div id="rendering-documentation-cloud">

Checking Documentation on the Cloud `` ` -----------------------------------  Once a PR is opened, you can check that documentation renders correctly on the cloud.  #. Log in to `GitHub`_. #. Log in `CircleCI`_ using your GitHub account. #. Back in GitHub, at the bottom of the PR, select “Show all Checks”. #. Next to “Check the rendered docs here!”, select “Details”.  .. _adding-notebooks:  Adding or editing tutorials as Jupyter notebooks ------------------------------------------------  Under the ``doc/source/`folder of the SciPy tree you can find a few documents written in MyST-NB_ format. These files are executable, meaning that their content is executed when the SciPy documentation is built (locally or on CI) and any outputs generated by the execution are rendered in the final HTML files.  If you have a document written in Jupyter notebook format (an`.ipynb`file) and would like to submit it as part of the SciPy documentation, there are two options: you can convert it into a MyST Markdown file, and work with a`.md`file only, or you can pair your`.ipynb`file with a`.md`file and work with both. Note that`.ipynb``files *should not* be submitted to the SciPy documentation.  For more details, please consult the `MyST-NB documentation <https://myst-nb.readthedocs.io/en/latest/authoring/text-notebooks.html>`__. You can also consult the `Pairing tutorial on NumPy Tutorials <https://numpy.org/numpy-tutorials/content/pairing.html>`__ for more information on MyST-NB, Jupytext and pairing notebooks.  How to convert a``.ipynb`file to executable`.md`file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  If you don't need to keep the`.ipynb`file, and want to work with MyST Markdown only, follow the steps below.  1. Install the jupytext_ tool, using`pip install jupytext`or`conda install jupytext -c conda-forge`2. Clear all outputs from your`.ipynb`file 3. On your terminal, run`jupytext notebook.ipynb --to myst`, where`notebook.ipynb`should be replaced with the file you want to convert.    Now, the resulting`.md`file (in MyST Markdown format) should contain a preamble similar to the one below, indicating that this is an executable file:  ::     ---    jupytext:       text_representation:          extension: .md          format_name: myst          format_version: 0.13          jupytext_version: 1.14.0    kernelspec:       display_name: Python 3 (ipykernel)       language: python       name: python3    ---  You don't need to edit this preamble, as it is autogenerated.  Opening MyST Markdown files in the Jupyter Notebook application ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  If you have the`jupytext`tool installed, you can open MyST Markdown`.md`files in the Jupyter Notebook application and execute them, just as you would with a`.ipynb``file.    .. _docs-guidelines:  Documentation Guidelines ------------------------  Use "must", not "should" ~~~~~~~~~~~~~~~~~~~~~~~~ When specifying a required condition on the input parameters, the word "must" is preferable to "should".  For many English speakers, "must" implies a stronger constraint than "should",  e.g. "I must have oxygen to live" versus "I should exercise more".      Yes::              Parameters             ----------             x : float                 `x` must be nonnegative.      No::              Parameters             ----------             x : float                 `x` should be nonnegative.   Use of the 'versionadded' markup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * For a new function, the 'versionadded' markup goes in the "Notes" section,   *not* in the description at the beginning of the docstring. * For a new argument added to an existing function,  the 'versionadded' markup   is placed at the end of the description of the argument in the "Parameters"   section.   Citing wikipedia articles in the "References" section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ It is acceptable to use wikipedia articles as references. When creating the citation for the reference, include the article title, the name "Wikipedia" (similar to how one gives a journal title), and the URL.      Yes::          .. [1] "Zeta Distribution", Wikipedia,                https://en.wikipedia.org/wiki/Zeta_distribution      No::          .. [1] https://en.wikipedia.org/wiki/Zeta_distribution   DOIs in references ~~~~~~~~~~~~~~~~~~ The use of DOIs in references is strongly recommended. There is special Sphinx syntax for DOIs:``:doi:``. For example::      .. [2] D. Fishkind, S. Adali, H. Patsolic, L. Meng, D. Singh, V. Lyzinski,            C. Priebe, "Seeded graph matching", Pattern Recognit. 87 (2019):            203-215, :doi:`10.1016/j.patcog.2018.09.014`  (arXiv articles also have special markup available:``:arxiv:``.)   Bulleted lists ~~~~~~~~~~~~~~ This is not so much a guideline as it is a reminder of the Sphinx markup for bulleted lists.  The incorrect use of indentation is common enough that it is worthwhile mentioning it here.  When creating a bulleted list:  * Don't end the preceding line with `::`. * Don't indent the bullets. * Include a blank line before and after the list.  Some examples:      Yes::          Some text that precedes this interesting list:          * The first item in the list.         * The second item in the list.         * You get the idea.          Some text that follows the list.      No::          Some text that precedes this interesting list:            * The first item in the list.           * The second item in the list.           * You get the idea.          Some text that follows the list.      No::          Some text that precedes this interesting list:         * The first item in the list.         * The second item in the list.         * You get the idea.         Some text that follows the list.   Self-contained examples ~~~~~~~~~~~~~~~~~~~~~~~ Each "Example" section (both in docstrings and general documentation) must be self-contained. This means that all imports must be explicit, the data used must be defined, and the code should "just work" when copy-pasted into a fresh Python interpreter.      Yes::          >>> import numpy as np         >>> rng = np.random.default_rng()      No::          >>> rng = np.random.default_rng()  What is possible (and recommended) is to intersperse blocks of code with explanations. Blank lines must separate each code block from the explanatory text.      Yes::          Some initial text          >>> import numpy as np         >>> rng = np.random.default_rng()          This is some explanation          >>> rng.random(10)   Examples and randomness ~~~~~~~~~~~~~~~~~~~~~~~ In the continuous integration (CI) suite, examples are executed and the output is compared against the provided reference. The main goal is to ensure that the *example* is correct; a failure warns us that the example may need to be adjusted (e.g. because the API has changed since it was written). Doctests are not meant to be used as unit tests of underlying implementation.  In case a random number generator is needed, `np.random.Generator` must be used. The canonical way to create a NumPy``Generator``is to use `np.random.default_rng`.      Yes::          >>> import numpy as np         >>> rng = np.random.default_rng()         >>> sample = rng.random(10)      Yes::          >>> import numpy as np         >>> rng = np.random.default_rng(102524723947864966825913730119128190984)         >>> sample = rng.random(10)      No::          >>> import numpy as np         >>> sample = np.random.random(10)  Seeding the generator object is optional. If a seed is used, avoid common numbers and instead generate a seed with``np.random.SeedSequence().entropy`. If no seed is provided, the default value`1638083107694713882823079058616272161`is used when doctests are executed. In either case, the rendered documentation will not show the seed. The intent is to discourage users from copy/pasting seeds in their code and instead make an explicit decision about the use of a seed in their program. The consequence is that users cannot reproduce the results of the example exactly, so examples using random data should not refer to precise numerical values based on random data or rely on them to make their point.  Legacy directive ~~~~~~~~~~~~~~~~  If a function, module or API is in *legacy* mode, meaning that it is kept around for backwards compatibility reasons, but is not recommended to use in new code, you can use the`.. legacy::\`\` directive.

</div>

By default, if used with no arguments, the legacy directive will generate the following output:

<div class="legacy">

</div>

We strongly recommend that you also add a custom message, such as a new API to replace the old one. This message will be appended to the default message:

    .. legacy::
    
       New code should use :mod:`scipy.fft`.

will create the following output:

<div class="legacy">

New code should use `scipy.fft`.

</div>

Finally, if you want to mention a function, method (or any custom object) instead of a *submodule*, you can use an optional argument:

    .. legacy:: function

This will create the following output:

<div class="legacy">

function

</div>

\---

---

reviewing_prs.md

---

# Reviewing Pull Requests

## Using workflow features

When reviewing pull requests, please use workflow tracking features on Github as appropriate:

1.  After you have finished reviewing, and want to ask for the submitter to make the changes:
      - Change your review status to "Changes requested".
        
        This can be done on Github, PR page, `Files changed` tab, `Review changes` (button on top right).
    
      - Alternatively: add the `needs-work` label.
        
        This can be done on the PR page, `Labels` menu on the right.
2.  When you re-review the same pull request again, and want to request more changes:
      - Do the "Changes requested" thing again, even if the previous status was also 'Changes requested'.
      - Alternatively: Remove the existing `needs-work` label, and then re-add the label back again. (Github will add a notice on the page that you did so.)
3.  If you're happy about the current status:
      - Mark the pull request as Approved (same way as Changes requested).
      - Alternatively: remove the `needs-work` label.
      - Alternatively (for core developers): merge the pull request, if you think it is ready to be merged.

This allows automatically tracking which PRs are in need of attention.

Some of the information is also visible on Github directly, although (as of Aug 2019) Github does not show which pull requests have been updated since the last review.

## Code from pull request

When you review a pull request created by someone else, it's helpful to have a copy of their code on your own machine so that you can play with it locally.

One way to install [the GitHub CLI](https://cli.github.com/), then navigate to the SciPy root directory in the terminal and enter:

    gh pr checkout PULL_REQUEST_ID

where `PULL_REQUEST_ID` is the five digit number corresponding with the pull request (e.g. `10286` for [PR \#10286](https://github.com/scipy/scipy/pull/10286)). This immediately checks out the pull request into a branch with a name matching the one the PR author used.

Assuming you set up your development environment according to \[building-from-source\](\#building-from-source), you can now activate your development environment:

    conda activate scipy-dev

build the code and test it:

    python dev.py test -v

and if you `import` SciPy from within IPython (start it with `python dev.py ipython`), you'll be importing the author's modified version of SciPy.

If you want to collaborate with the author on their PR, you might instead want to set up a new remote to the author's fork of SciPy:

    git remote add REMOTE_NAME https://github.com/AUTHOR/scipy.git

where `AUTHOR` is the author's GitHub user name and `REMOTE_NAME` is whatever name you want to use to refer to this author's repository.

From there, you can view the author's branches:

    git remote show REMOTE_NAME

and create your own branch based on one of them:

    git checkout --track REMOTE_NAME/BRANCH_NAME

where `BRANCH_NAME` is the name of the branch you want to start from. This creates a copy of this branch (with the same name) in your local repository. If you make changes to this branch and push to your GitHub repository (`origin`), you can then create a pull request to merge your changes with the author's repository.

---

using_act.md

---

# <span class="title-ref">act</span> for running GitHub Actions locally

`act` is a tool offered by Nektos which provides a handy way to run GitHub Actions locally using Docker. `act` provides a quick way to validate your changes on the CI locally, without committing/pushing your changes to the workflows to trigger and validate the same. It leads to fast feedback and its compatibility as a local task runner, to validate all our CI jobs makes it a handy tool.

`act` can be set up locally with Homebrew, Chocolatey or even a simple BASH script. To set it up using the BASH script, just push the following command on your terminal:

    curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash

Using Homebrew you can set it up via: `brew install act`.

The next step is to define the custom image that we can use to run our actions locally. `act` provides a micro, medium and larger Docker image for Ubuntu GitHub runner. `act` does not support Windows and macOS images yet.

While running `act` for the first time, we can define the image that we would like to utilize for our local CI runs. The configuration is saved inside the `~/.actrc` file.

In a GitHub repository, while running `act` for the first time, it will find the `./.github/workflows` and all the workflows present. To checkout the jobs listed as part of the GitHub Actions CI, push the following command:

    act -l

It will list all the jobs and you can pick up the particular jobs you wish to run. If you are looking to run a particular job, push in the following command:

    act -j <JOB_NAME>

To run the job in dry run, push in the following command:

    act -n

To run the job with verbose logging, push in the following command:

    act -v

To reuse the containers in `act` to maintain state, push in the following command:

    act -j <JOB_NAME> --bind --reuse

It is recommended to comment out GitHub specific events like `github.repository` or `github.event.head_commit.message`. If you are using environment variables, in your action, it is recommended to have a `my.secrets` file and supply these environment variables to the `act` by pushing the following command:

    act --secret-file my.secrets

If the environment variables are supplied via `.env` file, use the following command:

    act --env-file my.env

---

index.md

---

# SciPy Core Developer Guide

## Decision making process

SciPy has a formal governance model, documented in \[governance\](\#governance). The section below documents in an informal way what happens in practice for decision making about code and commit rights. The formal governance model is leading, the below is only provided for context.

### Code

Any significant decisions on adding (or not adding) new features, breaking backwards compatibility or making other significant changes to the codebase should be made on the scipy-dev forum after a discussion (preferably with full consensus).

Any non-trivial change (where trivial means a typo, or a one-liner maintenance commit) has to go in through a pull request (PR). It has to be reviewed by another developer. In case review doesn't happen quickly enough and it is important that the PR is merged quickly, the submitter of the PR should send a message to the forum saying they intend to merge that PR without review at time X for reason Y unless someone reviews it before then.

Changes and new additions should be tested. Untested code is broken code.

### Commit rights

Who gets commit rights is decided by the SciPy Steering Council; changes in commit rights will then be announced on the scipy-dev forum.

## Deciding on new features

The general decision rule to accept a proposed new feature has so far been conditional on:

1.  The method is applicable in many fields and "generally agreed" to be useful,
2.  It fits the topic of the submodule, and does not require extensive support frameworks to operate,
3.  The implementation looks sound and unlikely to need much tweaking in the future (e.g., limited expected maintenance burden),
4.  Someone wants to contribute it, and
5.  Someone wants to review it.

The last criterion is often a sticking point for proposed features. Code cannot be merged until it has been thoroughly reviewed, and there is always a backlog of maintenance tasks that compete for reviewers' time. Ideally, contributors should line up a reviewer with suitable domain expertise before beginning work.

Although it's difficult to give hard rules on what "generally useful and generally agreed to work" means, it may help to weigh the following against each other:

  - Is the method used/useful in different domains in practice? How much domain-specific background knowledge is needed to use it properly?
  - Consider the code already in the module. Is what you are adding an omission? Does it solve a problem that you'd expect the module be able to solve? Does it supplement an existing feature in a significant way?
  - Consider the equivalence class of similar methods / features usually expected. Among them, what would in principle be the minimal set so that there's not a glaring omission in the offered features remaining? How much stuff would that be? Does including a representative one of them cover most use cases? Would it in principle sound reasonable to include everything from the minimal set in the module?
  - Is what you are adding something that is well understood in the literature? If not, how sure are you that it will turn out well? Does the method perform well compared to other similar ones?
  - Note that the twice-a-year release cycle and backward-compatibility policy makes correcting things later on more difficult.

The scopes of the submodules also vary, so it's probably best to consider each as if it's a separate project - "numerical evaluation of special functions" is relatively well-defined, but "commonly needed optimization algorithms" less so.

## Development on GitHub

SciPy development largely takes place on GitHub; this section describes the expected way of working for issues, pull requests and managing the main `scipy` repository.

### Labels and Milestones

Each issue and pull request normally gets at least two labels: one for the topic or component (`scipy.stats`, `Documentation`, etc.), and one for the nature of the issue or pull request (`enhancement`, `maintenance`, `defect`, etc.). Other labels that may be added depending on the situation:

  - `good-first-issue`: for issues suitable to be tackled by new contributors.
  - `needs-work`: for pull requests that have review comments that haven't been addressed.
  - `needs-decision`: for issues or pull requests that need a decision.
  - `needs-champion`: for pull requests that were not finished by the original author, but are worth resurrecting.
  - `backport-candidate`: bugfixes that should be considered for backporting by the release manager.

A milestone is created for each version number for which a release is planned. Issues that need to be addressed and pull requests that need to be merged for a particular release should be set to the corresponding milestone. After a pull request is merged, its milestone (and that of the issue it closes) should be set to the next upcoming release - this makes it easy to get an overview of changes and to add a complete list of those to the release notes.

### Pull request review workflow

When reviewing pull requests, please make use of pull request workflow features, see \[pull-request-workflow-features\](\#pull-request-workflow-features).

### Dealing with pull requests

  - When merging contributions, a committer is responsible for ensuring that those meet the requirements outlined in \[Contributing to SciPy \<hacking\>\](\#contributing-to-scipy-\<hacking\>). Also check that new features and backwards compatibility breaks were discussed on the scipy-dev forum.
  - New code goes in via a pull request (PR).
  - Merge new code with the green button. In case of merge conflicts, ask the PR submitter to rebase (this may require providing some `git` instructions).
  - Backports and trivial additions to finish a PR (really trivial, like a typo or PEP8 fix) can be pushed directly.
  - For PRs that add new features or are in some way complex, wait at least a day or two before merging it. That way, others get a chance to comment before the code goes in.
  - Squashing commits or cleaning up commit messages of a PR that you consider too messy is OK. Make sure though to retain the original author name when doing this. Squashing is highly recommended whenever commit messages do not (roughly) follow the guidelines in \[writing-the-commit-message\](\#writing-the-commit-message).
  - Make sure that the labels and milestone on a merged PR are set correctly.
  - When you want to reject a PR: if it's very obvious, you can just close it and explain why. If it's not obvious, then it's a good idea to first explain why you think the PR is not suitable for inclusion in SciPy, then let a second committer comment or close.

### Backporting

All pull requests (whether they contain enhancements, bug fixes or something else), should be made against main. Only bug fixes are candidates for backporting to a maintenance branch. The backport strategy for SciPy is to (a) only backport fixes that are important, and (b) to only backport when it's reasonably sure that a new bugfix release on the relevant maintenance branch will be made. Typically, the developer who merges an important bugfix adds the `backport-candidate` label and pings the release manager, who decides on whether and when the backport is done. After the backport is completed, the `backport-candidate` label has to be removed again.

A good strategy for a backport pull request is to combine several main branch pull requests, to reduce the burden on continuous integration tests and to reduce the merge commit cluttering of maintenance branch history. It is generally best to have a single commit for each of the main branch pull requests represented in the backport pull request. This way, history is clear and can be reverted in a straightforward manner if needed.

### Release notes

When a PR gets merged, consider if the changes need to be mentioned in the release notes. What needs mentioning: new features, backwards incompatible changes, deprecations, and "other changes" (anything else noteworthy enough, see older release notes for the kinds of things worth mentioning).

Release note entries are maintained on [the wiki](https://github.com/scipy/scipy/wiki). The release manager will gather content from there and integrate it into the html docs. We use this mechanism to avoid merge conflicts that would happen if every PR touched the same file under `doc/release/` directly.

Changes can be monitored ([Atom feed](https://github.com/scipy/scipy/wiki.atom)) and pulled (the wiki is a git repo: `https://github.com/scipy/scipy.wiki.git`).

### Other

*Cross-referencing:* Cross-referencing issues and pull requests on GitHub is often useful. GitHub allows doing that by using `gh-xxxx` or `#xxxx` with `xxxx` the issue/PR number. The `gh-xxxx` format is strongly preferred, because it's clear that that is a GitHub link. Older issues contain `#xxxx` which is about Trac (what we used pre-GitHub) tickets.

*PR naming convention:* Pull requests, issues and commit messages usually start with a three-letter abbreviation like `ENH:` or `BUG:`. This is useful to quickly see what the nature of the commit/PR/issue is. For the full list of abbreviations, see \[writing the commit message \<numpy:writing-the-commit-message\>\](\#writing-the-commit-message \<numpy:writing-the-commit-message\>).

## Licensing

SciPy is distributed under the [modified (3-clause) BSD license](https://opensource.org/licenses/BSD-3-Clause). All code, documentation and other files added to SciPy by contributors is licensed under this license, unless another license is explicitly specified in the source code. Contributors keep the copyright for code they wrote and submit for inclusion to SciPy.

Other licenses that are compatible with the modified BSD license that SciPy uses are 2-clause BSD, MIT and PSF. Incompatible licenses are GPL, Apache and custom licenses that require attribution/citation or prohibit use for commercial purposes.

PRs are often submitted with content copied or derived from unlicensed code or code from a default license that is not compatible with SciPy's license. For instance, code published on StackOverflow is covered by a CC-BY-SA license, which is not compatible due to the share-alike clause. These contributions cannot be accepted for inclusion in SciPy unless the original code author is willing to (re)license their code under the modified BSD (or compatible) license. If the original author agrees, add a comment saying so to the source files and forward the relevant communication to the scipy-dev forum.

Another common occurrence is for code to be translated or derived from code in R, Octave (both GPL-licensed) or a commercial application. Such code also cannot be included in SciPy. Simply implementing functionality with the same API as found in R/Octave/... is fine though, as long as the author doesn't look at the original incompatibly-licensed source code.

## Version numbering

SciPy version numbering complies with [PEP 440](https://www.python.org/dev/peps/pep-0440). Released final versions, which are the only versions appearing on [PyPI](https://pypi.org/), are numbered `MAJOR.MINOR.MICRO` where:

  - `MAJOR` is an integer indicating the major version. It changes very rarely; a change in `MAJOR` indicates large (possibly backwards-incompatible) changes.
  - `MINOR` is an integer indicating the minor version. Minor versions are typically released twice a year and can contain new features, deprecations and bug-fixes.
  - `MICRO` is an integer indicating a bug-fix version. Bug-fix versions are released when needed, typically one or two per minor version. They cannot contain new features or deprecations.

Released alpha, beta and rc (release candidate) versions are numbered like final versions but with postfixes `a#`, `b#` and `rc#` respectively, with `#` an integer. Development versions are postfixed with `.dev0+<git-commit-hash>`.

Examples of valid SciPy version strings are:

    0.16.0
    0.15.1
    0.14.0a1
    0.14.0b2
    0.14.0rc1
    0.17.0.dev0+ac53f09

An installed SciPy version contains these version identifiers:

    scipy.__version__            # complete version string, including git commit hash for dev versions
    scipy.version.short_version  # string, only major.minor.micro
    scipy.version.version        # string, same as scipy.__version__
    scipy.version.full_version   # string, same as scipy.__version__
    scipy.version.release        # bool, development or (alpha/beta/rc/final) released version
    scipy.version.git_revision   # string, git commit hash from which scipy was built

## Deprecations

There are various reasons for wanting to remove existing functionality: it's buggy, the API isn't understandable, it's superseded by functionality with better performance, it needs to be moved to another SciPy submodule, etc.

In general, it's not a good idea to remove something without warning users about that removal first. Therefore, this is what should be done before removing something from the public API:

1.  Propose to deprecate the functionality on the scipy-dev forum and get agreement that that's OK.
2.  Add a `DeprecationWarning` for it, which states that the functionality was deprecated, and in which release. For Cython APIs, see \[deprecating-public-cython-api\](\#deprecating-public-cython-api) for the practical steps.
3.  Mention the deprecation in the release notes for that release.
4.  Wait till at least 6 months after the release date of the release that introduced the `DeprecationWarning` before removing the functionality.
5.  Mention the removal of the functionality in the release notes.

The 6 months waiting period in practice usually means waiting two releases. When introducing the warning, also ensure that those warnings are filtered out when running the test suite so they don't pollute the output.

It's possible that there is reason to want to ignore this deprecation policy for a particular deprecation; this can always be discussed on the scipy-dev forum.

## Vendored Code

Many parts of the SciPy codebase are maintained elsewhere, and vendored in SciPy. Some of these parts are vendored as git submodules, for example, `boost_math`.

Other parts are not vendored as git submodules, despite having a maintained upstream. This is mainly for historical reasons, and it is possible that some of these parts will see patches contributed upstream and become git submodules in the future.

Maintainers should be careful to *not* accept contributions (especially trivial changes) into parts of SciPy where the code is actively maintained upstream. Instead, they should direct contributors to the upstream repo. Currently, this includes the following parts of the codebase:

  - [DIRECT](https://github.com/stevengj/nlopt/tree/master/src/algs/direct), at `scipy/optimize/_direct`
  - [ARPACK](https://github.com/opencollab/arpack-ng), at `scipy/sparse/linalg/_eigen/arpack/ARPACK`
  - [SuperLU](https://github.com/xiaoyeli/superlu), at `scipy/sparse/linalg/_dsolve/SuperLU`
  - [QHull](https://github.com/qhull/qhull), at `scipy/spatial/qhull_src`
  - [trlib](https://github.com/felixlen/trlib), at `scipy/optimize/_trlib`
  - [UNU.RAN](https://statmath.wu.ac.at/unuran/), at `scipy/stats/_unuran`

## Distributing

Distributing Python packages is nontrivial - especially for a package with complex build requirements like SciPy - and subject to change. For an up-to-date overview of recommended tools and techniques, see the [Python Packaging User Guide](https://packaging.python.org). This document discusses some of the main issues and considerations for SciPy.

### Dependencies

Dependencies are things that a user has to install in order to use (or build/test) a package. They usually cause trouble, especially if they're not optional. SciPy tries to keep its dependencies to a minimum; the current required and optional build time dependencies can be seen in [SciPy's configuration file](https://github.com/scipy/scipy/blob/main/pyproject.toml), `pyproject.toml`. The only non-optional runtime dependency is [NumPy](https://numpy.org).

Furthermore, of course one needs C, C++ and Fortran compilers to build SciPy, but we don't consider those to be dependencies, and therefore they are not discussed here. For details, see \[building-from-source\](\#building-from-source).

When a package provides useful functionality and it's proposed as a new dependency, consider also if it makes sense to vendor (i.e. ship a copy of it with SciPy) the package instead. For example, [decorator](https://github.com/micheles/decorator) is vendored in `scipy._lib`.

#### Issues with dependency handling

There are some issues with how Python packaging tools handle dependencies reported by projects. Because SciPy gets regular bug reports about this, we go in a bit of detail here.

SciPy reports its dependency on NumPy via `pyproject.toml` for build purposes, and SciPy also has a runtime check that an appropriate version of NumPy is available. SciPy no longer uses `setup_requires` (which in the past invoked `easy_install`); build dependencies are now handled only via `pyproject.toml`. `pyproject.toml` relies on PEP 517; `pip` has `--no-use-pep517` and `--no-build-isolation` flags that may ignore `pyproject.toml` or treat it differently - if users use those flags, they are responsible for installing the correct build dependencies themselves.

#### Version ranges for NumPy and other dependencies

For dependencies it's important to set lower and upper bounds on their versions. For *build-time* dependencies, they are specified in `pyproject.toml` and the versions will *only* apply to the SciPy build itself. It's fine to specify either a range or a specific version for a dependency like `meson-python` or `pybind11`. For NumPy we have to worry about ABI compatibility too. However, with NumPy `>=2.0.0rc1` backwards compatibility is guaranteed as far back as the NumPy `1.19` series so specification of a lowest supported version of NumPy at build time is no longer required in `pyproject.toml`.

For *run-time dependencies* (currently only `numpy`), we specify the range of versions in `pyproject.toml` and in `scipy/__init__.py`. Getting the upper bound right is slightly tricky. If we don't set any bound, a too-new version will be pulled in a few years down the line, and NumPy may have deprecated and removed some API that SciPy depended on by then. On the other hand if we set the upper bound to the newest already-released version, then as soon as a new NumPy version is released there will be no matching SciPy version that works with it. Given that NumPy and SciPy both release in a 6-monthly cadence and that features that get deprecated in NumPy should stay around for another two releases, we specify the upper bound as `<2.xx+3.0` (where `xx` is the minor version of the latest already-released NumPy).

### Supported Python and NumPy versions

The [Python](https://www.python.org) versions that SciPy supports are listed in the list of PyPI classifiers in `pyproject.toml`, and mentioned in the release notes for each release. All newly released Python versions will be supported as soon as possible. For the general policy on dropping support for a Python or NumPy version, see \[NEP 29 \<NEP29\>\](\#nep-29-\<nep29\>). The final decision on dropping support is always taken on the scipy-dev forum.

The lowest supported [NumPy](https://numpy.org) version for a SciPy version is mentioned in the release notes and is encoded in `pyproject.toml` and `scipy/__init__.py`. Typically the latest SciPy release supports \~5-7 minor versions of NumPy: up to 2.5 years' old NumPy versions, (given that the frequency of NumPy releases is about 2x/year at the time of writing) plus two versions into the future.

Supported versions of optional dependencies and compilers is documented in \[toolchain-roadmap\](\#toolchain-roadmap). Note that not all versions of optional dependencies that are supported are tested well or at all by SciPy's Continuous Integration setup. Issues regarding this are dealt with as they come up in the issue tracker or forum.

### Building binary installers

\> **Note** \> This section is only about building SciPy binary installers to *distribute*. For info on building SciPy on the same machine as where it will be used, see [this scipy.org page](https://scipy.github.io/devdocs/dev/contributor/building.html).

There are a number of things to take into consideration when building binaries and distributing them on PyPI or elsewhere.

**General**

  - A binary is specific for a single (major) Python version (because different major Python versions aren't ABI-compatible, at least up to Python 3.12).
  - Build against NumPy `2.0.0`, then it will work for all NumPy versions with the same major version number (NumPy does maintain backwards ABI compatibility), and as far back as NumPy `1.19` series at the time of writing.
  - The easiest available toolchain for building portable SciPy binaries is our `cibuildwheel` infrastructure for common platforms, with details available in our CI infrastructure code and available via the `cibuildwheel` command on Windows, Linux, and MacOS, albeit with some extra external dependencies required in some cases

**Windows**

  - For 64-bit Windows installers built with a free toolchain, use the method documented at <https://github.com/numpy/numpy/wiki/Mingw-static-toolchain>. That method will likely be used for SciPy itself once it's clear that the maintenance of that toolchain is sustainable long-term. See the [MingwPy](https://mingwpy.github.io) project and [this thread](https://mail.python.org/pipermail/numpy-discussion/2015-October/074056.html) for details.
  - The other way to produce 64-bit Windows installers is with `icc`, `ifort` plus `MKL` (or `MSVC` instead of `icc`). For Intel toolchain instructions see [this article](https://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl) and for (partial) MSVC instructions see [this wiki page](https://github.com/numpy/numpy/wiki/Building-with-MSVC).
  - Older SciPy releases contained a .exe "superpack" installer. Those contain 3 complete builds (no SSE, SSE2, SSE3), and were built with <https://github.com/numpy/numpy-vendor>. That build setup is known to not work well anymore and is no longer supported. It used g77 instead of gfortran, due to complex DLL distribution issues (see [gh-2829](https://github.com/scipy/scipy/issues/2829)). Because the toolchain is no longer supported, g77 support isn't needed anymore and SciPy can now include Fortran 90/95 code.

**Linux**

  - PyPI-compatible Linux wheels can be produced via the [manylinux](https://github.com/pypa/manylinux/) project, which is used under the hood by our `cibuildwheel` infrastructure.

Other Linux build-setups result in PyPI incompatible wheels, which would need to be distributed via custom channels, e.g. in a [Wheelhouse](https://pypi.org/project/Wheelhouse), see at the [wheel](https://wheel.readthedocs.io/) and [Wheelhouse](https://pypi.org/project/Wheelhouse) docs.

## Making a SciPy release

At the highest level, this is what the release manager does to release a new SciPy version:

1.  Propose a release schedule in the SciPy forum at <https://discuss.scientific-python.org/>.
2.  Create the maintenance branch for the release.
3.  Tag the release.
4.  Build all release artifacts (sources, installers, docs).
5.  Upload the release artifacts.
6.  Announce the release.
7.  Port relevant changes to release notes and build scripts to main.

In this guide we attempt to describe in detail how to perform each of the above steps. In addition to those steps, which have to be performed by the release manager, here are descriptions of release-related activities and conventions of interest:

  - \[backporting\](\#backporting)
  - \[labels-and-milestones\](\#labels-and-milestones)
  - \[version-numbering\](\#version-numbering)
  - \[supported-py-numpy-versions\](\#supported-py-numpy-versions)
  - \[deprecations\](\#deprecations)

### Proposing a release schedule

A typical release cycle looks like:

  - Create the maintenance branch
  - Release a beta version
  - Release a "release candidate" (RC)
  - If needed, release one or more new RCs
  - Release the final version once there are no issues with the last release candidate

There's usually at least one week between each of the above steps. Experience shows that a cycle takes between 4 and 8 weeks for a new minor version. Bug-fix versions don't need a beta or RC, and can be done much quicker.

Ideally the final release is identical to the last RC, however there may be minor difference - it's up to the release manager to judge the risk of that. Typically, if compiled code or complex pure Python code changes then a new RC is needed, while a simple bug-fix that's backported from main doesn't require a new RC.

To propose a schedule, send a list with estimated dates for branching and beta/rc/final releases to the SciPy forum at <https://discuss.scientific-python.org/>. In the same message, ask everyone to check if there are important issues/PRs that need to be included and aren't tagged with the Milestone for the release or the "backport-candidate" label.

### Creating the maintenance branch

Before branching, ensure that the release notes are updated as far as possible. Include the output of `tools/gh_lists.py` and `tools/authors.py` in the release notes.

Maintenance branches are named `maintenance/<major>.<minor>.x` (e.g. 0.19.x). To create one, simply push a branch with the correct name to the scipy repo. Immediately after, push a commit where you increment the version number on the main branch and add release notes for that new version. Send an email to the SciPy forum at <https://discuss.scientific-python.org/> to let people know that you've done this.

### Updating the version switcher

The version switcher dropdown needs to be updated with the new release information on the `main` branch only.

  - `doc/source/_static/version_switcher.json`: add the new release, the new development version, and transfer `"preferred": true` from the old release to the new release.

### Updating upper bounds of dependencies

In main we do not set upper bounds, because we want to test new releases or development versions of dependencies there. In a maintenance branch however, the goal is to be able to create releases that stay working for years. Hence correct upper bounds must be set. The following places must be updated after creating a maintenance branch:

  -   - `pyproject.toml`: all build-time dependencies, as well as supported Python  
        and NumPy versions

  - `scipy/__init__.py`: for NumPy version check

Each file has comments describing how to set the correct upper bounds.

### Tagging a release

First ensure that you have set up GPG correctly. See <https://github.com/scipy/scipy/issues/4919> for a discussion of signing release tags, and <https://keyring.debian.org/creating-key.html> for instructions on creating a GPG key if you do not have one. Note that on some platforms it may be more suitable to use `gpg2` instead of `gpg` so that passwords may be stored by `gpg-agent` as discussed in <https://github.com/scipy/scipy/issues/10189>. When preparing a release remotely, it may be necessary to set `pinentry-mode loopback` in `~/.gnupg/gpg-agent.conf` because use of `gpg2` will otherwise proceed via an inaccessible graphical password prompt.

To make your key more readily identifiable as you, consider sending your key to public key servers, with a command such as:

    gpg --send-keys <yourkeyid>

Check that all relevant commits are in the branch. In particular, check issues and PRs under the Milestone for the release (<https://github.com/scipy/scipy/milestones>), PRs labeled "backport-candidate", and that the release notes are up-to-date and included in the html docs.

Then update the `version` in `pyproject.toml` and commit the change with a message like `REL: set version to <version-number>`. Don't push this commit to the SciPy repo yet.

Finally tag the release locally with `git tag -s <v1.x.y>` (the `-s` ensures the tag is signed). If `gpg2` is preferred, then `git config --global gpg.program gpg2` may be appropriate. Continue with building release artifacts (next section). Only push the release commit to the scipy repo once you have built the sdists and docs successfully. Then continue with building wheels. Only push the release tag to the repo once all wheels have been built successfully on TravisCI and Appveyor (if it fails, you have to move the tag otherwise - which is bad practice). Finally, after pushing the tag, also push a second commit which increments the version number and appends `.dev0` for `version:` and sets `ISRELEASED` to False again. This also applies with new release candidates, and for removing the `rc` affix when switching from release candidate to release proper.

### Building release artifacts

Here is a complete list of artifacts created for a release:

  - sdist (`scipy-x.y.y.tar.gz`, for both PyPI and GitHub Releases)
  - Binary wheels for Windows, Linux and macOS
  - Documentation (html)
  - A `README.txt` file
  - A `Changelog` file

An `sdist` is generated by running `python -m build --sdist` (note: we still need to move this into a CI job\!), and the Changelog and README are built by running `python dev.py notes` (with tags, see `python dev.py notes --help`) in the repo root, and end up in `REPO_ROOT/release/`. Do this after you've created the signed tag locally. If this completes without issues, push the release commit (not the tag, see section above) to the scipy repo.

To build wheels, push a commit containing the text `[wheel build]` to the branch used for the current release. This triggers `cibuildwheel` builds for all needed Python versions and platforms. The appropriate version pins for NumPy and other dependencies should have been updated in `pyproject.toml` just after branching. If the wheel builds reveal issues that need to be fixed with backports on the maintenance branch, you may remove the local tags (for example `git tag -d v1.2.0rc1`) and restart with tagging above on the new candidate commit.

The `cibuildwheel` infrastructure runs the tests from the built wheels and if they pass, uploads the wheels to <https://anaconda.org/multibuild-wheels-staging/scipy>.

From there you can download them for uploading to PyPI. This can be done in an automated fashion using `tools/download-wheels.py`:

    $ python tools/download-wheels.py 1.5.0rc1 -w REPO_ROOT/release/installers

After this, we want to regenerate the README file, in order to have the MD5 and SHA256 checksums of the just downloaded wheels in it. Run `python dev.py notes` again.

### Uploading release artifacts

For a release there are currently five places on the web to upload things to:

  - PyPI (sdist, wheels)
  - GitHub Releases (sdist, release notes, Changelog)
  - scipy.org (an announcement of the release)
  - docs.scipy.org (html docs)

**PyPI:**

Upload first the wheels and then the sdist:

    twine upload REPO_ROOT/release/installers/*.whl
    twine upload REPO_ROOT/release/installers/scipy-1.x.y.tar.gz

**Github Releases:**

Use GUI on <https://github.com/scipy/scipy/releases> to create release and upload all release artifacts. At this stage, it is appropriate to push the tag and associate the new release (candidate) with this tag in the GUI. For example, `git push upstream v1.2.0rc1`, where `upstream` represents `scipy/scipy`. It is useful to check a previous release to determine exactly which artifacts should be included in the GUI upload process. Also, note that the release notes are not automatically populated into the release description on GitHub, and some manual reformatting to markdown can be quite helpful to match the formatting of previous releases on the site. We generally do not include Issue and Pull Request lists in these GUI descriptions.

**scipy.org:**

Sources for the site are in <https://github.com/scipy/scipy.org>. Update the News section in `content/en/news.md` via a PR. This is only for proper releases, not release candidates.

**docs.scipy.org:**

First build the scipy docs, by running `make dist` in `scipy/doc/`. Verify that they look OK, then upload them to the doc server with `make upload USERNAME=rgommers RELEASE=0.19.0`. Note that SSH access to the doc server is needed; ask @pv (server admin), @tylerjereddy or @rgommers (can upload) if you don't have that.

The sources for the website itself are maintained in <https://github.com/scipy/docs.scipy.org/>. Add the new SciPy version in the table of releases in `index.rst`. Push that commit, then do `make upload USERNAME=yourusername`. This is only for proper releases, not release candidates.

### Wrapping up

Send a message announcing the release to <https://discuss.scientific-python.org/c/announcements/>.

For beta and rc versions, ask people to test (run the scipy tests and test against their own code) and report issues on Github or Discourse.

After the final release is done, port relevant changes to release notes, build scripts, author name mapping in `tools/authors.py` and any other changes that were only made on the maintenance branch to main.

Enable interactive examples by editing the runtime configuration file, `try_examples.json`, in the root folder of the uploaded documentation on the release server. One must remove the regular expression pattern `".*"` from the `ignore_patterns` list.

`` `console $ ssh your-username@docs.scipy.org $ cd /srv/docs_scipy_org/doc/scipy-1.13.1 $ vim try_examples.json  # edit the ignore list to remove: ".*" ``\`

---

dev_quickstart.md

---

# Contributor quickstart guide

After \[getting the source code from GitHub \<git-start\>\](\#getting-the-source-code-from-github-\<git-start\>), there are three steps to start contributing:

1.  **Set up a development environment**
    
    Using `mamba`, or some flavor of the many virtual environment management tools, you can make sure the development version of SciPy does not interfere with any other local installations of SciPy on your machine.

2.  **Build SciPy**
    
    SciPy uses compiled code for speed, which means you might need extra dependencies to complete this step depending on your system - see \[building-from-source\](\#building-from-source).

3.  **Perform development tasks**
    
    These can include any changes you want to make to the source code, running tests, building the documentation, running benchmarks, etc.

## Basic workflow

\> **Note** \> We **strongly** recommend using a user-activated environment setup, such as a conda or virtual environment.

Since SciPy contains parts written in C, C++, and Fortran that need to be compiled before use, make sure you have the necessary compilers and Python development headers installed. If you are using `mamba`, these will be installed automatically. If you are using `pip`, check which \[system-level dependencies \<system-level\>\](\#system-level-dependencies-\<system-level\>) you might need.

First, fork a copy of the main SciPy repository in GitHub onto your own account and then create your local repository via:

    git clone git@github.com:YOURUSERNAME/scipy.git scipy
    cd scipy
    git submodule update --init
    git remote add upstream https://github.com/scipy/scipy.git

Next, set up your development environment. **With** \[system-level dependencies \<system-level\>\](\#system-level-dependencies-\<system-level\>) **installed**, execute the instructions in \[building-from-source\](\#building-from-source).

For details on how to test your changes, see the more complete setup walkthrough in \[development-workflow\](\#development-workflow).

## Other workflows

There are many possible ways to set up your development environment. For more detailed instructions, see the \[contributor-toc\](\#contributor-toc).

\> **Note** \> If you are having trouble building SciPy from source or setting up your local development environment, you can try to build SciPy with GitHub Codespaces. It allows you to create the correct development environment right in your browser, reducing the need to install local development environments and deal with incompatible dependencies.

If you have good internet connectivity and want a temporary set-up, it is often faster to work on SciPy in a Codespaces environment. For documentation on how to get started with Codespaces, see [the Codespaces docs](https://docs.github.com/en/codespaces). When creating a codespace for the `scipy/scipy` repository, the default 2-core machine type works; 4-core will build and work a bit faster (but of course at a cost of halving your number of free usage hours). Once your codespace has started, you can run `conda activate scipy-dev` and your development environment is completely set up - you can then follow the relevant parts of the SciPy documentation to build, test, develop, write docs, and contribute to SciPy.

Another alternative is to use [Gitpod](https://www.gitpod.io). We do not maintain this solution anymore but some information can be found in previous versions of our [docs](https://docs.scipy.org/doc/scipy-1.10.1/dev/contributor/quickstart_gitpod.html).

---

configure_git.md

---

# Git configuration

## Overview

Your personal [git](https://git-scm.com/) configurations are saved in the `.gitconfig` file in your home directory. Here is an example `.gitconfig` file:

    [user]
            name = Your Name
            email = you@yourdomain.example.com
    
    [alias]
            ci = commit -a
            co = checkout
            st = status -a
            stat = status -a
            br = branch
            wdiff = diff --color-words
    
    [core]
            editor = vim
    
    [merge]
            summary = true

You can edit this file directly or you can use the `git config --global` command:

    git config --global user.name "Your Name"
    git config --global user.email you@yourdomain.example.com
    git config --global alias.ci "commit -a"
    git config --global alias.co checkout
    git config --global alias.st "status -a"
    git config --global alias.stat "status -a"
    git config --global alias.br branch
    git config --global alias.wdiff "diff --color-words"
    git config --global core.editor vim
    git config --global merge.summary true

To set up on another computer, you can copy your `~/.gitconfig` file, or run the commands above.

## In detail

### user.name and user.email

It is good practice to tell [git](https://git-scm.com/) who you are, for labeling any changes you make to the code. The simplest way to do this is from the command line:

    git config --global user.name "Your Name"
    git config --global user.email you@yourdomain.example.com

This will write the settings into your git configuration file, which should now contain a user section with your name and email:

    [user]
          name = Your Name
          email = you@yourdomain.example.com

Of course you'll need to replace `Your Name` and `you@yourdomain.example.com` with your actual name and email address.

### Aliases

You might well benefit from some aliases to common commands.

For example, you might well want to be able to shorten `git checkout` to `git co`. Or you may want to alias `git diff --color-words` (which gives a nicely formatted output of the diff) to `git wdiff`

The following `git config --global` commands:

    git config --global alias.ci "commit -a"
    git config --global alias.co checkout
    git config --global alias.st "status -a"
    git config --global alias.stat "status -a"
    git config --global alias.br branch
    git config --global alias.wdiff "diff --color-words"

will create an `alias` section in your `.gitconfig` file with contents like this:

    [alias]
            ci = commit -a
            co = checkout
            st = status -a
            stat = status -a
            br = branch
            wdiff = diff --color-words

### Editor

You may also want to make sure that your editor of choice is used :

    git config --global core.editor vim

### Merging

To enforce summaries when doing merges (`~/.gitconfig` file again):

    [merge]
       log = true

Or from the command line:

    git config --global merge.log true

---

development_setup.md

---

# Getting started with Git development

This section and the next describe in detail how to set up git for working with the SciPy source code. If you have git already set up, skip to \[development-workflow\](\#development-workflow).

## Basic Git setup

  - Developing with git can be done entirely without GitHub. Git is a distributed version control system. In order to use git on your machine you must first [install git](https://git-scm.com/downloads).

  - Introduce yourself to Git:
    
        git config --global user.email you@yourdomain.example.com
        git config --global user.name "Your Name Comes Here"

## Making your own copy (fork) of SciPy

You need to do this only once.

1.  Set up and configure a [github](https://github.com/scipy/scipy) account
    
    If you don't have a [github](https://github.com/scipy/scipy) account, go to the [github](https://github.com/scipy/scipy) page, and make one.
    
    You then need to configure your account to allow write access - see the `Generating SSH keys` help on [github help](https://help.github.com).

2.  Next, create your own [forked copy of SciPy](https://docs.github.com/get-started/quickstart/fork-a-repo).

### Overview

    git clone https://github.com/your-user-name/scipy.git
    cd scipy
    git remote add upstream https://github.com/scipy/scipy.git
    git submodule update --init

### In detail

#### Clone your fork

1.  Clone your fork to the local computer with `git clone https://github.com/your-user-name/scipy.git`

2.  Investigate. Change directory to your new repo: `cd scipy`. Then `git branch -a` to show you all branches. You'll get something like:
    
        * main
        remotes/origin/main
    
    This tells you that you are currently on the `main` branch, and that you also have a `remote` connection to `origin/main`. What remote repository is `remote/origin`? Try `git remote -v` to see the URLs for the remote. They will point to your [github](https://github.com/scipy/scipy) fork.
    
    Now you want to connect to the upstream [SciPy github](https://github.com/scipy/scipy) repository, so you can merge in changes from trunk.

#### Linking your repository to the upstream repo

    cd scipy
    git remote add upstream https://github.com/scipy/scipy.git

`upstream` here is just the arbitrary name we're using to refer to the main [SciPy](https://www.scipy.org) repository at [SciPy github](https://github.com/scipy/scipy).

Just for your own satisfaction, show yourself that you now have a new 'remote', with `git remote -v show`, giving you something like:

    upstream https://github.com/scipy/scipy.git (fetch)
    upstream https://github.com/scipy/scipy.git (push)
    origin   https://github.com/your-user-name/scipy.git (fetch)
    origin   https://github.com/your-user-name/scipy.git (push)

To keep in sync with changes in SciPy, you want to set up your repository so it pulls from `upstream` by default. This can be done with:

    git config branch.main.remote upstream
    git config branch.main.merge refs/heads/main

Your config file should now look something like (from `$ cat .git/config`):

    [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
            ignorecase = true
            precomposeunicode = false
    [remote "origin"]
            url = https://github.com/your-user-name/scipy.git
            fetch = +refs/heads/*:refs/remotes/origin/*
    [remote "upstream"]
            url = https://github.com/scipy/scipy.git
            fetch = +refs/heads/*:refs/remotes/upstream/*
    [branch "main"]
            remote = upstream
            merge = refs/heads/main

#### Update submodules

Initialize git submodules:

    git submodule update --init

This fetches and updates any submodules that SciPy needs (such as <span class="title-ref">Boost</span>).

### Next steps

You are now ready to start developing with SciPy. Check the \[contributor-toc\](\#contributor-toc) for more details.

---

dot2_dot3.md

---

# Two and three dots in difference specs

Imagine a series of commits A, B, C, D... Imagine that there are two branches, *topic* and *main*. You branched *topic* off *main* when *main* was at commit 'E'. The graph of the commits looks like this:

    A---B---C topic
    /
    D---E---F---G main

Then:

    git diff main..topic

will output the difference from G to C (i.e. with effects of F and G), while:

    git diff main...topic

would output just differences in the topic branch (i.e. only A, B, and C).

---

git_resources.md

---

# Additional [Git](https://git-scm.com/) Resources

## Tutorials and summaries

  - [github help](https://help.github.com) has an excellent series of how-to guides.
  - [learn.github](https://learn.github.com/) has an excellent series of tutorials
  - The [pro git book](https://git-scm.com/book/) is a good in-depth book on git.
  - A [git cheat sheet](http://cheat.errtheblog.com/s/git) is a page giving summaries of common commands.
  - The [git user manual](https://www.kernel.org/pub/software/scm/git/docs/user-manual.html)
  - The [git tutorial](https://www.kernel.org/pub/software/scm/git/docs/gittutorial.html)
  - The [git community book](https://book.git-scm.com/)
  - [git ready](http://www.gitready.com/) - a nice series of tutorials
  - [git casts](http://www.gitcasts.com/) - video snippets giving git how-tos.
  - [git magic](http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html) - extended introduction with intermediate detail
  - The [git parable](http://tom.preston-werner.com/2009/05/19/the-git-parable.html) is an easy read explaining the concepts behind git.
  - Our own [git foundation](https://matthew-brett.github.io/pydagogue/foundation.html) expands on the [git parable](http://tom.preston-werner.com/2009/05/19/the-git-parable.html).
  - Fernando Perez' git page - [Fernando's git page](http://www.fperez.org/py4science/git.html) - many links and tips
  - A good but technical page on [git concepts](http://www.eecs.harvard.edu/~cduan/technical/git/)
  - [git svn crash course](https://git-scm.com/course/svn.html): [git](https://git-scm.com/) for those of us used to [subversion](http://subversion.tigris.org/)

## Advanced git workflow

There are many ways of working with [git](https://git-scm.com/); here are some posts on the rules of thumb that other projects have come up with:

  - Linus Torvalds on [git management](http://kerneltrap.org/Linux/Git_Management)
  - Linus Torvalds on [linux git workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html) . Summary; use the git tools to make the history of your edits as clean as possible; merge from upstream edits as little as possible in branches where you are doing active development.

## Manual pages online

You can get these on your own machine with (e.g) `git help push` or (same thing) `git push --help`, but, for convenience, here are the online manual pages for some common commands:

  - [git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)
  - [git branch](https://www.kernel.org/pub/software/scm/git/docs/git-branch.html)
  - [git checkout](https://www.kernel.org/pub/software/scm/git/docs/git-checkout.html)
  - [git clone](https://www.kernel.org/pub/software/scm/git/docs/git-clone.html)
  - [git commit](https://www.kernel.org/pub/software/scm/git/docs/git-commit.html)
  - [git config](https://www.kernel.org/pub/software/scm/git/docs/git-config.html)
  - [git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)
  - [git log](https://www.kernel.org/pub/software/scm/git/docs/git-log.html)
  - [git pull](https://www.kernel.org/pub/software/scm/git/docs/git-pull.html)
  - [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html)
  - [git remote](https://www.kernel.org/pub/software/scm/git/docs/git-remote.html)
  - [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)

---

gitwash.md

---

# Git for development<span id="using-git"></span>

These pages describe a general [git](https://git-scm.com/) and [github](https://github.com/scipy/scipy) workflow.

This is not a comprehensive [git](https://git-scm.com/) reference. It's tailored to working with SciPy and using the [github](https://github.com/scipy/scipy) hosting service. You may well find better or quicker ways of getting stuff done with [git](https://git-scm.com/), but these should get you started.

For general resources for learning [git](https://git-scm.com/) see \[git-resources\](\#git-resources).

Have a look at the [github](https://github.com/scipy/scipy) install help pages available from [github help](https://help.github.com) or from the [Git home page](https://git-scm.com/downloads).

Contents:

<div class="toctree" data-maxdepth="2">

development\_setup configure\_git useful\_git git\_resources dot2\_dot3

</div>

---

useful_git.md

---

# Git tips

## Rebasing on main

This updates your feature branch with changes from the upstream [SciPy github](https://github.com/scipy/scipy) repo. If you do not absolutely need to do this, try to avoid doing it, except perhaps when you are finished. The first step will be to update the remote repository with new commits from upstream:

    git fetch upstream

Next, you need to update the feature branch:

    # go to the feature branch
    git checkout my-new-feature
    # make a backup in case you mess up
    git branch tmp my-new-feature
    # rebase on upstream main branch
    git rebase upstream/main

If you have made changes to files that have changed also upstream, this may generate merge conflicts that you need to resolve. See \[below\<recovering-from-mess-up\>\](\#below\<recovering-from-mess-up\>) for help in this case.

Finally, remove the backup branch upon a successful rebase:

    git branch -D tmp

\> **Note** \> Rebasing on main is preferred over merging upstream back to your branch. Using `git merge` and `git pull` is discouraged when working on feature branches.

## Recovering from mess-ups

Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward to recover from such mistakes.

If you mess up during a rebase:

    git rebase --abort

If you notice you messed up after the rebase:

    # reset branch back to the saved point
    git reset --hard tmp

If you forgot to make a backup branch:

    # look at the reflog of the branch
    git reflog show my-feature-branch
    
    8630830 my-feature-branch@{0}: commit: BUG: io: close file handles immediately
    278dd2a my-feature-branch@{1}: rebase finished: refs/heads/my-feature-branch onto 11ee694744f2552d
    26aa21a my-feature-branch@{2}: commit: BUG: lib: make seek_gzip_factory not leak gzip obj
    ...
    
    # reset the branch to where it was before the botched rebase
    git reset --hard my-feature-branch@{2}

If you didn't actually mess up but there are merge conflicts, you need to resolve those. This can be one of the trickier things to get right. For a good description of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).

## Rewriting commit history

\> **Note** \> Do this only for your own feature branches.

There's an embarrassing typo in a commit you made? Or perhaps the you made several false starts you would like the posterity not to see.

This can be done via *interactive rebasing*.

Suppose that the commit history looks like this:

    git log --oneline
    eadc391 Fix some remaining bugs
    a815645 Modify it so that it works
    2dec1ac Fix a few bugs + disable
    13d7934 First implementation
    6ad92e5 * masked is now an instance of a new object, MaskedConstant
    29001ed Add pre-nep for a copule of structured_array_extensions.
    ...

and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make the following changes:

  - Rewrite the commit message for `13d7934` to something more sensible.
  - Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.

We do as follows:

    # make a backup of the current state
    git branch tmp HEAD
    # interactive rebase
    git rebase -i 6ad92e5

This will open an editor with the following text in it:

    pick 13d7934 First implementation
    pick 2dec1ac Fix a few bugs + disable
    pick a815645 Modify it so that it works
    pick eadc391 Fix some remaining bugs
    
    # Rebase 6ad92e5..eadc391 onto 6ad92e5
    #
    # Commands:
    #  p, pick = use commit
    #  r, reword = use commit, but edit the commit message
    #  e, edit = use commit, but stop for amending
    #  s, squash = use commit, but meld into previous commit
    #  f, fixup = like "squash", but discard this commit's log message
    #
    # If you remove a line here THAT COMMIT WILL BE LOST.
    # However, if you remove everything, the rebase will be aborted.
    #

To achieve what we want, we will make the following changes to it:

    r 13d7934 First implementation
    pick 2dec1ac Fix a few bugs + disable
    f a815645 Modify it so that it works
    f eadc391 Fix some remaining bugs

This means that (i) we want to edit the commit message for `13d7934`, and (ii) collapse the last three commits into one. Now we save and quit the editor.

Git will then immediately bring up an editor for editing the commit message. After revising it, we get the output:

    [detached HEAD 721fc64] FOO: First implementation
     2 files changed, 199 insertions(+), 66 deletions(-)
    [detached HEAD 0f22701] Fix a few bugs + disable
     1 files changed, 79 insertions(+), 61 deletions(-)
    Successfully rebased and updated refs/heads/my-feature-branch.

and the history looks now like this:

    0f22701 Fix a few bugs + disable
    721fc64 ENH: Sophisticated feature
    6ad92e5 * masked is now an instance of a new object, MaskedConstant

If it went wrong, recovery is again possible as explained \[above \<recovering-from-mess-up\>\](\#above \<recovering-from-mess-up\>).

## Deleting a branch on [github](https://github.com/scipy/scipy)

    git checkout main
    # delete branch locally
    git branch -D my-unwanted-branch
    # delete branch on GitHub
    git push origin :my-unwanted-branch

(Note the colon `:` before `test-branch`. See also: <https://github.com/guides/remove-a-remote-branch>

## Several people sharing a single repository

If you want to work on some stuff with other people, where you are all committing into the same repository, or even the same branch, then just share it via [github](https://github.com/scipy/scipy).

First fork SciPy into your account, as from \[forking\](\#forking).

Then, go to your forked repository GitHub page, say `https://github.com/your-user-name/scipy`

Click on the 'Admin' button, and add anyone else to the repo as a collaborator:

> ![image](pull_button.png)

Now all those people can do:

    git clone git@github.com:your-user-name/scipy.git

Remember that links starting with `git@` use the ssh protocol and are read-write; links starting with `git://` are read-only.

Your collaborators can then commit directly into that repo with the usual:

    git commit -am 'ENH - much better code'
    git push origin my-feature-branch # pushes directly into your repo

## Exploring your repository

To see a graphical representation of the repository branches and commits:

    gitk --all

To see a linear list of commits for this branch:

    git log

You can also look at the [network graph visualizer](https://github.com/blog/39-say-hello-to-the-network-graph-visualizer) for your [github](https://github.com/scipy/scipy) repo.

## Backporting

Backporting is the process of copying new feature/fixes committed in [scipy/main](https://github.com/scipy/scipy) back to stable release branches. To do this you make a branch off the branch you are backporting to, cherry pick the commits you want from `scipy/main`, and then submit a pull request for the branch containing the backport.

1.  First, you need to make the branch you will work on. This needs to be based on the older version of SciPy (not main):
    
        # Make a new branch based on scipy/maintenance/1.8.x,
        # backport-3324 is our new name for the branch.
        git checkout -b backport-3324 upstream/maintenance/1.8.x

2.  Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):
    
        # Update remote
        git fetch upstream
        # Check the commit log for commits to cherry pick
        git log upstream/main
        # This pull request included commits aa7a047 to c098283 (inclusive)
        # so you use the .. syntax (for a range of commits), the ^ makes the
        # range inclusive.
        git cherry-pick aa7a047^..c098283
        ...
        # Fix any conflicts, then if needed:
        git cherry-pick --continue

3.  You might run into some conflicts cherry picking here. These are resolved the same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html) to see the difference between main and the backported branch to make sure nothing gets screwed up.

4.  Push the new branch to your Github repository:
    
        git push -u origin backport-3324

5.  Finally make a pull request using Github. Make sure it is against the maintenance branch and not main, Github will usually suggest you make the pull request against main.

## Pushing changes to the main repo

*This is only relevant if you have commit rights to the main SciPy repo.*

When you have a set of "ready" changes in a feature branch ready for SciPy's `main` or `maintenance` branches, you can push them to `upstream` as follows:

1.  First, merge or rebase on the target branch.
    
    1)  Only a few, unrelated commits then prefer rebasing:
        
            git fetch upstream
            git rebase upstream/main
        
        See \[rebasing-on-main\](\#rebasing-on-main).
    
    2)  If all of the commits are related, create a merge commit:
        
            git fetch upstream
            git merge --no-ff upstream/main

2.  Check that what you are going to push looks sensible:
    
        git log -p upstream/main..
        git log --oneline --graph

3.  Push to upstream:
    
        git push upstream my-feature-branch:main

\> **Note** \> It's usually a good idea to use the `-n` flag to `git push` to check first that you're about to push the changes you want to the place you want.

---

governance.md

---

# SciPy Project Governance

The purpose of this document is to formalize the governance process used by the SciPy project in both ordinary and extraordinary situations, and to clarify how decisions are made and how the various elements of our community interact, including the relationship between open source collaborative development and work that may be funded by for-profit or non-profit entities.

## The Project

The SciPy Project (The Project) is an open source software project. The goal of The Project is to develop open source software for scientific computing in Python, and, in particular, the `scipy` package. The Software developed by The Project is released under the BSD (or similar) open source license, developed openly and hosted on public GitHub repositories under the `scipy` GitHub organization.

The Project is developed by a team of distributed developers, called Contributors. Contributors are individuals who have contributed code, documentation, designs, or other work to the Project. Anyone can be a Contributor. Contributors can be affiliated with any legal entity or none. Contributors participate in the project by submitting, reviewing, and discussing GitHub Pull Requests and Issues and participating in open and public Project discussions on GitHub, forums, and other channels. The foundation of Project participation is openness and transparency.

The Project Community consists of all Contributors and Users of the Project. Contributors work on behalf of and are responsible to the larger Project Community and we strive to keep the barrier between Contributors and Users as low as possible.

The Project is not a legal entity, nor does it currently have any formal relationships with legal entities.

## Governance

This section describes the governance and leadership model of The Project.

The foundations of Project governance are:

  - openness and transparency
  - active contribution
  - institutional neutrality

Traditionally, Project leadership was provided by a subset of Contributors, called Core Developers, whose active and consistent contributions have been recognized by their receiving “commit rights” to the Project GitHub repositories. In general, all Project decisions are made through consensus among the Core Developers with input from the Community.

While this approach has served us well, as the Project grows, we see a need for a more formal governance model. The SciPy Core Developers expressed a preference for a leadership model which includes a BDFL (Benevolent Dictator for Life). Therefore, moving forward The Project leadership will consist of a BDFL and Steering Council.

### BDFL

The Project will have a BDFL (Benevolent Dictator for Life), who is currently Pauli Virtanen. As Dictator, the BDFL has the authority to make all final decisions for The Project. As Benevolent, the BDFL, in practice, chooses to defer that authority to the consensus of the community discussion channels and the Steering Council (see below). It is expected, and in the past has been the case, that the BDFL will only rarely assert their final authority. Because rarely used, we refer to BDFL’s final authority as a “special” or “overriding” vote. When it does occur, the BDFL override typically happens in situations where there is a deadlock in the Steering Council or if the Steering Council asks the BDFL to make a decision on a specific matter. To ensure the benevolence of the BDFL, The Project encourages others to fork the project if they disagree with the overall direction the BDFL is taking. The BDFL may delegate their authority on a particular decision or set of decisions to any other Council member at their discretion.

The BDFL can appoint their successor, but it is expected that the Steering Council would be consulted on this decision. If the BDFL is unable to appoint a successor, the Steering Council will make this decision - preferably by consensus, but if needed, by a majority vote.

Note that the BDFL can step down at any time, and acting in good faith, will also listen to serious calls to do so. Also note that the BDFL is more a role for fallback decision making rather than that of a director/CEO.

### Steering Council

The Project will have a Steering Council that consists of Project Contributors who have produced contributions that are substantial in quality and quantity, and sustained over at least one year. The overall role of the Council is to ensure, through working with the BDFL and taking input from the Community, the long-term well-being of the project, both technically and as a community.

The Council will have a Chair, who is tasked with keeping the organizational aspects of the functioning of the Council and the Project on track. The Council will also appoint a Release Manager for the Project, who has final responsibility for one or more releases.

During the everyday project activities, Council Members participate in all discussions, code review, and other project activities as peers with all other Contributors and the Community. In these everyday activities, Council Members do not have any special power or privilege through their membership on the Council. However, it is expected that because of the quality and quantity of their contributions and their expert knowledge of the Project Software and Services, Council Members will provide useful guidance, both technical and in terms of project direction, to potentially less experienced contributors.

The Steering Council and its Members play a special role in certain situations. In particular, the Council may:

  - Make decisions about the overall scope, vision, and direction of the project.
  - Make decisions about strategic collaborations with other organizations or individuals.
  - Make decisions about specific technical issues, features, bugs, and pull requests. They are the primary mechanism of guiding the code review process and merging pull requests.
  - Make decisions about the Services that are run by The Project and manage those Services for the benefit of the Project and Community.
  - Make decisions when regular community discussion does not produce consensus on an issue in a reasonable time frame.
  - Update policy documents, such as this one.

#### Council membership

To become eligible for being a Steering Council Member, an individual must be a Project Contributor who has produced contributions that are substantial in quality and quantity, and sustained over at least one year. Potential Council Members are nominated by existing Council members and voted upon by the existing Council after asking if the potential Member is interested and willing to serve in that capacity. The Council will be initially formed from the set of existing Core Developers who, as of January 2017, have been significantly active over the last two years.

When considering potential Members, the Council will look at candidates with a comprehensive view of their contributions. This will include, but is not limited to, code, code review, infrastructure work, forum and chat participation, community help/building, education and outreach, design work, etc. We are deliberately not setting arbitrary quantitative metrics (like “100 commits in this repo”) to avoid encouraging behavior that plays to the metrics rather than the project’s overall well-being. We want to encourage a diverse array of backgrounds, viewpoints, and talents in our team, which is why we explicitly do not define code as the sole metric on which council membership will be evaluated.

If a Council Member becomes inactive in the project for a period of one year, they will be considered for removal from the Council. Before removal, inactive Member will be approached to see if they plan on returning to active participation. If not, they will be removed immediately upon a Council vote. If they plan on returning to active participation soon, they will be given a grace period of one year. If they don’t return to active participation within that time period they will be removed by vote of the Council without further grace period. All former Council Members can be considered for membership again at any time in the future, like any other Project Contributor. Retired Council Members will be listed on the project website, acknowledging the period during which they were active in the Council.

The Council reserves the right to eject current Members, other than the BDFL, if they are deemed to be actively harmful to the project’s well-being, and attempts at communication and conflict resolution have failed.

A list of current Steering Council Members is maintained at the page [About us](https://scipy.org/about/).

#### Council Chair

The Chair will be appointed by the Steering Council. The Chair can stay on as long as they want, but may step down at any time and will listen to serious calls to do so (similar to the BDFL role). The Chair will be responsible for:

  - Starting a review of the technical direction of the project (as captured by the \[scipy-roadmap\](\#scipy-roadmap)) bi-yearly, around mid-April and mid-October.
  - At the same times of the year, summarizing any relevant organizational updates and issues in the preceding period, and asking for feedback/suggestions on the forum.
  - Ensuring the composition of the Steering Council stays current.
  - Ensuring matters discussed in private by the Steering Council get summarized on the forum to keep the Community informed.
  - Ensuring other important organizational documents (e.g., Code of Conduct, Fiscal Sponsorship Agreement) stay current after they are added.

#### Release Manager

The Release Manager has final responsibility for making a release. This includes:

  - Proposing of and deciding on the timing of a release.
  - Determining the content of a release in case there is no consensus on a particular change or feature.
  - Creating the release and announcing it on the relevant public channels.

For more details on what those responsibilities look like in practice, see \[making-a-release\](\#making-a-release).

#### Conflict of interest

It is expected that the BDFL and Council Members will be employed at a wide range of companies, universities, and non-profit organizations. Because of this, it is possible that Members will have a conflict of interest. Such conflicts of interest include, but are not limited to:

  - Financial interest, such as investments, employment or contracting work, outside of The Project that may influence their work on The Project.
  - Access to proprietary information of their employer that could potentially leak into their work with the Project.

All members of the Council, BDFL included, shall disclose to the rest of the Council any conflict of interest they may have. Members with a conflict of interest in a particular issue may participate in Council discussions on that issue, but must recuse themselves from voting on the issue. If the BDFL has recused themself for a particular decision, the Council will appoint a substitute BDFL for that decision.

#### Private communications of the Council

Unless specifically required, all Council discussions and activities will be public and done in collaboration and discussion with the Project Contributors and Community. The Council will have a private mailing list that will be used sparingly and only when a specific matter requires privacy. When private communications and decisions are needed, the Council will do its best to summarize those to the Community after removing personal/private/sensitive information that should not be posted to the public internet.

#### Council decision making

If it becomes necessary for the Steering Council to produce a formal decision, then they will use a form of the [Apache Foundation voting process](https://www.apache.org/foundation/voting.html). This is a formalized version of consensus, in which +1 votes indicate agreement, -1 votes are vetoes (and must be accompanied with a rationale, as above), and one can also vote fractionally (e.g. -0.5, +0.5) if one wishes to express an opinion without registering a full veto. These numeric votes are also often used informally as a way of getting a general sense of people's feelings on some issue, and should not normally be taken as formal votes. A formal vote only occurs if explicitly declared, and if this does occur, then the vote should be held open for long enough to give all interested Council Members a chance to respond -- at least one week.

In practice, we anticipate that for most Steering Council decisions (e.g., voting in new members) a more informal process will suffice.

## Institutional Partners and funding

The Steering Council is the primary leadership for the project. No outside institution, individual, or legal entity has the ability to own, control, usurp, or influence the project other than by participating in the Project as Contributors and Council Members. However, because institutions can be an important funding mechanism for the project, it is important to formally acknowledge institutional participation in the project. These are Institutional Partners.

An Institutional Contributor is any individual Project Contributor who contributes to the project as part of their official duties at an Institutional Partner. Likewise, an Institutional Council Member is any Project Steering Council Member who contributes to the project as part of their official duties at an Institutional Partner.

With these definitions, an Institutional Partner is any recognized legal entity in any country that employs at least 1 Institutional Contributor or Institutional Council Member. Institutional Partners can be for-profit or non-profit entities.

Institutions become eligible to become an Institutional Partner by employing individuals who actively contribute to The Project as part of their official duties. To state this another way, the only way for a Partner to influence the project is by actively contributing to the open development of the project, in equal terms to any other member of the community of Contributors and Council Members. Merely using Project Software in institutional context does not allow an entity to become an Institutional Partner. Financial gifts do not enable an entity to become an Institutional Partner. Once an institution becomes eligible for Institutional Partnership, the Steering Council must nominate and approve the Partnership.

If, at some point, an existing Institutional Partner stops having any contributing employees, then a one year grace period commences. If, at the end of this one-year period, they continue not to have any contributing employees, then their Institutional Partnership will lapse, and resuming it will require going through the normal process for new Partnerships.

An Institutional Partner is free to pursue funding for their work on The Project through any legal means. This could involve a non-profit organization raising money from private foundations and donors or a for-profit company building proprietary products and services that leverage Project Software and Services. Funding acquired by Institutional Partners to work on The Project is called Institutional Funding. However, no funding obtained by an Institutional Partner can override the Steering Council. If a Partner has funding to do SciPy work and the Council decides to not pursue that work as a project, the Partner is free to pursue it on their own. However, in this situation, that part of the Partner’s work will not be under the SciPy umbrella and cannot use the Project trademarks in any way that suggests a formal relationship.

Institutional Partner benefits are:

  - acknowledgement on the SciPy website and in talks
  - ability to acknowledge their own funding sources on the SciPy website and in talks
  - ability to influence the project through the participation of their Council Member
  - invitation of the Council Members to SciPy Developer Meetings

A list of current Institutional Partners is maintained at the page [About us](https://scipy.org/about/).

## Document history

<https://github.com/scipy/scipy/commits/main/doc/source/dev/governance/governance.rst>

## Acknowledgements

Substantial portions of this document were adapted from the [Jupyter/IPython project's governance document](https://github.com/jupyter/governance/blob/master/governance.md) and [NumPy's governance document](https://github.com/numpy/numpy/blob/main/doc/source/dev/governance/governance.md).

## License

To the extent possible under law, the authors have waived all copyright and related or neighboring rights to the SciPy project governance document, as per the [CC-0 public domain dedication / license](https://creativecommons.org/publicdomain/zero/1.0/).

---

hacking.md

---

# Ways to Contribute

This document aims to give an overview of the ways to contribute to SciPy. It tries to answer commonly asked questions and provide some insight into how the community process works in practice. Readers who are familiar with the SciPy community and are experienced Python coders may want to jump straight to the \[contributor-toc\](\#contributor-toc).

There are a lot of ways you can contribute:

  - Contributing new code
  - Fixing bugs, improving documentation, and other maintenance work
  - Reviewing open pull requests
  - Triaging issues
  - Working on the [scipy.org](https://scipy.org/) website
  - Answering questions and participating on the [forum](https://discuss.scientific-python.org/c/contributor/scipy).

## Contributing new code

If you have been working with the scientific Python toolstack for a while, you probably have some code lying around of which you think "this could be useful for others too". Perhaps it's a good idea then to contribute it to SciPy or another open source project. The first question to ask is then, where does this code belong? That question is hard to answer here, so we start with a more specific one: *what code is suitable for putting into SciPy?* Almost all of the new code added to SciPy has in common that it's potentially useful in multiple scientific domains and it fits in the scope of existing SciPy subpackages (see \[deciding-on-new-features\](\#deciding-on-new-features)). In principle, new subpackages can be added too, but this is far less common. For code that is specific to a single application, there may be an existing project that can use the code. Some SciKits ([scikit-learn](http://scikit-learn.org), [scikit-image](http://scikit-image.org/), [statsmodels](https://www.statsmodels.org/), etc.) are good examples here; they have a narrower focus and because of that more domain-specific code than SciPy.

Now if you have code that you would like to see included in SciPy, how do you go about it? After checking that your code can be distributed in SciPy under a compatible license (see \[license-considerations\](\#license-considerations)), the first step is to discuss it on the scipy-dev [forum](https://discuss.scientific-python.org/c/contributor/scipy). All new features, as well as changes to existing code, are discussed and decided on there. You can, and probably should already start this discussion before your code is finished. Remember that in order to be added to SciPy your code will need to be reviewed by someone else, so try to find someone willing to review your work while you're at it.

Assuming the outcome of the discussion on the [forum](https://discuss.scientific-python.org/c/contributor/scipy) is positive and you have a function or piece of code that does what you need it to do, what next? Before code is added to SciPy, it at least has to have good documentation, unit tests, benchmarks, and correct code style.

1.    - Unit tests  
        In principle, you should aim to create unit tests that exercise all the code that you are adding. This gives some degree of confidence that your code runs correctly, also on Python versions and hardware or OSes that you don't have available yourself. An extensive description of how to write unit tests is given in \[numpy:reference/testing\](numpy:reference/testing.md), and \[devpy-test\](\#devpy-test) documents how to run them.

2.    - Benchmarks  
        Unit tests check for correct functionality; benchmarks measure code performance. Not all existing SciPy code has benchmarks, but it should: as SciPy grows it is increasingly important to monitor execution times in order to catch unexpected regressions. More information about writing and running benchmarks is available in \[benchmarking-with-asv\](\#benchmarking-with-asv).

3.    - Documentation  
        Clear and complete documentation is essential in order for users to be able to find and understand the code. Documentation for individual functions and classes -- which includes at least a basic description, type and meaning of all parameters and returns values, and usage examples in [doctest](https://pymotw.com/3/doctest/) format -- is put in docstrings. Those docstrings can be read within the interpreter, and are compiled into a reference guide in HTML and pdf format. Higher-level documentation for key (areas of) functionality is provided in tutorial format and/or in module docstrings. A guide on how to write documentation is given in \[numpy:howto-document\](\#numpy:howto-document), and \[rendering-documentation\](\#rendering-documentation) explains how to preview the documentation as it will appear online.

4.    - Code style  
        Uniform code style makes it easier for others to read your code. SciPy follows the standard Python style guideline, [PEP8](https://www.python.org/dev/peps/pep-0008/), with the exception that the recommended maximum line length is 88 characters, rather than PEP8's 79 characters.
        
        We provide a git pre-commit hook that can check each of your commits for proper style. Install it (once) by running the following from the root of the SciPy repository:
        
            cp tools/pre-commit-hook.py .git/hooks/pre-commit
        
        Alternatively, you may run the linter manually:
        
            python dev.py lint
        
        Most IDEs and text editors also have settings that can help you follow PEP8, for example by translating tabs by four spaces. More information is available in \[pep8-scipy\](\#pep8-scipy).

A \[checklist\<pr-checklist\>\](\#checklist\<pr-checklist\>), including these and other requirements, is available at the end of the example \[development-workflow\](\#development-workflow).

Another question you may have is: *where exactly do I put my code*? To answer this, it is useful to understand how the SciPy public API (application programming interface) is defined. For most modules, the API is two levels deep, which means your new function should appear as `scipy.subpackage.my_new_func`. `my_new_func` can be put in an existing or new file under `/scipy/<subpackage>/`, its name is added to the `__all__` list in that file (which lists all public functions in the file), and those public functions are then imported in `/scipy/<subpackage>/__init__.py`. Any private functions/classes should have a leading underscore (`_`) in their name. A more detailed description of what the public API of SciPy is, is given in \[scipy-api\](\#scipy-api).

Once you think your code is ready for inclusion in SciPy, you can send a pull request (PR) on Github. We won't go into the details of how to work with git here, this is described well in \[git-development\](\#git-development) and on the [Github help pages](https://help.github.com/articles/set-up-git/). When you send the PR for a new feature, be sure to also mention this on the scipy-dev [forum](https://discuss.scientific-python.org/c/contributor/scipy). This can prompt interested people to help review your PR. Assuming that you already got positive feedback before on the general idea of your code/feature, the purpose of the code review is to ensure that the code is correct, efficient and meets the requirements outlined above. In many cases, the code review happens relatively quickly, but it's possible that it stalls. If you have addressed all feedback already given, it's perfectly fine to ask on the [forum](https://discuss.scientific-python.org/c/contributor/scipy) again for review (after a reasonable amount of time, say a couple of weeks, has passed). Once the review is completed, the PR is merged into the "main" branch of SciPy.

The above describes the requirements and process for adding code to SciPy. It doesn't yet answer the question though how decisions are made exactly. The basic answer is: decisions are made by consensus, by everyone who chooses to participate in the discussion on the [forum](https://discuss.scientific-python.org/c/contributor/scipy). This includes developers, other users and yourself. Aiming for consensus in the discussion is important -- SciPy is a project by and for the scientific Python community. In those rare cases that agreement cannot be reached, the maintainers of the module in question can decide the issue.

### License Considerations

*I based my code on existing Matlab/R/... code I found online, is this OK?*

It depends. SciPy is distributed under a BSD license, so if the code that you based your code on is also BSD licensed or has a BSD-compatible license (e.g. MIT, PSF) then it's OK. Code which is GPL or Apache licensed, has no clear license, requires citation or is free for academic use only can't be included in SciPy. Therefore if you copied existing code with such a license or made a direct translation to Python of it, your code can't be included. If you're unsure, please ask on the scipy-dev [forum](https://discuss.scientific-python.org/c/contributor/scipy).

*Why is SciPy under the BSD license and not, say, the GPL?*

Like Python, SciPy uses a "permissive" open source license, which allows proprietary reuse. While this allows companies to use and modify the software without giving anything back, it is felt that the larger user base results in more contributions overall, and companies often publish their modifications anyway, without being required to. See John Hunter's [BSD pitch](https://web.archive.org/web/20130922065958/https://nipy.sourceforge.net/software/license/johns_bsd_pitch.html).

For more information about SciPy's license, see \[scipy-licensing\](\#scipy-licensing).

## Maintaining existing code

The previous section talked specifically about adding new functionality to SciPy. A large part of that discussion also applies to the maintenance of existing code. Maintenance means fixing bugs, improving code quality, documenting existing functionality better, adding missing unit tests, adding performance benchmarks, keeping build scripts up-to-date, etc. The SciPy [issue list](https://github.com/scipy/scipy/issues) contains all reported bugs, build/documentation issues, etc. Fixing issues helps improve the overall quality of SciPy, and is also a good way of getting familiar with the project. You may also want to fix a bug because you ran into it and need the function in question to work correctly.

The discussion on code style and unit testing above applies equally to bug fixes. It is usually best to start by writing a unit test that shows the problem, i.e. it should pass but doesn't. Once you have that, you can fix the code so that the test does pass. That should be enough to send a PR for this issue. Unlike when adding new code, discussing this on the [forum](https://discuss.scientific-python.org/c/contributor/scipy) may not be necessary - if the old behavior of the code is clearly incorrect, no one will object to having it fixed. It may be necessary to add some warning or deprecation message for the changed behavior. This should be part of the review process.

\> **Note** \> Pull requests that *only* change code style, e.g. fixing some PEP8 issues in a file, are discouraged. Such PRs are often not worth cluttering the git annotate history, and take reviewer time that may be better spent in other ways. Code style cleanups of code that is touched as part of a functional change are fine however.

## Reviewing pull requests

Reviewing open pull requests (PRs) is very welcome, and a valuable way to help increase the speed at which the project moves forward. If you have specific knowledge/experience in a particular area (say "optimization algorithms" or "special functions") then reviewing PRs in that area is especially valuable -sometimes PRs with technical code have to wait for a long time to get merged due to a shortage of appropriate reviewers.

We encourage everyone to get involved in the review process; it's also a great way to get familiar with the code base. Reviewers should ask themselves some or all of the following questions:

  - Was this change adequately discussed (relevant for new features and changes in existing behavior)?
  - Is the feature scientifically sound? Algorithms may be known to work based on literature; otherwise, closer look at correctness is valuable.
  - Is the intended behavior clear under all conditions (e.g. unexpected inputs like empty arrays or nan/inf values)?
  - Does the code meet the quality, test and documentation expectations outlined under [Contributing new code](#contributing-new-code)?

If we do not know you yet, consider introducing yourself.

## Other ways to contribute

There are many ways to contribute other than writing code.

Triaging issues (investigating bug reports for validity and possible actions to take) is also a useful activity. SciPy has many hundreds of open issues; closing invalid ones and correctly labelling valid ones (ideally with some first thoughts in a comment) allows prioritizing maintenance work and finding related issues easily when working on an existing function or subpackage. To read more about issue triage, see \[triaging\](\#triaging).

Participating in discussions on the scipy-user and scipy-dev [forum](https://discuss.scientific-python.org/c/contributor/scipy) is a contribution in itself. Everyone who writes to those lists with a problem or an idea would like to get responses, and writing such responses makes the project and community function better and appear more welcoming.

The [scipy.org](https://scipy.org/) website contains a lot of information on both SciPy the project and SciPy the community, and it can always use a new pair of hands. The sources for the website live in their own separate repo: <https://github.com/scipy/scipy.org>

## Getting started

Thanks for your interest in contributing to SciPy\! If you're interested in contributing code, we hope you'll continue on to the \[contributor-toc\](\#contributor-toc) for details on how to set up your development environment, implement your improvements, and submit your first PR\!

---

index.md

---

# Developer Documentation

Below you will find general information about contributing. For an overview of where help or new features are desired or planned, see the roadmap. And for a more detailed look at how the SciPy project works, see the organization section.

<div class="toctree" data-maxdepth="1" data-caption="Contributing Information">

conduct/code\_of\_conduct hacking dev\_quickstart contributor/development\_workflow contributor/contributor\_toc

</div>

<div class="toctree" data-maxdepth="1" data-caption="Roadmap">

roadmap roadmap-detailed toolchain

</div>

<div class="toctree" data-maxdepth="1" data-caption="SciPy Organization">

core-dev/index api-dev/api-dev-toc governance

</div>

<div class="toctree" hidden="">

contributor/development\_workflow contributor/pep8 contributor/rendering\_documentation contributor/devpy\_test contributor/benchmarking contributor/cython contributor/public\_cython\_api contributor/adding\_new contributor/continuous\_integration contributor/using\_act triage

</div>

---

missing-bits.md

---

- orphan

# Code and Documentation Style Guide - The Missing Bits

This is a collection of coding and documentation guidelines for SciPy that are not explicitly stated in the existing guidelines and standards, including

  - [PEP-8](https://www.python.org/dev/peps/pep-0008) Style Guide for Python Code
  - [PEP-257](https://www.python.org/dev/peps/pep-0257) Docstring Conventions
  - [NumPy docstring standard](https://numpydoc.readthedocs.io/en/latest/format.html)
  - \[NumPy Testing Guidelines \<numpy:reference/testing\>\](NumPy Testing Guidelines \<numpy:reference/testing\>.md)

Some of these are trivial, and might not seem worth discussing, but in many cases, the issue has come up in a pull request review in either the SciPy or NumPy repositories. If a style issue is important enough that a reviewer will require a change before merging, then it is important enough to be documented--at least for cases where the issue can be resolved with a simple rule.

## Coding Style and Guidelines

Note that docstrings should be generally made up of ASCII characters in spite of being Unicode. The following code block from the file `tools/unicode-check.py` tells the linter which additional characters are allowed:

<div class="literalinclude" data-start-after="# BEGIN_INCLUDE_RST" data-end-before="# END_INCLUDE_RST" data-lineno-match="">

../../../tools/unicode-check.py

</div>

### Required keyword names

For new functions or methods with more than a few arguments, all parameters after the first few "obvious" ones should *require* the use of the keyword when given. This is implemented by including `*` at the appropriate point in the signature.

For example, a function `foo` that operates on a single array but that has several optional parameters (say `method`, `flag`, `rtol` and `atol`) would be defined as:

    def foo(x, *, method='basic', flag=False, rtol=1.5e-8, atol=1-12):
        ...

To call `foo`, all parameters other than `x` must be given with an explicit keyword, e.g. `foo(arr, rtol=1e-12, method='better')`.

This forces callers to give explicit keyword parameters (which most users would probably do anyway even without the use of `*`), *and* it means additional parameters can be added to the function anywhere after the `*`; new parameters do not have to be added after the existing parameters.

### Return Objects

For new functions or methods that return two or more conceptually distinct elements, return the elements in an object type that is not iterable. In particular, do not return a `tuple`, `namedtuple`, or a "bunch" produced by `scipy._lib._bunch.make_tuple_bunch`, the latter being reserved for adding new attributes to iterables returned by existing functions. Instead, use an existing return class (e.g. <span class="title-ref">\~scipy.optimize.OptimizeResult</span>), a new, custom return class.

This practice of returning non-iterable objects forces callers to be more explicit about the element of the returned object that they wish to access, and it makes it easier to extend the function or method in a backward compatible way.

If the return class is simple and not public (i.e. importable from a public module), it may be documented like:

    Returns
    -------
    res : MyResultObject
        An object with attributes:
    
        attribute1 : ndarray
            Customized description of attribute 1.
        attribute2 : ndarray
            Customized description of attribute 2.

Here "MyResultObject" above does not link to external documentation because it is simple enough to fully document all attributes immediately below its name.

Some return classes are sufficiently complex to deserve their own rendered documentation. This is fairly standard if the return class is public, but return classes should only be public if 1) they are intended to be imported by end-users and 2) if they have been approved by the forum. For complex, private return classes, please see how <span class="title-ref">\~scipy.stats.binomtest</span> summarizes <span class="title-ref">\~scipy.stats.\_result\_classes.BinomTestResult</span> and links to its documentation, and note that `BinomTestResult` cannot be imported from <span class="title-ref">\~scipy.stats</span>.

Depending on the complexity of "MyResultObject", a normal class or a dataclass can be used. When using dataclasses, do not use `dataclasses.make_dataclass`, instead use a proper declaration. This allows autocompletion to list all the attributes of the result object and improves static analysis. Finally, hide private attributes if any:

    @dataclass
    class MyResultObject:
        statistic: np.ndarray
        pvalue: np.ndarray
        confidence_interval: ConfidenceInterval
        _rho: np.ndarray = field(repr=False)

### Test functions from <span class="title-ref">numpy.testing</span>

In new code, don't use <span class="title-ref">assert\_almost\_equal</span>, <span class="title-ref">assert\_approx\_equal</span> or <span class="title-ref">assert\_array\_almost\_equal</span>. This is from the docstrings of these functions:

    It is recommended to use one of `assert_allclose`,
    `assert_array_almost_equal_nulp` or `assert_array_max_ulp`
    instead of this function for more consistent floating point
    comparisons.

For more information about writing unit tests, see the \[NumPy Testing Guidelines \<numpy:reference/testing\>\](NumPy Testing Guidelines \<numpy:reference/testing\>.md).

### Testing expected exceptions/ warnings

When writing a new test that a function call raises an exception or emits a warning, the preferred style is to use `pytest.raises`/`pytest.warns` as a context manager, with the code that is supposed to raise the exception in the code block defined by the context manager. The `match` keyword argument is given with enough of the expected message attached to the exception/warning to distinguish it from other exceptions/warnings of the same class. Do not use `np.testing.assert_raises` or `np.testing.assert_warns`, as they do not support a `match` parameter.

For example, the function <span class="title-ref">scipy.stats.zmap</span> is supposed to raise a `ValueError` if the input contains `nan` and `nan_policy` is `"raise"`. A test for this is:

    scores = np.array([1, 2, 3])
    compare = np.array([-8, -3, 2, 7, 12, np.nan])
    with pytest.raises(ValueError, match='input contains nan'):
        stats.zmap(scores, compare, nan_policy='raise')

The `match` argument ensures that the test doesn't pass by raising a `ValueError` that is not related to the input containing `nan`.

---

roadmap-detailed.md

---

# Detailed SciPy Roadmap

Most of this roadmap is intended to provide a high-level view on what is most needed per SciPy submodule in terms of new functionality, bug fixes, etc. Besides important "business as usual" changes, it contains ideas for major new features - those are marked as such, and are expected to take significant dedicated effort. Things not mentioned in this roadmap are not necessarily unimportant or out of scope, however we (the SciPy developers) want to provide to our users and contributors a clear picture of where SciPy is going and where help is needed most.

<div class="note">

<div class="title">

Note

</div>

This is the detailed roadmap. A very high-level overview with only the most important ideas is \[scipy-roadmap\](\#scipy-roadmap).

</div>

## General

This roadmap will be evolving together with SciPy. Updates can be submitted as pull requests. For large or disruptive changes you may want to discuss those first on the scipy-dev forum.

### API changes

In general, we want to evolve the API to remove known warts as much as possible, *however as much as possible without breaking backwards compatibility*.

### Test coverage

Test coverage of code added in the last few years is quite good, and we aim for a high coverage for all new code that is added. However, there is still a significant amount of old code for which coverage is poor. Bringing that up to the current standard is probably not realistic, but we should plug the biggest holes.

Besides coverage there is also the issue of correctness - older code may have a few tests that provide decent statement coverage, but that doesn't necessarily say much about whether the code does what it says on the box. Therefore code review of some parts of the code (`stats`, `signal` and `ndimage` in particular) is necessary.

### Documentation

The documentation is in good shape. Expanding of current docstrings - adding examples, references, and better explanations - should continue. Most modules also have a tutorial in the reference guide that is a good introduction, however there are a few missing or incomplete tutorials - this should be fixed.

### Benchmarks

The `asv`-based benchmark system is in reasonable shape. It is quite easy to add new benchmarks, however running the benchmarks is not very intuitive. Making this easier is a priority.

### Use of Cython

Cython's old syntax for using NumPy arrays should be removed and replaced with Cython memoryviews.

Binary sizes of extensions built from Cython code are large, and compile times are long. We should aim to combine extension modules where possible (e.g., `stats._boost` contains many extension modules now), and limit the use of Cython to places where it's the best choice. Note that conversion of Cython to C++ is ongoing in `scipy.special`.

### Use of Pythran

Pythran is still an optional build dependency, and can be disabled with `-Duse-pythran=false`. The aim is to make it a hard dependency - for that to happen it must be clear that the maintenance burden is low enough.

### Use of venerable Fortran libraries

SciPy owes a lot of its success to relying on wrapping well established Fortran libraries (QUADPACK, FITPACK, ODRPACK, ODEPACK etc). Some of these libraries are aging well, others less so. We should audit our use of these libraries with respect to the maintenance effort, the functionality, and the existence of (possibly partial) alternatives, *including those inside SciPy*.

### Continuous integration

Continuous integration currently covers 32/64-bit Windows, macOS on x86-64/arm, 32/64-bit Linux on x86, and Linux on aarch64 - as well as a range of versions of our dependencies and building release quality wheels. Reliability of CI has not been good recently (H1 2023), due to the large amount of configurations to support and some CI jobs needing an overhaul. We aim to reduce build times by removing the remaining distutils-based jobs when we drop that build system and make the set of configurations in CI jobs more orthogonal.

### Size of binaries

SciPy binaries are quite large (e.g. an unzipped manylinux wheel for 1.7.3 is 39 MB on PyPI and 122 MB after installation), and this can be problematic - for example for use in AWS Lambda, which has a 250 MB size limit. We aim to keep binary size as low as possible; when adding new compiled extensions, this needs checking. Stripping of debug symbols in `multibuild` can perhaps be improved (see [this issue](https://github.com/multi-build/multibuild/issues/162)). An effort should be made to slim down where possible, and not add new large files. In the future, things that are being considered (very tentatively) and may help are separating out the bundled\` `libopenblas` and removing support for `long double`.

## Modules

### cluster

`dendrogram` needs a rewrite, it has a number of hard to fix open issues and feature requests.

### constants

This module is basically done, low-maintenance and without open issues.

### fft

This module is in good shape.

### integrate

Needed for ODE solvers:

  - Documentation is pretty bad, needs fixing
  - A new ODE solver interface (`solve_ivp`) was added in SciPy 1.0.0. In the future we can consider (soft-)deprecating the older API.

The numerical integration functions are in good shape. Support for integrating complex-valued functions and integrating multiple intervals (see [gh-3325](https://github.com/scipy/scipy/issues/3325)) could be added.

### interpolate

*Spline fitting*: we need spline fitting routines with better user control. This includes

>   - user-selectable alternatives for the smoothing criteria (manual, cross-validation etc); gh-16653 makes a start in this direction;
>   - several strategies for knot placement, both manual and automatic (using algorithms by Dierckx, de Boor, possibly other).

Once we have a reasonably feature complete set, we can start taking a long look at the future of the venerable FITPACK Fortran library, which currently is the only way of constructing smoothing splines in SciPy.

*Scalability and performance*: For the FITPACK-based functionality, the data size is limited by 32-bit Fortran integer size (for non-ILP64 builds). For N-D scattered interpolators (which are QHull based) and N-D regular grid interpolators we need to check performance on large data sets and improve where lacking (gh-16483 makes progress in this direction).

*Ideas for new features*: NURBS support could be added.

### io

wavfile:

  - PCM float will be supported, for anything else use `audiolab` or other specialized libraries.
  - Raise errors instead of warnings if data not understood.

Other sub-modules (matlab, netcdf, idl, harwell-boeing, arff, matrix market) are in good shape.

### linalg

`scipy.linalg` is in good shape.

Needed:

  - Reduce duplication of functions with `numpy.linalg`, make APIs consistent.
  - `get_lapack_funcs` should always use `flapack`
  - Wrap more LAPACK functions
  - One too many funcs for LU decomposition, remove one

Ideas for new features:

  - Add type-generic wrappers in the Cython BLAS and LAPACK
  - Make many of the linear algebra routines into gufuncs

**BLAS and LAPACK**

The Python and Cython interfaces to BLAS and LAPACK in `scipy.linalg` are one of the most important things that SciPy provides. In general `scipy.linalg` is in good shape, however we can make a number of improvements:

1.  Library support. Our released wheels now ship with OpenBLAS, which is currently the only feasible performant option (ATLAS is too slow, MKL cannot be the default due to licensing issues, Accelerate support is dropped because Apple doesn't update Accelerate anymore). OpenBLAS isn't very stable though, sometimes its releases break things and it has issues with threading (currently the only issue for using SciPy with PyPy3). We need at the very least better support for debugging OpenBLAS issues, and better documentation on how to build SciPy with it. An option is to use BLIS for a BLAS interface (see [numpy gh-7372](https://github.com/numpy/numpy/issues/7372)).
2.  Support for newer LAPACK features. In SciPy 1.2.0 we increased the minimum supported version of LAPACK to 3.4.0. Now that we dropped Python 2.7, we can increase that version further (MKL + Python 2.7 was the blocker for \>3.4.0 previously) and start adding support for new features in LAPACK.

### misc

`scipy.misc` will be removed as a public module. Most functions in it have been moved to another submodule or deprecated. The few that are left:

  - `derivative`, `central_diff_weight` : remove, possibly replacing them with more extensive functionality for numerical differentiation.
  - `ascent`, `face`, `electrocardiogram` : remove or move to the appropriate subpackages (e.g. `scipy.ndimage`, `scipy.signal`).

### ndimage

Underlying `ndimage` is a powerful interpolation engine. Users come with an expectation of one of two models: a pixel model with `(1, 1)` elements having centers `(0.5, 0.5)`, or a data point model, where values are defined at points on a grid. Over time, we've become convinced that the data point model is better defined and easier to implement, but this should be clearly communicated in the documentation.

More importantly, still, SciPy implements one *variant* of this data point model, where datapoints at any two extremes of an axis share a spatial location under *periodic wrapping* mode. E.g., in a 1D array, you would have `x[0]` and `x[-1]` co-located. A very common use-case, however, is for signals to be periodic, with equal spacing between the first and last element along an axis (instead of zero spacing). Wrapping modes for this use-case were added in [gh-8537](https://github.com/scipy/scipy/pull/8537), next the interpolation routines should be updated to use those modes. This should address several issues, including gh-1323, gh-1903, gh-2045 and gh-2640.

The morphology interface needs to be standardized:

  - binary dilation/erosion/opening/closing take a "structure" argument, whereas their grey equivalent take size (has to be a tuple, not a scalar), footprint, or structure.
  - a scalar should be acceptable for size, equivalent to providing that same value for each axis.
  - for binary dilation/erosion/opening/closing, the structuring element is optional, whereas it's mandatory for grey. Grey morphology operations should get the same default.
  - other filters should also take that default value where possible.

### odr

This module is in reasonable shape, although it could use a bit more maintenance. No major plans or wishes here.

### optimize

Overall this module is in good shape. Two good global optimizers were added in 1.2.0; large-scale optimizers is still a gap that could be filled. Other things that are needed:

  - Many ideas for additional functionality (e.g. integer constraints) in `linprog`, see [gh-9269](https://github.com/scipy/scipy/issues/9269).
  - Add functionality to the benchmark suite to compare results more easily (e.g. with summary plots).
  - deprecate the `fmin_*` functions in the documentation, `minimize` is preferred.
  - `scipy.optimize` has an extensive set of benchmarks for accuracy and speed of the global optimizers. That has allowed adding new optimizers (`shgo` and `dual_annealing`) with significantly better performance than the existing ones. The `optimize` benchmark system itself is slow and hard to use however; we need to make it faster and make it easier to compare performance of optimizers via plotting performance profiles.

### signal

*Convolution and correlation*: (Relevant functions are convolve, correlate, fftconvolve, convolve2d, correlate2d, and sepfir2d.) Eliminate the overlap with <span class="title-ref">ndimage</span> (and elsewhere). From `numpy`, `scipy.signal` and `scipy.ndimage` (and anywhere else we find them), pick the "best of class" for 1-D, 2-D and n-d convolution and correlation, put the implementation somewhere, and use that consistently throughout SciPy.

*B-splines*: (Relevant functions are gauss\_spline, cspline1d, qspline1d, cspline2d, qspline2d, cspline1d\_eval, and spline\_filter.) Move the good stuff to <span class="title-ref">interpolate</span> (with appropriate API changes to match how things are done in <span class="title-ref">interpolate</span>), and eliminate any duplication.

*Filter design*: merge <span class="title-ref">firwin</span> and <span class="title-ref">firwin2</span> so <span class="title-ref">firwin2</span> can be removed.

*Continuous-Time Linear Systems*: Further improve the performance of `ltisys` (fewer internal transformations between different representations). Fill gaps in lti system conversion functions.

*Second Order Sections*: Make SOS filtering equally capable as existing methods. This includes ltisys objects, an <span class="title-ref">lfiltic</span> equivalent, and numerically stable conversions to and from other filter representations. SOS filters could be considered as the default filtering method for ltisys objects, for their numerical stability.

### sparse

The sparse matrix formats are mostly feature-complete, however the main issue is that they act like `numpy.matrix` (which will be deprecated in NumPy at some point).

What we want is sparse arrays that act like `numpy.ndarray`. Initial support for a new set of classes (`csr_array` et al.) was added in SciPy `1.8.0` and stabilized in `1.12.0` when construction functions for arrays were added. Support for 1-D array is expected in `1.13.0`.

Next steps toward sparse array support:

  -   - Extend sparse array API to 1-D arrays.
        
          - Support for COO, CSR and DOK formats.
          - CSR 1D support for min-max, indexing, arithmetic.

  - Help other libraries convert to sparse arrays from sparse matrices. Create transition guide and helpful scripts to flag code that needs further examination. NetworkX, scikit-learn and scikit-image are in progress or have completed conversion to sparse arrays.

  - After sparse array code is mature (\~1 release cycle?) add deprecation warnings for sparse matrix.

  - Work with NumPy on deprecation/removal of `numpy.matrix`.

  - Deprecate and then remove sparse matrix in favor of sparse array.

  -   - Start API shift of construction function names (`diags`, `block`, etc.)
        
          - Note: as a whole, the construction functions undergo two name shifts. Once to move from matrix creation to new functions for array creation (i.e. `eye` -\> `eye_array`). Then a second move to change names to match the `array_api` name (i.e. `eye_array` to `eye`) after sparse matrices are removed. We will keep the `*_array` versions for a long time as (maybe hidden) aliases.

  - Add construction function names matching `array_api` names.

  - Deprecate the transition construction function names.

An alternative (more ambitious, and unclear if it will materialize) plan is being worked on in <https://github.com/pydata/sparse>. To support that effort we aim to support PyData Sparse in all functions that accept sparse arrays. Support for `pydata/sparse` in `scipy.sparse.linalg` and `scipy.sparse.csgraph` is mostly complete.

Regarding the different sparse matrix formats: there are a lot of them. These should be kept, but improvements/optimizations should go into CSR/CSC, which are the preferred formats. LIL may be the exception, it's inherently inefficient. It could be dropped if DOK is extended to support all the operations LIL currently provides.

### sparse.csgraph

This module is in good shape.

### sparse.linalg

There are a significant number of open issues for `_arpack` and `lobpcg`. `_propack` is new in 1.8.0, TBD how robust it will turn out to be.

`_isolve`:

  - callback keyword is inconsistent
  - tol keyword is broken, should be relative tol
  - Fortran code not re-entrant (but we don't solve, maybe reuse from PyKrilov)

`_dsolve`:

  - add license-compatible sparse Cholesky or incomplete Cholesky
  - add license-compatible sparse QR
  - improve interface to SuiteSparse UMFPACK
  - add interfaces to SuiteSparse CHOLMOD and SPQR

### spatial

QHull wrappers are in good shape, as is `KDTree`.

A rewrite of `spatial.distance` metrics in C++ is in progress - this should improve performance, make behaviour (e.g., for various non-float64 input dtypes) more consistent, and fix a few remaining issues with definitions of the math implement by a few of the metrics.

### special

Though there are still a lot of functions that need improvements in precision, probably the only show-stoppers are hypergeometric functions, parabolic cylinder functions, and spheroidal wave functions. Three possible ways to handle this:

1.  Get good double-precision implementations. This is doable for parabolic cylinder functions (in progress). I think it's possible for hypergeometric functions, though maybe not in time. For spheroidal wavefunctions this is not possible with current theory.
2.  Port Boost's arbitrary precision library and use it under the hood to get double precision accuracy. This might be necessary as a stopgap measure for hypergeometric functions; the idea of using arbitrary precision has been suggested before by @nmayorov and in [gh-5349](https://github.com/scipy/scipy/issues/5349). Likely necessary for spheroidal wave functions, this could be reused: <https://github.com/radelman/scattering>.
3.  Add clear warnings to the documentation about the limits of the existing implementations.

### stats

The `scipy.stats` subpackage aims to provide fundamental statistical methods as might be covered in standard statistics texts such as Johnson's "Miller & Freund's Probability and Statistics for Engineers", Sokal & Rohlf's "Biometry", or Zar's "Biostatistical Analysis". It does not seek to duplicate the advanced functionality of downstream packages (e.g. StatsModels, LinearModels, PyMC3); instead, it can provide a solid foundation on which they can build. (Note that these are rough guidelines, not strict rules. "Advanced" is an ill-defined and subjective term, and "advanced" methods may also be included in SciPy, especially if no other widely used and well-supported package covers the topic. Also note that *some* duplication with downstream projects is inevitable and not necessarily a bad thing.)

In addition to the items described in the \[scipy-roadmap\](\#scipy-roadmap), the following improvements will help SciPy better serve this role.

  - Add fundamental and widely used hypothesis tests, such as:
    
      - post hoc tests (e.g. Dunnett's test)
      - the various types of analysis of variance (ANOVA):
          - two-way ANOVA (single replicate, uniform number of replicates, variable number of replicates)
          - multiway ANOVA (i.e. generalize two-way ANOVA)
          - nested ANOVA
          - analysis of covariance (ANCOVA)
    
    Also, provide an infrastructure for implementing hypothesis tests.

  - Add additional tools for meta-analysis

  - Add tools for survival analysis

  - Speed up random variate sampling (method `rvs`) of distributions, leveraging `scipy.stats.sampling` where appropriate

  - Expand QMC capabilities and performance

  - Enhance the <span class="title-ref">fit</span> method of the continuous probability distributions:
    
      - Expand the options for fitting to include:
          - maximal product spacings
          - method of L-moments / probability weighted moments
      - Include measures of goodness-of-fit in the results
      - Handle censored data (e.g. merge [gh-13699](https://github.com/scipy/scipy/pull/13699))

  - Implement additional widely used continuous and discrete probability distributions, e.g. mixture distributions.

  - Improve the core calculations provided by SciPy's probability distributions so they can robustly handle wide ranges of parameter values. Specifically, replace many of the PDF and CDF methods from the Fortran library CDFLIB used in `scipy.special` with Boost implementations as in [gh-13328](https://github.com/scipy/scipy/pull/13328).

In addition, we should:

  - Continue work on making the function signatures of `stats` and `stats.mstats` more consistent, and add tests to ensure that that remains the case.
  - Improve statistical tests: return confidence intervals for the test statistic, and implement exact p-value calculations - considering the possibility of ties - where computationally feasible.

---

roadmap.md

---

# SciPy Roadmap

This roadmap page contains only the most important ideas and needs for SciPy going forward. For a more detailed roadmap, including per-subpackage status, many more ideas, API stability and more, see \[scipy-roadmap-detailed\](\#scipy-roadmap-detailed).

## Support for distributed arrays and GPU arrays

NumPy has split its API from its execution engine with `__array_function__` and `__array_ufunc__`. This will enable parts of SciPy to accept distributed arrays (e.g. `dask.array.Array`) and GPU arrays (e.g. `cupy.ndarray`) that implement the `ndarray` interface. At the moment it is not yet clear which algorithms will work out of the box, and if there are significant performance gains when they do. We want to create a map of which parts of the SciPy API work, and improve support over time.

In addition to making use of NumPy protocols like `__array_function__`, we can make use of these protocols in SciPy as well. That will make it possible to (re)implement SciPy functions like, e.g., those in `scipy.signal` for Dask or GPU arrays (see [NEP 18 - use outside of NumPy](http://www.numpy.org/neps/nep-0018-array-function-protocol.html#use-outside-of-numpy)). NumPy's features in this areas are still evolving, see e.g. [NEP 37 - A dispatch protocol for NumPy-like modules](https://numpy.org/neps/nep-0037-array-module.html), and SciPy is an important "client" for those features.

## Performance improvements

Speed improvements, lower memory usage and the ability to parallelize algorithms are beneficial to most science domains and use cases. We have established an API design pattern for multiprocessing - using the `workers` keyword - that can be adopted in many more functions.

Enabling the use of an accelerator like Pythran, possibly via Transonic, and making it easier for users to use Numba's `@njit` in their code that relies on SciPy functionality would unlock a lot of performance gain. That needs a strategy though, all solutions are still maturing (see for example [this overview](https://fluiddyn.netlify.app/transonic-vision.html)).

Finally, many individual functions can be optimized for performance. `scipy.optimize` and `scipy.interpolate` functions are particularly often requested in this respect.

## Statistics enhancements

The following <span class="title-ref">scipy.stats</span> enhancements and those listed in the \[scipy-roadmap-detailed\](\#scipy-roadmap-detailed) are of particularly high importance to the project.

  - Overhaul the univariate distribution infrastructure to address longstanding issues (e.g. see [gh-15928](https://github.com/scipy/scipy/issues/15928).)
  - Consistently handle `nan_policy`, `axis` arguments, and masked arrays in `stats` functions (where appropriate).

## Support for more hardware platforms

SciPy now has continuous integration for ARM64 (or `aarch64`) and POWER8/9 (or `ppc64le`), and binaries are available via [Miniforge](https://github.com/conda-forge/miniforge). Wheels on PyPI for these platforms are now also possible (with the `manylinux2014` standard), and requests for those are becoming more frequent.

Additionally, having IBM Z (or `s390x`) in CI is now possible with TravisCI but not yet done - and `manylinux2014` wheels for that platform are also possible then. Finally, resolving open AIX build issues would help users.

## Implement sparse arrays in addition to sparse matrices

The sparse matrix formats are mostly feature-complete, however the main issue is that they act like `numpy.matrix` (which will be deprecated in NumPy at some point). What we want is sparse *arrays* that act like `numpy.ndarray` (See discussion at [gh-18915](https://github.com/scipy/scipy/issues/18915)). Sparse arrays have largely been implemented in `scipy.sparse` at this time. Some functionality is still being completed. The future plan is:

  -   - Provide a feature-complete sparse array API (including 1D-array).
        
          -   - Extend sparse array API to 1D arrays:
                
                  - COO, CSR and DOK formats.
                  - The CSR 1D format uses 2D CSR code to do 1D things like indexing/min-max/arithmetic.

  - Help other libraries convert to sparse arrays from sparse matrices. Create transition guide and helpful scripts to flag code that needs changing.

  - Deprecate and then remove "sparse matrix" in favor of "sparse array".

  - Work with NumPy on deprecation/removal of `numpy.matrix`.

---

toolchain.md

---

# Toolchain Roadmap

The use of the SciPy library requires (or optionally depends upon) several other libraries in order to operate, the main dependencies being Python and NumPy. It requires a larger collection of libraries and tools in order to build the library or to build the documentation.

Of course, the tooling and libraries are themselves not static. This document aims to provide a guide as to how SciPy's use of these dynamic dependencies will proceed over time.

SciPy aims to be compatible with a number of releases of its dependent libraries and tools. Forcing the user base to upgrade other components for every release would greatly diminish the value of SciPy. However, maintaining backwards compatibility with very old tooling/libraries imposes limitations on which newer functionalities and capabilities can be incorporated. SciPy takes a somewhat conservative approach, maintaining compatibility with several major releases of Python and NumPy on the major platforms. (That may in and of itself impose further restrictions. See the C Compilers section for an example.)

  - First and foremost, SciPy is a Python project, hence it requires a Python environment.
  - BLAS and LAPACK numerical libraries need to be installed.
  - Compilers for C, C++, Fortran code are needed, as well as for Cython & Pythran (the latter is opt-out currently)
  - The Python environment needs the `numpy` package to be installed.
  - Testing requires the `pytest` and `hypothesis` Python packages.
  - Building the documentation requires the `matplotlib`, Sphinx and [MyST-NB](https://myst-nb.readthedocs.io/) packages along with PyData theme.

The tooling used to build CPython has some implications for the tooling used in building SciPy. It also has implications for the examples used in the documentation (e.g., docstrings for functions), as these examples can only use functionality present in all supported configurations.

## Building SciPy

### Python Versions

SciPy is compatible with several versions of Python. When dropping support for older Python versions, SciPy takes guidance from [\[NEP29\]](#NEP29). Generally, support for the oldest Python version is dropped 42 months after the original release. Following the acceptance of PEP 602, this mostly happens in April, and gets picked up by the mid-year release of SciPy.

<div class="dropdown">

Python version support over time

Python 2.7 support was dropped starting from SciPy 1.3.

<table>
<thead>
<tr class="header">
<th>Date</th>
<th>Pythons supported</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>2024</p>
</blockquote></td>
<td><blockquote>
<p>Py3.10+</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2023</p>
</blockquote></td>
<td><blockquote>
<p>Py3.9+</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>2022</p>
</blockquote></td>
<td><blockquote>
<p>Py3.8+</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2021</p>
</blockquote></td>
<td><blockquote>
<p>Py3.7+</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>2020</p>
</blockquote></td>
<td><blockquote>
<p>Py3.6+</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2019</p>
</blockquote></td>
<td><blockquote>
<p>Py3.5+</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>2018</p>
</blockquote></td>
<td><blockquote>
<p>Py2.7, Py3.4+</p>
</blockquote></td>
</tr>
</tbody>
</table>

</div>

### NumPy

SciPy depends on NumPy but releases of SciPy are not tied to releases of NumPy. SciPy attempts to be compatible with at least the 4 previous releases of NumPy. In particular, SciPy cannot rely on features of just the latest NumPy, but needs to be written using what is common in all of those 4 [NumPy releases](https://numpy.org/doc/stable/release.html).

<div class="dropdown">

Python and NumPy version support per SciPy version

The table shows the NumPy versions suitable for each major Python version. This table does not distinguish SciPy patch versions (e.g. when a new Python version is released, SciPy will generally issue a compatible patch version).

<table>
<thead>
<tr class="header">
<th>SciPy version</th>
<th>Python versions</th>
<th>NumPy versions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>1.13</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.9, &lt;3.13</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.22.4, &lt;2.3.0</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.12</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.9, &lt;3.13</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.22.4, &lt;2.0.0</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.11</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.9, &lt;3.13</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.21.6, &lt;1.27.0</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.10</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.8, &lt;3.12</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.19.5, &lt;1.26.0</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.9</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.8, &lt;3.12</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.18.5, &lt;1.26.0</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.8</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.8, &lt;3.11</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.17.3, &lt;1.24.0</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.7</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.7, &lt;3.11</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.16.5, &lt;1.23.0</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.6</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.7, &lt;3.10</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.16.5, &lt;1.21.0</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.5</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.6, &lt;3.10</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.14.5, &lt;1.20.0</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.4</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=3.5, &lt;3.9</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.13.3, &lt;1.18.0</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.2</p>
</blockquote></td>
<td><blockquote>
<p>2.7, &gt;=3.4, &lt;3.8</p>
</blockquote></td>
<td><blockquote>
<p>&gt;=1.8.2, &lt;1.17.0</p>
</blockquote></td>
</tr>
</tbody>
</table>

</div>

In specific cases, such as a particular architecture, these requirements could vary. Please check the [release notes](https://scipy.github.io/devdocs/release.html) and the meta-package `oldest-supported-numpy` for more info [\[OSN\]](#OSN).

### Compilers

Building SciPy requires compilers for C, C++, Fortran, as well as the python transpilers Cython and Pythran (the latter is an opt-out dependency starting from version 1.7.0).

To maintain compatibility with a large number of platforms & setups, especially where using the official wheels (or other distribution channels like Anaconda or conda-forge) is not possible, SciPy tries to keep compatibility with older compilers, on platforms that have not yet reached their official end-of-life.

As explained in more detail below, the current minimal compiler versions are:

<table>
<thead>
<tr class="header">
<th>Compiler</th>
<th>Default Platform (tested)</th>
<th>Secondary Platform (untested)</th>
<th>Minimal Version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>GCC</p>
</blockquote></td>
<td><blockquote>
<p>Linux</p>
</blockquote></td>
<td><blockquote>
<p>AIX, Alpine Linux, OSX</p>
</blockquote></td>
<td><blockquote>
<p>GCC 9.x</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>LLVM</p>
</blockquote></td>
<td><blockquote>
<p>OSX</p>
</blockquote></td>
<td><blockquote>
<p>Linux, FreeBSD, Windows</p>
</blockquote></td>
<td><blockquote>
<p>LLVM 12.x</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>MSVC</p>
</blockquote></td>
<td><blockquote>
<p>Windows</p>
</blockquote></td>
<td><blockquote>
<ul>
<li></li>
</ul>
</blockquote></td>
<td><blockquote>
<p>Visual Studio 2019 (vc142)</p>
</blockquote></td>
</tr>
</tbody>
</table>

Note that there is currently no dedicated CI job to test the minimum supported LLVM/Clang version. Older versions than used in SciPy CI should work, as long as they support core (non-stdlib) C++17. Please file an issue if you encounter a problem during compilation.

#### Official Builds

Currently, SciPy wheels are being built as follows:

<table>
<thead>
<tr class="header">
<th>Platform</th>
<th><a href="https://github.com/actions/runner-images">CI</a> <a href="https://cirrus-ci.org/guide/docker-builder-vm/#under-the-hood">Base</a> <a href="https://github.com/orgs/cirruslabs/packages?tab=packages&amp;q=macos">Images</a></th>
<th>Compilers</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>Linux x86</p>
</blockquote></td>
<td><blockquote>
<p><code>ubuntu-22.04</code></p>
</blockquote></td>
<td><blockquote>
<p>GCC 10.2.1</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>Linux arm</p>
</blockquote></td>
<td><blockquote>
<p><code>docker-builder-arm64</code></p>
</blockquote></td>
<td><blockquote>
<p>GCC 11.3.0</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>OSX x86_64 (OpenBLAS)</p>
</blockquote></td>
<td><blockquote>
<p><code>macos-12</code></p>
</blockquote></td>
<td><blockquote>
<p>Apple clang 13.1.6/gfortran 11.3.0</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>OSX x86_64 (Accelerate)</p>
</blockquote></td>
<td><blockquote>
<p><code>macos-13</code></p>
</blockquote></td>
<td><blockquote>
<p>Apple clang 15.0.0/gfortran 13.2.0</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>OSX arm64 (OpenBLAS)</p>
</blockquote></td>
<td><blockquote>
<p><code>macos-14</code></p>
</blockquote></td>
<td><blockquote>
<p>Apple clang 15.0.0/gfortran 12.1.0</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>OSX arm64 (Accelerate)</p>
</blockquote></td>
<td><blockquote>
<p><code>macos-14</code></p>
</blockquote></td>
<td><blockquote>
<p>Apple clang 15.0.0/gfortran 13.2.0</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>Windows</p>
</blockquote></td>
<td><blockquote>
<p><code>windows-2019</code></p>
</blockquote></td>
<td><blockquote>
<p>GCC 10.3.0 (<a href="https://community.chocolatey.org/packages/rtools#versionhistory">rtools</a>)</p>
</blockquote></td>
<td><blockquote>
<p><code>cibuildwheel</code></p>
</blockquote></td>
</tr>
</tbody>
</table>

Note that the OSX wheels additionally vendor gfortran 11.3.0 for x86\_64, and gfortran 12.1.0 for arm64. See `tools/wheels/cibw_before_build_macos.sh`.

#### C Compilers

SciPy is compatible with most modern C compilers (in particular `clang`). Nowadays, there is reasonable support for recent C language standards across all relevant compilers, though this is very different from how things used to be. The following paragraphs primarily discuss the evolution of these constraints; readers who do not care about historical context can skip ahead to the table at the end.

<div class="dropdown">

Historical context around ABI vs. compiler support vs. C standards

In the past, the most restrictive compiler on relevant platforms in terms of C support was the Microsoft Visual C++ compiler & toolset (together known as MSVC; it has a complicated [version scheme](https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering)) [\[MSVC\]](#MSVC). Up until Visual Studio 2013, each MSVC version came with an updated C Runtime (CRT) library that was incompatible with the previous ones.

This lack of compatibility of the Application Binary Interface (ABI) meant that all projects wanting to communicate across this interface (e.g. calling a function from a shared library) needed to be (re)compiled with the same MSVC version. The long support of CPython 2.7 meant that python itself was stuck for a long time with VS 2008 (in order not to break the ABI in patch releases), and thus SciPy was stuck on that version as well.

The use of VS 2008 (which doesn't have support for C99) to compile builds for CPython 2.7 meant for a long time that C code in SciPy has had to conform to the earlier C90 standard for the language and standard library. After dropping support for CPython 2.7 in SciPy 1.3.x, that restriction was finally lifted (though only gradually at first).

With the introduction of the "Universal C Runtime" [\[UCRT\]](#UCRT) since the release of Visual Studio 2015, the ABI of C Runtime has been stable, which means that the restriction of having to use the same compiler version for SciPy as for the underlying CPython version is no longer applicable. This stability is not indefinite though: Microsoft has been planning an ABI-breaking release - across the compiler resp. C/C++ standard libraries -(tentatively called "[vNext](https://github.com/microsoft/STL/issues/169)") for quite a while, but so far it is unclear when this will arrive. Once that happens, SciPy will again be restricted to at most the last ABI-compatible Visual Studio release (currently VS 2022) until all CPython versions supported according to NEP29 have been built upstream with vNext-compatible compilers.

More specifically, there is a distinction between the Microsoft Visual Studio version and the version of the targeted "[toolset](https://docs.microsoft.com/en-us/cpp/build/projects-and-build-systems-cpp#the-msvc-toolset)", which is defined as "The Microsoft C++ compiler, linker, standard libraries, and related utilities". Each version of Visual Studio comes with a default version of the MSVC toolset (for example VS2017 with vc141, VS2019 with vc142), but it is possible to target older toolsets even in newer versions of Visual Studio. Due to the nature of compilers (i.e. split into frontend and backend), it depends whether the limiting factor for supporting a given feature (e.g. in C) is due to the version of Visual Studio or the toolset, but in general the latter is a harder barrier and thus the effective lower bound.

This is due to the fact that while the ABI stays compatible between toolset versions (until vNext), all linking operations must use a toolset at least as new as the one used to build any of the involved artefacts, meaning that toolset version bumps tend to be "infectious", as in: requiring all consuming libraries to also bump their toolset (and probably compiler) version. This is more of an issue for NumPy than SciPy, as the latter has only a small C API and is compiled against by far fewer projects than NumPy. Additionally, using a newer toolset means that users of libraries that compile C++ code (as SciPy does) might also need a newer Microsoft Visual C++ [Redistributable](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist), which might have to be distributed to them.

Summing up, the minimal requirement for the MSVC compiler resp. toolset per SciPy version was determined predominantly by the oldest supported CPython version at the time. The first SciPy version to raise the minimal requirement beyond that was SciPy 1.9, due to the inclusion of the HiGHS submodule, which does not compile with vc141 (and the aggressive removal of VS2017 in public CI making it infeasible to keep ensuring that everything everywhere works with non-default toolset versions).

</div>

<table>
<thead>
<tr class="header">
<th>SciPy version</th>
<th>CPython support</th>
<th>MS Visual C++</th>
<th>Toolset version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>Until 1.2</p>
</blockquote></td>
<td><blockquote>
<p>2.7 &amp; 3.4+</p>
</blockquote></td>
<td><blockquote>
<p>VS 2008 (9.0)</p>
</blockquote></td>
<td><blockquote>
<p>vc90</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.3, 1.4</p>
</blockquote></td>
<td><blockquote>
<p>3.5+</p>
</blockquote></td>
<td><blockquote>
<p>VS 2010 (10.0)</p>
</blockquote></td>
<td><blockquote>
<p>vc100</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.5</p>
</blockquote></td>
<td><blockquote>
<p>3.6+</p>
</blockquote></td>
<td><blockquote>
<p>VS 2015 (14.0)</p>
</blockquote></td>
<td><blockquote>
<p>vc140</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.6, 1.7</p>
</blockquote></td>
<td><blockquote>
<p>3.7+</p>
</blockquote></td>
<td><blockquote>
<p>VS 2017 (14.1)</p>
</blockquote></td>
<td><blockquote>
<p>vc141</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>1.8</p>
</blockquote></td>
<td><blockquote>
<p>3.8+</p>
</blockquote></td>
<td><blockquote>
<p>VS 2017 (14.1)</p>
</blockquote></td>
<td><blockquote>
<p>vc141</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>1.9</p>
</blockquote></td>
<td><blockquote>
<p>3.8+</p>
</blockquote></td>
<td><blockquote>
<p>VS 2019 (14.20)</p>
</blockquote></td>
<td><blockquote>
<p>vc142</p>
</blockquote></td>
</tr>
</tbody>
</table>

In terms of C language standards, it's relevant to note that C11 has [optional features](https://en.wikipedia.org/wiki/C11_%28C_standard_revision%29#Optional_features) (e.g. atomics, threading), some of which (VLAs & complex types) were mandatory in the C99 standard. C17 (occasionally called C18) can be considered a bug fix for C11, so generally, C11 may be skipped entirely.

SciPy has been restricted in the use of more advanced language features by the available compiler support, and Microsoft in particular has taken very long to achieve conformance to C99/C11/C17, however starting from [Visual Studio 16.8](https://docs.microsoft.com/en-us/cpp/overview/visual-cpp-language-conformance#c-standard-library-features-1), C11/C17 is supported (though without the C11 optional features). C99 `<complex.h>` [support](https://developercommunity.visualstudio.com/t/714008) would be particularly interesting for SciPy. However, it's still possible to use complex types on windows, provided that [windows-specific types](https://docs.microsoft.com/en-us/cpp/c-runtime-library/complex-math-support) are used.

Therefore, using C features beyond C90 was only possible insofar as there was support on Windows; however, as of as of the end of 2021, a sufficiently recent compiler is used. This is because GCC & LLVM support all relevant C11 features with the oldest currently used versions, and C17 is just a bugfix for C11, as mentioned above. In short:

<table>
<thead>
<tr class="header">
<th>Date</th>
<th>C Standard</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>&lt;= 2018</p>
</blockquote></td>
<td><blockquote>
<p>C90</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2019</p>
</blockquote></td>
<td><blockquote>
<p>C90 for old code, may consider C99 for new</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>2020</p>
</blockquote></td>
<td><blockquote>
<p>C99 (no <code>&lt;complex.h&gt;</code>, <code>&lt;stdatomic.h&gt;</code>, <code>&lt;threads.h&gt;</code> &amp; VLAs)</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2021</p>
</blockquote></td>
<td><blockquote>
<p>C17 (no <code>&lt;complex.h&gt;</code>, <code>&lt;stdatomic.h&gt;</code>, <code>&lt;threads.h&gt;</code> &amp; VLAs)</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>?</p>
</blockquote></td>
<td><blockquote>
<p>C23, <code>&lt;complex.h&gt;</code>, <code>&lt;stdatomic.h&gt;</code>, ...</p>
</blockquote></td>
</tr>
</tbody>
</table>

#### C++ Language Standards

C++ language standards for SciPy are generally guidelines rather than official decisions. This is particularly true of attempting to predict adoption timelines for newer standards.

<table>
<thead>
<tr class="header">
<th>Date</th>
<th>C++ Standard</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>&lt;= 2019</p>
</blockquote></td>
<td><blockquote>
<p>C++03</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2020</p>
</blockquote></td>
<td><blockquote>
<p>C++11</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>2021</p>
</blockquote></td>
<td><blockquote>
<p>C++14</p>
</blockquote></td>
</tr>
<tr class="even">
<td><blockquote>
<p>2022</p>
</blockquote></td>
<td><blockquote>
<p>C++17 (core language + universally available stdlib features)</p>
</blockquote></td>
</tr>
<tr class="odd">
<td><blockquote>
<p>?</p>
</blockquote></td>
<td><blockquote>
<p>C++17 (with full stdlib), C++20, C++23, C++26</p>
</blockquote></td>
</tr>
</tbody>
</table>

<div class="dropdown">

Historical context for compiler constraints due to manylinux

Since dropping support for Python 2.7, C++11 can be used universally, and since dropping Python 3.6, the Visual Studio version (that had previously been stuck with 14.0 due to ABI compatibility with CPython) has been recent enough to support even C++17.

Since the official builds (see above) use a pretty recent version of LLVM, the bottleneck for C++ support is therefore the oldest supported GCC version, where SciPy has been constrained mainly by the version in the oldest supported manylinux versions & images [\[MANY\]](#MANY).

At the end of 2021 (with the final removal of `manylinux1` wheels), the minimal requirement of GCC moved to 6.3, which has full C++14 support [\[CPP\]](#CPP). This corresponded to the lowest-present GCC version in relevant manylinux versions, though this was still considering the Debian-based "outlier" `manylinux_2_24`, which - in contrast to previous manylinux images based on RHEL-derivative CentOS that could benefit from the ABI-compatible GCC backports in the "RHEL Dev Toolset" - was stuck with GCC 6.3. That image failed to take off not least due to those [outdated compilers](https://github.com/pypa/manylinux/issues/1012) and reached its EOL in mid-2022. For different reasons, `manylinux2010` also reached its EOL around the [same time](https://github.com/pypa/manylinux/issues/1281).

The remaining images `manylinux2014` and `manylinux_2_28` currently support GCC 10 and 12, respectively. The latter will continue to receive updates as new GCC versions become available as backports, but the former will likely not change since the CentOS project is not responsive anymore about publishing aarch64 [backports](https://github.com/pypa/manylinux/issues/1266) of GCC 11.

</div>

This leaves all the main platforms and their compilers with comparatively recent versions. However, SciPy has historically also endeavored to support less common platforms as well - if not with binary artefacts (i.e. wheels), then at least by remaining compilable from source - which includes for example AIX, Alpine Linux and FreeBSD.

<div class="dropdown">

Platform support and other constraints on compiler

For AIX 7.2 & 7.3 the default compiler is GCC 10 (AIX 7.1 had its EOL in 2023), but GCC 11/12 is installable [side-by-side](https://www.ibm.com/support/pages/aix-toolbox-open-source-software-downloads-alpha#G), and similarly, there is the LLVM 17-based [Open XL](https://www.ibm.com/docs/en/openxl-c-and-cpp-aix/17.1.2?topic=new-enhanced-llvm-clang-support) for AIX.

The oldest currently-supported [Alpine Linux](https://alpinelinux.org/releases/) release is 3.16, and already [comes with](https://distrowatch.com/table.php?distribution=alpine) GCC 11. For [FreeBSD](https://www.freebsd.org/releases/), the oldest currently-supported [13.x release](https://www.freebsd.org/releases/13.2R/relnotes/) comes with LLVM 14 (and GCC 13 is available as a [freebsd-port](https://ports.freebsd.org/cgi/ports.cgi?query=gcc)).

Finally there is the question of which machines are widely used by people needing to compile SciPy from source for other reasons (e.g. SciPy developers, or people wanting to compile for themselves for performance reasons). The oldest relevant distributions (without RHEL-style backports) are Ubuntu 20.04 LTS (which has GCC 9 but also has a backport of GCC 10; Ubuntu 22.04 LTS has GCC 11) and Debian Bullseye (with GCC 10; Bookworm has GCC 12). This is the weakest restriction for determining the lower bounds of compiler support (power users and developers can be expected to keep their systems at least somewhat up-to-date, or use backports where available), and gradually becomes less important as usage numbers of old distributions dwindle.

</div>

All the currently lowest-supported compiler versions (GCC 9, LLVM 14, VS2019 with vc142) have full support for the C++17 *core language*, which can therefore be used unconditionally. However, as of mid-2024, support for the entirety of the C++17 standard library has not yet been completed across all compilers [\[CPP\]](#CPP), particularly LLVM. It is therefore necessary to check if a given stdlib-feature is supported by all compilers before it can be used in SciPy.

C++20 support is stabilizing very slowly, even aside from modules, coroutines and several not-yet-universally-supported stdlib features. Given how big of a release the C++20 standard was, it is expected that it will take a [while yet](https://discourse.llvm.org/t/rfc-clang-17-0-6-would-be-minimum-version-to-build-llvm-in-c-20/75345/8) before we can start considering moving our baseline. Compiler support for C++23 and C++26 is still under heavy development [\[CPP\]](#CPP).

#### Fortran Compilers

Generally, any well-maintained compiler is likely suitable and can be used to build SciPy. That said, we do not test with old `gfortran` versions, which is why we are matching the lower bound with the one for GCC above.

<table>
<thead>
<tr class="header">
<th>Tool</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>gfortran</td>
<td><blockquote>
<p>&gt;= 9.x</p>
</blockquote></td>
</tr>
<tr class="even">
<td>ifort/ifx</td>
<td><blockquote>
<p>A recent version (not tested in CI)</p>
</blockquote></td>
</tr>
<tr class="odd">
<td>flang (LLVM)</td>
<td><blockquote>
<p>&gt;= 17.x</p>
</blockquote></td>
</tr>
</tbody>
</table>

#### Cython & Pythran

SciPy always requires a recent Cython compiler. Since 1.7, Pythran is a build dependency (currently with the possibility to opt out).

### OpenMP support

For [various reasons](https://github.com/scipy/scipy/issues/10239), SciPy cannot be distributed with built-in OpenMP support. When using the optional Pythran support, OpenMP-enabled parallel code can be generated when building from source.

### Other Libraries

Any library conforming to the BLAS/LAPACK interface may be used. OpenBLAS, ATLAS, MKL, BLIS, and reference Netlib libraries are known to work.

<table>
<thead>
<tr class="header">
<th>Library</th>
<th>Minimum version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>LAPACK</td>
<td><blockquote>
<p>3.7.1</p>
</blockquote></td>
</tr>
<tr class="even">
<td><p>BLAS</p></td>
<td><blockquote>
<p>A recent version of OpenBLAS, MKL or ATLAS. The Accelerate BLAS library is no longer supported.</p>
</blockquote></td>
</tr>
</tbody>
</table>

There are some additional optional dependencies.

<table>
<thead>
<tr class="header">
<th>Library</th>
<th>Version</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>mpmath</td>
<td>Recent</td>
<td><blockquote>
<p><a href="http://mpmath.org/">http://mpmath.org/</a></p>
</blockquote></td>
</tr>
<tr class="even">
<td>scikit-umfpack</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://pypi.org/project/scikit-umfpack/">https://pypi.org/project/scikit-umfpack/</a></p>
</blockquote></td>
</tr>
<tr class="odd">
<td>pooch</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://pypi.org/project/pooch/">https://pypi.org/project/pooch/</a></p>
</blockquote></td>
</tr>
</tbody>
</table>

Moreover, SciPy supports interaction with other libraries. The test suite has additional compatibility tests that are run when these are installed:

<table>
<thead>
<tr class="header">
<th>Tool</th>
<th>Version</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>pydata/sparse</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://github.com/pydata/sparse/">https://github.com/pydata/sparse/</a></p>
</blockquote></td>
</tr>
</tbody>
</table>

## Testing and Benchmarking

Testing and benchmarking require recent versions of:

<table>
<thead>
<tr class="header">
<th>Tool</th>
<th>Version</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>pytest</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a></p>
</blockquote></td>
</tr>
<tr class="even">
<td>Hypothesis</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://hypothesis.readthedocs.io/">https://hypothesis.readthedocs.io/</a></p>
</blockquote></td>
</tr>
<tr class="odd">
<td>asv (airspeed velocity)</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://asv.readthedocs.io/">https://asv.readthedocs.io/</a></p>
</blockquote></td>
</tr>
</tbody>
</table>

## Building the Documentation

| Tool                       | Version                                    |
| -------------------------- | ------------------------------------------ |
| Sphinx                     | Whatever recent versions work. \>= 5.0.    |
| PyData Sphinx theme        | Whatever recent versions work. \>= 0.15.2. |
| Sphinx-Design              | Whatever recent versions work. \>= 0.4.0.  |
| numpydoc                   | Whatever recent versions work. \>= 1.5.0.  |
| matplotlib                 | Generally suggest \>= 3.5.                 |
| MyST-NB                    | Whatever recent versions work. \>= 0.17.1  |
| jupyterlite-sphinx         | Whatever recent versions work. \>= 0.13.1  |
| jupyterlite-pyodide-kernel | Whatever recent versions work. \>= 0.1.0   |

\> **Note** \> Developer Note: The versions of `numpy` and `matplotlib` required have implications for the examples in Python docstrings. Examples must be able to be executed both in the environment used to build the documentation, as well as with any supported versions of `numpy/matplotlib` that a user may use with this release of SciPy.

## Packaging

A Recent version of:

<table>
<thead>
<tr class="header">
<th>Tool</th>
<th>Version</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>setuptools</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://pypi.org/project/setuptools/">https://pypi.org/project/setuptools/</a></p>
</blockquote></td>
</tr>
<tr class="even">
<td>wheel</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://pythonwheels.com">https://pythonwheels.com</a></p>
</blockquote></td>
</tr>
<tr class="odd">
<td>multibuild</td>
<td>Recent</td>
<td><blockquote>
<p><a href="https://github.com/matthew-brett/multibuild">https://github.com/matthew-brett/multibuild</a></p>
</blockquote></td>
</tr>
</tbody>
</table>

\[making-a-release\](\#making-a-release) and \[distributing-a-release\](\#distributing-a-release) contain information on making and distributing a SciPy release.

## References

<div id="citations">

  - <span id="CPP" class="citation-label">CPP</span>  
    <https://en.cppreference.com/w/cpp/compiler_support>

  - <span id="MANY" class="citation-label">MANY</span>  
    <https://github.com/mayeut/pep600_compliance>

  - <span id="MSVC" class="citation-label">MSVC</span>  
    <https://docs.microsoft.com/en-us/cpp/overview/visual-cpp-in-visual-studio>

  - <span id="NEP29" class="citation-label">NEP29</span>  
    <https://numpy.org/neps/nep-0029-deprecation_policy.html>

  - <span id="OSN" class="citation-label">OSN</span>  
    <https://github.com/scipy/oldest-supported-numpy>

  - <span id="UCRT" class="citation-label">UCRT</span>  
    <https://docs.microsoft.com/en-gb/cpp/windows/universal-crt-deployment>

</div>

---

triage.md

---

# Triaging and curating issues

SciPy has many hundreds of open issues. Closing invalid ones and correctly labelling valid ones (ideally with some first thoughts in a comment) allows prioritizing maintenance work and finding related issues easily when working on an existing function or subpackage.

While anyone can comment and give more information on open issues, extra permissions are needed if you want to apply labels to issues in the SciPy repository. While there is no formal process to receive triage rights, the expectation is that someone should be active as a contributor before joining the team.

## Roles and permissions

SciPy uses two levels of permissions: triage and core team members. **Triage members** can label and close issues and pull requests, while **maintainers** can label and close issues and pull request, and can also merge pull requests.

[GitHub publishes the full list of permissions for the platform.](https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-roles-for-an-organization)

## Improving issues

Issue descriptions can be incomplete, inaccurate or outdated. No special permissions are needed to work on improving them - this can be useful and help reduce the workload for maintainers and other contributors. The following actions are typically useful:

  - documenting issues that are missing elements to reproduce the problem such as code samples
  - suggesting to reformulate the title and description to make them more explicit about the problem to be solved
  - linking to related issues or discussions while briefly describing how they are related, for instance “See also \#xyz for a similar attempt at this” provides context and helps the discussion.

Keep in mind that every comment on an issue or pull request creates a notification for a group of people. Be mindful and make use of the edit comment button when necessary.

## Fruitful discussions

Online discussions may be harder than it seems at first glance, in particular given that a person new to open-source may have a very different understanding of the process than a seasoned maintainer.

Overall, it is useful to stay positive and assume good will. [This article](http://gael-varoquaux.info/programming/technical-discussions-are-hard-a-few-tips.html) explores how to lead online discussions in the context of open source. It's also important to remember that all interactions are expected to follow the \[SciPy Code of Conduct \<scipy-coc\>\](\#scipy-code-of-conduct-\<scipy-coc\>).

## Issue labels (requires triage rights)

When an issue or pull request is created, SciPy may automatically assign one or more labels depending on the title or section of the code involved. For example, all issues created with title including the `BUG:` prefix will automatically receive a `defect` label.

In some cases, it may be useful to also include other labels manually. Any person with triage rights can add or remove label as appropriate. Check the [full description of the current labels](https://github.com/scipy/scipy/labels) for more information.

## Other references

  - [scikit-learn's documentation on Bug triaging and issue curation](https://scikit-learn.org/dev/developers/bug_triaging.html)
  - [pandas documentation on Issue triage](https://pandas.pydata.org/docs/development/maintaining.html)

---

index.md

---

- html\_theme.sidebar\_secondary.remove  
    true

<div class="module">

scipy

</div>

# SciPy documentation

**Date**: **Version**:

**Download documentation**: <https://docs.scipy.org/doc/>

**Useful links**: [Install](https://scipy.org/install/) | [Source Repository](https://github.com/scipy/scipy) | [Issues & Ideas](https://github.com/scipy/scipy/issues) | [Q\&A Support](https://stackoverflow.com/questions/tagged/scipy) | [Forum](https://discuss.scientific-python.org/c/contributor/scipy)

**SciPy** (pronounced "Sigh Pie") is an open-source software for mathematics, science, and engineering.

<div class="grid" data-gutter="2 3 4 4">

1 1 2 2

<div class="grid-item-card" data-img-top="_static/index_user_guide.svg" data-text-align="center">

**User guide** ^^^

The user guide provides in-depth information on the key concepts of SciPy with useful background information and explanation.

\+++

<div class="button-ref" color="secondary" data-click-parent="">

user\_guide

To the user guide

</div>

</div>

<div class="grid-item-card" data-img-top="_static/index_api.svg" data-text-align="center">

**API reference** ^^^

The reference guide contains a detailed description of the SciPy API. The reference describes how the methods work and which parameters can be used. It assumes that you have an understanding of the key concepts.

\+++

<div class="button-ref" color="secondary" data-click-parent="">

scipy-api

To the reference guide

</div>

</div>

<div class="grid-item-card" data-img-top="_static/index_getting_started.svg" data-text-align="center">

**Building from source** ^^^

Want to build from source rather than use a Python distribution or pre-built SciPy binary? This guide will describe how to set up your build environment, and how to build *SciPy* itself, including the many options for customizing that build.

\+++

<div class="button-ref" color="secondary" data-click-parent="">

building-from-source

To the build guide

</div>

</div>

<div class="grid-item-card" data-img-top="_static/index_contribute.svg" data-text-align="center">

**Developer guide** ^^^

Saw a typo in the documentation? Want to improve existing functionalities? The contributing guidelines will guide you through the process of improving SciPy.

\+++

<div class="button-ref" color="secondary" data-click-parent="">

scipy-development

To the development guide

</div>

</div>

</div>

<div class="toctree" data-maxdepth="1" hidden="">

Installing \<<https://scipy.org/install/>\> User Guide \<tutorial/index\> API reference \<reference/index\> Building from source \<building/index\> Development \<dev/index\> Release notes \<release\>

</div>

---

cluster.hierarchy.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.cluster.hierarchy

</div>

---

cluster.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.cluster

</div>

---

cluster.vq.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.cluster.vq

</div>

---

constants.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.constants

</div>

---

datasets.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.datasets

</div>

---

differentiate.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.differentiate

</div>

---

fft.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.fft

</div>

---

fftpack.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.fftpack

</div>

---

index.md

---

# SciPy API

## Importing from SciPy

In Python, the distinction between what is the public API of a library and what are private implementation details is not always clear. Unlike in other languages like Java, it is possible in Python to access "private" functions or objects. Occasionally this may be convenient, but be aware that if you do so your code may break without warning in future releases. Some widely understood rules for what is and isn't public in Python are:

  - Methods / functions / classes and module attributes whose names begin with a leading underscore are private.
  - If a class name begins with a leading underscore, none of its members are public, whether or not they begin with a leading underscore.
  - If a module name in a package begins with a leading underscore none of its members are public, whether or not they begin with a leading underscore.
  - If a module or package defines `__all__`, that authoritatively defines the public interface.
  - If a module or package doesn't define `__all__`, then all names that don't start with a leading underscore are public.

<div class="note">

<div class="title">

Note

</div>

Reading the above guidelines one could draw the conclusion that every private module or object starts with an underscore. This is not the case; the presence of underscores do mark something as private, but the absence of underscores do not mark something as public.

</div>

In SciPy there are modules whose names don't start with an underscore, but that should be considered private. To clarify which modules these are, we define below what the public API is for SciPy, and give some recommendations for how to import modules/functions/objects from SciPy.

## Guidelines for importing functions from SciPy

Everything in the namespaces of SciPy submodules is public. In general in Python, it is recommended to make use of namespaces. For example, the function `curve_fit` (defined in `scipy/optimize/_minpack_py.py`) should be imported like this:

    import scipy
    result = scipy.optimize.curve_fit(...)

Or alternatively one could use the submodule as a namespace like so:

    from scipy import optimize
    result = optimize.curve_fit(...)

<div class="note">

<div class="title">

Note

</div>

For `scipy.io` prefer the use of `import scipy` because `io` is also the name of a module in the Python stdlib.

</div>

In some cases, the public API is one level deeper. For example, the `scipy.sparse.linalg` module is public, and the functions it contains are not available in the `scipy.sparse` namespace. Sometimes it may result in more easily understandable code if functions are imported from one level deeper. For example, in the following it is immediately clear that `lomax` is a distribution if the second form is chosen:

    # first form
    from scipy import stats
    stats.lomax(...)
    
    # second form
    from scipy.stats import distributions
    distributions.lomax(...)

In that case, the second form can be chosen **if** it is documented in the next section that the submodule in question is public. Of course you can still use:

    import scipy
    scipy.stats.lomax(...)
    # or
    scipy.stats.distributions.lomax(...)

<div class="note">

<div class="title">

Note

</div>

SciPy is using a lazy loading mechanism which means that modules are only loaded in memory when you first try to access them.

</div>

## API definition

Every submodule listed below is public. That means that these submodules are unlikely to be renamed or changed in an incompatible way, and if that is necessary, a deprecation warning will be raised for one SciPy release before the change is made.

  - <span class="title-ref">scipy</span>
  - <span class="title-ref">scipy.cluster</span>
      - <span class="title-ref">scipy.cluster.vq</span>
      - <span class="title-ref">scipy.cluster.hierarchy</span>
  - <span class="title-ref">scipy.constants</span>
  - <span class="title-ref">scipy.datasets</span>
  - <span class="title-ref">scipy.differentiate</span>
  - <span class="title-ref">scipy.fft</span>
  - <span class="title-ref">scipy.fftpack</span>
  - <span class="title-ref">scipy.integrate</span>
  - <span class="title-ref">scipy.interpolate</span>
  - <span class="title-ref">scipy.io</span>
      - <span class="title-ref">scipy.io.arff</span>
      - <span class="title-ref">scipy.io.matlab</span>
      - <span class="title-ref">scipy.io.wavfile</span>
  - <span class="title-ref">scipy.linalg</span>
      - <span class="title-ref">scipy.linalg.blas</span>
      - <span class="title-ref">scipy.linalg.cython\_blas</span>
      - <span class="title-ref">scipy.linalg.lapack</span>
      - <span class="title-ref">scipy.linalg.cython\_lapack</span>
      - <span class="title-ref">scipy.linalg.interpolative</span>
  - <span class="title-ref">scipy.misc</span>
  - <span class="title-ref">scipy.ndimage</span>
  - <span class="title-ref">scipy.odr</span>
  - <span class="title-ref">scipy.optimize</span>
      - <span class="title-ref">scipy.optimize.cython\_optimize</span>
  - <span class="title-ref">scipy.signal</span>
      - <span class="title-ref">scipy.signal.windows</span>
  - <span class="title-ref">scipy.sparse</span>
      - <span class="title-ref">scipy.sparse.linalg</span>
      - <span class="title-ref">scipy.sparse.csgraph</span>
  - <span class="title-ref">scipy.spatial</span>
      - <span class="title-ref">scipy.spatial.distance</span>
      - <span class="title-ref">scipy.spatial.transform</span>
  - <span class="title-ref">scipy.special</span>
  - <span class="title-ref">scipy.stats</span>
      - <span class="title-ref">scipy.stats.contingency</span>
      - `scipy.stats.distributions`
      - <span class="title-ref">scipy.stats.mstats</span>
      - <span class="title-ref">scipy.stats.qmc</span>
      - <span class="title-ref">scipy.stats.sampling</span>

<div class="toctree" data-maxdepth="1" hidden="" data-titlesonly="">

scipy \<main\_namespace\> scipy.cluster \<cluster\> scipy.constants \<constants\> scipy.datasets \<datasets\> scipy.differentiate \<differentiate\> scipy.fft \<fft\> scipy.fftpack \<fftpack\> scipy.integrate \<integrate\> scipy.interpolate \<interpolate\> scipy.io \<io\> scipy.linalg \<linalg\> scipy.misc \<misc\> scipy.ndimage \<ndimage\> scipy.odr \<odr\> scipy.optimize \<optimize\> scipy.signal \<signal\> scipy.sparse \<sparse\> scipy.spatial \<spatial\> scipy.special \<special\> scipy.stats \<stats\>

</div>

## SciPy structure

All SciPy modules should follow the following conventions. In the following, a *SciPy module* is defined as a Python package, say `yyy`, that is located in the scipy/ directory.

  - Ideally, each SciPy module should be as self-contained as possible. That is, it should have minimal dependencies on other packages or modules. Even dependencies on other SciPy modules should be kept to a minimum. A dependency on NumPy is of course assumed.

  - Directory `yyy/` contains:
    
      - A file `meson.build` with build configuration for the submodule.
      - A directory `tests/` that contains files `test_<name>.py` corresponding to modules `yyy/<name>{.py,.so,/}`.

  - Private modules should be prefixed with an underscore `_`, for instance `yyy/_somemodule.py`.

  - User-visible functions should have good documentation following the [NumPy documentation style](https://numpydoc.readthedocs.io/en/latest/format.html).

  - The `__init__.py` of the module should contain the main reference documentation in its docstring. This is connected to the Sphinx documentation under `doc/` via Sphinx's automodule directive.
    
    The reference documentation should first give a categorized list of the contents of the module using `autosummary::` directives, and after that explain points essential for understanding the use of the module.
    
    Tutorial-style documentation with extensive examples should be separate and put under `doc/source/tutorial/`.

See the existing SciPy submodules for guidance.

---

integrate.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.integrate

</div>

---

interpolate.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.interpolate

</div>

---

io.matlab.md

---

- orphan

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.io.matlab

</div>

---

io.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.io

</div>

---

linalg.blas.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.linalg.blas

</div>

---

linalg.cython_blas.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.linalg.cython\_blas

</div>

---

linalg.cython_lapack.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.linalg.cython\_lapack

</div>

---

linalg.interpolative.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.linalg.interpolative

</div>

---

linalg.lapack.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.linalg.lapack

</div>

---

linalg.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.linalg

</div>

---

main_namespace.md

---

# The main SciPy namespace

<div class="currentmodule">

scipy

</div>

The main `scipy` namespace has very few objects in it by design. Only show generical functionality related to testing, build info and versioning, and one class (<span class="title-ref">LowLevelCallable</span>) that didn't fit in one of the submodules, are present:

<div class="autosummary" data-toctree="generated/">

LowLevelCallable show\_config test

</div>

The one public attribute is:

<table>
<thead>
<tr class="header">
<th><code>__version__</code></th>
<th>SciPy version string</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><h2 id="submodules">Submodules</h2></td>
<td></td>
</tr>
<tr class="even">
<td>============= ====</td>
<td>==============================================</td>
</tr>
<tr class="odd">
<td><span class="title-ref">cluster</span> Clus</td>
<td>tering functionality</td>
</tr>
<tr class="even">
<td><span class="title-ref">constants</span> Phys</td>
<td>ical and mathematical constants and units</td>
</tr>
<tr class="odd">
<td><span class="title-ref">datasets</span> Load</td>
<td><blockquote>
<p>SciPy datasets</p>
</blockquote></td>
</tr>
<tr class="even">
<td><span class="title-ref">fft</span> Disc</td>
<td>rete Fourier and related transforms</td>
</tr>
<tr class="odd">
<td><span class="title-ref">fftpack</span> Disc</td>
<td>rete Fourier transforms (legacy)</td>
</tr>
<tr class="even">
<td><span class="title-ref">integrate</span> Nume</td>
<td>rical integration and ODEs</td>
</tr>
<tr class="odd">
<td><span class="title-ref">interpolate</span> Inte</td>
<td>rpolation</td>
</tr>
<tr class="even">
<td><span class="title-ref">io</span> Scie</td>
<td>ntific data format reading and writing</td>
</tr>
<tr class="odd">
<td><span class="title-ref">linalg</span> Line</td>
<td>ar algebra functionality</td>
</tr>
<tr class="even">
<td><span class="title-ref">misc</span> Util</td>
<td>ity routines (deprecated)</td>
</tr>
<tr class="odd">
<td><span class="title-ref">ndimage</span> N-di</td>
<td>mensional image processing and interpolation</td>
</tr>
<tr class="even">
<td><span class="title-ref">odr</span> Orth</td>
<td>ogonal distance regression</td>
</tr>
<tr class="odd">
<td><span class="title-ref">optimize</span> Nume</td>
<td>rical optimization</td>
</tr>
<tr class="even">
<td><span class="title-ref">signal</span> Sign</td>
<td>al processing</td>
</tr>
<tr class="odd">
<td><span class="title-ref">sparse</span> Spar</td>
<td>se arrays, linear algebra and graph algorithms</td>
</tr>
<tr class="even">
<td><span class="title-ref">spatial</span> Spat</td>
<td>ial data structures and algorithms</td>
</tr>
<tr class="odd">
<td><span class="title-ref">special</span> Spec</td>
<td>ial functions</td>
</tr>
<tr class="even">
<td><span class="title-ref">stats</span> Stat</td>
<td>istical functions</td>
</tr>
</tbody>
</table>

---

misc.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.misc

</div>

---

ndimage.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.ndimage

</div>

---

odr.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.odr

</div>

---

optimize.cython_optimize.md

---

<div class="automodule">

scipy.optimize.cython\_optimize

</div>

---

optimize.elementwise.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.optimize.elementwise

</div>

---

optimize.linprog-highs-ds.md

---

# linprog(method='highs-ds')

---

optimize.linprog-highs-ipm.md

---

# linprog(method='highs-ipm')

---

optimize.linprog-highs.md

---

# linprog(method='highs')

---

optimize.linprog-interior-point.md

---

# linprog(method='interior-point')

---

optimize.linprog-revised_simplex.md

---

# linprog(method='revised simplex')

---

optimize.linprog-simplex.md

---

# linprog(method='simplex')

---

optimize.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.optimize

</div>

---

optimize.minimize-bfgs.md

---

# minimize(method='BFGS')

---

optimize.minimize-cg.md

---

# minimize(method='CG')

---

optimize.minimize-cobyla.md

---

# minimize(method='COBYLA')

---

optimize.minimize-cobyqa.md

---

# minimize(method='COBYQA')

---

optimize.minimize-dogleg.md

---

# minimize(method='dogleg')

---

optimize.minimize-lbfgsb.md

---

# minimize(method='L-BFGS-B')

---

optimize.minimize-neldermead.md

---

# minimize(method='Nelder-Mead')

---

optimize.minimize-newtoncg.md

---

# minimize(method='Newton-CG')

---

optimize.minimize-powell.md

---

# minimize(method='Powell')

---

optimize.minimize-slsqp.md

---

# minimize(method='SLSQP')

---

optimize.minimize-tnc.md

---

# minimize(method='TNC')

---

optimize.minimize-trustconstr.md

---

# minimize(method='trust-constr')

---

optimize.minimize-trustexact.md

---

# minimize(method='trust-exact')

---

optimize.minimize-trustkrylov.md

---

# minimize(method='trust-krylov')

---

optimize.minimize-trustncg.md

---

# minimize(method='trust-ncg')

---

optimize.minimize_scalar-bounded.md

---

# minimize\_scalar(method='bounded')

---

optimize.minimize_scalar-brent.md

---

# minimize\_scalar(method='brent')

---

optimize.minimize_scalar-golden.md

---

# minimize\_scalar(method='golden')

---

optimize.qap-2opt.md

---

# quadratic\_assignment(method='2opt')

---

optimize.qap-faq.md

---

# quadratic\_assignment(method='faq')

---

optimize.root-anderson.md

---

# root(method='anderson')

---

optimize.root-broyden1.md

---

# root(method='broyden1')

---

optimize.root-broyden2.md

---

# root(method='broyden2')

---

optimize.root-dfsane.md

---

# root(method='df-sane')

---

optimize.root-diagbroyden.md

---

# root(method='diagbroyden')

---

optimize.root-excitingmixing.md

---

# root(method='excitingmixing')

---

optimize.root-hybr.md

---

# root(method='hybr')

---

optimize.root-krylov.md

---

# root(method='krylov')

---

optimize.root-linearmixing.md

---

# root(method='linearmixing')

---

optimize.root-lm.md

---

# root(method='lm')

---

optimize.root_scalar-bisect.md

---

# root\_scalar(method='bisect')

---

optimize.root_scalar-brenth.md

---

# root\_scalar(method='brenth')

---

optimize.root_scalar-brentq.md

---

# root\_scalar(method='brentq')

---

optimize.root_scalar-halley.md

---

# root\_scalar(method='halley')

---

optimize.root_scalar-newton.md

---

# root\_scalar(method='newton')

---

optimize.root_scalar-ridder.md

---

# root\_scalar(method='ridder')

---

optimize.root_scalar-secant.md

---

# root\_scalar(method='secant')

---

optimize.root_scalar-toms748.md

---

# root\_scalar(method='toms748')

---

signal.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.signal

</div>

---

signal.windows.md

---

- orphan

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.signal.windows

</div>

---

sparse.csgraph.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.sparse.csgraph

</div>

---

sparse.linalg.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.sparse.linalg

</div>

---

sparse.linalg.svds-arpack.md

---

# svds(solver='arpack')

---

sparse.linalg.svds-lobpcg.md

---

# svds(solver='lobpcg')

---

sparse.linalg.svds-propack.md

---

# svds(solver='propack')

---

sparse.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.sparse

</div>

---

sparse.migration_to_sparray.md

---

# Migration from spmatrix to sparray

This document provides guidance for converting code from sparse *matrices* to sparse *arrays* in `scipy.sparse`.

The change from sparse matrices to sparse arrays mirrors conversion from `np.matrix` to `np.ndarray`. Essentially we must move from an all-2D matrix-multiplication-centric `matrix` object to a 1D or 2D “array” object that supports the matrix multiplication operator and elementwise computation.

Notation: For this guide we denote the sparse array classes generally as `sparray` and the sparse matrix classes `spmatrix`. Dense numpy arrays are denoted `np.ndarray` and dense matrix classes are `np.matrix`. Supported sparse formats are denoted BSR, COO, CSC, CSR, DIA, DOK, LIL and all formats are supported by both sparray and spmatrix. The term `sparse` refers to either `sparray` or `spmatrix`, while `dense` refers to either `np.ndarray` or `np.matrix`.

## Overview and big picture

  - The constructor names `*_matrix`, e.g. `csr_matrix`, are changed to `*_array`.
  - spmatrix `M` is always 2D (rows x columns) even e.g. `M.min(axis=0)`. sparray `A` can be 1D or 2D. Numpy scalars are returned for full (0D) reductions, i.e. `M.min()`.
  - Iterating over a sparray gives 1D sparrays. Iterating spmatrix gives 2D row spmatrices
  - Operators that change behavior are: `*, @, *=, @=, **`
      - Scalar multiplication, e.g. `5 * A`, uses `*`, and `5 @ A` is not implemented.
      - sparrays use `*` for elementwise multiplication and `@` for matrix multiplication while spmatrices use either operator `*` or `@` for matrix multiplication. Either can use `A.multiply(B)` for elementwise multiplication.
      - Scalar exponents, e.g. `A**2`, use elementwise power for sparray and matrix power for spmatrix. To get matrix power for sparrays use `scipy.sparse.linalg.matrix_power(A, n)`.
  - Checking the sparse type and format:
      - `issparse(A)` returns `True` for any sparse array/matrix.
      - `isspmatrix(M)` returns `True` for any sparse matrix.
      - `isspmatrix_csr(M)` checks for a sparse matrix with specific format. It should be replaced with an array compatible version such as:
      - `issparse(A) and A.format == 'csr'` looks for a CSR sparse array/matrix.

## Recommended steps for migration

  - First pass (leaving spmatrix in the code):
      - In your spmatrix code, change `*` to `@` for matrix multiplication. Note that scalar multiplication with sparse should use `*`.
      - Matrix powers, e.g. `M**3`, should be converted to `scipy.sparse.linalg.matrix_power(A, 3)`
      - Implement alternatives to unsupported functions/methods like `A.getnnz()` -\> `A.nnz` (see \[sparse-migration-removed-methods\](\#sparse-migration-removed-methods) below).
      - Change any logic regarding `issparse()` and `isspmatrix()` as needed. Usually, this means replacing `isspmatrix` with `issparse`, and `isspmatrix_csr(G)` with `issparse(G) and G.format == "csr"`. Moreover `isspmatrix_csr(G) or isspmatrix_csc(G)` becomes `issparse(G) and G.format in ['csr', 'csc']`.
      - Convert all `spdiags` calls to `dia_matrix`. See docs in <span class="title-ref">spdiags\<scipy.sparse.spdiags\></span>.
      - Run all your tests on the resulting code. You are still using spmatrix, not sparray. But your code and tests are prepared for the change.
  - Second pass (switching to sparray):
      - Convert construction functions like `diags` and `triu` to the array version (see \[sparse-migration-construction\](\#sparse-migration-construction) below).
      - Check all functions/methods for which migration causes 1D return values. These are mostly indexing and the reduction functions (see \[sparse-migration-shapes-reductions\](\#sparse-migration-shapes-reductions) below).
      - Check all places where you iterate over spmatrices and change them to account for the sparrays yielding 1D sparrays rather than 2D spmatrices.
      - Find and change places where your code makes use of `np.matrix` features. Convert those to `np.ndarray` features.
      - Rename all `*_matrix` constructor calls to `*_array`.
      - Test your code. And **read** your code. You have migrated to sparray.

## Details: construction functions

These four functions are new and only handle sparrays: <span class="title-ref">\~scipy.sparse.block\_array</span>, <span class="title-ref">\~scipy.sparse.diags\_array</span>, <span class="title-ref">\~scipy.sparse.eye\_array</span>, and <span class="title-ref">\~scipy.sparse.random\_array</span>. Their signatures are:

    def block_array(blocks, format=None, dtype=None):
    def diags_array(diagonals, /, *, offsets=0, shape=None, format=None, dtype=None):
    def eye_array(m, n=None, *, k=0, dtype=float, format=None):
    def random_array(m, n, density=0.01, format='coo', dtype=None, random_state=None, data_random_state=None):

### Existing functions that need careful migration

These functions return sparray or spmatrix, depending on the input types they receive: <span class="title-ref">\~scipy.sparse.kron</span>, <span class="title-ref">\~scipy.sparse.kronsum</span>, <span class="title-ref">\~scipy.sparse.hstack</span>, <span class="title-ref">\~scipy.sparse.vstack</span>, <span class="title-ref">\~scipy.sparse.block\_diag</span>, <span class="title-ref">\~scipy.sparse.tril</span>, and <span class="title-ref">\~scipy.sparse.triu</span>. Their signatures are:

    def kron(A, B, format=None):
    def kronsum(A, B, format=None):
    def hstack(blocks, format=None, dtype=None):
    def vstack(blocks, format=None, dtype=None):
    def block_diag(mats, format=None, dtype=None):
    def tril(A, k=0, format=None):
    def triu(A, k=0, format=None):

Use of these functions should be examined and inputs adjusted to ensure return values are sparrays. And in turn the outputs should be treated as sparrays. To return sparrays, at least one input must be an sparray. If you use list-of-lists or numpy arrays as input you should convert one of them to a sparse array to get sparse arrays out.

### Functions that changed names for the migration

> 
> 
> <table>
> <thead>
> <tr class="header">
> <th>Function</th>
> <th>New function</th>
> </tr>
> </thead>
> <tbody>
> <tr class="odd">
> <td>eye</td>
> <td><blockquote>
> <p>eye_array</p>
> </blockquote></td>
> </tr>
> <tr class="even">
> <td>identity</td>
> <td><blockquote>
> <p>eye_array</p>
> </blockquote></td>
> </tr>
> <tr class="odd">
> <td>diags</td>
> <td><blockquote>
> <p>diags_array</p>
> </blockquote></td>
> </tr>
> <tr class="even">
> <td>spdiags</td>
> <td><blockquote>
> <p>dia_array</p>
> </blockquote></td>
> </tr>
> <tr class="odd">
> <td>bmat</td>
> <td><blockquote>
> <p>block</p>
> </blockquote></td>
> </tr>
> <tr class="even">
> <td>rand</td>
> <td><blockquote>
> <p>random_array</p>
> </blockquote></td>
> </tr>
> <tr class="odd">
> <td>random</td>
> <td><blockquote>
> <p>random_array</p>
> </blockquote></td>
> </tr>
> </tbody>
> </table>

## Details: shape changes and reductions

  - Construction using 1d-list of values:
    
      - `csr_matrix([1, 2, 3]).shape == (1, 3)` creates a 2D matrix.
      - `csr_array([1, 2, 3]).shape == (3,)` creates a 1D array

  - Indexing:
    
      - Indexing of sparray allows 1D objects which can be made 2D using `np.newaxis` or `None`. E.g., `A[3, None, :]` gives a 2D row. Indexing of 2D sparray with implicit (not given) column index gives a 1D result, e.g. `A[3]` (note: best not to do this - write it as `A[3, :]` instead). If you need a 2D result, use `np.newaxis`, or `None` in your index, or wrap the integer index as a list for which fancy indexing gives 2D, e.g. `A[[3], :]`.
      - Iteration over sparse object: `next(M)` yields a sparse 2D row matrix, `next(A)` yields a sparse 1D array.

  - Reduction operations along an axis reduce the shape:
    
      - `M.sum(axis=1)` returns a 2D row matrix by summing along axis 1.
    
      - `A.sum(axis=1)` returns a 1D `coo_array` summing along axis 1. Some reductions return dense arrays/matrices instead of sparse ones:
        
        | Method       | Result |
        | ------------ | ------ |
        | sum(axis)    | dense  |
        | mean(axis)   | dense  |
        | argmin(axis) | dense  |
        | argmax(axis) | dense  |
        | min(axis)    | sparse |
        | max(axis)    | sparse |
        | nanmin(axis) | sparse |
        | nanmax(axis) | sparse |

    Generally, 2D sparray inputs lead to 1D results. 2D spmatrix inputs lead to 2D results.

  - Some reductions return a scalar. Those should behave as they did before and shouldn’t need to be considered during migration. E.g. `A.sum()`

## Removed methods and attributes

  - The methods `get_shape`, `getrow`, `getcol`, `asfptype`, `getnnz`, `getH` and the attributes `.A` and `.H` are only present on spmatrices, not sparrays. It is recommended that you replace usage of them with alternatives before starting the shift to sparray.
    
    > 
    > 
    > | Function        | Alternative            |
    > | --------------- | ---------------------- |
    > | M.get\_shape()  | A.shape                |
    > | M.getformat()   | A.format               |
    > | M.asfptype(…)   | A.astype(…)            |
    > | M.getmaxprint() | A.maxprint             |
    > | M.getnnz()      | A.nnz                  |
    > | M.getnnz(axis)  | A.count\_nonzero(axis) |
    > | M.getH()        | A.conj().T             |
    > | M.getrow(i)     | A\[i, :\]              |
    > | M.getcol(j)     | A\[:, j\]              |
    > | M.A             | A.toarray()            |
    > | M.H             | A.conj().T             |
    > 

  - Shape assignment (`M.shape = (2, 6)`) is not permitted for sparray. Instead you should use `A.reshape`.

  - `M.getnnz()` returns the number of stored values – not the number of non-zeros. `A.nnz` does the same. To get the number of non-zeros, use `A.count_nonzero()`. This is not new to the migration, but can be confusing.
    
    To migrate from the `axis` parameter of `M.getnnz(axis=...)`, you can use `A.count_nonzero(axis=...)` but it is not an exact replacement because it counts nonzero values instead of stored values. The difference is the number of explicitly stored zero values. If you really want the number of stored values by axis you will need to use some numpy tools.
    
    The numpy tools approach works for COO, CSR, CSC formats, so convert to one of them. For CSR and CSC, the major axis is compressed and `np.diff(A.indptr)` returns a dense 1D array with the number of stored values for each major axis value (row for CSR and column for CSC). The minor axes can be computed using `np.bincount(A.indices, minlength=N)` where `N` is the length of the minor axis (e.g. `A.shape[1]` for CSR). The `bincount` function works for any axis of COO format using `A.coords[axis]` in place of `A.indices`.

## Other

  - If you provide compressed data to a constructor, e.g. `csr_array((data, indices, indptr))` sparse arrays set the index dtype by only checking the index arrays dtype, while sparse matrices check the index values too and may downcast to int32 (see [gh-18509](https://github.com/scipy/scipy/pull/18509) for more details).
  - Binary operations with operators `+, -, *, /, @, !=, >` and sparse and/or dense operands:
      - If all inputs are sparse, the output is usually sparse as well. The exception being `/` which returns dense (dividing by the default value `0` is `nan`).
      - If inputs are mixed sparse and dense, the result is usually dense (i.e., `np.ndarray`). Exceptions are `*` which is sparse, and `/` which is not implemented for `dense / sparse`, and returns sparse for `sparse / dense`.
  - Binary operations with operators `+, -, *, /, @, !=, >` and array and/or matrix operands:
      - If all inputs are arrays, the outputs are arrays and the same is true for matrices.
      - When mixing sparse arrays with sparse matrices, the leading operand provides the type for the output, e.g. `sparray + spmatrix` gives a sparse array while reversing the order gives a sparse matrix.
      - When mixing dense matrices with sparse arrays, the results are usually arrays with exceptions for comparisons, e.g. `>` which return dense matrices.
      - When mixing dense arrays with sparse matrices, the results are usually matrices with an exception for `array @ sparse matrix` which returns a dense array.

---

spatial.distance.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.spatial.distance

</div>

---

spatial.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.spatial

</div>

---

spatial.transform.md

---

- orphan

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.spatial.transform

</div>

---

special.cython_special.md

---

- orphan

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.special.cython\_special

</div>

---

special.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.special

</div>

---

stats._result_classes.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.stats.\_result\_classes

</div>

---

stats.contingency.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.stats.contingency

</div>

---

stats.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.stats

</div>

---

stats.mstats.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.stats.mstats

</div>

---

stats.qmc.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.stats.qmc

</div>

---

stats.sampling.md

---

<div class="automodule" data-no-members="" data-no-inherited-members="" data-no-special-members="">

scipy.stats.sampling

</div>

---

0.10.0-notes.md

---

# SciPy 0.10.0 Release Notes

<div class="contents">

</div>

SciPy 0.10.0 is the culmination of 8 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a limited number of deprecations and backwards-incompatible changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.10.x branch, and on adding new features on the development master branch.

Release highlights:

>   - Support for Bento as optional build system.
>   - Support for generalized eigenvalue problems, and all shift-invert modes available in ARPACK.

This release requires Python 2.4-2.7 or 3.1- and NumPy 1.5 or greater.

## New features

### Bento: new optional build system

Scipy can now be built with [Bento](http://cournape.github.com/Bento/). Bento has some nice features like parallel builds and partial rebuilds, that are not possible with the default build system (distutils). For usage instructions see BENTO\_BUILD.txt in the scipy top-level directory.

Currently Scipy has three build systems, distutils, numscons and bento. Numscons is deprecated and is planned and will likely be removed in the next release.

### Generalized and shift-invert eigenvalue problems in `scipy.sparse.linalg`

The sparse eigenvalue problem solver functions `scipy.sparse.eigs/eigh` now support generalized eigenvalue problems, and all shift-invert modes available in ARPACK.

### Discrete-Time Linear Systems (`scipy.signal`)

Support for simulating discrete-time linear systems, including `scipy.signal.dlsim`, `scipy.signal.dimpulse`, and `scipy.signal.dstep`, has been added to SciPy. Conversion of linear systems from continuous-time to discrete-time representations is also present via the `scipy.signal.cont2discrete` function.

### Enhancements to `scipy.signal`

A Lomb-Scargle periodogram can now be computed with the new function `scipy.signal.lombscargle`.

The forward-backward filter function `scipy.signal.filtfilt` can now filter the data in a given axis of an n-dimensional numpy array. (Previously it only handled a 1-dimensional array.) Options have been added to allow more control over how the data is extended before filtering.

FIR filter design with `scipy.signal.firwin2` now has options to create filters of type III (zero at zero and Nyquist frequencies) and IV (zero at zero frequency).

### Additional decomposition options (`scipy.linalg`)

A sort keyword has been added to the Schur decomposition routine (`scipy.linalg.schur`) to allow the sorting of eigenvalues in the resultant Schur form.

### Additional special matrices (`scipy.linalg`)

The functions `hilbert` and `invhilbert` were added to `scipy.linalg`.

### Enhancements to `scipy.stats`

  - The *one-sided form* of Fisher's exact test is now also implemented in `stats.fisher_exact`.
  - The function `stats.chi2_contingency` for computing the chi-square test of independence of factors in a contingency table has been added, along with the related utility functions `stats.contingency.margins` and `stats.contingency.expected_freq`.

### Enhancements to `scipy.special`

The functions `logit(p) = log(p/(1-p))` and `expit(x) = 1/(1+exp(-x))` have been implemented as `scipy.special.logit` and `scipy.special.expit` respectively.

### Basic support for Harwell-Boeing file format for sparse matrices

Both read and write are support through a simple function-based API, as well as a more complete API to control number format. The functions may be found in scipy.sparse.io.

The following features are supported:

>   - Read and write sparse matrices in the CSC format
>   - Only real, symmetric, assembled matrix are supported (RUA format)

## Deprecated features

### `scipy.maxentropy`

The maxentropy module is unmaintained, rarely used and has not been functioning well for several releases. Therefore it has been deprecated for this release, and will be removed for scipy 0.11. Logistic regression in scikits.learn is a good alternative for this functionality. The `scipy.maxentropy.logsumexp` function has been moved to `scipy.misc`.

### `scipy.lib.blas`

There are similar BLAS wrappers in `scipy.linalg` and `scipy.lib`. These have now been consolidated as `scipy.linalg.blas`, and `scipy.lib.blas` is deprecated.

### Numscons build system

The numscons build system is being replaced by Bento, and will be removed in one of the next scipy releases.

## Backwards-incompatible changes

The deprecated name <span class="title-ref">invnorm</span> was removed from `scipy.stats.distributions`, this distribution is available as <span class="title-ref">invgauss</span>.

The following deprecated nonlinear solvers from `scipy.optimize` have been removed:

    - ``broyden_modified`` (bad performance)
    - ``broyden1_modified`` (bad performance)
    - ``broyden_generalized`` (equivalent to ``anderson``)
    - ``anderson2`` (equivalent to ``anderson``)
    - ``broyden3`` (obsoleted by new limited-memory broyden methods)
    - ``vackar`` (renamed to ``diagbroyden``)

## Other changes

`scipy.constants` has been updated with the CODATA 2010 constants.

`__all__` dicts have been added to all modules, which has cleaned up the namespaces (particularly useful for interactive work).

An API section has been added to the documentation, giving recommended import guidelines and specifying which submodules are public and which aren't.

## Authors

This release contains work by the following people (contributed at least one patch to this release, names in alphabetical order):

  - Jeff Armstrong +
  - Matthew Brett
  - Lars Buitinck +
  - David Cournapeau
  - FI$H 2000 +
  - Michael McNeil Forbes +
  - Matty G +
  - Christoph Gohlke
  - Ralf Gommers
  - Yaroslav Halchenko
  - Charles Harris
  - Thouis (Ray) Jones +
  - Chris Jordan-Squire +
  - Robert Kern
  - Chris Lasher +
  - Wes McKinney +
  - Travis Oliphant
  - Fabian Pedregosa
  - Josef Perktold
  - Thomas Robitaille +
  - Pim Schellart +
  - Anthony Scopatz +
  - Skipper Seabold +
  - Fazlul Shahriar +
  - David Simcha +
  - Scott Sinclair +
  - Andrey Smirnov +
  - Collin RM Stocks +
  - Martin Teichmann +
  - Jake Vanderplas +
  - Gaël Varoquaux +
  - Pauli Virtanen
  - Stefan van der Walt
  - Warren Weckesser
  - Mark Wiebe +

A total of 35 people contributed to this release. People with a "+" by their names contributed a patch for the first time.

---

0.10.1-notes.md

---

# SciPy 0.10.1 Release Notes

<div class="contents">

</div>

SciPy 0.10.1 is a bug-fix release with no new features compared to 0.10.0.

## Main changes

The most important changes are:

1.  The single precision routines of `eigs` and `eigsh` in `scipy.sparse.linalg` have been disabled (they internally use double precision now).
2.  A compatibility issue related to changes in NumPy macros has been fixed, in order to make scipy 0.10.1 compile with the upcoming numpy 1.7.0 release.

## Other issues fixed

  - \#835: stats: nan propagation in stats.distributions
  - \#1202: io: netcdf segfault
  - \#1531: optimize: make curve\_fit work with method as callable.
  - \#1560: linalg: fixed mistake in eig\_banded documentation.
  - \#1565: ndimage: bug in ndimage.variance
  - \#1457: ndimage: standard\_deviation does not work with sequence of indexes
  - \#1562: cluster: segfault in linkage function
  - \#1568: stats: One-sided fisher\_exact() returns <span class="title-ref">p</span> \< 1 for 0 successful attempts
  - \#1575: stats: zscore and zmap handle the axis keyword incorrectly

---

0.11.0-notes.md

---

# SciPy 0.11.0 Release Notes

<div class="contents">

</div>

SciPy 0.11.0 is the culmination of 8 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. Highlights of this release are:

>   - A new module has been added which provides a number of common sparse graph algorithms.
>   - New unified interfaces to the existing optimization and root finding functions have been added.

All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Our development attention will now shift to bug-fix releases on the 0.11.x branch, and on adding new features on the master branch.

This release requires Python 2.4-2.7 or 3.1-3.2 and NumPy 1.5.1 or greater.

## New features

<div class="currentmodule">

scipy.sparse.csgraph

</div>

### Sparse Graph Submodule

The new submodule `scipy.sparse.csgraph` implements a number of efficient graph algorithms for graphs stored as sparse adjacency matrices. Available routines are:

>   - <span class="title-ref">connected\_components</span> - determine connected components of a graph
>   - <span class="title-ref">laplacian</span> - compute the laplacian of a graph
>   - <span class="title-ref">shortest\_path</span> - compute the shortest path between points on a positive graph
>   - <span class="title-ref">dijkstra</span> - use Dijkstra's algorithm for shortest path
>   - <span class="title-ref">floyd\_warshall</span> - use the Floyd-Warshall algorithm for shortest path
>   - <span class="title-ref">breadth\_first\_order</span> - compute a breadth-first order of nodes
>   - <span class="title-ref">depth\_first\_order</span> - compute a depth-first order of nodes
>   - <span class="title-ref">breadth\_first\_tree</span> - construct the breadth-first tree from a given node
>   - <span class="title-ref">depth\_first\_tree</span> - construct a depth-first tree from a given node
>   - <span class="title-ref">minimum\_spanning\_tree</span> - construct the minimum spanning tree of a graph

### `scipy.optimize` improvements

The optimize module has received a lot of attention this release. In addition to added tests, documentation improvements, bug fixes and code clean-up, the following improvements were made:

  - A unified interface to minimizers of univariate and multivariate functions has been added.
  - A unified interface to root finding algorithms for multivariate functions has been added.
  - The L-BFGS-B algorithm has been updated to version 3.0.

#### Unified interfaces to minimizers

<div class="currentmodule">

scipy.optimize

</div>

Two new functions `scipy.optimize.minimize` and `scipy.optimize.minimize_scalar` were added to provide a common interface to minimizers of multivariate and univariate functions respectively. For multivariate functions, `scipy.optimize.minimize` provides an interface to methods for unconstrained optimization (<span class="title-ref">fmin</span>, <span class="title-ref">fmin\_powell</span>, <span class="title-ref">fmin\_cg</span>, <span class="title-ref">fmin\_ncg</span>, <span class="title-ref">fmin\_bfgs</span> and <span class="title-ref">anneal</span>) or constrained optimization (<span class="title-ref">fmin\_l\_bfgs\_b</span>, <span class="title-ref">fmin\_tnc</span>, <span class="title-ref">fmin\_cobyla</span> and <span class="title-ref">fmin\_slsqp</span>). For univariate functions, `scipy.optimize.minimize_scalar` provides an interface to methods for unconstrained and bounded optimization (<span class="title-ref">brent</span>, <span class="title-ref">golden</span>, <span class="title-ref">fminbound</span>). This allows for easier comparing and switching between solvers.

#### Unified interface to root finding algorithms

The new function `scipy.optimize.root` provides a common interface to root finding algorithms for multivariate functions, embedding <span class="title-ref">fsolve</span>, <span class="title-ref">leastsq</span> and `nonlin` solvers.

### `scipy.linalg` improvements

#### New matrix equation solvers

Solvers for the Sylvester equation (`scipy.linalg.solve_sylvester`, discrete and continuous Lyapunov equations (`scipy.linalg.solve_lyapunov`, `scipy.linalg.solve_discrete_lyapunov`) and discrete and continuous algebraic Riccati equations (`scipy.linalg.solve_continuous_are`, `scipy.linalg.solve_discrete_are`) have been added to `scipy.linalg`. These solvers are often used in the field of linear control theory.

#### QZ and QR Decomposition

It is now possible to calculate the QZ, or Generalized Schur, decomposition using `scipy.linalg.qz`. This function wraps the LAPACK routines sgges, dgges, cgges, and zgges.

The function `scipy.linalg.qr_multiply`, which allows efficient computation of the matrix product of Q (from a QR decomposition) and a vector, has been added.

#### Pascal matrices

A function for creating Pascal matrices, `scipy.linalg.pascal`, was added.

### Sparse matrix construction and operations

Two new functions, `scipy.sparse.diags` and `scipy.sparse.block_diag`, were added to easily construct diagonal and block-diagonal sparse matrices respectively.

`scipy.sparse.csc_matrix` and `csr_matrix` now support the operations `sin`, `tan`, `arcsin`, `arctan`, `sinh`, `tanh`, `arcsinh`, `arctanh`, `rint`, `sign`, `expm1`, `log1p`, `deg2rad`, `rad2deg`, `floor`, `ceil` and `trunc`. Previously, these operations had to be performed by operating on the matrices' `data` attribute.

### LSMR iterative solver

LSMR, an iterative method for solving (sparse) linear and linear least-squares systems, was added as `scipy.sparse.linalg.lsmr`.

### Discrete Sine Transform

Bindings for the discrete sine transform functions have been added to `scipy.fftpack`.

### `scipy.interpolate` improvements

For interpolation in spherical coordinates, the three classes `scipy.interpolate.SmoothSphereBivariateSpline`, `scipy.interpolate.LSQSphereBivariateSpline`, and `scipy.interpolate.RectSphereBivariateSpline` have been added.

### Binned statistics (`scipy.stats`)

The stats module has gained functions to do binned statistics, which are a generalization of histograms, in 1-D, 2-D and multiple dimensions: `scipy.stats.binned_statistic`, `scipy.stats.binned_statistic_2d` and `scipy.stats.binned_statistic_dd`.

## Deprecated features

`scipy.sparse.cs_graph_components` has been made a part of the sparse graph submodule, and renamed to `scipy.sparse.csgraph.connected_components`. Calling the former routine will result in a deprecation warning.

`scipy.misc.radon` has been deprecated. A more full-featured radon transform can be found in scikits-image.

`scipy.io.save_as_module` has been deprecated. A better way to save multiple Numpy arrays is the `numpy.savez` function.

The <span class="title-ref">xa</span> and <span class="title-ref">xb</span> parameters for all distributions in `scipy.stats.distributions` already weren't used; they have now been deprecated.

## Backwards incompatible changes

### Removal of `scipy.maxentropy`

The `scipy.maxentropy` module, which was deprecated in the 0.10.0 release, has been removed. Logistic regression in scikits.learn is a good and modern alternative for this functionality.

### Minor change in behavior of `splev`

The spline evaluation function now behaves similarly to `interp1d` for size-1 arrays. Previous behavior:

    >>> from scipy.interpolate import splev, splrep, interp1d
    >>> x = [1,2,3,4,5]
    >>> y = [4,5,6,7,8]
    >>> tck = splrep(x, y)
    >>> splev([1], tck)
    4.
    >>> splev(1, tck)
    4.

Corrected behavior:

    >>> splev([1], tck)
    array([ 4.])
    >>> splev(1, tck)
    array(4.)

This affects also the `UnivariateSpline` classes.

### Behavior of `scipy.integrate.complex_ode`

The behavior of the `y` attribute of `complex_ode` is changed. Previously, it expressed the complex-valued solution in the form:

    z = ode.y[::2] + 1j * ode.y[1::2]

Now, it is directly the complex-valued solution:

    z = ode.y

### Minor change in behavior of T-tests

The T-tests `scipy.stats.ttest_ind`, `scipy.stats.ttest_rel` and `scipy.stats.ttest_1samp` have been changed so that 0 / 0 now returns NaN instead of 1.

## Other changes

The SuperLU sources in `scipy.sparse.linalg` have been updated to version 4.3 from upstream.

The function `scipy.signal.bode`, which calculates magnitude and phase data for a continuous-time system, has been added.

The two-sample T-test `scipy.stats.ttest_ind` gained an option to compare samples with unequal variances, i.e. Welch's T-test.

`scipy.misc.logsumexp` now takes an optional `axis` keyword argument.

## Authors

This release contains work by the following people (contributed at least one patch to this release, names in alphabetical order):

  - Jeff Armstrong
  - Chad Baker
  - Brandon Beacher +
  - behrisch +
  - borishim +
  - Matthew Brett
  - Lars Buitinck
  - Luis Pedro Coelho +
  - Johann Cohen-Tanugi
  - David Cournapeau
  - dougal +
  - Ali Ebrahim +
  - endolith +
  - Bjørn Forsman +
  - Robert Gantner +
  - Sebastian Gassner +
  - Christoph Gohlke
  - Ralf Gommers
  - Yaroslav Halchenko
  - Charles Harris
  - Jonathan Helmus +
  - Andreas Hilboll +
  - Marc Honnorat +
  - Jonathan Hunt +
  - Maxim Ivanov +
  - Thouis (Ray) Jones
  - Christopher Kuster +
  - Josh Lawrence +
  - Denis Laxalde +
  - Travis Oliphant
  - Joonas Paalasmaa +
  - Fabian Pedregosa
  - Josef Perktold
  - Gavin Price +
  - Jim Radford +
  - Andrew Schein +
  - Skipper Seabold
  - Jacob Silterra +
  - Scott Sinclair
  - Alexis Tabary +
  - Martin Teichmann
  - Matt Terry +
  - Nicky van Foreest +
  - Jacob Vanderplas
  - Patrick Varilly +
  - Pauli Virtanen
  - Nils Wagner +
  - Darryl Wally +
  - Stefan van der Walt
  - Liming Wang +
  - David Warde-Farley +
  - Warren Weckesser
  - Sebastian Werk +
  - Mike Wimmer +
  - Tony S Yu +

A total of 55 people contributed to this release. People with a "+" by their names contributed a patch for the first time.

---

0.12.0-notes.md

---

# SciPy 0.12.0 Release Notes

<div class="contents">

</div>

SciPy 0.12.0 is the culmination of 7 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.12.x branch, and on adding new features on the master branch.

Some of the highlights of this release are:

>   - Completed QHull wrappers in scipy.spatial.
>   - cKDTree now a drop-in replacement for KDTree.
>   - A new global optimizer, basinhopping.
>   - Support for Python 2 and Python 3 from the same code base (no more 2to3).

This release requires Python 2.6, 2.7 or 3.1-3.3 and NumPy 1.5.1 or greater. Support for Python 2.4 and 2.5 has been dropped as of this release.

## New features

### `scipy.spatial` improvements

#### cKDTree feature-complete

Cython version of KDTree, cKDTree, is now feature-complete. Most operations (construction, query, query\_ball\_point, query\_pairs, count\_neighbors and sparse\_distance\_matrix) are between 200 and 1000 times faster in cKDTree than in KDTree. With very minor caveats, cKDTree has exactly the same interface as KDTree, and can be used as a drop-in replacement.

#### Voronoi diagrams and convex hulls

<span class="title-ref">scipy.spatial</span> now contains functionality for computing Voronoi diagrams and convex hulls using the Qhull library. (Delaunay triangulation was available since Scipy 0.9.0.)

#### Delaunay improvements

It's now possible to pass in custom Qhull options in Delaunay triangulation. Coplanar points are now also recorded, if present. Incremental construction of Delaunay triangulations is now also possible.

### Spectral estimators (`scipy.signal`)

The functions `scipy.signal.periodogram` and `scipy.signal.welch` were added, providing DFT-based spectral estimators.

### `scipy.optimize` improvements

#### Callback functions in L-BFGS-B and TNC

A callback mechanism was added to L-BFGS-B and TNC minimization solvers.

#### Basin hopping global optimization (`scipy.optimize.basinhopping`)

A new global optimization algorithm. Basinhopping is designed to efficiently find the global minimum of a smooth function.

### `scipy.special` improvements

#### Revised complex error functions

The computation of special functions related to the error function now uses a new [Faddeeva library from MIT](http://ab-initio.mit.edu/Faddeeva) which increases their numerical precision. The scaled and imaginary error functions `erfcx` and `erfi` were also added, and the Dawson integral `dawsn` can now be evaluated for a complex argument.

#### Faster orthogonal polynomials

Evaluation of orthogonal polynomials (the `eval_*` routines) in now faster in `scipy.special`, and their `out=` argument functions properly.

### `scipy.sparse.linalg` features

  - In `scipy.sparse.linalg.spsolve`, the `b` argument can now be either a vector or a matrix.
  - `scipy.sparse.linalg.inv` was added. This uses `spsolve` to compute a sparse matrix inverse.
  - `scipy.sparse.linalg.expm` was added. This computes the exponential of a sparse matrix using a similar algorithm to the existing dense array implementation in `scipy.linalg.expm`.

### Listing Matlab(R) file contents in `scipy.io`

A new function `whosmat` is available in `scipy.io` for inspecting contents of MAT files without reading them to memory.

### Documented BLAS and LAPACK low-level interfaces (`scipy.linalg`)

The modules <span class="title-ref">scipy.linalg.blas</span> and <span class="title-ref">scipy.linalg.lapack</span> can be used to access low-level BLAS and LAPACK functions.

### Polynomial interpolation improvements (`scipy.interpolate`)

The barycentric, Krogh, piecewise and pchip polynomial interpolators in `scipy.interpolate` accept now an `axis` argument.

## Deprecated features

### <span class="title-ref">scipy.lib.lapack</span>

The module <span class="title-ref">scipy.lib.lapack</span> is deprecated. You can use <span class="title-ref">scipy.linalg.lapack</span> instead. The module <span class="title-ref">scipy.lib.blas</span> was deprecated earlier in Scipy 0.10.0.

### <span class="title-ref">fblas</span> and <span class="title-ref">cblas</span>

Accessing the modules <span class="title-ref">scipy.linalg.fblas</span>, <span class="title-ref">cblas</span>, <span class="title-ref">flapack</span>, <span class="title-ref">clapack</span> is deprecated. Instead, use the modules <span class="title-ref">scipy.linalg.lapack</span> and <span class="title-ref">scipy.linalg.blas</span>.

## Backwards incompatible changes

### Removal of `scipy.io.save_as_module`

The function `scipy.io.save_as_module` was deprecated in Scipy 0.11.0, and is now removed.

Its private support modules `scipy.io.dumbdbm_patched` and `scipy.io.dumb_shelve` are also removed.

### <span class="title-ref">axis</span> argument added to <span class="title-ref">scipy.stats.scoreatpercentile</span>

The function <span class="title-ref">scipy.stats.scoreatpercentile</span> has been given an <span class="title-ref">axis</span> argument. The default argument is <span class="title-ref">axis=None</span>, which means the calculation is done on the flattened array. Before this change, <span class="title-ref">scoreatpercentile</span> would act as if <span class="title-ref">axis=0</span> had been given. Code using <span class="title-ref">scoreatpercentile</span> with a multidimensional array will need to add <span class="title-ref">axis=0</span> to the function call to preserve the old behavior. (This API change was not noticed until long after the release of 0.12.0.)

## Authors

  - Anton Akhmerov +
  - Alexander Eberspächer +
  - Anne Archibald
  - Jisk Attema +
  - K.-Michael Aye +
  - bemasc +
  - Sebastian Berg +
  - François Boulogne +
  - Matthew Brett
  - Lars Buitinck
  - Steven Byrnes +
  - Tim Cera +
  - Christian +
  - Keith Clawson +
  - David Cournapeau
  - Nathan Crock +
  - endolith
  - Bradley M. Froehle +
  - Matthew R Goodman
  - Christoph Gohlke
  - Ralf Gommers
  - Robert David Grant +
  - Yaroslav Halchenko
  - Charles Harris
  - Jonathan Helmus
  - Andreas Hilboll
  - Hugo +
  - Oleksandr Huziy
  - Jeroen Demeyer +
  - Johannes Schönberger +
  - Steven G. Johnson +
  - Chris Jordan-Squire
  - Jonathan Taylor +
  - Niklas Kroeger +
  - Jerome Kieffer +
  - kingson +
  - Josh Lawrence
  - Denis Laxalde
  - Alex Leach +
  - Tim Leslie
  - Richard Lindsley +
  - Lorenzo Luengo +
  - Stephen McQuay +
  - MinRK
  - Sturla Molden +
  - Eric Moore +
  - mszep +
  - Matt Newville +
  - Vlad Niculae
  - Travis Oliphant
  - David Parker +
  - Fabian Pedregosa
  - Josef Perktold
  - Zach Ploskey +
  - Alex Reinhart +
  - Gilles Rochefort +
  - Ciro Duran Santillli +
  - Jan Schlueter +
  - Jonathan Scholz +
  - Anthony Scopatz
  - Skipper Seabold
  - Fabrice Silva +
  - Scott Sinclair
  - Jacob Stevenson +
  - Sturla Molden +
  - Julian Taylor +
  - thorstenkranz +
  - John Travers +
  - True Price +
  - Nicky van Foreest
  - Jacob Vanderplas
  - Patrick Varilly
  - Daniel Velkov +
  - Pauli Virtanen
  - Stefan van der Walt
  - Warren Weckesser

A total of 75 people contributed to this release. People with a "+" by their names contributed a patch for the first time.

---

0.12.1-notes.md

---

# SciPy 0.12.1 Release Notes

SciPy 0.12.1 is a bug-fix release with no new features compared to 0.12.0. The single issue fixed by this release is a security issue in `scipy.weave`, which was previously using temporary directories in an insecure manner under certain circumstances.

---

0.13.0-notes.md

---

# SciPy 0.13.0 Release Notes

<div class="contents">

</div>

SciPy 0.13.0 is the culmination of 7 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.13.x branch, and on adding new features on the master branch.

This release requires Python 2.6, 2.7 or 3.1-3.3 and NumPy 1.5.1 or greater. Highlights of this release are:

>   - support for fancy indexing and boolean comparisons with sparse matrices
>   - interpolative decompositions and matrix functions in the linalg module
>   - two new trust-region solvers for unconstrained minimization

## New features

### `scipy.integrate` improvements

#### N-dimensional numerical integration

A new function <span class="title-ref">scipy.integrate.nquad</span>, which provides N-dimensional integration functionality with a more flexible interface than `dblquad` and `tplquad`, has been added.

#### `dopri*` improvements

The intermediate results from the `dopri` family of ODE solvers can now be accessed by a *solout* callback function.

### `scipy.linalg` improvements

#### Interpolative decompositions

Scipy now includes a new module <span class="title-ref">scipy.linalg.interpolative</span> containing routines for computing interpolative matrix decompositions (ID). This feature is based on the ID software package by P.G. Martinsson, V. Rokhlin, Y. Shkolnisky, and M. Tygert, previously adapted for Python in the PymatrixId package by K.L. Ho.

#### Polar decomposition

A new function <span class="title-ref">scipy.linalg.polar</span>, to compute the polar decomposition of a matrix, was added.

#### BLAS level 3 functions

The BLAS functions `symm`, `syrk`, `syr2k`, `hemm`, `herk` and `her2k` are now wrapped in <span class="title-ref">scipy.linalg</span>.

#### Matrix functions

Several matrix function algorithms have been implemented or updated following detailed descriptions in recent papers of Nick Higham and his co-authors. These include the matrix square root (`sqrtm`), the matrix logarithm (`logm`), the matrix exponential (`expm`) and its Frechet derivative (`expm_frechet`), and fractional matrix powers (`fractional_matrix_power`).

### `scipy.optimize` improvements

#### Trust-region unconstrained minimization algorithms

The `minimize` function gained two trust-region solvers for unconstrained minimization: `dogleg` and `trust-ncg`.

### `scipy.sparse` improvements

#### Boolean comparisons and sparse matrices

All sparse matrix types now support boolean data, and boolean operations. Two sparse matrices <span class="title-ref">A</span> and <span class="title-ref">B</span> can be compared in all the expected ways <span class="title-ref">A \< B</span>, <span class="title-ref">A \>= B</span>, <span class="title-ref">A \!= B</span>, producing similar results as dense Numpy arrays. Comparisons with dense matrices and scalars are also supported.

#### CSR and CSC fancy indexing

Compressed sparse row and column sparse matrix types now support fancy indexing with boolean matrices, slices, and lists. So where A is a (CSC or CSR) sparse matrix, you can do things like:

    >>> A[A > 0.5] = 1  # since Boolean sparse matrices work
    >>> A[:2, :3] = 2
    >>> A[[1,2], 2] = 3

### `scipy.sparse.linalg` improvements

The new function `onenormest` provides a lower bound of the 1-norm of a linear operator and has been implemented according to Higham and Tisseur (2000). This function is not only useful for sparse matrices, but can also be used to estimate the norm of products or powers of dense matrices without explicitly building the intermediate matrix.

The multiplicative action of the matrix exponential of a linear operator (`expm_multiply`) has been implemented following the description in Al-Mohy and Higham (2011).

Abstract linear operators (<span class="title-ref">scipy.sparse.linalg.LinearOperator</span>) can now be multiplied, added to each other, and exponentiated, producing new linear operators. This enables easier construction of composite linear operations.

### `scipy.spatial` improvements

The vertices of a <span class="title-ref">ConvexHull</span> can now be accessed via the <span class="title-ref">vertices</span> attribute, which gives proper orientation in 2-D.

### `scipy.signal` improvements

The cosine window function `scipy.signal.cosine` was added.

### `scipy.special` improvements

New functions <span class="title-ref">scipy.special.xlogy</span> and <span class="title-ref">scipy.special.xlog1py</span> were added. These functions can simplify and speed up code that has to calculate `x * log(y)` and give 0 when `x == 0`.

### `scipy.io` improvements

#### Unformatted Fortran file reader

The new class <span class="title-ref">scipy.io.FortranFile</span> facilitates reading unformatted sequential files written by Fortran code.

#### `scipy.io.wavfile` enhancements

<span class="title-ref">scipy.io.wavfile.write</span> now accepts a file buffer. Previously it only accepted a filename.

<span class="title-ref">scipy.io.wavfile.read</span> and <span class="title-ref">scipy.io.wavfile.write</span> can now handle floating point WAV files.

### `scipy.interpolate` improvements

#### B-spline derivatives and antiderivatives

<span class="title-ref">scipy.interpolate.splder</span> and <span class="title-ref">scipy.interpolate.splantider</span> functions for computing B-splines that represent derivatives and antiderivatives of B-splines were added. These functions are also available in the class-based FITPACK interface as `UnivariateSpline.derivative` and `UnivariateSpline.antiderivative`.

### `scipy.stats` improvements

Distributions now allow using keyword parameters in addition to positional parameters in all methods.

The function <span class="title-ref">scipy.stats.power\_divergence</span> has been added for the Cressie-Read power divergence statistic and goodness of fit test. Included in this family of statistics is the "G-test" (<https://en.wikipedia.org/wiki/G-test>).

<span class="title-ref">scipy.stats.mood</span> now accepts multidimensional input.

An option was added to <span class="title-ref">scipy.stats.wilcoxon</span> for continuity correction.

<span class="title-ref">scipy.stats.chisquare</span> now has an <span class="title-ref">axis</span> argument.

<span class="title-ref">scipy.stats.mstats.chisquare</span> now has <span class="title-ref">axis</span> and <span class="title-ref">ddof</span> arguments.

## Deprecated features

### `expm2` and `expm3`

The matrix exponential functions <span class="title-ref">scipy.linalg.expm2</span> and <span class="title-ref">scipy.linalg.expm3</span> are deprecated. All users should use the numerically more robust <span class="title-ref">scipy.linalg.expm</span> function instead.

### `scipy.stats` functions

<span class="title-ref">scipy.stats.oneway</span> is deprecated; <span class="title-ref">scipy.stats.f\_oneway</span> should be used instead.

<span class="title-ref">scipy.stats.glm</span> is deprecated. <span class="title-ref">scipy.stats.ttest\_ind</span> is an equivalent function; more full-featured general (and generalized) linear model implementations can be found in statsmodels.

<span class="title-ref">scipy.stats.cmedian</span> is deprecated; `numpy.median` should be used instead.

## Backwards incompatible changes

### LIL matrix assignment

Assigning values to LIL matrices with two index arrays now works similarly as assigning into ndarrays:

    >>> x = lil_matrix((3, 3))
    >>> x[[0,1,2],[0,1,2]]=[0,1,2]
    >>> x.todense()
    matrix([[ 0.,  0.,  0.],
            [ 0.,  1.,  0.],
            [ 0.,  0.,  2.]])

rather than giving the result:

    >>> x.todense()
    matrix([[ 0.,  1.,  2.],
            [ 0.,  1.,  2.],
            [ 0.,  1.,  2.]])

Users relying on the previous behavior will need to revisit their code. The previous behavior is obtained by `x[numpy.ix_([0,1,2],[0,1,2])] = ...`.

### Deprecated `radon` function removed

The `misc.radon` function, which was deprecated in scipy 0.11.0, has been removed. Users can find a more full-featured `radon` function in scikit-image.

### Removed deprecated keywords `xa` and `xb` from `stats.distributions`

The keywords `xa` and `xb`, which were deprecated since 0.11.0, have been removed from the distributions in `scipy.stats`.

### Changes to MATLAB file readers / writers

The major change is that 1D arrays in numpy now become row vectors (shape 1, N) when saved to a MATLAB 5 format file. Previously 1D arrays saved as column vectors (N, 1). This is to harmonize the behavior of writing MATLAB 4 and 5 formats, and adapt to the defaults of numpy and MATLAB - for example `np.atleast_2d` returns 1D arrays as row vectors.

Trying to save arrays of greater than 2 dimensions in MATLAB 4 format now raises an error instead of silently reshaping the array as 2D.

`scipy.io.loadmat('afile')` used to look for <span class="title-ref">afile</span> on the Python system path (`sys.path`); now `loadmat` only looks in the current directory for a relative path filename.

## Other changes

Security fix: `scipy.weave` previously used temporary directories in an insecure manner under certain circumstances.

Cython is now required to build *unreleased* versions of scipy. The C files generated from Cython sources are not included in the git repo anymore. They are however still shipped in source releases.

The code base received a fairly large PEP8 cleanup. A `tox pep8` command has been added; new code should pass this test command.

Scipy cannot be compiled with gfortran 4.1 anymore (at least on RH5), likely due to that compiler version not supporting entry constructs well.

## Authors

This release contains work by the following people (contributed at least one patch to this release, names in alphabetical order):

  - Jorge Cañardo Alastuey +
  - Tom Aldcroft +
  - Max Bolingbroke +
  - Joseph Jon Booker +
  - François Boulogne
  - Matthew Brett
  - Christian Brodbeck +
  - Per Brodtkorb +
  - Christian Brueffer +
  - Lars Buitinck
  - Evgeni Burovski +
  - Tim Cera
  - Lawrence Chan +
  - David Cournapeau
  - Dražen Lučanin +
  - Alexander J. Dunlap +
  - endolith
  - André Gaul +
  - Christoph Gohlke
  - Ralf Gommers
  - Alex Griffing +
  - Blake Griffith +
  - Charles Harris
  - Bob Helmbold +
  - Andreas Hilboll
  - Kat Huang +
  - Oleksandr (Sasha) Huziy +
  - Gert-Ludwig Ingold +
  - Thouis (Ray) Jones
  - Juan Luis Cano Rodríguez +
  - Robert Kern
  - Andreas Kloeckner +
  - Sytse Knypstra +
  - Gustav Larsson +
  - Denis Laxalde
  - Christopher Lee
  - Tim Leslie
  - Wendy Liu +
  - Clemens Novak +
  - Takuya Oshima +
  - Josef Perktold
  - Illia Polosukhin +
  - Przemek Porebski +
  - Steve Richardson +
  - Branden Rolston +
  - Skipper Seabold
  - Fazlul Shahriar
  - Leo Singer +
  - Rohit Sivaprasad +
  - Daniel B. Smith +
  - Julian Taylor
  - Louis Thibault +
  - Tomas Tomecek +
  - John Travers
  - Richard Tsai +
  - Jacob Vanderplas
  - Patrick Varilly
  - Pauli Virtanen
  - Stefan van der Walt
  - Warren Weckesser
  - Pedro Werneck +
  - Nils Werner +
  - Michael Wimmer +
  - Nathan Woods +
  - Tony S. Yu +

A total of 65 people contributed to this release. People with a "+" by their names contributed a patch for the first time.

---

0.13.1-notes.md

---

# SciPy 0.13.1 Release Notes

SciPy 0.13.1 is a bug-fix release with no new features compared to 0.13.0. The only changes are several fixes in `ndimage`, one of which was a serious regression in `ndimage.label` (Github issue 3025), which gave incorrect results in 0.13.0.

## Issues fixed

  - 3025: `ndimage.label` returns incorrect results in scipy 0.13.0
  - 1992: `ndimage.label` return type changed from int32 to uint32
  - 1992: `ndimage.find_objects` doesn't work with int32 input in some cases

---

0.13.2-notes.md

---

# SciPy 0.13.2 Release Notes

SciPy 0.13.2 is a bug-fix release with no new features compared to 0.13.1.

## Issues fixed

  - 3096: require Cython 0.19, earlier versions have memory leaks in fused types
  - 3079: `ndimage.label` fix swapped 64-bitness test
  - 3108: `optimize.fmin_slsqp` constraint violation

---

0.14.0-notes.md

---

# SciPy 0.14.0 Release Notes

<div class="contents">

</div>

SciPy 0.14.0 is the culmination of 8 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.14.x branch, and on adding new features on the master branch.

This release requires Python 2.6, 2.7 or 3.2-3.4 and NumPy 1.5.1 or greater.

## New features

### `scipy.interpolate` improvements

A new wrapper function <span class="title-ref">scipy.interpolate.interpn</span> for interpolation on regular grids has been added. <span class="title-ref">interpn</span> supports linear and nearest-neighbor interpolation in arbitrary dimensions and spline interpolation in two dimensions.

Faster implementations of piecewise polynomials in power and Bernstein polynomial bases have been added as <span class="title-ref">scipy.interpolate.PPoly</span> and <span class="title-ref">scipy.interpolate.BPoly</span>. New users should use these in favor of <span class="title-ref">scipy.interpolate.PiecewisePolynomial</span>.

<span class="title-ref">scipy.interpolate.interp1d</span> now accepts non-monotonic inputs and sorts them. If performance is critical, sorting can be turned off by using the new `assume_sorted` keyword.

Functionality for evaluation of bivariate spline derivatives in `scipy.interpolate` has been added.

The new class <span class="title-ref">scipy.interpolate.Akima1DInterpolator</span> implements the piecewise cubic polynomial interpolation scheme devised by H. Akima.

Functionality for fast interpolation on regular, unevenly spaced grids in arbitrary dimensions has been added as <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span> .

### `scipy.linalg` improvements

The new function <span class="title-ref">scipy.linalg.dft</span> computes the matrix of the discrete Fourier transform.

A condition number estimation function for matrix exponential, <span class="title-ref">scipy.linalg.expm\_cond</span>, has been added.

### `scipy.optimize` improvements

A set of benchmarks for optimize, which can be run with `optimize.bench()`, has been added.

<span class="title-ref">scipy.optimize.curve\_fit</span> now has more controllable error estimation via the `absolute_sigma` keyword.

Support for passing custom minimization methods to `optimize.minimize()` and `optimize.minimize_scalar()` has been added, currently useful especially for combining `optimize.basinhopping()` with custom local optimizer routines.

### `scipy.stats` improvements

A new class <span class="title-ref">scipy.stats.multivariate\_normal</span> with functionality for multivariate normal random variables has been added.

A lot of work on the `scipy.stats` distribution framework has been done. Moment calculations (skew and kurtosis mainly) are fixed and verified, all examples are now runnable, and many small accuracy and performance improvements for individual distributions were merged.

The new function <span class="title-ref">scipy.stats.anderson\_ksamp</span> computes the k-sample Anderson-Darling test for the null hypothesis that k samples come from the same parent population.

### `scipy.signal` improvements

`scipy.signal.iirfilter` and related functions to design Butterworth, Chebyshev, elliptical and Bessel IIR filters now all use pole-zero ("zpk") format internally instead of using transformations to numerator/denominator format. The accuracy of the produced filters, especially high-order ones, is improved significantly as a result.

The Savitzky-Golay filter was added with the new functions <span class="title-ref">scipy.signal.savgol\_filter</span> and <span class="title-ref">scipy.signal.savgol\_coeffs</span>.

The new function <span class="title-ref">scipy.signal.vectorstrength</span> computes the vector strength, a measure of phase synchrony, of a set of events.

### `scipy.special` improvements

The functions <span class="title-ref">scipy.special.boxcox</span> and <span class="title-ref">scipy.special.boxcox1p</span>, which compute the Box-Cox transformation, have been added.

### `scipy.sparse` improvements

  - Significant performance improvement in CSR, CSC, and DOK indexing speed.
  - When using Numpy \>= 1.9 (to be released in MM 2014), sparse matrices function correctly when given to arguments of `np.dot`, `np.multiply` and other ufuncs. With earlier Numpy and Scipy versions, the results of such operations are undefined and usually unexpected.
  - Sparse matrices are no longer limited to `2^31` nonzero elements. They automatically switch to using 64-bit index data type for matrices containing more elements. User code written assuming the sparse matrices use int32 as the index data type will continue to work, except for such large matrices. Code dealing with larger matrices needs to accept either int32 or int64 indices.

## Deprecated features

### `anneal`

The global minimization function <span class="title-ref">scipy.optimize.anneal</span> is deprecated. All users should use the <span class="title-ref">scipy.optimize.basinhopping</span> function instead.

### `scipy.stats`

`randwcdf` and `randwppf` functions are deprecated. All users should use distribution-specific `rvs` methods instead.

Probability calculation aliases `zprob`, `fprob` and `ksprob` are deprecated. Use instead the `sf` methods of the corresponding distributions or the `special` functions directly.

### `scipy.interpolate`

`PiecewisePolynomial` class is deprecated.

## Backwards incompatible changes

### scipy.special.lpmn

`lpmn` no longer accepts complex-valued arguments. A new function `clpmn` with uniform complex analytic behavior has been added, and it should be used instead.

### scipy.sparse.linalg

Eigenvectors in the case of generalized eigenvalue problem are normalized to unit vectors in 2-norm, rather than following the LAPACK normalization convention.

The deprecated UMFPACK wrapper in `scipy.sparse.linalg` has been removed due to license and install issues. If available, `scikits.umfpack` is still used transparently in the `spsolve` and `factorized` functions. Otherwise, SuperLU is used instead in these functions.

### scipy.stats

The deprecated functions `glm`, `oneway` and `cmedian` have been removed from `scipy.stats`.

`stats.scoreatpercentile` now returns an array instead of a list of percentiles.

### scipy.interpolate

The API for computing derivatives of a monotone piecewise interpolation has changed: if <span class="title-ref">p</span> is a `PchipInterpolator` object, <span class="title-ref">p.derivative(der)</span> returns a callable object representing the derivative of <span class="title-ref">p</span>. For in-place derivatives use the second argument of the <span class="title-ref">\_\_call\_\_</span> method: <span class="title-ref">p(0.1, der=2)</span> evaluates the second derivative of <span class="title-ref">p</span> at <span class="title-ref">x=0.1</span>.

The method <span class="title-ref">p.derivatives</span> has been removed.

## Other changes

## Authors

  - Marc Abramowitz +
  - Anders Bech Borchersen +
  - Vincent Arel-Bundock +
  - Petr Baudis +
  - Max Bolingbroke
  - François Boulogne
  - Matthew Brett
  - Lars Buitinck
  - Evgeni Burovski
  - CJ Carey +
  - Thomas A Caswell +
  - Pawel Chojnacki +
  - Phillip Cloud +
  - Stefano Costa +
  - David Cournapeau
  - David Menendez Hurtado +
  - Matthieu Dartiailh +
  - Christoph Deil +
  - Jörg Dietrich +
  - endolith
  - Francisco de la Peña +
  - Ben FrantzDale +
  - Jim Garrison +
  - André Gaul
  - Christoph Gohlke
  - Ralf Gommers
  - Robert David Grant
  - Alex Griffing
  - Blake Griffith
  - Yaroslav Halchenko
  - Andreas Hilboll
  - Kat Huang
  - Gert-Ludwig Ingold
  - James T. Webber +
  - Dorota Jarecka +
  - Todd Jennings +
  - Thouis (Ray) Jones
  - Juan Luis Cano Rodríguez
  - ktritz +
  - Jacques Kvam +
  - Eric Larson +
  - Justin Lavoie +
  - Denis Laxalde
  - Jussi Leinonen +
  - lemonlaug +
  - Tim Leslie
  - Alain Leufroy +
  - George Lewis +
  - Max Linke +
  - Brandon Liu +
  - Benny Malengier +
  - Matthias Kümmerer +
  - Cimarron Mittelsteadt +
  - Eric Moore
  - Andrew Nelson +
  - Niklas Hambüchen +
  - Joel Nothman +
  - Clemens Novak
  - Emanuele Olivetti +
  - Stefan Otte +
  - peb +
  - Josef Perktold
  - pjwerneck
  - poolio
  - Jérôme Roy +
  - Carl Sandrock +
  - Andrew Sczesnak +
  - Shauna +
  - Fabrice Silva
  - Daniel B. Smith
  - Patrick Snape +
  - Thomas Spura +
  - Jacob Stevenson
  - Julian Taylor
  - Tomas Tomecek
  - Richard Tsai
  - Jacob Vanderplas
  - Joris Vankerschaver +
  - Pauli Virtanen
  - Warren Weckesser

A total of 80 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed

  - [\#1325](https://github.com/scipy/scipy/issues/1325): add custom axis keyword to dendrogram function in scipy.cluster.hierarchy...
  - [\#1437](https://github.com/scipy/scipy/issues/1437): Wrong pochhammer symbol for negative integers (Trac \#910)
  - [\#1555](https://github.com/scipy/scipy/issues/1555): scipy.io.netcdf leaks file descriptors (Trac \#1028)
  - [\#1569](https://github.com/scipy/scipy/issues/1569): sparse matrix failed with element-wise multiplication using numpy.multiply()...
  - [\#1833](https://github.com/scipy/scipy/issues/1833): Sparse matrices are limited to 2^32 non-zero elements (Trac \#1307)
  - [\#1834](https://github.com/scipy/scipy/issues/1834): scipy.linalg.eig does not normalize eigenvector if B is given...
  - [\#1866](https://github.com/scipy/scipy/issues/1866): stats for invgamma (Trac \#1340)
  - [\#1886](https://github.com/scipy/scipy/issues/1886): stats.zipf floating point warnings (Trac \#1361)
  - [\#1887](https://github.com/scipy/scipy/issues/1887): Stats continuous distributions - floating point warnings (Trac...
  - [\#1897](https://github.com/scipy/scipy/issues/1897): scoreatpercentile() does not handle empty list inputs (Trac \#1372)
  - [\#1918](https://github.com/scipy/scipy/issues/1918): splint returns incorrect results (Trac \#1393)
  - [\#1949](https://github.com/scipy/scipy/issues/1949): kurtosistest fails in mstats with type error (Trac \#1424)
  - [\#2092](https://github.com/scipy/scipy/issues/2092): scipy.test leaves darwin27compiled\_catalog, cpp and so files...
  - [\#2106](https://github.com/scipy/scipy/issues/2106): stats ENH: shape parameters in distribution docstrings (Trac...
  - [\#2123](https://github.com/scipy/scipy/issues/2123): Bad behavior of sparse matrices in a binary ufunc (Trac \#1598)
  - [\#2152](https://github.com/scipy/scipy/issues/2152): Fix mmio/fromfile on gzip on Python 3 (Trac \#1627)
  - [\#2164](https://github.com/scipy/scipy/issues/2164): stats.rice.pdf(x, 0) returns nan (Trac \#1639)
  - [\#2169](https://github.com/scipy/scipy/issues/2169): scipy.optimize.fmin\_bfgs not handling functions with boundaries...
  - [\#2177](https://github.com/scipy/scipy/issues/2177): scipy.cluster.hierarchy.ClusterNode.pre\_order returns IndexError...
  - [\#2179](https://github.com/scipy/scipy/issues/2179): coo.todense() segfaults (Trac \#1654)
  - [\#2185](https://github.com/scipy/scipy/issues/2185): Precision of scipy.ndimage.gaussian\_filter\*() limited (Trac \#1660)
  - [\#2186](https://github.com/scipy/scipy/issues/2186): scipy.stats.mstats.kurtosistest crashes on 1d input (Trac \#1661)
  - [\#2238](https://github.com/scipy/scipy/issues/2238): Negative p-value on hypergeom.cdf (Trac \#1719)
  - [\#2283](https://github.com/scipy/scipy/issues/2283): ascending order in interpolation routines (Trac \#1764)
  - [\#2288](https://github.com/scipy/scipy/issues/2288): mstats.kurtosistest is incorrectly converting to float, and fails...
  - [\#2396](https://github.com/scipy/scipy/issues/2396): lpmn wrong results for `|z| > 1` (Trac \#1877)
  - [\#2398](https://github.com/scipy/scipy/issues/2398): ss2tf returns num as 2D array instead of 1D (Trac \#1879)
  - [\#2406](https://github.com/scipy/scipy/issues/2406): linkage does not take Unicode strings as method names (Trac \#1887)
  - [\#2443](https://github.com/scipy/scipy/issues/2443): IIR filter design should not transform to tf representation internally
  - [\#2572](https://github.com/scipy/scipy/issues/2572): class method solve of splu return object corrupted or falsely...
  - [\#2667](https://github.com/scipy/scipy/issues/2667): stats endless loop ?
  - [\#2671](https://github.com/scipy/scipy/issues/2671): .stats.hypergeom documentation error in the note about pmf
  - [\#2691](https://github.com/scipy/scipy/issues/2691): BUG scipy.linalg.lapack: potrf/ptroi interpret their 'lower'...
  - [\#2721](https://github.com/scipy/scipy/issues/2721): Allow use of ellipsis in scipy.sparse slicing
  - [\#2741](https://github.com/scipy/scipy/issues/2741): stats: deprecate and remove alias for special functions
  - [\#2742](https://github.com/scipy/scipy/issues/2742): stats add rvs to rice distribution
  - [\#2765](https://github.com/scipy/scipy/issues/2765): bugs stats entropy
  - [\#2832](https://github.com/scipy/scipy/issues/2832): argrelextrema returns tuple of 2 empty arrays when no peaks found...
  - [\#2861](https://github.com/scipy/scipy/issues/2861): scipy.stats.scoreatpercentile broken for vector <span class="title-ref">per</span>
  - [\#2891](https://github.com/scipy/scipy/issues/2891): COBYLA successful termination when constraints violated
  - [\#2919](https://github.com/scipy/scipy/issues/2919): test failure with the current master
  - [\#2922](https://github.com/scipy/scipy/issues/2922): ndimage.percentile\_filter ignores origin argument for multidimensional...
  - [\#2938](https://github.com/scipy/scipy/issues/2938): Sparse/dense matrix inplace operations fail due to \_\_numpy\_ufunc\_\_
  - [\#2944](https://github.com/scipy/scipy/issues/2944): MacPorts builds yield 40Mb worth of build warnings
  - [\#2945](https://github.com/scipy/scipy/issues/2945): FAIL: test\_random\_complex (test\_basic.TestDet)
  - [\#2947](https://github.com/scipy/scipy/issues/2947): FAIL: Test some trivial edge cases for savgol\_filter()
  - [\#2953](https://github.com/scipy/scipy/issues/2953): Scipy Delaunay triangulation is not oriented
  - [\#2971](https://github.com/scipy/scipy/issues/2971): scipy.stats.mstats.winsorize documentation error
  - [\#2980](https://github.com/scipy/scipy/issues/2980): Problems running what seems a perfectly valid example
  - [\#2996](https://github.com/scipy/scipy/issues/2996): entropy for rv\_discrete is incorrect?\!
  - [\#2998](https://github.com/scipy/scipy/issues/2998): Fix numpy version comparisons
  - [\#3002](https://github.com/scipy/scipy/issues/3002): python setup.py install fails
  - [\#3014](https://github.com/scipy/scipy/issues/3014): Bug in stats.fisher\_exact
  - [\#3030](https://github.com/scipy/scipy/issues/3030): relative entropy using scipy.stats.distribution.entropy when...
  - [\#3037](https://github.com/scipy/scipy/issues/3037): scipy.optimize.curve\_fit leads to unexpected behavior when input...
  - [\#3047](https://github.com/scipy/scipy/issues/3047): mstats.ttest\_rel axis=None, requires masked array
  - [\#3059](https://github.com/scipy/scipy/issues/3059): BUG: Slices of sparse matrices return incorrect dtype
  - [\#3063](https://github.com/scipy/scipy/issues/3063): range keyword in binned\_statistics incorrect
  - [\#3067](https://github.com/scipy/scipy/issues/3067): cumtrapz not working as expected
  - [\#3069](https://github.com/scipy/scipy/issues/3069): sinc
  - [\#3086](https://github.com/scipy/scipy/issues/3086): standard error calculation inconsistent between 'stats' and 'mstats'
  - [\#3094](https://github.com/scipy/scipy/issues/3094): Add a <span class="title-ref">perm</span> function into <span class="title-ref">scipy.misc</span> and an enhancement of...
  - [\#3111](https://github.com/scipy/scipy/issues/3111): scipy.sparse.\[hv\]stack don't respect anymore the dtype parameter
  - [\#3172](https://github.com/scipy/scipy/issues/3172): optimize.curve\_fit uses different nomenclature from optimize.leastsq
  - [\#3196](https://github.com/scipy/scipy/issues/3196): scipy.stats.mstats.gmean does not actually take dtype
  - [\#3212](https://github.com/scipy/scipy/issues/3212): Dot product of csr\_matrix causes segmentation fault
  - [\#3227](https://github.com/scipy/scipy/issues/3227): ZeroDivisionError in broyden1 when initial guess is the right...
  - [\#3238](https://github.com/scipy/scipy/issues/3238): lbfgsb output not suppressed by disp=0
  - [\#3249](https://github.com/scipy/scipy/issues/3249): Sparse matrix min/max/etc don't support axis=-1
  - [\#3251](https://github.com/scipy/scipy/issues/3251): cdist performance issue with 'sqeuclidean' metric
  - [\#3279](https://github.com/scipy/scipy/issues/3279): logm fails for singular matrix
  - [\#3285](https://github.com/scipy/scipy/issues/3285): signal.chirp(method='hyp') disallows hyperbolic upsweep
  - [\#3299](https://github.com/scipy/scipy/issues/3299): MEMORY LEAK: fmin\_tnc
  - [\#3330](https://github.com/scipy/scipy/issues/3330): test failures with the current master
  - [\#3345](https://github.com/scipy/scipy/issues/3345): scipy and/or numpy change is causing tests to fail in another...
  - [\#3363](https://github.com/scipy/scipy/issues/3363): splu does not work for non-vector inputs
  - [\#3385](https://github.com/scipy/scipy/issues/3385): expit does not handle large arguments well
  - [\#3395](https://github.com/scipy/scipy/issues/3395): specfun.f doesn't compile with MinGW
  - [\#3399](https://github.com/scipy/scipy/issues/3399): Error message bug in scipy.cluster.hierarchy.linkage
  - [\#3404](https://github.com/scipy/scipy/issues/3404): interpolate.\_ppoly doesn't build with MinGW
  - [\#3412](https://github.com/scipy/scipy/issues/3412): Test failures in signal
  - [\#3466](https://github.com/scipy/scipy/issues/3466): `` `scipy.sparse.csgraph.shortest_path ``<span class="title-ref"> does not work on </span>`scipy.sparse.csr_matrix`<span class="title-ref"> or </span>`lil_matrix`\`

### Pull requests

  - [\#442](https://github.com/scipy/scipy/pull/442): ENH: sparse: enable 64-bit index arrays & nnz \> 2\*\*31
  - [\#2766](https://github.com/scipy/scipy/pull/2766): DOC: remove doc/seps/technology-preview.rst
  - [\#2772](https://github.com/scipy/scipy/pull/2772): TST: stats: Added a regression test for stats.wilcoxon. Closes...
  - [\#2778](https://github.com/scipy/scipy/pull/2778): Clean up stats.\_support, close statistics review issues
  - [\#2792](https://github.com/scipy/scipy/pull/2792): BUG io: fix file descriptor closing for netcdf variables
  - [\#2847](https://github.com/scipy/scipy/pull/2847): Rice distribution: extend to b=0, add an explicit rvs method.
  - [\#2878](https://github.com/scipy/scipy/pull/2878): \[stats\] fix formulas for higher moments of dweibull distribution
  - [\#2904](https://github.com/scipy/scipy/pull/2904): ENH: moments for the zipf distribution
  - [\#2907](https://github.com/scipy/scipy/pull/2907): ENH: add coverage info with coveralls.io for Travis runs.
  - [\#2932](https://github.com/scipy/scipy/pull/2932): BUG+TST: setdiag implementation for dia\_matrix (Close \#2931)...
  - [\#2942](https://github.com/scipy/scipy/pull/2942): Misc fixes pointed out by Eclipse PyDev static code analysis
  - [\#2946](https://github.com/scipy/scipy/pull/2946): ENH: allow non-monotonic input in interp1d
  - [\#2986](https://github.com/scipy/scipy/pull/2986): BUG: runtests: chdir away from root when running tests
  - [\#2987](https://github.com/scipy/scipy/pull/2987): DOC: linalg: don't recommend np.linalg.norm
  - [\#2992](https://github.com/scipy/scipy/pull/2992): ENH: Add "limit" parameter to dijkstra calculation
  - [\#2995](https://github.com/scipy/scipy/pull/2995): ENH: Use int shape
  - [\#3006](https://github.com/scipy/scipy/pull/3006): DOC: stats: add a log base note to the docstring
  - [\#3007](https://github.com/scipy/scipy/pull/3007): DEP: stats: Deprecate randwppf and randwcdf
  - [\#3008](https://github.com/scipy/scipy/pull/3008): Fix mstats.kurtosistest, and test coverage for skewtest/normaltest
  - [\#3009](https://github.com/scipy/scipy/pull/3009): Minor reST typo
  - [\#3010](https://github.com/scipy/scipy/pull/3010): Add <span class="title-ref">scipy.optimize.Result</span> to API docs
  - [\#3012](https://github.com/scipy/scipy/pull/3012): Corrects documentation error
  - [\#3052](https://github.com/scipy/scipy/pull/3052): PEP-8 conformance improvements
  - [\#3064](https://github.com/scipy/scipy/pull/3064): Binned statistic
  - [\#3068](https://github.com/scipy/scipy/pull/3068): Fix Issue \#3067 fix cumptrapz that was raising an exception when...
  - [\#3073](https://github.com/scipy/scipy/pull/3073): Arff reader with nominal value of 1 character
  - [\#3074](https://github.com/scipy/scipy/pull/3074): Some maintenance work
  - [\#3080](https://github.com/scipy/scipy/pull/3080): Review and clean up all Box-Cox functions
  - [\#3083](https://github.com/scipy/scipy/pull/3083): Bug: should return 0 if no regions found
  - [\#3085](https://github.com/scipy/scipy/pull/3085): BUG: Use zpk in IIR filter design to improve accuracy
  - [\#3101](https://github.com/scipy/scipy/pull/3101): refactor stats tests a bit
  - [\#3112](https://github.com/scipy/scipy/pull/3112): ENH: implement Akima interpolation in 1D
  - [\#3123](https://github.com/scipy/scipy/pull/3123): MAINT: an easier way to make ranges from slices
  - [\#3124](https://github.com/scipy/scipy/pull/3124): File object support for imread and imsave
  - [\#3126](https://github.com/scipy/scipy/pull/3126): pep8ify stats/distributions.py
  - [\#3134](https://github.com/scipy/scipy/pull/3134): MAINT: split distributions.py into three files
  - [\#3138](https://github.com/scipy/scipy/pull/3138): clean up tests for discrete distributions
  - [\#3155](https://github.com/scipy/scipy/pull/3155): special: handle the edge case lambda=0 in pdtr, pdtrc and pdtrik
  - [\#3156](https://github.com/scipy/scipy/pull/3156): Rename optimize.Result to OptimizeResult
  - [\#3166](https://github.com/scipy/scipy/pull/3166): BUG: make curve\_fit() work with array\_like input. Closes gh-3037.
  - [\#3170](https://github.com/scipy/scipy/pull/3170): Fix numpy version checks
  - [\#3175](https://github.com/scipy/scipy/pull/3175): use numpy sinc
  - [\#3177](https://github.com/scipy/scipy/pull/3177): Update numpy version warning, remove oldnumeric import
  - [\#3178](https://github.com/scipy/scipy/pull/3178): DEP: remove deprecated umfpack wrapper. Closes gh-3002.
  - [\#3179](https://github.com/scipy/scipy/pull/3179): DOC: add BPoly to the docs
  - [\#3180](https://github.com/scipy/scipy/pull/3180): Suppress warnings when running stats.test()
  - [\#3181](https://github.com/scipy/scipy/pull/3181): altered sem func in mstats to match stats
  - [\#3182](https://github.com/scipy/scipy/pull/3182): Make weave tests behave
  - [\#3183](https://github.com/scipy/scipy/pull/3183): ENH: Add k-sample Anderson-Darling test to stats module
  - [\#3186](https://github.com/scipy/scipy/pull/3186): Fix stats.scoreatpercentile
  - [\#3187](https://github.com/scipy/scipy/pull/3187): DOC: make curve\_fit nomenclature same as leastsq
  - [\#3201](https://github.com/scipy/scipy/pull/3201): Added axis keyword to dendrogram function
  - [\#3207](https://github.com/scipy/scipy/pull/3207): Make docstring examples in stats.distributions docstrings runnable
  - [\#3218](https://github.com/scipy/scipy/pull/3218): BUG: integrate: Fix banded jacobian handling in the "vode" and...
  - [\#3222](https://github.com/scipy/scipy/pull/3222): BUG: limit input ranges in special.nctdtr
  - [\#3223](https://github.com/scipy/scipy/pull/3223): Fix test errors with numpy master
  - [\#3224](https://github.com/scipy/scipy/pull/3224): Fix int32 overflows in sparsetools
  - [\#3228](https://github.com/scipy/scipy/pull/3228): DOC: tf2ss zpk2ss note controller canonical form
  - [\#3234](https://github.com/scipy/scipy/pull/3234): Add See Also links and Example graphs to filter design `*ord` functions
  - [\#3235](https://github.com/scipy/scipy/pull/3235): Updated the buttord function to be consistent with the other...
  - [\#3239](https://github.com/scipy/scipy/pull/3239): correct doc for pchip interpolation
  - [\#3240](https://github.com/scipy/scipy/pull/3240): DOC: fix ReST errors in the BPoly docstring
  - [\#3241](https://github.com/scipy/scipy/pull/3241): RF: check write attr of fileobject without writing
  - [\#3243](https://github.com/scipy/scipy/pull/3243): a bit of maintanence work in stats
  - [\#3245](https://github.com/scipy/scipy/pull/3245): BUG/ENH: stats: make frozen distributions hold separate instances
  - [\#3247](https://github.com/scipy/scipy/pull/3247): ENH function to return nnz per row/column in some sparse matrices
  - [\#3248](https://github.com/scipy/scipy/pull/3248): ENH much more efficient sparse min/max with axis
  - [\#3252](https://github.com/scipy/scipy/pull/3252): Fast sqeuclidean
  - [\#3253](https://github.com/scipy/scipy/pull/3253): FIX support axis=-1 and -2 for sparse reduce methods
  - [\#3254](https://github.com/scipy/scipy/pull/3254): TST tests for non-canonical input to sparse matrix operations
  - [\#3272](https://github.com/scipy/scipy/pull/3272): BUG: sparse: fix bugs in dia\_matrix.setdiag
  - [\#3278](https://github.com/scipy/scipy/pull/3278): Also generate a tar.xz when running paver sdist
  - [\#3286](https://github.com/scipy/scipy/pull/3286): DOC: update 0.14.0 release notes.
  - [\#3289](https://github.com/scipy/scipy/pull/3289): TST: remove insecure mktemp use in tests
  - [\#3292](https://github.com/scipy/scipy/pull/3292): MAINT: fix a backwards incompatible change to stats.distributions.\_\_all\_\_
  - [\#3293](https://github.com/scipy/scipy/pull/3293): ENH: signal: Allow upsweeps of frequency in the 'hyperbolic'...
  - [\#3302](https://github.com/scipy/scipy/pull/3302): ENH: add dtype arg to stats.mstats.gmean and stats.mstats.hmean
  - [\#3307](https://github.com/scipy/scipy/pull/3307): DOC: add note about different ba forms in tf2zpk
  - [\#3309](https://github.com/scipy/scipy/pull/3309): doc enhancements to scipy.stats.mstats.winsorize
  - [\#3310](https://github.com/scipy/scipy/pull/3310): DOC: clarify matrix vs array in mmio docstrings
  - [\#3314](https://github.com/scipy/scipy/pull/3314): BUG: fix scipy.io.mmread() of gzipped files under Python3
  - [\#3323](https://github.com/scipy/scipy/pull/3323): ENH: Efficient interpolation on regular grids in arbitrary dimensions
  - [\#3332](https://github.com/scipy/scipy/pull/3332): DOC: clean up scipy.special docs
  - [\#3335](https://github.com/scipy/scipy/pull/3335): ENH: improve nanmedian performance
  - [\#3347](https://github.com/scipy/scipy/pull/3347): BUG: fix use of np.max in stats.fisher\_exact
  - [\#3356](https://github.com/scipy/scipy/pull/3356): ENH: sparse: speed up LIL indexing + assignment via Cython
  - [\#3357](https://github.com/scipy/scipy/pull/3357): Fix "imresize does not work with size = int"
  - [\#3358](https://github.com/scipy/scipy/pull/3358): MAINT: rename AkimaInterpolator to Akima1DInterpolator
  - [\#3366](https://github.com/scipy/scipy/pull/3366): WHT: sparse: reindent `dsolve/*.c *.h`
  - [\#3367](https://github.com/scipy/scipy/pull/3367): BUG: sparse/dsolve: fix dense matrix fortran order bugs in superlu...
  - [\#3369](https://github.com/scipy/scipy/pull/3369): ENH minimize, minimize\_scalar: Add support for user-provided...
  - [\#3371](https://github.com/scipy/scipy/pull/3371): scipy.stats.sigmaclip doesn't appear in the html docs.
  - [\#3373](https://github.com/scipy/scipy/pull/3373): BUG: sparse/dsolve: detect invalid LAPACK parameters in superlu...
  - [\#3375](https://github.com/scipy/scipy/pull/3375): ENH: sparse/dsolve: make the L and U factors of splu and spilu...
  - [\#3377](https://github.com/scipy/scipy/pull/3377): MAINT: make travis build one target against Numpy 1.5
  - [\#3378](https://github.com/scipy/scipy/pull/3378): MAINT: fftpack: Remove the use of `'import *'` in a couple test...
  - [\#3381](https://github.com/scipy/scipy/pull/3381): MAINT: replace np.isinf(x) & (x\>0) -\> np.isposinf(x) to avoid...
  - [\#3383](https://github.com/scipy/scipy/pull/3383): MAINT: skip float96 tests on platforms without float96
  - [\#3384](https://github.com/scipy/scipy/pull/3384): MAINT: add pyflakes to Travis-CI
  - [\#3386](https://github.com/scipy/scipy/pull/3386): BUG: stable evaluation of expit
  - [\#3388](https://github.com/scipy/scipy/pull/3388): BUG: SuperLU: fix missing declaration of dlamch
  - [\#3389](https://github.com/scipy/scipy/pull/3389): BUG: sparse: downcast 64-bit indices safely to intp when required
  - [\#3390](https://github.com/scipy/scipy/pull/3390): BUG: nonlinear solvers are not confused by lucky guess
  - [\#3391](https://github.com/scipy/scipy/pull/3391): TST: fix sparse test errors due to axis=-1,-2 usage in np.matrix.sum().
  - [\#3392](https://github.com/scipy/scipy/pull/3392): BUG: sparse/lil: fix up Cython bugs in fused type lookup
  - [\#3393](https://github.com/scipy/scipy/pull/3393): BUG: sparse/compressed: work around bug in np.unique in earlier...
  - [\#3394](https://github.com/scipy/scipy/pull/3394): BUG: allow ClusterNode.pre\_order() for non-root nodes
  - [\#3400](https://github.com/scipy/scipy/pull/3400): BUG: cluster.linkage ValueError typo bug
  - [\#3402](https://github.com/scipy/scipy/pull/3402): BUG: special: In specfun.f, replace the use of CMPLX with DCMPLX,...
  - [\#3408](https://github.com/scipy/scipy/pull/3408): MAINT: sparse: Numpy 1.5 compatibility fixes
  - [\#3410](https://github.com/scipy/scipy/pull/3410): MAINT: interpolate: fix blas defs in \_ppoly
  - [\#3411](https://github.com/scipy/scipy/pull/3411): MAINT: Numpy 1.5 fixes in interpolate
  - [\#3413](https://github.com/scipy/scipy/pull/3413): Fix more test issues with older numpy versions
  - [\#3414](https://github.com/scipy/scipy/pull/3414): TST: signal: loosen some error tolerances in the filter tests....
  - [\#3415](https://github.com/scipy/scipy/pull/3415): MAINT: tools: automated close issue + pr listings for release...
  - [\#3440](https://github.com/scipy/scipy/pull/3440): MAINT: wrap sparsetools manually instead via SWIG
  - [\#3460](https://github.com/scipy/scipy/pull/3460): TST: open image file in binary mode
  - [\#3467](https://github.com/scipy/scipy/pull/3467): BUG: fix validation in csgraph.shortest\_path

---

0.14.1-notes.md

---

# SciPy 0.14.1 Release Notes

SciPy 0.14.1 is a bug-fix release with no new features compared to 0.14.0.

## Issues closed

  - [\#3630](https://github.com/scipy/scipy/issues/3630): NetCDF reading results in a segfault
  - [\#3631](https://github.com/scipy/scipy/issues/3631): SuperLU object not working as expected for complex matrices
  - [\#3733](https://github.com/scipy/scipy/issues/3733): segfault from map\_coordinates
  - [\#3780](https://github.com/scipy/scipy/issues/3780): Segfault when using CSR/CSC matrix and uint32/uint64
  - [\#3781](https://github.com/scipy/scipy/pull/3781): BUG: sparse: fix omitted types in sparsetools typemaps
  - [\#3802](https://github.com/scipy/scipy/issues/3802): 0.14.0 API breakage: \_gen generators are missing from scipy.stats.distributions API
  - [\#3805](https://github.com/scipy/scipy/issues/3805): ndimage test failures with numpy 1.10
  - [\#3812](https://github.com/scipy/scipy/issues/3812): == sometimes wrong on csr\_matrix
  - [\#3853](https://github.com/scipy/scipy/issues/3853): Many scipy.sparse test errors/failures with numpy 1.9.0b2
  - [\#4084](https://github.com/scipy/scipy/pull/4084): fix exception declarations for Cython 0.21.1 compatibility
  - [\#4093](https://github.com/scipy/scipy/pull/4093): BUG: fitpack: avoid a memory error in splev(x, tck, der=k)
  - [\#4104](https://github.com/scipy/scipy/pull/4104): BUG: Workaround SGEMV segfault in Accelerate (maintenance 0.14.x)
  - [\#4143](https://github.com/scipy/scipy/pull/4143): BUG: fix ndimage functions for large data
  - [\#4149](https://github.com/scipy/scipy/issues/4149): Bug in expm for integer arrays
  - [\#4154](https://github.com/scipy/scipy/issues/4154): Backport gh-4041 for 0.14.1 (Ensure that the 'size' argument of PIL's 'resize' method is a tuple)
  - [\#4163](https://github.com/scipy/scipy/issues/4163): Backport \#4142 (ZeroDivisionError in scipy.sparse.linalg.lsqr)
  - [\#4164](https://github.com/scipy/scipy/issues/4164): Backport gh-4153 (remove use of deprecated numpy API in lib/lapack/ f2py wrapper)
  - [\#4180](https://github.com/scipy/scipy/pull/4180): backport pil resize support tuple fix
  - [\#4168](https://github.com/scipy/scipy/issues/4168): Lots of arpack test failures on windows 32 bits with numpy 1.9.1
  - [\#4203](https://github.com/scipy/scipy/issues/4203): Matrix multiplication in 0.14.x is more than 10x slower compared...
  - [\#4218](https://github.com/scipy/scipy/pull/4218): attempt to make ndimage interpolation compatible with numpy relaxed...
  - [\#4225](https://github.com/scipy/scipy/pull/4225): BUG: off-by-one error in PPoly shape checks
  - [\#4248](https://github.com/scipy/scipy/pull/4248): BUG: optimize: fix issue with incorrect use of closure for slsqp.

---

0.15.0-notes.md

---

# SciPy 0.15.0 Release Notes

<div class="contents">

</div>

SciPy 0.15.0 is the culmination of 6 months of hard work. It contains several new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.16.x branch, and on adding new features on the master branch.

This release requires Python 2.6, 2.7 or 3.2-3.4 and NumPy 1.5.1 or greater.

## New features

### Linear Programming Interface

The new function <span class="title-ref">scipy.optimize.linprog</span> provides a generic linear programming similar to the way <span class="title-ref">scipy.optimize.minimize</span> provides a generic interface to nonlinear programming optimizers. Currently the only method supported is *simplex* which provides a two-phase, dense-matrix-based simplex algorithm. Callbacks functions are supported, allowing the user to monitor the progress of the algorithm.

### Differential evolution, a global optimizer

A new <span class="title-ref">scipy.optimize.differential\_evolution</span> function has been added to the `optimize` module. Differential Evolution is an algorithm used for finding the global minimum of multivariate functions. It is stochastic in nature (does not use gradient methods), and can search large areas of candidate space, but often requires larger numbers of function evaluations than conventional gradient based techniques.

### `scipy.signal` improvements

The function <span class="title-ref">scipy.signal.max\_len\_seq</span> was added, which computes a Maximum Length Sequence (MLS) signal.

### `scipy.integrate` improvements

It is now possible to use <span class="title-ref">scipy.integrate</span> routines to integrate multivariate ctypes functions, thus avoiding callbacks to Python and providing better performance.

### `scipy.linalg` improvements

The function <span class="title-ref">scipy.linalg.orthogonal\_procrustes</span> for solving the procrustes linear algebra problem was added.

BLAS level 2 functions `her`, `syr`, `her2` and `syr2` are now wrapped in `scipy.linalg`.

### `scipy.sparse` improvements

<span class="title-ref">scipy.sparse.linalg.svds</span> can now take a `LinearOperator` as its main input.

### `scipy.special` improvements

Values of ellipsoidal harmonic (i.e. Lame) functions and associated normalization constants can be now computed using `ellip_harm`, `ellip_harm_2`, and `ellip_normal`.

New convenience functions `entr`, `rel_entr` `kl_div`, `huber`, and `pseudo_huber` were added.

### `scipy.sparse.csgraph` improvements

Routines `reverse_cuthill_mckee` and `maximum_bipartite_matching` for computing reorderings of sparse graphs were added.

### `scipy.stats` improvements

Added a Dirichlet multivariate distribution, `scipy.stats.dirichlet`.

The new function <span class="title-ref">scipy.stats.median\_test</span> computes Mood's median test.

The new function <span class="title-ref">scipy.stats.combine\_pvalues</span> implements Fisher's and Stouffer's methods for combining p-values.

<span class="title-ref">scipy.stats.describe</span> returns a namedtuple rather than a tuple, allowing users to access results by index or by name.

## Deprecated features

The <span class="title-ref">scipy.weave</span> module is deprecated. It was the only module never ported to Python 3.x, and is not recommended to be used for new code - use Cython instead. In order to support existing code, `scipy.weave` has been packaged separately: <https://github.com/scipy/weave>. It is a pure Python package, and can easily be installed with `pip install weave`.

`scipy.special.bessel_diff_formula` is deprecated. It is a private function, and therefore will be removed from the public API in a following release.

`scipy.stats.nanmean`, `nanmedian` and `nanstd` functions are deprecated in favor of their numpy equivalents.

## Backwards incompatible changes

### scipy.ndimage

The functions <span class="title-ref">scipy.ndimage.minimum\_positions</span>, <span class="title-ref">scipy.ndimage.maximum\_positions</span><span class="title-ref"> and \`scipy.ndimage.extrema</span> return positions as ints instead of floats.

### scipy.integrate

The format of banded Jacobians in <span class="title-ref">scipy.integrate.ode</span> solvers is changed. Note that the previous documentation of this feature was erroneous.

## Authors

  - Abject +
  - Ankit Agrawal +
  - Sylvain Bellemare +
  - Matthew Brett
  - Christian Brodbeck
  - Christian Brueffer
  - Lars Buitinck
  - Evgeni Burovski
  - Pierre de Buyl +
  - Greg Caporaso +
  - CJ Carey
  - Jacob Carey +
  - Thomas A Caswell
  - Helder Cesar +
  - Björn Dahlgren +
  - Kevin Davies +
  - Yotam Doron +
  - Marcos Duarte +
  - endolith
  - Jesse Engel +
  - Rob Falck +
  - Corey Farwell +
  - Jaime Fernandez del Rio +
  - Clark Fitzgerald +
  - Tom Flannaghan +
  - Chad Fulton +
  - Jochen Garcke +
  - François Garillot +
  - André Gaul
  - Christoph Gohlke
  - Ralf Gommers
  - Alex Griffing
  - Blake Griffith
  - Olivier Grisel
  - Charles Harris
  - Trent Hauck +
  - Ian Henriksen +
  - Jinhyok Heo +
  - Matt Hickford +
  - Andreas Hilboll
  - Danilo Horta +
  - David Menéndez Hurtado +
  - Gert-Ludwig Ingold
  - Thouis (Ray) Jones
  - Chris Kerr +
  - Carl Kleffner +
  - Andreas Kloeckner
  - Thomas Kluyver +
  - Adrian Kretz +
  - Johannes Kulick +
  - Eric Larson
  - Brianna Laugher +
  - Denis Laxalde
  - Antony Lee +
  - Gregory R. Lee +
  - Brandon Liu
  - Alex Loew +
  - Loïc Estève +
  - Jaakko Luttinen +
  - Benny Malengier
  - Tobias Megies +
  - Sturla Molden
  - Eric Moore
  - Brett R. Murphy +
  - Paul Nation +
  - Andrew Nelson
  - Brian Newsom +
  - Joel Nothman
  - Sergio Oller +
  - Janani Padmanabhan +
  - Tiago M.D. Pereira +
  - Nicolas Del Piano +
  - Manuel Reinhardt +
  - Thomas Robitaille
  - Mike Romberg +
  - Alex Rothberg +
  - Sebastian Pölsterl +
  - Maximilian Singh +
  - Brigitta Sipocz +
  - Alex Stewart +
  - Julian Taylor
  - Collin Tokheim +
  - James Tomlinson +
  - Benjamin Trendelkamp-Schroer +
  - Richard Tsai
  - Alexey Umnov +
  - Jacob Vanderplas
  - Joris Vankerschaver
  - Bastian Venthur +
  - Pauli Virtanen
  - Stefan van der Walt
  - Yuxiang Wang +
  - James T. Webber
  - Warren Weckesser
  - Axl West +
  - Nathan Woods
  - Benda Xu +
  - Víctor Zabalza +
  - Tiziano Zito +

A total of 99 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed

  - [\#1431](https://github.com/scipy/scipy/issues/1431): ellipk(x) extending its domain for x\<0 (Trac \#904)
  - [\#1727](https://github.com/scipy/scipy/issues/1727): consistency of std interface (Trac \#1200)
  - [\#1851](https://github.com/scipy/scipy/issues/1851): Shape parameter negated in genextreme (relative to R, MATLAB,...
  - [\#1889](https://github.com/scipy/scipy/issues/1889): interp2d is weird (Trac \#1364)
  - [\#2188](https://github.com/scipy/scipy/issues/2188): splev gives wrong values or crashes outside of support when der...
  - [\#2343](https://github.com/scipy/scipy/issues/2343): scipy.insterpolate's splrep function fails with certain combinations...
  - [\#2669](https://github.com/scipy/scipy/issues/2669): .signal.ltisys.ss2tf should only apply to MISO systems in current...
  - [\#2911](https://github.com/scipy/scipy/issues/2911): interpolate.splder() failure on Fedora
  - [\#3171](https://github.com/scipy/scipy/issues/3171): future of weave in scipy
  - [\#3176](https://github.com/scipy/scipy/issues/3176): Suggestion to improve error message in scipy.integrate.odeint
  - [\#3198](https://github.com/scipy/scipy/issues/3198): pdf() and logpdf() methods for scipy.stats.gaussian\_kde
  - [\#3318](https://github.com/scipy/scipy/issues/3318): Travis CI is breaking on test("full")
  - [\#3329](https://github.com/scipy/scipy/issues/3329): scipy.stats.scoreatpercentile backward-incompatible change not...
  - [\#3362](https://github.com/scipy/scipy/issues/3362): Reference cycle in scipy.sparse.linalg.eigs with shift-invert...
  - [\#3364](https://github.com/scipy/scipy/issues/3364): BUG: linalg.hessenberg broken (wrong results)
  - [\#3376](https://github.com/scipy/scipy/issues/3376): stats f\_oneway needs floats
  - [\#3379](https://github.com/scipy/scipy/issues/3379): Installation of scipy 0.13.3 via zc.buildout fails
  - [\#3403](https://github.com/scipy/scipy/issues/3403): hierarchy.linkage raises an ugly exception for a compressed 2x2...
  - [\#3422](https://github.com/scipy/scipy/issues/3422): optimize.curve\_fit() handles NaN by returning all parameters...
  - [\#3457](https://github.com/scipy/scipy/issues/3457): linalg.fractional\_matrix\_power has no docstring
  - [\#3469](https://github.com/scipy/scipy/issues/3469): DOC: <span class="title-ref">ndimage.find\_object</span> ignores zero-values
  - [\#3491](https://github.com/scipy/scipy/issues/3491): optimize.leastsq() documentation should mention it does not work...
  - [\#3499](https://github.com/scipy/scipy/issues/3499): cluster.vq.whiten return nan for all zeros column in observations
  - [\#3503](https://github.com/scipy/scipy/issues/3503): minimize attempts to do vector addition when numpy arrays are...
  - [\#3508](https://github.com/scipy/scipy/issues/3508): exponweib.logpdf fails for valid parameters
  - [\#3509](https://github.com/scipy/scipy/issues/3509): libatlas3-base-dev does not exist
  - [\#3550](https://github.com/scipy/scipy/issues/3550): BUG: anomalous values computed by special.ellipkinc
  - [\#3555](https://github.com/scipy/scipy/issues/3555): <span class="title-ref">scipy.ndimage</span> positions are float instead of int
  - [\#3557](https://github.com/scipy/scipy/issues/3557): UnivariateSpline.\_\_call\_\_ should pass all relevant args through...
  - [\#3569](https://github.com/scipy/scipy/issues/3569): No license statement for test data imported from boost?
  - [\#3576](https://github.com/scipy/scipy/issues/3576): mstats test failure (too sensitive?)
  - [\#3579](https://github.com/scipy/scipy/issues/3579): Errors on scipy 0.14.x branch using MKL, Ubuntu 14.04 x86\_64
  - [\#3580](https://github.com/scipy/scipy/issues/3580): Operator overloading with sparse matrices
  - [\#3587](https://github.com/scipy/scipy/issues/3587): Wrong alphabetical order in continuous statistical distribution...
  - [\#3596](https://github.com/scipy/scipy/issues/3596): scipy.signal.fftconvolve no longer threadsafe
  - [\#3623](https://github.com/scipy/scipy/issues/3623): BUG: signal.convolve takes longer than it needs to
  - [\#3655](https://github.com/scipy/scipy/issues/3655): Integer returned from integer data in scipy.signal.periodogram...
  - [\#3662](https://github.com/scipy/scipy/issues/3662): Travis failure on Numpy 1.5.1 (not reproducible?)
  - [\#3668](https://github.com/scipy/scipy/issues/3668): dendogram(orientation='foo')
  - [\#3669](https://github.com/scipy/scipy/issues/3669): KroghInterpolator doesn't pass through points
  - [\#3672](https://github.com/scipy/scipy/issues/3672): Inserting a knot in a spline
  - [\#3682](https://github.com/scipy/scipy/issues/3682): misleading documentation of scipy.optimize.curve\_fit
  - [\#3699](https://github.com/scipy/scipy/issues/3699): BUG?: minor problem with scipy.signal.lfilter w/initial conditions
  - [\#3700](https://github.com/scipy/scipy/issues/3700): Inconsistent exceptions raised by scipy.io.loadmat
  - [\#3703](https://github.com/scipy/scipy/issues/3703): TypeError for RegularGridInterpolator with big-endian data
  - [\#3714](https://github.com/scipy/scipy/issues/3714): Misleading error message in eigsh: k must be between 1 and rank(A)-1
  - [\#3720](https://github.com/scipy/scipy/issues/3720): coo\_matrix.setdiag() fails
  - [\#3740](https://github.com/scipy/scipy/issues/3740): Scipy.Spatial.KdTree (Query) Return Type?
  - [\#3761](https://github.com/scipy/scipy/issues/3761): Invalid result from scipy.special.btdtri
  - [\#3784](https://github.com/scipy/scipy/issues/3784): DOC - Special Functions - Drum example fix for higher modes
  - [\#3785](https://github.com/scipy/scipy/issues/3785): minimize() should have friendlier args=
  - [\#3787](https://github.com/scipy/scipy/issues/3787): BUG: signal: Division by zero in lombscargle
  - [\#3800](https://github.com/scipy/scipy/issues/3800): BUG: scipy.sparse.csgraph.shortest\_path overwrites input matrix
  - [\#3817](https://github.com/scipy/scipy/issues/3817): Warning in calculating moments from Binomial distribution for...
  - [\#3821](https://github.com/scipy/scipy/issues/3821): review scipy usage of <span class="title-ref">np.ma.is\_masked</span>
  - [\#3829](https://github.com/scipy/scipy/issues/3829): Linear algebra function documentation doesn't mention default...
  - [\#3830](https://github.com/scipy/scipy/issues/3830): A bug in Docstring of scipy.linalg.eig
  - [\#3844](https://github.com/scipy/scipy/issues/3844): Issue with shape parameter returned by genextreme
  - [\#3858](https://github.com/scipy/scipy/issues/3858): "ImportError: No module named Cython.Compiler.Main" on install
  - [\#3876](https://github.com/scipy/scipy/issues/3876): savgol\_filter not in release notes and has no versionadded
  - [\#3884](https://github.com/scipy/scipy/issues/3884): scipy.stats.kendalltau empty array error
  - [\#3895](https://github.com/scipy/scipy/issues/3895): ValueError: illegal value in 12-th argument of internal gesdd...
  - [\#3898](https://github.com/scipy/scipy/issues/3898): skimage test broken by minmax filter change
  - [\#3901](https://github.com/scipy/scipy/issues/3901): scipy sparse errors with numpy master
  - [\#3905](https://github.com/scipy/scipy/issues/3905): DOC: optimize: linprog docstring has two "Returns" sections
  - [\#3915](https://github.com/scipy/scipy/issues/3915): DOC: sphinx warnings because of <span class="title-ref">\*\*kwds</span> in the stats distributions...
  - [\#3935](https://github.com/scipy/scipy/issues/3935): Split stats.distributions files in tutorial
  - [\#3969](https://github.com/scipy/scipy/issues/3969): gh-3607 breaks backward compatibility in ode solver banded jacobians
  - [\#4025](https://github.com/scipy/scipy/issues/4025): DOC: signal: The return value of find\_peaks\_cwt is not documented.
  - [\#4029](https://github.com/scipy/scipy/issues/4029): scipy.stats.nbinom.logpmf(0,1,1) returns nan. Correct value is...
  - [\#4032](https://github.com/scipy/scipy/issues/4032): ERROR: test\_imresize (test\_pilutil.TestPILUtil)
  - [\#4038](https://github.com/scipy/scipy/issues/4038): errors do not propagate through scipy.integrate.odeint properly
  - [\#4171](https://github.com/scipy/scipy/issues/4171): orthogonal\_procrustes always returns scale.
  - [\#4176](https://github.com/scipy/scipy/issues/4176): Solving the Discrete Lyapunov Equation does not work with matrix...

### Pull requests

  - [\#3109](https://github.com/scipy/scipy/pull/3109): ENH Added Fisher's method and Stouffer's Z-score method
  - [\#3225](https://github.com/scipy/scipy/pull/3225): Add the limiting distributions to generalized Pareto distribution...
  - [\#3262](https://github.com/scipy/scipy/pull/3262): Implement back end of faster multivariate integration
  - [\#3266](https://github.com/scipy/scipy/pull/3266): ENH: signal: add type=False as parameter for periodogram and...
  - [\#3273](https://github.com/scipy/scipy/pull/3273): Add PEP8 check to Travis-CI
  - [\#3342](https://github.com/scipy/scipy/pull/3342): ENH: linprog function for linear programming
  - [\#3348](https://github.com/scipy/scipy/pull/3348): BUG: add proper error handling when using interp2d on regular...
  - [\#3351](https://github.com/scipy/scipy/pull/3351): ENH: Add MLS method
  - [\#3382](https://github.com/scipy/scipy/pull/3382): ENH: scipy.special information theory functions
  - [\#3396](https://github.com/scipy/scipy/pull/3396): ENH: improve stats.nanmedian more by assuming nans are rare
  - [\#3398](https://github.com/scipy/scipy/pull/3398): Added two wrappers to the gaussian\_kde class.
  - [\#3405](https://github.com/scipy/scipy/pull/3405): BUG: cluster.linkage array conversion to double dtype
  - [\#3407](https://github.com/scipy/scipy/pull/3407): MAINT: use assert\_warns instead of a more complicated mechanism
  - [\#3409](https://github.com/scipy/scipy/pull/3409): ENH: change to use array view in signal/\_peak\_finding.py
  - [\#3416](https://github.com/scipy/scipy/pull/3416): Issue 3376 : stats f\_oneway needs floats
  - [\#3419](https://github.com/scipy/scipy/pull/3419): BUG: tools: Fix list of FMA instructions in detect\_cpu\_extensions\_wine.py
  - [\#3420](https://github.com/scipy/scipy/pull/3420): DOC: stats: Add 'entropy' to the stats package-level documentation.
  - [\#3429](https://github.com/scipy/scipy/pull/3429): BUG: close intermediate file descriptor right after it is used...
  - [\#3430](https://github.com/scipy/scipy/pull/3430): MAINT: Fix some cython variable declarations to avoid warnings...
  - [\#3433](https://github.com/scipy/scipy/pull/3433): Correcting the normalization of chebwin window function
  - [\#3435](https://github.com/scipy/scipy/pull/3435): Add more precise link to R's quantile documentation
  - [\#3446](https://github.com/scipy/scipy/pull/3446): ENH: scipy.optimize - adding differential\_evolution
  - [\#3450](https://github.com/scipy/scipy/pull/3450): MAINT: remove unused function scipy.stats.mstats\_basic.\_kolmog1
  - [\#3458](https://github.com/scipy/scipy/pull/3458): Reworked version of PR-3084 (mstats-stats comparison)
  - [\#3462](https://github.com/scipy/scipy/pull/3462): MAINT : Returning a warning for low attenuation values of chebwin...
  - [\#3463](https://github.com/scipy/scipy/pull/3463): DOC: linalg: Add examples to functions in matfuncs.py
  - [\#3477](https://github.com/scipy/scipy/pull/3477): ENH: sparse: release GIL in sparsetools routines
  - [\#3480](https://github.com/scipy/scipy/pull/3480): DOC: Add more details to deconvolve docstring
  - [\#3484](https://github.com/scipy/scipy/pull/3484): BLD: fix Qhull build issue with MinGW-w64. Closes gh-3237.
  - [\#3498](https://github.com/scipy/scipy/pull/3498): MAINT: io: remove old warnings from idl.py
  - [\#3504](https://github.com/scipy/scipy/pull/3504): BUG: cluster.vq.whiten returns nan or inf when std==0
  - [\#3510](https://github.com/scipy/scipy/pull/3510): MAINT: stats: Reimplement the pdf and logpdf methods of exponweib.
  - [\#3512](https://github.com/scipy/scipy/pull/3512): Fix PEP8 errors showing up on TravisCI after pep8 1.5 release
  - [\#3514](https://github.com/scipy/scipy/pull/3514): DOC: libatlas3-base-dev seems to have never been a thing
  - [\#3516](https://github.com/scipy/scipy/pull/3516): DOC improve scipy.sparse docstrings
  - [\#3517](https://github.com/scipy/scipy/pull/3517): ENH: speed-up ndimage.filters.min(max)imum\_filter1d
  - [\#3518](https://github.com/scipy/scipy/pull/3518): Issues in scipy.misc.logsumexp
  - [\#3526](https://github.com/scipy/scipy/pull/3526): DOC: graphical example for cwt, and use a more interesting signal
  - [\#3527](https://github.com/scipy/scipy/pull/3527): ENH: Implement min(max)imum\_filter1d using the MINLIST algorithm
  - [\#3537](https://github.com/scipy/scipy/pull/3537): STY: reduce number of C compiler warnings
  - [\#3540](https://github.com/scipy/scipy/pull/3540): DOC: linalg: add docstring to fractional\_matrix\_power
  - [\#3542](https://github.com/scipy/scipy/pull/3542): kde.py Doc Typo
  - [\#3545](https://github.com/scipy/scipy/pull/3545): BUG: stats: stats.levy.cdf with small arguments loses precision.
  - [\#3547](https://github.com/scipy/scipy/pull/3547): BUG: special: erfcinv with small arguments loses precision.
  - [\#3553](https://github.com/scipy/scipy/pull/3553): DOC: Convolve examples
  - [\#3561](https://github.com/scipy/scipy/pull/3561): FIX: in ndimage.measurements return positions as int instead...
  - [\#3564](https://github.com/scipy/scipy/pull/3564): Fix test failures with numpy master. Closes gh-3554
  - [\#3565](https://github.com/scipy/scipy/pull/3565): ENH: make interp2d accept unsorted arrays for interpolation.
  - [\#3566](https://github.com/scipy/scipy/pull/3566): BLD: add numpy requirement to metadata if it can't be imported.
  - [\#3567](https://github.com/scipy/scipy/pull/3567): DOC: move matfuncs docstrings to user-visible functions
  - [\#3574](https://github.com/scipy/scipy/pull/3574): Fixes multiple bugs in mstats.theilslopes
  - [\#3577](https://github.com/scipy/scipy/pull/3577): TST: decrease sensitivity of an mstats test
  - [\#3585](https://github.com/scipy/scipy/pull/3585): Cleanup of code in scipy.constants
  - [\#3589](https://github.com/scipy/scipy/pull/3589): BUG: sparse: allow operator overloading
  - [\#3594](https://github.com/scipy/scipy/pull/3594): BUG: lobpcg returned wrong values for small matrices (n \< 10)
  - [\#3598](https://github.com/scipy/scipy/pull/3598): MAINT: fix coverage and coveralls
  - [\#3599](https://github.com/scipy/scipy/pull/3599): MAINT: symeig -- now that's a name I've not heard in a long time
  - [\#3602](https://github.com/scipy/scipy/pull/3602): MAINT: clean up the new optimize.linprog and add a few more tests
  - [\#3607](https://github.com/scipy/scipy/pull/3607): BUG: integrate: Fix some bugs and documentation errors in the...
  - [\#3609](https://github.com/scipy/scipy/pull/3609): MAINT integrate/odepack: kill dead Fortran code
  - [\#3616](https://github.com/scipy/scipy/pull/3616): FIX: Invalid values
  - [\#3617](https://github.com/scipy/scipy/pull/3617): Sort netcdf variables in a Python-3 compatible way
  - [\#3622](https://github.com/scipy/scipy/pull/3622): DOC: Added 0.15.0 release notes entry for linprog function.
  - [\#3625](https://github.com/scipy/scipy/pull/3625): Fix documentation for cKDTree.sparse\_distance\_matrix
  - [\#3626](https://github.com/scipy/scipy/pull/3626): MAINT: linalg.orth memory efficiency
  - [\#3627](https://github.com/scipy/scipy/pull/3627): MAINT: stats: A bit of clean up
  - [\#3628](https://github.com/scipy/scipy/pull/3628): MAINT: signal: remove a useless function from wavelets.py
  - [\#3632](https://github.com/scipy/scipy/pull/3632): ENH: stats: Add Mood's median test.
  - [\#3636](https://github.com/scipy/scipy/pull/3636): MAINT: cluster: some clean up
  - [\#3638](https://github.com/scipy/scipy/pull/3638): DOC: docstring of optimize.basinhopping confuses singular and...
  - [\#3639](https://github.com/scipy/scipy/pull/3639): BUG: change ddof default to 1 in mstats.sem, consistent with...
  - [\#3640](https://github.com/scipy/scipy/pull/3640): Weave: deprecate the module and disable slow tests on TravisCI
  - [\#3641](https://github.com/scipy/scipy/pull/3641): ENH: Added support for date attributes to io.arff.arffread
  - [\#3644](https://github.com/scipy/scipy/pull/3644): MAINT: stats: remove superfluous alias in mstats\_basic.py
  - [\#3646](https://github.com/scipy/scipy/pull/3646): ENH: adding <span class="title-ref">sum\_duplicates</span> method to COO sparse matrix
  - [\#3647](https://github.com/scipy/scipy/pull/3647): Fix for \#3596: Make fftconvolve threadsafe
  - [\#3650](https://github.com/scipy/scipy/pull/3650): BUG: sparse: smarter random index selection
  - [\#3652](https://github.com/scipy/scipy/pull/3652): fix wrong option name in power\_divergence dosctring example
  - [\#3654](https://github.com/scipy/scipy/pull/3654): Changing EPD to Canopy
  - [\#3657](https://github.com/scipy/scipy/pull/3657): BUG: signal.welch: ensure floating point dtype regardless of...
  - [\#3660](https://github.com/scipy/scipy/pull/3660): TST: mark a test as known fail
  - [\#3661](https://github.com/scipy/scipy/pull/3661): BLD: ignore pep8 E302 (expected 2 blank lines, found 1)
  - [\#3663](https://github.com/scipy/scipy/pull/3663): BUG: fix leaking errstate, and ignore invalid= errors in a test
  - [\#3664](https://github.com/scipy/scipy/pull/3664): BUG: correlate was extremely slow when in2.size \> in1.size
  - [\#3667](https://github.com/scipy/scipy/pull/3667): ENH: Adds default params to pdfs of multivariate\_norm
  - [\#3670](https://github.com/scipy/scipy/pull/3670): ENH: Small speedup of FFT size check
  - [\#3671](https://github.com/scipy/scipy/pull/3671): DOC: adding differential\_evolution function to 0.15 release notes
  - [\#3673](https://github.com/scipy/scipy/pull/3673): BUG: interpolate/fitpack: arguments to fortran routines may not...
  - [\#3674](https://github.com/scipy/scipy/pull/3674): Add support for appending to existing netcdf files
  - [\#3681](https://github.com/scipy/scipy/pull/3681): Speed up test('full'), solve Travis CI timeout issues
  - [\#3683](https://github.com/scipy/scipy/pull/3683): ENH: cluster: rewrite and optimize <span class="title-ref">vq</span> in Cython
  - [\#3684](https://github.com/scipy/scipy/pull/3684): Update special docs
  - [\#3688](https://github.com/scipy/scipy/pull/3688): Spacing in special docstrings
  - [\#3692](https://github.com/scipy/scipy/pull/3692): ENH: scipy.special: Improving sph\_harm function
  - [\#3693](https://github.com/scipy/scipy/pull/3693): Update refguide entries for signal and fftpack
  - [\#3695](https://github.com/scipy/scipy/pull/3695): Update continuous.rst
  - [\#3696](https://github.com/scipy/scipy/pull/3696): ENH: check for valid 'orientation' kwarg in dendrogram()
  - [\#3701](https://github.com/scipy/scipy/pull/3701): make 'a' and 'b' coefficients atleast\_1d array in filtfilt
  - [\#3702](https://github.com/scipy/scipy/pull/3702): BUG: cluster: \_vq unable to handle large features
  - [\#3704](https://github.com/scipy/scipy/pull/3704): BUG: special: ellip(k,e)inc nan and double expected value
  - [\#3707](https://github.com/scipy/scipy/pull/3707): BUG: handle fill\_value dtype checks correctly in RegularGridInterpolator
  - [\#3708](https://github.com/scipy/scipy/pull/3708): Reraise exception on failure to read mat file.
  - [\#3709](https://github.com/scipy/scipy/pull/3709): BUG: cast 'x' to correct dtype in KroghInterpolator.\_evaluate
  - [\#3712](https://github.com/scipy/scipy/pull/3712): ENH: cluster: reimplement the update-step of K-means in Cython
  - [\#3713](https://github.com/scipy/scipy/pull/3713): FIX: Check type of lfiltic
  - [\#3718](https://github.com/scipy/scipy/pull/3718): Changed INSTALL file extension to rst
  - [\#3719](https://github.com/scipy/scipy/pull/3719): address svds returning nans for zero input matrix
  - [\#3722](https://github.com/scipy/scipy/pull/3722): MAINT: spatial: static, unused code, sqrt(sqeuclidean)
  - [\#3725](https://github.com/scipy/scipy/pull/3725): ENH: use numpys nanmedian if available
  - [\#3727](https://github.com/scipy/scipy/pull/3727): TST: add a new fixed\_point test and change some test function...
  - [\#3731](https://github.com/scipy/scipy/pull/3731): BUG: fix romb in scipy.integrate.quadrature
  - [\#3734](https://github.com/scipy/scipy/pull/3734): DOC: simplify examples with semilogx
  - [\#3735](https://github.com/scipy/scipy/pull/3735): DOC: Add minimal docstrings to lti.impulse/step
  - [\#3736](https://github.com/scipy/scipy/pull/3736): BUG: cast pchip arguments to floats
  - [\#3744](https://github.com/scipy/scipy/pull/3744): stub out inherited methods of Akima1DInterpolator
  - [\#3746](https://github.com/scipy/scipy/pull/3746): DOC: Fix formatting for Raises section
  - [\#3748](https://github.com/scipy/scipy/pull/3748): ENH: Added discrete Lyapunov transformation solve
  - [\#3750](https://github.com/scipy/scipy/pull/3750): Enable automated testing with Python 3.4
  - [\#3751](https://github.com/scipy/scipy/pull/3751): Reverse Cuthill-McKee and Maximum Bipartite Matching reorderings...
  - [\#3759](https://github.com/scipy/scipy/pull/3759): MAINT: avoid indexing with a float array
  - [\#3762](https://github.com/scipy/scipy/pull/3762): TST: filter out RuntimeWarning in vq tests
  - [\#3766](https://github.com/scipy/scipy/pull/3766): TST: cluster: some cleanups in test\_hierarchy.py
  - [\#3767](https://github.com/scipy/scipy/pull/3767): ENH/BUG: support negative m in elliptic integrals
  - [\#3769](https://github.com/scipy/scipy/pull/3769): ENH: avoid repeated matrix inverse
  - [\#3770](https://github.com/scipy/scipy/pull/3770): BUG: signal: In lfilter\_zi, b was not rescaled correctly when...
  - [\#3772](https://github.com/scipy/scipy/pull/3772): STY avoid unnecessary transposes in csr\_matrix.getcol/row
  - [\#3773](https://github.com/scipy/scipy/pull/3773): ENH: Add ext parameter to UnivariateSpline call
  - [\#3774](https://github.com/scipy/scipy/pull/3774): BUG: in integrate/quadpack.h, put all declarations before statements.
  - [\#3779](https://github.com/scipy/scipy/pull/3779): Incbet fix
  - [\#3788](https://github.com/scipy/scipy/pull/3788): BUG: Fix lombscargle ZeroDivisionError
  - [\#3791](https://github.com/scipy/scipy/pull/3791): Some maintenance for doc builds
  - [\#3795](https://github.com/scipy/scipy/pull/3795): scipy.special.legendre docstring
  - [\#3796](https://github.com/scipy/scipy/pull/3796): TYPO: sheroidal -\> spheroidal
  - [\#3801](https://github.com/scipy/scipy/pull/3801): BUG: shortest\_path overwrite
  - [\#3803](https://github.com/scipy/scipy/pull/3803): TST: lombscargle regression test related to atan vs atan2
  - [\#3809](https://github.com/scipy/scipy/pull/3809): ENH: orthogonal procrustes solver
  - [\#3811](https://github.com/scipy/scipy/pull/3811): ENH: scipy.special, Implemented Ellipsoidal harmonic function:...
  - [\#3819](https://github.com/scipy/scipy/pull/3819): BUG: make a fully connected csgraph from an ndarray with no zeros
  - [\#3820](https://github.com/scipy/scipy/pull/3820): MAINT: avoid spurious warnings in binom(n, p=0).mean() etc
  - [\#3825](https://github.com/scipy/scipy/pull/3825): Don't claim scipy.cluster does distance matrix calculations.
  - [\#3827](https://github.com/scipy/scipy/pull/3827): get and set diagonal of coo\_matrix, and related csgraph laplacian...
  - [\#3832](https://github.com/scipy/scipy/pull/3832): DOC: Minor additions to integrate/nquad docstring.
  - [\#3845](https://github.com/scipy/scipy/pull/3845): Bug fix for \#3842: Bug in scipy.optimize.line\_search
  - [\#3848](https://github.com/scipy/scipy/pull/3848): BUG: edge case where the covariance matrix is exactly zero
  - [\#3850](https://github.com/scipy/scipy/pull/3850): DOC: typo
  - [\#3851](https://github.com/scipy/scipy/pull/3851): DOC: document default argument values for some arpack functions
  - [\#3860](https://github.com/scipy/scipy/pull/3860): DOC: sparse: add the function 'find' to the module-level docstring
  - [\#3861](https://github.com/scipy/scipy/pull/3861): BUG: Removed unnecessary storage of args as instance variables...
  - [\#3862](https://github.com/scipy/scipy/pull/3862): BUG: signal: fix handling of multi-output systems in ss2tf.
  - [\#3865](https://github.com/scipy/scipy/pull/3865): Feature request: ability to read heterogeneous types in FortranFile
  - [\#3866](https://github.com/scipy/scipy/pull/3866): MAINT: update pip wheelhouse for installs
  - [\#3871](https://github.com/scipy/scipy/pull/3871): MAINT: linalg: get rid of calc\_lwork.f
  - [\#3872](https://github.com/scipy/scipy/pull/3872): MAINT: use scipy.linalg instead of np.dual
  - [\#3873](https://github.com/scipy/scipy/pull/3873): BLD: show a more informative message if Cython wasn't installed.
  - [\#3874](https://github.com/scipy/scipy/pull/3874): TST: cluster: cleanup the hierarchy test data
  - [\#3877](https://github.com/scipy/scipy/pull/3877): DOC: Savitzky-Golay filter version added
  - [\#3878](https://github.com/scipy/scipy/pull/3878): DOC: move versionadded to notes
  - [\#3879](https://github.com/scipy/scipy/pull/3879): small tweaks to the docs
  - [\#3881](https://github.com/scipy/scipy/pull/3881): FIX incorrect sorting during fancy assignment
  - [\#3885](https://github.com/scipy/scipy/pull/3885): kendalltau function now returns a nan tuple if empty arrays used...
  - [\#3886](https://github.com/scipy/scipy/pull/3886): BUG: fixing linprog's kwarg order to match docs
  - [\#3888](https://github.com/scipy/scipy/pull/3888): BUG: optimize: In \_linprog\_simplex, handle the case where the...
  - [\#3891](https://github.com/scipy/scipy/pull/3891): BUG: stats: Fix ValueError message in chi2\_contingency.
  - [\#3892](https://github.com/scipy/scipy/pull/3892): DOC: sparse.linalg: Fix lobpcg docstring.
  - [\#3894](https://github.com/scipy/scipy/pull/3894): DOC: stats: Assorted docstring edits.
  - [\#3896](https://github.com/scipy/scipy/pull/3896): Fix 2 mistakes in MatrixMarket format parsing
  - [\#3897](https://github.com/scipy/scipy/pull/3897): BUG: associated Legendre function of second kind for 1\<x\<1.0001
  - [\#3899](https://github.com/scipy/scipy/pull/3899): BUG: fix undefined behavior in alngam
  - [\#3906](https://github.com/scipy/scipy/pull/3906): MAINT/DOC: Whitespace tweaks in several docstrings.
  - [\#3907](https://github.com/scipy/scipy/pull/3907): TST: relax bounds of interpolate test to accomodate rounding...
  - [\#3909](https://github.com/scipy/scipy/pull/3909): MAINT: Create a common version of <span class="title-ref">count\_nonzero</span> for compatibility...
  - [\#3910](https://github.com/scipy/scipy/pull/3910): Fix a couple of test errors in master
  - [\#3911](https://github.com/scipy/scipy/pull/3911): Use MathJax for the html docs
  - [\#3914](https://github.com/scipy/scipy/pull/3914): Rework the \_roots functions and document them.
  - [\#3916](https://github.com/scipy/scipy/pull/3916): Remove all linpack\_lite code and replace with LAPACK routines
  - [\#3917](https://github.com/scipy/scipy/pull/3917): splines, constant extrapolation
  - [\#3918](https://github.com/scipy/scipy/pull/3918): DOC: tweak the rv\_discrete docstring example
  - [\#3919](https://github.com/scipy/scipy/pull/3919): Quadrature speed-up: scipy.special.orthogonal.p\_roots with cache
  - [\#3920](https://github.com/scipy/scipy/pull/3920): DOC: Clarify docstring for <span class="title-ref">sigma</span> parameter for <span class="title-ref">curve\_fit</span>
  - [\#3922](https://github.com/scipy/scipy/pull/3922): Fixed Docstring issues in linprog (Fixes \#3905).
  - [\#3924](https://github.com/scipy/scipy/pull/3924): Coerce args into tuple if necessary.
  - [\#3926](https://github.com/scipy/scipy/pull/3926): DOC: Surround stats class methods in docstrings with backticks.
  - [\#3927](https://github.com/scipy/scipy/pull/3927): Changed doc for romb's dx parameter to int.
  - [\#3928](https://github.com/scipy/scipy/pull/3928): check FITPACK conditions in LSQUnivariateSpline
  - [\#3929](https://github.com/scipy/scipy/pull/3929): Added a warning about leastsq using with NaNs.
  - [\#3930](https://github.com/scipy/scipy/pull/3930): ENH: optimize: curve\_fit now warns if pcov is undetermined
  - [\#3932](https://github.com/scipy/scipy/pull/3932): Clarified the k \> n case.
  - [\#3933](https://github.com/scipy/scipy/pull/3933): DOC: remove <span class="title-ref">import scipy as sp</span> abbreviation here and there
  - [\#3936](https://github.com/scipy/scipy/pull/3936): Add license and copyright holders to test data imported from...
  - [\#3938](https://github.com/scipy/scipy/pull/3938): DOC: Corrected documentation for return types.
  - [\#3939](https://github.com/scipy/scipy/pull/3939): DOC: fitpack: add a note about Sch-W conditions to splrep docstring
  - [\#3940](https://github.com/scipy/scipy/pull/3940): TST: integrate: Remove an invalid test of odeint.
  - [\#3942](https://github.com/scipy/scipy/pull/3942): FIX: Corrected error message of eigsh.
  - [\#3943](https://github.com/scipy/scipy/pull/3943): ENH: release GIL for filter and interpolation of ndimage
  - [\#3944](https://github.com/scipy/scipy/pull/3944): FIX: Raise value error if window data-type is unsupported
  - [\#3946](https://github.com/scipy/scipy/pull/3946): Fixed signal.get\_window with unicode window name
  - [\#3947](https://github.com/scipy/scipy/pull/3947): MAINT: some docstring fixes and style cleanups in stats.mstats
  - [\#3949](https://github.com/scipy/scipy/pull/3949): DOC: fix a couple of issues in stats docstrings.
  - [\#3950](https://github.com/scipy/scipy/pull/3950): TST: sparse: remove known failure that doesn't fail
  - [\#3951](https://github.com/scipy/scipy/pull/3951): TST: switch from Rackspace wheelhouse to numpy/cython source...
  - [\#3952](https://github.com/scipy/scipy/pull/3952): DOC: stats: Small formatting correction to the 'chi' distribution...
  - [\#3953](https://github.com/scipy/scipy/pull/3953): DOC: stats: Several corrections and small additions to docstrings.
  - [\#3955](https://github.com/scipy/scipy/pull/3955): signal.\_\_init\_\_.py: remove duplicated <span class="title-ref">get\_window</span> entry
  - [\#3959](https://github.com/scipy/scipy/pull/3959): TST: sparse: more "known failures" for DOK that don't fail
  - [\#3960](https://github.com/scipy/scipy/pull/3960): BUG: io.netcdf: do not close mmap if there are references left...
  - [\#3965](https://github.com/scipy/scipy/pull/3965): DOC: Fix a few more sphinx warnings that occur when building...
  - [\#3966](https://github.com/scipy/scipy/pull/3966): DOC: add guidelines for using test generators in HACKING
  - [\#3968](https://github.com/scipy/scipy/pull/3968): BUG: sparse.linalg: make Inv objects in arpack garbage-collectable...
  - [\#3971](https://github.com/scipy/scipy/pull/3971): Remove all linpack\_lite code and replace with LAPACK routines
  - [\#3972](https://github.com/scipy/scipy/pull/3972): fix typo in error message
  - [\#3973](https://github.com/scipy/scipy/pull/3973): MAINT: better error message for multivariate normal.
  - [\#3981](https://github.com/scipy/scipy/pull/3981): turn the cryptically named scipy.special information theory functions...
  - [\#3984](https://github.com/scipy/scipy/pull/3984): Wrap her, syr, her2, syr2 blas routines
  - [\#3990](https://github.com/scipy/scipy/pull/3990): improve UnivariateSpline docs
  - [\#3991](https://github.com/scipy/scipy/pull/3991): ENH: stats: return namedtuple for describe output
  - [\#3993](https://github.com/scipy/scipy/pull/3993): DOC: stats: percentileofscore references np.percentile
  - [\#3997](https://github.com/scipy/scipy/pull/3997): BUG: linalg: pascal(35) was incorrect: last element overflowed...
  - [\#3998](https://github.com/scipy/scipy/pull/3998): MAINT: use isMaskedArray instead of is\_masked to check type
  - [\#3999](https://github.com/scipy/scipy/pull/3999): TST: test against all of boost data files.
  - [\#4000](https://github.com/scipy/scipy/pull/4000): BUG: stats: Fix edge-case handling in a few distributions.
  - [\#4003](https://github.com/scipy/scipy/pull/4003): ENH: using python's warnings instead of prints in fitpack.
  - [\#4004](https://github.com/scipy/scipy/pull/4004): MAINT: optimize: remove a couple unused variables in zeros.c
  - [\#4006](https://github.com/scipy/scipy/pull/4006): BUG: Fix C90 compiler warnings in <span class="title-ref">NI\_MinOrMaxFilter1D</span>
  - [\#4007](https://github.com/scipy/scipy/pull/4007): MAINT/DOC: Fix spelling of 'decomposition' in several files.
  - [\#4008](https://github.com/scipy/scipy/pull/4008): DOC: stats: Split the descriptions of the distributions in the...
  - [\#4015](https://github.com/scipy/scipy/pull/4015): TST: logsumexp regression test
  - [\#4016](https://github.com/scipy/scipy/pull/4016): MAINT: remove some inf-related warnings from logsumexp
  - [\#4020](https://github.com/scipy/scipy/pull/4020): DOC: stats: fix whitespace in docstrings of several distributions
  - [\#4023](https://github.com/scipy/scipy/pull/4023): Exactly one space required before assignments
  - [\#4024](https://github.com/scipy/scipy/pull/4024): In dendrogram(): Correct an argument name and a grammar issue...
  - [\#4041](https://github.com/scipy/scipy/pull/4041): BUG: misc: Ensure that the 'size' argument of PIL's 'resize'...
  - [\#4049](https://github.com/scipy/scipy/pull/4049): BUG: Return of \_logpmf
  - [\#4051](https://github.com/scipy/scipy/pull/4051): BUG: expm of integer matrices
  - [\#4052](https://github.com/scipy/scipy/pull/4052): ENH: integrate: odeint: Handle exceptions in the callback functions.
  - [\#4053](https://github.com/scipy/scipy/pull/4053): BUG: stats: Refactor argument validation to avoid a unicode issue.
  - [\#4057](https://github.com/scipy/scipy/pull/4057): Added newline to scipy.sparse.linalg.svds documentation for correct...
  - [\#4058](https://github.com/scipy/scipy/pull/4058): MAINT: stats: Add note about change to scoreatpercentile in release...
  - [\#4059](https://github.com/scipy/scipy/pull/4059): ENH: interpolate: Allow splev to accept an n-dimensional array.
  - [\#4064](https://github.com/scipy/scipy/pull/4064): Documented the return value for scipy.signal.find\_peaks\_cwt
  - [\#4074](https://github.com/scipy/scipy/pull/4074): ENH: Support LinearOperator as input to svds
  - [\#4084](https://github.com/scipy/scipy/pull/4084): BUG: Match exception declarations in scipy/io/matlab/streams.pyx...
  - [\#4091](https://github.com/scipy/scipy/pull/4091): DOC: special: more clear instructions on how to evaluate polynomials
  - [\#4105](https://github.com/scipy/scipy/pull/4105): BUG: Workaround for SGEMV segfault in Accelerate
  - [\#4107](https://github.com/scipy/scipy/pull/4107): DOC: get rid of 'import \*' in examples
  - [\#4113](https://github.com/scipy/scipy/pull/4113): DOC: fix typos in distance.yule
  - [\#4114](https://github.com/scipy/scipy/pull/4114): MAINT C fixes
  - [\#4117](https://github.com/scipy/scipy/pull/4117): deprecate nanmean, nanmedian and nanstd in favor of their numpy...
  - [\#4126](https://github.com/scipy/scipy/pull/4126): scipy.io.idl: support description records and fix bug with null...
  - [\#4131](https://github.com/scipy/scipy/pull/4131): ENH: release GIL in more ndimage functions
  - [\#4132](https://github.com/scipy/scipy/pull/4132): MAINT: stats: fix a typo \[skip ci\]
  - [\#4145](https://github.com/scipy/scipy/pull/4145): DOC: Fix documentation error for nc chi-squared dist
  - [\#4150](https://github.com/scipy/scipy/pull/4150): Fix \_nd\_image.geometric\_transform endianness bug
  - [\#4153](https://github.com/scipy/scipy/pull/4153): MAINT: remove use of deprecated numpy API in lib/lapack/ f2py...
  - [\#4156](https://github.com/scipy/scipy/pull/4156): MAINT: optimize: remove dead code
  - [\#4159](https://github.com/scipy/scipy/pull/4159): MAINT: optimize: clean up Zeros code
  - [\#4165](https://github.com/scipy/scipy/pull/4165): DOC: add missing special functions to \_\_doc\_\_
  - [\#4172](https://github.com/scipy/scipy/pull/4172): DOC: remove misleading procrustes docstring line
  - [\#4175](https://github.com/scipy/scipy/pull/4175): DOC: sparse: clarify CSC and CSR constructor usage
  - [\#4177](https://github.com/scipy/scipy/pull/4177): MAINT: enable np.matrix inputs to solve\_discrete\_lyapunov
  - [\#4179](https://github.com/scipy/scipy/pull/4179): TST: fix an intermittently failing test case for special.legendre
  - [\#4181](https://github.com/scipy/scipy/pull/4181): MAINT: remove unnecessary null checks before free
  - [\#4182](https://github.com/scipy/scipy/pull/4182): Ellipsoidal harmonics
  - [\#4183](https://github.com/scipy/scipy/pull/4183): Skip Cython build in Travis-CI
  - [\#4184](https://github.com/scipy/scipy/pull/4184): Pr 4074
  - [\#4187](https://github.com/scipy/scipy/pull/4187): Pr/3923
  - [\#4190](https://github.com/scipy/scipy/pull/4190): BUG: special: fix up ellip\_harm build
  - [\#4193](https://github.com/scipy/scipy/pull/4193): BLD: fix msvc compiler errors
  - [\#4194](https://github.com/scipy/scipy/pull/4194): BUG: fix buffer dtype mismatch on win-amd64
  - [\#4199](https://github.com/scipy/scipy/pull/4199): ENH: Changed scipy.stats.describe output from datalen to nobs
  - [\#4201](https://github.com/scipy/scipy/pull/4201): DOC: add blas2 and nan\* deprecations to the release notes
  - [\#4243](https://github.com/scipy/scipy/pull/4243): TST: bump test tolerances

---

0.15.1-notes.md

---

# SciPy 0.15.1 Release Notes

SciPy 0.15.1 is a bug-fix release with no new features compared to 0.15.0.

## Issues fixed

  - [\#4413](https://github.com/scipy/scipy/pull/4413): BUG: Tests too strict, f2py doesn't have to overwrite this array
  - [\#4417](https://github.com/scipy/scipy/pull/4417): BLD: avoid using NPY\_API\_VERSION to check not using deprecated...
  - [\#4418](https://github.com/scipy/scipy/pull/4418): Restore and deprecate scipy.linalg.calc\_work

---

0.16.0-notes.md

---

# SciPy 0.16.0 Release Notes

<div class="contents">

</div>

SciPy 0.16.0 is the culmination of 7 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.16.x branch, and on adding new features on the master branch.

This release requires Python 2.6, 2.7 or 3.2-3.4 and NumPy 1.6.2 or greater.

Highlights of this release include:

  - A Cython API for BLAS/LAPACK in <span class="title-ref">scipy.linalg</span>
  - A new benchmark suite. It's now straightforward to add new benchmarks, and they're routinely included with performance enhancement PRs.
  - Support for the second order sections (SOS) format in <span class="title-ref">scipy.signal</span>.

## New features

### Benchmark suite

The benchmark suite has switched to using [Airspeed Velocity](https://asv.readthedocs.io/en/stable/) for benchmarking. You can run the suite locally via `python runtests.py --bench`. For more details, see `benchmarks/README.rst`.

### <span class="title-ref">scipy.linalg</span> improvements

A full set of Cython wrappers for BLAS and LAPACK has been added in the modules <span class="title-ref">scipy.linalg.cython\_blas</span> and <span class="title-ref">scipy.linalg.cython\_lapack</span>. In Cython, these wrappers can now be cimported from their corresponding modules and used without linking directly against BLAS or LAPACK.

The functions <span class="title-ref">scipy.linalg.qr\_delete</span>, <span class="title-ref">scipy.linalg.qr\_insert</span> and <span class="title-ref">scipy.linalg.qr\_update</span> for updating QR decompositions were added.

The function <span class="title-ref">scipy.linalg.solve\_circulant</span> solves a linear system with a circulant coefficient matrix.

The function <span class="title-ref">scipy.linalg.invpascal</span> computes the inverse of a Pascal matrix.

The function <span class="title-ref">scipy.linalg.solve\_toeplitz</span>, a Levinson-Durbin Toeplitz solver, was added.

Added wrapper for potentially useful LAPACK function `*lasd4`. It computes the square root of the i-th updated eigenvalue of a positive symmetric rank-one modification to a positive diagonal matrix. See its LAPACK documentation and unit tests for it to get more info.

Added two extra wrappers for LAPACK least-square solvers. Namely, they are `*gelsd` and `*gelsy`.

Wrappers for the LAPACK `*lange` functions, which calculate various matrix norms, were added.

Wrappers for `*gtsv` and `*ptsv`, which solve `A*X = B` for tri-diagonal matrix `A`, were added.

### <span class="title-ref">scipy.signal</span> improvements

Support for second order sections (SOS) as a format for IIR filters was added. The new functions are:

  - <span class="title-ref">scipy.signal.sosfilt</span>
  - <span class="title-ref">scipy.signal.sosfilt\_zi</span>,
  - <span class="title-ref">scipy.signal.sos2tf</span>
  - <span class="title-ref">scipy.signal.sos2zpk</span>
  - <span class="title-ref">scipy.signal.tf2sos</span>
  - <span class="title-ref">scipy.signal.zpk2sos</span>.

Additionally, the filter design functions <span class="title-ref">iirdesign</span>, <span class="title-ref">iirfilter</span>, <span class="title-ref">butter</span>, <span class="title-ref">cheby1</span>, <span class="title-ref">cheby2</span>, <span class="title-ref">ellip</span>, and <span class="title-ref">bessel</span> can return the filter in the SOS format.

The function <span class="title-ref">scipy.signal.place\_poles</span>, which provides two methods to place poles for linear systems, was added.

The option to use Gustafsson's method for choosing the initial conditions of the forward and backward passes was added to <span class="title-ref">scipy.signal.filtfilt</span>.

New classes `TransferFunction`, `StateSpace` and `ZerosPolesGain` were added. These classes are now returned when instantiating <span class="title-ref">scipy.signal.lti</span>. Conversion between those classes can be done explicitly now.

An exponential (Poisson) window was added as `scipy.signal.exponential`, and a Tukey window was added as `scipy.signal.tukey`.

The function for computing digital filter group delay was added as <span class="title-ref">scipy.signal.group\_delay</span>.

The functionality for spectral analysis and spectral density estimation has been significantly improved: <span class="title-ref">scipy.signal.welch</span> became \~8x faster and the functions <span class="title-ref">scipy.signal.spectrogram</span>, <span class="title-ref">scipy.signal.coherence</span> and <span class="title-ref">scipy.signal.csd</span> (cross-spectral density) were added.

<span class="title-ref">scipy.signal.lsim</span> was rewritten - all known issues are fixed, so this function can now be used instead of `lsim2`; `lsim` is orders of magnitude faster than `lsim2` in most cases.

### <span class="title-ref">scipy.sparse</span> improvements

The function <span class="title-ref">scipy.sparse.norm</span>, which computes sparse matrix norms, was added.

The function <span class="title-ref">scipy.sparse.random</span>, which allows to draw random variates from an arbitrary distribution, was added.

### <span class="title-ref">scipy.spatial</span> improvements

<span class="title-ref">scipy.spatial.cKDTree</span> has seen a major rewrite, which improved the performance of the `query` method significantly, added support for parallel queries, pickling, and options that affect the tree layout. See pull request 4374 for more details.

The function <span class="title-ref">scipy.spatial.procrustes</span> for Procrustes analysis (statistical shape analysis) was added.

### <span class="title-ref">scipy.stats</span> improvements

The Wishart distribution and its inverse have been added, as <span class="title-ref">scipy.stats.wishart</span> and <span class="title-ref">scipy.stats.invwishart</span>.

The Exponentially Modified Normal distribution has been added as <span class="title-ref">scipy.stats.exponnorm</span>.

The Generalized Normal distribution has been added as <span class="title-ref">scipy.stats.gennorm</span>.

All distributions now contain a `random_state` property and allow specifying a specific `numpy.random.RandomState` random number generator when generating random variates.

Many statistical tests and other <span class="title-ref">scipy.stats</span> functions that have multiple return values now return `namedtuples`. See pull request 4709 for details.

### <span class="title-ref">scipy.optimize</span> improvements

A new derivative-free method DF-SANE has been added to the nonlinear equation system solving function <span class="title-ref">scipy.optimize.root</span>.

## Deprecated features

`scipy.stats.pdf_fromgamma` is deprecated. This function was undocumented, untested and rarely used. Statsmodels provides equivalent functionality with `statsmodels.distributions.ExpandedNormal`.

`scipy.stats.fastsort` is deprecated. This function is unnecessary, `numpy.argsort` can be used instead.

`scipy.stats.signaltonoise` and `scipy.stats.mstats.signaltonoise` are deprecated. These functions did not belong in `scipy.stats` and are rarely used. See issue \#609 for details.

`scipy.stats.histogram2` is deprecated. This function is unnecessary, `numpy.histogram2d` can be used instead.

## Backwards incompatible changes

The deprecated global optimizer `scipy.optimize.anneal` was removed.

The following deprecated modules have been removed: `scipy.lib.blas`, `scipy.lib.lapack`, `scipy.linalg.cblas`, `scipy.linalg.fblas`, `scipy.linalg.clapack`, `scipy.linalg.flapack`. They had been deprecated since Scipy 0.12.0, the functionality should be accessed as <span class="title-ref">scipy.linalg.blas</span> and <span class="title-ref">scipy.linalg.lapack</span>.

The deprecated function `scipy.special.all_mat` has been removed.

The deprecated functions `fprob`, `ksprob`, `zprob`, `randwcdf` and `randwppf` have been removed from <span class="title-ref">scipy.stats</span>.

## Other changes

The version numbering for development builds has been updated to comply with PEP 440.

Building with `python setup.py develop` is now supported.

## Authors

  - @axiru +
  - @endolith
  - Elliott Sales de Andrade +
  - Anne Archibald
  - Yoshiki Vázquez Baeza +
  - Sylvain Bellemare
  - Felix Berkenkamp +
  - Raoul Bourquin +
  - Matthew Brett
  - Per Brodtkorb
  - Christian Brueffer
  - Lars Buitinck
  - Evgeni Burovski
  - Steven Byrnes
  - CJ Carey
  - George Castillo +
  - Alex Conley +
  - Liam Damewood +
  - Rupak Das +
  - Abraham Escalante +
  - Matthias Feurer +
  - Eric Firing +
  - Clark Fitzgerald
  - Chad Fulton
  - André Gaul
  - Andreea Georgescu +
  - Christoph Gohlke
  - Andrey Golovizin +
  - Ralf Gommers
  - J.J. Green +
  - Alex Griffing
  - Alexander Grigorievskiy +
  - Hans Moritz Gunther +
  - Jonas Hahnfeld +
  - Charles Harris
  - Ian Henriksen
  - Andreas Hilboll
  - Åsmund Hjulstad +
  - Jan Schlüter +
  - Janko Slavič +
  - Daniel Jensen +
  - Johannes Ballé +
  - Terry Jones +
  - Amato Kasahara +
  - Eric Larson
  - Denis Laxalde
  - Antony Lee
  - Gregory R. Lee
  - Perry Lee +
  - Loïc Estève
  - Martin Manns +
  - Eric Martin +
  - Matěj Kocián +
  - Andreas Mayer +
  - Nikolay Mayorov +
  - Robert McGibbon +
  - Sturla Molden
  - Nicola Montecchio +
  - Eric Moore
  - Jamie Morton +
  - Nikolas Moya +
  - Maniteja Nandana +
  - Andrew Nelson
  - Joel Nothman
  - Aldrian Obaja
  - Regina Ongowarsito +
  - Paul Ortyl +
  - Pedro López-Adeva Fernández-Layos +
  - Stefan Peterson +
  - Irvin Probst +
  - Eric Quintero +
  - John David Reaver +
  - Juha Remes +
  - Thomas Robitaille
  - Clancy Rowley +
  - Tobias Schmidt +
  - Skipper Seabold
  - Aman Singh +
  - Eric Soroos
  - Valentine Svensson +
  - Julian Taylor
  - Aman Thakral +
  - Helmut Toplitzer +
  - Fukumu Tsutsumi +
  - Anastasiia Tsyplia +
  - Jacob Vanderplas
  - Pauli Virtanen
  - Matteo Visconti +
  - Warren Weckesser
  - Florian Wilhelm +
  - Nathan Woods
  - Haochen Wu +
  - Daan Wynen +

A total of 93 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 0.16.0

  - [\#1063](https://github.com/scipy/scipy/issues/1063): Implement a whishart distribution (Trac \#536)
  - [\#1885](https://github.com/scipy/scipy/issues/1885): Rbf: floating point warnings - possible bug (Trac \#1360)
  - [\#2020](https://github.com/scipy/scipy/issues/2020): Rbf default epsilon too large (Trac \#1495)
  - [\#2325](https://github.com/scipy/scipy/issues/2325): extending distributions, hypergeom, to degenerate cases (Trac...
  - [\#3502](https://github.com/scipy/scipy/issues/3502): \[ENH\] linalg.hessenberg should use ORGHR for calc\_q=True
  - [\#3603](https://github.com/scipy/scipy/issues/3603): Passing array as window into signal.resample() fails
  - [\#3675](https://github.com/scipy/scipy/issues/3675): Intermittent failures for signal.slepian on Windows
  - [\#3742](https://github.com/scipy/scipy/issues/3742): Pchipinterpolator inconvenient as ppoly
  - [\#3786](https://github.com/scipy/scipy/issues/3786): add procrustes?
  - [\#3798](https://github.com/scipy/scipy/issues/3798): scipy.io.savemat fails for empty dicts
  - [\#3975](https://github.com/scipy/scipy/issues/3975): Use RandomState in scipy.stats
  - [\#4022](https://github.com/scipy/scipy/issues/4022): savemat incorrectly saves logical arrays
  - [\#4028](https://github.com/scipy/scipy/issues/4028): scipy.stats.geom.logpmf(1,1) returns nan. The correct value is...
  - [\#4030](https://github.com/scipy/scipy/issues/4030): simplify scipy.stats.betaprime.cdf
  - [\#4031](https://github.com/scipy/scipy/issues/4031): improve accuracy of scipy.stats.gompertz distribution for small...
  - [\#4033](https://github.com/scipy/scipy/issues/4033): improve accuracy of scipy.stats.lomax distribution for small...
  - [\#4034](https://github.com/scipy/scipy/issues/4034): improve accuracy of scipy.stats.rayleigh distribution for large...
  - [\#4035](https://github.com/scipy/scipy/issues/4035): improve accuracy of scipy.stats.truncexpon distribution for small...
  - [\#4081](https://github.com/scipy/scipy/issues/4081): Error when reading matlab file: buffer is too small for requested...
  - [\#4100](https://github.com/scipy/scipy/issues/4100): Why does qr(a, lwork=0) not fail?
  - [\#4134](https://github.com/scipy/scipy/issues/4134): scipy.stats: rv\_frozen has no expect() method
  - [\#4204](https://github.com/scipy/scipy/issues/4204): Please add docstring to scipy.optimize.RootResults
  - [\#4206](https://github.com/scipy/scipy/issues/4206): Wrap LAPACK tridiagonal solve routine <span class="title-ref">gtsv</span>
  - [\#4208](https://github.com/scipy/scipy/issues/4208): Empty sparse matrices written to MAT file cannot be read by MATLAB
  - [\#4217](https://github.com/scipy/scipy/issues/4217): use a TravisCI configuration with numpy built with NPY\_RELAXED\_STRIDES\_CHECKING=1
  - [\#4282](https://github.com/scipy/scipy/issues/4282): integrate.odeint raises an exception when full\_output=1 and the...
  - [\#4301](https://github.com/scipy/scipy/issues/4301): scipy and numpy version names do not follow pep 440
  - [\#4355](https://github.com/scipy/scipy/issues/4355): PPoly.antiderivative() produces incorrect output
  - [\#4391](https://github.com/scipy/scipy/issues/4391): spsolve becomes extremely slow with large b matrix
  - [\#4393](https://github.com/scipy/scipy/issues/4393): Documentation glitsch in sparse.linalg.spilu
  - [\#4408](https://github.com/scipy/scipy/issues/4408): Vector-valued constraints in minimize() et al
  - [\#4412](https://github.com/scipy/scipy/issues/4412): Documentation of scipy.signal.cwt error
  - [\#4428](https://github.com/scipy/scipy/issues/4428): dok.\_\_setitem\_\_ problem with negative indices
  - [\#4434](https://github.com/scipy/scipy/issues/4434): Incomplete documentation for sparse.linalg.spsolve
  - [\#4438](https://github.com/scipy/scipy/issues/4438): linprog() documentation example wrong
  - [\#4445](https://github.com/scipy/scipy/issues/4445): Typo in scipy.special.expit doc
  - [\#4467](https://github.com/scipy/scipy/issues/4467): Documentation Error in scipy.optimize options for TNC
  - [\#4492](https://github.com/scipy/scipy/issues/4492): solve\_toeplitz benchmark is bitrotting already
  - [\#4506](https://github.com/scipy/scipy/issues/4506): lobpcg/sparse performance regression Jun 2014?
  - [\#4520](https://github.com/scipy/scipy/issues/4520): g77\_abi\_wrappers needed on Linux for MKL as well
  - [\#4521](https://github.com/scipy/scipy/issues/4521): Broken check in uses\_mkl for newer versions of the library
  - [\#4523](https://github.com/scipy/scipy/issues/4523): rbf with gaussian kernel seems to produce more noise than original...
  - [\#4526](https://github.com/scipy/scipy/issues/4526): error in site documentation for poisson.pmf() method
  - [\#4527](https://github.com/scipy/scipy/issues/4527): KDTree example doesn't work in Python 3
  - [\#4550](https://github.com/scipy/scipy/issues/4550): <span class="title-ref">scipy.stats.mode</span> - UnboundLocalError on empty sequence
  - [\#4554](https://github.com/scipy/scipy/issues/4554): filter out convergence warnings in optimization tests
  - [\#4565](https://github.com/scipy/scipy/issues/4565): odeint messages
  - [\#4569](https://github.com/scipy/scipy/issues/4569): remez: "ValueError: Failure to converge after 25 iterations....
  - [\#4582](https://github.com/scipy/scipy/issues/4582): DOC: optimize: \_minimize\_scalar\_brent does not have a disp option
  - [\#4585](https://github.com/scipy/scipy/issues/4585): DOC: Erroneous latex-related characters in tutorial.
  - [\#4590](https://github.com/scipy/scipy/issues/4590): sparse.linalg.svds should throw an exception if which not in...
  - [\#4594](https://github.com/scipy/scipy/issues/4594): scipy.optimize.linprog IndexError when a callback is providen
  - [\#4596](https://github.com/scipy/scipy/issues/4596): scipy.linalg.block\_diag misbehavior with empty array inputs (v0.13.3)
  - [\#4599](https://github.com/scipy/scipy/issues/4599): scipy.integrate.nquad should call \_OptFunc when called with only...
  - [\#4612](https://github.com/scipy/scipy/issues/4612): Crash in signal.lfilter on nd input with wrong shaped zi
  - [\#4613](https://github.com/scipy/scipy/issues/4613): scipy.io.readsav error on reading sav file
  - [\#4673](https://github.com/scipy/scipy/issues/4673): scipy.interpolate.RectBivariateSpline construction locks PyQt...
  - [\#4681](https://github.com/scipy/scipy/issues/4681): Broadcasting in signal.lfilter still not quite right.
  - [\#4705](https://github.com/scipy/scipy/issues/4705): kmeans k\_or\_guess parameter error if guess is not square array
  - [\#4719](https://github.com/scipy/scipy/issues/4719): Build failure on 14.04.2
  - [\#4724](https://github.com/scipy/scipy/issues/4724): GenGamma \_munp function fails due to overflow
  - [\#4726](https://github.com/scipy/scipy/issues/4726): FAIL: test\_cobyla.test\_vector\_constraints
  - [\#4734](https://github.com/scipy/scipy/issues/4734): Failing tests in stats with numpy master.
  - [\#4736](https://github.com/scipy/scipy/issues/4736): qr\_update bug or incompatibility with numpy 1.10?
  - [\#4746](https://github.com/scipy/scipy/issues/4746): linprog returns solution violating equality constraint
  - [\#4757](https://github.com/scipy/scipy/issues/4757): optimize.leastsq docstring mismatch
  - [\#4774](https://github.com/scipy/scipy/issues/4774): Update contributor list for v0.16
  - [\#4779](https://github.com/scipy/scipy/issues/4779): circmean and others do not appear in the documentation
  - [\#4788](https://github.com/scipy/scipy/issues/4788): problems with scipy sparse linalg isolve iterative.py when complex
  - [\#4791](https://github.com/scipy/scipy/issues/4791): BUG: scipy.spatial: incremental Voronoi doesn't increase size...

### Pull requests for 0.16.0

  - [\#3116](https://github.com/scipy/scipy/pull/3116): sparse: enhancements for DIA format
  - [\#3157](https://github.com/scipy/scipy/pull/3157): ENH: linalg: add the function 'solve\_circulant' for solving a...
  - [\#3442](https://github.com/scipy/scipy/pull/3442): ENH: signal: Add Gustafsson's method as an option for the filtfilt...
  - [\#3679](https://github.com/scipy/scipy/pull/3679): WIP: fix sporadic slepian failures
  - [\#3680](https://github.com/scipy/scipy/pull/3680): Some cleanups in stats
  - [\#3717](https://github.com/scipy/scipy/pull/3717): ENH: Add second-order sections filtering
  - [\#3741](https://github.com/scipy/scipy/pull/3741): Dltisys changes
  - [\#3956](https://github.com/scipy/scipy/pull/3956): add note to scipy.signal.resample about prime sample numbers
  - [\#3980](https://github.com/scipy/scipy/pull/3980): Add check\_finite flag to UnivariateSpline
  - [\#3996](https://github.com/scipy/scipy/pull/3996): MAINT: stricter linalg argument checking
  - [\#4001](https://github.com/scipy/scipy/pull/4001): BUG: numerical precision in dirichlet
  - [\#4012](https://github.com/scipy/scipy/pull/4012): ENH: linalg: Add a function to compute the inverse of a Pascal...
  - [\#4021](https://github.com/scipy/scipy/pull/4021): ENH: Cython api for lapack and blas
  - [\#4089](https://github.com/scipy/scipy/pull/4089): Fixes for various PEP8 issues.
  - [\#4116](https://github.com/scipy/scipy/pull/4116): MAINT: fitpack: trim down compiler warnings (unused labels, variables)
  - [\#4129](https://github.com/scipy/scipy/pull/4129): ENH: stats: add a random\_state property to distributions
  - [\#4135](https://github.com/scipy/scipy/pull/4135): ENH: Add Wishart and inverse Wishart distributions
  - [\#4195](https://github.com/scipy/scipy/pull/4195): improve the interpolate docs
  - [\#4200](https://github.com/scipy/scipy/pull/4200): ENH: Add t-test from descriptive stats function.
  - [\#4202](https://github.com/scipy/scipy/pull/4202): Dendrogram threshold color
  - [\#4205](https://github.com/scipy/scipy/pull/4205): BLD: fix a number of Bento build warnings.
  - [\#4211](https://github.com/scipy/scipy/pull/4211): add an ufunc for the inverse Box-Cox transfrom
  - [\#4212](https://github.com/scipy/scipy/pull/4212): MRG:fix for gh-4208
  - [\#4213](https://github.com/scipy/scipy/pull/4213): ENH: specific warning if matlab file is empty
  - [\#4215](https://github.com/scipy/scipy/pull/4215): Issue \#4209: splprep documentation updated to reflect dimensional...
  - [\#4219](https://github.com/scipy/scipy/pull/4219): DOC: silence several Sphinx warnings when building the docs
  - [\#4223](https://github.com/scipy/scipy/pull/4223): MAINT: remove two redundant lines of code
  - [\#4226](https://github.com/scipy/scipy/pull/4226): try forcing the numpy rebuild with relaxed strides
  - [\#4228](https://github.com/scipy/scipy/pull/4228): BLD: some updates to Bento config files and docs. Closes gh-3978.
  - [\#4232](https://github.com/scipy/scipy/pull/4232): wrong references in the docs
  - [\#4242](https://github.com/scipy/scipy/pull/4242): DOC: change example sample spacing
  - [\#4245](https://github.com/scipy/scipy/pull/4245): Arff fixes
  - [\#4246](https://github.com/scipy/scipy/pull/4246): MAINT: C fixes
  - [\#4247](https://github.com/scipy/scipy/pull/4247): MAINT: remove some unused code
  - [\#4249](https://github.com/scipy/scipy/pull/4249): Add routines for updating QR decompositions
  - [\#4250](https://github.com/scipy/scipy/pull/4250): MAINT: Some pyflakes-driven cleanup in linalg and sparse
  - [\#4252](https://github.com/scipy/scipy/pull/4252): MAINT trim away \>10 kLOC of generated C code
  - [\#4253](https://github.com/scipy/scipy/pull/4253): TST: stop shadowing ellip\* tests vs boost data
  - [\#4254](https://github.com/scipy/scipy/pull/4254): MAINT: special: use NPY\_PI, not M\_PI
  - [\#4255](https://github.com/scipy/scipy/pull/4255): DOC: INSTALL: use Py3-compatible print syntax, and don't mention...
  - [\#4256](https://github.com/scipy/scipy/pull/4256): ENH: spatial: reimplement cdist\_cosine using np.dot
  - [\#4258](https://github.com/scipy/scipy/pull/4258): BUG: io.arff \#4429 \#2088
  - [\#4261](https://github.com/scipy/scipy/pull/4261): MAINT: signal: PEP8 and related style clean up.
  - [\#4262](https://github.com/scipy/scipy/pull/4262): BUG: newton\_krylov() was ignoring norm\_tol argument, closes \#4259
  - [\#4263](https://github.com/scipy/scipy/pull/4263): MAINT: clean up test noise and optimize tests for docstrings...
  - [\#4266](https://github.com/scipy/scipy/pull/4266): MAINT: io: Give an informative error when attempting to read...
  - [\#4268](https://github.com/scipy/scipy/pull/4268): MAINT: fftpack benchmark integer division vs true division
  - [\#4269](https://github.com/scipy/scipy/pull/4269): MAINT: avoid shadowing the eigvals function
  - [\#4272](https://github.com/scipy/scipy/pull/4272): BUG: sparse: Fix bench\_sparse.py
  - [\#4276](https://github.com/scipy/scipy/pull/4276): DOC: remove confusing parts of the documentation related to writing...
  - [\#4281](https://github.com/scipy/scipy/pull/4281): Sparse matrix multiplication: only convert array if needed (with...
  - [\#4284](https://github.com/scipy/scipy/pull/4284): BUG: integrate: odeint crashed when the integration time was...
  - [\#4286](https://github.com/scipy/scipy/pull/4286): MRG: fix matlab output type of logical array
  - [\#4287](https://github.com/scipy/scipy/pull/4287): DEP: deprecate stats.pdf\_fromgamma. Closes gh-699.
  - [\#4291](https://github.com/scipy/scipy/pull/4291): DOC: linalg: fix layout in cholesky\_banded docstring
  - [\#4292](https://github.com/scipy/scipy/pull/4292): BUG: allow empty dict as proxy for empty struct
  - [\#4293](https://github.com/scipy/scipy/pull/4293): MAINT: \!= -\> not\_equal in hamming distance implementation
  - [\#4295](https://github.com/scipy/scipy/pull/4295): Pole placement
  - [\#4296](https://github.com/scipy/scipy/pull/4296): MAINT: some cleanups in tests of several modules
  - [\#4302](https://github.com/scipy/scipy/pull/4302): ENH: Solve toeplitz linear systems
  - [\#4306](https://github.com/scipy/scipy/pull/4306): Add benchmark for conjugate gradient solver.
  - [\#4307](https://github.com/scipy/scipy/pull/4307): BLD: PEP 440
  - [\#4310](https://github.com/scipy/scipy/pull/4310): BUG: make stats.geom.logpmf(1,1) return 0.0 instead of nan
  - [\#4311](https://github.com/scipy/scipy/pull/4311): TST: restore a test that uses slogdet now that we have dropped...
  - [\#4313](https://github.com/scipy/scipy/pull/4313): Some minor fixes for stats.wishart addition.
  - [\#4315](https://github.com/scipy/scipy/pull/4315): MAINT: drop numpy 1.5 compatibility code in sparse matrix tests
  - [\#4318](https://github.com/scipy/scipy/pull/4318): ENH: Add random\_state to multivariate distributions
  - [\#4319](https://github.com/scipy/scipy/pull/4319): MAINT: fix hamming distance regression for exotic arrays, with...
  - [\#4320](https://github.com/scipy/scipy/pull/4320): TST: a few changes like self.assertTrue(x == y, message) -\> assert\_equal(x,...
  - [\#4321](https://github.com/scipy/scipy/pull/4321): TST: more changes like self.assertTrue(x == y, message) -\> assert\_equal(x,...
  - [\#4322](https://github.com/scipy/scipy/pull/4322): TST: in test\_signaltools, changes like self.assertTrue(x == y,...
  - [\#4323](https://github.com/scipy/scipy/pull/4323): MAINT: clean up benchmarks so they can all be run as single files.
  - [\#4324](https://github.com/scipy/scipy/pull/4324): Add more detailed committer guidelines, update MAINTAINERS.txt
  - [\#4326](https://github.com/scipy/scipy/pull/4326): TST: use numpy.testing in test\_hierarchy.py
  - [\#4329](https://github.com/scipy/scipy/pull/4329): MAINT: stats: rename check\_random\_state test function
  - [\#4330](https://github.com/scipy/scipy/pull/4330): Update distance tests
  - [\#4333](https://github.com/scipy/scipy/pull/4333): MAINT: import comb, factorial from scipy.special, not scipy.misc
  - [\#4338](https://github.com/scipy/scipy/pull/4338): TST: more conversions from nose to numpy.testing
  - [\#4339](https://github.com/scipy/scipy/pull/4339): MAINT: remove the deprecated all\_mat function from special\_matrices.py
  - [\#4340](https://github.com/scipy/scipy/pull/4340): add several features to frozen distributions
  - [\#4344](https://github.com/scipy/scipy/pull/4344): BUG: Fix/test invalid lwork param in qr
  - [\#4345](https://github.com/scipy/scipy/pull/4345): Fix test noise visible with Python 3.x
  - [\#4347](https://github.com/scipy/scipy/pull/4347): Remove deprecated blas/lapack imports, rename lib to \_lib
  - [\#4349](https://github.com/scipy/scipy/pull/4349): DOC: add a nontrivial example to stats.binned\_statistic.
  - [\#4350](https://github.com/scipy/scipy/pull/4350): MAINT: remove optimize.anneal for 0.16.0 (was deprecated in 0.14.0).
  - [\#4351](https://github.com/scipy/scipy/pull/4351): MAINT: fix usage of deprecated Numpy C API in optimize...
  - [\#4352](https://github.com/scipy/scipy/pull/4352): MAINT: fix a number of special test failures
  - [\#4353](https://github.com/scipy/scipy/pull/4353): implement cdf for betaprime distribution
  - [\#4357](https://github.com/scipy/scipy/pull/4357): BUG: piecewise polynomial antiderivative
  - [\#4358](https://github.com/scipy/scipy/pull/4358): BUG: integrate: fix handling of banded Jacobians in odeint, plus...
  - [\#4359](https://github.com/scipy/scipy/pull/4359): MAINT: remove a code path taken for Python version \< 2.5
  - [\#4360](https://github.com/scipy/scipy/pull/4360): MAINT: stats.mstats: Remove some unused variables (thanks, pyflakes).
  - [\#4362](https://github.com/scipy/scipy/pull/4362): Removed erroneous reference to smoothing parameter \#4072
  - [\#4363](https://github.com/scipy/scipy/pull/4363): MAINT: interpolate: clean up in fitpack.py
  - [\#4364](https://github.com/scipy/scipy/pull/4364): MAINT: lib: don't export "partial" from decorator
  - [\#4365](https://github.com/scipy/scipy/pull/4365): svdvals now returns a length-0 sequence of singular values given...
  - [\#4367](https://github.com/scipy/scipy/pull/4367): DOC: slightly improve TeX rendering of wishart/invwishart docstring
  - [\#4373](https://github.com/scipy/scipy/pull/4373): ENH: wrap gtsv and ptsv for solve\_banded and solveh\_banded.
  - [\#4374](https://github.com/scipy/scipy/pull/4374): ENH: Enhancements to spatial.cKDTree
  - [\#4376](https://github.com/scipy/scipy/pull/4376): BF: fix reading off-spec matlab logical sparse
  - [\#4377](https://github.com/scipy/scipy/pull/4377): MAINT: integrate: Clean up some Fortran test code.
  - [\#4378](https://github.com/scipy/scipy/pull/4378): MAINT: fix usage of deprecated Numpy C API in signal
  - [\#4380](https://github.com/scipy/scipy/pull/4380): MAINT: scipy.optimize, removing further anneal references
  - [\#4381](https://github.com/scipy/scipy/pull/4381): ENH: Make DCT and DST accept int and complex types like fft
  - [\#4392](https://github.com/scipy/scipy/pull/4392): ENH: optimize: add DF-SANE nonlinear derivative-free solver
  - [\#4394](https://github.com/scipy/scipy/pull/4394): Make reordering algorithms 64-bit clean
  - [\#4396](https://github.com/scipy/scipy/pull/4396): BUG: bundle cblas.h in Accelerate ABI wrappers to enable compilation...
  - [\#4398](https://github.com/scipy/scipy/pull/4398): FIX pdist bug where wminkowski's w.dtype \!= double
  - [\#4402](https://github.com/scipy/scipy/pull/4402): BUG: fix stat.hypergeom argcheck
  - [\#4404](https://github.com/scipy/scipy/pull/4404): MAINT: Fill in the full symmetric squareform in the C loop
  - [\#4405](https://github.com/scipy/scipy/pull/4405): BUG: avoid X += X.T (refs \#4401)
  - [\#4407](https://github.com/scipy/scipy/pull/4407): improved accuracy of gompertz distribution for small x
  - [\#4414](https://github.com/scipy/scipy/pull/4414): DOC:fix error in scipy.signal.cwt documentation.
  - [\#4415](https://github.com/scipy/scipy/pull/4415): ENH: Improve accuracy of lomax for small x.
  - [\#4416](https://github.com/scipy/scipy/pull/4416): DOC: correct a parameter name in docstring of SuperLU.solve....
  - [\#4419](https://github.com/scipy/scipy/pull/4419): Restore scipy.linalg.calc\_lwork also in master
  - [\#4420](https://github.com/scipy/scipy/pull/4420): fix a performance issue with a sparse solver
  - [\#4423](https://github.com/scipy/scipy/pull/4423): ENH: improve rayleigh accuracy for large x.
  - [\#4424](https://github.com/scipy/scipy/pull/4424): BUG: optimize.minimize: fix overflow issue with integer x0 input.
  - [\#4425](https://github.com/scipy/scipy/pull/4425): ENH: Improve accuracy of truncexpon for small x
  - [\#4426](https://github.com/scipy/scipy/pull/4426): ENH: improve rayleigh accuracy for large x.
  - [\#4427](https://github.com/scipy/scipy/pull/4427): MAINT: optimize: cleanup of TNC code
  - [\#4429](https://github.com/scipy/scipy/pull/4429): BLD: fix build failure with numpy 1.7.x and 1.8.x.
  - [\#4430](https://github.com/scipy/scipy/pull/4430): BUG: fix a sparse.dok\_matrix set/get copy-paste bug
  - [\#4433](https://github.com/scipy/scipy/pull/4433): Update \_minimize.py
  - [\#4435](https://github.com/scipy/scipy/pull/4435): ENH: release GIL around batch distance computations
  - [\#4436](https://github.com/scipy/scipy/pull/4436): Fixed incomplete documentation for spsolve
  - [\#4439](https://github.com/scipy/scipy/pull/4439): MAINT: integrate: Some clean up in the tests.
  - [\#4440](https://github.com/scipy/scipy/pull/4440): Fast permutation t-test
  - [\#4442](https://github.com/scipy/scipy/pull/4442): DOC: optimize: fix wrong result in docstring
  - [\#4447](https://github.com/scipy/scipy/pull/4447): DOC: signal: Some additional documentation to go along with the...
  - [\#4448](https://github.com/scipy/scipy/pull/4448): DOC: tweak the docstring of lapack.linalg module
  - [\#4449](https://github.com/scipy/scipy/pull/4449): fix a typo in the expit docstring
  - [\#4451](https://github.com/scipy/scipy/pull/4451): ENH: vectorize distance loops with gcc
  - [\#4456](https://github.com/scipy/scipy/pull/4456): MAINT: don't fail large data tests on MemoryError
  - [\#4461](https://github.com/scipy/scipy/pull/4461): CI: use travis\_retry to deal with network timeouts
  - [\#4462](https://github.com/scipy/scipy/pull/4462): DOC: rationalize minimize() et al. documentation
  - [\#4470](https://github.com/scipy/scipy/pull/4470): MAINT: sparse: inherit dok\_matrix.toarray from spmatrix
  - [\#4473](https://github.com/scipy/scipy/pull/4473): BUG: signal: Fix validation of the zi shape in sosfilt.
  - [\#4475](https://github.com/scipy/scipy/pull/4475): BLD: setup.py: update min numpy version and support "setup.py...
  - [\#4481](https://github.com/scipy/scipy/pull/4481): ENH: add a new linalg special matrix: the Helmert matrix
  - [\#4485](https://github.com/scipy/scipy/pull/4485): MRG: some changes to allow reading bad mat files
  - [\#4490](https://github.com/scipy/scipy/pull/4490): \[ENH\] linalg.hessenberg: use orghr - rebase
  - [\#4491](https://github.com/scipy/scipy/pull/4491): ENH: linalg: Adding wrapper for potentially useful LAPACK function...
  - [\#4493](https://github.com/scipy/scipy/pull/4493): BENCH: the solve\_toeplitz benchmark used outdated syntax and...
  - [\#4494](https://github.com/scipy/scipy/pull/4494): MAINT: stats: remove duplicated code
  - [\#4496](https://github.com/scipy/scipy/pull/4496): References added for watershed\_ift algorithm
  - [\#4499](https://github.com/scipy/scipy/pull/4499): DOC: reshuffle stats distributions documentation
  - [\#4501](https://github.com/scipy/scipy/pull/4501): Replace benchmark suite with airspeed velocity
  - [\#4502](https://github.com/scipy/scipy/pull/4502): SLSQP should strictly satisfy bound constraints
  - [\#4503](https://github.com/scipy/scipy/pull/4503): DOC: forward port 0.15.x release notes and update author name...
  - [\#4504](https://github.com/scipy/scipy/pull/4504): ENH: option to avoid computing possibly unused svd matrix
  - [\#4505](https://github.com/scipy/scipy/pull/4505): Rebase of PR 3303 (sparse matrix norms)
  - [\#4507](https://github.com/scipy/scipy/pull/4507): MAINT: fix lobpcg performance regression
  - [\#4509](https://github.com/scipy/scipy/pull/4509): DOC: sparse: replace dead link
  - [\#4511](https://github.com/scipy/scipy/pull/4511): Fixed differential evolution bug
  - [\#4512](https://github.com/scipy/scipy/pull/4512): Change to fully PEP440 compliant dev version numbers (always...
  - [\#4525](https://github.com/scipy/scipy/pull/4525): made tiny style corrections (pep8)
  - [\#4533](https://github.com/scipy/scipy/pull/4533): Add exponentially modified gaussian distribution (scipy.stats.expongauss)
  - [\#4534](https://github.com/scipy/scipy/pull/4534): MAINT: benchmarks: make benchmark suite importable on all scipy...
  - [\#4535](https://github.com/scipy/scipy/pull/4535): BUG: Changed zip() to list(zip()) so that it could work in Python...
  - [\#4536](https://github.com/scipy/scipy/pull/4536): Follow up to pr 4348 (exponential window)
  - [\#4540](https://github.com/scipy/scipy/pull/4540): ENH: spatial: Add procrustes analysis
  - [\#4541](https://github.com/scipy/scipy/pull/4541): Bench fixes
  - [\#4542](https://github.com/scipy/scipy/pull/4542): TST: NumpyVersion dev -\> dev0
  - [\#4543](https://github.com/scipy/scipy/pull/4543): BUG: Overflow in savgol\_coeffs
  - [\#4544](https://github.com/scipy/scipy/pull/4544): pep8 fixes for stats
  - [\#4546](https://github.com/scipy/scipy/pull/4546): MAINT: use reduction axis arguments in one-norm estimation
  - [\#4549](https://github.com/scipy/scipy/pull/4549): ENH : Added group\_delay to scipy.signal
  - [\#4553](https://github.com/scipy/scipy/pull/4553): ENH: Significantly faster moment function
  - [\#4556](https://github.com/scipy/scipy/pull/4556): DOC: document the changes of the sparse.linalg.svds (optional...
  - [\#4559](https://github.com/scipy/scipy/pull/4559): DOC: stats: describe loc and scale parameters in the docstring...
  - [\#4563](https://github.com/scipy/scipy/pull/4563): ENH: rewrite of stats.ppcc\_plot
  - [\#4564](https://github.com/scipy/scipy/pull/4564): Be more (or less) forgiving when user passes +-inf instead of...
  - [\#4566](https://github.com/scipy/scipy/pull/4566): DEP: remove a bunch of deprecated function from scipy.stats,...
  - [\#4570](https://github.com/scipy/scipy/pull/4570): MNT: Suppress LineSearchWarning's in scipy.optimize tests
  - [\#4572](https://github.com/scipy/scipy/pull/4572): ENH: Extract inverse hessian information from L-BFGS-B
  - [\#4576](https://github.com/scipy/scipy/pull/4576): ENH: Split signal.lti into subclasses, part of \#2912
  - [\#4578](https://github.com/scipy/scipy/pull/4578): MNT: Reconcile docstrings and function signatures
  - [\#4581](https://github.com/scipy/scipy/pull/4581): Fix build with Intel MKL on Linux
  - [\#4583](https://github.com/scipy/scipy/pull/4583): DOC: optimize: remove references to unused disp kwarg
  - [\#4584](https://github.com/scipy/scipy/pull/4584): ENH: scipy.signal - Tukey window
  - [\#4587](https://github.com/scipy/scipy/pull/4587): Hermite asymptotic
  - [\#4593](https://github.com/scipy/scipy/pull/4593): DOC - add example to RegularGridInterpolator
  - [\#4595](https://github.com/scipy/scipy/pull/4595): DOC: Fix erroneous latex characters in tutorial/optimize.
  - [\#4600](https://github.com/scipy/scipy/pull/4600): Add return codes to optimize.tnc docs
  - [\#4603](https://github.com/scipy/scipy/pull/4603): ENH: Wrap LAPACK `*lange` functions for matrix norms
  - [\#4604](https://github.com/scipy/scipy/pull/4604): scipy.stats: generalized normal distribution
  - [\#4609](https://github.com/scipy/scipy/pull/4609): MAINT: interpolate: fix a few inconsistencies between docstrings...
  - [\#4610](https://github.com/scipy/scipy/pull/4610): MAINT: make runtest.py --bench-compare use asv continuous and...
  - [\#4611](https://github.com/scipy/scipy/pull/4611): DOC: stats: explain rice scaling; add a note to the tutorial...
  - [\#4614](https://github.com/scipy/scipy/pull/4614): BUG: lfilter, the size of zi was not checked correctly for nd...
  - [\#4617](https://github.com/scipy/scipy/pull/4617): MAINT: integrate: Clean the C code behind odeint.
  - [\#4618](https://github.com/scipy/scipy/pull/4618): FIX: Raise error when window length \!= data length
  - [\#4619](https://github.com/scipy/scipy/pull/4619): Issue \#4550: <span class="title-ref">scipy.stats.mode</span> - UnboundLocalError on empty...
  - [\#4620](https://github.com/scipy/scipy/pull/4620): Fixed a problem (\#4590) with svds accepting wrong eigenvalue...
  - [\#4621](https://github.com/scipy/scipy/pull/4621): Speed up special.ai\_zeros/bi\_zeros by 10x
  - [\#4623](https://github.com/scipy/scipy/pull/4623): MAINT: some tweaks to spatial.procrustes (private file, html...
  - [\#4628](https://github.com/scipy/scipy/pull/4628): Speed up signal.lfilter and add a convolution path for FIR filters
  - [\#4629](https://github.com/scipy/scipy/pull/4629): Bug: integrate.nquad; resolve issue \#4599
  - [\#4631](https://github.com/scipy/scipy/pull/4631): MAINT: integrate: Remove unused variables in a Fortran test function.
  - [\#4633](https://github.com/scipy/scipy/pull/4633): MAINT: Fix convergence message for remez
  - [\#4635](https://github.com/scipy/scipy/pull/4635): PEP8: indentation (so that pep8 bot does not complain)
  - [\#4637](https://github.com/scipy/scipy/pull/4637): MAINT: generalize a sign function to do the right thing for complex...
  - [\#4639](https://github.com/scipy/scipy/pull/4639): Amended typo in apple\_sgemv\_fix.c
  - [\#4642](https://github.com/scipy/scipy/pull/4642): MAINT: use lapack for scipy.linalg.norm
  - [\#4643](https://github.com/scipy/scipy/pull/4643): RBF default epsilon too large 2020
  - [\#4646](https://github.com/scipy/scipy/pull/4646): Added atleast\_1d around poly in invres and invresz
  - [\#4647](https://github.com/scipy/scipy/pull/4647): fix doc pdf build
  - [\#4648](https://github.com/scipy/scipy/pull/4648): BUG: Fixes \#4408: Vector-valued constraints in minimize() et...
  - [\#4649](https://github.com/scipy/scipy/pull/4649): Vonmisesfix
  - [\#4650](https://github.com/scipy/scipy/pull/4650): Signal example clean up in Tukey and place\_poles
  - [\#4652](https://github.com/scipy/scipy/pull/4652): DOC: Fix the error in convolve for same mode
  - [\#4653](https://github.com/scipy/scipy/pull/4653): improve erf performance
  - [\#4655](https://github.com/scipy/scipy/pull/4655): DEP: deprecate scipy.stats.histogram2 in favour of np.histogram2d
  - [\#4656](https://github.com/scipy/scipy/pull/4656): DEP: deprecate scipy.stats.signaltonoise
  - [\#4660](https://github.com/scipy/scipy/pull/4660): Avoid extra copy for sparse compressed \[:, seq\] and \[seq, :\]...
  - [\#4661](https://github.com/scipy/scipy/pull/4661): Clean, rebase of \#4478, adding ?gelsy and ?gelsd wrappers
  - [\#4662](https://github.com/scipy/scipy/pull/4662): MAINT: Correct odeint messages
  - [\#4664](https://github.com/scipy/scipy/pull/4664): Update \_monotone.py
  - [\#4672](https://github.com/scipy/scipy/pull/4672): fix behavior of scipy.linalg.block\_diag for empty input
  - [\#4675](https://github.com/scipy/scipy/pull/4675): Fix lsim
  - [\#4676](https://github.com/scipy/scipy/pull/4676): Added missing colon to :math: directive in docstring.
  - [\#4679](https://github.com/scipy/scipy/pull/4679): ENH: sparse randn
  - [\#4682](https://github.com/scipy/scipy/pull/4682): ENH: scipy.signal - Addition of CSD, coherence; Enhancement of...
  - [\#4684](https://github.com/scipy/scipy/pull/4684): BUG: various errors in weight calculations in orthogonal.py
  - [\#4685](https://github.com/scipy/scipy/pull/4685): BUG: Fixes \#4594: optimize.linprog IndexError when a callback...
  - [\#4686](https://github.com/scipy/scipy/pull/4686): MAINT: cluster: Clean up duplicated exception raising code.
  - [\#4688](https://github.com/scipy/scipy/pull/4688): Improve is\_distance\_dm exception message
  - [\#4692](https://github.com/scipy/scipy/pull/4692): MAINT: stats: Simplify the calculation in tukeylambda.\_ppf
  - [\#4693](https://github.com/scipy/scipy/pull/4693): ENH: added functionality to handle scalars in <span class="title-ref">stats.\_chk\_asarray</span>
  - [\#4694](https://github.com/scipy/scipy/pull/4694): Vectorization of Anderson-Darling computations.
  - [\#4696](https://github.com/scipy/scipy/pull/4696): Fix singleton expansion in lfilter.
  - [\#4698](https://github.com/scipy/scipy/pull/4698): MAINT: quiet warnings from cephes.
  - [\#4701](https://github.com/scipy/scipy/pull/4701): add Bpoly.antiderivatives / integrals
  - [\#4703](https://github.com/scipy/scipy/pull/4703): Add citation of published paper
  - [\#4706](https://github.com/scipy/scipy/pull/4706): MAINT: special: avoid out-of-bounds access in specfun
  - [\#4707](https://github.com/scipy/scipy/pull/4707): MAINT: fix issues with np.matrix as input to functions related...
  - [\#4709](https://github.com/scipy/scipy/pull/4709): ENH: <span class="title-ref">scipy.stats</span> now returns namedtuples.
  - [\#4710](https://github.com/scipy/scipy/pull/4710): scipy.io.idl: make reader more robust to missing variables in...
  - [\#4711](https://github.com/scipy/scipy/pull/4711): Fix crash for unknown chunks at the end of file
  - [\#4712](https://github.com/scipy/scipy/pull/4712): Reduce onenormest memory usage
  - [\#4713](https://github.com/scipy/scipy/pull/4713): MAINT: interpolate: no need to pass dtype around if it can be...
  - [\#4714](https://github.com/scipy/scipy/pull/4714): BENCH: Add benchmarks for stats module
  - [\#4715](https://github.com/scipy/scipy/pull/4715): MAINT: polish signal.place\_poles and signal/test\_ltisys.py
  - [\#4716](https://github.com/scipy/scipy/pull/4716): DEP: deprecate mstats.signaltonoise ...
  - [\#4717](https://github.com/scipy/scipy/pull/4717): MAINT: basinhopping: fix error in tests, silence /0 warning,...
  - [\#4718](https://github.com/scipy/scipy/pull/4718): ENH: stats: can specify f-shapes to fix in fitting by name
  - [\#4721](https://github.com/scipy/scipy/pull/4721): Document that imresize converts the input to a PIL image
  - [\#4722](https://github.com/scipy/scipy/pull/4722): MAINT: PyArray\_BASE is not an lvalue unless the deprecated API...
  - [\#4725](https://github.com/scipy/scipy/pull/4725): Fix gengamma \_nump failure
  - [\#4728](https://github.com/scipy/scipy/pull/4728): DOC: add poch to the list of scipy special function descriptions
  - [\#4735](https://github.com/scipy/scipy/pull/4735): MAINT: stats: avoid (a spurious) division-by-zero in skew
  - [\#4738](https://github.com/scipy/scipy/pull/4738): TST: silence runtime warnings for some corner cases in <span class="title-ref">stats</span>...
  - [\#4739](https://github.com/scipy/scipy/pull/4739): BLD: try to build numpy instead of using the one on TravisCI
  - [\#4740](https://github.com/scipy/scipy/pull/4740): DOC: Update some docstrings with 'versionadded'.
  - [\#4742](https://github.com/scipy/scipy/pull/4742): BLD: make sure that relaxed strides checking is in effect on...
  - [\#4750](https://github.com/scipy/scipy/pull/4750): DOC: special: TeX typesetting of rel\_entr, kl\_div and pseudo\_huber
  - [\#4751](https://github.com/scipy/scipy/pull/4751): BENCH: add sparse null slice benchmark
  - [\#4753](https://github.com/scipy/scipy/pull/4753): BUG: Fixed compilation with recent Cython versions.
  - [\#4756](https://github.com/scipy/scipy/pull/4756): BUG: Fixes \#4733: optimize.brute finish option is not compatible...
  - [\#4758](https://github.com/scipy/scipy/pull/4758): DOC: optimize.leastsq default maxfev clarification
  - [\#4759](https://github.com/scipy/scipy/pull/4759): improved stats mle fit
  - [\#4760](https://github.com/scipy/scipy/pull/4760): MAINT: count bfgs updates more carefully
  - [\#4762](https://github.com/scipy/scipy/pull/4762): BUGS: Fixes \#4746 and \#4594: linprog returns solution violating...
  - [\#4763](https://github.com/scipy/scipy/pull/4763): fix small linprog bugs
  - [\#4766](https://github.com/scipy/scipy/pull/4766): BENCH: add signal.lsim benchmark
  - [\#4768](https://github.com/scipy/scipy/pull/4768): fix python syntax errors in docstring examples
  - [\#4769](https://github.com/scipy/scipy/pull/4769): Fixes \#4726: test\_cobyla.test\_vector\_constraints
  - [\#4770](https://github.com/scipy/scipy/pull/4770): Mark FITPACK functions as thread safe.
  - [\#4771](https://github.com/scipy/scipy/pull/4771): edited scipy/stats/stats.py to fix doctest for fisher\_exact
  - [\#4773](https://github.com/scipy/scipy/pull/4773): DOC: update 0.16.0 release notes.
  - [\#4775](https://github.com/scipy/scipy/pull/4775): DOC: linalg: add funm\_psd as a docstring example
  - [\#4778](https://github.com/scipy/scipy/pull/4778): Use a dictionary for function name synonyms
  - [\#4780](https://github.com/scipy/scipy/pull/4780): Include apparently-forgotten functions in docs
  - [\#4783](https://github.com/scipy/scipy/pull/4783): Added many missing special functions to docs
  - [\#4784](https://github.com/scipy/scipy/pull/4784): add an axis attribute to PPoly and friends
  - [\#4785](https://github.com/scipy/scipy/pull/4785): Brief note about origin of Lena image
  - [\#4786](https://github.com/scipy/scipy/pull/4786): DOC: reformat the Methods section of the KDE docstring
  - [\#4787](https://github.com/scipy/scipy/pull/4787): Add rice cdf and ppf.
  - [\#4792](https://github.com/scipy/scipy/pull/4792): CI: add a kludge for detecting test failures which try to disguise...
  - [\#4795](https://github.com/scipy/scipy/pull/4795): Make refguide\_check smarter about false positives
  - [\#4797](https://github.com/scipy/scipy/pull/4797): BUG/TST: numpoints not updated for incremental Voronoi
  - [\#4799](https://github.com/scipy/scipy/pull/4799): BUG: spatial: Fix a couple edge cases for the Mahalanobis metric...
  - [\#4801](https://github.com/scipy/scipy/pull/4801): BUG: Fix TypeError in scipy.optimize.\_trust-region.py when disp=True.
  - [\#4803](https://github.com/scipy/scipy/pull/4803): Issues with relaxed strides in QR updating routines
  - [\#4806](https://github.com/scipy/scipy/pull/4806): MAINT: use an informed initial guess for cauchy fit
  - [\#4810](https://github.com/scipy/scipy/pull/4810): PEP8ify codata.py
  - [\#4812](https://github.com/scipy/scipy/pull/4812): BUG: Relaxed strides cleanup in decomp\_update.pyx.in
  - [\#4820](https://github.com/scipy/scipy/pull/4820): BLD: update Bento build for sgemv fix and install cython blas/lapack...
  - [\#4823](https://github.com/scipy/scipy/pull/4823): ENH: scipy.signal - Addition of spectrogram function
  - [\#4827](https://github.com/scipy/scipy/pull/4827): DOC: add csd and coherence to \_\_init\_\_.py
  - [\#4833](https://github.com/scipy/scipy/pull/4833): BLD: fix issue in linalg `*lange` wrappers for g77 builds.
  - [\#4841](https://github.com/scipy/scipy/pull/4841): TST: fix test failures in scipy.special with mingw32 due to test...
  - [\#4842](https://github.com/scipy/scipy/pull/4842): DOC: update site.cfg.example. Mostly taken over from Numpy
  - [\#4845](https://github.com/scipy/scipy/pull/4845): BUG: signal: Make spectrogram's return values order match the...
  - [\#4849](https://github.com/scipy/scipy/pull/4849): DOC:Fix error in ode docstring example
  - [\#4856](https://github.com/scipy/scipy/pull/4856): BUG: fix typo causing memleak

---

0.16.1-notes.md

---

# SciPy 0.16.1 Release Notes

SciPy 0.16.1 is a bug-fix release with no new features compared to 0.16.0.

## Issues closed for 0.16.1

  - [\#5077](https://github.com/scipy/scipy/issues/5077): cKDTree not indexing properly for arrays with too many elements
  - [\#5127](https://github.com/scipy/scipy/issues/5127): Regression in 0.16.0: solve\_banded errors out in patsy test suite
  - [\#5149](https://github.com/scipy/scipy/issues/5149): linalg tests apparently cause python to crash with numpy 1.10.0b1
  - [\#5154](https://github.com/scipy/scipy/issues/5154): 0.16.0 fails to build on OS X; can't find Python.h
  - [\#5173](https://github.com/scipy/scipy/issues/5173): failing stats.histogram test with numpy 1.10
  - [\#5191](https://github.com/scipy/scipy/issues/5191): Scipy 0.16.x - TypeError: \_asarray\_validated() got an unexpected...
  - [\#5195](https://github.com/scipy/scipy/issues/5195): tarballs missing documentation source
  - [\#5363](https://github.com/scipy/scipy/issues/5363): FAIL: test\_orthogonal.test\_j\_roots, test\_orthogonal.test\_js\_roots

## Pull requests for 0.16.1

  - [\#5088](https://github.com/scipy/scipy/pull/5088): BUG: fix logic error in cKDTree.sparse\_distance\_matrix
  - [\#5089](https://github.com/scipy/scipy/pull/5089): BUG: Don't overwrite b in lfilter's FIR path
  - [\#5128](https://github.com/scipy/scipy/pull/5128): BUG: solve\_banded failed when solving 1x1 systems
  - [\#5155](https://github.com/scipy/scipy/pull/5155): BLD: fix missing Python include for Homebrew builds.
  - [\#5192](https://github.com/scipy/scipy/pull/5192): BUG: backport as\_inexact kwarg to \_asarray\_validated
  - [\#5203](https://github.com/scipy/scipy/pull/5203): BUG: fix uninitialized use in lartg 0.16 backport
  - [\#5204](https://github.com/scipy/scipy/pull/5204): BUG: properly return error to fortran from ode\_jacobian\_function...
  - [\#5207](https://github.com/scipy/scipy/pull/5207): TST: Fix TestCtypesQuad failure on Python 3.5 for Windows
  - [\#5352](https://github.com/scipy/scipy/pull/5352): TST: sparse: silence warnings about boolean indexing
  - [\#5355](https://github.com/scipy/scipy/pull/5355): MAINT: backports for 0.16.1 release
  - [\#5356](https://github.com/scipy/scipy/pull/5356): REL: update Paver file to ensure sdist contents are OK for releases.
  - [\#5382](https://github.com/scipy/scipy/pull/5382): 0.16.x backport: MAINT: work around a possible numpy ufunc loop...
  - [\#5393](https://github.com/scipy/scipy/pull/5393): TST:special: bump tolerance levels for test\_j\_roots and test\_js\_roots
  - [\#5417](https://github.com/scipy/scipy/pull/5417): MAINT: stats: move namedtuple creating outside function calls.

---

0.17.0-notes.md

---

# SciPy 0.17.0 Release Notes

<div class="contents">

</div>

SciPy 0.17.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.17.x branch, and on adding new features on the master branch.

This release requires Python 2.6, 2.7 or 3.2-3.5 and NumPy 1.6.2 or greater.

Release highlights:

>   - New functions for linear and nonlinear least squares optimization with constraints: <span class="title-ref">scipy.optimize.lsq\_linear</span> and <span class="title-ref">scipy.optimize.least\_squares</span>
>   - Support for fitting with bounds in <span class="title-ref">scipy.optimize.curve\_fit</span>.
>   - Significant improvements to <span class="title-ref">scipy.stats</span>, providing many functions with better handing of inputs which have NaNs or are empty, improved documentation, and consistent behavior between <span class="title-ref">scipy.stats</span> and <span class="title-ref">scipy.stats.mstats</span>.
>   - Significant performance improvements and new functionality in <span class="title-ref">scipy.spatial.cKDTree</span>.

## New features

### <span class="title-ref">scipy.cluster</span> improvements

A new function <span class="title-ref">scipy.cluster.hierarchy.cut\_tree</span>, which determines a cut tree from a linkage matrix, was added.

### <span class="title-ref">scipy.io</span> improvements

<span class="title-ref">scipy.io.mmwrite</span> gained support for symmetric sparse matrices.

`scipy.io.netcdf` gained support for masking and scaling data based on data attributes.

### <span class="title-ref">scipy.optimize</span> improvements

#### Linear assignment problem solver

<span class="title-ref">scipy.optimize.linear\_sum\_assignment</span> is a new function for solving the linear sum assignment problem. It uses the Hungarian algorithm (Kuhn-Munkres).

#### Least squares optimization

A new function for *nonlinear* least squares optimization with constraints was added: <span class="title-ref">scipy.optimize.least\_squares</span>. It provides several methods: Levenberg-Marquardt for unconstrained problems, and two trust-region methods for constrained ones. Furthermore it provides different loss functions. New trust-region methods also handle sparse Jacobians.

A new function for *linear* least squares optimization with constraints was added: <span class="title-ref">scipy.optimize.lsq\_linear</span>. It provides a trust-region method as well as an implementation of the Bounded-Variable Least-Squares (BVLS) algorithm.

<span class="title-ref">scipy.optimize.curve\_fit</span> now supports fitting with bounds.

### <span class="title-ref">scipy.signal</span> improvements

A `mode` keyword was added to <span class="title-ref">scipy.signal.spectrogram</span>, to let it return other spectrograms than power spectral density.

### <span class="title-ref">scipy.stats</span> improvements

Many functions in <span class="title-ref">scipy.stats</span> have gained a `nan_policy` keyword, which allows specifying how to treat input with NaNs in them: propagate the NaNs, raise an error, or omit the NaNs.

Many functions in <span class="title-ref">scipy.stats</span> have been improved to correctly handle input arrays that are empty or contain infs/nans.

A number of functions with the same name in <span class="title-ref">scipy.stats</span> and <span class="title-ref">scipy.stats.mstats</span> were changed to have matching signature and behavior. See [gh-5474](https://github.com/scipy/scipy/issues/5474) for details.

<span class="title-ref">scipy.stats.binom\_test</span> and <span class="title-ref">scipy.stats.mannwhitneyu</span> gained a keyword `alternative`, which allows specifying the hypothesis to test for. Eventually all hypothesis testing functions will get this keyword.

For methods of many continuous distributions, complex input is now accepted.

Matrix normal distribution has been implemented as <span class="title-ref">scipy.stats.matrix\_normal</span>.

### <span class="title-ref">scipy.sparse</span> improvements

The <span class="title-ref">axis</span> keyword was added to sparse norms, <span class="title-ref">scipy.sparse.linalg.norm</span>.

### <span class="title-ref">scipy.spatial</span> improvements

<span class="title-ref">scipy.spatial.cKDTree</span> was partly rewritten for improved performance and several new features were added to it:

  - the `query_ball_point` method became significantly faster
  - `query` and `query_ball_point` gained an `n_jobs` keyword for parallel execution
  - build and query methods now release the GIL
  - full pickling support
  - support for periodic spaces
  - the `sparse_distance_matrix` method can now return and sparse matrix type

### <span class="title-ref">scipy.interpolate</span> improvements

Out-of-bounds behavior of <span class="title-ref">scipy.interpolate.interp1d</span> has been improved. Use a two-element tuple for the `fill_value` argument to specify separate fill values for input below and above the interpolation range. Linear and nearest interpolation kinds of <span class="title-ref">scipy.interpolate.interp1d</span> support extrapolation via the `fill_value="extrapolate"` keyword.

`fill_value` can also be set to an array-like (or a two-element tuple of array-likes for separate below and above values) so long as it broadcasts properly to the non-interpolated dimensions of an array. This was implicitly supported by previous versions of scipy, but support has now been formalized and gets compatibility-checked before use. For example, a set of `y` values to interpolate with shape `(2, 3, 5)` interpolated along the last axis (2) could accept a `fill_value` array with shape `()` (singleton), `(1,)`, `(2, 1)`, `(1, 3)`, `(3,)`, or `(2, 3)`; or it can be a 2-element tuple to specify separate below and above bounds, where each of the two tuple elements obeys proper broadcasting rules.

### <span class="title-ref">scipy.linalg</span> improvements

The default algorithm for <span class="title-ref">scipy.linalg.leastsq</span> has been changed to use LAPACK's function `*gelsd`. Users wanting to get the previous behavior can use a new keyword `lapack_driver="gelss"` (allowed values are "gelss", "gelsd" and "gelsy").

`scipy.sparse` matrices and linear operators now support the matmul (`@`) operator when available (Python 3.5+). See \[PEP 465\](<https://legacy.python.org/dev/peps/pep-0465/>)

A new function <span class="title-ref">scipy.linalg.ordqz</span>, for QZ decomposition with reordering, has been added.

## Deprecated features

`scipy.stats.histogram` is deprecated in favor of `np.histogram`, which is faster and provides the same functionality.

`scipy.stats.threshold` and `scipy.mstats.threshold` are deprecated in favor of `np.clip`. See issue \#617 for details.

`scipy.stats.ss` is deprecated. This is a support function, not meant to be exposed to the user. Also, the name is unclear. See issue \#663 for details.

`scipy.stats.square_of_sums` is deprecated. This too is a support function not meant to be exposed to the user. See issues \#665 and \#663 for details.

`scipy.stats.f_value`, `scipy.stats.f_value_multivariate`, `scipy.stats.f_value_wilks_lambda`, and `scipy.mstats.f_value_wilks_lambda` are deprecated. These are related to ANOVA, for which `scipy.stats` provides quite limited functionality and these functions are not very useful standalone. See issues \#660 and \#650 for details.

`scipy.stats.chisqprob` is deprecated. This is an alias. `stats.chi2.sf` should be used instead.

`scipy.stats.betai` is deprecated. This is an alias for `special.betainc` which should be used instead.

## Backwards incompatible changes

The functions `stats.trim1` and `stats.trimboth` now make sure the elements trimmed are the lowest and/or highest, depending on the case. Slicing without at least partial sorting was previously done, but didn't make sense for unsorted input.

When `variable_names` is set to an empty list, `scipy.io.loadmat` now correctly returns no values instead of all the contents of the MAT file.

Element-wise multiplication of sparse matrices now returns a sparse result in all cases. Previously, multiplying a sparse matrix with a dense matrix or array would return a dense matrix.

The function `misc.lena` has been removed due to license incompatibility.

The constructor for `sparse.coo_matrix` no longer accepts `(None, (m,n))` to construct an all-zero matrix of shape `(m,n)`. This functionality was deprecated since at least 2007 and was already broken in the previous SciPy release. Use `coo_matrix((m,n))` instead.

The Cython wrappers in `linalg.cython_lapack` for the LAPACK routines `*gegs`, `*gegv`, `*gelsx`, `*geqpf`, `*ggsvd`, `*ggsvp`, `*lahrd`, `*latzm`, `*tzrqf` have been removed since these routines are not present in the new LAPACK 3.6.0 release. With the exception of the routines `*ggsvd` and `*ggsvp`, these were all deprecated in favor of routines that are currently present in our Cython LAPACK wrappers.

Because the LAPACK `*gegv` routines were removed in LAPACK 3.6.0. The corresponding Python wrappers in `scipy.linalg.lapack` are now deprecated and will be removed in a future release. The source files for these routines have been temporarily included as a part of `scipy.linalg` so that SciPy can be built against LAPACK versions that do not provide these deprecated routines.

## Other changes

Html and pdf documentation of development versions of Scipy is now automatically rebuilt after every merged pull request.

<span class="title-ref">scipy.constants</span> is updated to the CODATA 2014 recommended values.

Usage of <span class="title-ref">scipy.fftpack</span> functions within Scipy has been changed in such a way that [PyFFTW](https://hgomersall.github.io/pyFFTW/) can easily replace <span class="title-ref">scipy.fftpack</span> functions (with improved performance). See [gh-5295](https://github.com/scipy/scipy/pull/5295) for details.

The `imread` functions in <span class="title-ref">scipy.misc</span> and <span class="title-ref">scipy.ndimage</span> were unified, for which a `mode` argument was added to <span class="title-ref">scipy.misc.imread</span>. Also, bugs for 1-bit and indexed RGB image formats were fixed.

`runtests.py`, the development script to build and test Scipy, now allows building in parallel with `--parallel`.

## Authors

  - @cel4 +
  - @chemelnucfin +
  - @endolith
  - @mamrehn +
  - @tosh1ki +
  - Joshua L. Adelman +
  - Anne Archibald
  - Hervé Audren +
  - Vincent Barrielle +
  - Bruno Beltran +
  - Sumit Binnani +
  - Joseph Jon Booker
  - Olga Botvinnik +
  - Michael Boyle +
  - Matthew Brett
  - Zaz Brown +
  - Lars Buitinck
  - Pete Bunch +
  - Evgeni Burovski
  - CJ Carey
  - Ien Cheng +
  - Cody +
  - Jaime Fernandez del Rio
  - Ales Erjavec +
  - Abraham Escalante
  - Yves-Rémi Van Eycke +
  - Yu Feng +
  - Eric Firing
  - Francis T. O'Donovan +
  - André Gaul
  - Christoph Gohlke
  - Ralf Gommers
  - Alex Griffing
  - Alexander Grigorievskiy
  - Charles Harris
  - Jörn Hees +
  - Ian Henriksen
  - Derek Homeier +
  - David Menéndez Hurtado
  - Gert-Ludwig Ingold
  - Aakash Jain +
  - Rohit Jamuar +
  - Jan Schlüter
  - Johannes Ballé
  - Luke Zoltan Kelley +
  - Jason King +
  - Andreas Kopecky +
  - Eric Larson
  - Denis Laxalde
  - Antony Lee
  - Gregory R. Lee
  - Josh Levy-Kramer +
  - Sam Lewis +
  - François Magimel +
  - Martín Gaitán +
  - Sam Mason +
  - Andreas Mayer
  - Nikolay Mayorov
  - Damon McDougall +
  - Robert McGibbon
  - Sturla Molden
  - Will Monroe +
  - Eric Moore
  - Maniteja Nandana
  - Vikram Natarajan +
  - Andrew Nelson
  - Marti Nito +
  - Behzad Nouri +
  - Daisuke Oyama +
  - Giorgio Patrini +
  - Fabian Paul +
  - Christoph Paulik +
  - Mad Physicist +
  - Irvin Probst
  - Sebastian Pucilowski +
  - Ted Pudlik +
  - Eric Quintero
  - Yoav Ram +
  - Joscha Reimer +
  - Juha Remes
  - Frederik Rietdijk +
  - Rémy Léone +
  - Christian Sachs +
  - Skipper Seabold
  - Sebastian Skoupý +
  - Alex Seewald +
  - Andreas Sorge +
  - Bernardo Sulzbach +
  - Julian Taylor
  - Louis Tiao +
  - Utkarsh Upadhyay +
  - Jacob Vanderplas
  - Gael Varoquaux +
  - Pauli Virtanen
  - Fredrik Wallner +
  - Stefan van der Walt
  - James Webber +
  - Warren Weckesser
  - Raphael Wettinger +
  - Josh Wilson +
  - Nat Wilson +
  - Peter Yin +

A total of 101 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 0.17.0

  - [\#1923](https://github.com/scipy/scipy/issues/1923): problem with numpy 0's in stats.poisson.rvs (Trac \#1398)
  - [\#2138](https://github.com/scipy/scipy/issues/2138): scipy.misc.imread segfaults on 1 bit png (Trac \#1613)
  - [\#2237](https://github.com/scipy/scipy/issues/2237): distributions do not accept complex arguments (Trac \#1718)
  - [\#2282](https://github.com/scipy/scipy/issues/2282): scipy.special.hyp1f1(0.5, 1.5, -1000) fails (Trac \#1763)
  - [\#2618](https://github.com/scipy/scipy/issues/2618): poisson.pmf returns NaN if mu is 0
  - [\#2957](https://github.com/scipy/scipy/issues/2957): hyp1f1 precision issue
  - [\#2997](https://github.com/scipy/scipy/issues/2997): FAIL: test\_qhull.TestUtilities.test\_more\_barycentric\_transforms
  - [\#3129](https://github.com/scipy/scipy/issues/3129): No way to set ranges for fitting parameters in Optimize functions
  - [\#3191](https://github.com/scipy/scipy/issues/3191): interp1d should contain a fill\_value\_below and a fill\_value\_above...
  - [\#3453](https://github.com/scipy/scipy/issues/3453): PchipInterpolator sets slopes at edges differently than Matlab's...
  - [\#4106](https://github.com/scipy/scipy/issues/4106): ndimage.\_ni\_support.\_normalize\_sequence() fails with numpy.int64
  - [\#4118](https://github.com/scipy/scipy/issues/4118): <span class="title-ref">scipy.integrate.ode.set\_solout</span> called after <span class="title-ref">scipy.integrate.ode.set\_initial\_value</span> fails silently
  - [\#4233](https://github.com/scipy/scipy/issues/4233): 1D scipy.interpolate.griddata using method=nearest produces nans...
  - [\#4375](https://github.com/scipy/scipy/issues/4375): All tests fail due to bad file permissions
  - [\#4580](https://github.com/scipy/scipy/issues/4580): scipy.ndimage.filters.convolve documenation is incorrect
  - [\#4627](https://github.com/scipy/scipy/issues/4627): logsumexp with sign indicator - enable calculation with negative...
  - [\#4702](https://github.com/scipy/scipy/issues/4702): logsumexp with zero scaling factor
  - [\#4834](https://github.com/scipy/scipy/issues/4834): gammainc should return 1.0 instead of NaN for infinite x
  - [\#4838](https://github.com/scipy/scipy/issues/4838): enh: exprel special function
  - [\#4862](https://github.com/scipy/scipy/issues/4862): the scipy.special.boxcox function is inaccurate for denormal...
  - [\#4887](https://github.com/scipy/scipy/issues/4887): Spherical harmonic incongruences
  - [\#4895](https://github.com/scipy/scipy/issues/4895): some scipy ufuncs have inconsistent output dtypes?
  - [\#4923](https://github.com/scipy/scipy/issues/4923): logm does not aggressively convert complex outputs to float
  - [\#4932](https://github.com/scipy/scipy/issues/4932): BUG: stats: The <span class="title-ref">fit</span> method of the distributions silently ignores...
  - [\#4956](https://github.com/scipy/scipy/issues/4956): Documentation error in <span class="title-ref">scipy.special.bi\_zeros</span>
  - [\#4957](https://github.com/scipy/scipy/issues/4957): Docstring for <span class="title-ref">pbvv\_seq</span> is wrong
  - [\#4967](https://github.com/scipy/scipy/issues/4967): block\_diag should look at dtypes of all arguments, not only the...
  - [\#5037](https://github.com/scipy/scipy/issues/5037): scipy.optimize.minimize error messages are printed to stdout...
  - [\#5039](https://github.com/scipy/scipy/issues/5039): Cubic interpolation: On entry to DGESDD parameter number 12 had...
  - [\#5163](https://github.com/scipy/scipy/issues/5163): Base case example of Hierarchical Clustering (offer)
  - [\#5181](https://github.com/scipy/scipy/issues/5181): BUG: stats.genextreme.entropy should use the explicit formula
  - [\#5184](https://github.com/scipy/scipy/issues/5184): Some? wheels don't express a numpy dependency
  - [\#5197](https://github.com/scipy/scipy/issues/5197): mstats: test\_kurtosis fails (ULP max is 2)
  - [\#5260](https://github.com/scipy/scipy/issues/5260): Typo causing an error in splrep
  - [\#5263](https://github.com/scipy/scipy/issues/5263): Default epsilon in rbf.py fails for colinear points
  - [\#5276](https://github.com/scipy/scipy/issues/5276): Reading empty (no data) arff file fails
  - [\#5280](https://github.com/scipy/scipy/issues/5280): 1d scipy.signal.convolve much slower than numpy.convolve
  - [\#5326](https://github.com/scipy/scipy/issues/5326): Implementation error in scipy.interpolate.PchipInterpolator
  - [\#5370](https://github.com/scipy/scipy/issues/5370): Test issue with test\_quadpack and libm.so as a linker script
  - [\#5426](https://github.com/scipy/scipy/issues/5426): ERROR: test\_stats.test\_chisquare\_masked\_arrays
  - [\#5427](https://github.com/scipy/scipy/issues/5427): Automate installing correct numpy versions in numpy-vendor image
  - [\#5430](https://github.com/scipy/scipy/issues/5430): Python3 : Numpy scalar types "not iterable"; specific instance...
  - [\#5450](https://github.com/scipy/scipy/issues/5450): BUG: spatial.ConvexHull triggers a seg. fault when given nans.
  - [\#5478](https://github.com/scipy/scipy/issues/5478): clarify the relation between matrix normal distribution and <span class="title-ref">multivariate\_normal</span>
  - [\#5539](https://github.com/scipy/scipy/issues/5539): lstsq related test failures on windows binaries from numpy-vendor
  - [\#5560](https://github.com/scipy/scipy/issues/5560): doc: scipy.stats.burr pdf issue
  - [\#5571](https://github.com/scipy/scipy/issues/5571): lstsq test failure after lapack\_driver change
  - [\#5577](https://github.com/scipy/scipy/issues/5577): ordqz segfault on Python 3.4 in Wine
  - [\#5578](https://github.com/scipy/scipy/issues/5578): scipy.linalg test failures on python 3 in Wine
  - [\#5607](https://github.com/scipy/scipy/issues/5607): Overloaded ‘isnan(double&)’ is ambiguous when compiling with...
  - [\#5629](https://github.com/scipy/scipy/issues/5629): Test for lstsq randomly failed
  - [\#5630](https://github.com/scipy/scipy/issues/5630): memory leak with scipy 0.16 spatial cKDEtree
  - [\#5689](https://github.com/scipy/scipy/issues/5689): isnan errors compiling scipy/special/Faddeeva.cc with clang++
  - [\#5694](https://github.com/scipy/scipy/issues/5694): fftpack test failure in test\_import
  - [\#5719](https://github.com/scipy/scipy/issues/5719): curve\_fit(method\!="lm") ignores initial guess

### Pull requests for 0.17.0

  - [\#3022](https://github.com/scipy/scipy/pull/3022): hyp1f1: better handling of large negative arguments
  - [\#3107](https://github.com/scipy/scipy/pull/3107): ENH: Add ordered QZ decomposition
  - [\#4390](https://github.com/scipy/scipy/pull/4390): ENH: Allow axis and keepdims arguments to be passed to scipy.linalg.norm.
  - [\#4671](https://github.com/scipy/scipy/pull/4671): ENH: add axis to sparse norms
  - [\#4796](https://github.com/scipy/scipy/pull/4796): ENH: Add cut tree function to scipy.cluster.hierarchy
  - [\#4809](https://github.com/scipy/scipy/pull/4809): MAINT: cauchy moments are undefined
  - [\#4821](https://github.com/scipy/scipy/pull/4821): ENH: stats: make distribution instances picklable
  - [\#4839](https://github.com/scipy/scipy/pull/4839): ENH: Add scipy.special.exprel relative error exponential ufunc
  - [\#4859](https://github.com/scipy/scipy/pull/4859): Logsumexp fixes - allows sign flags and b==0
  - [\#4865](https://github.com/scipy/scipy/pull/4865): BUG: scipy.io.mmio.write: error with big indices and low precision
  - [\#4869](https://github.com/scipy/scipy/pull/4869): add as\_inexact option to \_lib.\_util.\_asarray\_validated
  - [\#4884](https://github.com/scipy/scipy/pull/4884): ENH: Finite difference approximation of Jacobian matrix
  - [\#4890](https://github.com/scipy/scipy/pull/4890): ENH: Port cKDTree query methods to C++, allow pickling on Python...
  - [\#4892](https://github.com/scipy/scipy/pull/4892): how much doctesting is too much?
  - [\#4896](https://github.com/scipy/scipy/pull/4896): MAINT: work around a possible numpy ufunc loop selection bug
  - [\#4898](https://github.com/scipy/scipy/pull/4898): MAINT: A bit of pyflakes-driven cleanup.
  - [\#4899](https://github.com/scipy/scipy/pull/4899): ENH: add 'alternative' keyword to hypothesis tests in stats
  - [\#4903](https://github.com/scipy/scipy/pull/4903): BENCH: Benchmarks for interpolate module
  - [\#4905](https://github.com/scipy/scipy/pull/4905): MAINT: prepend underscore to mask\_to\_limits; delete masked\_var.
  - [\#4906](https://github.com/scipy/scipy/pull/4906): MAINT: Benchmarks for optimize.leastsq
  - [\#4910](https://github.com/scipy/scipy/pull/4910): WIP: Trimmed statistics functions have inconsistent API.
  - [\#4912](https://github.com/scipy/scipy/pull/4912): MAINT: fix typo in stats tutorial. Closes gh-4911.
  - [\#4914](https://github.com/scipy/scipy/pull/4914): DEP: deprecate <span class="title-ref">scipy.stats.ss</span> and <span class="title-ref">scipy.stats.square\_of\_sums</span>.
  - [\#4924](https://github.com/scipy/scipy/pull/4924): MAINT: if the imaginary part of logm of a real matrix is small,...
  - [\#4930](https://github.com/scipy/scipy/pull/4930): BENCH: Benchmarks for signal module
  - [\#4941](https://github.com/scipy/scipy/pull/4941): ENH: update <span class="title-ref">find\_repeats</span>.
  - [\#4942](https://github.com/scipy/scipy/pull/4942): MAINT: use np.float64\_t instead of np.float\_t in cKDTree
  - [\#4944](https://github.com/scipy/scipy/pull/4944): BUG: integer overflow in correlate\_nd
  - [\#4951](https://github.com/scipy/scipy/pull/4951): do not ignore invalid kwargs in distributions fit method
  - [\#4958](https://github.com/scipy/scipy/pull/4958): Add some detail to docstrings for special functions
  - [\#4961](https://github.com/scipy/scipy/pull/4961): ENH: stats.describe: add bias kw and empty array handling
  - [\#4963](https://github.com/scipy/scipy/pull/4963): ENH: scipy.sparse.coo.coo\_matrix.\_\_init\_\_: less memory needed
  - [\#4968](https://github.com/scipy/scipy/pull/4968): DEP: deprecate `stats.f_value*` and `mstats.f_value*` functions.
  - [\#4969](https://github.com/scipy/scipy/pull/4969): ENH: review <span class="title-ref">stats.relfreq</span> and <span class="title-ref">stats.cumfreq</span>; fixes to <span class="title-ref">stats.histogram</span>
  - [\#4971](https://github.com/scipy/scipy/pull/4971): Extend github source links to line ranges
  - [\#4972](https://github.com/scipy/scipy/pull/4972): MAINT: impove the error message in validate\_runtests\_log
  - [\#4976](https://github.com/scipy/scipy/pull/4976): DEP: deprecate <span class="title-ref">scipy.stats.threshold</span>
  - [\#4977](https://github.com/scipy/scipy/pull/4977): MAINT: more careful dtype treatment in block diagonal matrix...
  - [\#4979](https://github.com/scipy/scipy/pull/4979): ENH: distributions, complex arguments
  - [\#4984](https://github.com/scipy/scipy/pull/4984): clarify dirichlet distribution error handling
  - [\#4992](https://github.com/scipy/scipy/pull/4992): ENH: <span class="title-ref">stats.fligner</span> and <span class="title-ref">stats.bartlett</span> empty input handling.
  - [\#4996](https://github.com/scipy/scipy/pull/4996): DOC: fix stats.spearmanr docs
  - [\#4997](https://github.com/scipy/scipy/pull/4997): Fix up boxcox for underflow / loss of precision
  - [\#4998](https://github.com/scipy/scipy/pull/4998): DOC: improved documentation for <span class="title-ref">stats.ppcc\_max</span>
  - [\#5000](https://github.com/scipy/scipy/pull/5000): ENH: added empty input handling <span class="title-ref">scipy.moment</span>; doc enhancements
  - [\#5003](https://github.com/scipy/scipy/pull/5003): ENH: improves rankdata algorithm
  - [\#5005](https://github.com/scipy/scipy/pull/5005): scipy.stats: numerical stability improvement
  - [\#5007](https://github.com/scipy/scipy/pull/5007): ENH: nan handling in functions that use <span class="title-ref">stats.\_chk\_asarray</span>
  - [\#5009](https://github.com/scipy/scipy/pull/5009): remove coveralls.io
  - [\#5010](https://github.com/scipy/scipy/pull/5010): Hypergeometric distribution log survival function
  - [\#5014](https://github.com/scipy/scipy/pull/5014): Patch to compute the volume and area of convex hulls
  - [\#5015](https://github.com/scipy/scipy/pull/5015): DOC: Fix mistaken variable name in sawtooth
  - [\#5016](https://github.com/scipy/scipy/pull/5016): DOC: resample example
  - [\#5017](https://github.com/scipy/scipy/pull/5017): DEP: deprecate <span class="title-ref">stats.betai</span> and <span class="title-ref">stats.chisqprob</span>
  - [\#5018](https://github.com/scipy/scipy/pull/5018): ENH: Add test on random inpu to volume computations
  - [\#5026](https://github.com/scipy/scipy/pull/5026): BUG: Fix return dtype of lil\_matrix.getnnz(axis=0)
  - [\#5030](https://github.com/scipy/scipy/pull/5030): DOC: resample slow for prime output too
  - [\#5033](https://github.com/scipy/scipy/pull/5033): MAINT: integrate, special: remove unused R1MACH and Makefile
  - [\#5034](https://github.com/scipy/scipy/pull/5034): MAINT: signal: lift max\_len\_seq validation out of Cython
  - [\#5035](https://github.com/scipy/scipy/pull/5035): DOC/MAINT: refguide / doctest drudgery
  - [\#5041](https://github.com/scipy/scipy/pull/5041): BUG: fixing some small memory leaks detected by cppcheck
  - [\#5044](https://github.com/scipy/scipy/pull/5044): \[GSoC\] ENH: New least-squares algorithms
  - [\#5050](https://github.com/scipy/scipy/pull/5050): MAINT: C fixes, trimmed a lot of dead code from Cephes
  - [\#5057](https://github.com/scipy/scipy/pull/5057): ENH: sparse: avoid densifying on sparse/dense elementwise mult
  - [\#5058](https://github.com/scipy/scipy/pull/5058): TST: stats: add a sample distribution to the test loop
  - [\#5061](https://github.com/scipy/scipy/pull/5061): ENH: spatial: faster 2D Voronoi and Convex Hull plotting
  - [\#5065](https://github.com/scipy/scipy/pull/5065): TST: improve test coverage for <span class="title-ref">stats.mvsdist</span> and <span class="title-ref">stats.bayes\_mvs</span>
  - [\#5066](https://github.com/scipy/scipy/pull/5066): MAINT: fitpack: remove a noop
  - [\#5067](https://github.com/scipy/scipy/pull/5067): ENH: empty and nan input handling for <span class="title-ref">stats.kstat</span> and <span class="title-ref">stats.kstatvar</span>
  - [\#5071](https://github.com/scipy/scipy/pull/5071): DOC: optimize: Correct paper reference, add doi
  - [\#5072](https://github.com/scipy/scipy/pull/5072): MAINT: scipy.sparse cleanup
  - [\#5073](https://github.com/scipy/scipy/pull/5073): DOC: special: Add an example showing the relation of diric to...
  - [\#5075](https://github.com/scipy/scipy/pull/5075): DOC: clarified parameterization of stats.lognorm
  - [\#5076](https://github.com/scipy/scipy/pull/5076): use int, float, bool instead of np.int, np.float, np.bool
  - [\#5078](https://github.com/scipy/scipy/pull/5078): DOC: Rename fftpack docs to README
  - [\#5081](https://github.com/scipy/scipy/pull/5081): BUG: Correct handling of scalar 'b' in lsmr and lsqr
  - [\#5082](https://github.com/scipy/scipy/pull/5082): loadmat variable\_names: don't confuse \[\] and None.
  - [\#5083](https://github.com/scipy/scipy/pull/5083): Fix integrate.fixed\_quad docstring to indicate None return value
  - [\#5086](https://github.com/scipy/scipy/pull/5086): Use solve() instead of inv() for gaussian\_kde
  - [\#5090](https://github.com/scipy/scipy/pull/5090): MAINT: stats: add explicit \_sf, \_isf to gengamma distribution
  - [\#5094](https://github.com/scipy/scipy/pull/5094): ENH: scipy.interpolate.NearestNDInterpolator: cKDTree configurable
  - [\#5098](https://github.com/scipy/scipy/pull/5098): DOC: special: fix typesetting in `*_roots quadrature` functions
  - [\#5099](https://github.com/scipy/scipy/pull/5099): DOC: make the docstring of stats.moment raw
  - [\#5104](https://github.com/scipy/scipy/pull/5104): DOC/ENH fixes and micro-optimizations for scipy.linalg
  - [\#5105](https://github.com/scipy/scipy/pull/5105): enh: made l-bfgs-b parameter for the maximum number of line search...
  - [\#5106](https://github.com/scipy/scipy/pull/5106): TST: add NIST test cases to <span class="title-ref">stats.f\_oneway</span>
  - [\#5110](https://github.com/scipy/scipy/pull/5110): \[GSoC\]: Bounded linear least squares
  - [\#5111](https://github.com/scipy/scipy/pull/5111): MAINT: special: Cephes cleanup
  - [\#5118](https://github.com/scipy/scipy/pull/5118): BUG: FIR path failed if len(x) \< len(b) in lfilter.
  - [\#5124](https://github.com/scipy/scipy/pull/5124): ENH: move the filliben approximation to a publicly visible function
  - [\#5126](https://github.com/scipy/scipy/pull/5126): StatisticsCleanup: <span class="title-ref">stats.kruskal</span> review
  - [\#5130](https://github.com/scipy/scipy/pull/5130): DOC: update PyPi trove classifiers. Beta -\> Stable. Add license.
  - [\#5131](https://github.com/scipy/scipy/pull/5131): DOC: differential\_evolution, improve docstring for mutation and...
  - [\#5132](https://github.com/scipy/scipy/pull/5132): MAINT: differential\_evolution improve init\_population\_lhs comments...
  - [\#5133](https://github.com/scipy/scipy/pull/5133): MRG: rebased mmio refactoring
  - [\#5135](https://github.com/scipy/scipy/pull/5135): MAINT: <span class="title-ref">stats.mstats</span> consistency with <span class="title-ref">stats.stats</span>
  - [\#5139](https://github.com/scipy/scipy/pull/5139): TST: linalg: add a smoke test for gh-5039
  - [\#5140](https://github.com/scipy/scipy/pull/5140): EHN: Update constants.codata to CODATA 2014
  - [\#5145](https://github.com/scipy/scipy/pull/5145): added ValueError to docstring as possible error raised
  - [\#5146](https://github.com/scipy/scipy/pull/5146): MAINT: Improve implementation details and doc in <span class="title-ref">stats.shapiro</span>
  - [\#5147](https://github.com/scipy/scipy/pull/5147): \[GSoC\] ENH: Upgrades to curve\_fit
  - [\#5150](https://github.com/scipy/scipy/pull/5150): Fix misleading wavelets/cwt example
  - [\#5152](https://github.com/scipy/scipy/pull/5152): BUG: cluster.hierarchy.dendrogram: missing font size doesn't...
  - [\#5153](https://github.com/scipy/scipy/pull/5153): add keywords to control the summation in discrete distributions...
  - [\#5156](https://github.com/scipy/scipy/pull/5156): DOC: added comments on algorithms used in Legendre function
  - [\#5158](https://github.com/scipy/scipy/pull/5158): ENH: optimize: add the Hungarian algorithm
  - [\#5162](https://github.com/scipy/scipy/pull/5162): FIX: Remove lena
  - [\#5164](https://github.com/scipy/scipy/pull/5164): MAINT: fix cluster.hierarchy.dendrogram issues and docs
  - [\#5166](https://github.com/scipy/scipy/pull/5166): MAINT: changed <span class="title-ref">stats.pointbiserialr</span> to delegate to <span class="title-ref">stats.pearsonr</span>
  - [\#5167](https://github.com/scipy/scipy/pull/5167): ENH: add nan\_policy to <span class="title-ref">stats.kendalltau</span>.
  - [\#5168](https://github.com/scipy/scipy/pull/5168): TST: added nist test case (Norris) to <span class="title-ref">stats.linregress</span>.
  - [\#5169](https://github.com/scipy/scipy/pull/5169): update lpmv docstring
  - [\#5171](https://github.com/scipy/scipy/pull/5171): Clarify metric parameter in linkage docstring
  - [\#5172](https://github.com/scipy/scipy/pull/5172): ENH: add mode keyword to signal.spectrogram
  - [\#5177](https://github.com/scipy/scipy/pull/5177): DOC: graphical example for KDTree.query\_ball\_point
  - [\#5179](https://github.com/scipy/scipy/pull/5179): MAINT: stats: tweak the formula for ncx2.pdf
  - [\#5188](https://github.com/scipy/scipy/pull/5188): MAINT: linalg: A bit of clean up.
  - [\#5189](https://github.com/scipy/scipy/pull/5189): BUG: stats: Use the explicit formula in stats.genextreme.entropy
  - [\#5193](https://github.com/scipy/scipy/pull/5193): BUG: fix uninitialized use in lartg
  - [\#5194](https://github.com/scipy/scipy/pull/5194): BUG: properly return error to fortran from ode\_jacobian\_function
  - [\#5198](https://github.com/scipy/scipy/pull/5198): TST: Fix TestCtypesQuad failure on Python 3.5 for Windows
  - [\#5201](https://github.com/scipy/scipy/pull/5201): allow extrapolation in interp1d
  - [\#5209](https://github.com/scipy/scipy/pull/5209): MAINT: Change complex parameter to boolean in [Y]()()
  - [\#5213](https://github.com/scipy/scipy/pull/5213): BUG: sparse: fix logical comparison dtype conflicts
  - [\#5216](https://github.com/scipy/scipy/pull/5216): BUG: sparse: fixing unbound local error
  - [\#5218](https://github.com/scipy/scipy/pull/5218): DOC and BUG: Bessel function docstring improvements, fix array\_like,...
  - [\#5222](https://github.com/scipy/scipy/pull/5222): MAINT: sparse: fix COO ctor
  - [\#5224](https://github.com/scipy/scipy/pull/5224): DOC: optimize: type of OptimizeResult.hess\_inv varies
  - [\#5228](https://github.com/scipy/scipy/pull/5228): ENH: Add maskandscale support to netcdf; based on pupynere and...
  - [\#5229](https://github.com/scipy/scipy/pull/5229): DOC: sparse.linalg.svds doc typo fixed
  - [\#5234](https://github.com/scipy/scipy/pull/5234): MAINT: sparse: simplify COO ctor
  - [\#5235](https://github.com/scipy/scipy/pull/5235): MAINT: sparse: warn on todia() with many diagonals
  - [\#5236](https://github.com/scipy/scipy/pull/5236): MAINT: ndimage: simplify thread handling/recursion + constness
  - [\#5239](https://github.com/scipy/scipy/pull/5239): BUG: integrate: Fixed issue 4118
  - [\#5241](https://github.com/scipy/scipy/pull/5241): qr\_insert fixes, closes \#5149
  - [\#5246](https://github.com/scipy/scipy/pull/5246): Doctest tutorial files
  - [\#5247](https://github.com/scipy/scipy/pull/5247): DOC: optimize: typo/import fix in linear\_sum\_assignment
  - [\#5248](https://github.com/scipy/scipy/pull/5248): remove inspect.getargspec and test python 3.5 on Travis CI
  - [\#5250](https://github.com/scipy/scipy/pull/5250): BUG: Fix sparse multiply by single-element zero
  - [\#5261](https://github.com/scipy/scipy/pull/5261): Fix bug causing a TypeError in splrep when a runtime warning...
  - [\#5262](https://github.com/scipy/scipy/pull/5262): Follow up to 4489 (Addition LAPACK routines in linalg.lstsq)
  - [\#5264](https://github.com/scipy/scipy/pull/5264): ignore zero-length edges for default epsilon
  - [\#5269](https://github.com/scipy/scipy/pull/5269): DOC: Typos and spell-checking
  - [\#5272](https://github.com/scipy/scipy/pull/5272): MAINT: signal: Convert array syntax to memoryviews
  - [\#5273](https://github.com/scipy/scipy/pull/5273): DOC: raw strings for docstrings with math
  - [\#5274](https://github.com/scipy/scipy/pull/5274): MAINT: sparse: update cython code for MST
  - [\#5278](https://github.com/scipy/scipy/pull/5278): BUG: io: Stop guessing the data delimiter in ARFF files.
  - [\#5289](https://github.com/scipy/scipy/pull/5289): BUG: misc: Fix the Pillow work-around for 1-bit images.
  - [\#5291](https://github.com/scipy/scipy/pull/5291): ENH: call np.correlate for 1d in scipy.signal.correlate
  - [\#5294](https://github.com/scipy/scipy/pull/5294): DOC: special: Remove a potentially misleading example from the...
  - [\#5295](https://github.com/scipy/scipy/pull/5295): Simplify replacement of fftpack by pyfftw
  - [\#5296](https://github.com/scipy/scipy/pull/5296): ENH: Add matrix normal distribution to stats
  - [\#5297](https://github.com/scipy/scipy/pull/5297): Fixed leaf\_rotation and leaf\_font\_size in Python 3
  - [\#5303](https://github.com/scipy/scipy/pull/5303): MAINT: stats: rewrite find\_repeats
  - [\#5307](https://github.com/scipy/scipy/pull/5307): MAINT: stats: remove unused Fortran routine
  - [\#5313](https://github.com/scipy/scipy/pull/5313): BUG: sparse: fix diags for nonsquare matrices
  - [\#5315](https://github.com/scipy/scipy/pull/5315): MAINT: special: Cephes cleanup
  - [\#5316](https://github.com/scipy/scipy/pull/5316): fix input check for sparse.linalg.svds
  - [\#5319](https://github.com/scipy/scipy/pull/5319): MAINT: Cython code maintenance
  - [\#5328](https://github.com/scipy/scipy/pull/5328): BUG: Fix place\_poles return values
  - [\#5329](https://github.com/scipy/scipy/pull/5329): avoid a spurious divide-by-zero in Student t stats
  - [\#5334](https://github.com/scipy/scipy/pull/5334): MAINT: integrate: miscellaneous cleanup
  - [\#5340](https://github.com/scipy/scipy/pull/5340): MAINT: Printing Error Msg to STDERR and Removing iterate.dat
  - [\#5347](https://github.com/scipy/scipy/pull/5347): ENH: add Py3.5-style matmul operator (e.g. A @ B) to sparse linear...
  - [\#5350](https://github.com/scipy/scipy/pull/5350): FIX error, when reading 32-bit float wav files
  - [\#5351](https://github.com/scipy/scipy/pull/5351): refactor the PCHIP interpolant's algorithm
  - [\#5354](https://github.com/scipy/scipy/pull/5354): MAINT: construct csr and csc matrices from integer lists
  - [\#5359](https://github.com/scipy/scipy/pull/5359): add a fast path to interp1d
  - [\#5364](https://github.com/scipy/scipy/pull/5364): Add two fill\_values to interp1d.
  - [\#5365](https://github.com/scipy/scipy/pull/5365): ABCD docstrings
  - [\#5366](https://github.com/scipy/scipy/pull/5366): Fixed typo in the documentation for scipy.signal.cwt() per \#5290.
  - [\#5367](https://github.com/scipy/scipy/pull/5367): DOC updated scipy.spatial.Delaunay example
  - [\#5368](https://github.com/scipy/scipy/pull/5368): ENH: Do not create a throwaway class at every function call
  - [\#5372](https://github.com/scipy/scipy/pull/5372): DOC: spectral: fix reference formatting
  - [\#5375](https://github.com/scipy/scipy/pull/5375): PEP8 amendments to ffpack\_basic.py
  - [\#5377](https://github.com/scipy/scipy/pull/5377): BUG: integrate: builtin name no longer shadowed
  - [\#5381](https://github.com/scipy/scipy/pull/5381): PEP8ified fftpack\_pseudo\_diffs.py
  - [\#5385](https://github.com/scipy/scipy/pull/5385): BLD: fix Bento build for changes to optimize and spatial
  - [\#5386](https://github.com/scipy/scipy/pull/5386): STY: PEP8 amendments to interpolate.py
  - [\#5387](https://github.com/scipy/scipy/pull/5387): DEP: deprecate stats.histogram
  - [\#5388](https://github.com/scipy/scipy/pull/5388): REL: add "make upload" command to doc/Makefile.
  - [\#5389](https://github.com/scipy/scipy/pull/5389): DOC: updated origin param of scipy.ndimage.filters.convolve
  - [\#5395](https://github.com/scipy/scipy/pull/5395): BUG: special: fix a number of edge cases related to <span class="title-ref">x = np.inf</span>.
  - [\#5398](https://github.com/scipy/scipy/pull/5398): MAINT: stats: avoid spurious warnings in lognorm.pdf(0, s)
  - [\#5407](https://github.com/scipy/scipy/pull/5407): ENH: stats: Handle mu=0 in stats.poisson
  - [\#5409](https://github.com/scipy/scipy/pull/5409): Fix the behavior of discrete distributions at the right-hand...
  - [\#5412](https://github.com/scipy/scipy/pull/5412): TST: stats: skip a test to avoid a spurious log(0) warning
  - [\#5413](https://github.com/scipy/scipy/pull/5413): BUG: linalg: work around LAPACK single-precision lwork computation...
  - [\#5414](https://github.com/scipy/scipy/pull/5414): MAINT: stats: move creation of namedtuples outside of function...
  - [\#5415](https://github.com/scipy/scipy/pull/5415): DOC: fix up sections in ToC in the pdf reference guide
  - [\#5416](https://github.com/scipy/scipy/pull/5416): TST: fix issue with a ctypes test for integrate on Fedora.
  - [\#5418](https://github.com/scipy/scipy/pull/5418): DOC: fix bugs in signal.TransferFunction docstring. Closes gh-5287.
  - [\#5419](https://github.com/scipy/scipy/pull/5419): MAINT: sparse: fix usage of NotImplementedError
  - [\#5420](https://github.com/scipy/scipy/pull/5420): Raise proper error if maxiter \< 1
  - [\#5422](https://github.com/scipy/scipy/pull/5422): DOC: changed documentation of brent to be consistent with bracket
  - [\#5444](https://github.com/scipy/scipy/pull/5444): BUG: gaussian\_filter, BPoly.from\_derivatives fail on numpy int...
  - [\#5445](https://github.com/scipy/scipy/pull/5445): MAINT: stats: fix incorrect deprecation warnings and test noise
  - [\#5446](https://github.com/scipy/scipy/pull/5446): DOC: add note about PyFFTW in fftpack tutorial.
  - [\#5459](https://github.com/scipy/scipy/pull/5459): DOC: integrate: Some improvements to the differential equation...
  - [\#5465](https://github.com/scipy/scipy/pull/5465): BUG: Relax mstats kurtosis test tolerance by a few ulp
  - [\#5471](https://github.com/scipy/scipy/pull/5471): ConvexHull should raise ValueError for NaNs.
  - [\#5473](https://github.com/scipy/scipy/pull/5473): MAINT: update decorators.py module to version 4.0.5
  - [\#5476](https://github.com/scipy/scipy/pull/5476): BUG: imsave searches for wrong channel axis if image has 3 or...
  - [\#5477](https://github.com/scipy/scipy/pull/5477): BLD: add numpy to setup/install\_requires for OS X wheels
  - [\#5479](https://github.com/scipy/scipy/pull/5479): ENH: return Jacobian/Hessian from BasinHopping
  - [\#5484](https://github.com/scipy/scipy/pull/5484): BUG: fix ttest zero division handling
  - [\#5486](https://github.com/scipy/scipy/pull/5486): Fix crash on kmeans2
  - [\#5491](https://github.com/scipy/scipy/pull/5491): MAINT: Expose parallel build option to runtests.py
  - [\#5494](https://github.com/scipy/scipy/pull/5494): Sort OptimizeResult.\_\_repr\_\_ by key
  - [\#5496](https://github.com/scipy/scipy/pull/5496): DOC: update the author name mapping
  - [\#5497](https://github.com/scipy/scipy/pull/5497): Enhancement to binned\_statistic: option to unraveled returned...
  - [\#5498](https://github.com/scipy/scipy/pull/5498): BUG: sparse: fix a bug in sparsetools input dtype resolution
  - [\#5500](https://github.com/scipy/scipy/pull/5500): DOC: detect unprintable characters in docstrings
  - [\#5505](https://github.com/scipy/scipy/pull/5505): BUG: misc: Ensure fromimage converts mode 'P' to 'RGB' or 'RGBA'.
  - [\#5514](https://github.com/scipy/scipy/pull/5514): DOC: further update the release notes
  - [\#5515](https://github.com/scipy/scipy/pull/5515): ENH: optionally disable fixed-point acceleration
  - [\#5517](https://github.com/scipy/scipy/pull/5517): DOC: Improvements and additions to the matrix\_normal doc
  - [\#5518](https://github.com/scipy/scipy/pull/5518): Remove wrappers for LAPACK deprecated routines
  - [\#5521](https://github.com/scipy/scipy/pull/5521): TST: skip a linalg.orth memory test on 32-bit platforms.
  - [\#5523](https://github.com/scipy/scipy/pull/5523): DOC: change a few floats to integers in docstring examples
  - [\#5524](https://github.com/scipy/scipy/pull/5524): DOC: more updates to 0.17.0 release notes.
  - [\#5525](https://github.com/scipy/scipy/pull/5525): Fix to minor typo in documentation for scipy.integrate.ode
  - [\#5527](https://github.com/scipy/scipy/pull/5527): TST: bump arccosh tolerance to allow for inaccurate numpy or...
  - [\#5535](https://github.com/scipy/scipy/pull/5535): DOC: signal: minor clarification to docstring of TransferFunction.
  - [\#5538](https://github.com/scipy/scipy/pull/5538): DOC: signal: fix find\_peaks\_cwt documentation
  - [\#5545](https://github.com/scipy/scipy/pull/5545): MAINT: Fix typo in linalg/basic.py
  - [\#5547](https://github.com/scipy/scipy/pull/5547): TST: mark TestEig.test\_singular as knownfail in master.
  - [\#5550](https://github.com/scipy/scipy/pull/5550): MAINT: work around lstsq driver selection issue
  - [\#5556](https://github.com/scipy/scipy/pull/5556): BUG: Fixed broken dogbox trust-region radius update
  - [\#5561](https://github.com/scipy/scipy/pull/5561): BUG: eliminate warnings, exception (on Win) in test\_maskandscale;...
  - [\#5567](https://github.com/scipy/scipy/pull/5567): TST: a few cleanups in the test suite; run\_module\_suite and clearer...
  - [\#5568](https://github.com/scipy/scipy/pull/5568): MAINT: simplify poisson's \_argcheck
  - [\#5569](https://github.com/scipy/scipy/pull/5569): TST: bump GMean test tolerance to make it pass on Wine
  - [\#5572](https://github.com/scipy/scipy/pull/5572): TST: lstsq: bump test tolerance for TravisCI
  - [\#5573](https://github.com/scipy/scipy/pull/5573): TST: remove use of np.fromfile from cluster.vq tests
  - [\#5576](https://github.com/scipy/scipy/pull/5576): Lapack deprecations
  - [\#5579](https://github.com/scipy/scipy/pull/5579): TST: skip tests of linalg.norm axis keyword on numpy \<= 1.7.x
  - [\#5582](https://github.com/scipy/scipy/pull/5582): Clarify language of survival function documentation
  - [\#5583](https://github.com/scipy/scipy/pull/5583): MAINT: stats/tests: A bit of clean up.
  - [\#5588](https://github.com/scipy/scipy/pull/5588): DOC: stats: Add a note that stats.burr is the Type III Burr distribution.
  - [\#5595](https://github.com/scipy/scipy/pull/5595): TST: fix test\_lamch failures on Python 3
  - [\#5600](https://github.com/scipy/scipy/pull/5600): MAINT: Ignore spatial/ckdtree.cxx and .h
  - [\#5602](https://github.com/scipy/scipy/pull/5602): Explicitly numbered replacement fields for maintainability
  - [\#5605](https://github.com/scipy/scipy/pull/5605): MAINT: collection of small fixes to test suite
  - [\#5614](https://github.com/scipy/scipy/pull/5614): Minor doc change.
  - [\#5624](https://github.com/scipy/scipy/pull/5624): FIX: Fix interpolate
  - [\#5625](https://github.com/scipy/scipy/pull/5625): BUG: msvc9 binaries crash when indexing std::vector of size 0
  - [\#5635](https://github.com/scipy/scipy/pull/5635): BUG: misspelled \_\_dealloc\_\_ in cKDTree.
  - [\#5642](https://github.com/scipy/scipy/pull/5642): STY: minor fixup of formatting of 0.17.0 release notes.
  - [\#5643](https://github.com/scipy/scipy/pull/5643): BLD: fix a build issue in special/Faddeeva.cc with isnan.
  - [\#5661](https://github.com/scipy/scipy/pull/5661): TST: linalg tests used stdlib random instead of numpy.random.
  - [\#5682](https://github.com/scipy/scipy/pull/5682): backports for 0.17.0
  - [\#5696](https://github.com/scipy/scipy/pull/5696): Minor improvements to least\_squares' docstring.
  - [\#5697](https://github.com/scipy/scipy/pull/5697): BLD: fix for isnan/isinf issues in special/Faddeeva.cc
  - [\#5720](https://github.com/scipy/scipy/pull/5720): TST: fix for file opening error in fftpack test\_import.py
  - [\#5722](https://github.com/scipy/scipy/pull/5722): BUG: Make curve\_fit respect an initial guess with bounds
  - [\#5726](https://github.com/scipy/scipy/pull/5726): Backports for v0.17.0rc2
  - [\#5727](https://github.com/scipy/scipy/pull/5727): API: Changes to least\_squares API

---

0.17.1-notes.md

---

# SciPy 0.17.1 Release Notes

SciPy 0.17.1 is a bug-fix release with no new features compared to 0.17.0.

## Issues closed for 0.17.1

  - [\#5817](https://github.com/scipy/scipy/issues/5817): BUG: skew, kurtosis return np.nan instead of "propagate"
  - [\#5850](https://github.com/scipy/scipy/issues/5850): Test failed with sgelsy
  - [\#5898](https://github.com/scipy/scipy/issues/5898): interpolate.interp1d crashes using float128
  - [\#5953](https://github.com/scipy/scipy/issues/5953): Massive performance regression in cKDTree.query with L\_inf distance...
  - [\#6062](https://github.com/scipy/scipy/issues/6062): mannwhitneyu breaks backward compatibility in 0.17.0
  - [\#6134](https://github.com/scipy/scipy/issues/6134): T test does not handle nans

## Pull requests for 0.17.1

  - [\#5902](https://github.com/scipy/scipy/pull/5902): BUG: interpolate: make interp1d handle np.float128 again
  - [\#5957](https://github.com/scipy/scipy/pull/5957): BUG: slow down with p=np.inf in 0.17 cKDTree.query
  - [\#5970](https://github.com/scipy/scipy/pull/5970): Actually propagate nans through stats functions with nan\_policy="propagate"
  - [\#5971](https://github.com/scipy/scipy/pull/5971): BUG: linalg: fix lwork check in `*gelsy`
  - [\#6074](https://github.com/scipy/scipy/pull/6074): BUG: special: fixed violation of strict aliasing rules.
  - [\#6083](https://github.com/scipy/scipy/pull/6083): BUG: Fix dtype for sum of linear operators
  - [\#6100](https://github.com/scipy/scipy/pull/6100): BUG: Fix mannwhitneyu to be backward compatible
  - [\#6135](https://github.com/scipy/scipy/pull/6135): Don't pass null pointers to LAPACK, even during workspace queries.
  - [\#6148](https://github.com/scipy/scipy/pull/6148): stats: fix handling of nan values in T tests and kendalltau

---

0.18.0-notes.md

---

# SciPy 0.18.0 Release Notes

<div class="contents">

</div>

SciPy 0.18.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.19.x branch, and on adding new features on the master branch.

This release requires Python 2.7 or 3.4-3.5 and NumPy 1.7.1 or greater.

Highlights of this release include:

  - A new ODE solver for two-point boundary value problems, <span class="title-ref">scipy.optimize.solve\_bvp</span>.
  - A new class, <span class="title-ref">CubicSpline</span>, for cubic spline interpolation of data.
  - N-dimensional tensor product polynomials, <span class="title-ref">scipy.interpolate.NdPPoly</span>.
  - Spherical Voronoi diagrams, <span class="title-ref">scipy.spatial.SphericalVoronoi</span>.
  - Support for discrete-time linear systems, <span class="title-ref">scipy.signal.dlti</span>.

## New features

### <span class="title-ref">scipy.integrate</span> improvements

A solver of two-point boundary value problems for ODE systems has been implemented in <span class="title-ref">scipy.integrate.solve\_bvp</span>. The solver allows for non-separated boundary conditions, unknown parameters and certain singular terms. It finds a C1 continious solution using a fourth-order collocation algorithm.

### <span class="title-ref">scipy.interpolate</span> improvements

Cubic spline interpolation is now available via <span class="title-ref">scipy.interpolate.CubicSpline</span>. This class represents a piecewise cubic polynomial passing through given points and C2 continuous. It is represented in the standard polynomial basis on each segment.

A representation of n-dimensional tensor product piecewise polynomials is available as the <span class="title-ref">scipy.interpolate.NdPPoly</span> class.

Univariate piecewise polynomial classes, <span class="title-ref">PPoly</span> and <span class="title-ref">Bpoly</span>, can now be evaluated on periodic domains. Use `extrapolate="periodic"` keyword argument for this.

### <span class="title-ref">scipy.fftpack</span> improvements

<span class="title-ref">scipy.fftpack.next\_fast\_len</span> function computes the next "regular" number for FFTPACK. Padding the input to this length can give significant performance increase for <span class="title-ref">scipy.fftpack.fft</span>.

### <span class="title-ref">scipy.signal</span> improvements

Resampling using polyphase filtering has been implemented in the function <span class="title-ref">scipy.signal.resample\_poly</span>. This method upsamples a signal, applies a zero-phase low-pass FIR filter, and downsamples using <span class="title-ref">scipy.signal.upfirdn</span> (which is also new in 0.18.0). This method can be faster than FFT-based filtering provided by <span class="title-ref">scipy.signal.resample</span> for some signals.

<span class="title-ref">scipy.signal.firls</span>, which constructs FIR filters using least-squares error minimization, was added.

<span class="title-ref">scipy.signal.sosfiltfilt</span>, which does forward-backward filtering like <span class="title-ref">scipy.signal.filtfilt</span> but for second-order sections, was added.

#### Discrete-time linear systems

<span class="title-ref">scipy.signal.dlti</span> provides an implementation of discrete-time linear systems. Accordingly, the <span class="title-ref">StateSpace</span>, <span class="title-ref">TransferFunction</span> and <span class="title-ref">ZerosPolesGain</span> classes have learned a the new keyword, <span class="title-ref">dt</span>, which can be used to create discrete-time instances of the corresponding system representation.

### <span class="title-ref">scipy.sparse</span> improvements

The functions <span class="title-ref">sum</span>, <span class="title-ref">max</span>, <span class="title-ref">mean</span>, <span class="title-ref">min</span>, <span class="title-ref">transpose</span>, and <span class="title-ref">reshape</span> in <span class="title-ref">scipy.sparse</span> have had their signatures augmented with additional arguments and functionality so as to improve compatibility with analogously defined functions in <span class="title-ref">numpy</span>.

Sparse matrices now have a <span class="title-ref">count\_nonzero</span> method, which counts the number of nonzero elements in the matrix. Unlike <span class="title-ref">getnnz()</span> and `nnz` property, which return the number of stored entries (the length of the data attribute), this method counts the actual number of non-zero entries in data.

### <span class="title-ref">scipy.optimize</span> improvements

The implementation of Nelder-Mead minimization, <span class="title-ref">scipy.minimize(..., method="Nelder-Mead")</span>, obtained a new keyword, <span class="title-ref">initial\_simplex</span>, which can be used to specify the initial simplex for the optimization process.

Initial step size selection in CG and BFGS minimizers has been improved. We expect that this change will improve numeric stability of optimization in some cases. See pull request gh-5536 for details.

Handling of infinite bounds in SLSQP optimization has been improved. We expect that this change will improve numeric stability of optimization in the some cases. See pull request gh-6024 for details.

A large suite of global optimization benchmarks has been added to `scipy/benchmarks/go_benchmark_functions`. See pull request gh-4191 for details.

Nelder-Mead and Powell minimization will now only set defaults for maximum iterations or function evaluations if neither limit is set by the caller. In some cases with a slow converging function and only 1 limit set, the minimization may continue for longer than with previous versions and so is more likely to reach convergence. See issue gh-5966.

### <span class="title-ref">scipy.stats</span> improvements

Trapezoidal distribution has been implemented as `scipy.stats.trapz`. Skew normal distribution has been implemented as <span class="title-ref">scipy.stats.skewnorm</span>. Burr type XII distribution has been implemented as <span class="title-ref">scipy.stats.burr12</span>. Three- and four-parameter kappa distributions have been implemented as <span class="title-ref">scipy.stats.kappa3</span> and <span class="title-ref">scipy.stats.kappa4</span>, respectively.

New <span class="title-ref">scipy.stats.iqr</span> function computes the interquartile region of a distribution.

#### Random matrices

<span class="title-ref">scipy.stats.special\_ortho\_group</span> and <span class="title-ref">scipy.stats.ortho\_group</span> provide generators of random matrices in the SO(N) and O(N) groups, respectively. They generate matrices in the Haar distribution, the only uniform distribution on these group manifolds.

<span class="title-ref">scipy.stats.random\_correlation</span> provides a generator for random correlation matrices, given specified eigenvalues.

### <span class="title-ref">scipy.linalg</span> improvements

<span class="title-ref">scipy.linalg.svd</span> gained a new keyword argument, `lapack_driver`. Available drivers are `gesdd` (default) and `gesvd`.

<span class="title-ref">scipy.linalg.lapack.ilaver</span> returns the version of the LAPACK library SciPy links to.

### <span class="title-ref">scipy.spatial</span> improvements

Boolean distances, <span class="title-ref">scipy.spatial.pdist</span>, have been sped up. Improvements vary by the function and the input size. In many cases, one can expect a speed-up of x2--x10.

New class <span class="title-ref">scipy.spatial.SphericalVoronoi</span> constructs Voronoi diagrams on the surface of a sphere. See pull request gh-5232 for details.

### <span class="title-ref">scipy.cluster</span> improvements

A new clustering algorithm, the nearest neighbor chain algorithm, has been implemented for <span class="title-ref">scipy.cluster.hierarchy.linkage</span>. As a result, one can expect a significant algorithmic improvement (\(O(N^2)\) instead of \(O(N^3)\)) for several linkage methods.

### <span class="title-ref">scipy.special</span> improvements

The new function <span class="title-ref">scipy.special.loggamma</span> computes the principal branch of the logarithm of the Gamma function. For real input, `loggamma` is compatible with <span class="title-ref">scipy.special.gammaln</span>. For complex input, it has more consistent behavior in the complex plane and should be preferred over `gammaln`.

Vectorized forms of spherical Bessel functions have been implemented as <span class="title-ref">scipy.special.spherical\_jn</span>, <span class="title-ref">scipy.special.spherical\_kn</span>, <span class="title-ref">scipy.special.spherical\_in</span> and <span class="title-ref">scipy.special.spherical\_yn</span>. They are recommended for use over `sph_*` functions, which are now deprecated.

Several special functions have been extended to the complex domain and/or have seen domain/stability improvements. This includes <span class="title-ref">spence</span>, <span class="title-ref">digamma</span>, <span class="title-ref">log1p</span> and several others.

## Deprecated features

The cross-class properties of <span class="title-ref">lti</span> systems have been deprecated. The following properties/setters will raise a \`DeprecationWarning\`:

Name - (accessing/setting raises warning) - (setting raises warning) \* StateSpace - (<span class="title-ref">num</span>, <span class="title-ref">den</span>, <span class="title-ref">gain</span>) - (<span class="title-ref">zeros</span>, <span class="title-ref">poles</span>) \* TransferFunction (<span class="title-ref">A</span>, <span class="title-ref">B</span>, <span class="title-ref">C</span>, <span class="title-ref">D</span>, <span class="title-ref">gain</span>) - (<span class="title-ref">zeros</span>, <span class="title-ref">poles</span>) \* ZerosPolesGain (<span class="title-ref">A</span>, <span class="title-ref">B</span>, <span class="title-ref">C</span>, <span class="title-ref">D</span>, <span class="title-ref">num</span>, <span class="title-ref">den</span>) - ()

Spherical Bessel functions, `sph_in`, `sph_jn`, `sph_kn`, `sph_yn`, `sph_jnyn` and `sph_inkn` have been deprecated in favor of <span class="title-ref">scipy.special.spherical\_jn</span> and `spherical_kn`, `spherical_yn`, `spherical_in`.

The following functions in <span class="title-ref">scipy.constants</span> are deprecated: `C2K`, `K2C`, `C2F`, `F2C`, `F2K` and `K2F`. They are superseded by a new function <span class="title-ref">scipy.constants.convert\_temperature</span> that can perform all those conversions plus to/from the Rankine temperature scale.

## Backwards incompatible changes

### <span class="title-ref">scipy.optimize</span>

The convergence criterion for `optimize.bisect`, `optimize.brentq`, `optimize.brenth`, and `optimize.ridder` now works the same as `numpy.allclose`.

### <span class="title-ref">scipy.ndimage</span>

The offset in `ndimage.interpolation.affine_transform` is now consistently added after the matrix is applied, independent of if the matrix is specified using a one-dimensional or a two-dimensional array.

### <span class="title-ref">scipy.stats</span>

`stats.ks_2samp` used to return nonsensical values if the input was not real or contained nans. It now raises an exception for such inputs.

Several deprecated methods of <span class="title-ref">scipy.stats</span> distributions have been removed: `est_loc_scale`, `vecfunc`, `veccdf` and `vec_generic_moment`.

Deprecated functions `nanmean`, `nanstd` and `nanmedian` have been removed from <span class="title-ref">scipy.stats</span>. These functions were deprecated in scipy 0.15.0 in favor of their <span class="title-ref">numpy</span> equivalents.

A bug in the `rvs()` method of the distributions in <span class="title-ref">scipy.stats</span> has been fixed. When arguments to `rvs()` were given that were shaped for broadcasting, in many cases the returned random samples were not random. A simple example of the problem is `stats.norm.rvs(loc=np.zeros(10))`. Because of the bug, that call would return 10 identical values. The bug only affected code that relied on the broadcasting of the shape, location and scale parameters.

The `rvs()` method also accepted some arguments that it should not have. There is a potential for backwards incompatibility in cases where `rvs()` accepted arguments that are not, in fact, compatible with broadcasting. An example is

> stats.gamma.rvs(\[2, 5, 10, 15\], size=(2,2))

The shape of the first argument is not compatible with the requested size, but the function still returned an array with shape (2, 2). In scipy 0.18, that call generates a `ValueError`.

### <span class="title-ref">scipy.io</span>

`scipy.io.netcdf` masking now gives precedence to the `_FillValue` attribute over the `missing_value` attribute, if both are given. Also, data are only treated as missing if they match one of these attributes exactly: values that differ by roundoff from `_FillValue` or `missing_value` are no longer treated as missing values.

### <span class="title-ref">scipy.interpolate</span>

<span class="title-ref">scipy.interpolate.PiecewisePolynomial</span> class has been removed. It has been deprecated in scipy 0.14.0, and <span class="title-ref">scipy.interpolate.BPoly.from\_derivatives</span> serves as a drop-in replacement.

## Other changes

Scipy now uses `setuptools` for its builds instead of plain distutils. This fixes usage of `install_requires='scipy'` in the `setup.py` files of projects that depend on Scipy (see Numpy issue gh-6551 for details). It potentially affects the way that build/install methods for Scipy itself behave though. Please report any unexpected behavior on the Scipy issue tracker.

PR [\#6240](https://github.com/scipy/scipy/pull/6240) changes the interpretation of the <span class="title-ref">maxfun</span> option in <span class="title-ref">L-BFGS-B</span> based routines in the <span class="title-ref">scipy.optimize</span> module. An <span class="title-ref">L-BFGS-B</span> search consists of multiple iterations, with each iteration consisting of one or more function evaluations. Whereas the old search strategy terminated immediately upon reaching <span class="title-ref">maxfun</span> function evaluations, the new strategy allows the current iteration to finish despite reaching <span class="title-ref">maxfun</span>.

The bundled copy of Qhull in the <span class="title-ref">scipy.spatial</span> subpackage has been upgraded to version 2015.2.

The bundled copy of ARPACK in the <span class="title-ref">scipy.sparse.linalg</span> subpackage has been upgraded to arpack-ng 3.3.0.

The bundled copy of SuperLU in the <span class="title-ref">scipy.sparse</span> subpackage has been upgraded to version 5.1.1.

## Authors

  - @endolith
  - @yanxun827 +
  - @kleskjr +
  - @MYheavyGo +
  - @solarjoe +
  - Gregory Allen +
  - Gilles Aouizerate +
  - Tom Augspurger +
  - Henrik Bengtsson +
  - Felix Berkenkamp
  - Per Brodtkorb
  - Lars Buitinck
  - Daniel Bunting +
  - Evgeni Burovski
  - CJ Carey
  - Tim Cera
  - Grey Christoforo +
  - Robert Cimrman
  - Philip DeBoer +
  - Yves Delley +
  - Dávid Bodnár +
  - Ion Elberdin +
  - Gabriele Farina +
  - Yu Feng
  - Andrew Fowlie +
  - Joseph Fox-Rabinovitz
  - Simon Gibbons +
  - Neil Girdhar +
  - Kolja Glogowski +
  - Christoph Gohlke
  - Ralf Gommers
  - Todd Goodall +
  - Johnnie Gray +
  - Alex Griffing
  - Olivier Grisel
  - Thomas Haslwanter +
  - Michael Hirsch +
  - Derek Homeier
  - Golnaz Irannejad +
  - Marek Jacob +
  - InSuk Joung +
  - Tetsuo Koyama +
  - Eugene Krokhalev +
  - Eric Larson
  - Denis Laxalde
  - Antony Lee
  - Jerry Li +
  - Henry Lin +
  - Nelson Liu +
  - Loïc Estève
  - Lei Ma +
  - Osvaldo Martin +
  - Stefano Martina +
  - Nikolay Mayorov
  - Matthieu Melot +
  - Sturla Molden
  - Eric Moore
  - Alistair Muldal +
  - Maniteja Nandana
  - Tavi Nathanson +
  - Andrew Nelson
  - Joel Nothman
  - Behzad Nouri
  - Nikolai Nowaczyk +
  - Juan Nunez-Iglesias +
  - Ted Pudlik
  - Eric Quintero
  - Yoav Ram
  - Jonas Rauber +
  - Tyler Reddy +
  - Juha Remes
  - Garrett Reynolds +
  - Ariel Rokem +
  - Fabian Rost +
  - Bill Sacks +
  - Jona Sassenhagen +
  - Kari Schoonbee +
  - Marcello Seri +
  - Sourav Singh +
  - Martin Spacek +
  - Søren Fuglede Jørgensen +
  - Bhavika Tekwani +
  - Martin Thoma +
  - Sam Tygier +
  - Meet Udeshi +
  - Utkarsh Upadhyay
  - Bram Vandekerckhove +
  - Sebastián Vanrell +
  - Ze Vinicius +
  - Pauli Virtanen
  - Stefan van der Walt
  - Warren Weckesser
  - Jakub Wilk +
  - Josh Wilson
  - Phillip J. Wolfram +
  - Nathan Woods
  - Haochen Wu
  - G Young +

A total of 99 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 0.18.0

  - [\#1484](https://github.com/scipy/scipy/issues/1484): SVD using `*GESVD` lapack drivers (Trac \#957)
  - [\#1547](https://github.com/scipy/scipy/issues/1547): Inconsistent use of offset in ndimage.interpolation.affine\_transform()...
  - [\#1609](https://github.com/scipy/scipy/issues/1609): special.hyp0f1 returns nan (Trac \#1082)
  - [\#1656](https://github.com/scipy/scipy/issues/1656): fmin\_slsqp enhancement (Trac \#1129)
  - [\#2069](https://github.com/scipy/scipy/issues/2069): stats broadcasting in rvs (Trac \#1544)
  - [\#2165](https://github.com/scipy/scipy/issues/2165): sph\_jn returns false results for some orders/values (Trac \#1640)
  - [\#2255](https://github.com/scipy/scipy/issues/2255): Incorrect order of translation and rotation in affine\_transform...
  - [\#2332](https://github.com/scipy/scipy/issues/2332): hyp0f1 args and return values are unnumpyic (Trac \#1813)
  - [\#2534](https://github.com/scipy/scipy/issues/2534): The sparse .sum() method with uint8 dtype does not act like the...
  - [\#3113](https://github.com/scipy/scipy/issues/3113): Implement ufuncs for CSPHJY, SPHJ, SPHY, CSPHIK, SPHI, SPHIK...
  - [\#3568](https://github.com/scipy/scipy/issues/3568): SciPy 0.13.3 - CentOS5 - Errors in test\_arpack
  - [\#3581](https://github.com/scipy/scipy/issues/3581): optimize: stepsize in fmin\_bfgs is "bad"
  - [\#4476](https://github.com/scipy/scipy/issues/4476): scipy.sparse non-native endian bug
  - [\#4484](https://github.com/scipy/scipy/issues/4484): ftol in optimize.fmin fails to work
  - [\#4510](https://github.com/scipy/scipy/issues/4510): sparsetools.cxx call\_thunk can segfault due to out of bounds...
  - [\#5051](https://github.com/scipy/scipy/issues/5051): ftol and xtol for \_minimize\_neldermead are absolute instead of...
  - [\#5097](https://github.com/scipy/scipy/issues/5097): proposal: spherical Voronoi diagrams
  - [\#5123](https://github.com/scipy/scipy/issues/5123): Call to <span class="title-ref">scipy.sparse.coo\_matrix</span> fails when passed Cython typed...
  - [\#5220](https://github.com/scipy/scipy/issues/5220): scipy.cluster.hierarchy.{ward,median,centroid} does not work...
  - [\#5379](https://github.com/scipy/scipy/issues/5379): Add a build step at the end of .travis.yml that uploads working...
  - [\#5440](https://github.com/scipy/scipy/issues/5440): scipy.optimize.basinhopping: accept\_test returning `numpy.bool_`...
  - [\#5452](https://github.com/scipy/scipy/issues/5452): Error in scipy.integrate.nquad when using variable integration...
  - [\#5520](https://github.com/scipy/scipy/issues/5520): Cannot inherit csr\_matrix properly
  - [\#5533](https://github.com/scipy/scipy/issues/5533): Kendall tau implementation uses Python mergesort
  - [\#5553](https://github.com/scipy/scipy/issues/5553): stats.tiecorrect overflows
  - [\#5589](https://github.com/scipy/scipy/issues/5589): Add the Type XII Burr distribution to stats.
  - [\#5612](https://github.com/scipy/scipy/issues/5612): sparse.linalg factorizations slow for small k due to default...
  - [\#5626](https://github.com/scipy/scipy/issues/5626): io.netcdf masking should use masked\_equal rather than masked\_value
  - [\#5637](https://github.com/scipy/scipy/issues/5637): Simple cubic spline interpolation?
  - [\#5683](https://github.com/scipy/scipy/issues/5683): BUG: Akima1DInterpolator may return nans given multidimensional...
  - [\#5686](https://github.com/scipy/scipy/issues/5686): scipy.stats.ttest\_ind\_from\_stats does not accept arrays
  - [\#5702](https://github.com/scipy/scipy/issues/5702): scipy.ndimage.interpolation.affine\_transform lacks documentation...
  - [\#5718](https://github.com/scipy/scipy/issues/5718): Wrong computation of weighted minkowski distance in cdist
  - [\#5745](https://github.com/scipy/scipy/issues/5745): move to setuptools for next release
  - [\#5752](https://github.com/scipy/scipy/issues/5752): DOC: solve\_discrete\_lyapunov equation puts transpose in wrong...
  - [\#5760](https://github.com/scipy/scipy/issues/5760): signal.ss2tf doesn't handle zero-order state-space models
  - [\#5764](https://github.com/scipy/scipy/issues/5764): Hypergeometric function hyp0f1 behaves incorrectly for complex...
  - [\#5814](https://github.com/scipy/scipy/issues/5814): stats NaN Policy Error message inconsistent with code
  - [\#5833](https://github.com/scipy/scipy/issues/5833): docstring of stats.binom\_test() needs an update
  - [\#5853](https://github.com/scipy/scipy/issues/5853): Error in scipy.linalg.expm for complex matrix with shape (1,1)
  - [\#5856](https://github.com/scipy/scipy/issues/5856): Specify Nelder-Mead initial simplex
  - [\#5865](https://github.com/scipy/scipy/issues/5865): scipy.linalg.expm fails for certain numpy matrices
  - [\#5915](https://github.com/scipy/scipy/issues/5915): optimize.basinhopping - variable referenced before assignment.
  - [\#5916](https://github.com/scipy/scipy/issues/5916): LSQUnivariateSpline fitting failed with knots generated from...
  - [\#5927](https://github.com/scipy/scipy/issues/5927): unicode vs. string comparison in scipy.stats.binned\_statistic\_dd
  - [\#5936](https://github.com/scipy/scipy/issues/5936): faster implementation of ks\_2samp
  - [\#5948](https://github.com/scipy/scipy/issues/5948): csc matrix .mean returns single element matrix rather than scalar
  - [\#5959](https://github.com/scipy/scipy/issues/5959): BUG: optimize test error for root when using lgmres
  - [\#5972](https://github.com/scipy/scipy/issues/5972): Test failures for sparse sum tests on 32-bit Python
  - [\#5976](https://github.com/scipy/scipy/issues/5976): Unexpected exception in scipy.sparse.bmat while using 0 x 0 matrix
  - [\#6008](https://github.com/scipy/scipy/issues/6008): scipy.special.kl\_div not available in 0.14.1
  - [\#6011](https://github.com/scipy/scipy/issues/6011): The von-Mises entropy is broken
  - [\#6016](https://github.com/scipy/scipy/issues/6016): python crashes for linalg.interpolative.svd with certain large...
  - [\#6017](https://github.com/scipy/scipy/issues/6017): Wilcoxon signed-rank test with zero\_method="pratt" or "zsplit"...
  - [\#6028](https://github.com/scipy/scipy/issues/6028): stats.distributions does not have trapezoidal distribution
  - [\#6035](https://github.com/scipy/scipy/issues/6035): Wrong link in f\_oneway
  - [\#6056](https://github.com/scipy/scipy/issues/6056): BUG: signal.decimate should only accept discrete LTI objects
  - [\#6093](https://github.com/scipy/scipy/issues/6093): Precision error on Linux 32 bit with openblas
  - [\#6101](https://github.com/scipy/scipy/issues/6101): Barycentric transforms test error on Python3, 32-bit Linux
  - [\#6105](https://github.com/scipy/scipy/issues/6105): scipy.misc.face docstring is incorrect
  - [\#6113](https://github.com/scipy/scipy/issues/6113): scipy.linalg.logm fails for a trivial matrix
  - [\#6128](https://github.com/scipy/scipy/issues/6128): Error in dot method of sparse COO array, when used with numpy...
  - [\#6132](https://github.com/scipy/scipy/issues/6132): Failures with latest MKL
  - [\#6136](https://github.com/scipy/scipy/issues/6136): Failures on <span class="title-ref">master</span> with MKL
  - [\#6162](https://github.com/scipy/scipy/issues/6162): fmin\_l\_bfgs\_b returns inconsistent results (fmin ≠ f(xmin)) and...
  - [\#6165](https://github.com/scipy/scipy/issues/6165): optimize.minimize infinite loop with Newton-CG
  - [\#6167](https://github.com/scipy/scipy/issues/6167): incorrect distribution fitting for data containing boundary values.
  - [\#6194](https://github.com/scipy/scipy/issues/6194): lstsq() and others detect numpy.complex256 as real
  - [\#6216](https://github.com/scipy/scipy/issues/6216): ENH: improve accuracy of ppf cdf roundtrip for bradford
  - [\#6217](https://github.com/scipy/scipy/issues/6217): BUG: weibull\_min.logpdf return nan for c=1 and x=0
  - [\#6218](https://github.com/scipy/scipy/issues/6218): Is there a method to cap shortest path search distances?
  - [\#6222](https://github.com/scipy/scipy/issues/6222): PchipInterpolator no longer handles a 2-element array
  - [\#6226](https://github.com/scipy/scipy/issues/6226): ENH: improve accuracy for logistic.ppf and logistic.isf
  - [\#6227](https://github.com/scipy/scipy/issues/6227): ENH: improve accuracy for rayleigh.logpdf and rayleigh.logsf...
  - [\#6228](https://github.com/scipy/scipy/issues/6228): ENH: improve accuracy of ppf cdf roundtrip for gumbel\_l
  - [\#6235](https://github.com/scipy/scipy/issues/6235): BUG: alpha.pdf and alpha.logpdf returns nan for x=0
  - [\#6245](https://github.com/scipy/scipy/issues/6245): ENH: improve accuracy for ppf-cdf and sf-isf roundtrips for invgamma
  - [\#6263](https://github.com/scipy/scipy/issues/6263): BUG: stats: Inconsistency in the multivariate\_normal docstring
  - [\#6292](https://github.com/scipy/scipy/issues/6292): Python 3 unorderable type errors in test\_sparsetools.TestInt32Overflow
  - [\#6316](https://github.com/scipy/scipy/issues/6316): TestCloughTocher2DInterpolator.test\_dense crashes python3.5.2rc1\_64bit...
  - [\#6318](https://github.com/scipy/scipy/issues/6318): Scipy interp1d 'nearest' not working for high values on x-axis

### Pull requests for 0.18.0

  - [\#3226](https://github.com/scipy/scipy/pull/3226): DOC: Change <span class="title-ref">nb</span> and <span class="title-ref">na</span> to conventional m and n
  - [\#3867](https://github.com/scipy/scipy/pull/3867): allow cKDTree.query taking a list input in k.
  - [\#4191](https://github.com/scipy/scipy/pull/4191): ENH: Benchmarking global optimizers
  - [\#4356](https://github.com/scipy/scipy/pull/4356): ENH: add PPoly.solve(y) for solving `p(x) == y`
  - [\#4370](https://github.com/scipy/scipy/pull/4370): DOC separate boolean distance functions for clarity
  - [\#4678](https://github.com/scipy/scipy/pull/4678): BUG: sparse: ensure index dtype is large enough to pass all parameters...
  - [\#4881](https://github.com/scipy/scipy/pull/4881): scipy.signal: Add the class dlti for linear discrete-time systems....
  - [\#4901](https://github.com/scipy/scipy/pull/4901): MAINT: add benchmark and improve docstring for signal.lfilter
  - [\#5043](https://github.com/scipy/scipy/pull/5043): ENH: sparse: add count\_nonzero method
  - [\#5136](https://github.com/scipy/scipy/pull/5136): Attribute kurtosistest() to Anscombe & Glynn (1983)
  - [\#5186](https://github.com/scipy/scipy/pull/5186): ENH: Port upfirdn
  - [\#5232](https://github.com/scipy/scipy/pull/5232): ENH: adding spherical Voronoi diagram algorithm to scipy.spatial
  - [\#5279](https://github.com/scipy/scipy/pull/5279): ENH: Bessel filters with different normalizations, high order
  - [\#5384](https://github.com/scipy/scipy/pull/5384): BUG: Closes \#5027 distance function always casts bool to double
  - [\#5392](https://github.com/scipy/scipy/pull/5392): ENH: Add zero\_phase kwarg to signal.decimate
  - [\#5394](https://github.com/scipy/scipy/pull/5394): MAINT: sparse: non-canonical test cleanup and fixes
  - [\#5424](https://github.com/scipy/scipy/pull/5424): DOC: add Scipy developers guide
  - [\#5442](https://github.com/scipy/scipy/pull/5442): STY: PEP8 amendments
  - [\#5472](https://github.com/scipy/scipy/pull/5472): Online QR in LGMRES
  - [\#5526](https://github.com/scipy/scipy/pull/5526): BUG: stats: Fix broadcasting in the rvs() method of the distributions.
  - [\#5530](https://github.com/scipy/scipy/pull/5530): MAINT: sparse: set <span class="title-ref">format</span> attr explicitly
  - [\#5536](https://github.com/scipy/scipy/pull/5536): optimize: fix up cg/bfgs initial step sizes
  - [\#5548](https://github.com/scipy/scipy/pull/5548): PERF: improves performance in stats.kendalltau
  - [\#5549](https://github.com/scipy/scipy/pull/5549): ENH: Nearest-neighbor chain algorithm for hierarchical clustering
  - [\#5554](https://github.com/scipy/scipy/pull/5554): MAINT/BUG: closes overflow bug in stats.tiecorrect
  - [\#5557](https://github.com/scipy/scipy/pull/5557): BUG: modify optimize.bisect to achieve desired tolerance
  - [\#5581](https://github.com/scipy/scipy/pull/5581): DOC: Tutorial for least\_squares
  - [\#5606](https://github.com/scipy/scipy/pull/5606): ENH: differential\_evolution - moving core loop of solve method...
  - [\#5609](https://github.com/scipy/scipy/pull/5609): \[MRG\] test against numpy dev
  - [\#5611](https://github.com/scipy/scipy/pull/5611): use setuptools for bdist\_egg distributions
  - [\#5615](https://github.com/scipy/scipy/pull/5615): MAINT: linalg: tighten \_decomp\_update + special: remove unused...
  - [\#5622](https://github.com/scipy/scipy/pull/5622): Add SO(N) rotation matrix generator
  - [\#5623](https://github.com/scipy/scipy/pull/5623): ENH: special: Add vectorized spherical Bessel functions.
  - [\#5627](https://github.com/scipy/scipy/pull/5627): Response to issue \#5160, implements the skew normal distribution...
  - [\#5628](https://github.com/scipy/scipy/pull/5628): DOC: Align the description and operation
  - [\#5632](https://github.com/scipy/scipy/pull/5632): DOC: special: Expanded docs for Airy, elliptic, Bessel functions.
  - [\#5633](https://github.com/scipy/scipy/pull/5633): MAINT: linalg: unchecked malloc in \_decomp\_update
  - [\#5634](https://github.com/scipy/scipy/pull/5634): MAINT: optimize: tighten \_group\_columns
  - [\#5640](https://github.com/scipy/scipy/pull/5640): Fixes for io.netcdf masking
  - [\#5645](https://github.com/scipy/scipy/pull/5645): MAINT: size 0 vector handling in cKDTree range queries
  - [\#5649](https://github.com/scipy/scipy/pull/5649): MAINT: update license text
  - [\#5650](https://github.com/scipy/scipy/pull/5650): DOC: Clarify Exponent Order in ltisys.py
  - [\#5651](https://github.com/scipy/scipy/pull/5651): DOC: Clarify Documentation for scipy.special.gammaln
  - [\#5652](https://github.com/scipy/scipy/pull/5652): DOC: Fixed scipy.special.betaln Doc
  - [\#5653](https://github.com/scipy/scipy/pull/5653): \[MRG\] ENH: CubicSpline interpolator
  - [\#5654](https://github.com/scipy/scipy/pull/5654): ENH: Burr12 distribution to stats module
  - [\#5659](https://github.com/scipy/scipy/pull/5659): DOC: Define BEFORE/AFTER in runtests.py -h for bench-compare
  - [\#5660](https://github.com/scipy/scipy/pull/5660): MAINT: remove functions deprecated before 0.16.0
  - [\#5662](https://github.com/scipy/scipy/pull/5662): ENH: Circular statistic optimization
  - [\#5663](https://github.com/scipy/scipy/pull/5663): MAINT: remove uses of np.testing.rand
  - [\#5665](https://github.com/scipy/scipy/pull/5665): MAINT: spatial: remove matching distance implementation
  - [\#5667](https://github.com/scipy/scipy/pull/5667): Change some HTTP links to HTTPS
  - [\#5669](https://github.com/scipy/scipy/pull/5669): DOC: zpk2sos can't do analog, array\_like, etc.
  - [\#5670](https://github.com/scipy/scipy/pull/5670): Update conf.py
  - [\#5672](https://github.com/scipy/scipy/pull/5672): MAINT: move a sample distribution to a subclass of rv\_discrete
  - [\#5678](https://github.com/scipy/scipy/pull/5678): MAINT: stats: remove est\_loc\_scale method
  - [\#5679](https://github.com/scipy/scipy/pull/5679): MAINT: DRY up generic computations for discrete distributions
  - [\#5680](https://github.com/scipy/scipy/pull/5680): MAINT: stop shadowing builtins in stats.distributions
  - [\#5681](https://github.com/scipy/scipy/pull/5681): forward port ENH: Re-enable broadcasting of fill\_value
  - [\#5684](https://github.com/scipy/scipy/pull/5684): BUG: Fix Akima1DInterpolator returning nans
  - [\#5690](https://github.com/scipy/scipy/pull/5690): BUG: fix stats.ttest\_ind\_from\_stats to handle arrays.
  - [\#5691](https://github.com/scipy/scipy/pull/5691): BUG: fix generator in io.\_loadarff to comply with PEP 0479
  - [\#5693](https://github.com/scipy/scipy/pull/5693): ENH: use math.factorial for exact factorials
  - [\#5695](https://github.com/scipy/scipy/pull/5695): DOC: dx might be a float, not only an integer
  - [\#5699](https://github.com/scipy/scipy/pull/5699): MAINT: io: micro-optimize Matlab reading code for size
  - [\#5701](https://github.com/scipy/scipy/pull/5701): Implement OptimizeResult.\_\_dir\_\_
  - [\#5703](https://github.com/scipy/scipy/pull/5703): ENH: stats: make R² printing optional in probplot
  - [\#5704](https://github.com/scipy/scipy/pull/5704): MAINT: typo ouf-\>out
  - [\#5705](https://github.com/scipy/scipy/pull/5705): BUG: fix typo in query\_pairs
  - [\#5707](https://github.com/scipy/scipy/pull/5707): DOC:Add some explanation for ftol xtol in scipy.optimize.fmin
  - [\#5708](https://github.com/scipy/scipy/pull/5708): DOC: optimize: PEP8 minimize docstring
  - [\#5709](https://github.com/scipy/scipy/pull/5709): MAINT: optimize Cython code for speed and size
  - [\#5713](https://github.com/scipy/scipy/pull/5713): \[DOC\] Fix broken link to reference
  - [\#5717](https://github.com/scipy/scipy/pull/5717): DOC: curve\_fit raises RuntimeError on failure.
  - [\#5724](https://github.com/scipy/scipy/pull/5724): forward port gh-5720
  - [\#5728](https://github.com/scipy/scipy/pull/5728): STY: remove a blank line
  - [\#5729](https://github.com/scipy/scipy/pull/5729): ENH: spatial: speed up boolean distances
  - [\#5732](https://github.com/scipy/scipy/pull/5732): MAINT: differential\_evolution changes to default keywords break...
  - [\#5733](https://github.com/scipy/scipy/pull/5733): TST: differential\_evolution - population initiation tests
  - [\#5736](https://github.com/scipy/scipy/pull/5736): Complex number support in log1p, expm1, and xlog1py
  - [\#5741](https://github.com/scipy/scipy/pull/5741): MAINT: sparse: clean up extraction functions
  - [\#5742](https://github.com/scipy/scipy/pull/5742): DOC: signal: Explain fftbins in get\_window
  - [\#5748](https://github.com/scipy/scipy/pull/5748): ENH: Add O(N) random matrix generator
  - [\#5749](https://github.com/scipy/scipy/pull/5749): ENH: Add polyphase resampling
  - [\#5756](https://github.com/scipy/scipy/pull/5756): RFC: Bump the minimum numpy version, drop older python versions
  - [\#5761](https://github.com/scipy/scipy/pull/5761): DOC: Some improvements to least squares docstrings
  - [\#5762](https://github.com/scipy/scipy/pull/5762): MAINT: spatial: distance refactoring
  - [\#5768](https://github.com/scipy/scipy/pull/5768): DOC: Fix io.loadmat docstring for mdict param
  - [\#5770](https://github.com/scipy/scipy/pull/5770): BUG: Accept anything np.dtype can handle for a dtype in sparse.random
  - [\#5772](https://github.com/scipy/scipy/pull/5772): Update sparse.csgraph.laplacian docstring
  - [\#5777](https://github.com/scipy/scipy/pull/5777): BUG: fix special.hyp0f1 to work correctly for complex inputs.
  - [\#5780](https://github.com/scipy/scipy/pull/5780): DOC: Update PIL error install URL
  - [\#5781](https://github.com/scipy/scipy/pull/5781): DOC: Fix documentation on solve\_discrete\_lyapunov
  - [\#5782](https://github.com/scipy/scipy/pull/5782): DOC: cKDTree and KDTree now reference each other
  - [\#5783](https://github.com/scipy/scipy/pull/5783): DOC: Clarify finish behaviour in scipy.optimize.brute
  - [\#5784](https://github.com/scipy/scipy/pull/5784): MAINT: Change default tolerances of least\_squares to 1e-8
  - [\#5787](https://github.com/scipy/scipy/pull/5787): BUG: Allow Processing of Zero Order State Space Models in signal.ss2tf
  - [\#5788](https://github.com/scipy/scipy/pull/5788): DOC, BUG: Clarify and Enforce Input Types to 'Data' Objects
  - [\#5789](https://github.com/scipy/scipy/pull/5789): ENH: sparse: speedup LIL matrix slicing (was \#3338)
  - [\#5791](https://github.com/scipy/scipy/pull/5791): DOC: README: remove coveralls.io
  - [\#5792](https://github.com/scipy/scipy/pull/5792): MAINT: remove uses of deprecated np.random.random\_integers
  - [\#5794](https://github.com/scipy/scipy/pull/5794): fix affine\_transform (fixes \#1547 and \#5702)
  - [\#5795](https://github.com/scipy/scipy/pull/5795): DOC: Removed uniform method from kmeans2 doc
  - [\#5797](https://github.com/scipy/scipy/pull/5797): DOC: Clarify the computation of weighted minkowski
  - [\#5798](https://github.com/scipy/scipy/pull/5798): BUG: Ensure scipy's \_asfarray returns ndarray
  - [\#5799](https://github.com/scipy/scipy/pull/5799): TST: Mpmath testing patch
  - [\#5801](https://github.com/scipy/scipy/pull/5801): allow reading of certain IDL 8.0 .sav files
  - [\#5803](https://github.com/scipy/scipy/pull/5803): DOC: fix module name in error message
  - [\#5804](https://github.com/scipy/scipy/pull/5804): DOC: special: Expanded docs for special functions.
  - [\#5805](https://github.com/scipy/scipy/pull/5805): DOC: Fix order of returns in \_spectral\_helper
  - [\#5806](https://github.com/scipy/scipy/pull/5806): ENH: sparse: vectorized coo\_matrix.diagonal
  - [\#5808](https://github.com/scipy/scipy/pull/5808): ENH: Added iqr function to compute IQR metric in scipy/stats/stats.py
  - [\#5810](https://github.com/scipy/scipy/pull/5810): MAINT/BENCH: sparse: Benchmark cleanup and additions
  - [\#5811](https://github.com/scipy/scipy/pull/5811): DOC: sparse.linalg: shape, not size
  - [\#5813](https://github.com/scipy/scipy/pull/5813): Update sparse ARPACK functions min <span class="title-ref">ncv</span> value
  - [\#5815](https://github.com/scipy/scipy/pull/5815): BUG: Error message contained wrong values
  - [\#5816](https://github.com/scipy/scipy/pull/5816): remove dead code from stats tests
  - [\#5820](https://github.com/scipy/scipy/pull/5820): "in"-\>"a" in order\_filter docstring
  - [\#5821](https://github.com/scipy/scipy/pull/5821): DOC: README: INSTALL.txt was renamed in 2014
  - [\#5825](https://github.com/scipy/scipy/pull/5825): DOC: typo in the docstring of least\_squares
  - [\#5826](https://github.com/scipy/scipy/pull/5826): MAINT: sparse: increase test coverage
  - [\#5827](https://github.com/scipy/scipy/pull/5827): NdPPoly rebase
  - [\#5828](https://github.com/scipy/scipy/pull/5828): Improve numerical stability of hyp0f1 for large orders
  - [\#5829](https://github.com/scipy/scipy/pull/5829): ENH: sparse: Add copy parameter to all .toXXX() methods in sparse...
  - [\#5830](https://github.com/scipy/scipy/pull/5830): DOC: rework INSTALL.rst.txt
  - [\#5831](https://github.com/scipy/scipy/pull/5831): Adds plotting options to voronoi\_plot\_2d
  - [\#5834](https://github.com/scipy/scipy/pull/5834): Update stats.binom\_test() docstring
  - [\#5836](https://github.com/scipy/scipy/pull/5836): ENH, TST: Allow SIMO tf's for tf2ss
  - [\#5837](https://github.com/scipy/scipy/pull/5837): DOC: Image examples
  - [\#5838](https://github.com/scipy/scipy/pull/5838): ENH: sparse: add eliminate\_zeros() to coo\_matrix
  - [\#5839](https://github.com/scipy/scipy/pull/5839): BUG: Fixed name of NumpyVersion.\_\_repr\_\_
  - [\#5845](https://github.com/scipy/scipy/pull/5845): MAINT: Fixed typos in documentation
  - [\#5847](https://github.com/scipy/scipy/pull/5847): Fix bugs in sparsetools
  - [\#5848](https://github.com/scipy/scipy/pull/5848): BUG: sparse.linalg: add locks to ensure ARPACK threadsafety
  - [\#5849](https://github.com/scipy/scipy/pull/5849): ENH: sparse.linalg: upgrade to superlu 5.1.1
  - [\#5851](https://github.com/scipy/scipy/pull/5851): ENH: expose lapack's ilaver to python to allow lapack verion...
  - [\#5852](https://github.com/scipy/scipy/pull/5852): MAINT: runtests.py: ensure Ctrl-C interrupts the build
  - [\#5854](https://github.com/scipy/scipy/pull/5854): DOC: Minor update to documentation
  - [\#5855](https://github.com/scipy/scipy/pull/5855): Pr 5640
  - [\#5859](https://github.com/scipy/scipy/pull/5859): ENH: Add random correlation matrix generator
  - [\#5862](https://github.com/scipy/scipy/pull/5862): BUG: Allow expm for complex matrix with shape (1, 1)
  - [\#5863](https://github.com/scipy/scipy/pull/5863): FIX: Fix test
  - [\#5864](https://github.com/scipy/scipy/pull/5864): DOC: add a little note about the Normal survival function (Q-function)
  - [\#5867](https://github.com/scipy/scipy/pull/5867): Fix for \#5865
  - [\#5869](https://github.com/scipy/scipy/pull/5869): extend normal distribution cdf to complex domain
  - [\#5872](https://github.com/scipy/scipy/pull/5872): DOC: Note that morlet and cwt don't work together
  - [\#5875](https://github.com/scipy/scipy/pull/5875): DOC: interp2d class description
  - [\#5876](https://github.com/scipy/scipy/pull/5876): MAINT: spatial: remove a stray print statement
  - [\#5878](https://github.com/scipy/scipy/pull/5878): MAINT: Fixed noisy UserWarnings in ndimage tests. Fixes \#5877
  - [\#5879](https://github.com/scipy/scipy/pull/5879): MAINT: sparse.linalg/superlu: add explicit casts to resolve compiler...
  - [\#5880](https://github.com/scipy/scipy/pull/5880): MAINT: signal: import gcd from math and not fractions when on...
  - [\#5887](https://github.com/scipy/scipy/pull/5887): Neldermead initial simplex
  - [\#5894](https://github.com/scipy/scipy/pull/5894): BUG: \_CustomLinearOperator unpickalable in python3.5
  - [\#5895](https://github.com/scipy/scipy/pull/5895): DOC: special: slightly improve the multigammaln docstring
  - [\#5900](https://github.com/scipy/scipy/pull/5900): Remove duplicate assignment.
  - [\#5901](https://github.com/scipy/scipy/pull/5901): Update bundled ARPACK
  - [\#5904](https://github.com/scipy/scipy/pull/5904): ENH: Make convolve and correlate order-agnostic
  - [\#5905](https://github.com/scipy/scipy/pull/5905): ENH: sparse.linalg: further LGMRES cleanups
  - [\#5906](https://github.com/scipy/scipy/pull/5906): Enhancements and cleanup in scipy.integrate (attempt \#2)
  - [\#5907](https://github.com/scipy/scipy/pull/5907): ENH: Change sparse <span class="title-ref">.sum</span> and <span class="title-ref">.mean</span> dtype casting to match...
  - [\#5909](https://github.com/scipy/scipy/pull/5909): changes for convolution symmetry
  - [\#5913](https://github.com/scipy/scipy/pull/5913): MAINT: basinhopping remove instance test closes \#5440
  - [\#5919](https://github.com/scipy/scipy/pull/5919): MAINT: uninitialised var if basinhopping niter=0. closes \#5915
  - [\#5920](https://github.com/scipy/scipy/pull/5920): BLD: Fix missing lsame.c error for MKL
  - [\#5921](https://github.com/scipy/scipy/pull/5921): DOC: interpolate: add example showing how to work around issue...
  - [\#5926](https://github.com/scipy/scipy/pull/5926): MAINT: spatial: upgrade to Qhull 2015.2
  - [\#5928](https://github.com/scipy/scipy/pull/5928): MAINT: sparse: optimize DIA sum/diagonal, csgraph.laplacian
  - [\#5929](https://github.com/scipy/scipy/pull/5929): Update info/URL for octave-maintainers discussion
  - [\#5930](https://github.com/scipy/scipy/pull/5930): TST: special: silence DeprecationWarnings from sph\_yn
  - [\#5931](https://github.com/scipy/scipy/pull/5931): ENH: implement the principle branch of the logarithm of Gamma.
  - [\#5934](https://github.com/scipy/scipy/pull/5934): Typo: "mush" =\> "must"
  - [\#5935](https://github.com/scipy/scipy/pull/5935): BUG:string comparison stats.\_binned\_statistic closes \#5927
  - [\#5938](https://github.com/scipy/scipy/pull/5938): Cythonize stats.ks\_2samp for a \~33% gain in speed.
  - [\#5939](https://github.com/scipy/scipy/pull/5939): DOC: fix optimize.fmin convergence docstring
  - [\#5941](https://github.com/scipy/scipy/pull/5941): Fix minor typo in squareform docstring
  - [\#5942](https://github.com/scipy/scipy/pull/5942): Update linregress stderr description.
  - [\#5943](https://github.com/scipy/scipy/pull/5943): ENH: Improve numerical accuracy of lognorm
  - [\#5944](https://github.com/scipy/scipy/pull/5944): Merge vonmises into stats pyx
  - [\#5945](https://github.com/scipy/scipy/pull/5945): MAINT: interpolate: Tweak declaration to avoid cython warning...
  - [\#5946](https://github.com/scipy/scipy/pull/5946): MAINT: sparse: clean up format conversion methods
  - [\#5949](https://github.com/scipy/scipy/pull/5949): BUG: fix sparse .mean to return a scalar instead of a matrix
  - [\#5955](https://github.com/scipy/scipy/pull/5955): MAINT: Replace calls to <span class="title-ref">hanning</span> with <span class="title-ref">hann</span>
  - [\#5956](https://github.com/scipy/scipy/pull/5956): DOC: Missing periods interfering with parsing
  - [\#5958](https://github.com/scipy/scipy/pull/5958): MAINT: add a test for lognorm.sf underflow
  - [\#5961](https://github.com/scipy/scipy/pull/5961): MAINT \_centered(): rename size to shape
  - [\#5962](https://github.com/scipy/scipy/pull/5962): ENH: constants: Add multi-scale temperature conversion function
  - [\#5965](https://github.com/scipy/scipy/pull/5965): ENH: special: faster way for calculating comb() for exact=True
  - [\#5975](https://github.com/scipy/scipy/pull/5975): ENH: Improve FIR path of signal.decimate
  - [\#5977](https://github.com/scipy/scipy/pull/5977): MAINT/BUG: sparse: remove overzealous bmat checks
  - [\#5978](https://github.com/scipy/scipy/pull/5978): minimize\_neldermead() stop at user requested maxiter or maxfev
  - [\#5983](https://github.com/scipy/scipy/pull/5983): ENH: make sparse <span class="title-ref">sum</span> cast dtypes like NumPy <span class="title-ref">sum</span> for 32-bit...
  - [\#5985](https://github.com/scipy/scipy/pull/5985): BUG, API: Add <span class="title-ref">jac</span> parameter to curve\_fit
  - [\#5989](https://github.com/scipy/scipy/pull/5989): ENH: Add firls least-squares fitting
  - [\#5990](https://github.com/scipy/scipy/pull/5990): BUG: read tries to handle 20-bit WAV files but shouldn't
  - [\#5991](https://github.com/scipy/scipy/pull/5991): DOC: Cleanup wav read/write docs and add tables for common types
  - [\#5994](https://github.com/scipy/scipy/pull/5994): ENH: Add gesvd method for svd
  - [\#5996](https://github.com/scipy/scipy/pull/5996): MAINT: Wave cleanup
  - [\#5997](https://github.com/scipy/scipy/pull/5997): TST: Break up upfirdn tests & compare to lfilter
  - [\#6001](https://github.com/scipy/scipy/pull/6001): Filter design docs
  - [\#6002](https://github.com/scipy/scipy/pull/6002): COMPAT: Expand compatibility fromnumeric.py
  - [\#6007](https://github.com/scipy/scipy/pull/6007): ENH: Skip conversion of TF to TF in freqresp
  - [\#6009](https://github.com/scipy/scipy/pull/6009): DOC: fix incorrect versionadded for entr, rel\_entr, kl\_div
  - [\#6013](https://github.com/scipy/scipy/pull/6013): Fixed the entropy calculation of the von Mises distribution.
  - [\#6014](https://github.com/scipy/scipy/pull/6014): MAINT: make gamma, rgamma use loggamma for complex arguments
  - [\#6020](https://github.com/scipy/scipy/pull/6020): WIP: ENH: add exact=True factorial for vectors
  - [\#6022](https://github.com/scipy/scipy/pull/6022): Added 'lanczos' to the image interpolation function list.
  - [\#6024](https://github.com/scipy/scipy/pull/6024): BUG: optimize: do not use dummy constraints in SLSQP when no...
  - [\#6025](https://github.com/scipy/scipy/pull/6025): ENH: Boundary value problem solver for ODE systems
  - [\#6029](https://github.com/scipy/scipy/pull/6029): MAINT: Future imports for optimize.\_lsq
  - [\#6030](https://github.com/scipy/scipy/pull/6030): ENH: stats.trap - adding trapezoidal distribution closes \#6028
  - [\#6031](https://github.com/scipy/scipy/pull/6031): MAINT: Some improvements to optimize.\_numdiff
  - [\#6032](https://github.com/scipy/scipy/pull/6032): MAINT: Add special/\_comb.c to .gitignore
  - [\#6033](https://github.com/scipy/scipy/pull/6033): BUG: check the requested approximation rank in interpolative.svd
  - [\#6034](https://github.com/scipy/scipy/pull/6034): DOC: Doc for mannwhitneyu in stats.py corrected
  - [\#6040](https://github.com/scipy/scipy/pull/6040): FIX: Edit the wrong link in f\_oneway
  - [\#6044](https://github.com/scipy/scipy/pull/6044): BUG: (ordqz) always increase parameter lwork by 1.
  - [\#6047](https://github.com/scipy/scipy/pull/6047): ENH: extend special.spence to complex arguments.
  - [\#6049](https://github.com/scipy/scipy/pull/6049): DOC: Add documentation of PR \#5640 to the 0.18.0 release notes
  - [\#6050](https://github.com/scipy/scipy/pull/6050): MAINT: small cleanups related to loggamma
  - [\#6070](https://github.com/scipy/scipy/pull/6070): Add asarray to explicitly cast list to numpy array in wilcoxon...
  - [\#6071](https://github.com/scipy/scipy/pull/6071): DOC: antialiasing filter and link decimate resample, etc.
  - [\#6075](https://github.com/scipy/scipy/pull/6075): MAINT: reimplement special.digamma for complex arguments
  - [\#6080](https://github.com/scipy/scipy/pull/6080): avoid multiple computation in kstest
  - [\#6081](https://github.com/scipy/scipy/pull/6081): Clarified pearson correlation return value
  - [\#6085](https://github.com/scipy/scipy/pull/6085): ENH: allow long indices of sparse matrix with umfpack in spsolve()
  - [\#6086](https://github.com/scipy/scipy/pull/6086): fix description for associated Laguerre polynomials
  - [\#6087](https://github.com/scipy/scipy/pull/6087): Corrected docstring of splrep.
  - [\#6094](https://github.com/scipy/scipy/pull/6094): ENH: special: change zeta signature to zeta(x, q=1)
  - [\#6095](https://github.com/scipy/scipy/pull/6095): BUG: fix integer overflow in special.spence
  - [\#6106](https://github.com/scipy/scipy/pull/6106): Fixed Issue \#6105
  - [\#6116](https://github.com/scipy/scipy/pull/6116): BUG: matrix logarithm edge case
  - [\#6119](https://github.com/scipy/scipy/pull/6119): TST: DeprecationWarnings in stats on python 3.5 closes \#5885
  - [\#6120](https://github.com/scipy/scipy/pull/6120): MAINT: sparse: clean up sputils.isintlike
  - [\#6122](https://github.com/scipy/scipy/pull/6122): DOC: optimize: linprog docs should say minimize instead of maximize
  - [\#6123](https://github.com/scipy/scipy/pull/6123): DOC: optimize: document the <span class="title-ref">fun</span> field in <span class="title-ref">scipy.optimize.OptimizeResult</span>
  - [\#6124](https://github.com/scipy/scipy/pull/6124): Move FFT zero-padding calculation from signaltools to fftpack
  - [\#6125](https://github.com/scipy/scipy/pull/6125): MAINT: improve special.gammainc in the `a ~ x` regime.
  - [\#6130](https://github.com/scipy/scipy/pull/6130): BUG: sparse: Fix COO dot with zero columns
  - [\#6138](https://github.com/scipy/scipy/pull/6138): ENH: stats: Improve behavior of genextreme.sf and genextreme.isf
  - [\#6146](https://github.com/scipy/scipy/pull/6146): MAINT: simplify the expit implementation
  - [\#6151](https://github.com/scipy/scipy/pull/6151): MAINT: special: make generate\_ufuncs.py output deterministic
  - [\#6152](https://github.com/scipy/scipy/pull/6152): TST: special: better test for gammainc at large arguments
  - [\#6153](https://github.com/scipy/scipy/pull/6153): ENH: Make next\_fast\_len public and faster
  - [\#6154](https://github.com/scipy/scipy/pull/6154): fix typo "mush"--\>"must"
  - [\#6155](https://github.com/scipy/scipy/pull/6155): DOC: Fix some incorrect RST definition lists
  - [\#6160](https://github.com/scipy/scipy/pull/6160): make logsumexp error out on a masked array
  - [\#6161](https://github.com/scipy/scipy/pull/6161): added missing bracket to rosen documentation
  - [\#6163](https://github.com/scipy/scipy/pull/6163): ENH: Added "kappa4" and "kappa3" distributions.
  - [\#6164](https://github.com/scipy/scipy/pull/6164): DOC: Minor clean-up in integrate.\_bvp
  - [\#6169](https://github.com/scipy/scipy/pull/6169): Fix mpf\_assert\_allclose to handle iterable results, such as maps
  - [\#6170](https://github.com/scipy/scipy/pull/6170): Fix pchip\_interpolate convenience function
  - [\#6172](https://github.com/scipy/scipy/pull/6172): Corrected misplaced bracket in doc string
  - [\#6175](https://github.com/scipy/scipy/pull/6175): ENH: sparse.csgraph: Pass indices to shortest\_path
  - [\#6178](https://github.com/scipy/scipy/pull/6178): TST: increase test coverage of sf and isf of a generalized extreme...
  - [\#6179](https://github.com/scipy/scipy/pull/6179): TST: avoid a deprecation warning from numpy
  - [\#6181](https://github.com/scipy/scipy/pull/6181): ENH: Boundary conditions for CubicSpline
  - [\#6182](https://github.com/scipy/scipy/pull/6182): DOC: Add examples/graphs to max\_len\_seq
  - [\#6183](https://github.com/scipy/scipy/pull/6183): BLD: update Bento build config files for recent changes.
  - [\#6184](https://github.com/scipy/scipy/pull/6184): BUG: fix issue in io/wavfile for float96 input.
  - [\#6186](https://github.com/scipy/scipy/pull/6186): ENH: Periodic extrapolation for PPoly and BPoly
  - [\#6192](https://github.com/scipy/scipy/pull/6192): MRG: Add circle-CI
  - [\#6193](https://github.com/scipy/scipy/pull/6193): ENH: sparse: avoid setitem densification
  - [\#6196](https://github.com/scipy/scipy/pull/6196): Fixed missing sqrt in docstring of Mahalanobis distance in cdist,...
  - [\#6206](https://github.com/scipy/scipy/pull/6206): MAINT: Minor changes in solve\_bvp
  - [\#6207](https://github.com/scipy/scipy/pull/6207): BUG: linalg: for BLAS, downcast complex256 to complex128, not...
  - [\#6209](https://github.com/scipy/scipy/pull/6209): BUG: io.matlab: avoid buffer overflows in read\_element\_into
  - [\#6210](https://github.com/scipy/scipy/pull/6210): BLD: use setuptools when building.
  - [\#6214](https://github.com/scipy/scipy/pull/6214): BUG: sparse.linalg: fix bug in LGMRES breakdown handling
  - [\#6215](https://github.com/scipy/scipy/pull/6215): MAINT: special: make loggamma use zdiv
  - [\#6220](https://github.com/scipy/scipy/pull/6220): DOC: Add parameter
  - [\#6221](https://github.com/scipy/scipy/pull/6221): ENH: Improve Newton solver for solve\_bvp
  - [\#6223](https://github.com/scipy/scipy/pull/6223): pchip should work for length-2 arrays
  - [\#6224](https://github.com/scipy/scipy/pull/6224): signal.lti: deprecate cross-class properties/setters
  - [\#6229](https://github.com/scipy/scipy/pull/6229): BUG: optimize: avoid an infinite loop in Newton-CG
  - [\#6230](https://github.com/scipy/scipy/pull/6230): Add example for application of gaussian filter
  - [\#6236](https://github.com/scipy/scipy/pull/6236): MAINT: gumbel\_l accuracy
  - [\#6237](https://github.com/scipy/scipy/pull/6237): MAINT: rayleigh accuracy
  - [\#6238](https://github.com/scipy/scipy/pull/6238): MAINT: logistic accuracy
  - [\#6239](https://github.com/scipy/scipy/pull/6239): MAINT: bradford distribution accuracy
  - [\#6240](https://github.com/scipy/scipy/pull/6240): MAINT: avoid bad fmin in l-bfgs-b due to maxfun interruption
  - [\#6241](https://github.com/scipy/scipy/pull/6241): MAINT: weibull\_min accuracy
  - [\#6246](https://github.com/scipy/scipy/pull/6246): ENH: Add \_support\_mask to distributions
  - [\#6247](https://github.com/scipy/scipy/pull/6247): fixed a print error for an example of ode
  - [\#6249](https://github.com/scipy/scipy/pull/6249): MAINT: change x-axis label for stats.probplot to "theoretical...
  - [\#6250](https://github.com/scipy/scipy/pull/6250): DOC: fix typos
  - [\#6251](https://github.com/scipy/scipy/pull/6251): MAINT: constants: filter out test noise from deprecated conversions
  - [\#6252](https://github.com/scipy/scipy/pull/6252): MAINT: io/arff: remove unused variable
  - [\#6253](https://github.com/scipy/scipy/pull/6253): Add examples to scipy.ndimage.filters
  - [\#6254](https://github.com/scipy/scipy/pull/6254): MAINT: special: fix some build warnings
  - [\#6258](https://github.com/scipy/scipy/pull/6258): MAINT: inverse gamma distribution accuracy
  - [\#6260](https://github.com/scipy/scipy/pull/6260): MAINT: signal.decimate - Use discrete-time objects
  - [\#6262](https://github.com/scipy/scipy/pull/6262): BUG: odr: fix string formatting
  - [\#6267](https://github.com/scipy/scipy/pull/6267): TST: fix some test issues in interpolate and stats.
  - [\#6269](https://github.com/scipy/scipy/pull/6269): TST: fix some warnings in the test suite
  - [\#6274](https://github.com/scipy/scipy/pull/6274): ENH: Add sosfiltfilt
  - [\#6276](https://github.com/scipy/scipy/pull/6276): DOC: update release notes for 0.18.0
  - [\#6277](https://github.com/scipy/scipy/pull/6277): MAINT: update the author name mapping
  - [\#6282](https://github.com/scipy/scipy/pull/6282): DOC: Correcting references for scipy.stats.normaltest
  - [\#6283](https://github.com/scipy/scipy/pull/6283): DOC: some more additions to 0.18.0 release notes.
  - [\#6284](https://github.com/scipy/scipy/pull/6284): Add <span class="title-ref">.. versionadded::</span> directive to <span class="title-ref">loggamma</span>.
  - [\#6285](https://github.com/scipy/scipy/pull/6285): BUG: stats: Inconsistency in the multivariate\_normal docstring...
  - [\#6290](https://github.com/scipy/scipy/pull/6290): Add author list, gh-lists to 0.18.0 release notes
  - [\#6293](https://github.com/scipy/scipy/pull/6293): TST: special: relax a test's precision
  - [\#6295](https://github.com/scipy/scipy/pull/6295): BUG: sparse: stop comparing None and int in bsr\_matrix constructor
  - [\#6313](https://github.com/scipy/scipy/pull/6313): MAINT: Fix for python 3.5 travis-ci build problem.
  - [\#6327](https://github.com/scipy/scipy/pull/6327): TST: signal: use assert\_allclose for testing near-equality in...
  - [\#6330](https://github.com/scipy/scipy/pull/6330): BUG: spatial/qhull: allocate qhT via malloc to ensure CRT likes...
  - [\#6332](https://github.com/scipy/scipy/pull/6332): TST: fix stats.iqr test to not emit warnings, and fix line lengths.
  - [\#6334](https://github.com/scipy/scipy/pull/6334): MAINT: special: fix a test for hyp0f1
  - [\#6347](https://github.com/scipy/scipy/pull/6347): TST: spatial.qhull: skip a test on 32-bit platforms
  - [\#6350](https://github.com/scipy/scipy/pull/6350): BUG: optimize/slsqp: don't overwrite an array out of bounds
  - [\#6351](https://github.com/scipy/scipy/pull/6351): BUG: \#6318 Interp1d 'nearest' integer x-axis overflow issue fixed
  - [\#6355](https://github.com/scipy/scipy/pull/6355): Backports for 0.18.0

---

0.18.1-notes.md

---

# SciPy 0.18.1 Release Notes

SciPy 0.18.1 is a bug-fix release with no new features compared to 0.18.0.

## Authors

  - @kleskjr
  - Evgeni Burovski
  - CJ Carey
  - Luca Citi +
  - Yu Feng
  - Ralf Gommers
  - Johannes Schmitz +
  - Josh Wilson
  - Nathan Woods

A total of 9 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 0.18.1

  - [\#6357](https://github.com/scipy/scipy/issues/6357): scipy 0.17.1 piecewise cubic hermite interpolation does not return...
  - [\#6420](https://github.com/scipy/scipy/issues/6420): circmean() changed behaviour from 0.17 to 0.18
  - [\#6421](https://github.com/scipy/scipy/issues/6421): scipy.linalg.solve\_banded overwrites input 'b' when the inversion...
  - [\#6425](https://github.com/scipy/scipy/issues/6425): cKDTree INF bug
  - [\#6435](https://github.com/scipy/scipy/issues/6435): scipy.stats.ks\_2samp returns different values on different computers
  - [\#6458](https://github.com/scipy/scipy/issues/6458): Error in scipy.integrate.dblquad when using variable integration...

### Pull requests for 0.18.1

  - [\#6405](https://github.com/scipy/scipy/pull/6405): BUG: sparse: fix elementwise divide for CSR/CSC
  - [\#6431](https://github.com/scipy/scipy/pull/6431): BUG: result for insufficient neighbours from cKDTree is wrong.
  - [\#6432](https://github.com/scipy/scipy/pull/6432): BUG Issue \#6421: scipy.linalg.solve\_banded overwrites input 'b'...
  - [\#6455](https://github.com/scipy/scipy/pull/6455): DOC: add links to release notes
  - [\#6462](https://github.com/scipy/scipy/pull/6462): BUG: interpolate: fix .roots method of PchipInterpolator
  - [\#6492](https://github.com/scipy/scipy/pull/6492): BUG: Fix regression in dblquad: \#6458
  - [\#6543](https://github.com/scipy/scipy/pull/6543): fix the regression in circmean
  - [\#6545](https://github.com/scipy/scipy/pull/6545): Revert gh-5938, restore ks\_2samp
  - [\#6557](https://github.com/scipy/scipy/pull/6557): Backports for 0.18.1

---

0.19.0-notes.md

---

# SciPy 0.19.0 Release Notes

<div class="contents">

</div>

SciPy 0.19.0 is the culmination of 7 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.19.x branch, and on adding new features on the master branch.

This release requires Python 2.7 or 3.4-3.6 and NumPy 1.8.2 or greater.

Highlights of this release include:

  - A unified foreign function interface layer, <span class="title-ref">scipy.LowLevelCallable</span>.
  - Cython API for scalar, typed versions of the universal functions from the <span class="title-ref">scipy.special</span> module, via <span class="title-ref">cimport scipy.special.cython\_special</span>.

## New features

### Foreign function interface improvements

<span class="title-ref">scipy.LowLevelCallable</span> provides a new unified interface for wrapping low-level compiled callback functions in the Python space. It supports Cython imported "api" functions, ctypes function pointers, CFFI function pointers, `PyCapsules`, Numba jitted functions and more. See [gh-6509](https://github.com/scipy/scipy/pull/6509) for details.

### <span class="title-ref">scipy.linalg</span> improvements

The function <span class="title-ref">scipy.linalg.solve</span> obtained two more keywords `assume_a` and `transposed`. The underlying LAPACK routines are replaced with "expert" versions and now can also be used to solve symmetric, hermitian and positive definite coefficient matrices. Moreover, ill-conditioned matrices now cause a warning to be emitted with the estimated condition number information. Old `sym_pos` keyword is kept for backwards compatibility reasons however it is identical to using `assume_a='pos'`. Moreover, the `debug` keyword, which had no function but only printing the `overwrite_<a, b>` values, is deprecated.

The function <span class="title-ref">scipy.linalg.matrix\_balance</span> was added to perform the so-called matrix balancing using the LAPACK xGEBAL routine family. This can be used to approximately equate the row and column norms through diagonal similarity transformations.

The functions <span class="title-ref">scipy.linalg.solve\_continuous\_are</span> and <span class="title-ref">scipy.linalg.solve\_discrete\_are</span> have numerically more stable algorithms. These functions can also solve generalized algebraic matrix Riccati equations. Moreover, both gained a `balanced` keyword to turn balancing on and off.

### <span class="title-ref">scipy.spatial</span> improvements

<span class="title-ref">scipy.spatial.SphericalVoronoi.sort\_vertices\_of\_regions</span> has been re-written in Cython to improve performance.

<span class="title-ref">scipy.spatial.SphericalVoronoi</span> can handle \> 200 k points (at least 10 million) and has improved performance.

The function <span class="title-ref">scipy.spatial.distance.directed\_hausdorff</span> was added to calculate the directed Hausdorff distance.

`count_neighbors` method of <span class="title-ref">scipy.spatial.cKDTree</span> gained an ability to perform weighted pair counting via the new keywords `weights` and `cumulative`. See [gh-5647](https://github.com/scipy/scipy/pull/5647) for details.

<span class="title-ref">scipy.spatial.distance.pdist</span> and <span class="title-ref">scipy.spatial.distance.cdist</span> now support non-double custom metrics.

### <span class="title-ref">scipy.ndimage</span> improvements

The callback function C API supports PyCapsules in Python 2.7

Multidimensional filters now allow having different extrapolation modes for different axes.

### <span class="title-ref">scipy.optimize</span> improvements

The <span class="title-ref">scipy.optimize.basinhopping</span> global minimizer obtained a new keyword, <span class="title-ref">seed</span>, which can be used to seed the random number generator and obtain repeatable minimizations.

The keyword <span class="title-ref">sigma</span> in <span class="title-ref">scipy.optimize.curve\_fit</span> was overloaded to also accept the covariance matrix of errors in the data.

### <span class="title-ref">scipy.signal</span> improvements

The function <span class="title-ref">scipy.signal.correlate</span> and <span class="title-ref">scipy.signal.convolve</span> have a new optional parameter <span class="title-ref">method</span>. The default value of <span class="title-ref">auto</span> estimates the fastest of two computation methods, the direct approach and the Fourier transform approach.

A new function has been added to choose the convolution/correlation method, <span class="title-ref">scipy.signal.choose\_conv\_method</span> which may be appropriate if convolutions or correlations are performed on many arrays of the same size.

New functions have been added to calculate complex short time fourier transforms of an input signal, and to invert the transform to recover the original signal: <span class="title-ref">scipy.signal.stft</span> and <span class="title-ref">scipy.signal.istft</span>. This implementation also fixes the previously incorrect output of <span class="title-ref">scipy.signal.spectrogram</span> when complex output data were requested.

The function <span class="title-ref">scipy.signal.sosfreqz \<scipy.signal.freqz\_sos\></span> was added to compute the frequency response from second-order sections.

The function <span class="title-ref">scipy.signal.unit\_impulse</span> was added to conveniently generate an impulse function.

The function <span class="title-ref">scipy.signal.iirnotch</span> was added to design second-order IIR notch filters that can be used to remove a frequency component from a signal. The dual function <span class="title-ref">scipy.signal.iirpeak</span> was added to compute the coefficients of a second-order IIR peak (resonant) filter.

The function <span class="title-ref">scipy.signal.minimum\_phase</span> was added to convert linear-phase FIR filters to minimum phase.

The functions <span class="title-ref">scipy.signal.upfirdn</span> and <span class="title-ref">scipy.signal.resample\_poly</span> are now substantially faster when operating on some n-dimensional arrays when n \> 1. The largest reduction in computation time is realized in cases where the size of the array is small (\<1k samples or so) along the axis to be filtered.

### <span class="title-ref">scipy.fftpack</span> improvements

Fast Fourier transform routines now accept <span class="title-ref">np.float16</span> inputs and upcast them to <span class="title-ref">np.float32</span>. Previously, they would raise an error.

### <span class="title-ref">scipy.cluster</span> improvements

Methods `"centroid"` and `"median"` of <span class="title-ref">scipy.cluster.hierarchy.linkage</span> have been significantly sped up. Long-standing issues with using `linkage` on large input data (over 16 GB) have been resolved.

### <span class="title-ref">scipy.sparse</span> improvements

The functions <span class="title-ref">scipy.sparse.save\_npz</span> and <span class="title-ref">scipy.sparse.load\_npz</span> were added, providing simple serialization for some sparse formats.

The <span class="title-ref">prune</span> method of classes <span class="title-ref">bsr\_matrix</span>, <span class="title-ref">csc\_matrix</span>, and <span class="title-ref">csr\_matrix</span> was updated to reallocate backing arrays under certain conditions, reducing memory usage.

The methods <span class="title-ref">argmin</span> and <span class="title-ref">argmax</span> were added to classes <span class="title-ref">coo\_matrix</span>, <span class="title-ref">csc\_matrix</span>, <span class="title-ref">csr\_matrix</span>, and <span class="title-ref">bsr\_matrix</span>.

New function <span class="title-ref">scipy.sparse.csgraph.structural\_rank</span> computes the structural rank of a graph with a given sparsity pattern.

New function <span class="title-ref">scipy.sparse.linalg.spsolve\_triangular</span> solves a sparse linear system with a triangular left hand side matrix.

### <span class="title-ref">scipy.special</span> improvements

Scalar, typed versions of universal functions from <span class="title-ref">scipy.special</span> are available in the Cython space via `cimport` from the new module <span class="title-ref">scipy.special.cython\_special</span>. These scalar functions can be expected to be significantly faster then the universal functions for scalar arguments. See the <span class="title-ref">scipy.special</span> tutorial for details.

Better control over special-function errors is offered by the functions <span class="title-ref">scipy.special.geterr</span> and <span class="title-ref">scipy.special.seterr</span> and the context manager <span class="title-ref">scipy.special.errstate</span>.

The names of orthogonal polynomial root functions have been changed to be consistent with other functions relating to orthogonal polynomials. For example, `scipy.special.j_roots` has been renamed <span class="title-ref">scipy.special.roots\_jacobi</span> for consistency with the related functions <span class="title-ref">scipy.special.jacobi</span> and <span class="title-ref">scipy.special.eval\_jacobi</span>. To preserve back-compatibility the old names have been left as aliases.

Wright Omega function is implemented as <span class="title-ref">scipy.special.wrightomega</span>.

### <span class="title-ref">scipy.stats</span> improvements

The function <span class="title-ref">scipy.stats.weightedtau</span> was added. It provides a weighted version of Kendall's tau.

New class <span class="title-ref">scipy.stats.multinomial</span> implements the multinomial distribution.

New class <span class="title-ref">scipy.stats.rv\_histogram</span> constructs a continuous univariate distribution with a piecewise linear CDF from a binned data sample.

New class <span class="title-ref">scipy.stats.argus</span> implements the Argus distribution.

### <span class="title-ref">scipy.interpolate</span> improvements

New class <span class="title-ref">scipy.interpolate.BSpline</span> represents splines. `BSpline` objects contain knots and coefficients and can evaluate the spline. The format is consistent with FITPACK, so that one can do, for example:

    >>> t, c, k = splrep(x, y, s=0)
    >>> spl = BSpline(t, c, k)
    >>> np.allclose(spl(x), y)

`spl*` functions, <span class="title-ref">scipy.interpolate.splev</span>, <span class="title-ref">scipy.interpolate.splint</span>, <span class="title-ref">scipy.interpolate.splder</span> and <span class="title-ref">scipy.interpolate.splantider</span>, accept both `BSpline` objects and `(t, c, k)` tuples for backwards compatibility.

For multidimensional splines, `c.ndim > 1`, `BSpline` objects are consistent with piecewise polynomials, <span class="title-ref">scipy.interpolate.PPoly</span>. This means that `BSpline` objects are not immediately consistent with <span class="title-ref">scipy.interpolate.splprep</span>, and one *cannot* do `>>> BSpline(*splprep([x, y])[0])`. Consult the <span class="title-ref">scipy.interpolate</span> test suite for examples of the precise equivalence.

In new code, prefer using `scipy.interpolate.BSpline` objects instead of manipulating `(t, c, k)` tuples directly.

New function <span class="title-ref">scipy.interpolate.make\_interp\_spline</span> constructs an interpolating spline given data points and boundary conditions.

New function <span class="title-ref">scipy.interpolate.make\_lsq\_spline</span> constructs a least-squares spline approximation given data points.

### <span class="title-ref">scipy.integrate</span> improvements

Now <span class="title-ref">scipy.integrate.fixed\_quad</span> supports vector-valued functions.

## Deprecated features

<span class="title-ref">scipy.interpolate.splmake</span>, <span class="title-ref">scipy.interpolate.spleval</span> and <span class="title-ref">scipy.interpolate.spline</span> are deprecated. The format used by <span class="title-ref">splmake/spleval</span> was inconsistent with <span class="title-ref">splrep/splev</span> which was confusing to users.

<span class="title-ref">scipy.special.errprint</span> is deprecated. Improved functionality is available in <span class="title-ref">scipy.special.seterr</span>.

calling <span class="title-ref">scipy.spatial.distance.pdist</span> or <span class="title-ref">scipy.spatial.distance.cdist</span> with arguments not needed by the chosen metric is deprecated. Also, metrics <span class="title-ref">"old\_cosine"</span> and <span class="title-ref">"old\_cos"</span> are deprecated.

## Backwards incompatible changes

The deprecated `scipy.weave` submodule was removed.

<span class="title-ref">scipy.spatial.distance.squareform</span> now returns arrays of the same dtype as the input, instead of always float64.

<span class="title-ref">scipy.special.errprint</span> now returns a boolean.

The function <span class="title-ref">scipy.signal.find\_peaks\_cwt</span> now returns an array instead of a list.

<span class="title-ref">scipy.stats.kendalltau</span> now computes the correct p-value in case the input contains ties. The p-value is also identical to that computed by <span class="title-ref">scipy.stats.mstats.kendalltau</span> and by R. If the input does not contain ties there is no change w.r.t. the previous implementation.

The function <span class="title-ref">scipy.linalg.block\_diag</span> will not ignore zero-sized matrices anymore. Instead it will insert rows or columns of zeros of the appropriate size. See gh-4908 for more details.

## Other changes

SciPy wheels will now report their dependency on `numpy` on all platforms. This change was made because Numpy wheels are available, and because the pip upgrade behavior is finally changing for the better (use `--upgrade-strategy=only-if-needed` for `pip >= 8.2`; that behavior will become the default in the next major version of `pip`).

Numerical values returned by <span class="title-ref">scipy.interpolate.interp1d</span> with `kind="cubic"` and `"quadratic"` may change relative to previous scipy versions. If your code depended on specific numeric values (i.e., on implementation details of the interpolators), you may want to double-check your results.

## Authors

  - @endolith
  - Max Argus +
  - Hervé Audren
  - Alessandro Pietro Bardelli +
  - Michael Benfield +
  - Felix Berkenkamp
  - Matthew Brett
  - Per Brodtkorb
  - Evgeni Burovski
  - Pierre de Buyl
  - CJ Carey
  - Brandon Carter +
  - Tim Cera
  - Klesk Chonkin
  - Christian Häggström +
  - Luca Citi
  - Peadar Coyle +
  - Daniel da Silva +
  - Greg Dooper +
  - John Draper +
  - drlvk +
  - David Ellis +
  - Yu Feng
  - Baptiste Fontaine +
  - Jed Frey +
  - Siddhartha Gandhi +
  - Wim Glenn +
  - Akash Goel +
  - Christoph Gohlke
  - Ralf Gommers
  - Alexander Goncearenco +
  - Richard Gowers +
  - Alex Griffing
  - Radoslaw Guzinski +
  - Charles Harris
  - Callum Jacob Hays +
  - Ian Henriksen
  - Randy Heydon +
  - Lindsey Hiltner +
  - Gerrit Holl +
  - Hiroki IKEDA +
  - jfinkels +
  - Mher Kazandjian +
  - Thomas Keck +
  - keuj6 +
  - Kornel Kielczewski +
  - Sergey B Kirpichev +
  - Vasily Kokorev +
  - Eric Larson
  - Denis Laxalde
  - Gregory R. Lee
  - Josh Lefler +
  - Julien Lhermitte +
  - Evan Limanto +
  - Jin-Guo Liu +
  - Nikolay Mayorov
  - Geordie McBain +
  - Josue Melka +
  - Matthieu Melot
  - michaelvmartin15 +
  - Surhud More +
  - Brett M. Morris +
  - Chris Mutel +
  - Paul Nation
  - Andrew Nelson
  - David Nicholson +
  - Aaron Nielsen +
  - Joel Nothman
  - nrnrk +
  - Juan Nunez-Iglesias
  - Mikhail Pak +
  - Gavin Parnaby +
  - Thomas Pingel +
  - Ilhan Polat +
  - Aman Pratik +
  - Sebastian Pucilowski
  - Ted Pudlik
  - puenka +
  - Eric Quintero
  - Tyler Reddy
  - Joscha Reimer
  - Antonio Horta Ribeiro +
  - Edward Richards +
  - Roman Ring +
  - Rafael Rossi +
  - Colm Ryan +
  - Sami Salonen +
  - Alvaro Sanchez-Gonzalez +
  - Johannes Schmitz
  - Kari Schoonbee
  - Yurii Shevchuk +
  - Jonathan Siebert +
  - Jonathan Tammo Siebert +
  - Scott Sievert +
  - Sourav Singh
  - Byron Smith +
  - Srikiran +
  - Samuel St-Jean +
  - Yoni Teitelbaum +
  - Bhavika Tekwani
  - Martin Thoma
  - timbalam +
  - Svend Vanderveken +
  - Sebastiano Vigna +
  - Aditya Vijaykumar +
  - Santi Villalba +
  - Ze Vinicius
  - Pauli Virtanen
  - Matteo Visconti
  - Yusuke Watanabe +
  - Warren Weckesser
  - Phillip Weinberg +
  - Nils Werner
  - Jakub Wilk
  - Josh Wilson
  - wirew0rm +
  - David Wolever +
  - Nathan Woods
  - ybeltukov +
  - G Young
  - Evgeny Zhurko +

A total of 121 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 0.19.0

  - [\#1767](https://github.com/scipy/scipy/issues/1767): Function definitions in \_\_fitpack.h should be moved. (Trac \#1240)
  - [\#1774](https://github.com/scipy/scipy/issues/1774): \_kmeans chokes on large thresholds (Trac \#1247)
  - [\#2089](https://github.com/scipy/scipy/issues/2089): Integer overflows cause segfault in linkage function with large...
  - [\#2190](https://github.com/scipy/scipy/issues/2190): Are odd-length window functions supposed to be always symmetrical?...
  - [\#2251](https://github.com/scipy/scipy/issues/2251): solve\_discrete\_are in scipy.linalg does (sometimes) not solve...
  - [\#2580](https://github.com/scipy/scipy/issues/2580): scipy.interpolate.UnivariateSpline (or a new superclass of it)...
  - [\#2592](https://github.com/scipy/scipy/issues/2592): scipy.stats.anderson assumes gumbel\_l
  - [\#3054](https://github.com/scipy/scipy/issues/3054): scipy.linalg.eig does not handle infinite eigenvalues
  - [\#3160](https://github.com/scipy/scipy/issues/3160): multinomial pmf / logpmf
  - [\#3904](https://github.com/scipy/scipy/issues/3904): scipy.special.ellipj dn wrong values at quarter period
  - [\#4044](https://github.com/scipy/scipy/issues/4044): Inconsistent code book initialization in kmeans
  - [\#4234](https://github.com/scipy/scipy/issues/4234): scipy.signal.flattop documentation doesn't list a source for...
  - [\#4831](https://github.com/scipy/scipy/issues/4831): Bugs in C code in \_\_quadpack.h
  - [\#4908](https://github.com/scipy/scipy/issues/4908): bug: unnessesary validity check for block dimension in scipy.sparse.block\_diag
  - [\#4917](https://github.com/scipy/scipy/issues/4917): BUG: indexing error for sparse matrix with ix\_
  - [\#4938](https://github.com/scipy/scipy/issues/4938): Docs on extending ndimage need to be updated.
  - [\#5056](https://github.com/scipy/scipy/issues/5056): sparse matrix element-wise multiplying dense matrix returns dense...
  - [\#5337](https://github.com/scipy/scipy/issues/5337): Formula in documentation for correlate is wrong
  - [\#5537](https://github.com/scipy/scipy/issues/5537): use OrderedDict in io.netcdf
  - [\#5750](https://github.com/scipy/scipy/issues/5750): \[doc\] missing data index value in KDTree, cKDTree
  - [\#5755](https://github.com/scipy/scipy/issues/5755): p-value computation in scipy.stats.kendalltau() in broken in...
  - [\#5757](https://github.com/scipy/scipy/issues/5757): BUG: Incorrect complex output of signal.spectrogram
  - [\#5964](https://github.com/scipy/scipy/issues/5964): ENH: expose scalar versions of scipy.special functions to cython
  - [\#6107](https://github.com/scipy/scipy/issues/6107): scipy.cluster.hierarchy.single segmentation fault with 2\*\*16...
  - [\#6278](https://github.com/scipy/scipy/issues/6278): optimize.basinhopping should take a RandomState object
  - [\#6296](https://github.com/scipy/scipy/issues/6296): InterpolatedUnivariateSpline: check\_finite fails when w is unspecified
  - [\#6306](https://github.com/scipy/scipy/issues/6306): Anderson-Darling bad results
  - [\#6314](https://github.com/scipy/scipy/issues/6314): scipy.stats.kendaltau() p value not in agreement with R, SPSS...
  - [\#6340](https://github.com/scipy/scipy/issues/6340): Curve\_fit bounds and maxfev
  - [\#6377](https://github.com/scipy/scipy/issues/6377): expm\_multiply, complex matrices not working using start,stop,etc...
  - [\#6382](https://github.com/scipy/scipy/issues/6382): optimize.differential\_evolution stopping criterion has unintuitive...
  - [\#6391](https://github.com/scipy/scipy/issues/6391): Global Benchmarking times out at 600s.
  - [\#6397](https://github.com/scipy/scipy/issues/6397): mmwrite errors with large (but still 64-bit) integers
  - [\#6413](https://github.com/scipy/scipy/issues/6413): scipy.stats.dirichlet computes multivariate gaussian differential...
  - [\#6428](https://github.com/scipy/scipy/issues/6428): scipy.stats.mstats.mode modifies input
  - [\#6440](https://github.com/scipy/scipy/issues/6440): Figure out ABI break policy for scipy.special Cython API
  - [\#6441](https://github.com/scipy/scipy/issues/6441): Using Qhull for halfspace intersection : segfault
  - [\#6442](https://github.com/scipy/scipy/issues/6442): scipy.spatial : In incremental mode volume is not recomputed
  - [\#6451](https://github.com/scipy/scipy/issues/6451): Documentation for scipy.cluster.hierarchy.to\_tree is confusing...
  - [\#6490](https://github.com/scipy/scipy/issues/6490): interp1d (kind=zero) returns wrong value for rightmost interpolation...
  - [\#6521](https://github.com/scipy/scipy/issues/6521): scipy.stats.entropy does *not* calculate the KL divergence
  - [\#6530](https://github.com/scipy/scipy/issues/6530): scipy.stats.spearmanr unexpected NaN handling
  - [\#6541](https://github.com/scipy/scipy/issues/6541): Test runner does not run scipy.\_lib/tests?
  - [\#6552](https://github.com/scipy/scipy/issues/6552): BUG: misc.bytescale returns unexpected results when using cmin/cmax...
  - [\#6556](https://github.com/scipy/scipy/issues/6556): RectSphereBivariateSpline(u, v, r) fails if min(v) \>= pi
  - [\#6559](https://github.com/scipy/scipy/issues/6559): Differential\_evolution maxiter causing memory overflow
  - [\#6565](https://github.com/scipy/scipy/issues/6565): Coverage of spectral functions could be improved
  - [\#6628](https://github.com/scipy/scipy/issues/6628): Incorrect parameter name in binomial documentation
  - [\#6634](https://github.com/scipy/scipy/issues/6634): Expose LAPACK's xGESVX family for linalg.solve ill-conditioned...
  - [\#6657](https://github.com/scipy/scipy/issues/6657): Confusing documentation for <span class="title-ref">scipy.special.sph\_harm</span>
  - [\#6676](https://github.com/scipy/scipy/issues/6676): optimize: Incorrect size of Jacobian returned by \`minimize(...,...
  - [\#6681](https://github.com/scipy/scipy/issues/6681): add a new context manager to wrap <span class="title-ref">scipy.special.seterr</span>
  - [\#6700](https://github.com/scipy/scipy/issues/6700): BUG: scipy.io.wavfile.read stays in infinite loop, warns on wav...
  - [\#6721](https://github.com/scipy/scipy/issues/6721): scipy.special.chebyt(N) throw a 'TypeError' when N \> 64
  - [\#6727](https://github.com/scipy/scipy/issues/6727): Documentation for scipy.stats.norm.fit is incorrect
  - [\#6764](https://github.com/scipy/scipy/issues/6764): Documentation for scipy.spatial.Delaunay is partially incorrect
  - [\#6811](https://github.com/scipy/scipy/issues/6811): scipy.spatial.SphericalVoronoi fails for large number of points
  - [\#6841](https://github.com/scipy/scipy/issues/6841): spearmanr fails when nan\_policy='omit' is set
  - [\#6869](https://github.com/scipy/scipy/issues/6869): Currently in gaussian\_kde, the logpdf function is calculated...
  - [\#6875](https://github.com/scipy/scipy/issues/6875): SLSQP inconsistent handling of invalid bounds
  - [\#6876](https://github.com/scipy/scipy/issues/6876): Python stopped working (Segfault?) with minimum/maximum filter...
  - [\#6889](https://github.com/scipy/scipy/issues/6889): dblquad gives different results under scipy 0.17.1 and 0.18.1
  - [\#6898](https://github.com/scipy/scipy/issues/6898): BUG: dblquad ignores error tolerances
  - [\#6901](https://github.com/scipy/scipy/issues/6901): Solving sparse linear systems in CSR format with complex values
  - [\#6903](https://github.com/scipy/scipy/issues/6903): issue in spatial.distance.pdist docstring
  - [\#6917](https://github.com/scipy/scipy/issues/6917): Problem in passing drop\_rule to scipy.sparse.linalg.spilu
  - [\#6926](https://github.com/scipy/scipy/issues/6926): signature mismatches for LowLevelCallable
  - [\#6961](https://github.com/scipy/scipy/issues/6961): Scipy contains shebang pointing to /usr/bin/python and /bin/bash...
  - [\#6972](https://github.com/scipy/scipy/issues/6972): BUG: special: <span class="title-ref">generate\_ufuncs.py</span> is broken
  - [\#6984](https://github.com/scipy/scipy/issues/6984): Assert raises test failure for test\_ill\_condition\_warning
  - [\#6990](https://github.com/scipy/scipy/issues/6990): BUG: sparse: Bad documentation of the <span class="title-ref">k</span> argument in <span class="title-ref">sparse.linalg.eigs</span>
  - [\#6991](https://github.com/scipy/scipy/issues/6991): Division by zero in linregress()
  - [\#7011](https://github.com/scipy/scipy/issues/7011): possible speed improvment in rv\_continuous.fit()
  - [\#7015](https://github.com/scipy/scipy/issues/7015): Test failure with Python 3.5 and numpy master
  - [\#7055](https://github.com/scipy/scipy/issues/7055): SciPy 0.19.0rc1 test errors and failures on Windows
  - [\#7096](https://github.com/scipy/scipy/issues/7096): macOS test failues for test\_solve\_continuous\_are
  - [\#7100](https://github.com/scipy/scipy/issues/7100): test\_distance.test\_Xdist\_deprecated\_args test error in 0.19.0rc2

### Pull requests for 0.19.0

  - [\#2908](https://github.com/scipy/scipy/pull/2908): Scipy 1.0 Roadmap
  - [\#3174](https://github.com/scipy/scipy/pull/3174): add b-splines
  - [\#4606](https://github.com/scipy/scipy/pull/4606): ENH: Add a unit impulse waveform function
  - [\#5608](https://github.com/scipy/scipy/pull/5608): Adds keyword argument to choose faster convolution method
  - [\#5647](https://github.com/scipy/scipy/pull/5647): ENH: Faster count\_neighour in cKDTree / + weighted input data
  - [\#6021](https://github.com/scipy/scipy/pull/6021): Netcdf append
  - [\#6058](https://github.com/scipy/scipy/pull/6058): ENH: scipy.signal - Add stft and istft
  - [\#6059](https://github.com/scipy/scipy/pull/6059): ENH: More accurate signal.freqresp for zpk systems
  - [\#6195](https://github.com/scipy/scipy/pull/6195): ENH: Cython interface for special
  - [\#6234](https://github.com/scipy/scipy/pull/6234): DOC: Fixed a typo in ward() help
  - [\#6261](https://github.com/scipy/scipy/pull/6261): ENH: add docstring and clean up code for signal.normalize
  - [\#6270](https://github.com/scipy/scipy/pull/6270): MAINT: special: add tests for cdflib
  - [\#6271](https://github.com/scipy/scipy/pull/6271): Fix for scipy.cluster.hierarchy.is\_isomorphic
  - [\#6273](https://github.com/scipy/scipy/pull/6273): optimize: rewrite while loops as for loops
  - [\#6279](https://github.com/scipy/scipy/pull/6279): MAINT: Bessel tweaks
  - [\#6291](https://github.com/scipy/scipy/pull/6291): Fixes gh-6219: remove runtime warning from genextreme distribution
  - [\#6294](https://github.com/scipy/scipy/pull/6294): STY: Some PEP8 and cleaning up imports in stats/\_continuous\_distns.py
  - [\#6297](https://github.com/scipy/scipy/pull/6297): Clarify docs in misc/\_\_init\_\_.py
  - [\#6300](https://github.com/scipy/scipy/pull/6300): ENH: sparse: Loosen input validation for <span class="title-ref">diags</span> with empty inputs
  - [\#6301](https://github.com/scipy/scipy/pull/6301): BUG: standardizes check\_finite behavior re optional weights,...
  - [\#6303](https://github.com/scipy/scipy/pull/6303): Fixing example in \_lazyselect docstring.
  - [\#6307](https://github.com/scipy/scipy/pull/6307): MAINT: more improvements to gammainc/gammaincc
  - [\#6308](https://github.com/scipy/scipy/pull/6308): Clarified documentation of hypergeometric distribution.
  - [\#6309](https://github.com/scipy/scipy/pull/6309): BUG: stats: Improve calculation of the Anderson-Darling statistic.
  - [\#6315](https://github.com/scipy/scipy/pull/6315): ENH: Descending order of x in PPoly
  - [\#6317](https://github.com/scipy/scipy/pull/6317): ENH: stats: Add support for nan\_policy to stats.median\_test
  - [\#6321](https://github.com/scipy/scipy/pull/6321): TST: fix a typo in test name
  - [\#6328](https://github.com/scipy/scipy/pull/6328): ENH: sosfreqz
  - [\#6335](https://github.com/scipy/scipy/pull/6335): Define LinregressResult outside of linregress
  - [\#6337](https://github.com/scipy/scipy/pull/6337): In anderson test, added support for right skewed gumbel distribution.
  - [\#6341](https://github.com/scipy/scipy/pull/6341): Accept several spellings for the curve\_fit max number of function...
  - [\#6342](https://github.com/scipy/scipy/pull/6342): DOC: cluster: clarify hierarchy.linkage usage
  - [\#6352](https://github.com/scipy/scipy/pull/6352): DOC: removed brentq from its own 'see also'
  - [\#6362](https://github.com/scipy/scipy/pull/6362): ENH: stats: Use explicit formulas for sf, logsf, etc in weibull...
  - [\#6369](https://github.com/scipy/scipy/pull/6369): MAINT: special: add a comment to hyp0f1\_complex
  - [\#6375](https://github.com/scipy/scipy/pull/6375): Added the multinomial distribution.
  - [\#6387](https://github.com/scipy/scipy/pull/6387): MAINT: special: improve accuracy of ellipj's <span class="title-ref">dn</span> at quarter...
  - [\#6388](https://github.com/scipy/scipy/pull/6388): BenchmarkGlobal - getting it to work in Python3
  - [\#6394](https://github.com/scipy/scipy/pull/6394): ENH: scipy.sparse: add save and load functions for sparse matrices
  - [\#6400](https://github.com/scipy/scipy/pull/6400): MAINT: moves global benchmark run from setup\_cache to track\_all
  - [\#6403](https://github.com/scipy/scipy/pull/6403): ENH: seed kwd for basinhopping. Closes \#6278
  - [\#6404](https://github.com/scipy/scipy/pull/6404): ENH: signal: added irrnotch and iirpeak functions.
  - [\#6406](https://github.com/scipy/scipy/pull/6406): ENH: special: extend <span class="title-ref">sici</span>/<span class="title-ref">shichi</span> to complex arguments
  - [\#6407](https://github.com/scipy/scipy/pull/6407): ENH: Window functions should not accept non-integer or negative...
  - [\#6408](https://github.com/scipy/scipy/pull/6408): MAINT: \_differentialevolution now uses \_lib.\_util.check\_random\_state
  - [\#6427](https://github.com/scipy/scipy/pull/6427): MAINT: Fix gmpy build & test that mpmath uses gmpy
  - [\#6439](https://github.com/scipy/scipy/pull/6439): MAINT: ndimage: update callback function c api
  - [\#6443](https://github.com/scipy/scipy/pull/6443): BUG: Fix volume computation in incremental mode
  - [\#6447](https://github.com/scipy/scipy/pull/6447): Fixes issue \#6413 - Minor documentation fix in the entropy function...
  - [\#6448](https://github.com/scipy/scipy/pull/6448): ENH: Add halfspace mode to Qhull
  - [\#6449](https://github.com/scipy/scipy/pull/6449): ENH: rtol and atol for differential\_evolution termination fixes...
  - [\#6453](https://github.com/scipy/scipy/pull/6453): DOC: Add some See Also links between similar functions
  - [\#6454](https://github.com/scipy/scipy/pull/6454): DOC: linalg: clarify callable signature in <span class="title-ref">ordqz</span>
  - [\#6457](https://github.com/scipy/scipy/pull/6457): ENH: spatial: enable non-double dtypes in squareform
  - [\#6459](https://github.com/scipy/scipy/pull/6459): BUG: Complex matrices not handled correctly by expm\_multiply...
  - [\#6465](https://github.com/scipy/scipy/pull/6465): TST DOC Window docs, tests, etc.
  - [\#6469](https://github.com/scipy/scipy/pull/6469): ENH: linalg: better handling of infinite eigenvalues in <span class="title-ref">eig</span>/<span class="title-ref">eigvals</span>
  - [\#6475](https://github.com/scipy/scipy/pull/6475): DOC: calling interp1d/interp2d with NaNs is undefined
  - [\#6477](https://github.com/scipy/scipy/pull/6477): Document magic numbers in optimize.py
  - [\#6481](https://github.com/scipy/scipy/pull/6481): TST: Supress some warnings from test\_windows
  - [\#6485](https://github.com/scipy/scipy/pull/6485): DOC: spatial: correct typo in procrustes
  - [\#6487](https://github.com/scipy/scipy/pull/6487): Fix Bray-Curtis formula in pdist docstring
  - [\#6493](https://github.com/scipy/scipy/pull/6493): ENH: Add covariance functionality to scipy.optimize.curve\_fit
  - [\#6494](https://github.com/scipy/scipy/pull/6494): ENH: stats: Use log1p() to improve some calculations.
  - [\#6495](https://github.com/scipy/scipy/pull/6495): BUG: Use MST algorithm instead of SLINK for single linkage clustering
  - [\#6497](https://github.com/scipy/scipy/pull/6497): MRG: Add minimum\_phase filter function
  - [\#6505](https://github.com/scipy/scipy/pull/6505): reset scipy.signal.resample window shape to 1-D
  - [\#6507](https://github.com/scipy/scipy/pull/6507): BUG: linkage: Raise exception if y contains non-finite elements
  - [\#6509](https://github.com/scipy/scipy/pull/6509): ENH: \_lib: add common machinery for low-level callback functions
  - [\#6520](https://github.com/scipy/scipy/pull/6520): scipy.sparse.base.\_\_mul\_\_ non-numpy/scipy objects with 'shape'...
  - [\#6522](https://github.com/scipy/scipy/pull/6522): Replace kl\_div by rel\_entr in entropy
  - [\#6524](https://github.com/scipy/scipy/pull/6524): DOC: add next\_fast\_len to list of functions
  - [\#6527](https://github.com/scipy/scipy/pull/6527): DOC: Release notes to reflect the new covariance feature in optimize.curve\_fit
  - [\#6532](https://github.com/scipy/scipy/pull/6532): ENH: Simplify \_cos\_win, document it, add symmetric/periodic arg
  - [\#6535](https://github.com/scipy/scipy/pull/6535): MAINT: sparse.csgraph: updating old cython loops
  - [\#6540](https://github.com/scipy/scipy/pull/6540): DOC: add to documentation of orthogonal polynomials
  - [\#6544](https://github.com/scipy/scipy/pull/6544): TST: Ensure tests for scipy.\_lib are run by scipy.test()
  - [\#6546](https://github.com/scipy/scipy/pull/6546): updated docstring of stats.linregress
  - [\#6553](https://github.com/scipy/scipy/pull/6553): commited changes that I originally submitted for scipy.signal.cspline…
  - [\#6561](https://github.com/scipy/scipy/pull/6561): BUG: modify signal.find\_peaks\_cwt() to return array and accept...
  - [\#6562](https://github.com/scipy/scipy/pull/6562): DOC: Negative binomial distribution clarification
  - [\#6563](https://github.com/scipy/scipy/pull/6563): MAINT: be more liberal in requiring numpy
  - [\#6567](https://github.com/scipy/scipy/pull/6567): MAINT: use xrange for iteration in differential\_evolution fixes...
  - [\#6572](https://github.com/scipy/scipy/pull/6572): BUG: "sp.linalg.solve\_discrete\_are" fails for random data
  - [\#6578](https://github.com/scipy/scipy/pull/6578): BUG: misc: allow both cmin/cmax and low/high params in bytescale
  - [\#6581](https://github.com/scipy/scipy/pull/6581): Fix some unfortunate typos
  - [\#6582](https://github.com/scipy/scipy/pull/6582): MAINT: linalg: make handling of infinite eigenvalues in <span class="title-ref">ordqz</span>...
  - [\#6585](https://github.com/scipy/scipy/pull/6585): DOC: interpolate: correct seealso links to ndimage
  - [\#6588](https://github.com/scipy/scipy/pull/6588): Update docstring of scipy.spatial.distance\_matrix
  - [\#6592](https://github.com/scipy/scipy/pull/6592): DOC: Replace 'first' by 'smallest' in mode
  - [\#6593](https://github.com/scipy/scipy/pull/6593): MAINT: remove scipy.weave submodule
  - [\#6594](https://github.com/scipy/scipy/pull/6594): DOC: distance.squareform: fix html docs, add note about dtype...
  - [\#6598](https://github.com/scipy/scipy/pull/6598): \[DOC\] Fix incorrect error message in medfilt2d
  - [\#6599](https://github.com/scipy/scipy/pull/6599): MAINT: linalg: turn a <span class="title-ref">solve\_discrete\_are</span> test back on
  - [\#6600](https://github.com/scipy/scipy/pull/6600): DOC: Add SOS goals to roadmap
  - [\#6601](https://github.com/scipy/scipy/pull/6601): DEP: Raise minimum numpy version to 1.8.2
  - [\#6605](https://github.com/scipy/scipy/pull/6605): MAINT: 'new' module is deprecated, don't use it
  - [\#6607](https://github.com/scipy/scipy/pull/6607): DOC: add note on change in wheel dependency on numpy and pip...
  - [\#6609](https://github.com/scipy/scipy/pull/6609): Fixes \#6602 - Typo in docs
  - [\#6616](https://github.com/scipy/scipy/pull/6616): ENH: generalization of continuous and discrete Riccati solvers...
  - [\#6621](https://github.com/scipy/scipy/pull/6621): DOC: improve cluster.hierarchy docstrings.
  - [\#6623](https://github.com/scipy/scipy/pull/6623): CS matrix prune method should copy data from large unpruned arrays
  - [\#6625](https://github.com/scipy/scipy/pull/6625): DOC: special: complete documentation of <span class="title-ref">eval\_\*</span> functions
  - [\#6626](https://github.com/scipy/scipy/pull/6626): TST: special: silence some deprecation warnings
  - [\#6631](https://github.com/scipy/scipy/pull/6631): fix parameter name doc for discrete distributions
  - [\#6632](https://github.com/scipy/scipy/pull/6632): MAINT: stats: change some instances of <span class="title-ref">special</span> to <span class="title-ref">sc</span>
  - [\#6633](https://github.com/scipy/scipy/pull/6633): MAINT: refguide: py2k long integers are equal to py3k integers
  - [\#6638](https://github.com/scipy/scipy/pull/6638): MAINT: change type declaration in cluster.linkage, prevent overflow
  - [\#6640](https://github.com/scipy/scipy/pull/6640): BUG: fix issue with duplicate values used in cluster.vq.kmeans
  - [\#6641](https://github.com/scipy/scipy/pull/6641): BUG: fix corner case in cluster.vq.kmeans for large thresholds
  - [\#6643](https://github.com/scipy/scipy/pull/6643): MAINT: clean up truncation modes of dendrogram
  - [\#6645](https://github.com/scipy/scipy/pull/6645): MAINT: special: rename <span class="title-ref">\*\_roots</span> functions
  - [\#6646](https://github.com/scipy/scipy/pull/6646): MAINT: clean up mpmath imports
  - [\#6647](https://github.com/scipy/scipy/pull/6647): DOC: add sqrt to Mahalanobis description for pdist
  - [\#6648](https://github.com/scipy/scipy/pull/6648): DOC: special: add a section on <span class="title-ref">cython\_special</span> to the tutorial
  - [\#6649](https://github.com/scipy/scipy/pull/6649): ENH: Added scipy.spatial.distance.directed\_hausdorff
  - [\#6650](https://github.com/scipy/scipy/pull/6650): DOC: add Sphinx roles for DOI and arXiv links
  - [\#6651](https://github.com/scipy/scipy/pull/6651): BUG: mstats: make sure mode(..., None) does not modify its input
  - [\#6652](https://github.com/scipy/scipy/pull/6652): DOC: special: add section to tutorial on functions not in special
  - [\#6653](https://github.com/scipy/scipy/pull/6653): ENH: special: add the Wright Omega function
  - [\#6656](https://github.com/scipy/scipy/pull/6656): ENH: don't coerce input to double with custom metric in cdist...
  - [\#6658](https://github.com/scipy/scipy/pull/6658): Faster/shorter code for computation of discordances
  - [\#6659](https://github.com/scipy/scipy/pull/6659): DOC: special: make \_\_init\_\_ summaries and html summaries match
  - [\#6661](https://github.com/scipy/scipy/pull/6661): general.rst: Fix a typo
  - [\#6664](https://github.com/scipy/scipy/pull/6664): TST: Spectral functions' window correction factor
  - [\#6665](https://github.com/scipy/scipy/pull/6665): \[DOC\] Conditions on v in RectSphereBivariateSpline
  - [\#6668](https://github.com/scipy/scipy/pull/6668): DOC: Mention negative masses for center of mass
  - [\#6675](https://github.com/scipy/scipy/pull/6675): MAINT: special: remove outdated README
  - [\#6677](https://github.com/scipy/scipy/pull/6677): BUG: Fixes computation of p-values.
  - [\#6679](https://github.com/scipy/scipy/pull/6679): BUG: optimize: return correct Jacobian for method 'SLSQP' in...
  - [\#6680](https://github.com/scipy/scipy/pull/6680): ENH: Add structural rank to sparse.csgraph
  - [\#6686](https://github.com/scipy/scipy/pull/6686): TST: Added Airspeed Velocity benchmarks for SphericalVoronoi
  - [\#6687](https://github.com/scipy/scipy/pull/6687): DOC: add section "deciding on new features" to developer guide.
  - [\#6691](https://github.com/scipy/scipy/pull/6691): ENH: Clearer error when fmin\_slsqp obj doesn't return scalar
  - [\#6702](https://github.com/scipy/scipy/pull/6702): TST: Added airspeed velocity benchmarks for scipy.spatial.distance.cdist
  - [\#6707](https://github.com/scipy/scipy/pull/6707): TST: interpolate: test fitpack wrappers, not \_impl
  - [\#6709](https://github.com/scipy/scipy/pull/6709): TST: fix a number of test failures on 32-bit systems
  - [\#6711](https://github.com/scipy/scipy/pull/6711): MAINT: move function definitions from \_\_fitpack.h to \_fitpackmodule.c
  - [\#6712](https://github.com/scipy/scipy/pull/6712): MAINT: clean up wishlist in stats.morestats, and copyright statement.
  - [\#6715](https://github.com/scipy/scipy/pull/6715): DOC: update the release notes with BSpline et al.
  - [\#6716](https://github.com/scipy/scipy/pull/6716): MAINT: scipy.io.wavfile: No infinite loop when trying to read...
  - [\#6717](https://github.com/scipy/scipy/pull/6717): some style cleanup
  - [\#6723](https://github.com/scipy/scipy/pull/6723): BUG: special: cast to float before in-place multiplication in...
  - [\#6726](https://github.com/scipy/scipy/pull/6726): address performance regressions in interp1d
  - [\#6728](https://github.com/scipy/scipy/pull/6728): DOC: made code examples in <span class="title-ref">integrate</span> tutorial copy-pasteable
  - [\#6731](https://github.com/scipy/scipy/pull/6731): DOC: scipy.optimize: Added an example for wrapping complex-valued...
  - [\#6732](https://github.com/scipy/scipy/pull/6732): MAINT: cython\_special: remove <span class="title-ref">errprint</span>
  - [\#6733](https://github.com/scipy/scipy/pull/6733): MAINT: special: fix some pyflakes warnings
  - [\#6734](https://github.com/scipy/scipy/pull/6734): DOC: sparse.linalg: fixed matrix description in <span class="title-ref">bicgstab</span> doc
  - [\#6737](https://github.com/scipy/scipy/pull/6737): BLD: update <span class="title-ref">cythonize.py</span> to detect changes in pxi files
  - [\#6740](https://github.com/scipy/scipy/pull/6740): DOC: special: some small fixes to docstrings
  - [\#6741](https://github.com/scipy/scipy/pull/6741): MAINT: remove dead code in interpolate.py
  - [\#6742](https://github.com/scipy/scipy/pull/6742): BUG: fix `linalg.block_diag` to support zero-sized matrices.
  - [\#6744](https://github.com/scipy/scipy/pull/6744): ENH: interpolate: make PPoly.from\_spline accept BSpline objects
  - [\#6746](https://github.com/scipy/scipy/pull/6746): DOC: special: clarify use of Condon-Shortley phase in <span class="title-ref">sph\_harm</span>/<span class="title-ref">lpmv</span>
  - [\#6750](https://github.com/scipy/scipy/pull/6750): ENH: sparse: avoid densification on broadcasted elem-wise mult
  - [\#6751](https://github.com/scipy/scipy/pull/6751): sinm doc explained cosm
  - [\#6753](https://github.com/scipy/scipy/pull/6753): ENH: special: allow for more fine-tuned error handling
  - [\#6759](https://github.com/scipy/scipy/pull/6759): Move logsumexp and pade from scipy.misc to scipy.special and...
  - [\#6761](https://github.com/scipy/scipy/pull/6761): ENH: argmax and argmin methods for sparse matrices
  - [\#6762](https://github.com/scipy/scipy/pull/6762): DOC: Improve docstrings of sparse matrices
  - [\#6763](https://github.com/scipy/scipy/pull/6763): ENH: Weighted tau
  - [\#6768](https://github.com/scipy/scipy/pull/6768): ENH: cythonized spherical Voronoi region polygon vertex sorting
  - [\#6770](https://github.com/scipy/scipy/pull/6770): Correction of Delaunay class' documentation
  - [\#6775](https://github.com/scipy/scipy/pull/6775): ENH: Integrating LAPACK "expert" routines with conditioning warnings...
  - [\#6776](https://github.com/scipy/scipy/pull/6776): MAINT: Removing the trivial f2py warnings
  - [\#6777](https://github.com/scipy/scipy/pull/6777): DOC: Update rv\_continuous.fit doc.
  - [\#6778](https://github.com/scipy/scipy/pull/6778): MAINT: cluster.hierarchy: Improved wording of error msgs
  - [\#6786](https://github.com/scipy/scipy/pull/6786): BLD: increase minimum Cython version to 0.23.4
  - [\#6787](https://github.com/scipy/scipy/pull/6787): DOC: expand on `linalg.block_diag` changes in 0.19.0 release...
  - [\#6789](https://github.com/scipy/scipy/pull/6789): ENH: Add further documentation for norm.fit
  - [\#6790](https://github.com/scipy/scipy/pull/6790): MAINT: Fix a potential problem in nn\_chain linkage algorithm
  - [\#6791](https://github.com/scipy/scipy/pull/6791): DOC: Add examples to scipy.ndimage.fourier
  - [\#6792](https://github.com/scipy/scipy/pull/6792): DOC: fix some numpydoc / Sphinx issues.
  - [\#6793](https://github.com/scipy/scipy/pull/6793): MAINT: fix circular import after moving functions out of misc
  - [\#6796](https://github.com/scipy/scipy/pull/6796): TST: test importing each submodule. Regression test for gh-6793.
  - [\#6799](https://github.com/scipy/scipy/pull/6799): ENH: stats: Argus distribution
  - [\#6801](https://github.com/scipy/scipy/pull/6801): ENH: stats: Histogram distribution
  - [\#6803](https://github.com/scipy/scipy/pull/6803): TST: make sure tests for `_build_utils` are run.
  - [\#6804](https://github.com/scipy/scipy/pull/6804): MAINT: more fixes in <span class="title-ref">loggamma</span>
  - [\#6806](https://github.com/scipy/scipy/pull/6806): ENH: Faster linkage for 'centroid' and 'median' methods
  - [\#6810](https://github.com/scipy/scipy/pull/6810): ENH: speed up upfirdn and resample\_poly for n-dimensional arrays
  - [\#6812](https://github.com/scipy/scipy/pull/6812): TST: Added ConvexHull asv benchmark code
  - [\#6814](https://github.com/scipy/scipy/pull/6814): ENH: Different extrapolation modes for different dimensions in...
  - [\#6826](https://github.com/scipy/scipy/pull/6826): Signal spectral window default fix
  - [\#6828](https://github.com/scipy/scipy/pull/6828): BUG: SphericalVoronoi Space Complexity (Fixes \#6811)
  - [\#6830](https://github.com/scipy/scipy/pull/6830): RealData docstring correction
  - [\#6834](https://github.com/scipy/scipy/pull/6834): DOC: Added reference for skewtest function. See \#6829
  - [\#6836](https://github.com/scipy/scipy/pull/6836): DOC: Added mode='mirror' in the docstring for the functions accepting...
  - [\#6838](https://github.com/scipy/scipy/pull/6838): MAINT: sparse: start removing old BSR methods
  - [\#6844](https://github.com/scipy/scipy/pull/6844): handle incompatible dimensions when input is not an ndarray in...
  - [\#6847](https://github.com/scipy/scipy/pull/6847): Added maxiter to golden search.
  - [\#6850](https://github.com/scipy/scipy/pull/6850): BUG: added check for optional param scipy.stats.spearmanr
  - [\#6858](https://github.com/scipy/scipy/pull/6858): MAINT: Removing redundant tests
  - [\#6861](https://github.com/scipy/scipy/pull/6861): DEP: Fix escape sequences deprecated in Python 3.6.
  - [\#6862](https://github.com/scipy/scipy/pull/6862): DOC: dx should be float, not int
  - [\#6863](https://github.com/scipy/scipy/pull/6863): updated documentation curve\_fit
  - [\#6866](https://github.com/scipy/scipy/pull/6866): DOC : added some documentation to j1 referring to spherical\_jn
  - [\#6867](https://github.com/scipy/scipy/pull/6867): DOC: cdist move long examples list into Notes section
  - [\#6868](https://github.com/scipy/scipy/pull/6868): BUG: Make stats.mode return a ModeResult namedtuple on empty...
  - [\#6871](https://github.com/scipy/scipy/pull/6871): Corrected documentation.
  - [\#6874](https://github.com/scipy/scipy/pull/6874): ENH: gaussian\_kde.logpdf based on logsumexp
  - [\#6877](https://github.com/scipy/scipy/pull/6877): BUG: ndimage: guard against footprints of all zeros
  - [\#6881](https://github.com/scipy/scipy/pull/6881): python 3.6
  - [\#6885](https://github.com/scipy/scipy/pull/6885): Vectorized integrate.fixed\_quad
  - [\#6886](https://github.com/scipy/scipy/pull/6886): fixed typo
  - [\#6891](https://github.com/scipy/scipy/pull/6891): TST: fix failures for linalg.dare/care due to tightened test...
  - [\#6892](https://github.com/scipy/scipy/pull/6892): DOC: fix a bunch of Sphinx errors.
  - [\#6894](https://github.com/scipy/scipy/pull/6894): TST: Added asv benchmarks for scipy.spatial.Voronoi
  - [\#6908](https://github.com/scipy/scipy/pull/6908): BUG: Fix return dtype for complex input in spsolve
  - [\#6909](https://github.com/scipy/scipy/pull/6909): ENH: fftpack: use float32 routines for float16 inputs.
  - [\#6911](https://github.com/scipy/scipy/pull/6911): added min/max support to binned\_statistic
  - [\#6913](https://github.com/scipy/scipy/pull/6913): Fix 6875: SLSQP raise ValueError for all invalid bounds.
  - [\#6914](https://github.com/scipy/scipy/pull/6914): DOCS: GH6903 updating docs of Spatial.distance.pdist
  - [\#6916](https://github.com/scipy/scipy/pull/6916): MAINT: fix some issues for 32-bit Python
  - [\#6924](https://github.com/scipy/scipy/pull/6924): BLD: update Bento build for scipy.LowLevelCallable
  - [\#6932](https://github.com/scipy/scipy/pull/6932): ENH: Use OrderedDict in io.netcdf. Closes gh-5537
  - [\#6933](https://github.com/scipy/scipy/pull/6933): BUG: fix LowLevelCallable issue on 32-bit Python.
  - [\#6936](https://github.com/scipy/scipy/pull/6936): BUG: sparse: handle size-1 2D indexes correctly
  - [\#6938](https://github.com/scipy/scipy/pull/6938): TST: fix test failures in special on 32-bit Python.
  - [\#6939](https://github.com/scipy/scipy/pull/6939): Added attributes list to cKDTree docstring
  - [\#6940](https://github.com/scipy/scipy/pull/6940): improve efficiency of dok\_matrix.tocoo
  - [\#6942](https://github.com/scipy/scipy/pull/6942): DOC: add link to liac-arff package in the io.arff docstring.
  - [\#6943](https://github.com/scipy/scipy/pull/6943): MAINT: Docstring fixes and an additional test for linalg.solve
  - [\#6944](https://github.com/scipy/scipy/pull/6944): DOC: Add example of odeint with a banded Jacobian to the integrate...
  - [\#6946](https://github.com/scipy/scipy/pull/6946): ENH: hypergeom.logpmf in terms of betaln
  - [\#6947](https://github.com/scipy/scipy/pull/6947): TST: speedup distance tests
  - [\#6948](https://github.com/scipy/scipy/pull/6948): DEP: Deprecate the keyword "debug" from linalg.solve
  - [\#6950](https://github.com/scipy/scipy/pull/6950): BUG: Correctly treat large integers in MMIO (fixes \#6397)
  - [\#6952](https://github.com/scipy/scipy/pull/6952): ENH: Minor user-friendliness cleanup in LowLevelCallable
  - [\#6956](https://github.com/scipy/scipy/pull/6956): DOC: improve description of 'output' keyword for convolve
  - [\#6957](https://github.com/scipy/scipy/pull/6957): ENH more informative error in sparse.bmat
  - [\#6962](https://github.com/scipy/scipy/pull/6962): Shebang fixes
  - [\#6964](https://github.com/scipy/scipy/pull/6964): DOC: note argmin/argmax addition
  - [\#6965](https://github.com/scipy/scipy/pull/6965): BUG: Fix issues passing error tolerances in dblquad and tplquad.
  - [\#6971](https://github.com/scipy/scipy/pull/6971): fix the docstring of signaltools.correlate
  - [\#6973](https://github.com/scipy/scipy/pull/6973): Silence expected numpy warnings in scipy.ndimage.interpolation.zoom()
  - [\#6975](https://github.com/scipy/scipy/pull/6975): BUG: special: fix regex in <span class="title-ref">generate\_ufuncs.py</span>
  - [\#6976](https://github.com/scipy/scipy/pull/6976): Update docstring for griddata
  - [\#6978](https://github.com/scipy/scipy/pull/6978): Avoid division by zero in zoom factor calculation
  - [\#6979](https://github.com/scipy/scipy/pull/6979): BUG: ARE solvers did not check the generalized case carefully
  - [\#6985](https://github.com/scipy/scipy/pull/6985): ENH: sparse: add scipy.sparse.linalg.spsolve\_triangular
  - [\#6994](https://github.com/scipy/scipy/pull/6994): MAINT: spatial: updates to plotting utils
  - [\#6995](https://github.com/scipy/scipy/pull/6995): DOC: Bad documentation of k in sparse.linalg.eigs See \#6990
  - [\#6997](https://github.com/scipy/scipy/pull/6997): TST: Changed the test with a less singular example
  - [\#7000](https://github.com/scipy/scipy/pull/7000): DOC: clarify interp1d 'zero' argument
  - [\#7007](https://github.com/scipy/scipy/pull/7007): BUG: Fix division by zero in linregress() for 2 data points
  - [\#7009](https://github.com/scipy/scipy/pull/7009): BUG: Fix problem in passing drop\_rule to scipy.sparse.linalg.spilu
  - [\#7012](https://github.com/scipy/scipy/pull/7012): speed improvment in \_distn\_infrastructure.py
  - [\#7014](https://github.com/scipy/scipy/pull/7014): Fix Typo: add a single quotation mark to fix a slight typo
  - [\#7021](https://github.com/scipy/scipy/pull/7021): MAINT: stats: use machine constants from np.finfo, not machar
  - [\#7026](https://github.com/scipy/scipy/pull/7026): MAINT: update .mailmap
  - [\#7032](https://github.com/scipy/scipy/pull/7032): Fix layout of rv\_histogram docs
  - [\#7035](https://github.com/scipy/scipy/pull/7035): DOC: update 0.19.0 release notes
  - [\#7036](https://github.com/scipy/scipy/pull/7036): ENH: Add more boundary options to signal.stft
  - [\#7040](https://github.com/scipy/scipy/pull/7040): TST: stats: skip too slow tests
  - [\#7042](https://github.com/scipy/scipy/pull/7042): MAINT: sparse: speed up setdiag tests
  - [\#7043](https://github.com/scipy/scipy/pull/7043): MAINT: refactory and code cleaning Xdist
  - [\#7053](https://github.com/scipy/scipy/pull/7053): Fix msvc 9 and 10 compile errors
  - [\#7060](https://github.com/scipy/scipy/pull/7060): DOC: updated release notes with \#7043 and \#6656
  - [\#7062](https://github.com/scipy/scipy/pull/7062): MAINT: Change defaut STFT boundary kwarg to "zeros"
  - [\#7064](https://github.com/scipy/scipy/pull/7064): Fix ValueError: path is on mount 'X:', start on mount 'D:' on...
  - [\#7067](https://github.com/scipy/scipy/pull/7067): TST: Fix PermissionError: \[Errno 13\] Permission denied on Windows
  - [\#7068](https://github.com/scipy/scipy/pull/7068): TST: Fix UnboundLocalError: local variable 'data' referenced...
  - [\#7069](https://github.com/scipy/scipy/pull/7069): Fix OverflowError: Python int too large to convert to C long...
  - [\#7071](https://github.com/scipy/scipy/pull/7071): TST: silence RuntimeWarning for nan test of stats.spearmanr
  - [\#7072](https://github.com/scipy/scipy/pull/7072): Fix OverflowError: Python int too large to convert to C long...
  - [\#7084](https://github.com/scipy/scipy/pull/7084): TST: linalg: bump tolerance in test\_falker
  - [\#7095](https://github.com/scipy/scipy/pull/7095): TST: linalg: bump more tolerances in test\_falker
  - [\#7101](https://github.com/scipy/scipy/pull/7101): TST: Relax solve\_continuous\_are test case 2 and 12
  - [\#7106](https://github.com/scipy/scipy/pull/7106): BUG: stop cdist "correlation" modifying input
  - [\#7116](https://github.com/scipy/scipy/pull/7116): Backports to 0.19.0rc2

---

0.19.1-notes.md

---

# SciPy 0.19.1 Release Notes

SciPy 0.19.1 is a bug-fix release with no new features compared to 0.19.0. The most important change is a fix for a severe memory leak in `integrate.quad`.

## Authors

  - Evgeni Burovski
  - Patrick Callier +
  - Yu Feng
  - Ralf Gommers
  - Ilhan Polat
  - Eric Quintero
  - Scott Sievert
  - Pauli Virtanen
  - Warren Weckesser

A total of 9 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 0.19.1

  - [\#7214](https://github.com/scipy/scipy/issues/7214): Memory use in integrate.quad in scipy-0.19.0
  - [\#7258](https://github.com/scipy/scipy/issues/7258): `linalg.matrix_balance` gives wrong transformation matrix
  - [\#7262](https://github.com/scipy/scipy/issues/7262): Segfault in daily testing
  - [\#7273](https://github.com/scipy/scipy/issues/7273): `scipy.interpolate._bspl.evaluate_spline` gets wrong type
  - [\#7335](https://github.com/scipy/scipy/issues/7335): scipy.signal.dlti(A,B,C,D).freqresp() fails

### Pull requests for 0.19.1

  - [\#7211](https://github.com/scipy/scipy/pull/7211): BUG: convolve may yield inconsistent dtypes with method changed
  - [\#7216](https://github.com/scipy/scipy/pull/7216): BUG: integrate: fix refcounting bug in quad()
  - [\#7229](https://github.com/scipy/scipy/pull/7229): MAINT: special: Rewrite a test of wrightomega
  - [\#7261](https://github.com/scipy/scipy/pull/7261): FIX: Corrected the transformation matrix permutation
  - [\#7265](https://github.com/scipy/scipy/pull/7265): BUG: Fix broken axis handling in spectral functions
  - [\#7266](https://github.com/scipy/scipy/pull/7266): FIX 7262: ckdtree crashes in query\_knn.
  - [\#7279](https://github.com/scipy/scipy/pull/7279): Upcast half- and single-precision floats to doubles in BSpline...
  - [\#7336](https://github.com/scipy/scipy/pull/7336): BUG: Fix signal.dfreqresp for StateSpace systems
  - [\#7419](https://github.com/scipy/scipy/pull/7419): Fix several issues in `sparse.load_npz`, `save_npz`
  - [\#7420](https://github.com/scipy/scipy/pull/7420): BUG: stats: allow integers as kappa4 shape parameters

---

0.7.0-notes.md

---

# SciPy 0.7.0 Release Notes

<div class="contents">

</div>

SciPy 0.7.0 is the culmination of 16 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.7.x branch, and on adding new features on the development trunk. This release requires Python 2.4 or 2.5 and NumPy 1.2 or greater.

Please note that SciPy is still considered to have "Beta" status, as we work toward a SciPy 1.0.0 release. The 1.0.0 release will mark a major milestone in the development of SciPy, after which changing the package structure or API will be much more difficult. Whilst these pre-1.0 releases are considered to have "Beta" status, we are committed to making them as bug-free as possible. For example, in addition to fixing numerous bugs in this release, we have also doubled the number of unit tests since the last release.

However, until the 1.0 release, we are aggressively reviewing and refining the functionality, organization, and interface. This is being done in an effort to make the package as coherent, intuitive, and useful as possible. To achieve this, we need help from the community of users. Specifically, we need feedback regarding all aspects of the project - everything - from which algorithms we implement, to details about our function's call signatures.

Over the last year, we have seen a rapid increase in community involvement, and numerous infrastructure improvements to lower the barrier to contributions (e.g., more explicit coding standards, improved testing infrastructure, better documentation tools). Over the next year, we hope to see this trend continue and invite everyone to become more involved.

## Python 2.6 and 3.0

A significant amount of work has gone into making SciPy compatible with Python 2.6; however, there are still some issues in this regard. The main issue with 2.6 support is NumPy. On UNIX (including Mac OS X), NumPy 1.2.1 mostly works, with a few caveats. On Windows, there are problems related to the compilation process. The upcoming NumPy 1.3 release will fix these problems. Any remaining issues with 2.6 support for SciPy 0.7 will be addressed in a bug-fix release.

Python 3.0 is not supported at all; it requires NumPy to be ported to Python 3.0. This requires immense effort, since a lot of C code has to be ported. The transition to 3.0 is still under consideration; currently, we don't have any timeline or roadmap for this transition.

## Major documentation improvements

SciPy documentation is greatly improved; you can view a HTML reference manual [online](https://docs.scipy.org/) or download it as a PDF file. The new reference guide was built using the popular [Sphinx tool](http://www.sphinx-doc.org).

This release also includes an updated tutorial, which hadn't been available since SciPy was ported to NumPy in 2005. Though not comprehensive, the tutorial shows how to use several essential parts of Scipy. It also includes the `ndimage` documentation from the `numarray` manual.

Nevertheless, more effort is needed on the documentation front. Luckily, contributing to Scipy documentation is now easier than before: if you find that a part of it requires improvements, and want to help us out, please register a user name in our web-based documentation editor at <https://docs.scipy.org/> and correct the issues.

## Running Tests

NumPy 1.2 introduced a new testing framework based on [nose](http://somethingaboutorange.com/mrl/projects/nose/). Starting with this release, SciPy now uses the new NumPy test framework as well. Taking advantage of the new testing framework requires `nose` version 0.10, or later. One major advantage of the new framework is that it greatly simplifies writing unit tests - which has all ready paid off, given the rapid increase in tests. To run the full test suite:

    >>> import scipy
    >>> scipy.test('full')

For more information, please see [The NumPy/SciPy Testing Guide](https://github.com/numpy/numpy/blob/main/doc/TESTS.rst.txt).

We have also greatly improved our test coverage. There were just over 2,000 unit tests in the 0.6.0 release; this release nearly doubles that number, with just over 4,000 unit tests.

## Building SciPy

Support for NumScons has been added. NumScons is a tentative new build system for NumPy/SciPy, using [SCons](https://www.scons.org/) at its core.

SCons is a next-generation build system, intended to replace the venerable `Make` with the integrated functionality of `autoconf`/`automake` and `ccache`. Scons is written in Python and its configuration files are Python scripts. NumScons is meant to replace NumPy's custom version of `distutils` providing more advanced functionality, such as `autoconf`, improved fortran support, more tools, and support for `numpy.distutils`/`scons` cooperation.

## Sandbox Removed

While porting SciPy to NumPy in 2005, several packages and modules were moved into `scipy.sandbox`. The sandbox was a staging ground for packages that were undergoing rapid development and whose APIs were in flux. It was also a place where broken code could live. The sandbox has served its purpose well, but was starting to create confusion. Thus `scipy.sandbox` was removed. Most of the code was moved into `scipy`, some code was made into a `scikit`, and the remaining code was just deleted, as the functionality had been replaced by other code.

## Sparse Matrices

Sparse matrices have seen extensive improvements. There is now support for integer dtypes such `int8`, `uint32`, etc. Two new sparse formats were added:

  - new class `dia_matrix` : the sparse DIAgonal format
  - new class `bsr_matrix` : the Block CSR format

Several new sparse matrix construction functions were added:

  - `sparse.kron` : sparse Kronecker product
  - `sparse.bmat` : sparse version of `numpy.bmat`
  - `sparse.vstack` : sparse version of `numpy.vstack`
  - `sparse.hstack` : sparse version of `numpy.hstack`

Extraction of submatrices and nonzero values have been added:

  - `sparse.tril` : extract lower triangle
  - `sparse.triu` : extract upper triangle
  - `sparse.find` : nonzero values and their indices

`csr_matrix` and `csc_matrix` now support slicing and fancy indexing (e.g., `A[1:3, 4:7]` and `A[[3,2,6,8],:]`). Conversions among all sparse formats are now possible:

  - using member functions such as `.tocsr()` and `.tolil()`
  - using the `.asformat()` member function, e.g. `A.asformat('csr')`
  - using constructors `A = lil_matrix([[1,2]]); B = csr_matrix(A)`

All sparse constructors now accept dense matrices and lists of lists. For example:

  - `A = csr_matrix( rand(3,3) )` and `B = lil_matrix( [[1,2],[3,4]] )`

The handling of diagonals in the `spdiags` function has been changed. It now agrees with the MATLAB(TM) function of the same name.

Numerous efficiency improvements to format conversions and sparse matrix arithmetic have been made. Finally, this release contains numerous bugfixes.

## Statistics package

Statistical functions for masked arrays have been added, and are accessible through `scipy.stats.mstats`. The functions are similar to their counterparts in `scipy.stats` but they have not yet been verified for identical interfaces and algorithms.

Several bugs were fixed for statistical functions, of those, `kstest` and `percentileofscore` gained new keyword arguments.

Added deprecation warning for `mean`, `median`, `var`, `std`, `cov`, and `corrcoef`. These functions should be replaced by their numpy counterparts. Note, however, that some of the default options differ between the `scipy.stats` and numpy versions of these functions.

Numerous bug fixes to `stats.distributions`: all generic methods now work correctly, several methods in individual distributions were corrected. However, a few issues remain with higher moments (`skew`, `kurtosis`) and entropy. The maximum likelihood estimator, `fit`, does not work out-of-the-box for some distributions - in some cases, starting values have to be carefully chosen, in other cases, the generic implementation of the maximum likelihood method might not be the numerically appropriate estimation method.

We expect more bugfixes, increases in numerical precision and enhancements in the next release of scipy.

## Reworking of IO package

The IO code in both NumPy and SciPy is being extensively reworked. NumPy will be where basic code for reading and writing NumPy arrays is located, while SciPy will house file readers and writers for various data formats (data, audio, video, images, matlab, etc.).

Several functions in `scipy.io` have been deprecated and will be removed in the 0.8.0 release including `npfile`, `save`, `load`, `create_module`, `create_shelf`, `objload`, `objsave`, `fopen`, `read_array`, `write_array`, `fread`, `fwrite`, `bswap`, `packbits`, `unpackbits`, and `convert_objectarray`. Some of these functions have been replaced by NumPy's raw reading and writing capabilities, memory-mapping capabilities, or array methods. Others have been moved from SciPy to NumPy, since basic array reading and writing capability is now handled by NumPy.

The Matlab (TM) file readers/writers have a number of improvements:

  - default version 5
  - v5 writers for structures, cell arrays, and objects
  - v5 readers/writers for function handles and 64-bit integers
  - new struct\_as\_record keyword argument to `loadmat`, which loads struct arrays in matlab as record arrays in numpy
  - string arrays have `dtype='U...'` instead of `dtype=object`
  - `loadmat` no longer squeezes singleton dimensions, i.e. `squeeze_me=False` by default

## New Hierarchical Clustering module

This module adds new hierarchical clustering functionality to the `scipy.cluster` package. The function interfaces are similar to the functions provided MATLAB(TM)'s Statistics Toolbox to help facilitate easier migration to the NumPy/SciPy framework. Linkage methods implemented include single, complete, average, weighted, centroid, median, and ward.

In addition, several functions are provided for computing inconsistency statistics, cophenetic distance, and maximum distance between descendants. The `fcluster` and `fclusterdata` functions transform a hierarchical clustering into a set of flat clusters. Since these flat clusters are generated by cutting the tree into a forest of trees, the `leaders` function takes a linkage and a flat clustering, and finds the root of each tree in the forest. The `ClusterNode` class represents a hierarchical clusterings as a field-navigable tree object. `to_tree` converts a matrix-encoded hierarchical clustering to a `ClusterNode` object. Routines for converting between MATLAB and SciPy linkage encodings are provided. Finally, a `dendrogram` function plots hierarchical clusterings as a dendrogram, using matplotlib.

## New Spatial package

The new spatial package contains a collection of spatial algorithms and data structures, useful for spatial statistics and clustering applications. It includes rapidly compiled code for computing exact and approximate nearest neighbors, as well as a pure-python kd-tree with the same interface, but that supports annotation and a variety of other algorithms. The API for both modules may change somewhat, as user requirements become clearer.

It also includes a `distance` module, containing a collection of distance and dissimilarity functions for computing distances between vectors, which is useful for spatial statistics, clustering, and kd-trees. Distance and dissimilarity functions provided include Bray-Curtis, Canberra, Chebyshev, City Block, Cosine, Dice, Euclidean, Hamming, Jaccard, Kulsinski, Mahalanobis, Matching, Minkowski, Rogers-Tanimoto, Russell-Rao, Squared Euclidean, Standardized Euclidean, Sokal-Michener, Sokal-Sneath, and Yule.

The `pdist` function computes pairwise distance between all unordered pairs of vectors in a set of vectors. The `cdist` computes the distance on all pairs of vectors in the Cartesian product of two sets of vectors. Pairwise distance matrices are stored in condensed form; only the upper triangular is stored. `squareform` converts distance matrices between square and condensed forms.

## Reworked fftpack package

FFTW2, FFTW3, MKL and DJBFFT wrappers have been removed. Only (NETLIB) fftpack remains. By focusing on one backend, we hope to add new features - like float32 support - more easily.

## New Constants package

`scipy.constants` provides a collection of physical constants and conversion factors. These constants are taken from CODATA Recommended Values of the Fundamental Physical Constants: 2002. They may be found at physics.nist.gov/constants. The values are stored in the dictionary physical\_constants as a tuple containing the value, the units, and the relative precision - in that order. All constants are in SI units, unless otherwise stated. Several helper functions are provided.

## New Radial Basis Function module

`scipy.interpolate` now contains a Radial Basis Function module. Radial basis functions can be used for smoothing/interpolating scattered data in n-dimensions, but should be used with caution for extrapolation outside of the observed data range.

## New complex ODE integrator

`scipy.integrate.ode` now contains a wrapper for the ZVODE complex-valued ordinary differential equation solver (by Peter N. Brown, Alan C. Hindmarsh, and George D. Byrne).

## New generalized symmetric and hermitian eigenvalue problem solver

`scipy.linalg.eigh` now contains wrappers for more LAPACK symmetric and hermitian eigenvalue problem solvers. Users can now solve generalized problems, select a range of eigenvalues only, and choose to use a faster algorithm at the expense of increased memory usage. The signature of the `scipy.linalg.eigh` changed accordingly.

## Bug fixes in the interpolation package

The shape of return values from `scipy.interpolate.interp1d` used to be incorrect, if interpolated data had more than 2 dimensions and the axis keyword was set to a non-default value. This has been fixed. Moreover, `interp1d` returns now a scalar (0D-array) if the input is a scalar. Users of `scipy.interpolate.interp1d` may need to revise their code if it relies on the previous behavior.

## Weave clean up

There were numerous improvements to `scipy.weave`. `blitz++` was relicensed by the author to be compatible with the SciPy license. `wx_spec.py` was removed.

## Known problems

Here are known problems with scipy 0.7.0:

  - weave test failures on windows: those are known, and are being revised.
  - weave test failure with gcc 4.3 (std::labs): this is a gcc 4.3 bug. A workaround is to add \#include \<cstdlib\> in scipy/weave/blitz/blitz/funcs.h (line 27). You can make the change in the installed scipy (in site-packages).

---

0.7.1-notes.md

---

# SciPy 0.7.1 Release Notes

<div class="contents">

</div>

SciPy 0.7.1 is a bug-fix release with no new features compared to 0.7.0.

## scipy.io

Bugs fixed:

  - Several fixes in Matlab file IO

## scipy.odr

Bugs fixed:

  - Work around a failure with Python 2.6

## scipy.signal

Memory leak in lfilter have been fixed, as well as support for array object

Bugs fixed:

  - \#880, \#925: lfilter fixes
  - \#871: bicgstab fails on Win32

## scipy.sparse

Bugs fixed:

  - \#883: scipy.io.mmread with scipy.sparse.lil\_matrix broken
  - lil\_matrix and csc\_matrix reject now unexpected sequences, cf. <http://thread.gmane.org/gmane.comp.python.scientific.user/19996> (dead link)

## scipy.special

Several bugs of varying severity were fixed in the special functions:

  - \#503, \#640: iv: problems at large arguments fixed by new implementation
  - \#623: jv: fix errors at large arguments
  - \#679: struve: fix wrong output for v \< 0
  - \#803: pbdv produces invalid output
  - \#804: lqmn: fix crashes on some input
  - \#823: betainc: fix documentation
  - \#834: exp1 strange behavior near negative integer values
  - \#852: jn\_zeros: more accurate results for large s, also in jnp/yn/ynp\_zeros
  - \#853: jv, yv, iv: invalid results for non-integer v \< 0, complex x
  - \#854: jv, yv, iv, kv: return nan more consistently when out-of-domain
  - \#927: ellipj: fix segfault on Windows
  - \#946: ellpj: fix segfault on Mac OS X/python 2.6 combination.
  - ive, jve, yve, kv, kve: with real-valued input, return nan for out-of-domain instead of returning only the real part of the result.

Also, when `scipy.special.errprint(1)` has been enabled, warning messages are now issued as Python warnings instead of printing them to stderr.

## scipy.stats

  - linregress, mannwhitneyu, describe: errors fixed
  - kstwobign, norm, expon, exponweib, exponpow, frechet, genexpon, rdist, truncexpon, planck: improvements to numerical accuracy in distributions

## Windows binaries for python 2.6

python 2.6 binaries for windows are now included. The binary for python 2.5 requires numpy 1.2.0 or above, and the one for python 2.6 requires numpy 1.3.0 or above.

## Universal build for scipy

Mac OS X binary installer is now a proper universal build, and does not depend on gfortran anymore (libgfortran is statically linked). The python 2.5 version of scipy requires numpy 1.2.0 or above, the python 2.6 version requires numpy 1.3.0 or above.

---

0.7.2-notes.md

---

# SciPy 0.7.2 Release Notes

<div class="contents">

</div>

SciPy 0.7.2 is a bug-fix release with no new features compared to 0.7.1. The only change is that all C sources from Cython code have been regenerated with Cython 0.12.1. This fixes the incompatibility between binaries of SciPy 0.7.1 and NumPy 1.4.

---

0.8.0-notes.md

---

# SciPy 0.8.0 Release Notes

<div class="contents">

</div>

SciPy 0.8.0 is the culmination of 17 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.8.x branch, and on adding new features on the development trunk. This release requires Python 2.4 - 2.6 and NumPy 1.4.1 or greater.

Please note that SciPy is still considered to have "Beta" status, as we work toward a SciPy 1.0.0 release. The 1.0.0 release will mark a major milestone in the development of SciPy, after which changing the package structure or API will be much more difficult. Whilst these pre-1.0 releases are considered to have "Beta" status, we are committed to making them as bug-free as possible.

However, until the 1.0 release, we are aggressively reviewing and refining the functionality, organization, and interface. This is being done in an effort to make the package as coherent, intuitive, and useful as possible. To achieve this, we need help from the community of users. Specifically, we need feedback regarding all aspects of the project - everything - from which algorithms we implement, to details about our function's call signatures.

## Python 3

Python 3 compatibility is planned and is currently technically feasible, since Numpy has been ported. However, since the Python 3 compatible Numpy 1.5 has not been released yet, support for Python 3 in Scipy is not yet included in Scipy 0.8. SciPy 0.9, planned for fall 2010, will very likely include experimental support for Python 3.

## Major documentation improvements

SciPy documentation is greatly improved.

## Deprecated features

### Swapping inputs for correlation functions (scipy.signal)

Concern correlate, correlate2d, convolve and convolve2d. If the second input is larger than the first input, the inputs are swapped before calling the underlying computation routine. This behavior is deprecated, and will be removed in scipy 0.9.0.

### Obsolete code deprecated (scipy.misc)

The modules <span class="title-ref">helpmod</span>, <span class="title-ref">ppimport</span> and <span class="title-ref">pexec</span> from <span class="title-ref">scipy.misc</span> are deprecated. They will be removed from SciPy in version 0.9.

### Additional deprecations

  - linalg: The function <span class="title-ref">solveh\_banded</span> currently returns a tuple containing the Cholesky factorization and the solution to the linear system. In SciPy 0.9, the return value will be just the solution.
  - The function <span class="title-ref">constants.codata.find</span> will generate a DeprecationWarning. In Scipy version 0.8.0, the keyword argument 'disp' was added to the function, with the default value 'True'. In 0.9.0, the default will be 'False'.
  - The <span class="title-ref">qshape</span> keyword argument of <span class="title-ref">signal.chirp</span> is deprecated. Use the argument <span class="title-ref">vertex\_zero</span> instead.
  - Passing the coefficients of a polynomial as the argument <span class="title-ref">f0</span> to <span class="title-ref">signal.chirp</span> is deprecated. Use the function <span class="title-ref">signal.sweep\_poly</span> instead.
  - The <span class="title-ref">io.recaster</span> module has been deprecated and will be removed in 0.9.0.

## New features

### DCT support (scipy.fftpack)

New realtransforms have been added, namely dct and idct for Discrete Cosine Transform; type I, II and III are available.

### Single precision support for fft functions (scipy.fftpack)

fft functions can now handle single precision inputs as well: fft(x) will return a single precision array if x is single precision.

At the moment, for FFT sizes that are not composites of 2, 3, and 5, the transform is computed internally in double precision to avoid rounding error in FFTPACK.

### Correlation functions now implement the usual definition (scipy.signal)

The outputs should now correspond to their matlab and R counterparts, and do what most people expect if the old\_behavior=False argument is passed:

  - correlate, convolve and their 2d counterparts do not swap their inputs depending on their relative shape anymore;
  - correlation functions now conjugate their second argument while computing the slided sum-products, which correspond to the usual definition of correlation.

### Additions and modification to LTI functions (scipy.signal)

  - The functions <span class="title-ref">impulse2</span> and <span class="title-ref">step2</span> were added to <span class="title-ref">scipy.signal</span>. They use the function <span class="title-ref">scipy.signal.lsim2</span> to compute the impulse and step response of a system, respectively.
  - The function <span class="title-ref">scipy.signal.lsim2</span> was changed to pass any additional keyword arguments to the ODE solver.

### Improved waveform generators (scipy.signal)

Several improvements to the <span class="title-ref">chirp</span> function in <span class="title-ref">scipy.signal</span> were made:

  - The waveform generated when <span class="title-ref">method="logarithmic"</span> was corrected; it now generates a waveform that is also known as an "exponential" or "geometric" chirp. (See <https://en.wikipedia.org/wiki/Chirp>.)
  - A new <span class="title-ref">chirp</span> method, "hyperbolic", was added.
  - Instead of the keyword <span class="title-ref">qshape</span>, <span class="title-ref">chirp</span> now uses the keyword <span class="title-ref">vertex\_zero</span>, a boolean.
  - <span class="title-ref">chirp</span> no longer handles an arbitrary polynomial. This functionality has been moved to a new function, <span class="title-ref">sweep\_poly</span>.

A new function, <span class="title-ref">sweep\_poly</span>, was added.

### New functions and other changes in scipy.linalg

The functions <span class="title-ref">cho\_solve\_banded</span>, <span class="title-ref">circulant</span>, <span class="title-ref">companion</span>, <span class="title-ref">hadamard</span> and <span class="title-ref">leslie</span> were added to <span class="title-ref">scipy.linalg</span>.

The function <span class="title-ref">block\_diag</span> was enhanced to accept scalar and 1D arguments, along with the usual 2D arguments.

### New function and changes in scipy.optimize

The <span class="title-ref">curve\_fit</span> function has been added; it takes a function and uses non-linear least squares to fit that to the provided data.

The <span class="title-ref">leastsq</span> and <span class="title-ref">fsolve</span> functions now return an array of size one instead of a scalar when solving for a single parameter.

### New sparse least squares solver

The <span class="title-ref">lsqr</span> function was added to <span class="title-ref">scipy.sparse</span>. [This routine](https://web.stanford.edu/group/SOL/software/lsqr/) finds a least-squares solution to a large, sparse, linear system of equations.

### ARPACK-based sparse SVD

A naive implementation of SVD for sparse matrices is available in scipy.sparse.linalg.\_eigen.arpack. It is based on using an symmetric solver on \<A, A\>, and as such may not be very precise.

### Alternative behavior available for <span class="title-ref">scipy.constants.find</span>

The keyword argument <span class="title-ref">disp</span> was added to the function <span class="title-ref">scipy.constants.find</span>, with the default value <span class="title-ref">True</span>. When <span class="title-ref">disp</span> is <span class="title-ref">True</span>, the behavior is the same as in Scipy version 0.7. When <span class="title-ref">False</span>, the function returns the list of keys instead of printing them. (In SciPy version 0.9, the default will be reversed.)

### Incomplete sparse LU decompositions

Scipy now wraps SuperLU version 4.0, which supports incomplete sparse LU decompositions. These can be accessed via <span class="title-ref">scipy.sparse.linalg.spilu</span>. Upgrade to SuperLU 4.0 also fixes some known bugs.

### Faster matlab file reader and default behavior change

We've rewritten the matlab file reader in Cython and it should now read matlab files at around the same speed that Matlab does.

The reader reads matlab named and anonymous functions, but it can't write them.

Until scipy 0.8.0 we have returned arrays of matlab structs as numpy object arrays, where the objects have attributes named for the struct fields. As of 0.8.0, we return matlab structs as numpy structured arrays. You can get the older behavior by using the optional `struct_as_record=False` keyword argument to <span class="title-ref">scipy.io.loadmat</span> and friends.

There is an inconsistency in the matlab file writer, in that it writes numpy 1D arrays as column vectors in matlab 5 files, and row vectors in matlab 4 files. We will change this in the next version, so both write row vectors. There is a <span class="title-ref">FutureWarning</span> when calling the writer to warn of this change; for now we suggest using the `oned_as='row'` keyword argument to <span class="title-ref">scipy.io.savemat</span> and friends.

### Faster evaluation of orthogonal polynomials

Values of orthogonal polynomials can be evaluated with new vectorized functions in \`scipy.special\`: <span class="title-ref">eval\_legendre</span>, <span class="title-ref">eval\_chebyt</span>, <span class="title-ref">eval\_chebyu</span>, <span class="title-ref">eval\_chebyc</span>, <span class="title-ref">eval\_chebys</span>, <span class="title-ref">eval\_jacobi</span>, <span class="title-ref">eval\_laguerre</span>, <span class="title-ref">eval\_genlaguerre</span>, <span class="title-ref">eval\_hermite</span>, <span class="title-ref">eval\_hermitenorm</span>, <span class="title-ref">eval\_gegenbauer</span>, <span class="title-ref">eval\_sh\_legendre</span>, <span class="title-ref">eval\_sh\_chebyt</span>, <span class="title-ref">eval\_sh\_chebyu</span>, <span class="title-ref">eval\_sh\_jacobi</span>. This is faster than constructing the full coefficient representation of the polynomials, which was previously the only available way.

Note that the previous orthogonal polynomial routines will now also invoke this feature, when possible.

### Lambert W function

<span class="title-ref">scipy.special.lambertw</span> can now be used for evaluating the Lambert W function.

### Improved hypergeometric 2F1 function

Implementation of <span class="title-ref">scipy.special.hyp2f1</span> for real parameters was revised. The new version should produce accurate values for all real parameters.

### More flexible interface for Radial basis function interpolation

The <span class="title-ref">scipy.interpolate.Rbf</span> class now accepts a callable as input for the "function" argument, in addition to the built-in radial basis functions which can be selected with a string argument.

## Removed features

scipy.stsci: the package was removed

The module <span class="title-ref">scipy.misc.limits</span> was removed.

### scipy.io

The IO code in both NumPy and SciPy is being extensively reworked. NumPy will be where basic code for reading and writing NumPy arrays is located, while SciPy will house file readers and writers for various data formats (data, audio, video, images, matlab, etc.).

Several functions in <span class="title-ref">scipy.io</span> are removed in the 0.8.0 release including: <span class="title-ref">npfile</span>, <span class="title-ref">save</span>, <span class="title-ref">load</span>, <span class="title-ref">create\_module</span>, <span class="title-ref">create\_shelf</span>, <span class="title-ref">objload</span>, <span class="title-ref">objsave</span>, <span class="title-ref">fopen</span>, <span class="title-ref">read\_array</span>, <span class="title-ref">write\_array</span>, <span class="title-ref">fread</span>, <span class="title-ref">fwrite</span>, <span class="title-ref">bswap</span>, <span class="title-ref">packbits</span>, <span class="title-ref">unpackbits</span>, and <span class="title-ref">convert\_objectarray</span>. Some of these functions have been replaced by NumPy's raw reading and writing capabilities, memory-mapping capabilities, or array methods. Others have been moved from SciPy to NumPy, since basic array reading and writing capability is now handled by NumPy.

---

0.9.0-notes.md

---

# SciPy 0.9.0 Release Notes

<div class="contents">

</div>

SciPy 0.9.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Moreover, our development attention will now shift to bug-fix releases on the 0.9.x branch, and on adding new features on the development trunk.

This release requires Python 2.4 - 2.7 or 3.1 - and NumPy 1.5 or greater.

Please note that SciPy is still considered to have "Beta" status, as we work toward a SciPy 1.0.0 release. The 1.0.0 release will mark a major milestone in the development of SciPy, after which changing the package structure or API will be much more difficult. Whilst these pre-1.0 releases are considered to have "Beta" status, we are committed to making them as bug-free as possible.

However, until the 1.0 release, we are aggressively reviewing and refining the functionality, organization, and interface. This is being done in an effort to make the package as coherent, intuitive, and useful as possible. To achieve this, we need help from the community of users. Specifically, we need feedback regarding all aspects of the project - everything - from which algorithms we implement, to details about our function's call signatures.

## Python 3

Scipy 0.9.0 is the first SciPy release to support Python 3. The only module that is not yet ported is `scipy.weave`.

## Scipy source code location to be changed

Soon after this release, Scipy will stop using SVN as the version control system, and move to Git. The development source code for Scipy can from then on be found at

> <https://github.com/scipy/scipy>

## New features

### Delaunay tessellations (`scipy.spatial`)

Scipy now includes routines for computing Delaunay tessellations in N dimensions, powered by the [Qhull](http://www.qhull.org/) computational geometry library. Such calculations can now make use of the new `scipy.spatial.Delaunay` interface.

### N-dimensional interpolation (`scipy.interpolate`)

Support for scattered data interpolation is now significantly improved. This version includes a `scipy.interpolate.griddata` function that can perform linear and nearest-neighbour interpolation for N-dimensional scattered data, in addition to cubic spline (C1-smooth) interpolation in 2D and 1D. An object-oriented interface to each interpolator type is also available.

### Nonlinear equation solvers (`scipy.optimize`)

Scipy includes new routines for large-scale nonlinear equation solving in `scipy.optimize`. The following methods are implemented:

  - Newton-Krylov (`scipy.optimize.newton_krylov`)
  - (Generalized) secant methods:
      - Limited-memory Broyden methods (`scipy.optimize.broyden1`, `scipy.optimize.broyden2`)
      - Anderson method (`scipy.optimize.anderson`)
  - Simple iterations (`scipy.optimize.diagbroyden`, `scipy.optimize.excitingmixing`, `scipy.optimize.linearmixing`)

The `scipy.optimize.nonlin` module was completely rewritten, and some of the functions were deprecated (see above).

### New linear algebra routines (`scipy.linalg`)

Scipy now contains routines for effectively solving triangular equation systems (`scipy.linalg.solve_triangular`).

### Improved FIR filter design functions (`scipy.signal`)

The function `scipy.signal.firwin` was enhanced to allow the design of highpass, bandpass, bandstop and multi-band FIR filters.

The function `scipy.signal.firwin2` was added. This function uses the window method to create a linear phase FIR filter with an arbitrary frequency response.

The functions `scipy.signal.kaiser_atten` and `scipy.signal.kaiser_beta` were added.

### Improved statistical tests (`scipy.stats`)

A new function `scipy.stats.fisher_exact` was added, that provides Fisher's exact test for 2x2 contingency tables.

The function `scipy.stats.kendalltau` was rewritten to make it much faster (O(n log(n)) vs O(n^2)).

## Deprecated features

### Obsolete nonlinear solvers (in `scipy.optimize`)

The following nonlinear solvers from `scipy.optimize` are deprecated:

  - `broyden_modified` (bad performance)
  - `broyden1_modified` (bad performance)
  - `broyden_generalized` (equivalent to `anderson`)
  - `anderson2` (equivalent to `anderson`)
  - `broyden3` (obsoleted by new limited-memory broyden methods)
  - `vackar` (renamed to `diagbroyden`)

## Removed features

The deprecated modules `helpmod`, `pexec` and `ppimport` were removed from `scipy.misc`.

The `output_type` keyword in many `scipy.ndimage` interpolation functions has been removed.

The `econ` keyword in `scipy.linalg.qr` has been removed. The same functionality is still available by specifying `mode='economic'`.

### Old correlate/convolve behavior (in `scipy.signal`)

The old behavior for `scipy.signal.convolve`, `scipy.signal.convolve2d`, `scipy.signal.correlate` and `scipy.signal.correlate2d` was deprecated in 0.8.0 and has now been removed. Convolve and correlate used to swap their arguments if the second argument has dimensions larger than the first one, and the mode was relative to the input with the largest dimension. The current behavior is to never swap the inputs, which is what most people expect, and is how correlation is usually defined.

### `scipy.stats`

Many functions in `scipy.stats` that are either available from numpy or have been superseded, and have been deprecated since version 0.7, have been removed: <span class="title-ref">std</span>, <span class="title-ref">var</span>, <span class="title-ref">mean</span>, <span class="title-ref">median</span>, <span class="title-ref">cov</span>, <span class="title-ref">corrcoef</span>, <span class="title-ref">z</span>, <span class="title-ref">zs</span>, <span class="title-ref">stderr</span>, <span class="title-ref">samplestd</span>, <span class="title-ref">samplevar</span>, <span class="title-ref">pdfapprox</span>, <span class="title-ref">pdf\_moments</span> and <span class="title-ref">erfc</span>. These changes are mirrored in `scipy.stats.mstats`.

### `scipy.sparse`

Several methods of the sparse matrix classes in `scipy.sparse` which had been deprecated since version 0.7 were removed: <span class="title-ref">save</span>, <span class="title-ref">rowcol</span>, <span class="title-ref">getdata</span>, <span class="title-ref">listprint</span>, <span class="title-ref">ensure\_sorted\_indices</span>, <span class="title-ref">matvec</span>, <span class="title-ref">matmat</span> and <span class="title-ref">rmatvec</span>.

The functions `spkron`, `speye`, `spidentity`, `lil_eye` and `lil_diags` were removed from `scipy.sparse`. The first three functions are still available as `scipy.sparse.kron`, `scipy.sparse.eye` and `scipy.sparse.identity`.

The <span class="title-ref">dims</span> and <span class="title-ref">nzmax</span> keywords were removed from the sparse matrix constructor. The <span class="title-ref">colind</span> and <span class="title-ref">rowind</span> attributes were removed from CSR and CSC matrices respectively.

### `scipy.sparse.linalg.arpack.speigs`

A duplicated interface to the ARPACK library was removed.

## Other changes

### ARPACK interface changes

The interface to the ARPACK eigenvalue routines in `scipy.sparse.linalg` was changed for more robustness.

The eigenvalue and SVD routines now raise `ArpackNoConvergence` if the eigenvalue iteration fails to converge. If partially converged results are desired, they can be accessed as follows:

    import numpy as np
    from scipy.sparse.linalg import eigs, ArpackNoConvergence
    
    m = np.random.randn(30, 30)
    try:
        w, v = eigs(m, 6)
    except ArpackNoConvergence, err:
        partially_converged_w = err.eigenvalues
        partially_converged_v = err.eigenvectors

Several bugs were also fixed.

The routines were moreover renamed as follows:

>   - eigen --\> eigs
>   - eigen\_symmetric --\> eigsh
>   - svd --\> svds

---

1.0.0-notes.md

---

# SciPy 1.0.0 Release Notes

<div class="contents">

</div>

We are extremely pleased to announce the release of SciPy 1.0, 16 years after version 0.1 saw the light of day. It has been a long, productive journey to get here, and we anticipate many more exciting new features and releases in the future.

## Why 1.0 now?

A version number should reflect the maturity of a project - and SciPy was a mature and stable library that is heavily used in production settings for a long time already. From that perspective, the 1.0 version number is long overdue.

Some key project goals, both technical (e.g. Windows wheels and continuous integration) and organisational (a governance structure, code of conduct and a roadmap), have been achieved recently.

Many of us are a bit perfectionist, and therefore are reluctant to call something "1.0" because it may imply that it's "finished" or "we are 100% happy with it". This is normal for many open source projects, however that doesn't make it right. We acknowledge to ourselves that it's not perfect, and there are some dusty corners left (that will probably always be the case). Despite that, SciPy is extremely useful to its users, on average has high quality code and documentation, and gives the stability and backwards compatibility guarantees that a 1.0 label imply.

## Some history and perspectives

  - 2001: the first SciPy release
  - 2005: transition to NumPy
  - 2007: creation of scikits
  - 2008: scipy.spatial module and first Cython code added
  - 2010: moving to a 6-monthly release cycle
  - 2011: SciPy development moves to GitHub
  - 2011: Python 3 support
  - 2012: adding a sparse graph module and unified optimization interface
  - 2012: removal of scipy.maxentropy
  - 2013: continuous integration with TravisCI
  - 2015: adding Cython interface for BLAS/LAPACK and a benchmark suite
  - 2017: adding a unified C API with scipy.LowLevelCallable; removal of scipy.weave
  - 2017: SciPy 1.0 release

**Pauli Virtanen** is SciPy's Benevolent Dictator For Life (BDFL). He says:

*Truthfully speaking, we could have released a SciPy 1.0 a long time ago, so I'm happy we do it now at long last. The project has a long history, and during the years it has matured also as a software project. I believe it has well proved its merit to warrant a version number starting with unity.*

*Since its conception 15+ years ago, SciPy has largely been written by and for scientists, to provide a box of basic tools that they need. Over time, the set of people active in its development has undergone some rotation, and we have evolved towards a somewhat more systematic approach to development. Regardless, this underlying drive has stayed the same, and I think it will also continue propelling the project forward in future. This is all good, since not long after 1.0 comes 1.1.*

**Travis Oliphant** is one of SciPy's creators. He says:

*I'm honored to write a note of congratulations to the SciPy developers and the entire SciPy community for the release of SciPy 1.0. This release represents a dream of many that has been patiently pursued by a stalwart group of pioneers for nearly 2 decades. Efforts have been broad and consistent over that time from many hundreds of people. From initial discussions to efforts coding and packaging to documentation efforts to extensive conference and community building, the SciPy effort has been a global phenomenon that it has been a privilege to participate in.*

*The idea of SciPy was already in multiple people’s minds in 1997 when I first joined the Python community as a young graduate student who had just fallen in love with the expressibility and extensibility of Python. The internet was just starting to bringing together like-minded mathematicians and scientists in nascent electronically-connected communities. In 1998, there was a concerted discussion on the matrix-SIG, python mailing list with people like Paul Barrett, Joe Harrington, Perry Greenfield, Paul Dubois, Konrad Hinsen, David Ascher, and others. This discussion encouraged me in 1998 and 1999 to procrastinate my PhD and spend a lot of time writing extension modules to Python that mostly wrapped battle-tested Fortran and C-code making it available to the Python user. This work attracted the help of others like Robert Kern, Pearu Peterson and Eric Jones who joined their efforts with mine in 2000 so that by 2001, the first SciPy release was ready. This was long before Github simplified collaboration and input from others and the "patch" command and email was how you helped a project improve.*

*Since that time, hundreds of people have spent an enormous amount of time improving the SciPy library and the community surrounding this library has dramatically grown. I stopped being able to participate actively in developing the SciPy library around 2010. Fortunately, at that time, Pauli Virtanen and Ralf Gommers picked up the pace of development supported by dozens of other key contributors such as David Cournapeau, Evgeni Burovski, Josef Perktold, and Warren Weckesser. While I have only been able to admire the development of SciPy from a distance for the past 7 years, I have never lost my love of the project and the concept of community-driven development. I remain driven even now by a desire to help sustain the development of not only the SciPy library but many other affiliated and related open-source projects. I am extremely pleased that SciPy is in the hands of a world-wide community of talented developers who will ensure that SciPy remains an example of how grass-roots, community-driven development can succeed.*

**Fernando Perez** offers a wider community perspective:

*The existence of a nascent Scipy library, and the incredible --if tiny by today's standards-- community surrounding it is what drew me into the scientific Python world while still a physics graduate student in 2001. Today, I am awed when I see these tools power everything from high school education to the research that led to the 2017 Nobel Prize in physics.*

*Don't be fooled by the 1.0 number: this project is a mature cornerstone of the modern scientific computing ecosystem. I am grateful for the many who have made it possible, and hope to be able to contribute again to it in the future. My sincere congratulations to the whole team\!*

## Highlights of this release

Some of the highlights of this release are:

  - Major build improvements. Windows wheels are available on PyPI for the first time, and continuous integration has been set up on Windows and OS X in addition to Linux.
  - A set of new ODE solvers and a unified interface to them (<span class="title-ref">scipy.integrate.solve\_ivp</span>).
  - Two new trust region optimizers and a new linear programming method, with improved performance compared to what <span class="title-ref">scipy.optimize</span> offered previously.
  - Many new BLAS and LAPACK functions were wrapped. The BLAS wrappers are now complete.

## Upgrading and compatibility

There have been a number of deprecations and API changes in this release, which are documented below. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s).

This release requires Python 2.7 or \>=3.4 and NumPy 1.8.2 or greater.

This is also the last release to support LAPACK 3.1.x - 3.3.x. Moving the lowest supported LAPACK version to \>3.2.x was long blocked by Apple Accelerate providing the LAPACK 3.2.1 API. We have decided that it's time to either drop Accelerate or, if there is enough interest, provide shims for functions added in more recent LAPACK versions so it can still be used.

### New features

## <span class="title-ref">scipy.cluster</span> improvements

<span class="title-ref">scipy.cluster.hierarchy.optimal\_leaf\_ordering</span>, a function to reorder a linkage matrix to minimize distances between adjacent leaves, was added.

## <span class="title-ref">scipy.fftpack</span> improvements

N-dimensional versions of the discrete sine and cosine transforms and their inverses were added as `dctn`, `idctn`, `dstn` and `idstn`.

## <span class="title-ref">scipy.integrate</span> improvements

A set of new ODE solvers have been added to <span class="title-ref">scipy.integrate</span>. The convenience function <span class="title-ref">scipy.integrate.solve\_ivp</span> allows uniform access to all solvers. The individual solvers (`RK23`, `RK45`, `Radau`, `BDF` and `LSODA`) can also be used directly.

## <span class="title-ref">scipy.linalg</span> improvements

The BLAS wrappers in <span class="title-ref">scipy.linalg.blas</span> have been completed. Added functions are `*gbmv`, `*hbmv`, `*hpmv`, `*hpr`, `*hpr2`, `*spmv`, `*spr`, `*tbmv`, `*tbsv`, `*tpmv`, `*tpsv`, `*trsm`, `*trsv`, `*sbmv`, `*spr2`,

Wrappers for the LAPACK functions `*gels`, `*stev`, `*sytrd`, `*hetrd`, `*sytf2`, `*hetrf`, `*sytrf`, `*sycon`, `*hecon`, `*gglse`, `*stebz`, `*stemr`, `*sterf`, and `*stein` have been added.

The function <span class="title-ref">scipy.linalg.subspace\_angles</span> has been added to compute the subspace angles between two matrices.

The function <span class="title-ref">scipy.linalg.clarkson\_woodruff\_transform</span> has been added. It finds low-rank matrix approximation via the Clarkson-Woodruff Transform.

The functions <span class="title-ref">scipy.linalg.eigh\_tridiagonal</span> and <span class="title-ref">scipy.linalg.eigvalsh\_tridiagonal</span>, which find the eigenvalues and eigenvectors of tridiagonal hermitian/symmetric matrices, were added.

## <span class="title-ref">scipy.ndimage</span> improvements

Support for homogeneous coordinate transforms has been added to <span class="title-ref">scipy.ndimage.affine\_transform</span>.

The `ndimage` C code underwent a significant refactoring, and is now a lot easier to understand and maintain.

## <span class="title-ref">scipy.optimize</span> improvements

The methods `trust-region-exact` and `trust-krylov` have been added to the function <span class="title-ref">scipy.optimize.minimize</span>. These new trust-region methods solve the subproblem with higher accuracy at the cost of more Hessian factorizations (compared to dogleg) or more matrix vector products (compared to ncg) but usually require less nonlinear iterations and are able to deal with indefinite Hessians. They seem very competitive against the other Newton methods implemented in scipy.

<span class="title-ref">scipy.optimize.linprog</span> gained an interior point method. Its performance is superior (both in accuracy and speed) to the older simplex method.

## <span class="title-ref">scipy.signal</span> improvements

An argument `fs` (sampling frequency) was added to the following functions: `firwin`, `firwin2`, `firls`, and `remez`. This makes these functions consistent with many other functions in <span class="title-ref">scipy.signal</span> in which the sampling frequency can be specified.

<span class="title-ref">scipy.signal.freqz</span> has been sped up significantly for FIR filters.

## <span class="title-ref">scipy.sparse</span> improvements

Iterating over and slicing of CSC and CSR matrices is now faster by up to \~35%.

The `tocsr` method of COO matrices is now several times faster.

The `diagonal` method of sparse matrices now takes a parameter, indicating which diagonal to return.

## <span class="title-ref">scipy.sparse.linalg</span> improvements

A new iterative solver for large-scale nonsymmetric sparse linear systems, <span class="title-ref">scipy.sparse.linalg.gcrotmk</span>, was added. It implements `GCROT(m,k)`, a flexible variant of `GCROT`.

<span class="title-ref">scipy.sparse.linalg.lsmr</span> now accepts an initial guess, yielding potentially faster convergence.

SuperLU was updated to version 5.2.1.

## <span class="title-ref">scipy.spatial</span> improvements

Many distance metrics in <span class="title-ref">scipy.spatial.distance</span> gained support for weights.

The signatures of <span class="title-ref">scipy.spatial.distance.pdist</span> and <span class="title-ref">scipy.spatial.distance.cdist</span> were changed to `*args, **kwargs` in order to support a wider range of metrics (e.g. string-based metrics that need extra keywords). Also, an optional `out` parameter was added to `pdist` and `cdist` allowing the user to specify where the resulting distance matrix is to be stored

## <span class="title-ref">scipy.stats</span> improvements

The methods `cdf` and `logcdf` were added to <span class="title-ref">scipy.stats.multivariate\_normal</span>, providing the cumulative distribution function of the multivariate normal distribution.

New statistical distance functions were added, namely <span class="title-ref">scipy.stats.wasserstein\_distance</span> for the first Wasserstein distance and <span class="title-ref">scipy.stats.energy\_distance</span> for the energy distance.

### Deprecated features

The following functions in <span class="title-ref">scipy.misc</span> are deprecated: `bytescale`, `fromimage`, `imfilter`, `imread`, `imresize`, `imrotate`, `imsave`, `imshow` and `toimage`. Most of those functions have unexpected behavior (like rescaling and type casting image data without the user asking for that). Other functions simply have better alternatives.

`scipy.interpolate.interpolate_wrapper` and all functions in that submodule are deprecated. This was a never finished set of wrapper functions which is not relevant anymore.

The `fillvalue` of <span class="title-ref">scipy.signal.convolve2d</span> will be cast directly to the dtypes of the input arrays in the future and checked that it is a scalar or an array with a single element.

`scipy.spatial.distance.matching` is deprecated. It is an alias of <span class="title-ref">scipy.spatial.distance.hamming</span>, which should be used instead.

Implementation of <span class="title-ref">scipy.spatial.distance.wminkowski</span> was based on a wrong interpretation of the metric definition. In scipy 1.0 it has been just deprecated in the documentation to keep retro-compatibility but is recommended to use the new version of <span class="title-ref">scipy.spatial.distance.minkowski</span> that implements the correct behaviour.

Positional arguments of <span class="title-ref">scipy.spatial.distance.pdist</span> and <span class="title-ref">scipy.spatial.distance.cdist</span> should be replaced with their keyword version.

### Backwards incompatible changes

The following deprecated functions have been removed from \`scipy.stats\`: `betai`, `chisqprob`, `f_value`, `histogram`, `histogram2`, `pdf_fromgamma`, `signaltonoise`, `square_of_sums`, `ss` and `threshold`.

The following deprecated functions have been removed from \`scipy.stats.mstats\`: `betai`, `f_value_wilks_lambda`, `signaltonoise` and `threshold`.

The deprecated `a` and `reta` keywords have been removed from <span class="title-ref">scipy.stats.shapiro</span>.

The deprecated functions `sparse.csgraph.cs_graph_components` and `sparse.linalg.symeig` have been removed from <span class="title-ref">scipy.sparse</span>.

The following deprecated keywords have been removed in \`scipy.sparse.linalg\`: `drop_tol` from `splu`, and `xtype` from `bicg`, `bicgstab`, `cg`, `cgs`, `gmres`, `qmr` and `minres`.

The deprecated functions `expm2` and `expm3` have been removed from <span class="title-ref">scipy.linalg</span>. The deprecated keyword `q` was removed from <span class="title-ref">scipy.linalg.expm</span>. And the deprecated submodule `linalg.calc_lwork` was removed.

The deprecated functions `C2K`, `K2C`, `F2C`, `C2F`, `F2K` and `K2F` have been removed from <span class="title-ref">scipy.constants</span>.

The deprecated `ppform` class was removed from <span class="title-ref">scipy.interpolate</span>.

The deprecated keyword `iprint` was removed from <span class="title-ref">scipy.optimize.fmin\_cobyla</span>.

The default value for the `zero_phase` keyword of <span class="title-ref">scipy.signal.decimate</span> has been changed to True.

The `kmeans` and `kmeans2` functions in <span class="title-ref">scipy.cluster.vq</span> changed the method used for random initialization, so using a fixed random seed will not necessarily produce the same results as in previous versions.

<span class="title-ref">scipy.special.gammaln</span> does not accept complex arguments anymore.

The deprecated functions `sph_jn`, `sph_yn`, `sph_jnyn`, `sph_in`, `sph_kn`, and `sph_inkn` have been removed. Users should instead use the functions `spherical_jn`, `spherical_yn`, `spherical_in`, and `spherical_kn`. Be aware that the new functions have different signatures.

The cross-class properties of <span class="title-ref">scipy.signal.lti</span> systems have been removed. The following properties/setters have been removed:

Name - (accessing/setting has been removed) - (setting has been removed)

  - StateSpace - (`num`, `den`, `gain`) - (`zeros`, `poles`)
  - TransferFunction (`A`, `B`, `C`, `D`, `gain`) - (`zeros`, `poles`)
  - ZerosPolesGain (`A`, `B`, `C`, `D`, `num`, `den`) - ()

`signal.freqz(b, a)` with `b` or `a` \>1-D raises a `ValueError`. This was a corner case for which it was unclear that the behavior was well-defined.

The method `var` of `scipy.stats.dirichlet` now returns a scalar rather than an ndarray when the length of alpha is 1.

### Other changes

SciPy now has a formal governance structure. It consists of a BDFL (Pauli Virtanen) and a Steering Committee. See [the governance document](https://github.com/scipy/scipy/blob/main/doc/source/dev/governance/governance.md) for details.

It is now possible to build SciPy on Windows with MSVC + gfortran\! Continuous integration has been set up for this build configuration on Appveyor, building against OpenBLAS.

Continuous integration for OS X has been set up on TravisCI.

The SciPy test suite has been migrated from `nose` to `pytest`.

`scipy/_distributor_init.py` was added to allow redistributors of SciPy to add custom code that needs to run when importing SciPy (e.g. checks for hardware, DLL search paths, etc.).

Support for PEP 518 (specifying build system requirements) was added - see `pyproject.toml` in the root of the SciPy repository.

In order to have consistent function names, the function `scipy.linalg.solve_lyapunov` is renamed to <span class="title-ref">scipy.linalg.solve\_continuous\_lyapunov</span>. The old name is kept for backwards-compatibility.

### Authors

  - @arcady +
  - @xoviat +
  - Anton Akhmerov
  - Dominic Antonacci +
  - Alessandro Pietro Bardelli
  - Ved Basu +
  - Michael James Bedford +
  - Ray Bell +
  - Juan M. Bello-Rivas +
  - Sebastian Berg
  - Felix Berkenkamp
  - Jyotirmoy Bhattacharya +
  - Matthew Brett
  - Jonathan Bright
  - Bruno Jiménez +
  - Evgeni Burovski
  - Patrick Callier
  - Mark Campanelli +
  - CJ Carey
  - Robert Cimrman
  - Adam Cox +
  - Michael Danilov +
  - David Haberthür +
  - Andras Deak +
  - Philip DeBoer
  - Anne-Sylvie Deutsch
  - Cathy Douglass +
  - Dominic Else +
  - Guo Fei +
  - Roman Feldbauer +
  - Yu Feng
  - Jaime Fernandez del Rio
  - Orestis Floros +
  - David Freese +
  - Adam Geitgey +
  - James Gerity +
  - Dezmond Goff +
  - Christoph Gohlke
  - Ralf Gommers
  - Dirk Gorissen +
  - Matt Haberland +
  - David Hagen +
  - Charles Harris
  - Lam Yuen Hei +
  - Jean Helie +
  - Gaute Hope +
  - Guillaume Horel +
  - Franziska Horn +
  - Yevhenii Hyzyla +
  - Vladislav Iakovlev +
  - Marvin Kastner +
  - Mher Kazandjian
  - Thomas Keck
  - Adam Kurkiewicz +
  - Ronan Lamy +
  - J.L. Lanfranchi +
  - Eric Larson
  - Denis Laxalde
  - Gregory R. Lee
  - Felix Lenders +
  - Evan Limanto
  - Julian Lukwata +
  - François Magimel
  - Syrtis Major +
  - Charles Masson +
  - Nikolay Mayorov
  - Tobias Megies
  - Markus Meister +
  - Roman Mirochnik +
  - Jordi Montes +
  - Nathan Musoke +
  - Andrew Nelson
  - M.J. Nichol
  - Juan Nunez-Iglesias
  - Arno Onken +
  - Nick Papior +
  - Dima Pasechnik +
  - Ashwin Pathak +
  - Oleksandr Pavlyk +
  - Stefan Peterson
  - Ilhan Polat
  - Andrey Portnoy +
  - Ravi Kumar Prasad +
  - Aman Pratik
  - Eric Quintero
  - Vedant Rathore +
  - Tyler Reddy
  - Joscha Reimer
  - Philipp Rentzsch +
  - Antonio Horta Ribeiro
  - Ned Richards +
  - Kevin Rose +
  - Benoit Rostykus +
  - Matt Ruffalo +
  - Eli Sadoff +
  - Pim Schellart
  - Nico Schlömer +
  - Klaus Sembritzki +
  - Nikolay Shebanov +
  - Jonathan Tammo Siebert
  - Scott Sievert
  - Max Silbiger +
  - Mandeep Singh +
  - Michael Stewart +
  - Jonathan Sutton +
  - Deep Tavker +
  - Martin Thoma
  - James Tocknell +
  - Aleksandar Trifunovic +
  - Paul van Mulbregt +
  - Jacob Vanderplas
  - Aditya Vijaykumar
  - Pauli Virtanen
  - James Webber
  - Warren Weckesser
  - Eric Wieser +
  - Josh Wilson
  - Zhiqing Xiao +
  - Evgeny Zhurko
  - Nikolay Zinov +
  - Zé Vinícius +

A total of 121 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.0.0

  - [\#2300](https://github.com/scipy/scipy/issues/2300): scipy.misc.toimage (and therefore imresize) converts to uint32...
  - [\#2347](https://github.com/scipy/scipy/issues/2347): Several `misc.im*` functions incorrectly handle 3 or 4-channeled...
  - [\#2442](https://github.com/scipy/scipy/issues/2442): scipy.misc.pilutil -\> scipy.ndimage?
  - [\#2829](https://github.com/scipy/scipy/issues/2829): Mingw Gfortran on Windows?
  - [\#3154](https://github.com/scipy/scipy/issues/3154): scipy.misc.imsave creates wrong bitmap header
  - [\#3505](https://github.com/scipy/scipy/issues/3505): scipy.linalg.lstsq() residual's help text is a lil strange
  - [\#3808](https://github.com/scipy/scipy/issues/3808): Is Brent's method for minimizing the value of a function implemented...
  - [\#4121](https://github.com/scipy/scipy/issues/4121): Add cdf() method to stats.multivariate\_normal
  - [\#4458](https://github.com/scipy/scipy/issues/4458): scipy.misc.imresize changes image range
  - [\#4575](https://github.com/scipy/scipy/issues/4575): Docs for L-BFGS-B mention non-existent parameter
  - [\#4893](https://github.com/scipy/scipy/issues/4893): misc.imsave does not work with file type defined
  - [\#5231](https://github.com/scipy/scipy/issues/5231): Discrepancies in scipy.optimize.minimize(method='L-BFGS-B')
  - [\#5238](https://github.com/scipy/scipy/issues/5238): Optimal leaf ordering in scipy.cluster.hierarchy.dendrogram
  - [\#5305](https://github.com/scipy/scipy/issues/5305): Wrong image scaling in scipy/misc/pilutil.py with misc.imsave?
  - [\#5823](https://github.com/scipy/scipy/issues/5823): test failure in `filter_design`
  - [\#6061](https://github.com/scipy/scipy/issues/6061): scipy.stats.spearmanr return values outside range -1 to 1
  - [\#6242](https://github.com/scipy/scipy/issues/6242): Inconsistency / duplication for imread and imshow, imsave
  - [\#6265](https://github.com/scipy/scipy/issues/6265): BUG: signal.iirfilter of bandpass type is unstable when high...
  - [\#6370](https://github.com/scipy/scipy/issues/6370): `scipy.optimize.linear_sum_assignment` hangs on undefined matrix
  - [\#6417](https://github.com/scipy/scipy/issues/6417): scipy.misc.imresize converts images to uint8
  - [\#6618](https://github.com/scipy/scipy/issues/6618): splrep and splprep inconsistent
  - [\#6854](https://github.com/scipy/scipy/issues/6854): Support PEP 519 in I/O functions
  - [\#6921](https://github.com/scipy/scipy/issues/6921): \[Feature request\] Random unitary matrix
  - [\#6930](https://github.com/scipy/scipy/issues/6930): `uniform_filter1d` appears to truncate rather than round when output...
  - [\#6949](https://github.com/scipy/scipy/issues/6949): interp2d function crashes python
  - [\#6959](https://github.com/scipy/scipy/issues/6959): scipy.interpolate.LSQUnivariateSpline - check for increasing...
  - [\#7005](https://github.com/scipy/scipy/issues/7005): linear\_sum\_assignment in scipy.optimize never return if one of...
  - [\#7010](https://github.com/scipy/scipy/issues/7010): `scipy.statsbinned_statistic_2d`: incorrect binnumbers returned
  - [\#7049](https://github.com/scipy/scipy/issues/7049): `expm_multiply` is excessively slow when called for intervals
  - [\#7050](https://github.com/scipy/scipy/issues/7050): Documenting `_argcheck` for `rv_discrete`
  - [\#7077](https://github.com/scipy/scipy/issues/7077): `coo_matrix.tocsr()` still slow
  - [\#7093](https://github.com/scipy/scipy/issues/7093): Wheels licensing
  - [\#7122](https://github.com/scipy/scipy/issues/7122): Sketching-based Matrix Computations
  - [\#7133](https://github.com/scipy/scipy/issues/7133): Discontinuity of a scipy special function
  - [\#7141](https://github.com/scipy/scipy/issues/7141): Improve documentation for Elliptic Integrals
  - [\#7181](https://github.com/scipy/scipy/issues/7181): A change in <span class="title-ref">numpy.poly1d</span> is causing the scipy tests to fail.
  - [\#7220](https://github.com/scipy/scipy/issues/7220): String Formatting Issue in `LinearOperator.__init__`
  - [\#7239](https://github.com/scipy/scipy/issues/7239): Source tarball distribution
  - [\#7247](https://github.com/scipy/scipy/issues/7247): genlaguerre poly1d-object doesn't respect 'monic' option at evaluation
  - [\#7248](https://github.com/scipy/scipy/issues/7248): BUG: regression in Legendre polynomials on master
  - [\#7316](https://github.com/scipy/scipy/issues/7316): dgels is missing
  - [\#7381](https://github.com/scipy/scipy/issues/7381): Krogh interpolation fails to produce derivatives for complex...
  - [\#7416](https://github.com/scipy/scipy/issues/7416): scipy.stats.kappa4(h,k) raise a ValueError for positive integer...
  - [\#7421](https://github.com/scipy/scipy/issues/7421): scipy.stats.arcsine().pdf and scipy.stats.beta(0.5, 0.5).pdf...
  - [\#7429](https://github.com/scipy/scipy/issues/7429): `test_matrix_norms()` in scipy/linalg/tests/test\_basic.py calls...
  - [\#7444](https://github.com/scipy/scipy/issues/7444): Doc: stats.dirichlet.var output description is wrong
  - [\#7475](https://github.com/scipy/scipy/issues/7475): Parameter amax in `scalar_search_wolfe2` is not used
  - [\#7510](https://github.com/scipy/scipy/issues/7510): Operations between numpy.array and scipy.sparse matrix return...
  - [\#7550](https://github.com/scipy/scipy/issues/7550): DOC: signal tutorial: Typo in explanation of convolution
  - [\#7551](https://github.com/scipy/scipy/issues/7551): stdint.h included in SuperLU header files, but does not exist...
  - [\#7553](https://github.com/scipy/scipy/issues/7553): Build for master broken on OS X
  - [\#7557](https://github.com/scipy/scipy/issues/7557): Error in scipy.signal.periodogram example
  - [\#7590](https://github.com/scipy/scipy/issues/7590): OSX test fail - `test_ltisys.TestPlacePoles.test_real`
  - [\#7658](https://github.com/scipy/scipy/issues/7658): optimize.BenchGlobal broken
  - [\#7669](https://github.com/scipy/scipy/issues/7669): nan result from multivariate\_normal.cdf
  - [\#7733](https://github.com/scipy/scipy/issues/7733): Inconsistent usage of indices, indptr in `Delaunay.vertex_neighbor_vertices`
  - [\#7747](https://github.com/scipy/scipy/issues/7747): Numpy changes in np.random.dirichlet cause test failures
  - [\#7772](https://github.com/scipy/scipy/issues/7772): Fix numpy lstsq rcond= parameter
  - [\#7776](https://github.com/scipy/scipy/issues/7776): tests require \`nose\`
  - [\#7798](https://github.com/scipy/scipy/issues/7798): contributor names for 1.0 release notes
  - [\#7828](https://github.com/scipy/scipy/issues/7828): 32-bit Linux test errors on TestCephes
  - [\#7893](https://github.com/scipy/scipy/issues/7893): scipy.spatial.distance.wminkowski behaviour change in 1.0.0b1
  - [\#7898](https://github.com/scipy/scipy/issues/7898): DOC: Window functions
  - [\#7959](https://github.com/scipy/scipy/issues/7959): BUG maybe: fmin\_bfgs possibly broken in 1.0
  - [\#7969](https://github.com/scipy/scipy/issues/7969): scipy 1.0.0rc1 windows wheels depend on missing msvcp140.dll

## Pull requests for 1.0.0

  - [\#4978](https://github.com/scipy/scipy/pull/4978): WIP: add pre\_center and normalize options to lombscargle
  - [\#5796](https://github.com/scipy/scipy/pull/5796): TST: Remove all permanent filter changes from tests
  - [\#5910](https://github.com/scipy/scipy/pull/5910): ENH: sparse.linalg: add GCROT(m,k)
  - [\#6326](https://github.com/scipy/scipy/pull/6326): ENH: New ODE solvers
  - [\#6480](https://github.com/scipy/scipy/pull/6480): ENH: Make <span class="title-ref">signal.decimate</span> default to `zero_phase=True`
  - [\#6705](https://github.com/scipy/scipy/pull/6705): ENH: add initial guess to sparse.linalg.lsqr
  - [\#6706](https://github.com/scipy/scipy/pull/6706): ENH: add initial guess to sparse.linalg.lsmr
  - [\#6769](https://github.com/scipy/scipy/pull/6769): BUG: optimize: add sufficient descent condition check to CG line...
  - [\#6855](https://github.com/scipy/scipy/pull/6855): Handle objects supporting PEP 519 in I/O functions
  - [\#6945](https://github.com/scipy/scipy/pull/6945): MAINT: ckdtree codebase clean up
  - [\#6953](https://github.com/scipy/scipy/pull/6953): DOC: add a SciPy Project Governance document
  - [\#6998](https://github.com/scipy/scipy/pull/6998): fix documentation of spearman rank corrcoef
  - [\#7017](https://github.com/scipy/scipy/pull/7017): ENH: add methods logcdf and cdf to `scipy.stats.multivariate_normal`
  - [\#7027](https://github.com/scipy/scipy/pull/7027): Add random unitary matrices
  - [\#7030](https://github.com/scipy/scipy/pull/7030): ENH: Add strictly-increasing checks for x to 1D splines
  - [\#7031](https://github.com/scipy/scipy/pull/7031): BUG: Fix `linear_sum_assignment` hanging on an undefined matrix
  - [\#7041](https://github.com/scipy/scipy/pull/7041): DOC: Clairfy that windows are DFT-even by default
  - [\#7048](https://github.com/scipy/scipy/pull/7048): DOC: modified docs for `find_peak_cwt`. Fixes \#6922
  - [\#7056](https://github.com/scipy/scipy/pull/7056): Fix insufficient precision when calculating spearman/kendall...
  - [\#7057](https://github.com/scipy/scipy/pull/7057): MAINT: change dtype comparison in `optimize.linear_sum_assignment`.
  - [\#7059](https://github.com/scipy/scipy/pull/7059): TST: make `Xdist_deprecated_args` cover all metrics
  - [\#7061](https://github.com/scipy/scipy/pull/7061): Fix msvc 9 and 10 compile errors
  - [\#7070](https://github.com/scipy/scipy/pull/7070): ENH: sparse: optimizing CSR/CSC slicing fast paths
  - [\#7078](https://github.com/scipy/scipy/pull/7078): ENH: sparse: defer `sum_duplicates` to csr/csc
  - [\#7079](https://github.com/scipy/scipy/pull/7079): ENH: sparse: allow subclasses to override specific math operations
  - [\#7081](https://github.com/scipy/scipy/pull/7081): ENH: sparse: speed up CSR/CSC toarray()
  - [\#7082](https://github.com/scipy/scipy/pull/7082): MAINT: Add missing `PyType_Ready(&SuperLUGlobalType)` for Py3
  - [\#7083](https://github.com/scipy/scipy/pull/7083): Corrected typo in the doc of scipy.linalg.lstsq()
  - [\#7086](https://github.com/scipy/scipy/pull/7086): Fix bug \#7049 causing excessive slowness in `expm_multiply`
  - [\#7088](https://github.com/scipy/scipy/pull/7088): Documented `_argcheck` for `rv_discrete`
  - [\#7094](https://github.com/scipy/scipy/pull/7094): MAINT: Fix mistake in PR \#7082
  - [\#7098](https://github.com/scipy/scipy/pull/7098): BF: return NULL from failed Py3 module check
  - [\#7105](https://github.com/scipy/scipy/pull/7105): MAINT: Customize ?TRSYL call in lyapunov solver
  - [\#7111](https://github.com/scipy/scipy/pull/7111): Fix error message typo in UnivariateSpline
  - [\#7113](https://github.com/scipy/scipy/pull/7113): FIX: Add add float to return type in documentation
  - [\#7119](https://github.com/scipy/scipy/pull/7119): ENH: sparse.linalg: remove `_count_nonzero` hack
  - [\#7123](https://github.com/scipy/scipy/pull/7123): ENH: added "interior-point" method for `scipy.optimize.linprog`
  - [\#7137](https://github.com/scipy/scipy/pull/7137): DOC: clarify stats.linregress docstring, closes gh-7074
  - [\#7138](https://github.com/scipy/scipy/pull/7138): DOC: special: Add an example to the airy docstring.
  - [\#7139](https://github.com/scipy/scipy/pull/7139): DOC: stats: Update stats tutorial
  - [\#7142](https://github.com/scipy/scipy/pull/7142): BUG: special: prevent segfault in `pbwa`
  - [\#7143](https://github.com/scipy/scipy/pull/7143): DOC: special: warn about alternate elliptic integral parameterizations
  - [\#7146](https://github.com/scipy/scipy/pull/7146): fix docstring of NearestNDInterpolator
  - [\#7148](https://github.com/scipy/scipy/pull/7148): DOC: special: Add Parameters, Returns and Examples to gamma docstring
  - [\#7152](https://github.com/scipy/scipy/pull/7152): MAINT: spatial: Remove two unused variables in ckdtree/src/distance.h
  - [\#7153](https://github.com/scipy/scipy/pull/7153): MAINT: special: remove deprecated variant of `gammaln`
  - [\#7154](https://github.com/scipy/scipy/pull/7154): MAINT: Fix some code that generates C compiler warnings
  - [\#7155](https://github.com/scipy/scipy/pull/7155): DOC: linalg: Add examples for `solve_banded` and `solve_triangular`
  - [\#7156](https://github.com/scipy/scipy/pull/7156): DOC: fix docstring of NearestNDInterpolator
  - [\#7159](https://github.com/scipy/scipy/pull/7159): BUG: special: fix sign of derivative when `x < 0` in `pbwa`
  - [\#7161](https://github.com/scipy/scipy/pull/7161): MAINT: interpolate: make Rbf.A array a property
  - [\#7163](https://github.com/scipy/scipy/pull/7163): MAINT: special: return nan for inaccurate regions of `pbwa`
  - [\#7165](https://github.com/scipy/scipy/pull/7165): ENH: optimize: changes to make BFGS implementation more efficient.
  - [\#7166](https://github.com/scipy/scipy/pull/7166): BUG: Prevent infinite loop in `optimize._lsq.trf_linear.py`
  - [\#7173](https://github.com/scipy/scipy/pull/7173): BUG: sparse: return a numpy matrix from `_add_dense`
  - [\#7179](https://github.com/scipy/scipy/pull/7179): DOC: Fix an error in sparse argmax docstring
  - [\#7180](https://github.com/scipy/scipy/pull/7180): MAINT: interpolate: A bit of clean up in `interpolate/src/_interpolate.cpp`
  - [\#7182](https://github.com/scipy/scipy/pull/7182): Allow homogeneous coordinate transforms in `affine_transform`
  - [\#7184](https://github.com/scipy/scipy/pull/7184): MAINT: Remove hack modifying a readonly attr
  - [\#7185](https://github.com/scipy/scipy/pull/7185): ENH: Add evaluation of periodic splines \#6730
  - [\#7186](https://github.com/scipy/scipy/pull/7186): MAINT: PPoly: improve error messages for wrong shape/axis
  - [\#7187](https://github.com/scipy/scipy/pull/7187): DEP: interpolate: deprecate interpolate\_wrapper
  - [\#7198](https://github.com/scipy/scipy/pull/7198): DOC: linalg: Add examples for `solveh_banded` and `solve_toeplitz`.
  - [\#7200](https://github.com/scipy/scipy/pull/7200): DOC: stats: Added tutorial documentation for the generalized...
  - [\#7208](https://github.com/scipy/scipy/pull/7208): DOC: Added docstrings to `issparse/isspmatrix(_...)` methods and...
  - [\#7213](https://github.com/scipy/scipy/pull/7213): DOC: Added examples to circmean, circvar, circstd
  - [\#7215](https://github.com/scipy/scipy/pull/7215): DOC: Adding examples to scipy.sparse.linalg.... docstrings
  - [\#7223](https://github.com/scipy/scipy/pull/7223): DOC: special: Add examples for expit and logit.
  - [\#7224](https://github.com/scipy/scipy/pull/7224): BUG: interpolate: fix integer overflow in fitpack.bispev
  - [\#7225](https://github.com/scipy/scipy/pull/7225): DOC: update 1.0 release notes for several recent PRs.
  - [\#7226](https://github.com/scipy/scipy/pull/7226): MAINT: update docs and code for mailing list move to python.org
  - [\#7233](https://github.com/scipy/scipy/pull/7233): Fix issue \#7232: Do not mask exceptions in objective func evaluation
  - [\#7234](https://github.com/scipy/scipy/pull/7234): MAINT: cluster: cleaning up VQ/k-means code
  - [\#7236](https://github.com/scipy/scipy/pull/7236): DOC: Fixed typo
  - [\#7238](https://github.com/scipy/scipy/pull/7238): BUG: fix syntaxerror due to unicode character in `trustregion_exact`.
  - [\#7243](https://github.com/scipy/scipy/pull/7243): DOC: Update docstring in misc/pilutil.py
  - [\#7246](https://github.com/scipy/scipy/pull/7246): DEP: misc: deprecate imported names
  - [\#7249](https://github.com/scipy/scipy/pull/7249): DOC: Add plotted example to scipy.cluster.vq.kmeans
  - [\#7252](https://github.com/scipy/scipy/pull/7252): Fix 5231: docs of <span class="title-ref">factr</span>, <span class="title-ref">ftol</span> in sync w/ code
  - [\#7254](https://github.com/scipy/scipy/pull/7254): ENH: SphericalVoronoi Input Handling
  - [\#7256](https://github.com/scipy/scipy/pull/7256): fix for issue \#7255 - Circular statistics functions give wrong...
  - [\#7263](https://github.com/scipy/scipy/pull/7263): CI: use python's faulthandler to ease tracing segfaults
  - [\#7288](https://github.com/scipy/scipy/pull/7288): ENH: linalg: add `subspace_angles` function.
  - [\#7290](https://github.com/scipy/scipy/pull/7290): BUG: stats: Fix spurious warnings in genextreme.
  - [\#7292](https://github.com/scipy/scipy/pull/7292): ENH: optimize: added trust region method trust-trlib
  - [\#7296](https://github.com/scipy/scipy/pull/7296): DOC: stats: Add an example to the `ttest_ind_from_stats` docstring.
  - [\#7297](https://github.com/scipy/scipy/pull/7297): DOC: signal: Add examples for `chirp()` and `sweep_poly()`.
  - [\#7299](https://github.com/scipy/scipy/pull/7299): DOC: Made difference between brent and fminbound clearer
  - [\#7305](https://github.com/scipy/scipy/pull/7305): Simplify if-statements and constructor calls in `integrate._ode`
  - [\#7309](https://github.com/scipy/scipy/pull/7309): Comply with PEP 518.
  - [\#7313](https://github.com/scipy/scipy/pull/7313): REL: add `python_requires` to setup.py, fix Python version check.
  - [\#7315](https://github.com/scipy/scipy/pull/7315): BUG: Fixed bug with Laguerre and Legendre polynomials
  - [\#7320](https://github.com/scipy/scipy/pull/7320): DOC: clarify meaning of flags in ode.integrate
  - [\#7333](https://github.com/scipy/scipy/pull/7333): DOC: Add examples to `scipy.ndimage.gaussian_filter1d`
  - [\#7337](https://github.com/scipy/scipy/pull/7337): ENH: add n-dimensional DCT and IDCT to fftpack
  - [\#7353](https://github.com/scipy/scipy/pull/7353): Add `_gels` functions
  - [\#7357](https://github.com/scipy/scipy/pull/7357): DOC: linalg: Add examples to the svdvals docstring.
  - [\#7359](https://github.com/scipy/scipy/pull/7359): Bump Sphinx version to 1.5.5
  - [\#7361](https://github.com/scipy/scipy/pull/7361): DOC: linalg: Add some 'See Also' links among special matrices...
  - [\#7362](https://github.com/scipy/scipy/pull/7362): TST: Fix some Fedora 25 test failures.
  - [\#7363](https://github.com/scipy/scipy/pull/7363): DOC: linalg: tweak the docstring example of svd
  - [\#7365](https://github.com/scipy/scipy/pull/7365): MAINT: fix `refguide_check.py` for Sphinx \>= 1.5
  - [\#7367](https://github.com/scipy/scipy/pull/7367): BUG: odrpack: fix invalid stride checks in `d_lpkbls.f`
  - [\#7368](https://github.com/scipy/scipy/pull/7368): DOC: constants: Add examples to the 'find' docstring.
  - [\#7376](https://github.com/scipy/scipy/pull/7376): MAINT: bundle Mathjax with built docs
  - [\#7377](https://github.com/scipy/scipy/pull/7377): MAINT: optimize: Better name for trust-region-exact method.
  - [\#7378](https://github.com/scipy/scipy/pull/7378): Improve wording in tutorial
  - [\#7383](https://github.com/scipy/scipy/pull/7383): fix KroghInterpolator.derivatives failure with complex input
  - [\#7389](https://github.com/scipy/scipy/pull/7389): FIX: Copy mutable window in `resample_poly`
  - [\#7390](https://github.com/scipy/scipy/pull/7390): DOC: optimize: A few tweaks of the examples in the `curve_fit`
  - [\#7391](https://github.com/scipy/scipy/pull/7391): DOC: Add examples to scipy.stats
  - [\#7394](https://github.com/scipy/scipy/pull/7394): "Weight" is actually mass. Add slugs and slinches/blobs to mass
  - [\#7398](https://github.com/scipy/scipy/pull/7398): DOC: Correct minor typo in optimize.{brenth,brentq}
  - [\#7401](https://github.com/scipy/scipy/pull/7401): DOC: zeta only accepts real input
  - [\#7413](https://github.com/scipy/scipy/pull/7413): BUG: fix error messages in `_minimize_trustregion_exact`
  - [\#7414](https://github.com/scipy/scipy/pull/7414): DOC: fix `ndimage.distance_transform_bf` docstring \[ci skip\]
  - [\#7415](https://github.com/scipy/scipy/pull/7415): DOC: fix skew docstring \[ci skip\]
  - [\#7423](https://github.com/scipy/scipy/pull/7423): Expand binnumbers with correct dimensions
  - [\#7431](https://github.com/scipy/scipy/pull/7431): BUG: Extend scipy.stats.arcsine.pdf to endpoints 0 and 1 \#7427
  - [\#7432](https://github.com/scipy/scipy/pull/7432): DOC: Add examples to scipy.cluster.hierarchy
  - [\#7448](https://github.com/scipy/scipy/pull/7448): ENH: stats: Implement the survival function for pareto.
  - [\#7454](https://github.com/scipy/scipy/pull/7454): FIX Replaced `np.assert_allclose` with imported `assert_allclose`
  - [\#7460](https://github.com/scipy/scipy/pull/7460): TST: fix integrate.ivp test that fails on 32-bit Python.
  - [\#7461](https://github.com/scipy/scipy/pull/7461): Doc: Added tutorial documentation for stats distributions ksone
  - [\#7463](https://github.com/scipy/scipy/pull/7463): DOC: Fix typos and remove trailing whitespace
  - [\#7465](https://github.com/scipy/scipy/pull/7465): Fix some ndimage.interpolation endianness bugs
  - [\#7468](https://github.com/scipy/scipy/pull/7468): del redundance in interpolate.py
  - [\#7470](https://github.com/scipy/scipy/pull/7470): Initialize "info" in `minpack_lmdif`
  - [\#7478](https://github.com/scipy/scipy/pull/7478): Added more testing of smirnov/smirnovi functions
  - [\#7479](https://github.com/scipy/scipy/pull/7479): MAINT: update for new FutureWarning's in numpy 1.13.0
  - [\#7480](https://github.com/scipy/scipy/pull/7480): DOC: correctly describe output shape of dirichlet.mean() and...
  - [\#7482](https://github.com/scipy/scipy/pull/7482): signal.lti: Remove deprecated cross-system properties
  - [\#7484](https://github.com/scipy/scipy/pull/7484): MAINT: Clean-up uses of np.asarray in ndimage
  - [\#7485](https://github.com/scipy/scipy/pull/7485): ENH: support any order \>=0 in `ndimage.gaussian_filter`
  - [\#7486](https://github.com/scipy/scipy/pull/7486): ENH: Support k\!=0 for sparse.diagonal()
  - [\#7498](https://github.com/scipy/scipy/pull/7498): BUG: sparse: pass assumeSortedIndices option to scikit.umfpack
  - [\#7501](https://github.com/scipy/scipy/pull/7501): ENH: add optimal leaf ordering for linkage matrices
  - [\#7506](https://github.com/scipy/scipy/pull/7506): MAINT: remove overflow in Metropolis fixes \#7495
  - [\#7507](https://github.com/scipy/scipy/pull/7507): TST: speed up full test suite by less eval points in mpmath tests.
  - [\#7509](https://github.com/scipy/scipy/pull/7509): BUG: fix issue when using `python setup.py somecommand --force`.
  - [\#7511](https://github.com/scipy/scipy/pull/7511): fix some alerts found with lgtm
  - [\#7514](https://github.com/scipy/scipy/pull/7514): Add explanation what the integer returned mean.
  - [\#7516](https://github.com/scipy/scipy/pull/7516): BUG: Fix roundoff errors in `ndimage.uniform_filter1d`.
  - [\#7517](https://github.com/scipy/scipy/pull/7517): TST: fix signal.convolve test that was effectively being skipped.
  - [\#7523](https://github.com/scipy/scipy/pull/7523): ENH: linalg: allow lstsq to work with 0-shaped arrays
  - [\#7525](https://github.com/scipy/scipy/pull/7525): TST: Warning cleanup
  - [\#7526](https://github.com/scipy/scipy/pull/7526): DOC: params in ndimage.interpolation functions not optional
  - [\#7527](https://github.com/scipy/scipy/pull/7527): MAINT: Encapsulate error message handling in `NI_LineBuffer`.
  - [\#7528](https://github.com/scipy/scipy/pull/7528): MAINT: Remove ndimage aliases for `NPY_MAXDIMS`.
  - [\#7529](https://github.com/scipy/scipy/pull/7529): MAINT: Remove `NI_(UN)LIKELY` macros in favor of numpy ones.
  - [\#7537](https://github.com/scipy/scipy/pull/7537): MAINT: Use accessor function for numpy array internals
  - [\#7541](https://github.com/scipy/scipy/pull/7541): MAINT: Remove some uses of Numarray types in ndimage.
  - [\#7543](https://github.com/scipy/scipy/pull/7543): MAINT: Replace all NumarrayTypes uses in `ni_fourier.c`
  - [\#7544](https://github.com/scipy/scipy/pull/7544): MAINT: Replace all uses of NumarrayTypes in `ni_interpolation.c`
  - [\#7545](https://github.com/scipy/scipy/pull/7545): MAINT: Replace all uses of NumarrayTypes in `ni_measure.c`
  - [\#7546](https://github.com/scipy/scipy/pull/7546): MAINT: Replace all uses of NumarrayTypes in `ni_morphology.c`
  - [\#7548](https://github.com/scipy/scipy/pull/7548): DOC: make a note in benchmarks README on how to run without rebuilding.
  - [\#7549](https://github.com/scipy/scipy/pull/7549): MAINT: Get rid of NumarrayTypes.
  - [\#7552](https://github.com/scipy/scipy/pull/7552): TST: Fix new warnings -\> error bugs found on OSX
  - [\#7554](https://github.com/scipy/scipy/pull/7554): Update superlu to 5.2.1 + fix stdint.h issue on MSVC
  - [\#7556](https://github.com/scipy/scipy/pull/7556): MAINT: Fix some types from \#7549 + miscellaneous warnings.
  - [\#7558](https://github.com/scipy/scipy/pull/7558): MAINT: Use correct \#define `NO_IMPORT_ARRAY`, not `NO_ARRAY_IMPORT`...
  - [\#7562](https://github.com/scipy/scipy/pull/7562): BUG: Copy `import_nose` from numpy.
  - [\#7563](https://github.com/scipy/scipy/pull/7563): ENH: Add the first Wasserstein and the Cramér-von Mises statistical...
  - [\#7568](https://github.com/scipy/scipy/pull/7568): Test janitoring
  - [\#7571](https://github.com/scipy/scipy/pull/7571): Test janitoring pt. 2
  - [\#7572](https://github.com/scipy/scipy/pull/7572): Pytestifying
  - [\#7574](https://github.com/scipy/scipy/pull/7574): TST: Remove ignore warnings filters from stats
  - [\#7577](https://github.com/scipy/scipy/pull/7577): MAINT: Remove unused code in `ndimage/ni_measure.c` and .h
  - [\#7578](https://github.com/scipy/scipy/pull/7578): TST: Remove ignore warnings filters from sparse, clean up warning...
  - [\#7581](https://github.com/scipy/scipy/pull/7581): BUG: properly deallocate memory from `PyArray_IntpConverter`.
  - [\#7582](https://github.com/scipy/scipy/pull/7582): DOC: signal tutorial: Typo in explanation of convolution
  - [\#7583](https://github.com/scipy/scipy/pull/7583): Remove remaining ignore warnings filters
  - [\#7586](https://github.com/scipy/scipy/pull/7586): DOC: add note to HACKING.rst on where to find build docs.
  - [\#7587](https://github.com/scipy/scipy/pull/7587): DOC: Add examples to scipy.optimize
  - [\#7594](https://github.com/scipy/scipy/pull/7594): TST: Add tests for ndimage converter functions.
  - [\#7596](https://github.com/scipy/scipy/pull/7596): Added a sanity check to `signal.savgol_filter`
  - [\#7599](https://github.com/scipy/scipy/pull/7599): \_upfirdn\_apply stopping condition bugfix
  - [\#7601](https://github.com/scipy/scipy/pull/7601): MAINT: special: remove `sph_jn` et al.
  - [\#7602](https://github.com/scipy/scipy/pull/7602): TST: fix test failures in trimmed statistics tests with numpy...
  - [\#7605](https://github.com/scipy/scipy/pull/7605): Be clear about required dimension order
  - [\#7606](https://github.com/scipy/scipy/pull/7606): MAINT: Remove unused function `NI_NormalizeType`.
  - [\#7607](https://github.com/scipy/scipy/pull/7607): TST: add osx to travis matrix
  - [\#7608](https://github.com/scipy/scipy/pull/7608): DOC: improve HACKING guide - mention reviewing PRs as contribution.
  - [\#7609](https://github.com/scipy/scipy/pull/7609): MAINT: Remove unnecessary warning filter by avoiding unnecessary...
  - [\#7610](https://github.com/scipy/scipy/pull/7610): \#7557 : fix example code in periodogram
  - [\#7611](https://github.com/scipy/scipy/pull/7611): \#7220 : fix TypeError while raising ValueError for invalid shape
  - [\#7612](https://github.com/scipy/scipy/pull/7612): Convert yield tests to pytest parametrized tests
  - [\#7613](https://github.com/scipy/scipy/pull/7613): Add distributor init file
  - [\#7614](https://github.com/scipy/scipy/pull/7614): fixup header
  - [\#7615](https://github.com/scipy/scipy/pull/7615): BUG: sparse: Fix assignment w/ non-canonical sparse argument
  - [\#7617](https://github.com/scipy/scipy/pull/7617): DOC: Clarify digital filter functions
  - [\#7619](https://github.com/scipy/scipy/pull/7619): ENH: scipy.sparse.spmatrix.astype: casting and copy parameter...
  - [\#7621](https://github.com/scipy/scipy/pull/7621): Expose VODE/ZVODE/LSODE IDID return code to user
  - [\#7622](https://github.com/scipy/scipy/pull/7622): MAINT: special: remove out-of-date comment for `ellpk`
  - [\#7625](https://github.com/scipy/scipy/pull/7625): TST: Add a test for "ignore" warning filters
  - [\#7628](https://github.com/scipy/scipy/pull/7628): MAINT: refactoring and cleaning distance.py/.c/.h
  - [\#7629](https://github.com/scipy/scipy/pull/7629): DEP: deprecate args usage in xdist
  - [\#7630](https://github.com/scipy/scipy/pull/7630): ENH: weighted metrics
  - [\#7634](https://github.com/scipy/scipy/pull/7634): Follow-up to \#6855
  - [\#7635](https://github.com/scipy/scipy/pull/7635): interpolate.splprep: Test some error cases, give slightly better...
  - [\#7642](https://github.com/scipy/scipy/pull/7642): Add an example to `interpolate.lagrange`
  - [\#7643](https://github.com/scipy/scipy/pull/7643): ENH: Added wrappers for LAPACK \<s,d\>stev
  - [\#7649](https://github.com/scipy/scipy/pull/7649): Fix \#7636, add PEP 519 test coverage to remaining I/O functions
  - [\#7650](https://github.com/scipy/scipy/pull/7650): DOC: signal: Add 'Examples' to the docstring for sosfiltfilt.
  - [\#7651](https://github.com/scipy/scipy/pull/7651): Fix up ccache usage on Travis + try enabling on OSX
  - [\#7653](https://github.com/scipy/scipy/pull/7653): DOC: transition of examples from 2 to 3. Closes \#7366
  - [\#7659](https://github.com/scipy/scipy/pull/7659): BENCH: fix optimize.BenchGlobal. Closes gh-7658.
  - [\#7662](https://github.com/scipy/scipy/pull/7662): CI: speed up continuous integration builds
  - [\#7664](https://github.com/scipy/scipy/pull/7664): Update odr documentation
  - [\#7665](https://github.com/scipy/scipy/pull/7665): BUG: wolfe2 line/scalar search now uses amax parameter
  - [\#7671](https://github.com/scipy/scipy/pull/7671): MAINT: `_lib/ccallback.h`: PyCapsule\_GetName returns const `char*`
  - [\#7672](https://github.com/scipy/scipy/pull/7672): TST: interpolate: test integrating periodic b-splines against...
  - [\#7674](https://github.com/scipy/scipy/pull/7674): Tests tuning
  - [\#7675](https://github.com/scipy/scipy/pull/7675): CI: move refguide-check to faster build
  - [\#7676](https://github.com/scipy/scipy/pull/7676): DOC: bump scipy-sphinx-theme to fix copybutton.js
  - [\#7678](https://github.com/scipy/scipy/pull/7678): Note the zero-padding of the results of `splrep` and `splprep`
  - [\#7681](https://github.com/scipy/scipy/pull/7681): MAINT: `_lib`: add user-overridable available memory determination
  - [\#7684](https://github.com/scipy/scipy/pull/7684): TST: linalg: explicitly close opened npz files
  - [\#7686](https://github.com/scipy/scipy/pull/7686): MAINT: remove unnecessary shebang lines and executable bits
  - [\#7687](https://github.com/scipy/scipy/pull/7687): BUG: stats: don't emit invalid warnings if moments are infinite
  - [\#7690](https://github.com/scipy/scipy/pull/7690): ENH: allow int-like parameters in several routines
  - [\#7691](https://github.com/scipy/scipy/pull/7691): DOC: Drop non-working source links from docs
  - [\#7694](https://github.com/scipy/scipy/pull/7694): fix `ma.rray` to `ma.array` in func `median_cihs`
  - [\#7698](https://github.com/scipy/scipy/pull/7698): BUG: stats: fix nan result from `multivariate_normal.cdf` (\#7669)
  - [\#7703](https://github.com/scipy/scipy/pull/7703): DOC: special: Update the docstrings for noncentral F functions.
  - [\#7709](https://github.com/scipy/scipy/pull/7709): BLD: integrate: avoid symbol clash between lsoda and vode
  - [\#7711](https://github.com/scipy/scipy/pull/7711): TST: `_lib`: make `test_parallel_threads` to not fail falsely
  - [\#7712](https://github.com/scipy/scipy/pull/7712): TST: stats: bump test tolerance in `TestMultivariateNormal.test_broadcasting`
  - [\#7715](https://github.com/scipy/scipy/pull/7715): MAINT: fix deprecated use of numpy.issubdtype
  - [\#7716](https://github.com/scipy/scipy/pull/7716): TST: integrate: drop timing tests
  - [\#7717](https://github.com/scipy/scipy/pull/7717): MAINT: mstats.winsorize inclusion bug fix
  - [\#7719](https://github.com/scipy/scipy/pull/7719): DOC: stats: Add a note about the special cases of the rdist distribution.
  - [\#7720](https://github.com/scipy/scipy/pull/7720): DOC: Add example and math to stats.pearsonr
  - [\#7723](https://github.com/scipy/scipy/pull/7723): DOC: Added Mann-Whitney U statistic reference
  - [\#7727](https://github.com/scipy/scipy/pull/7727): BUG: special/cdflib: deal with nan and nonfinite inputs
  - [\#7728](https://github.com/scipy/scipy/pull/7728): BLD: spatial: fix ckdtree depends header list
  - [\#7732](https://github.com/scipy/scipy/pull/7732): BLD: update Bento build for optimal\_leaf\_ordering addition
  - [\#7734](https://github.com/scipy/scipy/pull/7734): DOC: signal: Copy-edit and add examples to the Kaiser-related...
  - [\#7736](https://github.com/scipy/scipy/pull/7736): BUG: Fixes \#7735: Prevent integer overflow in concatenated index...
  - [\#7737](https://github.com/scipy/scipy/pull/7737): DOC: rename indices/indptr for `spatial.Delaunay vertex_neighbor_vertices`
  - [\#7738](https://github.com/scipy/scipy/pull/7738): ENH: Speed up freqz computation
  - [\#7739](https://github.com/scipy/scipy/pull/7739): TST: ignore ncfdtridfn failure in win32 and warn on FPU mode changes
  - [\#7740](https://github.com/scipy/scipy/pull/7740): Fix overflow in Anderson-Darling k-sample test
  - [\#7742](https://github.com/scipy/scipy/pull/7742): TST: special: limit expm1 mpmath comparison range
  - [\#7748](https://github.com/scipy/scipy/pull/7748): TST: stats: don't pass invalid alpha to np.random.dirichlet
  - [\#7749](https://github.com/scipy/scipy/pull/7749): BUG/DOC: optimize: method is 'interior-point', not 'interior...
  - [\#7751](https://github.com/scipy/scipy/pull/7751): BUG: optimize: `show_options('linprog', method='interior-point')`...
  - [\#7753](https://github.com/scipy/scipy/pull/7753): ENH: io: easier syntax for FortranFile read/write of mixed records
  - [\#7754](https://github.com/scipy/scipy/pull/7754): BLD: add `_lib._fpumode` extension to Bento build.
  - [\#7756](https://github.com/scipy/scipy/pull/7756): DOC: Show probability density functions as math
  - [\#7757](https://github.com/scipy/scipy/pull/7757): MAINT: remove outdated OS X build scripts. Fixes pytest failure.
  - [\#7758](https://github.com/scipy/scipy/pull/7758): MAINT: stats: pep8, wrap lines
  - [\#7760](https://github.com/scipy/scipy/pull/7760): DOC: special: add instructions on how to add special functions
  - [\#7761](https://github.com/scipy/scipy/pull/7761): DOC: allow specifying Python version for Sphinx makefile
  - [\#7765](https://github.com/scipy/scipy/pull/7765): TST: fix test coverage of `mstats_extras.py`
  - [\#7767](https://github.com/scipy/scipy/pull/7767): DOC: update 1.0 release notes.
  - [\#7768](https://github.com/scipy/scipy/pull/7768): DOC: update notes on how to release. Also change paver file to...
  - [\#7769](https://github.com/scipy/scipy/pull/7769): Add the `_sf` and `_logsf` function for planck dist
  - [\#7770](https://github.com/scipy/scipy/pull/7770): DOC: Replace rotten links in the docstring of minres
  - [\#7771](https://github.com/scipy/scipy/pull/7771): MAINT: f2py build output cleanup
  - [\#7773](https://github.com/scipy/scipy/pull/7773): DOC: optimize: Some copy-editing of linprog docs.
  - [\#7774](https://github.com/scipy/scipy/pull/7774): MAINT: set rcond explicitly for np.linalg.lstsq calls
  - [\#7777](https://github.com/scipy/scipy/pull/7777): remove leftover `nose` imports
  - [\#7780](https://github.com/scipy/scipy/pull/7780): ENH: Wrap LAPACK's dsytrd
  - [\#7781](https://github.com/scipy/scipy/pull/7781): DOC: Link rfft
  - [\#7782](https://github.com/scipy/scipy/pull/7782): MAINT: run pyx autogeneration in cythonize & remove autogen files
  - [\#7783](https://github.com/scipy/scipy/pull/7783): FIX: Disallow Wn==1 in digital filters
  - [\#7790](https://github.com/scipy/scipy/pull/7790): Fix test errors introduced by gh-5910
  - [\#7792](https://github.com/scipy/scipy/pull/7792): MAINT: fix syntax in pyproject.toml
  - [\#7809](https://github.com/scipy/scipy/pull/7809): ENH: sketches - Clarkson Woodruff Transform
  - [\#7810](https://github.com/scipy/scipy/pull/7810): ENH: Add `eig(vals)_tridiagonal`
  - [\#7811](https://github.com/scipy/scipy/pull/7811): BUG: stats: Fix warnings in `binned_statistics_dd`
  - [\#7814](https://github.com/scipy/scipy/pull/7814): ENH: signal: Replace 'nyq' and 'Hz' arguments with 'fs'.
  - [\#7820](https://github.com/scipy/scipy/pull/7820): DOC: update 1.0 release notes and mailmap
  - [\#7823](https://github.com/scipy/scipy/pull/7823): BUG: memory leak in messagestream / qhull.pyx
  - [\#7830](https://github.com/scipy/scipy/pull/7830): DOC: linalg: Add an example to the lstsq docstring.
  - [\#7835](https://github.com/scipy/scipy/pull/7835): ENH: Automatic FIR order for `decimate`
  - [\#7838](https://github.com/scipy/scipy/pull/7838): MAINT: stats: Deprecate `frechet_l` and `frechet_r`.
  - [\#7841](https://github.com/scipy/scipy/pull/7841): slsqp PEP8 formatting fixes, typos, etc.
  - [\#7843](https://github.com/scipy/scipy/pull/7843): ENH: Wrap all BLAS routines
  - [\#7844](https://github.com/scipy/scipy/pull/7844): DOC: update LICENSE.txt with licenses of bundled libs as needed.
  - [\#7851](https://github.com/scipy/scipy/pull/7851): ENH: Add wrappers for ?GGLSE, ?(HE/SY)CON, ?SYTF2, ?(HE/SY)TRF
  - [\#7856](https://github.com/scipy/scipy/pull/7856): ENH: added out argument to Xdist
  - [\#7858](https://github.com/scipy/scipy/pull/7858): BUG: special/cdflib: fix fatal loss of precision issues in cumfnc
  - [\#7859](https://github.com/scipy/scipy/pull/7859): FIX: Squash `place_poles` warning corner case
  - [\#7861](https://github.com/scipy/scipy/pull/7861): dummy statement for undefined `WITH_THREAD`
  - [\#7863](https://github.com/scipy/scipy/pull/7863): MAINT: add license texts to binary distributions
  - [\#7866](https://github.com/scipy/scipy/pull/7866): DOC, MAINT: fix links in the doc
  - [\#7867](https://github.com/scipy/scipy/pull/7867): DOC: fix up descriptions of pdf's in distribution docstrings.
  - [\#7869](https://github.com/scipy/scipy/pull/7869): DEP: deprecate misc.pilutil functions
  - [\#7870](https://github.com/scipy/scipy/pull/7870): DEP: remove deprecated functions
  - [\#7872](https://github.com/scipy/scipy/pull/7872): TST: silence RuntimeWarning for stats.truncnorm test marked as...
  - [\#7874](https://github.com/scipy/scipy/pull/7874): TST: fix an optimize.linprog test that fails intermittently.
  - [\#7875](https://github.com/scipy/scipy/pull/7875): TST: filter two integration warnings in stats tests.
  - [\#7876](https://github.com/scipy/scipy/pull/7876): GEN: Add comments to the tests for clarification
  - [\#7891](https://github.com/scipy/scipy/pull/7891): ENH: backport \#7879 to 1.0.x
  - [\#7902](https://github.com/scipy/scipy/pull/7902): MAINT: signal: Make freqz handling of multidim. arrays match...
  - [\#7905](https://github.com/scipy/scipy/pull/7905): REV: restore wminkowski
  - [\#7908](https://github.com/scipy/scipy/pull/7908): FIX: Avoid bad `__del__` (close) behavior
  - [\#7918](https://github.com/scipy/scipy/pull/7918): TST: mark two optimize.linprog tests as xfail. See gh-7877.
  - [\#7929](https://github.com/scipy/scipy/pull/7929): MAINT: changed defaults to lower in sytf2, sytrf and hetrf
  - [\#7939](https://github.com/scipy/scipy/pull/7939): Fix umfpack solver construction for win-amd64
  - [\#7948](https://github.com/scipy/scipy/pull/7948): DOC: add note on checking for deprecations before upgrade to...
  - [\#7952](https://github.com/scipy/scipy/pull/7952): DOC: update SciPy Roadmap for 1.0 release and recent discussions.
  - [\#7960](https://github.com/scipy/scipy/pull/7960): BUG: optimize: revert changes to bfgs in gh-7165
  - [\#7962](https://github.com/scipy/scipy/pull/7962): TST: special: mark a failing hyp2f1 test as xfail
  - [\#7973](https://github.com/scipy/scipy/pull/7973): BUG: fixed keyword in 'info' in `_get_mem_available` utility
  - [\#8001](https://github.com/scipy/scipy/pull/8001): TST: fix test failures from Matplotlib 2.1 update
  - [\#8010](https://github.com/scipy/scipy/pull/8010): BUG: signal: fix crash in lfilter
  - [\#8019](https://github.com/scipy/scipy/pull/8019): MAINT: fix test failures with NumPy master

---

1.0.1-notes.md

---

# SciPy 1.0.1 Release Notes

<div class="contents">

</div>

SciPy 1.0.1 is a bug-fix release with no new features compared to 1.0.0. Probably the most important change is a fix for an incompatibility between SciPy 1.0.0 and `numpy.f2py` in the NumPy master branch.

## Authors

  - Saurabh Agarwal +
  - Alessandro Pietro Bardelli
  - Philip DeBoer
  - Ralf Gommers
  - Matt Haberland
  - Eric Larson
  - Denis Laxalde
  - Mihai Capotă +
  - Andrew Nelson
  - Oleksandr Pavlyk
  - Ilhan Polat
  - Anant Prakash +
  - Pauli Virtanen
  - Warren Weckesser
  - @xoviat
  - Ted Ying +

A total of 16 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.0.1

  - [\#7493](https://github.com/scipy/scipy/issues/7493): <span class="title-ref">ndimage.morphology</span> functions are broken with numpy 1.13.0
  - [\#8118](https://github.com/scipy/scipy/issues/8118): minimize\_cobyla broken if <span class="title-ref">disp=True</span> passed
  - [\#8142](https://github.com/scipy/scipy/issues/8142): scipy-v1.0.0 pdist with metric=\`minkowski\` raises \`ValueError:...
  - [\#8173](https://github.com/scipy/scipy/issues/8173): <span class="title-ref">scipy.stats.ortho\_group</span> produces all negative determinants...
  - [\#8207](https://github.com/scipy/scipy/issues/8207): gaussian\_filter seg faults on float16 numpy arrays
  - [\#8234](https://github.com/scipy/scipy/issues/8234): <span class="title-ref">scipy.optimize.linprog</span> <span class="title-ref">interior-point</span> presolve bug with trivial...
  - [\#8243](https://github.com/scipy/scipy/issues/8243): Make csgraph importable again via <span class="title-ref">from scipy.sparse import\*</span>
  - [\#8320](https://github.com/scipy/scipy/issues/8320): scipy.root segfaults with optimizer 'lm'

### Pull requests for 1.0.1

  - [\#8068](https://github.com/scipy/scipy/pull/8068): BUG: fix numpy deprecation test failures
  - [\#8082](https://github.com/scipy/scipy/pull/8082): BUG: fix solve\_lyapunov import
  - [\#8144](https://github.com/scipy/scipy/pull/8144): MRG: Fix for cobyla
  - [\#8150](https://github.com/scipy/scipy/pull/8150): MAINT: resolve UPDATEIFCOPY deprecation errors
  - [\#8156](https://github.com/scipy/scipy/pull/8156): BUG: missing check on minkowski w kwarg
  - [\#8187](https://github.com/scipy/scipy/pull/8187): BUG: Sign of elements in random orthogonal 2D matrices in "ortho\_group\_gen"...
  - [\#8197](https://github.com/scipy/scipy/pull/8197): CI: uninstall oclint
  - [\#8215](https://github.com/scipy/scipy/pull/8215): Fixes Numpy datatype compatibility issues
  - [\#8237](https://github.com/scipy/scipy/pull/8237): BUG: optimize: fix bug when variables fixed by bounds are inconsistent...
  - [\#8248](https://github.com/scipy/scipy/pull/8248): BUG: declare "gfk" variable before call of terminate() in newton-cg
  - [\#8280](https://github.com/scipy/scipy/pull/8280): REV: reintroduce csgraph import in scipy.sparse
  - [\#8322](https://github.com/scipy/scipy/pull/8322): MAINT: prevent scipy.optimize.root segfault closes \#8320
  - [\#8334](https://github.com/scipy/scipy/pull/8334): TST: stats: don't use exact equality check for hdmedian test
  - [\#8477](https://github.com/scipy/scipy/pull/8477): BUG: signal/signaltools: fix wrong refcounting in PyArray\_OrderFilterND
  - [\#8530](https://github.com/scipy/scipy/pull/8530): BUG: linalg: Fixed typo in flapack.pyf.src.
  - [\#8566](https://github.com/scipy/scipy/pull/8566): CI: Temporarily pin Cython version to 0.27.3
  - [\#8573](https://github.com/scipy/scipy/pull/8573): Backports for 1.0.1
  - [\#8581](https://github.com/scipy/scipy/pull/8581): Fix Cython 0.28 build break of qhull.pyx

---

1.1.0-notes.md

---

# SciPy 1.1.0 Release Notes

<div class="contents">

</div>

SciPy 1.1.0 is the culmination of 7 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.1.x branch, and on adding new features on the master branch.

This release requires Python 2.7 or 3.4+ and NumPy 1.8.2 or greater.

This release has improved but not necessarily 100% compatible with the [PyPy](https://pypy.org/) Python implementation. For running on PyPy, PyPy 6.0+ and Numpy 1.15.0+ are required.

## New features

### <span class="title-ref">scipy.integrate</span> improvements

The argument `tfirst` has been added to the function <span class="title-ref">scipy.integrate.odeint</span>. This allows `odeint` to use the same user functions as <span class="title-ref">scipy.integrate.solve\_ivp</span> and <span class="title-ref">scipy.integrate.ode</span> without the need for wrapping them in a function that swaps the first two arguments.

Error messages from `quad()` are now clearer.

### <span class="title-ref">scipy.linalg</span> improvements

The function <span class="title-ref">scipy.linalg.ldl</span> has been added for factorization of indefinite symmetric/hermitian matrices into triangular and block diagonal matrices.

Python wrappers for LAPACK `sygst`, `hegst` added in <span class="title-ref">scipy.linalg.lapack</span>.

Added <span class="title-ref">scipy.linalg.null\_space</span>, <span class="title-ref">scipy.linalg.cdf2rdf</span>, <span class="title-ref">scipy.linalg.rsf2csf</span>.

### <span class="title-ref">scipy.misc</span> improvements

An electrocardiogram has been added as an example dataset for a one-dimensional signal. It can be accessed through <span class="title-ref">scipy.misc.electrocardiogram</span>.

### <span class="title-ref">scipy.ndimage</span> improvements

The routines <span class="title-ref">scipy.ndimage.binary\_opening</span>, and <span class="title-ref">scipy.ndimage.binary\_closing</span> now support masks and different border values.

### <span class="title-ref">scipy.optimize</span> improvements

The method `trust-constr` has been added to <span class="title-ref">scipy.optimize.minimize</span>. The method switches between two implementations depending on the problem definition. For equality-constrained problems it is an implementation of a trust-region sequential quadratic programming solver and, when inequality constraints are imposed, it switches to a trust-region interior point method. Both methods are appropriate for large scale problems. Quasi-Newton options BFGS and SR1 were implemented and can be used to approximate second-order derivatives for this new method. Also, finite-differences can be used to approximate either first-order or second-order derivatives.

Random-to-Best/1/bin and Random-to-Best/1/exp mutation strategies were added to <span class="title-ref">scipy.optimize.differential\_evolution</span> as `randtobest1bin` and `randtobest1exp`, respectively. Note: These names were already in use but implemented a different mutation strategy. See [Backwards-incompatible changes](#backwards-incompatible-changes) below. The `init` keyword for the <span class="title-ref">scipy.optimize.differential\_evolution</span> function can now accept an array. This array allows the user to specify the entire population.

Added an `adaptive` option to Nelder-Mead to use step parameters adapted to the dimensionality of the problem.

Minor improvements in <span class="title-ref">scipy.optimize.basinhopping</span>.

### <span class="title-ref">scipy.signal</span> improvements

Three new functions for peak finding in one-dimensional arrays were added. <span class="title-ref">scipy.signal.find\_peaks</span> searches for peaks (local maxima) based on simple value comparison of neighboring samples and returns those peaks whose properties match optionally specified conditions for their height, prominence, width, threshold and distance to each other. <span class="title-ref">scipy.signal.peak\_prominences</span> and <span class="title-ref">scipy.signal.peak\_widths</span> can directly calculate the prominences or widths of known peaks.

Added ZPK versions of frequency transformations: <span class="title-ref">scipy.signal.bilinear\_zpk</span>, <span class="title-ref">scipy.signal.lp2bp\_zpk</span>, <span class="title-ref">scipy.signal.lp2bs\_zpk</span>, <span class="title-ref">scipy.signal.lp2hp\_zpk</span>, <span class="title-ref">scipy.signal.lp2lp\_zpk</span>.

Added <span class="title-ref">scipy.signal.windows.dpss</span>, <span class="title-ref">scipy.signal.windows.general\_cosine</span> and <span class="title-ref">scipy.signal.windows.general\_hamming</span>.

### <span class="title-ref">scipy.sparse</span> improvements

Previously, the `reshape` method only worked on <span class="title-ref">scipy.sparse.lil\_matrix</span>, and in-place reshaping did not work on any matrices. Both operations are now implemented for all matrices. Handling of shapes has been made consistent with `numpy.matrix` throughout the <span class="title-ref">scipy.sparse</span> module (shape can be a tuple or splatted, negative number acts as placeholder, padding and unpadding dimensions of size 1 to ensure length-2 shape).

### <span class="title-ref">scipy.special</span> improvements

Added Owen’s T function as <span class="title-ref">scipy.special.owens\_t</span>.

Accuracy improvements in `chndtr`, `digamma`, `gammaincinv`, `lambertw`, `zetac`.

### <span class="title-ref">scipy.stats</span> improvements

The Moyal distribution has been added as <span class="title-ref">scipy.stats.moyal</span>.

Added the normal inverse Gaussian distribution as <span class="title-ref">scipy.stats.norminvgauss</span>.

## Deprecated features

The iterative linear equation solvers in <span class="title-ref">scipy.sparse.linalg</span> had a sub-optimal way of how absolute tolerance is considered. The default behavior will be changed in a future Scipy release to a more standard and less surprising one. To silence deprecation warnings, set the `atol=` parameter explicitly.

<span class="title-ref">scipy.signal.windows.slepian</span> is deprecated, replaced by <span class="title-ref">scipy.signal.windows.dpss</span>.

The window functions in <span class="title-ref">scipy.signal</span> are now available in <span class="title-ref">scipy.signal.windows</span>. They will remain also available in the old location in the <span class="title-ref">scipy.signal</span> namespace in future Scipy versions. However, importing them from <span class="title-ref">scipy.signal.windows</span> is preferred, and new window functions will be added only there.

Indexing sparse matrices with floating-point numbers instead of integers is deprecated.

The function <span class="title-ref">scipy.stats.itemfreq</span> is deprecated.

## Backwards incompatible changes

Previously, <span class="title-ref">scipy.linalg.orth</span> used a singular value cutoff value appropriate for double precision numbers also for single-precision input. The cutoff value is now tunable, and the default has been changed to depend on the input data precision.

In previous versions of Scipy, the `randtobest1bin` and `randtobest1exp` mutation strategies in <span class="title-ref">scipy.optimize.differential\_evolution</span> were actually implemented using the Current-to-Best/1/bin and Current-to-Best/1/exp strategies, respectively. These strategies were renamed to `currenttobest1bin` and `currenttobest1exp` and the implementations of `randtobest1bin` and `randtobest1exp` strategies were corrected.

Functions in the ndimage module now always return their output array. Before, most functions only returned the output array if it had been allocated by the function, and would return `None` if it had been provided by the user.

Distance metrics in <span class="title-ref">scipy.spatial.distance</span> now require non-negative weights.

<span class="title-ref">scipy.special.loggamma</span> now returns real-valued result when the input is real-valued.

## Other changes

When building on Linux with GNU compilers, the `.so` Python extension files now hide all symbols except those required by Python, which can avoid problems when embedding the Python interpreter.

## Authors

  - Saurabh Agarwal +
  - Diogo Aguiam +
  - Joseph Albert +
  - Gerrit Ansmann +
  - Jean-François B +
  - Vahan Babayan +
  - Alessandro Pietro Bardelli
  - Christoph Baumgarten +
  - Felix Berkenkamp
  - Lilian Besson +
  - Aditya Bharti +
  - Matthew Brett
  - Evgeni Burovski
  - CJ Carey
  - Martin Ø. Christensen +
  - Robert Cimrman
  - Vicky Close +
  - Peter Cock +
  - Philip DeBoer
  - Jaime Fernandez del Rio
  - Dieter Werthmüller +
  - Tom Donoghue +
  - Matt Dzugan +
  - Lars G +
  - Jacques Gaudin +
  - Andriy Gelman +
  - Sean Gillies +
  - Dezmond Goff
  - Christoph Gohlke
  - Ralf Gommers
  - Uri Goren +
  - Deepak Kumar Gouda +
  - Douglas Lessa Graciosa +
  - Matt Haberland
  - David Hagen
  - Charles Harris
  - Jordan Heemskerk +
  - Danny Hermes +
  - Stephan Hoyer +
  - Theodore Hu +
  - Jean-François B. +
  - Mads Jensen +
  - Jon Haitz Legarreta Gorroño +
  - Ben Jude +
  - Noel Kippers +
  - Julius Bier Kirkegaard +
  - Maria Knorps +
  - Mikkel Kristensen +
  - Eric Larson
  - Kasper Primdal Lauritzen +
  - Denis Laxalde
  - KangWon Lee +
  - Jan Lehky +
  - Jackie Leng +
  - P.L. Lim +
  - Nikolay Mayorov
  - Mihai Capotă +
  - Max Mikhaylov +
  - Mark Mikofski +
  - Jarrod Millman
  - Raden Muhammad +
  - Paul Nation
  - Andrew Nelson
  - Nico Schlömer
  - Joel Nothman
  - Kyle Oman +
  - Egor Panfilov +
  - Nick Papior
  - Anubhav Patel +
  - Oleksandr Pavlyk
  - Ilhan Polat
  - Robert Pollak +
  - Anant Prakash +
  - Aman Pratik
  - Sean Quinn +
  - Giftlin Rajaiah +
  - Tyler Reddy
  - Joscha Reimer
  - Antonio H Ribeiro +
  - Antonio Horta Ribeiro
  - Benjamin Rose +
  - Fabian Rost
  - Divakar Roy +
  - Scott Sievert
  - Leo Singer
  - Sourav Singh
  - Martino Sorbaro +
  - Eric Stansifer +
  - Martin Thoma
  - Phil Tooley +
  - Piotr Uchwat +
  - Paul van Mulbregt
  - Pauli Virtanen
  - Stefan van der Walt
  - Warren Weckesser
  - Florian Weimer +
  - Eric Wieser
  - Josh Wilson
  - Ted Ying +
  - Evgeny Zhurko
  - Zé Vinícius
  - @Astrofysicus +
  - @awakenting +
  - @endolith
  - @FormerPhysicist +
  - @gaulinmp +
  - @hugovk
  - @ksemb +
  - @kshitij12345 +
  - @luzpaz +
  - @NKrvavica +
  - @rafalalgo +
  - @samyak0210 +
  - @soluwalana +
  - @sudheerachary +
  - @Tokixix +
  - @tttthomasssss +
  - @vkk800 +
  - @xoviat
  - @ziejcow +

A total of 122 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.1.0

  - [\#979](https://github.com/scipy/scipy/issues/979): Allow Hermitian matrices in lobpcg (Trac \#452)
  - [\#2694](https://github.com/scipy/scipy/issues/2694): Solution of iterative solvers can be less accurate than tolerance...
  - [\#3164](https://github.com/scipy/scipy/issues/3164): RectBivariateSpline usage inconsistent with other interpolation...
  - [\#4161](https://github.com/scipy/scipy/issues/4161): Missing ITMAX optional argument in scipy.optimize.nnls
  - [\#4354](https://github.com/scipy/scipy/issues/4354): signal.slepian should use definition of digital window
  - [\#4866](https://github.com/scipy/scipy/issues/4866): Shouldn't scipy.linalg.sqrtm raise an error if matrix is singular?
  - [\#4953](https://github.com/scipy/scipy/issues/4953): The dirichlet distribution unnecessarily requires strictly positive...
  - [\#5336](https://github.com/scipy/scipy/issues/5336): sqrtm on a diagonal matrix can warn "Matrix is singular and may...
  - [\#5922](https://github.com/scipy/scipy/issues/5922): Suboptimal convergence of Halley's method?
  - [\#6036](https://github.com/scipy/scipy/issues/6036): Incorrect edge case in scipy.stats.triang.pdf
  - [\#6202](https://github.com/scipy/scipy/issues/6202): Enhancement: Add LDLt factorization to scipy
  - [\#6589](https://github.com/scipy/scipy/issues/6589): sparse.random with custom rvs callable does pass on arg to subclass
  - [\#6654](https://github.com/scipy/scipy/issues/6654): Spearman's rank correlation coefficient slow with nan values...
  - [\#6794](https://github.com/scipy/scipy/issues/6794): Remove NumarrayType struct with numarray type names from ndimage
  - [\#7136](https://github.com/scipy/scipy/issues/7136): The dirichlet distribution unnecessarily rejects probabilities...
  - [\#7169](https://github.com/scipy/scipy/issues/7169): Will it be possible to add LDL' factorization for Hermitian indefinite...
  - [\#7291](https://github.com/scipy/scipy/issues/7291): fsolve docs should say it doesn't handle over- or under-determined...
  - [\#7453](https://github.com/scipy/scipy/issues/7453): binary\_opening/binary\_closing missing arguments
  - [\#7500](https://github.com/scipy/scipy/issues/7500): linalg.solve test failure on OS X with Accelerate
  - [\#7555](https://github.com/scipy/scipy/issues/7555): Integratig a function with singularities using the quad routine
  - [\#7624](https://github.com/scipy/scipy/issues/7624): allow setting both absolute and relative tolerance of sparse...
  - [\#7724](https://github.com/scipy/scipy/issues/7724): odeint documentation refers to t0 instead of t
  - [\#7746](https://github.com/scipy/scipy/issues/7746): False CDF values for skew normal distribution
  - [\#7750](https://github.com/scipy/scipy/issues/7750): mstats.winsorize documentation needs clarification
  - [\#7787](https://github.com/scipy/scipy/issues/7787): Documentation error in spherical Bessel, Neumann, modified spherical...
  - [\#7836](https://github.com/scipy/scipy/issues/7836): Scipy mmwrite incorrectly writes the zeros for skew-symmetric,...
  - [\#7839](https://github.com/scipy/scipy/issues/7839): sqrtm is unable to compute square root of zero matrix
  - [\#7847](https://github.com/scipy/scipy/issues/7847): solve is very slow since \#6775
  - [\#7888](https://github.com/scipy/scipy/issues/7888): Scipy 1.0.0b1 prints spurious DVODE/ZVODE/lsoda messages
  - [\#7909](https://github.com/scipy/scipy/issues/7909): bessel kv function in 0 is nan
  - [\#7915](https://github.com/scipy/scipy/issues/7915): LinearOperator's \_\_init\_\_ runs two times when instantiating the...
  - [\#7958](https://github.com/scipy/scipy/issues/7958): integrate.quad could use better error messages when given bad...
  - [\#7968](https://github.com/scipy/scipy/issues/7968): integrate.quad handles decreasing limits (b\<a) inconsistently
  - [\#7970](https://github.com/scipy/scipy/issues/7970): ENH: matching return dtype for loggamma/gammaln
  - [\#7991](https://github.com/scipy/scipy/issues/7991): <span class="title-ref">lfilter</span> segfaults for integer inputs
  - [\#8076](https://github.com/scipy/scipy/issues/8076): "make dist" for the docs doesn't complete cleanly
  - [\#8080](https://github.com/scipy/scipy/issues/8080): Use JSON in <span class="title-ref">special/\_generate\_pyx.py</span>?
  - [\#8127](https://github.com/scipy/scipy/issues/8127): scipy.special.psi(x) very slow for some values of x
  - [\#8145](https://github.com/scipy/scipy/issues/8145): BUG: ndimage geometric\_transform and zoom using deprecated NumPy...
  - [\#8158](https://github.com/scipy/scipy/issues/8158): BUG: romb print output requires correction
  - [\#8181](https://github.com/scipy/scipy/issues/8181): loadmat() raises TypeError instead of FileNotFound when reading...
  - [\#8228](https://github.com/scipy/scipy/issues/8228): bug for log1p on csr\_matrix
  - [\#8235](https://github.com/scipy/scipy/issues/8235): scipy.stats multinomial pmf return nan
  - [\#8271](https://github.com/scipy/scipy/issues/8271): scipy.io.mmwrite raises type error for uint16
  - [\#8288](https://github.com/scipy/scipy/issues/8288): Should tests be written for scipy.sparse.linalg.isolve.minres...
  - [\#8298](https://github.com/scipy/scipy/issues/8298): Broken links on scipy API web page
  - [\#8329](https://github.com/scipy/scipy/issues/8329): <span class="title-ref">\_gels</span> fails for fat A matrix
  - [\#8346](https://github.com/scipy/scipy/issues/8346): Avoidable overflow in scipy.special.binom(n, k)
  - [\#8371](https://github.com/scipy/scipy/issues/8371): BUG: special: zetac(x) returns 0 for x \< -30.8148
  - [\#8382](https://github.com/scipy/scipy/issues/8382): collections.OrderedDict in test\_mio.py
  - [\#8492](https://github.com/scipy/scipy/issues/8492): Missing documentation for <span class="title-ref">brute\_force</span> parameter in scipy.ndimage.morphology
  - [\#8532](https://github.com/scipy/scipy/issues/8532): leastsq needlessly appends extra dimension for scalar problems
  - [\#8544](https://github.com/scipy/scipy/issues/8544): \[feature request\] Convert complex diagonal form to real block...
  - [\#8561](https://github.com/scipy/scipy/issues/8561): \[Bug?\] Example of Bland's Rule for optimize.linprog (simplex)...
  - [\#8562](https://github.com/scipy/scipy/issues/8562): CI: Appveyor builds fail because it can't import ConvexHull from...
  - [\#8576](https://github.com/scipy/scipy/issues/8576): BUG: optimize: <span class="title-ref">show\_options(solver='minimize', method='Newton-CG')</span>...
  - [\#8603](https://github.com/scipy/scipy/issues/8603): test\_roots\_gegenbauer/chebyt/chebyc failures on manylinux
  - [\#8604](https://github.com/scipy/scipy/issues/8604): Test failures in scipy.sparse test\_inplace\_dense
  - [\#8616](https://github.com/scipy/scipy/issues/8616): special: ellpj.c code can be cleaned up a bit
  - [\#8625](https://github.com/scipy/scipy/issues/8625): scipy 1.0.1 no longer allows overwriting variables in netcdf...
  - [\#8629](https://github.com/scipy/scipy/issues/8629): gcrotmk.test\_atol failure with MKL
  - [\#8632](https://github.com/scipy/scipy/issues/8632): Sigma clipping on data with the same value
  - [\#8646](https://github.com/scipy/scipy/issues/8646): scipy.special.sinpi test failures in test\_zero\_sign on old MSVC
  - [\#8663](https://github.com/scipy/scipy/issues/8663): linprog with method=interior-point produced incorrect answer...
  - [\#8694](https://github.com/scipy/scipy/issues/8694): linalg:TestSolve.test\_all\_type\_size\_routine\_combinations fails...
  - [\#8703](https://github.com/scipy/scipy/issues/8703): Q: Does runtests.py --refguide-check need env (or other) variables...

### Pull requests for 1.1.0

  - [\#6590](https://github.com/scipy/scipy/pull/6590): BUG: sparse: fix custom rvs callable argument in sparse.random
  - [\#7004](https://github.com/scipy/scipy/pull/7004): ENH: scipy.linalg.eigsh cannot get all eigenvalues
  - [\#7120](https://github.com/scipy/scipy/pull/7120): ENH: implemented Owen's T function
  - [\#7483](https://github.com/scipy/scipy/pull/7483): ENH: Addition/multiplication operators for StateSpace systems
  - [\#7566](https://github.com/scipy/scipy/pull/7566): Informative exception when passing a sparse matrix
  - [\#7592](https://github.com/scipy/scipy/pull/7592): Adaptive Nelder-Mead
  - [\#7729](https://github.com/scipy/scipy/pull/7729): WIP: ENH: optimize: large-scale constrained optimization algorithms...
  - [\#7802](https://github.com/scipy/scipy/pull/7802): MRG: Add dpss window function
  - [\#7803](https://github.com/scipy/scipy/pull/7803): DOC: Add examples to spatial.distance
  - [\#7821](https://github.com/scipy/scipy/pull/7821): Add Returns section to the docstring
  - [\#7833](https://github.com/scipy/scipy/pull/7833): ENH: Performance improvements in scipy.linalg.special\_matrices
  - [\#7864](https://github.com/scipy/scipy/pull/7864): MAINT: sparse: Simplify sputils.isintlike
  - [\#7865](https://github.com/scipy/scipy/pull/7865): ENH: Improved speed of copy into L, U matrices
  - [\#7871](https://github.com/scipy/scipy/pull/7871): ENH: sparse: Add 64-bit integer to sparsetools
  - [\#7879](https://github.com/scipy/scipy/pull/7879): ENH: re-enabled old sv lapack routine as defaults
  - [\#7889](https://github.com/scipy/scipy/pull/7889): DOC: Show probability density functions as math
  - [\#7900](https://github.com/scipy/scipy/pull/7900): API: Soft deprecate signal.\* windows
  - [\#7910](https://github.com/scipy/scipy/pull/7910): ENH: allow <span class="title-ref">sqrtm</span> to compute the root of some singular matrices
  - [\#7911](https://github.com/scipy/scipy/pull/7911): MAINT: Avoid unnecessary array copies in xdist
  - [\#7913](https://github.com/scipy/scipy/pull/7913): DOC: Clarifies the meaning of <span class="title-ref">initial</span> of scipy.integrate.cumtrapz()
  - [\#7916](https://github.com/scipy/scipy/pull/7916): BUG: sparse.linalg: fix wrong use of \_\_new\_\_ in LinearOperator
  - [\#7921](https://github.com/scipy/scipy/pull/7921): BENCH: split spatial benchmark imports
  - [\#7927](https://github.com/scipy/scipy/pull/7927): ENH: added sygst/hegst routines to lapack
  - [\#7934](https://github.com/scipy/scipy/pull/7934): MAINT: add <span class="title-ref">io/\_test\_fortranmodule</span> to <span class="title-ref">.gitignore</span>
  - [\#7936](https://github.com/scipy/scipy/pull/7936): DOC: Fixed typo in scipy.special.roots\_jacobi documentation
  - [\#7937](https://github.com/scipy/scipy/pull/7937): MAINT: special: Mark a test that fails on i686 as a known failure.
  - [\#7941](https://github.com/scipy/scipy/pull/7941): ENH: LDLt decomposition for indefinite symmetric/hermitian matrices
  - [\#7945](https://github.com/scipy/scipy/pull/7945): ENH: Implement reshape method on sparse matrices
  - [\#7947](https://github.com/scipy/scipy/pull/7947): DOC: update docs on releasing and installing/upgrading
  - [\#7954](https://github.com/scipy/scipy/pull/7954): Basin-hopping changes
  - [\#7964](https://github.com/scipy/scipy/pull/7964): BUG: test\_falker not robust against numerical fuss in eigenvalues
  - [\#7967](https://github.com/scipy/scipy/pull/7967): QUADPACK Errors - human friendly errors to replace 'Invalid Input'
  - [\#7975](https://github.com/scipy/scipy/pull/7975): Make sure integrate.quad doesn't double-count singular points
  - [\#7978](https://github.com/scipy/scipy/pull/7978): TST: ensure negative weights are not allowed in distance metrics
  - [\#7980](https://github.com/scipy/scipy/pull/7980): MAINT: Truncate the warning msg about ill-conditioning
  - [\#7981](https://github.com/scipy/scipy/pull/7981): BUG: special: fix hyp2f1 behavior in certain circumstances
  - [\#7983](https://github.com/scipy/scipy/pull/7983): ENH: special: Add a real dispatch to <span class="title-ref">loggamma</span>
  - [\#7989](https://github.com/scipy/scipy/pull/7989): BUG: special: make <span class="title-ref">kv</span> return <span class="title-ref">inf</span> at a zero real argument
  - [\#7990](https://github.com/scipy/scipy/pull/7990): TST: special: test ufuncs in special at <span class="title-ref">nan</span> inputs
  - [\#7994](https://github.com/scipy/scipy/pull/7994): DOC: special: fix typo in spherical Bessel function documentation
  - [\#7995](https://github.com/scipy/scipy/pull/7995): ENH: linalg: add null\_space for computing null spaces via svd
  - [\#7999](https://github.com/scipy/scipy/pull/7999): BUG: optimize: Protect \_minpack calls with a lock.
  - [\#8003](https://github.com/scipy/scipy/pull/8003): MAINT: consolidate c99 compatibility
  - [\#8004](https://github.com/scipy/scipy/pull/8004): TST: special: get all <span class="title-ref">cython\_special</span> tests running again
  - [\#8006](https://github.com/scipy/scipy/pull/8006): MAINT: Consolidate an additional \_c99compat.h
  - [\#8011](https://github.com/scipy/scipy/pull/8011): Add new example of integrate.quad
  - [\#8015](https://github.com/scipy/scipy/pull/8015): DOC: special: remove <span class="title-ref">jn</span> from the refguide (again)
  - [\#8018](https://github.com/scipy/scipy/pull/8018): BUG - Issue with uint datatypes for array in get\_index\_dtype
  - [\#8021](https://github.com/scipy/scipy/pull/8021): DOC: spatial: Simplify Delaunay plotting
  - [\#8024](https://github.com/scipy/scipy/pull/8024): Documentation fix
  - [\#8027](https://github.com/scipy/scipy/pull/8027): BUG: io.matlab: fix saving unicode matrix names on py2
  - [\#8028](https://github.com/scipy/scipy/pull/8028): BUG: special: some fixes for <span class="title-ref">lambertw</span>
  - [\#8030](https://github.com/scipy/scipy/pull/8030): MAINT: Bump Cython version
  - [\#8034](https://github.com/scipy/scipy/pull/8034): BUG: sparse.linalg: fix corner-case bug in expm
  - [\#8035](https://github.com/scipy/scipy/pull/8035): MAINT: special: remove complex division hack
  - [\#8038](https://github.com/scipy/scipy/pull/8038): ENH: Cythonize pyx files if pxd dependencies change
  - [\#8042](https://github.com/scipy/scipy/pull/8042): TST: stats: reduce required precision in test\_fligner
  - [\#8043](https://github.com/scipy/scipy/pull/8043): TST: Use diff. values for decimal keyword for single and doubles
  - [\#8044](https://github.com/scipy/scipy/pull/8044): TST: accuracy of tests made different for singles and doubles
  - [\#8049](https://github.com/scipy/scipy/pull/8049): Unhelpful error message when calling scipy.sparse.save\_npz on...
  - [\#8052](https://github.com/scipy/scipy/pull/8052): TST: spatial: add a regression test for gh-8051
  - [\#8059](https://github.com/scipy/scipy/pull/8059): BUG: special: fix ufunc results for <span class="title-ref">nan</span> arguments
  - [\#8066](https://github.com/scipy/scipy/pull/8066): MAINT: special: reimplement inverses of incomplete gamma functions
  - [\#8072](https://github.com/scipy/scipy/pull/8072): Example for scipy.fftpack.ifft, <https://github.com/scipy/scipy/issues/7168>
  - [\#8073](https://github.com/scipy/scipy/pull/8073): Example for ifftn, <https://github.com/scipy/scipy/issues/7168>
  - [\#8078](https://github.com/scipy/scipy/pull/8078): Link to CoC in contributing.rst doc
  - [\#8085](https://github.com/scipy/scipy/pull/8085): BLD: Fix npy\_isnan of integer variables in cephes
  - [\#8088](https://github.com/scipy/scipy/pull/8088): DOC: note version for which new attributes have been added to...
  - [\#8090](https://github.com/scipy/scipy/pull/8090): BUG: special: add nan check to <span class="title-ref">\_legacy\_cast\_check</span> functions
  - [\#8091](https://github.com/scipy/scipy/pull/8091): Doxy Typos + trivial comment typos (2nd attempt)
  - [\#8096](https://github.com/scipy/scipy/pull/8096): TST: special: simplify <span class="title-ref">Arg</span>
  - [\#8101](https://github.com/scipy/scipy/pull/8101): MAINT: special: run <span class="title-ref">\_generate\_pyx.py</span> when <span class="title-ref">add\_newdocs.py</span>...
  - [\#8104](https://github.com/scipy/scipy/pull/8104): Input checking for scipy.sparse.linalg.inverse()
  - [\#8105](https://github.com/scipy/scipy/pull/8105): DOC: special: Update the 'euler' docstring.
  - [\#8109](https://github.com/scipy/scipy/pull/8109): MAINT: fixing code comments and hyp2f1 docstring: see issues...
  - [\#8112](https://github.com/scipy/scipy/pull/8112): More trivial typos
  - [\#8113](https://github.com/scipy/scipy/pull/8113): MAINT: special: generate test data npz files in setup.py and...
  - [\#8116](https://github.com/scipy/scipy/pull/8116): DOC: add build instructions
  - [\#8120](https://github.com/scipy/scipy/pull/8120): DOC: Clean up README
  - [\#8121](https://github.com/scipy/scipy/pull/8121): DOC: Add missing colons in docstrings
  - [\#8123](https://github.com/scipy/scipy/pull/8123): BLD: update Bento build config files for recent C99 changes.
  - [\#8124](https://github.com/scipy/scipy/pull/8124): Change to avoid use of <span class="title-ref">fmod</span> in scipy.signal.chebwin
  - [\#8126](https://github.com/scipy/scipy/pull/8126): Added examples for mode arg in geometric\_transform
  - [\#8128](https://github.com/scipy/scipy/pull/8128): relax relative tolerance parameter in TestMinumumPhase.test\_hilbert
  - [\#8129](https://github.com/scipy/scipy/pull/8129): ENH: special: use rational approximation for \`digamma\` on \`\[1,...
  - [\#8137](https://github.com/scipy/scipy/pull/8137): DOC Correct matrix width
  - [\#8141](https://github.com/scipy/scipy/pull/8141): MAINT: optimize: remove unused <span class="title-ref">\_\_main\_\_</span> code in L-BSGS-B
  - [\#8147](https://github.com/scipy/scipy/pull/8147): BLD: update Bento build for removal of .npz scipy.special test...
  - [\#8148](https://github.com/scipy/scipy/pull/8148): Alias hanning as an explanatory function of hann
  - [\#8149](https://github.com/scipy/scipy/pull/8149): MAINT: special: small fixes for <span class="title-ref">digamma</span>
  - [\#8159](https://github.com/scipy/scipy/pull/8159): Update version classifiers
  - [\#8164](https://github.com/scipy/scipy/pull/8164): BUG: riccati solvers don't catch ill-conditioned problems sufficiently...
  - [\#8168](https://github.com/scipy/scipy/pull/8168): DOC: release note for sparse resize methods
  - [\#8170](https://github.com/scipy/scipy/pull/8170): BUG: correctly pad netCDF files with null bytes
  - [\#8171](https://github.com/scipy/scipy/pull/8171): ENH added normal inverse gaussian distribution to scipy.stats
  - [\#8175](https://github.com/scipy/scipy/pull/8175): DOC: Add example to scipy.ndimage.zoom
  - [\#8177](https://github.com/scipy/scipy/pull/8177): MAINT: diffev small speedup in ensure constraint
  - [\#8178](https://github.com/scipy/scipy/pull/8178): FIX: linalg.\_qz String formatter syntax error
  - [\#8179](https://github.com/scipy/scipy/pull/8179): TST: Added pdist to asv spatial benchmark suite
  - [\#8180](https://github.com/scipy/scipy/pull/8180): TST: ensure constraint test improved
  - [\#8183](https://github.com/scipy/scipy/pull/8183): 0d conj correlate
  - [\#8186](https://github.com/scipy/scipy/pull/8186): BUG: special: fix derivative of `spherical_jn(1, 0)`
  - [\#8194](https://github.com/scipy/scipy/pull/8194): Fix warning message
  - [\#8196](https://github.com/scipy/scipy/pull/8196): BUG: correctly handle inputs with nan's and ties in spearmanr
  - [\#8198](https://github.com/scipy/scipy/pull/8198): MAINT: stats.triang edge case fixes \#6036
  - [\#8200](https://github.com/scipy/scipy/pull/8200): DOC: Completed "Examples" sections of all linalg funcs
  - [\#8201](https://github.com/scipy/scipy/pull/8201): MAINT: stats.trapz edge cases
  - [\#8204](https://github.com/scipy/scipy/pull/8204): ENH: sparse.linalg/lobpcg: change .T to .T.conj() to support...
  - [\#8206](https://github.com/scipy/scipy/pull/8206): MAINT: missed triang edge case.
  - [\#8214](https://github.com/scipy/scipy/pull/8214): BUG: Fix memory corruption in linalg.\_decomp\_update C extension
  - [\#8222](https://github.com/scipy/scipy/pull/8222): DOC: recommend scipy.integrate.solve\_ivp
  - [\#8223](https://github.com/scipy/scipy/pull/8223): ENH: added Moyal distribution to scipy.stats
  - [\#8232](https://github.com/scipy/scipy/pull/8232): BUG: sparse: Use deduped data for numpy ufuncs
  - [\#8236](https://github.com/scipy/scipy/pull/8236): Fix \#8235
  - [\#8253](https://github.com/scipy/scipy/pull/8253): BUG: optimize: fix bug related with function call calculation...
  - [\#8264](https://github.com/scipy/scipy/pull/8264): ENH: Extend peak finding capabilities in scipy.signal
  - [\#8273](https://github.com/scipy/scipy/pull/8273): BUG fixed printing of convergence message in minimize\_scalar...
  - [\#8276](https://github.com/scipy/scipy/pull/8276): DOC: Add notes to explain constrains on [overwrite]()\<\>
  - [\#8279](https://github.com/scipy/scipy/pull/8279): CI: fixing doctests
  - [\#8282](https://github.com/scipy/scipy/pull/8282): MAINT: weightedtau, change search for nan
  - [\#8287](https://github.com/scipy/scipy/pull/8287): Improving documentation of solve\_ivp and the underlying solvers
  - [\#8291](https://github.com/scipy/scipy/pull/8291): DOC: fix non-ascii characters in docstrings which broke the doc...
  - [\#8292](https://github.com/scipy/scipy/pull/8292): CI: use numpy 1.13 for refguide check build
  - [\#8296](https://github.com/scipy/scipy/pull/8296): Fixed bug reported in issue \#8181
  - [\#8297](https://github.com/scipy/scipy/pull/8297): DOC: Examples for linalg/decomp eigvals function
  - [\#8300](https://github.com/scipy/scipy/pull/8300): MAINT: Housekeeping for minimizing the linalg compiler warnings
  - [\#8301](https://github.com/scipy/scipy/pull/8301): DOC: make public API documentation cross-link to refguide.
  - [\#8302](https://github.com/scipy/scipy/pull/8302): make sure \_onenorm\_matrix\_power\_nnm actually returns a float
  - [\#8313](https://github.com/scipy/scipy/pull/8313): Change copyright to outdated 2008-2016 to 2008-year
  - [\#8315](https://github.com/scipy/scipy/pull/8315): TST: Add tests for \`scipy.sparse.linalg.isolve.minres\`
  - [\#8318](https://github.com/scipy/scipy/pull/8318): ENH: odeint: Add the argument 'tfirst' to odeint.
  - [\#8328](https://github.com/scipy/scipy/pull/8328): ENH: optimize: `trust-constr` optimization algorithms \[GSoC...
  - [\#8330](https://github.com/scipy/scipy/pull/8330): ENH: add a maxiter argument to NNLS
  - [\#8331](https://github.com/scipy/scipy/pull/8331): DOC: tweak the Moyal distribution docstring
  - [\#8333](https://github.com/scipy/scipy/pull/8333): FIX: Rewrapped ?gels and ?gels\_lwork routines
  - [\#8336](https://github.com/scipy/scipy/pull/8336): MAINT: integrate: handle b \< a in quad
  - [\#8337](https://github.com/scipy/scipy/pull/8337): BUG: special: Ensure zetac(1) returns inf.
  - [\#8347](https://github.com/scipy/scipy/pull/8347): BUG: Fix overflow in special.binom. Issue \#8346
  - [\#8356](https://github.com/scipy/scipy/pull/8356): DOC: Corrected Documentation Issue \#7750 winsorize function
  - [\#8358](https://github.com/scipy/scipy/pull/8358): ENH: stats: Use explicit MLE formulas in lognorm.fit and expon.fit
  - [\#8374](https://github.com/scipy/scipy/pull/8374): BUG: gh7854, maxiter for l-bfgs-b closes \#7854
  - [\#8379](https://github.com/scipy/scipy/pull/8379): CI: enable gcov coverage on travis
  - [\#8383](https://github.com/scipy/scipy/pull/8383): Removed collections.OrderedDict import ignore.
  - [\#8384](https://github.com/scipy/scipy/pull/8384): TravisCI: tool pep8 is now pycodestyle
  - [\#8387](https://github.com/scipy/scipy/pull/8387): MAINT: special: remove unused specfun code for Struve functions
  - [\#8393](https://github.com/scipy/scipy/pull/8393): DOC: Replace old type names in ndimage tutorial.
  - [\#8400](https://github.com/scipy/scipy/pull/8400): Fix tolerance specification in sparse.linalg iterative solvers
  - [\#8402](https://github.com/scipy/scipy/pull/8402): MAINT: Some small cleanups in ndimage.
  - [\#8403](https://github.com/scipy/scipy/pull/8403): FIX: Make scipy.optimize.zeros run under PyPy
  - [\#8407](https://github.com/scipy/scipy/pull/8407): BUG: sparse.linalg: fix termination bugs for cg, cgs
  - [\#8409](https://github.com/scipy/scipy/pull/8409): MAINT: special: add a <span class="title-ref">.pxd</span> file for Cephes functions
  - [\#8412](https://github.com/scipy/scipy/pull/8412): MAINT: special: remove <span class="title-ref">cephes/protos.h</span>
  - [\#8421](https://github.com/scipy/scipy/pull/8421): Setting "unknown" message in OptimizeResult when calling MINPACK.
  - [\#8423](https://github.com/scipy/scipy/pull/8423): FIX: Handle unsigned integers in mmio
  - [\#8426](https://github.com/scipy/scipy/pull/8426): DOC: correct FAQ entry on Apache license compatibility. Closes...
  - [\#8433](https://github.com/scipy/scipy/pull/8433): MAINT: add <span class="title-ref">.pytest\_cache</span> to the <span class="title-ref">.gitignore</span>
  - [\#8436](https://github.com/scipy/scipy/pull/8436): MAINT: scipy.sparse: less copies at transpose method
  - [\#8437](https://github.com/scipy/scipy/pull/8437): BUG: correct behavior for skew-symmetric matrices in io.mmwrite
  - [\#8440](https://github.com/scipy/scipy/pull/8440): DOC:Add examples to integrate.quadpack docstrings
  - [\#8441](https://github.com/scipy/scipy/pull/8441): BUG: sparse.linalg/gmres: deal with exact breakdown in gmres
  - [\#8442](https://github.com/scipy/scipy/pull/8442): MAINT: special: clean up Cephes header files
  - [\#8448](https://github.com/scipy/scipy/pull/8448): TST: Generalize doctest stopwords .axis( .plot(
  - [\#8457](https://github.com/scipy/scipy/pull/8457): MAINT: special: use JSON for function signatures in <span class="title-ref">\_generate\_pyx.py</span>
  - [\#8461](https://github.com/scipy/scipy/pull/8461): MAINT: Simplify return value of ndimage functions.
  - [\#8464](https://github.com/scipy/scipy/pull/8464): MAINT: Trivial typos
  - [\#8474](https://github.com/scipy/scipy/pull/8474): BUG: spatial: make qhull.pyx more pypy-friendly
  - [\#8476](https://github.com/scipy/scipy/pull/8476): TST: \_lib: disable refcounting tests on PyPy
  - [\#8479](https://github.com/scipy/scipy/pull/8479): BUG: io/matlab: fix issues in matlab i/o on pypy
  - [\#8481](https://github.com/scipy/scipy/pull/8481): DOC: Example for signal.cmplx\_sort
  - [\#8482](https://github.com/scipy/scipy/pull/8482): TST: integrate: use integers instead of PyCapsules to store pointers
  - [\#8483](https://github.com/scipy/scipy/pull/8483): ENH: io/netcdf: make mmap=False the default on PyPy
  - [\#8484](https://github.com/scipy/scipy/pull/8484): BUG: io/matlab: work around issue in to\_writeable on PyPy
  - [\#8488](https://github.com/scipy/scipy/pull/8488): MAINT: special: add const/static specifiers where possible
  - [\#8489](https://github.com/scipy/scipy/pull/8489): BUG: ENH: use common halley's method instead of parabolic variant
  - [\#8491](https://github.com/scipy/scipy/pull/8491): DOC: fix typos
  - [\#8496](https://github.com/scipy/scipy/pull/8496): ENH: special: make Chebyshev nodes symmetric
  - [\#8501](https://github.com/scipy/scipy/pull/8501): BUG: stats: Split the integral used to compute skewnorm.cdf.
  - [\#8502](https://github.com/scipy/scipy/pull/8502): WIP: Port CircleCI to v2
  - [\#8507](https://github.com/scipy/scipy/pull/8507): DOC: Add missing description to <span class="title-ref">brute\_force</span> parameter.
  - [\#8509](https://github.com/scipy/scipy/pull/8509): BENCH: forgot to add nelder-mead to list of methods
  - [\#8512](https://github.com/scipy/scipy/pull/8512): MAINT: Move spline interpolation code to spline.c
  - [\#8513](https://github.com/scipy/scipy/pull/8513): TST: special: mark a slow test as xslow
  - [\#8514](https://github.com/scipy/scipy/pull/8514): CircleCI: Share data between jobs
  - [\#8515](https://github.com/scipy/scipy/pull/8515): ENH: special: improve accuracy of <span class="title-ref">zetac</span> for negative arguments
  - [\#8520](https://github.com/scipy/scipy/pull/8520): TST: Decrease the array sizes for two linalg tests
  - [\#8522](https://github.com/scipy/scipy/pull/8522): TST: special: restrict range of <span class="title-ref">test\_besselk</span>/<span class="title-ref">test\_besselk\_int</span>
  - [\#8527](https://github.com/scipy/scipy/pull/8527): Documentation - example added for voronoi\_plot\_2d
  - [\#8528](https://github.com/scipy/scipy/pull/8528): DOC: Better, shared docstrings in ndimage
  - [\#8533](https://github.com/scipy/scipy/pull/8533): BUG: Fix PEP8 errors introduced in \#8528.
  - [\#8534](https://github.com/scipy/scipy/pull/8534): ENH: Expose additional window functions
  - [\#8538](https://github.com/scipy/scipy/pull/8538): MAINT: Fix a couple mistakes in .pyf files.
  - [\#8540](https://github.com/scipy/scipy/pull/8540): ENH: interpolate: allow string aliases in make\_interp\_spline...
  - [\#8541](https://github.com/scipy/scipy/pull/8541): ENH: Cythonize peak\_prominences
  - [\#8542](https://github.com/scipy/scipy/pull/8542): Remove numerical arguments from convolve2d / correlate2d
  - [\#8546](https://github.com/scipy/scipy/pull/8546): ENH: New arguments, documentation, and tests for ndimage.binary\_opening
  - [\#8547](https://github.com/scipy/scipy/pull/8547): Giving both size and input now raises UserWarning (\#7334)
  - [\#8549](https://github.com/scipy/scipy/pull/8549): DOC: stats: invweibull is also known as Frechet or type II extreme...
  - [\#8550](https://github.com/scipy/scipy/pull/8550): add cdf2rdf function
  - [\#8551](https://github.com/scipy/scipy/pull/8551): ENH: Port of most of the dd\_real part of the qd high-precision...
  - [\#8553](https://github.com/scipy/scipy/pull/8553): Note in docs to address issue \#3164.
  - [\#8554](https://github.com/scipy/scipy/pull/8554): ENH: stats: Use explicit MLE formulas in uniform.fit()
  - [\#8555](https://github.com/scipy/scipy/pull/8555): MAINT: adjust benchmark config
  - [\#8557](https://github.com/scipy/scipy/pull/8557): \[DOC\]: fix Nakagami density docstring
  - [\#8559](https://github.com/scipy/scipy/pull/8559): DOC: Fix docstring of diric(x, n)
  - [\#8563](https://github.com/scipy/scipy/pull/8563): \[DOC\]: fix gamma density docstring
  - [\#8564](https://github.com/scipy/scipy/pull/8564): BLD: change default Python version for doc build from 2.7 to...
  - [\#8568](https://github.com/scipy/scipy/pull/8568): BUG: Fixes Bland's Rule for pivot row/leaving variable, closes...
  - [\#8572](https://github.com/scipy/scipy/pull/8572): ENH: Add previous/next to interp1d
  - [\#8578](https://github.com/scipy/scipy/pull/8578): Example for linalg.eig()
  - [\#8580](https://github.com/scipy/scipy/pull/8580): DOC: update link to asv docs
  - [\#8584](https://github.com/scipy/scipy/pull/8584): filter\_design: switch to explicit arguments, keeping None as...
  - [\#8586](https://github.com/scipy/scipy/pull/8586): DOC: stats: Add parentheses that were missing in the exponnorm...
  - [\#8587](https://github.com/scipy/scipy/pull/8587): TST: add benchmark for newton, secant, halley
  - [\#8588](https://github.com/scipy/scipy/pull/8588): DOC: special: Remove heaviside from "functions not in special"...
  - [\#8591](https://github.com/scipy/scipy/pull/8591): DOC: cdf2rdf Added version info and "See also"
  - [\#8594](https://github.com/scipy/scipy/pull/8594): ENH: Cythonize peak\_widths
  - [\#8595](https://github.com/scipy/scipy/pull/8595): MAINT/ENH/BUG/TST: cdf2rdf: Address review comments made after...
  - [\#8597](https://github.com/scipy/scipy/pull/8597): DOC: add versionadded 1.1.0 for new keywords in ndimage.morphology
  - [\#8605](https://github.com/scipy/scipy/pull/8605): MAINT: special: improve implementations of <span class="title-ref">sinpi</span> and <span class="title-ref">cospi</span>
  - [\#8607](https://github.com/scipy/scipy/pull/8607): MAINT: add 2D benchmarks for convolve
  - [\#8608](https://github.com/scipy/scipy/pull/8608): FIX: Fix int check
  - [\#8613](https://github.com/scipy/scipy/pull/8613): fix typo in doc of signal.peak\_widths
  - [\#8615](https://github.com/scipy/scipy/pull/8615): TST: fix failing linalg.qz float32 test by decreasing precision.
  - [\#8617](https://github.com/scipy/scipy/pull/8617): MAINT: clean up code in ellpj.c
  - [\#8618](https://github.com/scipy/scipy/pull/8618): add fsolve docs it doesn't handle over- or under-determined problems
  - [\#8620](https://github.com/scipy/scipy/pull/8620): DOC: add note on dtype attribute of aslinearoperator() argument
  - [\#8627](https://github.com/scipy/scipy/pull/8627): ENH: Add example 1D signal (ECG) to scipy.misc
  - [\#8630](https://github.com/scipy/scipy/pull/8630): ENH: Remove unnecessary copying in stats.percentileofscore
  - [\#8631](https://github.com/scipy/scipy/pull/8631): BLD: fix pdf doc build. closes gh-8076
  - [\#8633](https://github.com/scipy/scipy/pull/8633): BUG: fix regression in <span class="title-ref">io.netcdf\_file</span> with append mode.
  - [\#8635](https://github.com/scipy/scipy/pull/8635): MAINT: remove spurious warning from (z)vode and lsoda. Closes...
  - [\#8636](https://github.com/scipy/scipy/pull/8636): BUG: sparse.linalg/gcrotmk: avoid rounding error in termination...
  - [\#8637](https://github.com/scipy/scipy/pull/8637): For pdf build
  - [\#8639](https://github.com/scipy/scipy/pull/8639): CI: build pdf documentation on circleci
  - [\#8640](https://github.com/scipy/scipy/pull/8640): TST: fix special test that was importing <span class="title-ref">np.testing.utils</span> (deprecated)
  - [\#8641](https://github.com/scipy/scipy/pull/8641): BUG: optimize: fixed sparse redundancy removal bug
  - [\#8645](https://github.com/scipy/scipy/pull/8645): BUG: modified sigmaclip to avoid clipping of constant input in...
  - [\#8647](https://github.com/scipy/scipy/pull/8647): TST: sparse: skip test\_inplace\_dense for numpy\<1.13
  - [\#8657](https://github.com/scipy/scipy/pull/8657): Latex reduce left margins
  - [\#8659](https://github.com/scipy/scipy/pull/8659): TST: special: skip sign-of-zero test on 32-bit win32 with old...
  - [\#8661](https://github.com/scipy/scipy/pull/8661): Fix dblquad and tplquad not accepting float boundaries
  - [\#8666](https://github.com/scipy/scipy/pull/8666): DOC: fixes \#8532
  - [\#8667](https://github.com/scipy/scipy/pull/8667): BUG: optimize: fixed issue \#8663
  - [\#8668](https://github.com/scipy/scipy/pull/8668): Fix example in docstring of netcdf\_file
  - [\#8671](https://github.com/scipy/scipy/pull/8671): DOC: Replace deprecated matplotlib kwarg
  - [\#8673](https://github.com/scipy/scipy/pull/8673): BUG: special: Use a stricter tolerance for the chndtr calculation.
  - [\#8674](https://github.com/scipy/scipy/pull/8674): ENH: In the Dirichlet distribution allow x\_i to be 0 if alpha\_i...
  - [\#8676](https://github.com/scipy/scipy/pull/8676): BUG: optimize: partial fix to linprog fails to detect infeasibility...
  - [\#8685](https://github.com/scipy/scipy/pull/8685): DOC: Add interp1d-next/previous example to tutorial
  - [\#8687](https://github.com/scipy/scipy/pull/8687): TST: netcdf: explicit mmap=True in test
  - [\#8688](https://github.com/scipy/scipy/pull/8688): BUG: signal, stats: use Python sum() instead of np.sum for summing...
  - [\#8689](https://github.com/scipy/scipy/pull/8689): TST: bump tolerances in tests
  - [\#8690](https://github.com/scipy/scipy/pull/8690): DEP: deprecate stats.itemfreq
  - [\#8691](https://github.com/scipy/scipy/pull/8691): BLD: special: fix build vs. dd\_real.h package
  - [\#8695](https://github.com/scipy/scipy/pull/8695): DOC: Improve examples in signal.find\_peaks with ECG signal
  - [\#8697](https://github.com/scipy/scipy/pull/8697): BUG: Fix <span class="title-ref">setup.py build install egg\_info</span>, which did not previously...
  - [\#8704](https://github.com/scipy/scipy/pull/8704): TST: linalg: drop large size from solve() test
  - [\#8705](https://github.com/scipy/scipy/pull/8705): DOC: Describe signal.find\_peaks and related functions behavior...
  - [\#8706](https://github.com/scipy/scipy/pull/8706): DOC: Specify encoding of rst file, remove an ambiguity in an...
  - [\#8710](https://github.com/scipy/scipy/pull/8710): MAINT: fix an import cycle sparse -\> special -\> integrate -\>...
  - [\#8711](https://github.com/scipy/scipy/pull/8711): ENH: remove an avoidable overflow in scipy.stats.norminvgauss.pdf()
  - [\#8716](https://github.com/scipy/scipy/pull/8716): BUG: interpolate: allow list inputs for make\_interp\_spline(...,...
  - [\#8720](https://github.com/scipy/scipy/pull/8720): np.testing import that is compatible with numpy 1.15
  - [\#8724](https://github.com/scipy/scipy/pull/8724): CI: don't use pyproject.toml in the CI builds

---

1.10.0-notes.md

---

# SciPy 1.10.0 Release Notes

<div class="contents">

</div>

SciPy 1.10.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.10.x branch, and on adding new features on the main branch.

This release requires Python 3.8+ and NumPy 1.19.5 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - A new dedicated datasets submodule (<span class="title-ref">scipy.datasets</span>) has been added, and is now preferred over usage of <span class="title-ref">scipy.misc</span> for dataset retrieval.
  - A new <span class="title-ref">scipy.interpolate.make\_smoothing\_spline</span> function was added. This function constructs a smoothing cubic spline from noisy data, using the generalized cross-validation (GCV) criterion to find the tradeoff between smoothness and proximity to data points.
  - <span class="title-ref">scipy.stats</span> has three new distributions, two new hypothesis tests, three new sample statistics, a class for greater control over calculations involving covariance matrices, and many other enhancements.

## New features

### <span class="title-ref">scipy.datasets</span> introduction

  - A new dedicated `datasets` submodule has been added. The submodules is meant for datasets that are relevant to other SciPy submodules ands content (tutorials, examples, tests), as well as contain a curated set of datasets that are of wider interest. As of this release, all the datasets from <span class="title-ref">scipy.misc</span> have been added to <span class="title-ref">scipy.datasets</span> (and deprecated in <span class="title-ref">scipy.misc</span>).
  - The submodule is based on \[Pooch\](<https://www.fatiando.org/pooch/latest/>) (a new optional dependency for SciPy), a Python package to simplify fetching data files. This move will, in a subsequent release, facilitate SciPy to trim down the sdist/wheel sizes, by decoupling the data files and moving them out of the SciPy repository, hosting them externally and downloading them when requested. After downloading the datasets once, the files are cached to avoid network dependence and repeated usage.
  - Added datasets from `scipy.misc`: <span class="title-ref">scipy.datasets.face</span>, <span class="title-ref">scipy.datasets.ascent</span>, <span class="title-ref">scipy.datasets.electrocardiogram</span>
  - Added download and caching functionality:
      - \`scipy.datasets.download\_all\`: a function to download all the <span class="title-ref">scipy.datasets</span> associated files at once.
      - \`scipy.datasets.clear\_cache\`: a simple utility function to clear cached dataset files from the file system.
      - `scipy/datasets/_download_all.py` can be run as a standalone script for packaging purposes to avoid any external dependency at build or test time. This can be used by SciPy packagers (e.g., for Linux distros) which may have to adhere to rules that forbid downloading sources from external repositories at package build time.

### <span class="title-ref">scipy.integrate</span> improvements

  - Added parameter `complex_func` to <span class="title-ref">scipy.integrate.quad</span>, which can be set `True` to integrate a complex integrand.

### <span class="title-ref">scipy.interpolate</span> improvements

  - <span class="title-ref">scipy.interpolate.interpn</span> now supports tensor-product interpolation methods (`slinear`, `cubic`, `quintic` and `pchip`)
  - Tensor-product interpolation methods (`slinear`, `cubic`, `quintic` and `pchip`) in <span class="title-ref">scipy.interpolate.interpn</span> and <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span> now allow values with trailing dimensions.
  - <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span> has a new fast path for `method="linear"` with 2D data, and `RegularGridInterpolator` is now easier to subclass
  - <span class="title-ref">scipy.interpolate.interp1d</span> now can take a single value for non-spline methods.
  - A new `extrapolate` argument is available to <span class="title-ref">scipy.interpolate.BSpline.design\_matrix</span>, allowing extrapolation based on the first and last intervals.
  - A new function <span class="title-ref">scipy.interpolate.make\_smoothing\_spline</span> has been added. It is an implementation of the generalized cross-validation spline smoothing algorithm. The `lam=None` (default) mode of this function is a clean-room reimplementation of the classic `gcvspl.f` Fortran algorithm for constructing GCV splines.
  - A new `method="pchip"` mode was aded to <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span>. This mode constructs an interpolator using tensor products of C1-continuous monotone splines (essentially, a <span class="title-ref">scipy.interpolate.PchipInterpolator</span> instance per dimension).

### <span class="title-ref">scipy.sparse.linalg</span> improvements

  - The spectral 2-norm is now available in <span class="title-ref">scipy.sparse.linalg.norm</span>.
  - The performance of <span class="title-ref">scipy.sparse.linalg.norm</span> for the default case (Frobenius norm) has been improved.
  - LAPACK wrappers were added for `trexc` and `trsen`.
  - The <span class="title-ref">scipy.sparse.linalg.lobpcg</span> algorithm was rewritten, yielding the following improvements:
      - a simple tunable restart potentially increases the attainable accuracy for edge cases,
      - internal postprocessing runs one final exact Rayleigh-Ritz method giving more accurate and orthonormal eigenvectors,
      - output the computed iterate with the smallest max norm of the residual and drop the history of subsequent iterations,
      - remove the check for `LinearOperator` format input and thus allow a simple function handle of a callable object as an input,
      - better handling of common user errors with input data, rather than letting the algorithm fail.

### <span class="title-ref">scipy.linalg</span> improvements

  - <span class="title-ref">scipy.linalg.lu\_factor</span> now accepts rectangular arrays instead of being restricted to square arrays.

### <span class="title-ref">scipy.ndimage</span> improvements

  - The new <span class="title-ref">scipy.ndimage.value\_indices</span> function provides a time-efficient method to search for the locations of individual values with an array of image data.
  - A new `radius` argument is supported by <span class="title-ref">scipy.ndimage.gaussian\_filter1d</span> and <span class="title-ref">scipy.ndimage.gaussian\_filter</span> for adjusting the kernel size of the filter.

### <span class="title-ref">scipy.optimize</span> improvements

  - <span class="title-ref">scipy.optimize.brute</span> now coerces non-iterable/single-value `args` into a tuple.
  - <span class="title-ref">scipy.optimize.least\_squares</span> and <span class="title-ref">scipy.optimize.curve\_fit</span> now accept <span class="title-ref">scipy.optimize.Bounds</span> for bounds constraints.
  - Added a tutorial for <span class="title-ref">scipy.optimize.milp</span>.
  - Improved the pretty-printing of <span class="title-ref">scipy.optimize.OptimizeResult</span> objects.
  - Additional options (`parallel`, `threads`, `mip_rel_gap`) can now be passed to <span class="title-ref">scipy.optimize.linprog</span> with `method='highs'`.

### <span class="title-ref">scipy.signal</span> improvements

  - The new window function <span class="title-ref">scipy.signal.windows.lanczos</span> was added to compute a Lanczos window, also known as a sinc window.

### <span class="title-ref">scipy.sparse.csgraph</span> improvements

  - the performance of <span class="title-ref">scipy.sparse.csgraph.dijkstra</span> has been improved, and star graphs in particular see a marked performance improvement

### <span class="title-ref">scipy.special</span> improvements

  - The new function <span class="title-ref">scipy.special.powm1</span>, a ufunc with signature `powm1(x, y)`, computes `x**y - 1`. The function avoids the loss of precision that can result when `y` is close to 0 or when `x` is close to 1.
  - <span class="title-ref">scipy.special.erfinv</span> is now more accurate as it leverages the Boost equivalent under the hood.

### <span class="title-ref">scipy.stats</span> improvements

  - Added <span class="title-ref">scipy.stats.goodness\_of\_fit</span>, a generalized goodness-of-fit test for use with any univariate distribution, any combination of known and unknown parameters, and several choices of test statistic (Kolmogorov-Smirnov, Cramer-von Mises, and Anderson-Darling).
  - Improved \`scipy.stats.bootstrap\`: Default method `'BCa'` now supports multi-sample statistics. Also, the bootstrap distribution is returned in the result object, and the result object can be passed into the function as parameter `bootstrap_result` to add additional resamples or change the confidence interval level and type.
  - Added maximum spacing estimation to <span class="title-ref">scipy.stats.fit</span>.
  - Added the Poisson means test ("E-test") as <span class="title-ref">scipy.stats.poisson\_means\_test</span>.
  - Added new sample statistics.
      - Added <span class="title-ref">scipy.stats.contingency.odds\_ratio</span> to compute both the conditional and unconditional odds ratios and corresponding confidence intervals for 2x2 contingency tables.
      - Added <span class="title-ref">scipy.stats.directional\_stats</span> to compute sample statistics of n-dimensional directional data.
      - Added <span class="title-ref">scipy.stats.expectile</span>, which generalizes the expected value in the same way as quantiles are a generalization of the median.
  - Added new statistical distributions.
      - Added <span class="title-ref">scipy.stats.uniform\_direction</span>, a multivariate distribution to sample uniformly from the surface of a hypersphere.
      - Added <span class="title-ref">scipy.stats.random\_table</span>, a multivariate distribution to sample uniformly from m x n contingency tables with provided marginals.
      - Added <span class="title-ref">scipy.stats.truncpareto</span>, the truncated Pareto distribution.
  - Improved the `fit` method of several distributions.
      - <span class="title-ref">scipy.stats.skewnorm</span> and <span class="title-ref">scipy.stats.weibull\_min</span> now use an analytical solution when `method='mm'`, which also serves a starting guess to improve the performance of `method='mle'`.
      - <span class="title-ref">scipy.stats.gumbel\_r</span> and \`scipy.stats.gumbel\_l\`: analytical maximum likelihood estimates have been extended to the cases in which location or scale are fixed by the user.
      - Analytical maximum likelihood estimates have been added for <span class="title-ref">scipy.stats.powerlaw</span>.
  - Improved random variate sampling of several distributions.
      - Drawing multiple samples from <span class="title-ref">scipy.stats.matrix\_normal</span>, <span class="title-ref">scipy.stats.ortho\_group</span>, <span class="title-ref">scipy.stats.special\_ortho\_group</span>, and <span class="title-ref">scipy.stats.unitary\_group</span> is faster.
      - The `rvs` method of <span class="title-ref">scipy.stats.vonmises</span> now wraps to the interval `[-np.pi, np.pi]`.
      - Improved the reliability of <span class="title-ref">scipy.stats.loggamma</span> `rvs` method for small values of the shape parameter.
  - Improved the speed and/or accuracy of functions of several statistical distributions.
      - Added <span class="title-ref">scipy.stats.Covariance</span> for better speed, accuracy, and user control in multivariate normal calculations.
      - <span class="title-ref">scipy.stats.skewnorm</span> methods `cdf`, `sf`, `ppf`, and `isf` methods now use the implementations from Boost, improving speed while maintaining accuracy. The calculation of higher-order moments is also faster and more accurate.
      - <span class="title-ref">scipy.stats.invgauss</span> methods `ppf` and `isf` methods now use the implementations from Boost, improving speed and accuracy.
      - <span class="title-ref">scipy.stats.invweibull</span> methods `sf` and `isf` are more accurate for small probability masses.
      - <span class="title-ref">scipy.stats.nct</span> and <span class="title-ref">scipy.stats.ncx2</span> now rely on the implementations from Boost, improving speed and accuracy.
      - Implemented the `logpdf` method of <span class="title-ref">scipy.stats.vonmises</span> for reliability in extreme tails.
      - Implemented the `isf` method of <span class="title-ref">scipy.stats.levy</span> for speed and accuracy.
      - Improved the robustness of <span class="title-ref">scipy.stats.studentized\_range</span> for large `df` by adding an infinite degree-of-freedom approximation.
      - Added a parameter `lower_limit` to <span class="title-ref">scipy.stats.multivariate\_normal</span>, allowing the user to change the integration limit from -inf to a desired value.
      - Improved the robustness of `entropy` of <span class="title-ref">scipy.stats.vonmises</span> for large concentration values.
  - Enhanced <span class="title-ref">scipy.stats.gaussian\_kde</span>.
      - Added <span class="title-ref">scipy.stats.gaussian\_kde.marginal</span>, which returns the desired marginal distribution of the original kernel density estimate distribution.
      - The `cdf` method of <span class="title-ref">scipy.stats.gaussian\_kde</span> now accepts a `lower_limit` parameter for integrating the PDF over a rectangular region.
      - Moved calculations for <span class="title-ref">scipy.stats.gaussian\_kde.logpdf</span> to Cython, improving speed.
      - The global interpreter lock is released by the `pdf` method of <span class="title-ref">scipy.stats.gaussian\_kde</span> for improved multithreading performance.
      - Replaced explicit matrix inversion with Cholesky decomposition for speed and accuracy.
  - Enhanced the result objects returned by many <span class="title-ref">scipy.stats</span> functions
      - Added a `confidence_interval` method to the result object returned by <span class="title-ref">scipy.stats.ttest\_1samp</span> and <span class="title-ref">scipy.stats.ttest\_rel</span>.
      - The <span class="title-ref">scipy.stats</span> functions `combine_pvalues`, `fisher_exact`, `chi2_contingency`, `median_test` and `mood` now return bunch objects rather than plain tuples, allowing attributes to be accessed by name.
      - Attributes of the result objects returned by `multiscale_graphcorr`, `anderson_ksamp`, `binomtest`, `crosstab`, `pointbiserialr`, `spearmanr`, `kendalltau`, and `weightedtau` have been renamed to `statistic` and `pvalue` for consistency throughout <span class="title-ref">scipy.stats</span>. Old attribute names are still allowed for backward compatibility.
      - <span class="title-ref">scipy.stats.anderson</span> now returns the parameters of the fitted distribution in a <span class="title-ref">scipy.stats.\_result\_classes.FitResult</span> object.
      - The `plot` method of <span class="title-ref">scipy.stats.\_result\_classes.FitResult</span> now accepts a `plot_type` parameter; the options are `'hist'` (histogram, default), `'qq'` (Q-Q plot), `'pp'` (P-P plot), and `'cdf'` (empirical CDF plot).
      - Kolmogorov-Smirnov tests (e.g. <span class="title-ref">scipy.stats.kstest</span>) now return the location (argmax) at which the statistic is calculated and the variant of the statistic used.
  - Improved the performance of several <span class="title-ref">scipy.stats</span> functions.
      - Improved the performance of <span class="title-ref">scipy.stats.cramervonmises\_2samp</span> and <span class="title-ref">scipy.stats.ks\_2samp</span> with `method='exact'`.
      - Improved the performance of <span class="title-ref">scipy.stats.siegelslopes</span>.
      - Improved the performance of <span class="title-ref">scipy.stats.mstats.hdquantile\_sd</span>.
      - Improved the performance of <span class="title-ref">scipy.stats.binned\_statistic\_dd</span> for several NumPy statistics, and binned statistics methods now support complex data.
  - Added the `scramble` optional argument to <span class="title-ref">scipy.stats.qmc.LatinHypercube</span>. It replaces `centered`, which is now deprecated.
  - Added a parameter `optimization` to all <span class="title-ref">scipy.stats.qmc.QMCEngine</span> subclasses to improve characteristics of the quasi-random variates.
  - Added tie correction to <span class="title-ref">scipy.stats.mood</span>.
  - Added tutorials for resampling methods in <span class="title-ref">scipy.stats</span>.
  - <span class="title-ref">scipy.stats.bootstrap</span>, <span class="title-ref">scipy.stats.permutation\_test</span>, and <span class="title-ref">scipy.stats.monte\_carlo\_test</span> now automatically detect whether the provided `statistic` is vectorized, so passing the `vectorized` argument explicitly is no longer required to take advantage of vectorized statistics.
  - Improved the speed of <span class="title-ref">scipy.stats.permutation\_test</span> for permutation types `'samples'` and `'pairings'`.
  - Added `axis`, `nan_policy`, and masked array support to <span class="title-ref">scipy.stats.jarque\_bera</span>.
  - Added the `nan_policy` optional argument to <span class="title-ref">scipy.stats.rankdata</span>.

## Deprecated features

  - <span class="title-ref">scipy.misc</span> module and all the methods in `misc` are deprecated in v1.10 and will be completely removed in SciPy v2.0.0. Users are suggested to utilize the <span class="title-ref">scipy.datasets</span> module instead for the dataset methods.
  - <span class="title-ref">scipy.stats.qmc.LatinHypercube</span> parameter `centered` has been deprecated. It is replaced by the `scramble` argument for more consistency with other QMC engines.
  - <span class="title-ref">scipy.interpolate.interp2d</span> class has been deprecated. The docstring of the deprecated routine lists recommended replacements.

## Expired Deprecations

  - There is an ongoing effort to follow through on long-standing deprecations.
  - The following previously deprecated features are affected:
      - Removed `cond` & `rcond` kwargs in `linalg.pinv`
      - Removed wrappers `scipy.linalg.blas.{clapack, flapack}`
      - Removed `scipy.stats.NumericalInverseHermite` and removed `tol` & `max_intervals` kwargs from `scipy.stats.sampling.NumericalInverseHermite`
      - Removed `local_search_options` kwarg frrom `scipy.optimize.dual_annealing`.

## Other changes

  - <span class="title-ref">scipy.stats.bootstrap</span>, <span class="title-ref">scipy.stats.permutation\_test</span>, and <span class="title-ref">scipy.stats.monte\_carlo\_test</span> now automatically detect whether the provided `statistic` is vectorized by looking for an `axis` parameter in the signature of `statistic`. If an `axis` parameter is present in `statistic` but should not be relied on for vectorized calls, users must pass option `vectorized==False` explicitly.
  - <span class="title-ref">scipy.stats.multivariate\_normal</span> will now raise a `ValueError` when the covariance matrix is not positive semidefinite, regardless of which method is called.

## Authors

  - Name (commits)
  - h-vetinari (10)
  - Jelle Aalbers (1)
  - Oriol Abril-Pla (1) +
  - Alan-Hung (1) +
  - Tania Allard (7)
  - Oren Amsalem (1) +
  - Sven Baars (10)
  - Balthasar (1) +
  - Ross Barnowski (1)
  - Christoph Baumgarten (2)
  - Peter Bell (2)
  - Sebastian Berg (1)
  - Aaron Berk (1) +
  - boatwrong (1) +
  - boeleman (1) +
  - Jake Bowhay (50)
  - Matthew Brett (4)
  - Evgeni Burovski (93)
  - Matthias Bussonnier (6)
  - Dominic C (2)
  - Mingbo Cai (1) +
  - James Campbell (2) +
  - CJ Carey (4)
  - cesaregarza (1) +
  - charlie0389 (1) +
  - Hood Chatham (5)
  - Andrew Chin (1) +
  - Daniel Ching (1) +
  - Leo Chow (1) +
  - chris (3) +
  - John Clow (1) +
  - cm7S (1) +
  - cmgodwin (1) +
  - Christopher Cowden (2) +
  - Henry Cuzco (2) +
  - Anirudh Dagar (12)
  - Hans Dembinski (2) +
  - Jaiden di Lanzo (24) +
  - Felipe Dias (1) +
  - Dieter Werthmüller (1)
  - Giuseppe Dilillo (1) +
  - dpoerio (1) +
  - drpeteb (1) +
  - Christopher Dupuis (1) +
  - Jordan Edmunds (1) +
  - Pieter Eendebak (1) +
  - Jérome Eertmans (1) +
  - Fabian Egli (2) +
  - Sebastian Ehlert (2) +
  - Kian Eliasi (1) +
  - Tomohiro Endo (1) +
  - Stefan Endres (1)
  - Zeb Engberg (4) +
  - Jonas Eschle (1) +
  - Thomas J. Fan (9)
  - fiveseven (1) +
  - Neil Flood (1) +
  - Franz Forstmayr (1)
  - Sara Fridovich-Keil (1)
  - David Gilbertson (1) +
  - Ralf Gommers (251)
  - Marco Gorelli (2) +
  - Matt Haberland (387)
  - Andrew Hawryluk (2) +
  - Christoph Hohnerlein (2) +
  - Loïc Houpert (2) +
  - Shamus Husheer (1) +
  - ideasrule (1) +
  - imoiwm (1) +
  - Lakshaya Inani (1) +
  - Joseph T. Iosue (1)
  - iwbc-mzk (1) +
  - Nathan Jacobi (3) +
  - Julien Jerphanion (5)
  - He Jia (1)
  - jmkuebler (1) +
  - Johannes Müller (1) +
  - Vedant Jolly (1) +
  - Juan Luis Cano Rodríguez (2)
  - Justin (1) +
  - jvavrek (1) +
  - jyuv (2)
  - Kai Mühlbauer (1) +
  - Nikita Karetnikov (3) +
  - Reinert Huseby Karlsen (1) +
  - kaspar (2) +
  - Toshiki Kataoka (1)
  - Robert Kern (3)
  - Joshua Klein (1) +
  - Andrew Knyazev (7)
  - Jozsef Kutas (16) +
  - Eric Larson (4)
  - Lechnio (1) +
  - Antony Lee (2)
  - Aditya Limaye (1) +
  - Xingyu Liu (2)
  - Christian Lorentzen (4)
  - Loïc Estève (2)
  - Thibaut Lunet (2) +
  - Peter Lysakovski (1)
  - marianasalamoni (2) +
  - mariprudencio (1) +
  - Paige Martin (1) +
  - Arno Marty (1) +
  - matthewborish (3) +
  - Damon McDougall (1)
  - Nicholas McKibben (22)
  - McLP (1) +
  - mdmahendri (1) +
  - Melissa Weber Mendonça (9)
  - Jarrod Millman (1)
  - Naoto Mizuno (2)
  - Shashaank N (1)
  - Pablo S Naharro (1) +
  - nboudrie (2) +
  - Andrew Nelson (52)
  - Nico Schlömer (1)
  - NiMlr (1) +
  - o-alexandre-felipe (1) +
  - Maureen Ononiwu (1) +
  - Dimitri Papadopoulos (2) +
  - partev (1) +
  - Tirth Patel (10)
  - Paulius Šarka (1) +
  - Josef Perktold (1)
  - Giacomo Petrillo (3) +
  - Matti Picus (1)
  - Rafael Pinto (1) +
  - PKNaveen (1) +
  - Ilhan Polat (6)
  - Akshita Prasanth (2) +
  - Sean Quinn (1)
  - Tyler Reddy (155)
  - Martin Reinecke (1)
  - Ned Richards (1)
  - Marie Roald (1) +
  - Sam Rosen (4) +
  - Pamphile Roy (105)
  - sabonerune (2) +
  - Atsushi Sakai (94)
  - Daniel Schmitz (27)
  - Anna Scholtz (1) +
  - Eli Schwartz (11)
  - serge-sans-paille (2)
  - JEEVANSHI SHARMA (1) +
  - ehsan shirvanian (2) +
  - siddhantwahal (2)
  - Mathieu Dutour Sikiric (1) +
  - Sourav Singh (1)
  - Alexander Soare (1) +
  - Bjørge Solli (2) +
  - Scott Staniewicz (1)
  - Ethan Steinberg (3) +
  - Albert Steppi (3)
  - Thomas Stoeger (1) +
  - Kai Striega (4)
  - Tartopohm (1) +
  - Mamoru TASAKA (2) +
  - Ewout ter Hoeven (5)
  - TianyiQ (1) +
  - Tiger (1) +
  - Will Tirone (1)
  - Ajay Shanker Tripathi (1) +
  - Edgar Andrés Margffoy Tuay (1) +
  - Dmitry Ulyumdzhiev (1) +
  - Hari Vamsi (1) +
  - VitalyChait (1) +
  - Rik Voorhaar (1) +
  - Samuel Wallan (4)
  - Stefan van der Walt (2)
  - Warren Weckesser (145)
  - wei2222 (1) +
  - windows-server-2003 (3) +
  - Marek Wojciechowski (2) +
  - Niels Wouda (1) +
  - WRKampi (1) +
  - Yeonjoo Yoo (1) +
  - Rory Yorke (1)
  - Xiao Yuan (2) +
  - Meekail Zain (2) +
  - Fabio Zanini (1) +
  - Steffen Zeile (1) +
  - Egor Zemlyanoy (19)
  - Gavin Zhang (3) +

A total of 184 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.10.0

  - [\#1261](https://github.com/scipy/scipy/issues/1261): errors in fmin\_bfgs and some improvements (Trac \#734)
  - [\#2167](https://github.com/scipy/scipy/issues/2167): BivariateSpline errors with kx=ky=1 (Trac \#1642)
  - [\#2304](https://github.com/scipy/scipy/issues/2304): funm gives incorrect results for non-diagonalizable inputs (Trac...
  - [\#3421](https://github.com/scipy/scipy/issues/3421): Rename information theory functions?
  - [\#3854](https://github.com/scipy/scipy/issues/3854): KroghInterpolator doesn't pass through points
  - [\#4043](https://github.com/scipy/scipy/issues/4043): scipy.interpolate.interp1d should be able to take a single value
  - [\#4555](https://github.com/scipy/scipy/issues/4555): leastsq should use cholesky not inv for hessian inversion
  - [\#4598](https://github.com/scipy/scipy/issues/4598): von Mises random variate sampling broken for non-zero location...
  - [\#4975](https://github.com/scipy/scipy/issues/4975): Documentation for s in UnivariateSpline is confusing
  - [\#6173](https://github.com/scipy/scipy/issues/6173): scipy.interpolate.lagrange implemented through coefficients
  - [\#6688](https://github.com/scipy/scipy/issues/6688): ENH: optimize.basinhopping: call an acceptance test before local...
  - [\#7104](https://github.com/scipy/scipy/issues/7104): scipy.stats.nct - wrong values in tails
  - [\#7268](https://github.com/scipy/scipy/issues/7268): scipy.sparse.linalg.norm does not implement spectral norm
  - [\#7521](https://github.com/scipy/scipy/issues/7521): scipy.UnivariateSpline smoothing condition documentation inaccuracy
  - [\#7857](https://github.com/scipy/scipy/issues/7857): griddata sensible to size of original grid when it should not
  - [\#8376](https://github.com/scipy/scipy/issues/8376): InterpolatedUnivariateSpline.roots() seems to miss roots sometimes
  - [\#9119](https://github.com/scipy/scipy/issues/9119): documentation issues of functions in scipy.stats.mstats
  - [\#9389](https://github.com/scipy/scipy/issues/9389): Kolmogorov Smirnov 2 samples returning max distance location...
  - [\#9440](https://github.com/scipy/scipy/issues/9440): Unexpected successful optimization with minimize when number...
  - [\#9451](https://github.com/scipy/scipy/issues/9451): Add shgo to optimize benchmarks
  - [\#10737](https://github.com/scipy/scipy/issues/10737): Goodness of fit tests for distributions with unknown parameters
  - [\#10911](https://github.com/scipy/scipy/issues/10911): scipy.optimize.minimize\_scalar does not automatically select...
  - [\#11026](https://github.com/scipy/scipy/issues/11026): rv\_discrete.interval returning wrong values for alpha = 1
  - [\#11053](https://github.com/scipy/scipy/issues/11053): scipy.stats: Allow specifying inverse-variance matrix to multivariate\_normal
  - [\#11131](https://github.com/scipy/scipy/issues/11131): DOC: stats.fisher\_exact does not match R functionality for \`oddsratio\`...
  - [\#11406](https://github.com/scipy/scipy/issues/11406): scipy.sparse.linalg.svds (v1.4.1) on singular matrix does not...
  - [\#11475](https://github.com/scipy/scipy/issues/11475): Filter radius as optional argument for gaussian\_filter1d/gaussian\_filter
  - [\#11772](https://github.com/scipy/scipy/issues/11772): Cache covariance matrix decomposition in frozen multivariate\_normal
  - [\#11777](https://github.com/scipy/scipy/issues/11777): non-central chi2 (scipy.stats.ncx2.pdf) gets clipped to zero...
  - [\#11790](https://github.com/scipy/scipy/issues/11790): NaN handling of stats.rankdata
  - [\#11860](https://github.com/scipy/scipy/issues/11860): Occurrence of nan values when using multinomial.pmf from scipy.stats?
  - [\#11916](https://github.com/scipy/scipy/issues/11916): Improve documentation for smoothing in interpolate.UnivariateSpline...
  - [\#12041](https://github.com/scipy/scipy/issues/12041): Spherical mean/variance
  - [\#12246](https://github.com/scipy/scipy/issues/12246): Interpolation 2D with SmoothBivariateSpline
  - [\#12621](https://github.com/scipy/scipy/issues/12621): Scalar minimization functions have no references
  - [\#12632](https://github.com/scipy/scipy/issues/12632): curve\_fit algorithm try to transform xdata in an array of floats
  - [\#12963](https://github.com/scipy/scipy/issues/12963): shgo is not correctly passing jac to minimizer
  - [\#13021](https://github.com/scipy/scipy/issues/13021): 2D Interpolation Scaling Issues
  - [\#13049](https://github.com/scipy/scipy/issues/13049): Examples missing import numpy as np?
  - [\#13452](https://github.com/scipy/scipy/issues/13452): Calling \`len()\` on the \`scipy.spatial.transform.rotation.Rotation\`...
  - [\#13529](https://github.com/scipy/scipy/issues/13529): signal.decimate doesn't use sosfilters and sosfiltfilt
  - [\#14098](https://github.com/scipy/scipy/issues/14098): DOC-Update for InterpolatedUnivariateSpline and LSQUnivariateSpline
  - [\#14198](https://github.com/scipy/scipy/issues/14198): better description of solveh\_banded limitations
  - [\#14348](https://github.com/scipy/scipy/issues/14348): Extract spline coefficient from splprep: tck
  - [\#14386](https://github.com/scipy/scipy/issues/14386): Let CloughTocher2DInterpolator fit "nearest" for points outside...
  - [\#14472](https://github.com/scipy/scipy/issues/14472): scipy.interpolate.CubicSpline boundary conditions appear to be...
  - [\#14533](https://github.com/scipy/scipy/issues/14533): optimize.shgo gives unexpected TypeError
  - [\#14541](https://github.com/scipy/scipy/issues/14541): Raspberry Pi 4 aarch64: ModuleNotFoundError: No module named...
  - [\#14584](https://github.com/scipy/scipy/issues/14584): scipy.signal.filter\_design.zpk2sos doctests fail (values different...
  - [\#14809](https://github.com/scipy/scipy/issues/14809): BUG: scipy.signal.periodogram window parameter
  - [\#14853](https://github.com/scipy/scipy/issues/14853): BUG: sqrtm dtype
  - [\#14922](https://github.com/scipy/scipy/issues/14922): Question: Seemingly unused, non-working script \`isolve/tests/demo\_lgres.py\`
  - [\#15049](https://github.com/scipy/scipy/issues/15049): BUG: Visualization of CWT matrix in signal.cwt example code
  - [\#15072](https://github.com/scipy/scipy/issues/15072): BUG: signal.decimate returns NaN with large float32 arrays
  - [\#15393](https://github.com/scipy/scipy/issues/15393): BUG: signal.decimate returns unexpected values with float32 arrays
  - [\#15473](https://github.com/scipy/scipy/issues/15473): ENH: \`skewnorm.cdf\` is very slow. Consider a much more efficient...
  - [\#15618](https://github.com/scipy/scipy/issues/15618): ENH: Generation of random 2D tables with given marginal totals
  - [\#15675](https://github.com/scipy/scipy/issues/15675): ENH: \`multivariate\_normal\` should accept eigendecomposition...
  - [\#15685](https://github.com/scipy/scipy/issues/15685): ENH: The exact p-value calculation in \`stats.cramervonmises\_2samp\`...
  - [\#15733](https://github.com/scipy/scipy/issues/15733): DEP: remove quiet parameter from fitpack
  - [\#15749](https://github.com/scipy/scipy/issues/15749): DEP: remove tol from \`NumericalInverseHermite\`
  - [\#15792](https://github.com/scipy/scipy/issues/15792): MAINT: There is no unittest and documentation of Improper integral...
  - [\#15807](https://github.com/scipy/scipy/issues/15807): DEP: remove dual\_annealing argument 'local\_search\_options'
  - [\#15844](https://github.com/scipy/scipy/issues/15844): It's not that obvious that \`firls\` requires an even number...
  - [\#15883](https://github.com/scipy/scipy/issues/15883): BUG: stats.bootstrap bca implementation triggers ValueError for...
  - [\#15936](https://github.com/scipy/scipy/issues/15936): Please add citations to the papers for COLAMD
  - [\#15996](https://github.com/scipy/scipy/issues/15996): Symbol hiding when using GNU linker in the Meson build should...
  - [\#16148](https://github.com/scipy/scipy/issues/16148): Documentation in spearmanr
  - [\#16235](https://github.com/scipy/scipy/issues/16235): BUG: Memory leak in function \`Py\_FindObjects\` due to new reference...
  - [\#16236](https://github.com/scipy/scipy/issues/16236): BUG: Memory leak in function \`py\_filter2d\` due to new reference...
  - [\#16251](https://github.com/scipy/scipy/issues/16251): DEP: Execute deprecation of scipy.linalg.blas.{clapack, flapack}
  - [\#16252](https://github.com/scipy/scipy/issues/16252): DEP: add deprecation warnings to kwargs \`turbo\` / \`eigvals\`...
  - [\#16253](https://github.com/scipy/scipy/issues/16253): DEP: add deprecation warning for kwargs \`nyq\` / \`Hz\` in firwin\*
  - [\#16256](https://github.com/scipy/scipy/issues/16256): DEP: add deprecation warning for binom\_test
  - [\#16272](https://github.com/scipy/scipy/issues/16272): BUG: unclear error for invalid bracketing
  - [\#16291](https://github.com/scipy/scipy/issues/16291): BUG: lambertw returns nan's on small values
  - [\#16297](https://github.com/scipy/scipy/issues/16297): DOC: minor release procedure adjustment
  - [\#16319](https://github.com/scipy/scipy/issues/16319): ENH: improved accuracy and orthonormality of output eigenvectors...
  - [\#16333](https://github.com/scipy/scipy/issues/16333): DOC: rvalue description is missing in stats.probplot
  - [\#16334](https://github.com/scipy/scipy/issues/16334): BUG: CLI help is not accessible using light themes
  - [\#16338](https://github.com/scipy/scipy/issues/16338): ENH: Add option to clip out of bounds input values to minimum...
  - [\#16342](https://github.com/scipy/scipy/issues/16342): BUG: IIRdesign function ftype='bessel' not recognized
  - [\#16344](https://github.com/scipy/scipy/issues/16344): ENH: improved \`stats.ortho\_group\`
  - [\#16364](https://github.com/scipy/scipy/issues/16364): ENH: stats: return bunches rather than plain tuples
  - [\#16380](https://github.com/scipy/scipy/issues/16380): BUG: RegularGridInterpolator error message is wrong
  - [\#16386](https://github.com/scipy/scipy/issues/16386): TST: sparse/linalg/tests/test\_expm\_multiply.py::test\_expm\_multiply\_dtype...
  - [\#16399](https://github.com/scipy/scipy/issues/16399): \`test\_mio.py::test\_recarray\` failure due to dtype handling...
  - [\#16413](https://github.com/scipy/scipy/issues/16413): DOC: rvs method docstrings refer to seed argument instead of...
  - [\#16433](https://github.com/scipy/scipy/issues/16433): ENH: scipy.stats.bootstrap() should do BCa for multivariate statistics...
  - [\#16472](https://github.com/scipy/scipy/issues/16472): handle spline interpolation methods in \`interpn\`
  - [\#16476](https://github.com/scipy/scipy/issues/16476): dev.py does not propagate error codes, thus hides errors on CI
  - [\#16490](https://github.com/scipy/scipy/issues/16490): DOC: err on example for \`scipy.signal.upfirdn\`
  - [\#16558](https://github.com/scipy/scipy/issues/16558): BUG: leaves\_color\_list incorrect when distance=0
  - [\#16580](https://github.com/scipy/scipy/issues/16580): Typo in scipy/optimize/tests/test\_optimize.py, logit instead...
  - [\#16582](https://github.com/scipy/scipy/issues/16582): TST: RegularGridInterpolator tests should be parameterised
  - [\#16603](https://github.com/scipy/scipy/issues/16603): ENH, DOC: Add policy on typo and small docs fixes
  - [\#16663](https://github.com/scipy/scipy/issues/16663): BUG: \`bool(rotation)\` leads to error
  - [\#16673](https://github.com/scipy/scipy/issues/16673): Test failure for \`TestPoisson.test\_mindist\` in Azure CI job
  - [\#16713](https://github.com/scipy/scipy/issues/16713): BUG/DOC: spatial: docstrings of \`Rotation\` methods are missing...
  - [\#16726](https://github.com/scipy/scipy/issues/16726): CI: Python 3.11 tests are failing because a dependency is using...
  - [\#16741](https://github.com/scipy/scipy/issues/16741): BUG: DOC: editing docstring example in svds
  - [\#16759](https://github.com/scipy/scipy/issues/16759): DOC: Add 'import numpy as np' to the 'Examples' section of docstrings.
  - [\#16763](https://github.com/scipy/scipy/issues/16763): BUG: numpy version requirement mismatch docs vs setup.py
  - [\#16773](https://github.com/scipy/scipy/issues/16773): BUG: indexing error in scipy.spatial.Voronoi in 3D
  - [\#16796](https://github.com/scipy/scipy/issues/16796): DOC: Method "bisect" for root\_scalar lacks correct argument list
  - [\#16819](https://github.com/scipy/scipy/issues/16819): BUG: stats.binned\_statistic\_2d is \~8x slower when using \`statistic=np.mean\`...
  - [\#16833](https://github.com/scipy/scipy/issues/16833): Runtime performance in BSpline.design\_matrix is inferior to BSpline().\_\_call\_\_()
  - [\#16892](https://github.com/scipy/scipy/issues/16892): Add legend to \`rv\_histogram\` plot in docs
  - [\#16912](https://github.com/scipy/scipy/issues/16912): MAINT: stats: optimize: Move \`\_contains\_nan\` function to more...
  - [\#16914](https://github.com/scipy/scipy/issues/16914): BUG: documentation of scipy.stats.truncnorm could be clearer
  - [\#17031](https://github.com/scipy/scipy/issues/17031): BUG: stats: Intermittent failure of the test 'test\_plot\_iv'
  - [\#17033](https://github.com/scipy/scipy/issues/17033): New CI failures in \`sparse\` with nightly numpy
  - [\#17047](https://github.com/scipy/scipy/issues/17047): BUG: Documentation error in scipy.signal
  - [\#17056](https://github.com/scipy/scipy/issues/17056): Mypy failure in CI for \`numpy/\_\_init\_\_.pyi\` positional-only...
  - [\#17065](https://github.com/scipy/scipy/issues/17065): BUG: minimize(method=’L-BFGS-B’) documentation is contradictory
  - [\#17070](https://github.com/scipy/scipy/issues/17070): Using Meson-built 1.10.0.dev0 nightly wheel in a conda environment...
  - [\#17074](https://github.com/scipy/scipy/issues/17074): BUG: scipy.optimize.linprog does not fulfill integer constraints...
  - [\#17078](https://github.com/scipy/scipy/issues/17078): DOC: "These are not universal functions" difficult to understand...
  - [\#17089](https://github.com/scipy/scipy/issues/17089): ENH: Documentation on test behind p-values of .spearmanr
  - [\#17129](https://github.com/scipy/scipy/issues/17129): DOC: inconsistency in when a new feature was added
  - [\#17155](https://github.com/scipy/scipy/issues/17155): BUG: stats: Bug in XSLOW tests in TestNumericalInverseHermite
  - [\#17167](https://github.com/scipy/scipy/issues/17167): BUG: bernoulli.pmf returns non-zero values with non-integer arguments
  - [\#17168](https://github.com/scipy/scipy/issues/17168): \`test\_powm1\` failing in CI on Windows
  - [\#17174](https://github.com/scipy/scipy/issues/17174): MAINT, REL: wheels not uploaded to staging on push to maintenance
  - [\#17241](https://github.com/scipy/scipy/issues/17241): BUG: CubicSpline segfaults when passing empty values for \`y\`with...
  - [\#17336](https://github.com/scipy/scipy/issues/17336): BUG: Meson build unconditionally probes for pythran, despite...
  - [\#17375](https://github.com/scipy/scipy/issues/17375): BUG: resample\_poly() freezes with large data and specific samplerate...
  - [\#17380](https://github.com/scipy/scipy/issues/17380): BUG: optimize: using \`integrality\` prevents \`linprog\` from...
  - [\#17382](https://github.com/scipy/scipy/issues/17382): BUG/DOC: optimize: \`minimize\` doc should reflect tnc's deprecation...
  - [\#17412](https://github.com/scipy/scipy/issues/17412): BUG: Meson error:compiler for language "cpp", not specified for...
  - [\#17444](https://github.com/scipy/scipy/issues/17444): BUG: beta.ppf causes segfault
  - [\#17468](https://github.com/scipy/scipy/issues/17468): Weird errors with running the tests \`scipy.stats.tests.test\_distributions\`...
  - [\#17518](https://github.com/scipy/scipy/issues/17518): ENH: stats.pearsonr: support complex data
  - [\#17523](https://github.com/scipy/scipy/issues/17523): BUG: \`\[source\]\` button in the docs sending to the wrong place
  - [\#17578](https://github.com/scipy/scipy/issues/17578): TST, BLD, CI: 1.10.0rc1 wheel build/test failures
  - [\#17619](https://github.com/scipy/scipy/issues/17619): BUG: core dump when calling scipy.optimize.linprog
  - [\#17644](https://github.com/scipy/scipy/issues/17644): BUG: 1.10.0rc2 Windows wheel tests runs all segfault
  - [\#17650](https://github.com/scipy/scipy/issues/17650): BUG: Assertion failed when using HiGHS

## Pull requests for 1.10.0

  - [\#9072](https://github.com/scipy/scipy/pull/9072): ENH: Added rectangular integral to multivariate\_normal
  - [\#9932](https://github.com/scipy/scipy/pull/9932): ENH: stats.gaussian\_kde: add method that returns marginal distribution
  - [\#11712](https://github.com/scipy/scipy/pull/11712): BUG: trust-constr evaluates function out of bounds
  - [\#12211](https://github.com/scipy/scipy/pull/12211): DOC: Dice similiarity index
  - [\#12312](https://github.com/scipy/scipy/pull/12312): ENH: Accelerate matrix normal sampling using matmul
  - [\#12594](https://github.com/scipy/scipy/pull/12594): BUG: fixed indexing error when using bounds in Powell's method...
  - [\#13053](https://github.com/scipy/scipy/pull/13053): ENH: add MLE for stats.powerlaw.fit
  - [\#13265](https://github.com/scipy/scipy/pull/13265): ENH: Kstest exact performance improvements
  - [\#13340](https://github.com/scipy/scipy/pull/13340): ENH: stats: Add the function odds\_ratio.
  - [\#13663](https://github.com/scipy/scipy/pull/13663): ENH: linalg: Add LAPACK wrappers for trexc and trsen.
  - [\#13753](https://github.com/scipy/scipy/pull/13753): DOC: optimize: update Powell docs to reflect API
  - [\#13957](https://github.com/scipy/scipy/pull/13957): ENH: stats.ks\_2samp: Pythranize remaining exact p-value calculations
  - [\#14248](https://github.com/scipy/scipy/pull/14248): MAINT:linalg: Make lu\_factor accept rectangular arrays
  - [\#14317](https://github.com/scipy/scipy/pull/14317): ENH: Optimize sparse frobenius norm
  - [\#14402](https://github.com/scipy/scipy/pull/14402): DOC: Clarify argument documentation for \`solve\`
  - [\#14430](https://github.com/scipy/scipy/pull/14430): ENH: improve siegelslopes via pythran
  - [\#14563](https://github.com/scipy/scipy/pull/14563): WIP: stats: bins=auto in docstrings
  - [\#14579](https://github.com/scipy/scipy/pull/14579): BENCH: optimize: add DFO CUTEST benchmark
  - [\#14638](https://github.com/scipy/scipy/pull/14638): DOC: added mention of the limitations of Thomas' algorithm
  - [\#14840](https://github.com/scipy/scipy/pull/14840): ENH: Addition of Poisson Means Test (E-test).
  - [\#15097](https://github.com/scipy/scipy/pull/15097): ENH: add radius to gaussian\_filter1d and gaussian\_filter
  - [\#15444](https://github.com/scipy/scipy/pull/15444): ENH: Infinite df approximation for Studentized Range PDF
  - [\#15493](https://github.com/scipy/scipy/pull/15493): ENH: Convert gaussian\_kde logpdf to Cython
  - [\#15607](https://github.com/scipy/scipy/pull/15607): ENH: Add \`scipy.datasets\` submodule
  - [\#15709](https://github.com/scipy/scipy/pull/15709): ENH: improve the computation time of stats.cramervonmises\_2samp()
  - [\#15770](https://github.com/scipy/scipy/pull/15770): ENH: stats: replace ncx2 stats distribution with Boost non\_central\_chi\_squared
  - [\#15878](https://github.com/scipy/scipy/pull/15878): DEP: remove local\_search\_options of dual\_annealing
  - [\#15892](https://github.com/scipy/scipy/pull/15892): BUG: stats: use mean behavior for percentileofscore in bootstrap
  - [\#15901](https://github.com/scipy/scipy/pull/15901): DEP: Deprecate scipy.misc in favour of scipy.datasets
  - [\#15967](https://github.com/scipy/scipy/pull/15967): TST/DOC: stats: explain/check 100% interval for discrete distributions
  - [\#15972](https://github.com/scipy/scipy/pull/15972): DOC: length of \`bands\` param. specified in \`firls\`
  - [\#16002](https://github.com/scipy/scipy/pull/16002): ENH: Allow specyfing inverse covariance of a multivariate normal...
  - [\#16017](https://github.com/scipy/scipy/pull/16017): ENH: special: Use boost for a couple ufuncs.
  - [\#16069](https://github.com/scipy/scipy/pull/16069): ENH: add additional MLE for fixed parameters in gumbel\_r.fit
  - [\#16096](https://github.com/scipy/scipy/pull/16096): BUG: use SOS filters in decimate for numerical stability
  - [\#16109](https://github.com/scipy/scipy/pull/16109): ENH: add \`optimization\` to \`QMCEngine\`
  - [\#16140](https://github.com/scipy/scipy/pull/16140): ENH: stats: Add \`nan\_policy\` optional argument for \`stats.rankdata\`
  - [\#16224](https://github.com/scipy/scipy/pull/16224): Add a \`pchip\` mode to RegularGridInterpolator.
  - [\#16227](https://github.com/scipy/scipy/pull/16227): BUG: special: Fix a couple issues with the 'double-double' code...
  - [\#16238](https://github.com/scipy/scipy/pull/16238): MAINT: stats: support string array for \_contains\_nan and add...
  - [\#16268](https://github.com/scipy/scipy/pull/16268): DOC: optimize: add marginals/slack example to \`linprog\`
  - [\#16294](https://github.com/scipy/scipy/pull/16294): BUG: linalg: Add precision preservation for \`sqrtm\`
  - [\#16298](https://github.com/scipy/scipy/pull/16298): REL: set version to 1.10.0.dev0
  - [\#16299](https://github.com/scipy/scipy/pull/16299): DEP: Execute deprecation of scipy.linalg.blas.{clapack, flapack}
  - [\#16307](https://github.com/scipy/scipy/pull/16307): DEP: add deprecation warning for binom\_test
  - [\#16315](https://github.com/scipy/scipy/pull/16315): DEP: add deprecation warning for kwargs nyq / Hz in firwin
  - [\#16317](https://github.com/scipy/scipy/pull/16317): ENH: stats: add truncated (i.e. upper bounded) Pareto distribution...
  - [\#16320](https://github.com/scipy/scipy/pull/16320): ENH: improved accuracy and orthonormality of output eigenvectors...
  - [\#16327](https://github.com/scipy/scipy/pull/16327): DOC: BLD: remove \`-scipyopt\` from html Make command and build...
  - [\#16328](https://github.com/scipy/scipy/pull/16328): MAINT: retry openblas download in CI
  - [\#16332](https://github.com/scipy/scipy/pull/16332): BLD: ensure we get understandable messages when git submodules...
  - [\#16335](https://github.com/scipy/scipy/pull/16335): BLD: update NumPy to \>=1.19.5
  - [\#16336](https://github.com/scipy/scipy/pull/16336): MAINT: forward port git scoping
  - [\#16340](https://github.com/scipy/scipy/pull/16340): DEP: remove tol & max\_intervals from NumericalInverseHermite
  - [\#16346](https://github.com/scipy/scipy/pull/16346): DEV: add meson-python to environment.yml
  - [\#16351](https://github.com/scipy/scipy/pull/16351): Added "import numpy as np" statement to filter examples
  - [\#16354](https://github.com/scipy/scipy/pull/16354): DOC: optimize: remove callback doc from the options in \`\_minimize\_lbfgsb\`...
  - [\#16355](https://github.com/scipy/scipy/pull/16355): DEP: add deprecation warnings to kwargs turbo / eigvals of linalg.eigh
  - [\#16356](https://github.com/scipy/scipy/pull/16356): DOC: add examples to \`signal.medfilt2d\`
  - [\#16357](https://github.com/scipy/scipy/pull/16357): BENCH: Add SHGO and DIRECT to optimization benchmark
  - [\#16362](https://github.com/scipy/scipy/pull/16362): ENH: Provide more information when a value is out of bounds in...
  - [\#16367](https://github.com/scipy/scipy/pull/16367): BUG: unclear error for invalid bracketing
  - [\#16371](https://github.com/scipy/scipy/pull/16371): MAINT: remove last (already safe) usage of \`mktemp\`
  - [\#16372](https://github.com/scipy/scipy/pull/16372): MAINT: rename \`do.py\` to \`dev.py\`
  - [\#16373](https://github.com/scipy/scipy/pull/16373): DOC: added rvalue description in \`stats.probplot\`
  - [\#16377](https://github.com/scipy/scipy/pull/16377): ENH: stats.bootstrap: update warning to mention np.min
  - [\#16383](https://github.com/scipy/scipy/pull/16383): BUG: fix error message of RegularGridInterpolator
  - [\#16387](https://github.com/scipy/scipy/pull/16387): ENH: stats.combine\_pvalues: convert output tuple to Bunch
  - [\#16388](https://github.com/scipy/scipy/pull/16388): DEP: deprecate \`stats.kendalltau\` kwarg \`initial\_lexsort\`
  - [\#16389](https://github.com/scipy/scipy/pull/16389): DEP: sharpen stats deprecations
  - [\#16392](https://github.com/scipy/scipy/pull/16392): DEP: add warning to \`sparse.gmres\` deprecated kwarg \`restrt\`
  - [\#16397](https://github.com/scipy/scipy/pull/16397): MAINT: fix two refcounting issues in \`ndimage\`
  - [\#16398](https://github.com/scipy/scipy/pull/16398): MAINT: Replace find\_common\_types
  - [\#16406](https://github.com/scipy/scipy/pull/16406): MAINT: stats.rankdata: change default to nan\_policy='propagate'
  - [\#16407](https://github.com/scipy/scipy/pull/16407): ENH: stats.fisher\_exact: convert output tuple to Bunch
  - [\#16411](https://github.com/scipy/scipy/pull/16411): MAINT: optimize.brute should coerce non-tuple args to tuple
  - [\#16415](https://github.com/scipy/scipy/pull/16415): DOC: stats: fix seed -\> random\_state in \`rvs\` docstring
  - [\#16423](https://github.com/scipy/scipy/pull/16423): MAINT: stats: not using nested TypeErrors in \_contains\_nan
  - [\#16424](https://github.com/scipy/scipy/pull/16424): MAINT: future-proof \`stats.kde\` for changes in numpy casting...
  - [\#16425](https://github.com/scipy/scipy/pull/16425): DOC: Procedure adjustment in file doc/source/dev/core-dev/releasing.rst.inc
  - [\#16428](https://github.com/scipy/scipy/pull/16428): MAINT: fix up \`\_sputils.get\_index\_dtype\` for NEP 50 casting...
  - [\#16431](https://github.com/scipy/scipy/pull/16431): CI: fix Gitpod build after dev.py update to the new CLI
  - [\#16432](https://github.com/scipy/scipy/pull/16432): Docstring fixes in lobpcg.py
  - [\#16434](https://github.com/scipy/scipy/pull/16434): DOC: stats.mstats.sen\_seasonal\_slopes: add docstring
  - [\#16435](https://github.com/scipy/scipy/pull/16435): ENH: directional mean
  - [\#16438](https://github.com/scipy/scipy/pull/16438): MAINT: remove unused \`DeprecatedImport\`
  - [\#16439](https://github.com/scipy/scipy/pull/16439): ENH: stats.chi2\_contingency: convert output tuple to Bunch
  - [\#16440](https://github.com/scipy/scipy/pull/16440): ENH: stats.median\_test: convert output tuple to Bunch
  - [\#16441](https://github.com/scipy/scipy/pull/16441): ENH: stats.mood: convert output tuple to Bunch
  - [\#16442](https://github.com/scipy/scipy/pull/16442): MAINT: fix issues with Python scalar related casting behavior...
  - [\#16447](https://github.com/scipy/scipy/pull/16447): BLD: make it easier to build with AddressSanitizer
  - [\#16449](https://github.com/scipy/scipy/pull/16449): ENH: improve scipy.interpolate.RegularGridInterpolator performance
  - [\#16450](https://github.com/scipy/scipy/pull/16450): BUG: Fix CLI Help in light themes
  - [\#16454](https://github.com/scipy/scipy/pull/16454): ENH: stats.bootstrap: return bootstrap distribution
  - [\#16455](https://github.com/scipy/scipy/pull/16455): ENH: stats.bootstrap: add BCa method for multi-sample statistic
  - [\#16462](https://github.com/scipy/scipy/pull/16462): CI: Update Python 3.8-dbg job to ubuntu-20.04
  - [\#16463](https://github.com/scipy/scipy/pull/16463): ENH: stats.jarque\_bera: add axis, nan\_policy, masked array support
  - [\#16470](https://github.com/scipy/scipy/pull/16470): DOC: stats.spearmanr: add information about p-value calculation
  - [\#16471](https://github.com/scipy/scipy/pull/16471): MAINT: interpolate/RGI: only call \`find\_indices\` when needed
  - [\#16474](https://github.com/scipy/scipy/pull/16474): DOC: Add more information to entropy docstring
  - [\#16475](https://github.com/scipy/scipy/pull/16475): BLD: build the f2py shared source file once and link to each...
  - [\#16481](https://github.com/scipy/scipy/pull/16481): BUG: Change (n+1) to n for correct jackknife calculation of hd...
  - [\#16486](https://github.com/scipy/scipy/pull/16486): DOC: special.entr: add context
  - [\#16487](https://github.com/scipy/scipy/pull/16487): MAINT: Improve test speed, add timeouts
  - [\#16496](https://github.com/scipy/scipy/pull/16496): add notes for x and y array sorted in decreasing order
  - [\#16497](https://github.com/scipy/scipy/pull/16497): DOC: special: Add 'Examples' section to spence docstring.
  - [\#16498](https://github.com/scipy/scipy/pull/16498): ENH: Speed up hdquantile\_sd via cumulative sums
  - [\#16501](https://github.com/scipy/scipy/pull/16501): DOC: Fix typo in spatial.Delaunay
  - [\#16502](https://github.com/scipy/scipy/pull/16502): DOC: Minor Rst syntax update.
  - [\#16503](https://github.com/scipy/scipy/pull/16503): ENH: stats: Implement \_munp() for the skewnorm distribution.
  - [\#16505](https://github.com/scipy/scipy/pull/16505): DOC: correct errs on examples for scipy.signal.upfirdn
  - [\#16508](https://github.com/scipy/scipy/pull/16508): BUG/ENH: handle spline interpolation methods in \`interpn\` and...
  - [\#16511](https://github.com/scipy/scipy/pull/16511): add reference to regulargridinterpolator
  - [\#16513](https://github.com/scipy/scipy/pull/16513): MAINT: skip complex128 propack tests on windows (& module clean-up)
  - [\#16516](https://github.com/scipy/scipy/pull/16516): DOC: add a hint on what to use in case of matlab v7.3
  - [\#16518](https://github.com/scipy/scipy/pull/16518): CI: pip and conda caching in all workflows
  - [\#16524](https://github.com/scipy/scipy/pull/16524): TST: stats.permutation\_test: strengthen test against \`ks\_2samp\`
  - [\#16529](https://github.com/scipy/scipy/pull/16529): CI: clean up scikit-umfpack and scikit-sparse usage in CI
  - [\#16532](https://github.com/scipy/scipy/pull/16532): Deprecated imports in docstring examples in \`io.harwell\_boeing\`...
  - [\#16533](https://github.com/scipy/scipy/pull/16533): ENH: signal: add Lanczos window function
  - [\#16534](https://github.com/scipy/scipy/pull/16534): CI: fix scikit-umfpack and scikit-sparse install in Azure job
  - [\#16535](https://github.com/scipy/scipy/pull/16535): MAINT: signal: Fix matplotlib deprecation warning in the chirp...
  - [\#16543](https://github.com/scipy/scipy/pull/16543): DOC: update cwt doc examples
  - [\#16544](https://github.com/scipy/scipy/pull/16544): DOC: add better example for \`MultinomialQMC\`.
  - [\#16546](https://github.com/scipy/scipy/pull/16546): DOC: Add alt-text to tutorial images
  - [\#16547](https://github.com/scipy/scipy/pull/16547): ENH: correct bounds warnings in \`minimize\`
  - [\#16550](https://github.com/scipy/scipy/pull/16550): TST: fix flaky sparse.linalg.exmp test
  - [\#16552](https://github.com/scipy/scipy/pull/16552): CI: test distro Python install on Ubuntu Jammy (22.04 LTS)
  - [\#16554](https://github.com/scipy/scipy/pull/16554): TST: add timeout to \`test\_kappa4\_array\_gh13582\`
  - [\#16557](https://github.com/scipy/scipy/pull/16557): BUG: fix \`interpolate.RegularGridInterpolator\` \`out\_of\_bounds\`...
  - [\#16559](https://github.com/scipy/scipy/pull/16559): ENH: adding a logpdf function to von-mises distribution
  - [\#16560](https://github.com/scipy/scipy/pull/16560): vectorize ortho\_group.rvs
  - [\#16561](https://github.com/scipy/scipy/pull/16561): DOC: optimize: Fix warning in differential\_evolution docstring
  - [\#16565](https://github.com/scipy/scipy/pull/16565): \[DOC\] improper type syntax in basinhopping docstring.
  - [\#16566](https://github.com/scipy/scipy/pull/16566): fix window function doc string for Window length
  - [\#16567](https://github.com/scipy/scipy/pull/16567): DOC: Add note about inaccuracies in matrix functions
  - [\#16571](https://github.com/scipy/scipy/pull/16571): DOC: sparse.linalg: add references for UMFPACK.
  - [\#16574](https://github.com/scipy/scipy/pull/16574): ENH: vectorize along samples \`stats.ortho\_group.rvs\` and \`stats.unitary\_group.rvs\`
  - [\#16576](https://github.com/scipy/scipy/pull/16576): testing documentation broken link fix
  - [\#16587](https://github.com/scipy/scipy/pull/16587): DOC: add import NumPy in QMC examples.
  - [\#16589](https://github.com/scipy/scipy/pull/16589): DOC: update toolchain.rst after EOL of manylinux\_2\_24; allow...
  - [\#16591](https://github.com/scipy/scipy/pull/16591): ENH: stats.nct: replace with boost implementation
  - [\#16592](https://github.com/scipy/scipy/pull/16592): DOC: interpolate: document the .roots() workaround
  - [\#16594](https://github.com/scipy/scipy/pull/16594): MAINT: Better pytest-timeout support
  - [\#16596](https://github.com/scipy/scipy/pull/16596): MAINT: stats.rv\_continuous: consistently return NumPy scalars
  - [\#16607](https://github.com/scipy/scipy/pull/16607): MAINT: remove unnecessary \`\_\_future\_\_\` imports
  - [\#16608](https://github.com/scipy/scipy/pull/16608): TST: stats.rv\_continuous: more direct test for numpy scalar output
  - [\#16612](https://github.com/scipy/scipy/pull/16612): ENH: vectorize along samples \`stats.special\_ortho\_group.rvs\`
  - [\#16614](https://github.com/scipy/scipy/pull/16614): DOC: add import NumPy in linalg decomposition function examples
  - [\#16615](https://github.com/scipy/scipy/pull/16615): DOC: Adding import numpy to several files
  - [\#16616](https://github.com/scipy/scipy/pull/16616): DOC: Adding import numpy to examples in some stats files
  - [\#16617](https://github.com/scipy/scipy/pull/16617): DOC: Update instructions for debugging using dev.py
  - [\#16618](https://github.com/scipy/scipy/pull/16618): DOC: add import NumPy in bsplines examples
  - [\#16619](https://github.com/scipy/scipy/pull/16619): DOC: add import numpy in some stats examples
  - [\#16620](https://github.com/scipy/scipy/pull/16620): DOC: Add numpy import to examples
  - [\#16621](https://github.com/scipy/scipy/pull/16621): FIX: upstream fix for binomial distribution divide-by-zero
  - [\#16624](https://github.com/scipy/scipy/pull/16624): DOC: add NumPy imports in \`\_mstats\_basic.py\` examples
  - [\#16625](https://github.com/scipy/scipy/pull/16625): DOC: add \`import numpy as np\` to examples
  - [\#16626](https://github.com/scipy/scipy/pull/16626): BUG: cluster: fix \`leaves\_color\_list\` issue
  - [\#16627](https://github.com/scipy/scipy/pull/16627): TST: spatial.directed\_hausdorff: Parametrized test\_random\_state\_None\_int
  - [\#16629](https://github.com/scipy/scipy/pull/16629): DOC: Modifiy the scipy.stats.mode example to be nontrivial.
  - [\#16631](https://github.com/scipy/scipy/pull/16631): MAINT: stats.gaussian\_kde: raise informative message with degenerate...
  - [\#16632](https://github.com/scipy/scipy/pull/16632): MAINT: signal:corrected peak\_finding example
  - [\#16633](https://github.com/scipy/scipy/pull/16633): DOC: update benchmarking docs to use dev.py user interface
  - [\#16634](https://github.com/scipy/scipy/pull/16634): DOC: Add example to fft.fht
  - [\#16635](https://github.com/scipy/scipy/pull/16635): DOC: fix default\_rng namespace and linestyle of an example
  - [\#16639](https://github.com/scipy/scipy/pull/16639): DOC: better links in readme for newcomers
  - [\#16640](https://github.com/scipy/scipy/pull/16640): MAINT: optimize: always return a float from goal functional wrapper
  - [\#16641](https://github.com/scipy/scipy/pull/16641): DOC: optimize: fix doc that \`curve\_fit\` xdata should be float...
  - [\#16644](https://github.com/scipy/scipy/pull/16644): DOC: io: Add Examples section for mminfo, mmread and mmwrite.
  - [\#16646](https://github.com/scipy/scipy/pull/16646): MAINT: have get\_index\_dtype follow its documentation and return...
  - [\#16647](https://github.com/scipy/scipy/pull/16647): MAINT: Fix expit function name typo in test\_optimize.py
  - [\#16650](https://github.com/scipy/scipy/pull/16650): DOC: io: Add 'Examples' to the 'whosmat' docstring.
  - [\#16651](https://github.com/scipy/scipy/pull/16651): ENH: stats.resampling: automatically detect whether statistic...
  - [\#16652](https://github.com/scipy/scipy/pull/16652): MAINT: Remove unused imports.
  - [\#16653](https://github.com/scipy/scipy/pull/16653): DEV: generalized cross-validation smoothing spline
  - [\#16654](https://github.com/scipy/scipy/pull/16654): ENH: stats: add aliases to results objects
  - [\#16658](https://github.com/scipy/scipy/pull/16658): BUG: signal: Compare window\_length to correct axis in savgol\_filter
  - [\#16659](https://github.com/scipy/scipy/pull/16659): DOC: replace \`sphinx\_panels\` and \`sphinx\_tabs\` with \`sphinx\_design\`
  - [\#16666](https://github.com/scipy/scipy/pull/16666): MAINT: remove unused \`\_\_main\_\_\` code from \`optimize\` submodule
  - [\#16667](https://github.com/scipy/scipy/pull/16667): DOC: spatial: Correct barycentric description in Delaunay
  - [\#16668](https://github.com/scipy/scipy/pull/16668): DOC: signal: Update values in zpk2sos docstring examples.
  - [\#16670](https://github.com/scipy/scipy/pull/16670): MAINT: fix a compiler warning in \`signal/\_firfilter.c\`
  - [\#16672](https://github.com/scipy/scipy/pull/16672): BLD: update minimum \`meson\` and \`meson-python\` versions
  - [\#16675](https://github.com/scipy/scipy/pull/16675): TST: sparse.linalg: increase \`lobpcg\` solve tolerance in test
  - [\#16676](https://github.com/scipy/scipy/pull/16676): MAINT: stats.mstats.mode: refactor to keep \`kwargs\` out of...
  - [\#16677](https://github.com/scipy/scipy/pull/16677): TST: speed up mindist test
  - [\#16678](https://github.com/scipy/scipy/pull/16678): DOC: remove custom colours in css
  - [\#16680](https://github.com/scipy/scipy/pull/16680): MAINT: stats.gmean: corrections with \`axis=None\` when masked-array...
  - [\#16683](https://github.com/scipy/scipy/pull/16683): DEV: add \`--durations\` argument to dev.py interface
  - [\#16685](https://github.com/scipy/scipy/pull/16685): BLD: implement compiler version checks for GCC and MSVC
  - [\#16687](https://github.com/scipy/scipy/pull/16687): DOC: signal: Update the examples in the remez docstring.
  - [\#16689](https://github.com/scipy/scipy/pull/16689): MAINT: sparse.linalg: remove LGMRES demo
  - [\#16690](https://github.com/scipy/scipy/pull/16690): random uniform -\> normal to initiate lobpcg and arpack in svds
  - [\#16691](https://github.com/scipy/scipy/pull/16691): ENH: stats: Implement isf for the levy distribution.
  - [\#16692](https://github.com/scipy/scipy/pull/16692): ENH: stats.gaussian\_kde: replace use of inv\_cov in pdf
  - [\#16696](https://github.com/scipy/scipy/pull/16696): ENH: Speed up sparse.csgraph.dijkstra
  - [\#16699](https://github.com/scipy/scipy/pull/16699): DOC: stats: resampling and Monte Carlo methods tutorial
  - [\#16703](https://github.com/scipy/scipy/pull/16703): BLD: upgrade meson(-python) min versions and remove explicit...
  - [\#16704](https://github.com/scipy/scipy/pull/16704): DOC: improve some MSVC links in toolchain.rst
  - [\#16705](https://github.com/scipy/scipy/pull/16705): MAINT: add \`\_\_bool\_\_\` method to spatial.transform.Rotation
  - [\#16706](https://github.com/scipy/scipy/pull/16706): CI: add Meson version number in environment.yml to rebuild Docker...
  - [\#16707](https://github.com/scipy/scipy/pull/16707): DOC: expand the \`scipy.interpolate\` tutorial
  - [\#16712](https://github.com/scipy/scipy/pull/16712): BUG: Update \_svds.py: orthogonalize eigenvectors from arpack...
  - [\#16714](https://github.com/scipy/scipy/pull/16714): ENH: stats.bootstrap: extend previous bootstrap result
  - [\#16715](https://github.com/scipy/scipy/pull/16715): DOC: interpolate: add an example of splPrep/PPoly.from\_spline...
  - [\#16717](https://github.com/scipy/scipy/pull/16717): DOC: reformat seed docstrings
  - [\#16722](https://github.com/scipy/scipy/pull/16722): MAINT: additional test truthiness and length the empty Rotation
  - [\#16730](https://github.com/scipy/scipy/pull/16730): MAINT: interpolate: use \_fitpack\_impl in fitpack2
  - [\#16731](https://github.com/scipy/scipy/pull/16731): ENH: interpolate.KroghInterpolator: raise warning about numerical...
  - [\#16732](https://github.com/scipy/scipy/pull/16732): DOC: Replace runtests.py with dev.py where appropriate
  - [\#16733](https://github.com/scipy/scipy/pull/16733): DOC: Add link to development workflow
  - [\#16735](https://github.com/scipy/scipy/pull/16735): DOC: forward port 1.9.0 relnotes
  - [\#16738](https://github.com/scipy/scipy/pull/16738): REL: DOC: update version switcher
  - [\#16739](https://github.com/scipy/scipy/pull/16739): CI: move the py311-dev job over to Meson
  - [\#16740](https://github.com/scipy/scipy/pull/16740): DOC: Fix Sphinx markup.
  - [\#16742](https://github.com/scipy/scipy/pull/16742): CI: move test\_numpy\_main to linux\_meson
  - [\#16743](https://github.com/scipy/scipy/pull/16743): DEP: interpolate: revert docstring only deprecation of fitpack...
  - [\#16747](https://github.com/scipy/scipy/pull/16747): DOC: sparse.linalg: Fix output in an example in the lobpcg docstring.
  - [\#16753](https://github.com/scipy/scipy/pull/16753): DOC: Integrate: Add improper integral examples for \`dblquad\`...
  - [\#16754](https://github.com/scipy/scipy/pull/16754): DOC: optimize: Fix mistake in a linprog example.
  - [\#16755](https://github.com/scipy/scipy/pull/16755): TST: sparse.linalg: Loosen tolerance for the lobpcg test 'test\_tolerance\_float32'
  - [\#16756](https://github.com/scipy/scipy/pull/16756): TST: test fixes for pypy
  - [\#16758](https://github.com/scipy/scipy/pull/16758): ENH: Release the GIL while computing KDE kernel estimate
  - [\#16761](https://github.com/scipy/scipy/pull/16761): DOC: add logo to readme.
  - [\#16762](https://github.com/scipy/scipy/pull/16762): MAINT: stats: mark slow tests
  - [\#16766](https://github.com/scipy/scipy/pull/16766): DOC: toolchain: fix numpy dependency for 1.7.2/3
  - [\#16770](https://github.com/scipy/scipy/pull/16770): ENH: stats: use Boost implementation of skewnorm cdf/ppf
  - [\#16772](https://github.com/scipy/scipy/pull/16772): DOC: add one :math: to docstring for consistency
  - [\#16776](https://github.com/scipy/scipy/pull/16776): BUG: Set nperseg size to the size of an already-initialized window...
  - [\#16778](https://github.com/scipy/scipy/pull/16778): MAINT: fix a couple of Mypy errors that appeared recently
  - [\#16779](https://github.com/scipy/scipy/pull/16779): TST: Interpolate: Move incorrectly located NDInterpolator tests
  - [\#16788](https://github.com/scipy/scipy/pull/16788): DOC, TST: clarify Voronoi Qz
  - [\#16790](https://github.com/scipy/scipy/pull/16790): ENH: stats.invgauss: use Boost implementation of ppf/isf
  - [\#16791](https://github.com/scipy/scipy/pull/16791): MAINT: stats.skewnorm: fix fit when data skewness is greater...
  - [\#16793](https://github.com/scipy/scipy/pull/16793): DOC: optimize: add tutorial for milp
  - [\#16795](https://github.com/scipy/scipy/pull/16795): DOC: Embed method signatures of \`spatial.transform.Rotation\`
  - [\#16797](https://github.com/scipy/scipy/pull/16797): ENH add extrapolate to BSpline.design\_matrix
  - [\#16799](https://github.com/scipy/scipy/pull/16799): DOC: optimize.root\_scalar: improve parametrization of methods
  - [\#16800](https://github.com/scipy/scipy/pull/16800): MAINT: remove \`\_lib/\_c99compat.h\` and use C99 rather than \`npy\_math.h\`...
  - [\#16801](https://github.com/scipy/scipy/pull/16801): ENH: added the spectral 2-norm to \_norm.py
  - [\#16804](https://github.com/scipy/scipy/pull/16804): ENH: stats.weibull\_min: override fit
  - [\#16806](https://github.com/scipy/scipy/pull/16806): DEV: update pydevtool version to propagate exit codes
  - [\#16809](https://github.com/scipy/scipy/pull/16809): Doc: Added missing "import numpy as np" to docstring examples...
  - [\#16811](https://github.com/scipy/scipy/pull/16811): DOC: fix broken links
  - [\#16816](https://github.com/scipy/scipy/pull/16816): MAINT: special: remove one \`libnpymath\` dependency; more \`[NPY]()\`...
  - [\#16817](https://github.com/scipy/scipy/pull/16817): MAINT: remove \`NPY\_INLINE\`, use \`inline\` instead
  - [\#16818](https://github.com/scipy/scipy/pull/16818): MAINT: update PROPACK git submodule to get rid of prints in test...
  - [\#16826](https://github.com/scipy/scipy/pull/16826): MAINT: fix some build warnings from \`special/ellip\_harm.pxd\`
  - [\#16828](https://github.com/scipy/scipy/pull/16828): DOC: add NumPy import in scipy.io examples
  - [\#16829](https://github.com/scipy/scipy/pull/16829): Interpn nonscalar followup
  - [\#16830](https://github.com/scipy/scipy/pull/16830): DOC: Add plot to circmean docstring
  - [\#16831](https://github.com/scipy/scipy/pull/16831): DOC: special: Several docstring updates.
  - [\#16832](https://github.com/scipy/scipy/pull/16832): DOC: add NumPy import in scipy.optimize examples
  - [\#16834](https://github.com/scipy/scipy/pull/16834): DOC: Improve circular stats doc
  - [\#16835](https://github.com/scipy/scipy/pull/16835): ENH: stats.ttest\_1samp: add confidence\_interval and df
  - [\#16837](https://github.com/scipy/scipy/pull/16837): DOC: interpolate: small example code improvement for \`BSpline.basis\_element\`
  - [\#16840](https://github.com/scipy/scipy/pull/16840): ENH: BSplines.design\_matrix performance improvement
  - [\#16843](https://github.com/scipy/scipy/pull/16843): ENH: Handle np array methods in stats.binned\_statistic\_dd
  - [\#16847](https://github.com/scipy/scipy/pull/16847): DOC: interpolate.{RegularGridInterpolator, interpn} add note...
  - [\#16848](https://github.com/scipy/scipy/pull/16848): ENH: stats.anderson: add fit parameters to result
  - [\#16853](https://github.com/scipy/scipy/pull/16853): DOC: interpolate: improve \`interpolate.make\_interp.spline\`...
  - [\#16854](https://github.com/scipy/scipy/pull/16854): MAINT: Delay \`pooch\` import error for \`scipy.datasets\`
  - [\#16855](https://github.com/scipy/scipy/pull/16855): Roadmap update: scipy.interpolate and Fortran libs
  - [\#16856](https://github.com/scipy/scipy/pull/16856): DOC: interpolate: add default spline degree value for \`InterpolatedUnivariateSpline\`
  - [\#16857](https://github.com/scipy/scipy/pull/16857): ENH : remove an expected warning in BarycentricInterpolator
  - [\#16858](https://github.com/scipy/scipy/pull/16858): ENH: Modify scipy.optimize.least\_squares to accept bounds of...
  - [\#16860](https://github.com/scipy/scipy/pull/16860): DOC: interpolate: improve spline smoothing parameter docs.
  - [\#16863](https://github.com/scipy/scipy/pull/16863): DOC: Adding docs contribution guidelines
  - [\#16864](https://github.com/scipy/scipy/pull/16864): DOC: stats: Some updates:
  - [\#16865](https://github.com/scipy/scipy/pull/16865): DOC: interpolate: improve \`make\_lsq\_spline\` docs
  - [\#16866](https://github.com/scipy/scipy/pull/16866): DEP, DOC: Show deprecated methods in docs and fix overwriting...
  - [\#16867](https://github.com/scipy/scipy/pull/16867): DOC: fix an accuracy issue in the docstring of \`Rotation.align\_vectors\`
  - [\#16869](https://github.com/scipy/scipy/pull/16869): DOC: Added missing 'import numpy as np' to docstring examples...
  - [\#16873](https://github.com/scipy/scipy/pull/16873): MAINT: stats.multinomial: don't alter p\[-1\] when p\[:-1\].sum()...
  - [\#16874](https://github.com/scipy/scipy/pull/16874): DOC: signal: Add 'Examples' to the 'normalize' docstring.
  - [\#16884](https://github.com/scipy/scipy/pull/16884): DOC: improve installing from source instructions
  - [\#16885](https://github.com/scipy/scipy/pull/16885): TST: Interpolate: Parameterise RegularGridInterpolator tests
  - [\#16886](https://github.com/scipy/scipy/pull/16886): CI: wheels only on scipy \[skip azp\]\[skip github\]
  - [\#16887](https://github.com/scipy/scipy/pull/16887): DOC: optimize.linprog: adjust tutorial to address gh16531
  - [\#16888](https://github.com/scipy/scipy/pull/16888): DOC: outline how cibuildwheel is triggered and runs in CI
  - [\#16889](https://github.com/scipy/scipy/pull/16889): MAINT: interpolate: Remove a couple unused imports.
  - [\#16890](https://github.com/scipy/scipy/pull/16890): ENH: optimize.OptimizeResult: improve pretty-printing
  - [\#16891](https://github.com/scipy/scipy/pull/16891): TST: Interpolate: rename test so that is executed
  - [\#16893](https://github.com/scipy/scipy/pull/16893): DOC: add diagram explaining how Docker images get built and used...
  - [\#16896](https://github.com/scipy/scipy/pull/16896): DOC: Fix broken link in the "Additional Git Resources" page.
  - [\#16897](https://github.com/scipy/scipy/pull/16897): Pass down mip\_rel\_gap to the HiGHS optimizer
  - [\#16899](https://github.com/scipy/scipy/pull/16899): DOC: add legend to rv\_histogram plot
  - [\#16902](https://github.com/scipy/scipy/pull/16902): ENH: stats.ttest\_rel: add confidence\_interval to result
  - [\#16903](https://github.com/scipy/scipy/pull/16903): DOC: interpolate: add actual smoothing condition for \`UnivariateSpline\`
  - [\#16906](https://github.com/scipy/scipy/pull/16906): DOC: fixes for refguide check issues
  - [\#16907](https://github.com/scipy/scipy/pull/16907): BUG: stats: expect method of the vonmises distribution
  - [\#16910](https://github.com/scipy/scipy/pull/16910): MAINT: forward port 1.9.1 relnotes
  - [\#16913](https://github.com/scipy/scipy/pull/16913): ENH:interpolate: allow interp1d to take single value
  - [\#16916](https://github.com/scipy/scipy/pull/16916): DOC: add note about using interpn for data on a regular grid
  - [\#16923](https://github.com/scipy/scipy/pull/16923): MAINT: integrate.qmc\_quad: add QMC quadrature
  - [\#16924](https://github.com/scipy/scipy/pull/16924): Fix compilation with -Wincompatible-function-pointer-types
  - [\#16931](https://github.com/scipy/scipy/pull/16931): DOC: add details on Meson build debugging and introspection
  - [\#16933](https://github.com/scipy/scipy/pull/16933): MAINT : interpolate: added test for DivideByZero warning silencing...
  - [\#16937](https://github.com/scipy/scipy/pull/16937): MAINT: refer to python3 in refguide\_check
  - [\#16939](https://github.com/scipy/scipy/pull/16939): MAINT: stats: move \`\_contains\_nan\` function to \`\_lib.\_util.py\`
  - [\#16940](https://github.com/scipy/scipy/pull/16940): DOC: Documentation note update for truncnorm
  - [\#16941](https://github.com/scipy/scipy/pull/16941): MAINT: support logpdf in NumericalInverseHermite (stats.sampling)
  - [\#16948](https://github.com/scipy/scipy/pull/16948): DOC: sparse.linalg.svds: fix intermittent refguide check failure
  - [\#16950](https://github.com/scipy/scipy/pull/16950): DOC: Add examples for common Bessel functions
  - [\#16951](https://github.com/scipy/scipy/pull/16951): ENH: stats.fit: add plot\_types to FitResult.plot
  - [\#16953](https://github.com/scipy/scipy/pull/16953): DEV: update dev.py to only install changed files
  - [\#16955](https://github.com/scipy/scipy/pull/16955): BLD: fix up or suppress Fortran build warnings
  - [\#16956](https://github.com/scipy/scipy/pull/16956): BLD: fix meson version checks for MSVC
  - [\#16958](https://github.com/scipy/scipy/pull/16958): ENH: stats.crosstab: convert output tuple to bunch
  - [\#16959](https://github.com/scipy/scipy/pull/16959): DOC: Add example for morlet in scipy.signal
  - [\#16960](https://github.com/scipy/scipy/pull/16960): DOC: Fix indentation in benchmarking.rst
  - [\#16963](https://github.com/scipy/scipy/pull/16963): DOC: Update 2 links to point to stable.
  - [\#16967](https://github.com/scipy/scipy/pull/16967): ENH: stats.goodness\_of\_fit: a general goodness of fit test
  - [\#16968](https://github.com/scipy/scipy/pull/16968): ENH: Close parenthesis in numpy version warning
  - [\#16976](https://github.com/scipy/scipy/pull/16976): DOC: stats.qmc: fix description of seed parameter
  - [\#16980](https://github.com/scipy/scipy/pull/16980): DOC: fix duplicate word typos.
  - [\#16986](https://github.com/scipy/scipy/pull/16986): DOC: Fix link to rendered docs in documentation guide
  - [\#16987](https://github.com/scipy/scipy/pull/16987): ENH: stats.gaussian\_kde: replace use of inv\_cov in logpdf
  - [\#16989](https://github.com/scipy/scipy/pull/16989): DOC: edited t\_span parameter description in integrate.solve\_ivp
  - [\#16990](https://github.com/scipy/scipy/pull/16990): CI: enable uploads for (weekly) nightlies and update how action...
  - [\#16992](https://github.com/scipy/scipy/pull/16992): CI: upgrade CI image to run on Ubuntu 22.04 instead of 20.04
  - [\#16995](https://github.com/scipy/scipy/pull/16995): DOC: stats: fix incorrectly documented statistic attribute for...
  - [\#17003](https://github.com/scipy/scipy/pull/17003): DOC: Add examples for a few Bessel functions
  - [\#17005](https://github.com/scipy/scipy/pull/17005): CI: pin OpenBLAS to specific build in macOS job to avoid gges...
  - [\#17006](https://github.com/scipy/scipy/pull/17006): ENH: stats.spearmanr: add statistic attribute to result object...
  - [\#17007](https://github.com/scipy/scipy/pull/17007): ENH: stats.kendalltau: add statistic attribute to result object...
  - [\#17008](https://github.com/scipy/scipy/pull/17008): ENH: stats.weightedtau: add statistic attribute to result object
  - [\#17009](https://github.com/scipy/scipy/pull/17009): Revert "CI: pin OpenBLAS to specific build in macOS job to avoid...
  - [\#17014](https://github.com/scipy/scipy/pull/17014): MAINT: remove unused variables and imports
  - [\#17016](https://github.com/scipy/scipy/pull/17016): ENH: stats.pearsonr, stats.pointbiserialr: add statistic/correlation...
  - [\#17017](https://github.com/scipy/scipy/pull/17017): ENH: stats.somersd: add correlation attribute to result object
  - [\#17021](https://github.com/scipy/scipy/pull/17021): FIX: \`dev.py build\` parallelism behaviour and fixed typos
  - [\#17022](https://github.com/scipy/scipy/pull/17022): Explain where LIL comes from
  - [\#17027](https://github.com/scipy/scipy/pull/17027): Fix explanation of LIst of List sparse matrix
  - [\#17029](https://github.com/scipy/scipy/pull/17029): CI: cirrus for building aarch64
  - [\#17030](https://github.com/scipy/scipy/pull/17030): ENH: stats.permutation\_test: improve performance of samples/pairings...
  - [\#17032](https://github.com/scipy/scipy/pull/17032): TST: stats.fit: fix random state
  - [\#17034](https://github.com/scipy/scipy/pull/17034): TST: stats.jarque\_bera: fix test failure due to NumPy update
  - [\#17036](https://github.com/scipy/scipy/pull/17036): DEV: Update GPG key in Docker \[Gitpod\]
  - [\#17038](https://github.com/scipy/scipy/pull/17038): deduplicate \`splint\` in FITPACK wrappers; take 3
  - [\#17039](https://github.com/scipy/scipy/pull/17039): ENH: add a \`stats.expectile\` function
  - [\#17041](https://github.com/scipy/scipy/pull/17041): DOC: Add examples for integrals of Bessel functions
  - [\#17048](https://github.com/scipy/scipy/pull/17048): DOC:signal: Fix typo in TransferFunction
  - [\#17049](https://github.com/scipy/scipy/pull/17049): TST: stats.jarque\_bera: fix test failure due to NumPy update
  - [\#17051](https://github.com/scipy/scipy/pull/17051): ENH: support complex functions in integrate.quad
  - [\#17052](https://github.com/scipy/scipy/pull/17052): BLD: implement symbol hiding for Meson through a linker version...
  - [\#17057](https://github.com/scipy/scipy/pull/17057): Fix or avoid various test failures that are showing up in CI
  - [\#17062](https://github.com/scipy/scipy/pull/17062): Add location and sign to KS test result
  - [\#17063](https://github.com/scipy/scipy/pull/17063): CI: fix uploading of nightly wheels
  - [\#17068](https://github.com/scipy/scipy/pull/17068): MAINT: Removed unused imports.
  - [\#17071](https://github.com/scipy/scipy/pull/17071): DOC: update maxfun in scipy.optimize.minimize(method=’L-BFGS-B’)...
  - [\#17073](https://github.com/scipy/scipy/pull/17073): DOC: examples for derivatives of Bessel functions
  - [\#17076](https://github.com/scipy/scipy/pull/17076): DOC: spatial: Copy-edit the voronoi\_plot\_2d example.
  - [\#17079](https://github.com/scipy/scipy/pull/17079): BUG: fix \`signal.sosfilt\` issue with complex dtypes and Intel...
  - [\#17081](https://github.com/scipy/scipy/pull/17081): DOC: Fix formatting in svds docstrings
  - [\#17083](https://github.com/scipy/scipy/pull/17083): DOC: Fix broken link for environment variables NumPy doc
  - [\#17085](https://github.com/scipy/scipy/pull/17085): DOC: optimize: add link to SciPy cookbooks milp tutorials
  - [\#17091](https://github.com/scipy/scipy/pull/17091): MAINT: interpolate remove duplication of FITPACK interface \`sproot\`.
  - [\#17093](https://github.com/scipy/scipy/pull/17093): ENH: Improves behavior of scipy.optimize.linprog (\#17074)
  - [\#17094](https://github.com/scipy/scipy/pull/17094): DOC: examples for roots of Bessel functions
  - [\#17099](https://github.com/scipy/scipy/pull/17099): BLD: turn off fast-math for Intel compilers
  - [\#17103](https://github.com/scipy/scipy/pull/17103): ENH: stats.Covariance: add CovViaDiagonal
  - [\#17106](https://github.com/scipy/scipy/pull/17106): CI: fix testing of \`SCIPY\_USE\_PYTHRAN=0\`, and upgrade to pythran...
  - [\#17108](https://github.com/scipy/scipy/pull/17108): DOC: Reformulate ufunc description in special doc page
  - [\#17109](https://github.com/scipy/scipy/pull/17109): BLD: Ensure Intel Fortran handles negative 0 as expected.
  - [\#17110](https://github.com/scipy/scipy/pull/17110): DOC: add Numpy import to scipy.sparse examples
  - [\#17112](https://github.com/scipy/scipy/pull/17112): ENH: Add support for bounds class in curve\_fit
  - [\#17115](https://github.com/scipy/scipy/pull/17115): DOC: add Numpy import to examples
  - [\#17117](https://github.com/scipy/scipy/pull/17117): ENH: stats.logistic: override fit for remaining cases
  - [\#17118](https://github.com/scipy/scipy/pull/17118): ENH: Support for complex functions in binned\_statistic\_dd
  - [\#17122](https://github.com/scipy/scipy/pull/17122): ENH: remove duplicate function call
  - [\#17126](https://github.com/scipy/scipy/pull/17126): MAINT, ENH: scipy.stats: Refactor \`directionalmean\` to return...
  - [\#17128](https://github.com/scipy/scipy/pull/17128): ENH: stats.covariance: add CovViaCholesky
  - [\#17130](https://github.com/scipy/scipy/pull/17130): DOC: remove inconsistent messages
  - [\#17135](https://github.com/scipy/scipy/pull/17135): ENH: stats.Covariance: specifying covariance matrix by its eigendecomposition
  - [\#17138](https://github.com/scipy/scipy/pull/17138): CI: add permission to GH actions.
  - [\#17140](https://github.com/scipy/scipy/pull/17140): BUG: Fix issue with shgo not correctly passing jac to minimizer
  - [\#17141](https://github.com/scipy/scipy/pull/17141): ENH: stats.fit: add maximum spacing estimation
  - [\#17144](https://github.com/scipy/scipy/pull/17144): DOC: replace \`set\_tight\_layout\` with \`set\_layout\_engine\`...
  - [\#17147](https://github.com/scipy/scipy/pull/17147): BENCH: remove \`--quick\` flag to \`asv run\` in dev.py
  - [\#17149](https://github.com/scipy/scipy/pull/17149): MAINT: remove certifi py3.11 warning filter
  - [\#17152](https://github.com/scipy/scipy/pull/17152): ENH/MAINT: \`qmc.LatinHypercube\`: deprecate centered with scramble
  - [\#17157](https://github.com/scipy/scipy/pull/17157): ENH: Added value\_indices() function to scipy.ndimage
  - [\#17159](https://github.com/scipy/scipy/pull/17159): MAINT: spatial: Skip \`test\_massive\_arr\_overflow\` on systems...
  - [\#17161](https://github.com/scipy/scipy/pull/17161): MAINT: stats.sampling.NumericalInverseHermite: private distribution...
  - [\#17163](https://github.com/scipy/scipy/pull/17163): ENH: Add \`download\_all\` utility method & script
  - [\#17169](https://github.com/scipy/scipy/pull/17169): MAINT: special: Loosen the tolerance for a test of powm1.
  - [\#17170](https://github.com/scipy/scipy/pull/17170): MAINT: better handling of mode/center outside of the domain in...
  - [\#17175](https://github.com/scipy/scipy/pull/17175): MAINT: forward port 1.9.2 relnotes
  - [\#17177](https://github.com/scipy/scipy/pull/17177): DOC: stats: Fix versionadded markup for odds\_ratio
  - [\#17178](https://github.com/scipy/scipy/pull/17178): DOC: interpolate: discuss failure modes of SmoothBivariateSpline
  - [\#17180](https://github.com/scipy/scipy/pull/17180): DEP: interpolate: deprecate interp2d
  - [\#17181](https://github.com/scipy/scipy/pull/17181): CI: Fix when wheels are built for staging
  - [\#17182](https://github.com/scipy/scipy/pull/17182): MAINT: fix typo "mat\[r\]ix"
  - [\#17183](https://github.com/scipy/scipy/pull/17183): DOC: examples for \`ive\` and \`kve\`
  - [\#17184](https://github.com/scipy/scipy/pull/17184): DOC: stats: Fix the 1.9.0 release note about the 'weights' parameter...
  - [\#17188](https://github.com/scipy/scipy/pull/17188): DOC: update version switcher for 1.9.2
  - [\#17198](https://github.com/scipy/scipy/pull/17198): MAINT: stats: remove use of interp2d from levy\_stable.\_fitstart
  - [\#17199](https://github.com/scipy/scipy/pull/17199): DOC: Fix typos in IIR design argument documentation
  - [\#17215](https://github.com/scipy/scipy/pull/17215): MAINT: remove code for old numpy versions
  - [\#17217](https://github.com/scipy/scipy/pull/17217): MAINT: interpolate/RGI: make all \_evaluate\_YYY methods use self.values
  - [\#17223](https://github.com/scipy/scipy/pull/17223): DOC: linalg: Expand the qz example.
  - [\#17227](https://github.com/scipy/scipy/pull/17227): TST: stats.sampling.NumericalInverseHermite: filter all RuntimeWarnings
  - [\#17230](https://github.com/scipy/scipy/pull/17230): ENH: subclass-friendly refactor RegularGridInterpolator
  - [\#17233](https://github.com/scipy/scipy/pull/17233): DOC: examples for Struve functions
  - [\#17236](https://github.com/scipy/scipy/pull/17236): stats/distributions: make rv\_sample public, allow subclassing
  - [\#17237](https://github.com/scipy/scipy/pull/17237): ENH: add conditional\_table to SciPy.stats.
  - [\#17238](https://github.com/scipy/scipy/pull/17238): DOC: linalg: Several docstring updates.
  - [\#17243](https://github.com/scipy/scipy/pull/17243): DOC: special: Updates for smirnov and smirnovi
  - [\#17247](https://github.com/scipy/scipy/pull/17247): MAINT: optimize.leastsq: fix covariance not SPD
  - [\#17256](https://github.com/scipy/scipy/pull/17256): doc/RegularizedIncompleteBetaFunction
  - [\#17258](https://github.com/scipy/scipy/pull/17258): MAINT: stats.multivariate\_normal: frozen rvs should pass cov\_object...
  - [\#17259](https://github.com/scipy/scipy/pull/17259): DOC: CI: Add note about skipping Cirrus CI.
  - [\#17262](https://github.com/scipy/scipy/pull/17262): MAINT: forward port 1.9.3 relnotes
  - [\#17264](https://github.com/scipy/scipy/pull/17264): DOC: update version switcher for 1.9.3
  - [\#17273](https://github.com/scipy/scipy/pull/17273): TST: linalg: temporarily silence failure in test\_solve\_discrete\_are
  - [\#17276](https://github.com/scipy/scipy/pull/17276): MAINT/ENH: stats.multivariate\_normal.rvs: fix shape and speed...
  - [\#17277](https://github.com/scipy/scipy/pull/17277): ENH: Random unit vector distribution
  - [\#17279](https://github.com/scipy/scipy/pull/17279): TST: mark no\_segmentation fault test for DIRECT as xslow
  - [\#17280](https://github.com/scipy/scipy/pull/17280): DOC: example for voigt\_profile
  - [\#17283](https://github.com/scipy/scipy/pull/17283): STY: stats.Covariance: fix lint issue in \`main\`
  - [\#17284](https://github.com/scipy/scipy/pull/17284): MAINT: special: Loosen tolerance in test\_sinpi() and test\_cospi().
  - [\#17291](https://github.com/scipy/scipy/pull/17291): Cythonize 2D linear code path in RegularGridInterpolator
  - [\#17296](https://github.com/scipy/scipy/pull/17296): Fix test fails caused by pytest 7.1.3
  - [\#17298](https://github.com/scipy/scipy/pull/17298): DOC: Add examples to Stats Anderson
  - [\#17299](https://github.com/scipy/scipy/pull/17299): DOC: interpolate: Extrapolation tips and tricks
  - [\#17301](https://github.com/scipy/scipy/pull/17301): DOC, MAINT: remove use of inspect.formatargspec during doc build
  - [\#17302](https://github.com/scipy/scipy/pull/17302): MAINT: special: Use boost for special.hyp1f1 with real inputs.
  - [\#17303](https://github.com/scipy/scipy/pull/17303): Remove handwritten \`\_fitpack.spalde\` : a rebase of pr/17145
  - [\#17304](https://github.com/scipy/scipy/pull/17304): ENH: stats: implement \_sf and \_isf for invweibull.
  - [\#17305](https://github.com/scipy/scipy/pull/17305): BUG: interpolate: allow zero-sized data arrays
  - [\#17313](https://github.com/scipy/scipy/pull/17313): DOC: interpolate: add a note on data with different scales
  - [\#17314](https://github.com/scipy/scipy/pull/17314): DOC: interpolate/tutorial: add a length-1 example
  - [\#17315](https://github.com/scipy/scipy/pull/17315): MAINT: special: Remove tests of numpy functions arccosh, arcsinh...
  - [\#17317](https://github.com/scipy/scipy/pull/17317): DOC: interpolate/tutorial: add an example for equally-spaced...
  - [\#17319](https://github.com/scipy/scipy/pull/17319): DOC: references and examples for huber/pseudo\_huber
  - [\#17331](https://github.com/scipy/scipy/pull/17331): CI: On Azure, pin pytest-xdist to version 2.5.0
  - [\#17340](https://github.com/scipy/scipy/pull/17340): DOC: clarify use of bounds with basinhopping
  - [\#17345](https://github.com/scipy/scipy/pull/17345): ENH: commit to close \#1261 (trac \#734) by adding xtol argument.
  - [\#17346](https://github.com/scipy/scipy/pull/17346): BLD: fix \`SCIPY\_USE\_PYTHRAN=0\` usage for the Meson build
  - [\#17349](https://github.com/scipy/scipy/pull/17349): DOC: Fix signal docstrings; finish adding 'import numpy as np'
  - [\#17351](https://github.com/scipy/scipy/pull/17351): CI: Pin ninja==1.10.2.4 to avoid bug in 1.11.1 that breaks meson.
  - [\#17355](https://github.com/scipy/scipy/pull/17355): DOC: spatial: Fix some docstrings.
  - [\#17359](https://github.com/scipy/scipy/pull/17359): CI: ninja packages are repaired, so unpin.
  - [\#17361](https://github.com/scipy/scipy/pull/17361): DOC: examples for gdtr and gdtrc
  - [\#17363](https://github.com/scipy/scipy/pull/17363): DOC: adjust the deprecation notice for interp2d
  - [\#17366](https://github.com/scipy/scipy/pull/17366): DOC/MAINT: clean doctests namespace
  - [\#17367](https://github.com/scipy/scipy/pull/17367): DOC: Add missing \`build\` parameter to \`dev.py\`
  - [\#17369](https://github.com/scipy/scipy/pull/17369): DOC: consistent use of \`=\` for argument documentation
  - [\#17371](https://github.com/scipy/scipy/pull/17371): DOC: update RBF tutorial with new \`RBFInterpolator\`
  - [\#17372](https://github.com/scipy/scipy/pull/17372): BLD: update to Meson 0.64.0, remove \`pure: false\` lines
  - [\#17374](https://github.com/scipy/scipy/pull/17374): DOC: \`special.itairy\` example
  - [\#17376](https://github.com/scipy/scipy/pull/17376): DOC: Add examples to stats.mstats.find\_repeats
  - [\#17395](https://github.com/scipy/scipy/pull/17395): DOC: optimize: minimize doc to reflect tnc's deprecation of maxiter
  - [\#17397](https://github.com/scipy/scipy/pull/17397): BUG: signal: Change types in the upfirdn utility function \_output\_len()
  - [\#17399](https://github.com/scipy/scipy/pull/17399): DOC: signal.iirdesign: remove \`bessel\` from supported filter...
  - [\#17400](https://github.com/scipy/scipy/pull/17400): TST: use norm in signal.TestBessel.test\_fs\_param
  - [\#17409](https://github.com/scipy/scipy/pull/17409): DOC: Examples for special functions related to F distribution
  - [\#17415](https://github.com/scipy/scipy/pull/17415): MAINT: Python 3.8 typing simplify
  - [\#17416](https://github.com/scipy/scipy/pull/17416): BLD: fix a lot of configuration warnings by using \`fs.copyfile\`
  - [\#17417](https://github.com/scipy/scipy/pull/17417): BUG: integrate: simpson didn't handle integer n-d arrays.
  - [\#17418](https://github.com/scipy/scipy/pull/17418): DOC: special: Remove duplicate imports from special examples.
  - [\#17423](https://github.com/scipy/scipy/pull/17423): Documentation to fix \#17089
  - [\#17426](https://github.com/scipy/scipy/pull/17426): BLD: fix for propack and boost submodules - don't ask for native...
  - [\#17427](https://github.com/scipy/scipy/pull/17427): DOC: optimize.linprog: adjust HiGHS URL
  - [\#17430](https://github.com/scipy/scipy/pull/17430): BLD: define NDEBUG to mimic cmake release build
  - [\#17433](https://github.com/scipy/scipy/pull/17433): MAINT/TST: improved test coverage for DIRECT optimizer
  - [\#17439](https://github.com/scipy/scipy/pull/17439): DOC: Improve example for uniform\_direction distribution
  - [\#17446](https://github.com/scipy/scipy/pull/17446): MAINT: stats.gaussian\_kde: error early if n\_features \> n\_data
  - [\#17447](https://github.com/scipy/scipy/pull/17447): MAINT: optimize.fminbound/minimize\_scalar: add references, distinguish...
  - [\#17448](https://github.com/scipy/scipy/pull/17448): MAINT: optimize.minimize\_scalar: always acknowledge 'bounds'...
  - [\#17449](https://github.com/scipy/scipy/pull/17449): MAINT: remove remaining occurrences of unicode
  - [\#17457](https://github.com/scipy/scipy/pull/17457): DOC: Double Integral Example Typo
  - [\#17466](https://github.com/scipy/scipy/pull/17466): BUG: stats: Fix for gh-17444.
  - [\#17467](https://github.com/scipy/scipy/pull/17467): BUG: ndimage: Don't use np.int0 (it is the same as np.intp)
  - [\#17469](https://github.com/scipy/scipy/pull/17469): BUG: stats: Random parameters in \`pytest.mark.parametrize()\`...
  - [\#17471](https://github.com/scipy/scipy/pull/17471): MAINT: stats.rv\_count: revert gh-17236
  - [\#17472](https://github.com/scipy/scipy/pull/17472): Getting rid of \_make\_points\_and\_values\_ascending and its unnecessary...
  - [\#17478](https://github.com/scipy/scipy/pull/17478): ENH: Add clear\_cache utility for \`scipy.datasets\`
  - [\#17481](https://github.com/scipy/scipy/pull/17481): MAINT: special: remove more \`npy\_math.h\` usage
  - [\#17482](https://github.com/scipy/scipy/pull/17482): MAINT: stats: Unconditionally disable boost double promotion.
  - [\#17484](https://github.com/scipy/scipy/pull/17484): DOC: remove hard-coded value from PoissonDisk example
  - [\#17485](https://github.com/scipy/scipy/pull/17485): ENH: increase range of vonmises entropy
  - [\#17487](https://github.com/scipy/scipy/pull/17487): CI: pin setuptools for musllinux
  - [\#17489](https://github.com/scipy/scipy/pull/17489): BUG: ndimage: Work around gh-17270
  - [\#17496](https://github.com/scipy/scipy/pull/17496): DEV: dev.py: make lint task consistent with CI
  - [\#17500](https://github.com/scipy/scipy/pull/17500): MAINT: special: Remove references to nonexistent function exp1m.
  - [\#17501](https://github.com/scipy/scipy/pull/17501): Minor: Misspelling typos fixed in \_svds.py
  - [\#17504](https://github.com/scipy/scipy/pull/17504): CI: PRs run against merged main \[skip circle\]\[skip gh\]\[skip azp\]
  - [\#17512](https://github.com/scipy/scipy/pull/17512): TST: interpolate: stop skipping a test with zero-sized arrays
  - [\#17513](https://github.com/scipy/scipy/pull/17513): BUG: optimize: fixed issue 17380
  - [\#17526](https://github.com/scipy/scipy/pull/17526): BUG, DOC: stats: fix \`\[source\]\` button redicting to the wrong...
  - [\#17534](https://github.com/scipy/scipy/pull/17534): DOC: 1.10.0 release notes
  - [\#17536](https://github.com/scipy/scipy/pull/17536): DOC: Examples for \`yve\` and \`jve\`
  - [\#17540](https://github.com/scipy/scipy/pull/17540): DOC: fix documentation of \`make\_smoothing\_spline\`
  - [\#17543](https://github.com/scipy/scipy/pull/17543): CI: fix gh17539 failures of the alpine linux run
  - [\#17545](https://github.com/scipy/scipy/pull/17545): BUG: special: Fix handling of subnormal input for lambertw.
  - [\#17551](https://github.com/scipy/scipy/pull/17551): BUG Fix: Update lobpcg.py to turn history arrays into lists for...
  - [\#17569](https://github.com/scipy/scipy/pull/17569): MAINT: version bounds for 1.10.0rc1/relnotes fixes
  - [\#17579](https://github.com/scipy/scipy/pull/17579): Revert "ENH: stats.ks\_2samp: Pythranize remaining exact p-value...
  - [\#17580](https://github.com/scipy/scipy/pull/17580): CI: native cp38-macosx\_arm64 \[wheel build\]\[skip azp\]\[skip circle\]\[ski…
  - [\#17583](https://github.com/scipy/scipy/pull/17583): MAINT: 1.10.0rc1 backports round 2
  - [\#17591](https://github.com/scipy/scipy/pull/17591): MAINT: stats.pearsonr: raise error for complex input
  - [\#17600](https://github.com/scipy/scipy/pull/17600): DOC: update version switcher for 1.10
  - [\#17611](https://github.com/scipy/scipy/pull/17611): MAINT: Update ascent.dat file hash
  - [\#17614](https://github.com/scipy/scipy/pull/17614): MAINT: optimize.milp: don't warn about \`mip\_rel\_gap\` option
  - [\#17627](https://github.com/scipy/scipy/pull/17627): MAINT: Cast \`datasets.ascent\` image to float64
  - [\#17634](https://github.com/scipy/scipy/pull/17634): MAINT: casting errstate for NumPy 1.24
  - [\#17638](https://github.com/scipy/scipy/pull/17638): MAINT, TST: alpine/musl segfault shim
  - [\#17640](https://github.com/scipy/scipy/pull/17640): MAINT: prepare for SciPy 1.10.0rc2
  - [\#17645](https://github.com/scipy/scipy/pull/17645): MAINT: stats.rankdata: ensure consistent shape handling
  - [\#17653](https://github.com/scipy/scipy/pull/17653): MAINT: pybind11 win exclusion
  - [\#17656](https://github.com/scipy/scipy/pull/17656): MAINT: 1.10.0rc2 backports, round two
  - [\#17662](https://github.com/scipy/scipy/pull/17662): Fix undefined behavior within scipy.fft
  - [\#17686](https://github.com/scipy/scipy/pull/17686): REV: integrate.qmc\_quad: delay release to SciPy 1.11.0
  - [\#17689](https://github.com/scipy/scipy/pull/17689): REL: integrate.qmc\_quad: remove from release notes

---

1.10.1-notes.md

---

# SciPy 1.10.1 Release Notes

<div class="contents">

</div>

SciPy 1.10.1 is a bug-fix release with no new features compared to 1.10.0.

## Authors

  - Name (commits)
  - alice (1) +
  - Matt Borland (2) +
  - Evgeni Burovski (2)
  - CJ Carey (1)
  - Ralf Gommers (9)
  - Brett Graham (1) +
  - Matt Haberland (5)
  - Alex Herbert (1) +
  - Ganesh Kathiresan (2) +
  - Rishi Kulkarni (1) +
  - Loïc Estève (1)
  - Michał Górny (1) +
  - Jarrod Millman (1)
  - Andrew Nelson (4)
  - Tyler Reddy (50)
  - Pamphile Roy (2)
  - Eli Schwartz (2)
  - Tomer Sery (1) +
  - Kai Striega (1)
  - Jacopo Tissino (1) +
  - windows-server-2003 (1)

A total of 21 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.10.1

  - [\#14980](https://github.com/scipy/scipy/issues/14980): BUG: Johnson's algorithm fails without negative cycles
  - [\#17670](https://github.com/scipy/scipy/issues/17670): Failed to install on Raspberry Pi (ARM) 32bit in 3.11.1
  - [\#17715](https://github.com/scipy/scipy/issues/17715): scipy.stats.bootstrap broke with statistic returning multiple...
  - [\#17716](https://github.com/scipy/scipy/issues/17716): BUG: interpolate.interpn fails with read only input
  - [\#17718](https://github.com/scipy/scipy/issues/17718): BUG: RegularGridInterpolator 2D mixed precision crashes
  - [\#17727](https://github.com/scipy/scipy/issues/17727): BUG: RegularGridInterpolator does not work on non-native byteorder...
  - [\#17736](https://github.com/scipy/scipy/issues/17736): BUG: SciPy requires OpenBLAS even when building against a different...
  - [\#17775](https://github.com/scipy/scipy/issues/17775): BUG: Asymptotic computation of ksone.sf has intermediate overflow
  - [\#17782](https://github.com/scipy/scipy/issues/17782): BUG: Segfault in scipy.sparse.csgraph.shortest\_path() with v1.10.0
  - [\#17795](https://github.com/scipy/scipy/issues/17795): BUG: stats.pearsonr one-sided hypothesis yields incorrect p-value...
  - [\#17801](https://github.com/scipy/scipy/issues/17801): BUG: stats.powerlaw.fit: raises OverflowError
  - [\#17808](https://github.com/scipy/scipy/issues/17808): BUG: name of cython executable is hardcoded in \_build\_utils/cythoner.py
  - [\#17811](https://github.com/scipy/scipy/issues/17811): CI job with numpy nightly build failing on missing \`\_ArrayFunctionDispatcher.\_\_code\_\_\`
  - [\#17839](https://github.com/scipy/scipy/issues/17839): BUG: 1.10.0 tests fail on i386 and other less common arches
  - [\#17896](https://github.com/scipy/scipy/issues/17896): DOC: publicly expose \`multivariate\_normal\` attributes \`mean\`...
  - [\#17934](https://github.com/scipy/scipy/issues/17934): BUG: meson \`\_\_config\_\_\` generation - truncated unicode characters
  - [\#17938](https://github.com/scipy/scipy/issues/17938): BUG: \`scipy.stats.qmc.LatinHypercube\` with \`optimization="random-cd"\`...

### Pull requests for 1.10.1

  - [\#17712](https://github.com/scipy/scipy/pull/17712): REL, MAINT: prepare for 1.10.1
  - [\#17717](https://github.com/scipy/scipy/pull/17717): BUG: allow readonly input to interpolate.interpn
  - [\#17721](https://github.com/scipy/scipy/pull/17721): MAINT: update \`meson-python\` upper bound to \<0.13.0
  - [\#17726](https://github.com/scipy/scipy/pull/17726): BUG: interpolate/RGI: upcast float32 to float64
  - [\#17735](https://github.com/scipy/scipy/pull/17735): MAINT: stats.bootstrap: fix BCa with vector-valued statistics
  - [\#17743](https://github.com/scipy/scipy/pull/17743): DOC: improve the docs on using BLAS/LAPACK libraries with Meson
  - [\#17777](https://github.com/scipy/scipy/pull/17777): BLD: link to libatomic if necessary
  - [\#17783](https://github.com/scipy/scipy/pull/17783): BUG: Correct intermediate overflow in KS one asymptotic in SciPy.stats
  - [\#17790](https://github.com/scipy/scipy/pull/17790): BUG: signal: fix check\_malloc extern declaration type
  - [\#17797](https://github.com/scipy/scipy/pull/17797): MAINT: stats.pearsonr: correct p-value with negative correlation...
  - [\#17800](https://github.com/scipy/scipy/pull/17800): \[sparse.csgraph\] Fix a bug in dijkstra and johnson algorithm
  - [\#17803](https://github.com/scipy/scipy/pull/17803): MAINT: add missing \`\_\_init\_\_.py\` in test folder
  - [\#17806](https://github.com/scipy/scipy/pull/17806): MAINT: stats.powerlaw.fit: fix overflow when np.min(data)==0
  - [\#17810](https://github.com/scipy/scipy/pull/17810): BLD: use Meson's found cython instead of a wrapper script
  - [\#17831](https://github.com/scipy/scipy/pull/17831): MAINT, CI: GHA MacOS setup.py update
  - [\#17850](https://github.com/scipy/scipy/pull/17850): MAINT: remove use of \`\_\_code\_\_\` in \`scipy.integrate\`
  - [\#17854](https://github.com/scipy/scipy/pull/17854): TST: mark test for \`stats.kde.marginal\` as xslow
  - [\#17855](https://github.com/scipy/scipy/pull/17855): BUG: Fix handling of \`powm1\` overflow errors
  - [\#17859](https://github.com/scipy/scipy/pull/17859): TST: fix test failures on i386, s390x, ppc64, riscv64 (Debian)
  - [\#17862](https://github.com/scipy/scipy/pull/17862): BLD: Meson \`\_\_config\_\_\` generation
  - [\#17863](https://github.com/scipy/scipy/pull/17863): BUG: fix Johnson's algorithm
  - [\#17872](https://github.com/scipy/scipy/pull/17872): BUG: fix powm1 overflow handling
  - [\#17904](https://github.com/scipy/scipy/pull/17904): ENH: \`multivariate\_normal\_frozen\`: restore \`cov\` attribute
  - [\#17910](https://github.com/scipy/scipy/pull/17910): CI: use nightly numpy musllinux\_x86\_64 wheel
  - [\#17931](https://github.com/scipy/scipy/pull/17931): TST: test\_location\_scale proper 32bit Linux skip
  - [\#17932](https://github.com/scipy/scipy/pull/17932): TST: 32-bit tol for test\_pdist\_jensenshannon\_iris
  - [\#17936](https://github.com/scipy/scipy/pull/17936): BUG: Use raw strings for paths in \`\_\_config\_\_.py.in\`
  - [\#17940](https://github.com/scipy/scipy/pull/17940): BUG: \`rng\_integers\` in \`\_random\_cd\` now samples on a closed...
  - [\#17942](https://github.com/scipy/scipy/pull/17942): BLD: update classifiers for Python 3.11
  - [\#17963](https://github.com/scipy/scipy/pull/17963): MAINT: backports/prep for SciPy 1.10.1
  - [\#17981](https://github.com/scipy/scipy/pull/17981): BLD: make sure macosx\_x86\_64 10.9 tags are being made on maintenance/1.10.x
  - [\#17984](https://github.com/scipy/scipy/pull/17984): DOC: update link of the logo in the readme
  - [\#17997](https://github.com/scipy/scipy/pull/17997): BUG: at least one entry from trial should be used in exponential...

---

1.11.0-notes.md

---

# SciPy 1.11.0 Release Notes

<div class="contents">

</div>

SciPy 1.11.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.11.x branch, and on adding new features on the main branch.

This release requires Python 3.9+ and NumPy 1.21.6 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - Several <span class="title-ref">scipy.sparse</span> array API improvements, including <span class="title-ref">sparse.sparray</span>, a new public base class distinct from the older <span class="title-ref">sparse.spmatrix</span> class, proper 64-bit index support, and numerous deprecations paving the way to a modern sparse array experience.
  - <span class="title-ref">scipy.stats</span> added tools for survival analysis, multiple hypothesis testing, sensitivity analysis, and working with censored data.
  - A new function was added for quasi-Monte Carlo integration, and linear algebra functions `det` and `lu` now accept nD-arrays.
  - An `axes` argument was added broadly to `ndimage` functions, facilitating analysis of stacked image data.

## New features

### <span class="title-ref">scipy.integrate</span> improvements

  - Added <span class="title-ref">scipy.integrate.qmc\_quad</span> for quasi-Monte Carlo integration.
  - For an even number of points, <span class="title-ref">scipy.integrate.simpson</span> now calculates a parabolic segment over the last three points which gives improved accuracy over the previous implementation.

### <span class="title-ref">scipy.cluster</span> improvements

  - `disjoint_set` has a new method `subset_size` for providing the size of a particular subset.

### <span class="title-ref">scipy.constants</span> improvements

  - The `quetta`, `ronna`, `ronto`, and `quecto` SI prefixes were added.

### <span class="title-ref">scipy.linalg</span> improvements

  - <span class="title-ref">scipy.linalg.det</span> is improved and now accepts nD-arrays.
  - <span class="title-ref">scipy.linalg.lu</span> is improved and now accepts nD-arrays. With the new `p_indices` switch the output permutation argument can be 1D `(n,)` permutation index instead of the full `(n, n)` array.

### <span class="title-ref">scipy.ndimage</span> improvements

  - `axes` argument was added to `rank_filter`, `percentile_filter`, `median_filter`, `uniform_filter`, `minimum_filter`, `maximum_filter`, and `gaussian_filter`, which can be useful for processing stacks of image data.

### <span class="title-ref">scipy.optimize</span> improvements

  - <span class="title-ref">scipy.optimize.linprog</span> now passes unrecognized options directly to HiGHS.
  - <span class="title-ref">scipy.optimize.root\_scalar</span> now uses Newton's method to be used without providing `fprime` and the `secant` method to be used without a second guess.
  - <span class="title-ref">scipy.optimize.lsq\_linear</span> now accepts `bounds` arguments of type <span class="title-ref">scipy.optimize.Bounds</span>.
  - <span class="title-ref">scipy.optimize.minimize</span> `method='cobyla'` now supports simple bound constraints.
  - Users can opt into a new callback interface for most methods of \`scipy.optimize.minimize\`: If the provided callback callable accepts a single keyword argument, `intermediate_result`, <span class="title-ref">scipy.optimize.minimize</span> now passes both the current solution and the optimal value of the objective function to the callback as an instance of <span class="title-ref">scipy.optimize.OptimizeResult</span>. It also allows the user to terminate optimization by raising a `StopIteration` exception from the callback function. <span class="title-ref">scipy.optimize.minimize</span> will return normally, and the latest solution information is provided in the result object.
  - <span class="title-ref">scipy.optimize.curve\_fit</span> now supports an optional `nan_policy` argument.
  - <span class="title-ref">scipy.optimize.shgo</span> now has parallelization with the `workers` argument, symmetry arguments that can improve performance, class-based design to improve usability, and generally improved performance.

### <span class="title-ref">scipy.signal</span> improvements

  - `istft` has an improved warning message when the NOLA condition fails.

### <span class="title-ref">scipy.sparse</span> improvements

  - A new public base class <span class="title-ref">scipy.sparse.sparray</span> was introduced, allowing further extension of the sparse array API (such as the support for 1-dimensional sparse arrays) without breaking backwards compatibility. `isinstance(x, scipy.sparse.sparray)` to select the new sparse array classes, while `isinstance(x, scipy.sparse.spmatrix)` selects only the old sparse matrix classes.
  - Division of sparse arrays by a dense array now returns sparse arrays.
  - <span class="title-ref">scipy.sparse.isspmatrix</span> now only returns <span class="title-ref">True</span> for the sparse matrices instances. <span class="title-ref">scipy.sparse.issparse</span> now has to be used instead to check for instances of sparse arrays or instances of sparse matrices.
  - Sparse arrays constructed with int64 indices will no longer automatically downcast to int32.
  - The `argmin` and `argmax` methods now return the correct result when explicit zeros are present.

### <span class="title-ref">scipy.sparse.linalg</span> improvements

  - dividing `LinearOperator` by a number now returns a `_ScaledLinearOperator`
  - `LinearOperator` now supports right multiplication by arrays
  - `lobpcg` should be more efficient following removal of an extraneous QR decomposition.

### <span class="title-ref">scipy.spatial</span> improvements

  - Usage of new C++ backend for additional distance metrics, the majority of which will see substantial performance improvements, though a few minor regressions are known. These are focused on distances between boolean arrays.

### <span class="title-ref">scipy.special</span> improvements

  - The factorial functions `factorial`, `factorial2` and `factorialk` were made consistent in their behavior (in terms of dimensionality, errors etc.). Additionally, `factorial2` can now handle arrays with `exact=True`, and `factorialk` can handle arrays.

### <span class="title-ref">scipy.stats</span> improvements

#### New Features

  - <span class="title-ref">scipy.stats.sobol\_indices</span>, a method to compute Sobol' sensitivity indices.
  - <span class="title-ref">scipy.stats.dunnett</span>, which performs Dunnett's test of the means of multiple experimental groups against the mean of a control group.
  - <span class="title-ref">scipy.stats.ecdf</span> for computing the empirical CDF and complementary CDF (survival function / SF) from uncensored or right-censored data. This function is also useful for survival analysis / Kaplan-Meier estimation.
  - <span class="title-ref">scipy.stats.logrank</span> to compare survival functions underlying samples.
  - <span class="title-ref">scipy.stats.false\_discovery\_control</span> for adjusting p-values to control the false discovery rate of multiple hypothesis tests using the Benjamini-Hochberg or Benjamini-Yekutieli procedures.
  - <span class="title-ref">scipy.stats.CensoredData</span> to represent censored data. It can be used as input to the `fit` method of univariate distributions and to the new `ecdf` function.
  - Filliben's goodness of fit test as `method='Filliben'` of <span class="title-ref">scipy.stats.goodness\_of\_fit</span>.
  - <span class="title-ref">scipy.stats.ttest\_ind</span> has a new method, `confidence_interval` for computing a confidence interval of the difference between means.
  - <span class="title-ref">scipy.stats.MonteCarloMethod</span>, <span class="title-ref">scipy.stats.PermutationMethod</span>, and <span class="title-ref">scipy.stats.BootstrapMethod</span> are new classes to configure resampling and/or Monte Carlo versions of hypothesis tests. They can currently be used with <span class="title-ref">scipy.stats.pearsonr</span>.

#### Statistical Distributions

  - Added the von-Mises Fisher distribution as <span class="title-ref">scipy.stats.vonmises\_fisher</span>. This distribution is the most common analogue of the normal distribution on the unit sphere.
  - Added the relativistic Breit-Wigner distribution as <span class="title-ref">scipy.stats.rel\_breitwigner</span>. It is used in high energy physics to model resonances.
  - Added the Dirichlet multinomial distribution as <span class="title-ref">scipy.stats.dirichlet\_multinomial</span>.
  - Improved the speed and precision of several univariate statistical distributions.
      - <span class="title-ref">scipy.stats.anglit</span> `sf`
      - <span class="title-ref">scipy.stats.beta</span> `entropy`
      - <span class="title-ref">scipy.stats.betaprime</span> `cdf`, `sf`, `ppf`
      - <span class="title-ref">scipy.stats.chi</span> `entropy`
      - <span class="title-ref">scipy.stats.chi2</span> `entropy`
      - <span class="title-ref">scipy.stats.dgamma</span> `entropy`, `cdf`, `sf`, `ppf`, and `isf`
      - <span class="title-ref">scipy.stats.dweibull</span> `entropy`, `sf`, and `isf`
      - <span class="title-ref">scipy.stats.exponweib</span> `sf` and `isf`
      - <span class="title-ref">scipy.stats.f</span> `entropy`
      - <span class="title-ref">scipy.stats.foldcauchy</span> `sf`
      - <span class="title-ref">scipy.stats.foldnorm</span> `cdf` and `sf`
      - <span class="title-ref">scipy.stats.gamma</span> `entropy`
      - <span class="title-ref">scipy.stats.genexpon</span> `ppf`, `isf`, `rvs`
      - <span class="title-ref">scipy.stats.gengamma</span> `entropy`
      - <span class="title-ref">scipy.stats.geom</span> `entropy`
      - <span class="title-ref">scipy.stats.genlogistic</span> `entropy`, `logcdf`, `sf`, `ppf`, and `isf`
      - <span class="title-ref">scipy.stats.genhyperbolic</span> `cdf` and `sf`
      - <span class="title-ref">scipy.stats.gibrat</span> `sf` and `isf`
      - <span class="title-ref">scipy.stats.gompertz</span> `entropy`, `sf`. and `isf`
      - <span class="title-ref">scipy.stats.halflogistic</span> `sf`, and `isf`
      - <span class="title-ref">scipy.stats.halfcauchy</span> `sf` and `isf`
      - <span class="title-ref">scipy.stats.halfnorm</span> `cdf`, `sf`, and `isf`
      - <span class="title-ref">scipy.stats.invgamma</span> `entropy`
      - <span class="title-ref">scipy.stats.invgauss</span> `entropy`
      - <span class="title-ref">scipy.stats.johnsonsb</span> `pdf`, `cdf`, `sf`, `ppf`, and `isf`
      - <span class="title-ref">scipy.stats.johnsonsu</span> `pdf`, `sf`, `isf`, and `stats`
      - <span class="title-ref">scipy.stats.lognorm</span> `fit`
      - <span class="title-ref">scipy.stats.loguniform</span> `entropy`, `logpdf`, `pdf`, `cdf`, `ppf`, and `stats`
      - <span class="title-ref">scipy.stats.maxwell</span> `sf` and `isf`
      - <span class="title-ref">scipy.stats.nakagami</span> `entropy`
      - <span class="title-ref">scipy.stats.powerlaw</span> `sf`
      - <span class="title-ref">scipy.stats.powerlognorm</span> `logpdf`, `logsf`, `sf`, and `isf`
      - <span class="title-ref">scipy.stats.powernorm</span> `sf` and `isf`
      - <span class="title-ref">scipy.stats.t</span> `entropy`, `logpdf`, and `pdf`
      - <span class="title-ref">scipy.stats.truncexpon</span> `sf`, and `isf`
      - <span class="title-ref">scipy.stats.truncnorm</span> `entropy`
      - <span class="title-ref">scipy.stats.truncpareto</span> `fit`
      - <span class="title-ref">scipy.stats.vonmises</span> `fit`
  - <span class="title-ref">scipy.stats.multivariate\_t</span> now has `cdf` and `entropy` methods.
  - <span class="title-ref">scipy.stats.multivariate\_normal</span>, <span class="title-ref">scipy.stats.matrix\_normal</span>, and <span class="title-ref">scipy.stats.invwishart</span> now have an `entropy` method.

#### Other Improvements

  - <span class="title-ref">scipy.stats.monte\_carlo\_test</span> now supports multi-sample statistics.
  - <span class="title-ref">scipy.stats.bootstrap</span> can now produce one-sided confidence intervals.
  - <span class="title-ref">scipy.stats.rankdata</span> performance was improved for `method=ordinal` and `method=dense`.
  - <span class="title-ref">scipy.stats.moment</span> now supports non-central moment calculation.
  - <span class="title-ref">scipy.stats.anderson</span> now supports the `weibull_min` distribution.
  - <span class="title-ref">scipy.stats.sem</span> and <span class="title-ref">scipy.stats.iqr</span> now support `axis`, `nan_policy`, and masked array input.

## Deprecated features

  - Multi-Ellipsis sparse matrix indexing has been deprecated and will be removed in SciPy 1.13.
  - Several methods were deprecated for sparse arrays: `asfptype`, `getrow`, `getcol`, `get_shape`, `getmaxprint`, `set_shape`, `getnnz`, and `getformat`. Additionally, the `.A` and `.H` attributes were deprecated. Sparse matrix types are not affected.
  - The <span class="title-ref">scipy.linalg</span> functions `tri`, `triu` & `tril` are deprecated and will be removed in SciPy 1.13. Users are recommended to use the NumPy versions of these functions with identical names.
  - The <span class="title-ref">scipy.signal</span> functions `bspline`, `quadratic` & `cubic` are deprecated and will be removed in SciPy 1.13. Users are recommended to use <span class="title-ref">scipy.interpolate.BSpline</span> instead.
  - The `even` keyword of <span class="title-ref">scipy.integrate.simpson</span> is deprecated and will be removed in SciPy 1.13.0. Users should leave this as the default as this gives improved accuracy compared to the other methods.
  - Using `exact=True` when passing integers in a float array to `factorial` is deprecated and will be removed in SciPy 1.13.0.
  - float128 and object dtypes are deprecated for <span class="title-ref">scipy.signal.medfilt</span> and <span class="title-ref">scipy.signal.order\_filter</span>
  - The functions `scipy.signal.{lsim2, impulse2, step2}` had long been deprecated in documentation only. They now raise a DeprecationWarning and will be removed in SciPy 1.13.0.
  - Importing window functions directly from <span class="title-ref">scipy.window</span> has been soft deprecated since SciPy 1.1.0. They now raise a `DeprecationWarning` and will be removed in SciPy 1.13.0. Users should instead import them from <span class="title-ref">scipy.signal.window</span> or use the convenience function <span class="title-ref">scipy.signal.get\_window</span>.

## Backwards incompatible changes

  - The default for the `legacy` keyword of <span class="title-ref">scipy.special.comb</span> has changed from `True` to `False`, as announced since its introduction.

## Expired Deprecations

There is an ongoing effort to follow through on long-standing deprecations. The following previously deprecated features are affected:

  - The `n` keyword has been removed from <span class="title-ref">scipy.stats.moment</span>.
  - The `alpha` keyword has been removed from <span class="title-ref">scipy.stats.interval</span>.
  - The misspelt `gilbrat` distribution has been removed (use <span class="title-ref">scipy.stats.gibrat</span>).
  - The deprecated spelling of the `kulsinski` distance metric has been removed (use <span class="title-ref">scipy.spatial.distance.kulczynski1</span>).
  - The `vertices` keyword of <span class="title-ref">scipy.spatial.Delauney.qhull</span> has been removed (use simplices).
  - The `residual` property of <span class="title-ref">scipy.sparse.csgraph.maximum\_flow</span> has been removed (use `flow`).
  - The `extradoc` keyword of <span class="title-ref">scipy.stats.rv\_continuous</span>, <span class="title-ref">scipy.stats.rv\_discrete</span> and <span class="title-ref">scipy.stats.rv\_sample</span> has been removed.
  - The `sym_pos` keyword of <span class="title-ref">scipy.linalg.solve</span> has been removed.
  - The <span class="title-ref">scipy.optimize.minimize</span> function now raises an error for `x0` with `x0.ndim > 1`.
  - In <span class="title-ref">scipy.stats.mode</span>, the default value of `keepdims` is now `False`, and support for non-numeric input has been removed.
  - The function <span class="title-ref">scipy.signal.lsim</span> does not support non-uniform time steps anymore.

## Other changes

  - Rewrote the source build docs and restructured the contributor guide.
  - Improved support for cross-compiling with meson build system.
  - MyST-NB notebook infrastructure has been added to our documentation.

## Authors

  - h-vetinari (69)
  - Oriol Abril-Pla (1) +
  - Tom Adamczewski (1) +
  - Anton Akhmerov (13)
  - Andrey Akinshin (1) +
  - alice (1) +
  - Oren Amsalem (1)
  - Ross Barnowski (13)
  - Christoph Baumgarten (2)
  - Dawson Beatty (1) +
  - Doron Behar (1) +
  - Peter Bell (1)
  - John Belmonte (1) +
  - boeleman (1) +
  - Jack Borchanian (1) +
  - Matt Borland (3) +
  - Jake Bowhay (41)
  - Larry Bradley (1) +
  - Sienna Brent (1) +
  - Matthew Brett (1)
  - Evgeni Burovski (39)
  - Matthias Bussonnier (2)
  - Maria Cann (1) +
  - Alfredo Carella (1) +
  - CJ Carey (34)
  - Hood Chatham (2)
  - Anirudh Dagar (3)
  - Alberto Defendi (1) +
  - Pol del Aguila (1) +
  - Hans Dembinski (1)
  - Dennis (1) +
  - Vinayak Dev (1) +
  - Thomas Duvernay (1)
  - DWesl (4)
  - Stefan Endres (66)
  - Evandro (1) +
  - Tom Eversdijk (2) +
  - Isuru Fernando (1)
  - Franz Forstmayr (4)
  - Joseph Fox-Rabinovitz (1)
  - Stefano Frazzetto (1) +
  - Neil Girdhar (1)
  - Caden Gobat (1) +
  - Ralf Gommers (153)
  - GonVas (1) +
  - Marco Gorelli (1)
  - Brett Graham (2) +
  - Matt Haberland (388)
  - harshvardhan2707 (1) +
  - Alex Herbert (1) +
  - Guillaume Horel (1)
  - Geert-Jan Huizing (1) +
  - Jakob Jakobson (2)
  - Julien Jerphanion (10)
  - jyuv (2)
  - Rajarshi Karmakar (1) +
  - Ganesh Kathiresan (3) +
  - Robert Kern (4)
  - Andrew Knyazev (4)
  - Sergey Koposov (1)
  - Rishi Kulkarni (2) +
  - Eric Larson (1)
  - Zoufiné Lauer-Bare (2) +
  - Antony Lee (3)
  - Gregory R. Lee (8)
  - Guillaume Lemaitre (2) +
  - lilinjie (2) +
  - Yannis Linardos (1) +
  - Christian Lorentzen (5)
  - Loïc Estève (1)
  - Adam Lugowski (1) +
  - Charlie Marsh (2) +
  - Boris Martin (1) +
  - Nicholas McKibben (11)
  - Melissa Weber Mendonça (58)
  - Michał Górny (1) +
  - Jarrod Millman (5)
  - Stefanie Molin (2) +
  - Mark W. Mueller (1) +
  - mustafacevik (1) +
  - Takumasa N (1) +
  - nboudrie (1)
  - Andrew Nelson (112)
  - Nico Schlömer (4)
  - Lysandros Nikolaou (2) +
  - Kyle Oman (1)
  - OmarManzoor (2) +
  - Simon Ott (1) +
  - Geoffrey Oxberry (1) +
  - Geoffrey M. Oxberry (2) +
  - Sravya papaganti (1) +
  - Tirth Patel (2)
  - Ilhan Polat (32)
  - Quentin Barthélemy (1)
  - Matteo Raso (12) +
  - Tyler Reddy (143)
  - Lucas Roberts (1)
  - Pamphile Roy (225)
  - Jordan Rupprecht (1) +
  - Atsushi Sakai (11)
  - Omar Salman (7) +
  - Leo Sandler (1) +
  - Ujjwal Sarswat (3) +
  - Saumya (1) +
  - Daniel Schmitz (79)
  - Henry Schreiner (2) +
  - Dan Schult (8) +
  - Eli Schwartz (6)
  - Tomer Sery (2) +
  - Scott Shambaugh (10) +
  - Gagandeep Singh (1)
  - Ethan Steinberg (6) +
  - stepeos (2) +
  - Albert Steppi (3)
  - Strahinja Lukić (1)
  - Kai Striega (4)
  - suen-bit (1) +
  - Tartopohm (2)
  - Logan Thomas (2) +
  - Jacopo Tissino (1) +
  - Matus Valo (12) +
  - Jacob Vanderplas (2)
  - Christian Veenhuis (1) +
  - Isaac Virshup (3)
  - Stefan van der Walt (14)
  - Warren Weckesser (63)
  - windows-server-2003 (1)
  - Levi John Wolf (3)
  - Nobel Wong (1) +
  - Benjamin Yeh (1) +
  - Rory Yorke (1)
  - Younes (2) +
  - Zaikun ZHANG (1) +
  - Alex Zverianskii (1) +

A total of 134 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.11.0

  - [\#1766](https://github.com/scipy/scipy/issues/1766): \_\_fitpack.h work array computations pretty much one big bug....
  - [\#1953](https://github.com/scipy/scipy/issues/1953): use custom warnings instead of print statements (Trac \#1428)
  - [\#3089](https://github.com/scipy/scipy/issues/3089): brentq, nan returns, and bounds
  - [\#4257](https://github.com/scipy/scipy/issues/4257): scipy.optimize.line\_search returns None
  - [\#4532](https://github.com/scipy/scipy/issues/4532): box constraint in scipy optimize cobyla
  - [\#5584](https://github.com/scipy/scipy/issues/5584): Suspected underflow issue with sign check in bisection method
  - [\#5618](https://github.com/scipy/scipy/issues/5618): Solution for low accuracy of simps with even number of points
  - [\#5899](https://github.com/scipy/scipy/issues/5899): minimize\_scalar -- strange behaviour
  - [\#6414](https://github.com/scipy/scipy/issues/6414): scipy.stats Breit-Wigner distribution
  - [\#6842](https://github.com/scipy/scipy/issues/6842): Covariance matrix returned by ODR needs to be scaled by the residual...
  - [\#7306](https://github.com/scipy/scipy/issues/7306): any way of stopping optimization?
  - [\#7799](https://github.com/scipy/scipy/issues/7799): basinhopping result violates constraints
  - [\#8176](https://github.com/scipy/scipy/issues/8176): optimize.minimize should provide a way to return the cost function...
  - [\#8394](https://github.com/scipy/scipy/issues/8394): brentq returns solutions outside of the bounds
  - [\#8485](https://github.com/scipy/scipy/issues/8485): freqz() output for fifth order butterworth bandpass (low cut...
  - [\#8922](https://github.com/scipy/scipy/issues/8922): Bug in Solve\_ivp with BDF and Radau solvers and numpy arrays
  - [\#9061](https://github.com/scipy/scipy/issues/9061): Will a vectorized fun offer advantages for scipy.integrate.LSODA?
  - [\#9265](https://github.com/scipy/scipy/issues/9265): DOC: optimize.minimize: recipe for avoiding redundant work when...
  - [\#9412](https://github.com/scipy/scipy/issues/9412): Callback return value erroneously ignored in minimize
  - [\#9728](https://github.com/scipy/scipy/issues/9728): DOC: scipy.integrate.solve\_ivp
  - [\#9955](https://github.com/scipy/scipy/issues/9955): stats.mode nan\_policy='omit' unexpected behavior when data are...
  - [\#10050](https://github.com/scipy/scipy/issues/10050): \[Bug\] inconsistent canonical format for coo\_matrix
  - [\#10370](https://github.com/scipy/scipy/issues/10370): SciPy errors out expecting square matrix using for root-finding...
  - [\#10437](https://github.com/scipy/scipy/issues/10437): scipy.optimize.dual\_annealing always rejects non-improving state
  - [\#10554](https://github.com/scipy/scipy/issues/10554): ndimage.gaussian\_filter provide axis option
  - [\#10829](https://github.com/scipy/scipy/issues/10829): Extend Anderson Darling to cover Weibull distribution
  - [\#10853](https://github.com/scipy/scipy/issues/10853): ImportError: cannot import name spatial
  - [\#11052](https://github.com/scipy/scipy/issues/11052): optimize.dual\_annealing does not pass arguments to jacobian.
  - [\#11564](https://github.com/scipy/scipy/issues/11564): LinearOperator objects cannot be applied to sparse matrices
  - [\#11723](https://github.com/scipy/scipy/issues/11723): Monte Carlo methods for scipy.integrate
  - [\#11775](https://github.com/scipy/scipy/issues/11775): Multi xatol for Nedler-Mead algorithm
  - [\#11841](https://github.com/scipy/scipy/issues/11841): Ignore NaN with scipy.optimize.curve\_fit
  - [\#12114](https://github.com/scipy/scipy/issues/12114): scipy.optimize.shgo(): 'args' is incorrectly passed to constraint...
  - [\#12715](https://github.com/scipy/scipy/issues/12715): Why the covariance from curve\_fit depends so sharply on the overall...
  - [\#13122](https://github.com/scipy/scipy/issues/13122): The test suite fails on Python 3.10: issue with factorial() on...
  - [\#13258](https://github.com/scipy/scipy/issues/13258): \*\*kwargs for optimize.root\_scalar and alike
  - [\#13407](https://github.com/scipy/scipy/issues/13407): \`if rtol \< \_rtol / 4\` should be changed?
  - [\#13535](https://github.com/scipy/scipy/issues/13535): Newton-iteration should not be done after secant interpolation
  - [\#13547](https://github.com/scipy/scipy/issues/13547): optimize.shgo: handle objective functions that return the gradient...
  - [\#13554](https://github.com/scipy/scipy/issues/13554): The correct root for test APS13 is 0
  - [\#13757](https://github.com/scipy/scipy/issues/13757): API for representing censored data
  - [\#13974](https://github.com/scipy/scipy/issues/13974): BUG: optimize.shgo: not using options
  - [\#14059](https://github.com/scipy/scipy/issues/14059): Bound on absolute tolerance 'xtol' in 'optimize/zeros.py' is...
  - [\#14262](https://github.com/scipy/scipy/issues/14262): cython\_blas does not use const in signatures
  - [\#14414](https://github.com/scipy/scipy/issues/14414): brentq does converge and not raise an error for np.nan functions
  - [\#14486](https://github.com/scipy/scipy/issues/14486): One bug, one mistake and one refactorization proposal for the...
  - [\#14519](https://github.com/scipy/scipy/issues/14519): scipy/stats/tests/test\_continuous\_basic.py::test\_cont\_basic\[500-200-ncf-arg74\] test fails with IntegrationWarning
  - [\#14525](https://github.com/scipy/scipy/issues/14525): scipy.signal.bspline does not work for integer types
  - [\#14858](https://github.com/scipy/scipy/issues/14858): BUG: scipy.optimize.bracket sometimes fails silently
  - [\#14901](https://github.com/scipy/scipy/issues/14901): BUG: stats: distribution methods emit unnecessary warnings from...
  - [\#15089](https://github.com/scipy/scipy/issues/15089): BUG: scipy.optimize.minimize() does not report lowest energy...
  - [\#15136](https://github.com/scipy/scipy/issues/15136): ENH: Bump boost.math version
  - [\#15177](https://github.com/scipy/scipy/issues/15177): BUG: element-wise division between sparse matrices and array-likes...
  - [\#15212](https://github.com/scipy/scipy/issues/15212): BUG: stange behavior of scipy.integrate.quad for divergent integrals
  - [\#15514](https://github.com/scipy/scipy/issues/15514): BUG: optimize.shgo: error with vector constraints
  - [\#15600](https://github.com/scipy/scipy/issues/15600): BUG: handle inconsistencies in factorial functions and their...
  - [\#15613](https://github.com/scipy/scipy/issues/15613): ENH: Provide functions to compute log-integrals numerically (e.g.,...
  - [\#15702](https://github.com/scipy/scipy/issues/15702): MAINT:linalg: Either silent import NumPy versions or deprecate...
  - [\#15706](https://github.com/scipy/scipy/issues/15706): DEP: remove deprecated parameters from stats distributions
  - [\#15755](https://github.com/scipy/scipy/issues/15755): DEP: absorb lsim2 into lsim
  - [\#15756](https://github.com/scipy/scipy/issues/15756): DEP: remove non-numeric array support in stats.mode
  - [\#15790](https://github.com/scipy/scipy/issues/15790): BUG: \`isspmatrix\` doesn't account for sparse arrays
  - [\#15808](https://github.com/scipy/scipy/issues/15808): DEP: raise on \>1-dim inputs for optimize.minimize
  - [\#15814](https://github.com/scipy/scipy/issues/15814): CI: move Azure jobs to GitHub Actions
  - [\#15818](https://github.com/scipy/scipy/issues/15818): DEP: remove extradoc keyword in \_distn\_infrastructure
  - [\#15829](https://github.com/scipy/scipy/issues/15829): DEP: remove sym\_pos-keyword of scipy.linalg.solve
  - [\#15852](https://github.com/scipy/scipy/issues/15852): DOC: helper function to seed examples
  - [\#15906](https://github.com/scipy/scipy/issues/15906): Missing degree of freedom parameter in return value from \`stats.ttest\_ind\`
  - [\#15985](https://github.com/scipy/scipy/issues/15985): ENH, DOC: Add section explaining why and when to use a custom...
  - [\#15988](https://github.com/scipy/scipy/issues/15988): DEP: remove deprecated gilbrat distribution
  - [\#16014](https://github.com/scipy/scipy/issues/16014): DEP: remove MaximumFlowResult.residual
  - [\#16068](https://github.com/scipy/scipy/issues/16068): BUG: Missing Constant in Documentation
  - [\#16079](https://github.com/scipy/scipy/issues/16079): BUG: hypergeom.cdf slower in 1.8.0 than 1.7.3
  - [\#16196](https://github.com/scipy/scipy/issues/16196): BUG: OptimizeResult from optimize.minimize\_scalar changes 'x'...
  - [\#16269](https://github.com/scipy/scipy/issues/16269): DEP: remove \`maxiter\` kwarg in \`\_minimize\_tnc\`
  - [\#16270](https://github.com/scipy/scipy/issues/16270): DEP: remove \`vertices\` kwarg in qhull
  - [\#16271](https://github.com/scipy/scipy/issues/16271): DEP: remove \`scipy.spatial.distance.kulsinski\`
  - [\#16312](https://github.com/scipy/scipy/issues/16312): Meson complains about an absolute include path
  - [\#16322](https://github.com/scipy/scipy/issues/16322): DOC: building on Windows uses GCC with Meson, not MSVC
  - [\#16595](https://github.com/scipy/scipy/issues/16595): BUG: stats.mode emits annoying RuntimeWarning about nans even...
  - [\#16734](https://github.com/scipy/scipy/issues/16734): BUG: function p1evl in povevl.h not making what's described
  - [\#16803](https://github.com/scipy/scipy/issues/16803): Update \`scipy/\_\_config\_\_.py\` to contain useful information
  - [\#16810](https://github.com/scipy/scipy/issues/16810): ENH: implement Dirichlet-multinomial distribution
  - [\#16917](https://github.com/scipy/scipy/issues/16917): BUG: Windows Built SciPy can't import \_fblas via pip install...
  - [\#16929](https://github.com/scipy/scipy/issues/16929): BUG: \`scipy.sparse.csc\_matrix.argmin\` returns wrong values
  - [\#16949](https://github.com/scipy/scipy/issues/16949): Test failures for \`gges\` and \`qz\` for float32 input in macOS...
  - [\#16971](https://github.com/scipy/scipy/issues/16971): BUG: \[issue in scipy.optimize.shgo, for COBYLA's minimizer\_kwargs...
  - [\#16998](https://github.com/scipy/scipy/issues/16998): Unpickled and deepcopied distributions do not use global random...
  - [\#17024](https://github.com/scipy/scipy/issues/17024): ENH: Force real part of Rotation.as\_quat() to be positive.
  - [\#17107](https://github.com/scipy/scipy/issues/17107): BUG: The signature of cKDTree.query\_pairs in the docs does not...
  - [\#17137](https://github.com/scipy/scipy/issues/17137): BUG: optimize: Intermittent failure of \`test\_milp\_timeout\_16545\`
  - [\#17146](https://github.com/scipy/scipy/issues/17146): BUG: Scipy stats probability greater than 1
  - [\#17214](https://github.com/scipy/scipy/issues/17214): BUG: scipy.stats.mode: inconsistent shape with \`axis=None\`...
  - [\#17234](https://github.com/scipy/scipy/issues/17234): BUG: cythonization / compliation failure with development branch...
  - [\#17250](https://github.com/scipy/scipy/issues/17250): ENH: Expose parallel HiGHS solvers in high-level API
  - [\#17281](https://github.com/scipy/scipy/issues/17281): BUG: using LinearOperator as RHS operand of @ causes a NumPy...
  - [\#17285](https://github.com/scipy/scipy/issues/17285): ENH: Expose DisjointSet.\_sizes
  - [\#17312](https://github.com/scipy/scipy/issues/17312): ENH: Clarify that ndimage.find\_objects returns slices ordered...
  - [\#17335](https://github.com/scipy/scipy/issues/17335): ENH: change term zero to root in newton
  - [\#17368](https://github.com/scipy/scipy/issues/17368): BUG: import scipy.stats fails under valgrind
  - [\#17378](https://github.com/scipy/scipy/issues/17378): griddata linear / LinearNDInterpolator unexpected behavior
  - [\#17381](https://github.com/scipy/scipy/issues/17381): BUG: FutureWarning in distance\_transform\_cdt
  - [\#17388](https://github.com/scipy/scipy/issues/17388): BUG: stats.binom: Boost binomial distribution edge case bug?
  - [\#17403](https://github.com/scipy/scipy/issues/17403): DOC: There is no general \`scipy.sparse\` page in the user guide
  - [\#17431](https://github.com/scipy/scipy/issues/17431): ENH: ECDF in scipy.
  - [\#17456](https://github.com/scipy/scipy/issues/17456): ENH: custom stopping criteria with auxiliary function
  - [\#17516](https://github.com/scipy/scipy/issues/17516): BUG: Error in documentation for scipy.optimize.minimize
  - [\#17532](https://github.com/scipy/scipy/issues/17532): DOC: side bar renders over the top of some of the text in the...
  - [\#17548](https://github.com/scipy/scipy/issues/17548): CI: The Ubuntu 18.04 Actions runner image is deprecated
  - [\#17570](https://github.com/scipy/scipy/issues/17570): ENH: optimize.root\_scalar: default to \`newton\` when only \`x0\`...
  - [\#17576](https://github.com/scipy/scipy/issues/17576): ENH: override fit method for von mises
  - [\#17593](https://github.com/scipy/scipy/issues/17593): BUG: cannot import name 'permutation\_test' from 'scipy.stats'
  - [\#17604](https://github.com/scipy/scipy/issues/17604): DOC: optimize.curve\_fit: documentation of \`fvec\` is not specific
  - [\#17620](https://github.com/scipy/scipy/issues/17620): ENH: Cachable normalisation parameter for frozen distributions
  - [\#17631](https://github.com/scipy/scipy/issues/17631): BUG: numerical issues for cdf/ppf of the betaprime distribution
  - [\#17639](https://github.com/scipy/scipy/issues/17639): BUG: "xl" not returned if success = False for scipy.optimize.shgo
  - [\#17652](https://github.com/scipy/scipy/issues/17652): Check for non-running tests because of test function name and...
  - [\#17667](https://github.com/scipy/scipy/issues/17667): BUG: Wrong p-values with Wilcoxon signed-rank test because of...
  - [\#17683](https://github.com/scipy/scipy/issues/17683): TST: stats: Several functions with no tests in \`stats.mstats\`
  - [\#17713](https://github.com/scipy/scipy/issues/17713): BUG: \`\_axis\_nan\_policy\` changes some common \`TypeError\`s
  - [\#17725](https://github.com/scipy/scipy/issues/17725): BUG: spatial: Bad error message from \`hamming\` when \`w\` has...
  - [\#17749](https://github.com/scipy/scipy/issues/17749): ENH: Compute non centraled moments with \`stats.moment\`?
  - [\#17754](https://github.com/scipy/scipy/issues/17754): Cosine distance of vector to self returns small non-zero answer...
  - [\#17776](https://github.com/scipy/scipy/issues/17776): BUG: dblquad and args kwarg
  - [\#17788](https://github.com/scipy/scipy/issues/17788): ENH: Scipy Optimize, equal Bounds should be directly passed to...
  - [\#17805](https://github.com/scipy/scipy/issues/17805): BUG: stats: dgamma.sf and dgamma.cdf lose precision in the tails
  - [\#17809](https://github.com/scipy/scipy/issues/17809): BUG: CDF and PMF of binomial function not same with extreme values
  - [\#17815](https://github.com/scipy/scipy/issues/17815): DOC: improve documentation for [distance\_transform](){cdt,edt}
  - [\#17819](https://github.com/scipy/scipy/issues/17819): BUG: \`stats.ttest\_ind\_from\_stats\` doesn't check whether standard...
  - [\#17828](https://github.com/scipy/scipy/issues/17828): DOC: UnivariateSpline does not have any documentation or a reference.
  - [\#17845](https://github.com/scipy/scipy/issues/17845): BUG: 1.10.0 FIR Decimation is broken when supplying ftype as...
  - [\#17846](https://github.com/scipy/scipy/issues/17846): BUG: Infinite loop in scipy.integrate.solve\_ivp()
  - [\#17860](https://github.com/scipy/scipy/issues/17860): DOC: Incorrect link to ARPACK
  - [\#17866](https://github.com/scipy/scipy/issues/17866): DOC: Should \`Result Classes\` be its own top level section?
  - [\#17911](https://github.com/scipy/scipy/issues/17911): DOC: Formula of Tustin formula in scipy.signal.bilinear misses...
  - [\#17913](https://github.com/scipy/scipy/issues/17913): Unexpected behaviour of pearsonr pvalue for one sided tests
  - [\#17916](https://github.com/scipy/scipy/issues/17916): BUG: scipy 1.10.0 crashes when using a large float in skellam...
  - [\#17941](https://github.com/scipy/scipy/issues/17941): DOC: guidance on setting dev.py build -j flag in documentation,...
  - [\#17954](https://github.com/scipy/scipy/issues/17954): BUG: failure in lobpcg
  - [\#17970](https://github.com/scipy/scipy/issues/17970): BUG: ILP64 build issue on Python 3.11
  - [\#17985](https://github.com/scipy/scipy/issues/17985): DOC: update wheel generation process
  - [\#17992](https://github.com/scipy/scipy/issues/17992): BUG: matlab files with deeply lists of arrays with different...
  - [\#17999](https://github.com/scipy/scipy/issues/17999): DOC: incorrect example for stats.cramervonmises
  - [\#18026](https://github.com/scipy/scipy/issues/18026): BUG: stats: Error from e.g. \`stats.betabinom.stats(10, 2, 3,...
  - [\#18067](https://github.com/scipy/scipy/issues/18067): ENH: stats: resampling/Monte Carlo configuration object
  - [\#18069](https://github.com/scipy/scipy/issues/18069): ENH: stats.ttest\_ind is inconsistent with R. It does not allow...
  - [\#18071](https://github.com/scipy/scipy/issues/18071): BUG: rv\_continuous.stats fails to converge when trying to estimate...
  - [\#18074](https://github.com/scipy/scipy/issues/18074): BUG: wrong dependencies for pooch
  - [\#18078](https://github.com/scipy/scipy/issues/18078): BUG: \`QMCEngine.reset()\` semantics and passed \`Generator\`...
  - [\#18079](https://github.com/scipy/scipy/issues/18079): BUG: \`Halton(seed=rng)\` does not consume \`Generator\` PRNG...
  - [\#18106](https://github.com/scipy/scipy/issues/18106): BUG: Linprog reports failure despite success convergence, given...
  - [\#18115](https://github.com/scipy/scipy/issues/18115): BUG: ValueError: setting an array element with a sequence for...
  - [\#18117](https://github.com/scipy/scipy/issues/18117): BUG: stats: large errors in genhyperbolic.cdf and .sf for large...
  - [\#18119](https://github.com/scipy/scipy/issues/18119): DOC: The comment about \`fmin\_powell\` is wrong
  - [\#18123](https://github.com/scipy/scipy/issues/18123): BUG: \[mmread\] Error while reading mtx file with spaces before...
  - [\#18132](https://github.com/scipy/scipy/issues/18132): BUG: invalid output and behavior of scipy.stats.somersd
  - [\#18139](https://github.com/scipy/scipy/issues/18139): BUG: Overflow in 'new' implementation of scipy.stats.kendalltau
  - [\#18143](https://github.com/scipy/scipy/issues/18143): Building from source on Windows 32-bit Python did not succeed
  - [\#18171](https://github.com/scipy/scipy/issues/18171): BUG: optimize.root\_scalar: should return normally with \`converged=False\`...
  - [\#18223](https://github.com/scipy/scipy/issues/18223): BUG: cKDTree segmentation faults when NaN input and balanced\_tree=False,...
  - [\#18226](https://github.com/scipy/scipy/issues/18226): ENH: stats.geometric.entropy: implement analytical formula
  - [\#18239](https://github.com/scipy/scipy/issues/18239): DOC: linking to custom BLAS/LAPACK locations is not clear
  - [\#18254](https://github.com/scipy/scipy/issues/18254): BUG: stats.mode: failure with array of Pandas integers
  - [\#18271](https://github.com/scipy/scipy/issues/18271): Broken or wrong formulas on distance definition
  - [\#18272](https://github.com/scipy/scipy/issues/18272): BUG: stats: occasional failure of \`test\_multivariate.TestOrthoGroup.test\_det\_and\_ortho\`
  - [\#18274](https://github.com/scipy/scipy/issues/18274): BUG: stats: Spurious warnings from \`betaprime.fit\`
  - [\#18282](https://github.com/scipy/scipy/issues/18282): Incompatible pointer warning from \`stats.\_rcond\`
  - [\#18302](https://github.com/scipy/scipy/issues/18302): BUG: beta.pdf is broken on main (1.11.0.dev0)
  - [\#18322](https://github.com/scipy/scipy/issues/18322): BUG: scipy.stats.shapiro gives a negative pvalue
  - [\#18326](https://github.com/scipy/scipy/issues/18326): ENH: milp supporting sparse inputs
  - [\#18329](https://github.com/scipy/scipy/issues/18329): BUG: meson generates \`warning: "MS\_WIN64" redefined\` when building...
  - [\#18368](https://github.com/scipy/scipy/issues/18368): DOC: Issue in scipy.stats.chisquare
  - [\#18377](https://github.com/scipy/scipy/issues/18377): BUG: \`const\` signature changes in \`cython\_blas\` and \`cython\_lapack\`...
  - [\#18388](https://github.com/scipy/scipy/issues/18388): Question about usage of \_MACHEPS
  - [\#18407](https://github.com/scipy/scipy/issues/18407): CI: test\_enzo\_example\_c\_with\_unboundedness started failing
  - [\#18415](https://github.com/scipy/scipy/issues/18415): BUG: Windows compilation error with Intel Fortran in PROPACK
  - [\#18425](https://github.com/scipy/scipy/issues/18425): DOC: clarify that scipy.ndimage.sobel does not compute the 2D...
  - [\#18443](https://github.com/scipy/scipy/issues/18443): BLD: errors when building SciPy on Windows with Meson
  - [\#18456](https://github.com/scipy/scipy/issues/18456): ENH: Allow passing non-varying arguments for the model function...
  - [\#18484](https://github.com/scipy/scipy/issues/18484): DEP: Warn on deprecated windows-import in base \`scipy.signal\`...
  - [\#18485](https://github.com/scipy/scipy/issues/18485): DEP: deprecate multiple-ellipsis handling in sparse matrix indexing
  - [\#18494](https://github.com/scipy/scipy/issues/18494): CI: occasional failure of \`test\_minimum\_spanning\_tree\`
  - [\#18497](https://github.com/scipy/scipy/issues/18497): MAINT, BUG: guard against non-finite kd-tree queries
  - [\#18498](https://github.com/scipy/scipy/issues/18498): TST: interpolate overflow xslow tests (low priority)
  - [\#18525](https://github.com/scipy/scipy/issues/18525): DOC: sparse doc build warning causing failure (including in CI)
  - [\#18535](https://github.com/scipy/scipy/issues/18535): DOC: Dev branch docs render Dev TOC while viewing API Reference
  - [\#18547](https://github.com/scipy/scipy/issues/18547): CI: occasionally failing test \`test\_minimize\_callback\_copies\_array\[fmin\]\`
  - [\#18595](https://github.com/scipy/scipy/issues/18595): BUG: dev.py notes needs a small shim
  - [\#18597](https://github.com/scipy/scipy/issues/18597): CI, BUG: Cirrus wheel upload fails on maintenance branch
  - [\#18600](https://github.com/scipy/scipy/issues/18600): BUG: SciPy 1.11.0rc1 not buildable on PPC due to boost submodule
  - [\#18632](https://github.com/scipy/scipy/issues/18632): 1.11.0rc1: remaining test failures in conda-forge
  - [\#18634](https://github.com/scipy/scipy/issues/18634): BUG: stats.truncnorm.moments yields error for moment order greater...
  - [\#18654](https://github.com/scipy/scipy/issues/18654): BUG: ci/circleci: build\_scipy broken
  - [\#18675](https://github.com/scipy/scipy/issues/18675): BUG: \`signal.detrend\` on main no longer accepts a sequence...
  - [\#18732](https://github.com/scipy/scipy/issues/18732): TST, MAINT: some tests blocking 1.11.0 on MacOS ARM64 with NumPy...

## Pull requests for 1.11.0

  - [\#8727](https://github.com/scipy/scipy/pull/8727): BUG: vq.kmeans() compares signed diff to a threshold.
  - [\#12787](https://github.com/scipy/scipy/pull/12787): ENH: add anderson darling test for weibull \#10829
  - [\#13699](https://github.com/scipy/scipy/pull/13699): ENH: stats: Add handling of censored data to univariate cont....
  - [\#14069](https://github.com/scipy/scipy/pull/14069): Use warnings instead of print statements
  - [\#15073](https://github.com/scipy/scipy/pull/15073): TST/MAINT: Parametrize \`\_METRICS\_NAMES\` & replace \`assert\_raises\`...
  - [\#15841](https://github.com/scipy/scipy/pull/15841): Overhaul \`factorial{,2,k}\`: API coherence, bug fixes & consistent...
  - [\#15873](https://github.com/scipy/scipy/pull/15873): DEP: remove sym\_pos argument from linalg.solve
  - [\#15877](https://github.com/scipy/scipy/pull/15877): DEP: remove extradoc in \_distn\_infrastructure
  - [\#15929](https://github.com/scipy/scipy/pull/15929): DEP: \`lsim2\` deprecated in favor of \`lsim\`
  - [\#15958](https://github.com/scipy/scipy/pull/15958): CI: move \`prerelease\_deps\_coverage\_64bit\_blas\` to GitHub actions.
  - [\#16071](https://github.com/scipy/scipy/pull/16071): ENH: Add missing "characteristic impedance of vacuum"
  - [\#16313](https://github.com/scipy/scipy/pull/16313): MAINT: Update optimize.shgo
  - [\#16782](https://github.com/scipy/scipy/pull/16782): ENH: stats: optimised fit for the truncated Pareto distribution
  - [\#16839](https://github.com/scipy/scipy/pull/16839): ENH: stats: optimised MLE for the lognormal distribution
  - [\#16936](https://github.com/scipy/scipy/pull/16936): BUG: sparse: fix argmin/argmax when all entries are nonzero
  - [\#16961](https://github.com/scipy/scipy/pull/16961): ENH: optimize: Add \`nan\_policy\` optional argument for \`curve\_fit\`.
  - [\#16996](https://github.com/scipy/scipy/pull/16996): ENH: stats.anderson\_ksamp: add permutation version of test
  - [\#17116](https://github.com/scipy/scipy/pull/17116): MAINT: Adjust Pull-Request labeler configuration
  - [\#17208](https://github.com/scipy/scipy/pull/17208): DOC: Add triage guide
  - [\#17211](https://github.com/scipy/scipy/pull/17211): ENH: Implemented Dirichlet-multinomial distribution (\#16810)
  - [\#17212](https://github.com/scipy/scipy/pull/17212): Guard against integer overflows in fitpackmodule.c
  - [\#17235](https://github.com/scipy/scipy/pull/17235): MAINT: pass check\_finite to the vq() call of kmeans2()
  - [\#17267](https://github.com/scipy/scipy/pull/17267): DOC/MAINT: special: Several updates for tklmbda
  - [\#17268](https://github.com/scipy/scipy/pull/17268): DOC: special: Show that lambertw can solve x = a + b\*exp(c\*x)
  - [\#17287](https://github.com/scipy/scipy/pull/17287): DOC: Clarify minimum\_spanning\_tree behavior in non-connected...
  - [\#17310](https://github.com/scipy/scipy/pull/17310): DOC: missing-bits: document recommendations on return object...
  - [\#17322](https://github.com/scipy/scipy/pull/17322): DOC: Add notebook infrastructure for the docs
  - [\#17326](https://github.com/scipy/scipy/pull/17326): ENH: Clarify the index of element corresponding to a label in...
  - [\#17334](https://github.com/scipy/scipy/pull/17334): ENH: Map the rotation quaternion double cover of rotation space...
  - [\#17402](https://github.com/scipy/scipy/pull/17402): ENH: stats: add false discovery rate control function
  - [\#17410](https://github.com/scipy/scipy/pull/17410): ENH: stats.multivariate\_t: add cdf method
  - [\#17432](https://github.com/scipy/scipy/pull/17432): BLD: Boost.Math standalone submodule
  - [\#17451](https://github.com/scipy/scipy/pull/17451): DEP: Remove \`vertices\` in qhull.
  - [\#17455](https://github.com/scipy/scipy/pull/17455): Deprecate scipy.signal.{bspline, quadratic, cubic}
  - [\#17479](https://github.com/scipy/scipy/pull/17479): ENH: Add new SI prefixes
  - [\#17480](https://github.com/scipy/scipy/pull/17480): ENH: stats: Implement \_sf and \_isf for halfnorm, gibrat, gompertz.
  - [\#17483](https://github.com/scipy/scipy/pull/17483): MAINT: optimize.basinhopping: fix acceptance of failed local...
  - [\#17486](https://github.com/scipy/scipy/pull/17486): ENH: optimize.minimize: callback enhancements
  - [\#17499](https://github.com/scipy/scipy/pull/17499): MAINT: remove use of \`NPY\_UPDATEIFCOPY\`
  - [\#17505](https://github.com/scipy/scipy/pull/17505): ENH: Add relativistic Breit-Wigner Distribution
  - [\#17529](https://github.com/scipy/scipy/pull/17529): ENH: stats: Implement powerlaw.\_sf
  - [\#17531](https://github.com/scipy/scipy/pull/17531): TST: scipy.signal.order\_filter: add test coverage
  - [\#17535](https://github.com/scipy/scipy/pull/17535): MAINT: special: Improve comments about Cephes p1evl function.
  - [\#17538](https://github.com/scipy/scipy/pull/17538): ENH: Extending \_distance\_pybind with additional distance metrics...
  - [\#17541](https://github.com/scipy/scipy/pull/17541): REL: set version to 1.11.0.dev0
  - [\#17553](https://github.com/scipy/scipy/pull/17553): DOC: optimize.curve\_fit: add note about \`pcov\` condition number
  - [\#17555](https://github.com/scipy/scipy/pull/17555): DEP: stats: removal of kwargs n in stats.moment and alpha in...
  - [\#17556](https://github.com/scipy/scipy/pull/17556): DEV: bump flake8 version used in CI job
  - [\#17557](https://github.com/scipy/scipy/pull/17557): MAINT: bump Ubuntu version in Azure CI
  - [\#17561](https://github.com/scipy/scipy/pull/17561): MAINT: stats.mode: remove deprecated features, smooth edges
  - [\#17562](https://github.com/scipy/scipy/pull/17562): ENH: stats: Implement \_ppf for the betaprime distribution.
  - [\#17563](https://github.com/scipy/scipy/pull/17563): DEP: stats: remove misspelt gilbrat distribution
  - [\#17566](https://github.com/scipy/scipy/pull/17566): DOC: correct, update, and extend \`lobpcg\` docstring info and...
  - [\#17567](https://github.com/scipy/scipy/pull/17567): MAINT: Update gitpod setup
  - [\#17573](https://github.com/scipy/scipy/pull/17573): DOC: Update testing documentation to dev.py
  - [\#17574](https://github.com/scipy/scipy/pull/17574): MAINT: clean up \`NPY\_OLD\` usage in Cython code and build files
  - [\#17581](https://github.com/scipy/scipy/pull/17581): DOC fix trivial typo in description of loggamma in \_add\_newdocs.py
  - [\#17585](https://github.com/scipy/scipy/pull/17585): ENH: Von Mises distribution fit
  - [\#17587](https://github.com/scipy/scipy/pull/17587): BUG: stats: Avoid overflow/underflow issues in loggamma \_cdf,...
  - [\#17589](https://github.com/scipy/scipy/pull/17589): BUG: FutureWarning in distance\_transform\_cdt
  - [\#17590](https://github.com/scipy/scipy/pull/17590): DEP: raise on \>1-dim inputs for optimize.minimize
  - [\#17595](https://github.com/scipy/scipy/pull/17595): DOC: optimize.line\_search: note that \`pk\` must be a descent...
  - [\#17597](https://github.com/scipy/scipy/pull/17597): DOC: Add Legacy directive
  - [\#17603](https://github.com/scipy/scipy/pull/17603): DEP: remove spatial.distance.kulsinski
  - [\#17605](https://github.com/scipy/scipy/pull/17605): DOC: example of epidemic model with LHS
  - [\#17608](https://github.com/scipy/scipy/pull/17608): DOC: curve\_fit - clarify fvec output
  - [\#17610](https://github.com/scipy/scipy/pull/17610): DOC: add example to chi2\_contingency
  - [\#17613](https://github.com/scipy/scipy/pull/17613): DOC: curve\_fit, include sigma
  - [\#17615](https://github.com/scipy/scipy/pull/17615): MAINT: scipy.optimize.root: fix error when both args and jac...
  - [\#17616](https://github.com/scipy/scipy/pull/17616): MAINT: optimize.minimize: enhance \`callback\` for remaining...
  - [\#17617](https://github.com/scipy/scipy/pull/17617): DEP: remove MaximumFlowResult.residual
  - [\#17618](https://github.com/scipy/scipy/pull/17618): DOC: fix unicode in qmc example
  - [\#17622](https://github.com/scipy/scipy/pull/17622): MAINT: optimize.root\_scalar: raise when NaN is encountered
  - [\#17624](https://github.com/scipy/scipy/pull/17624): ENH: add von Mises-Fisher distribution
  - [\#17625](https://github.com/scipy/scipy/pull/17625): DOC: Examples for special functions related to the student t...
  - [\#17626](https://github.com/scipy/scipy/pull/17626): DOC: improve docstrings of exp. scaled Bessel functions
  - [\#17628](https://github.com/scipy/scipy/pull/17628): ENH: add Sobol' indices
  - [\#17629](https://github.com/scipy/scipy/pull/17629): DOC: stats: example treatment odd\_ratio
  - [\#17637](https://github.com/scipy/scipy/pull/17637): DEP: switch default of special.comb to legacy=False
  - [\#17643](https://github.com/scipy/scipy/pull/17643): TST: interpolate/rgi: Add tests for descending ordered points
  - [\#17649](https://github.com/scipy/scipy/pull/17649): fix documentation lines
  - [\#17651](https://github.com/scipy/scipy/pull/17651): Update \_svds.py removing no longer necessary QR for LOBPCG output
  - [\#17654](https://github.com/scipy/scipy/pull/17654): MAINT:interpolate:Add .c file to .gitignore
  - [\#17655](https://github.com/scipy/scipy/pull/17655): DEV: add check for misnamed tests
  - [\#17657](https://github.com/scipy/scipy/pull/17657): DEV: streamline OpenBLAS handling on Win machine
  - [\#17660](https://github.com/scipy/scipy/pull/17660): MAINT: optimize.newton: converged=False when secant has zero...
  - [\#17663](https://github.com/scipy/scipy/pull/17663): DOC: optimize.curve\_fit: example output may vary
  - [\#17664](https://github.com/scipy/scipy/pull/17664): MAINT: optimize.root\_scalar: fix underflow sign check bug
  - [\#17665](https://github.com/scipy/scipy/pull/17665): DOC: mention inaccuracy of curve\_fit result \`pcov\`
  - [\#17666](https://github.com/scipy/scipy/pull/17666): DOC: optimize.root\_scalar: harmonize documentation and implementation...
  - [\#17668](https://github.com/scipy/scipy/pull/17668): ENH: stats.loguniform: reformulate methods to avoid overflow
  - [\#17669](https://github.com/scipy/scipy/pull/17669): MAINT: optimize.newton: avoid error with complex \`x0\`
  - [\#17674](https://github.com/scipy/scipy/pull/17674): DOC: optimize: add tutorial example of passing kwargs to callable
  - [\#17675](https://github.com/scipy/scipy/pull/17675): ENH: update lobpcg.py
  - [\#17676](https://github.com/scipy/scipy/pull/17676): BUG: correctly handle array-like types in scipy.io.savemat
  - [\#17678](https://github.com/scipy/scipy/pull/17678): DOC: optimize: show how memoization avoids duplicating work
  - [\#17679](https://github.com/scipy/scipy/pull/17679): ENH: optimize.minimize: add bound constraints to COBYLA
  - [\#17680](https://github.com/scipy/scipy/pull/17680): DOC: examples for special functions related to neg. binomial...
  - [\#17682](https://github.com/scipy/scipy/pull/17682): DOC: add real example for \`stats.chisquare\`
  - [\#17684](https://github.com/scipy/scipy/pull/17684): ENH: support \`Bounds\` class in lsq\_linear
  - [\#17685](https://github.com/scipy/scipy/pull/17685): ENH: stats: Implement \_sf for the foldnorm distribution.
  - [\#17687](https://github.com/scipy/scipy/pull/17687): MAINT: optimize.toms748: correct "rtol too small" message
  - [\#17688](https://github.com/scipy/scipy/pull/17688): MAINT: optimize.curve\_fit: memoize \`f\` and \`jac\`
  - [\#17691](https://github.com/scipy/scipy/pull/17691): ENH: optimize.root\_scalar: allow newton without f', secant without...
  - [\#17692](https://github.com/scipy/scipy/pull/17692): MAINT: optimize.minimize\_scalar: enforce output shape consistency
  - [\#17693](https://github.com/scipy/scipy/pull/17693): DOC: pointbiserialr correlation formula notation fix.
  - [\#17694](https://github.com/scipy/scipy/pull/17694): ENH: stats: Implement \_sf and \_isf for halfcauchy; \_sf for foldcauchy
  - [\#17698](https://github.com/scipy/scipy/pull/17698): MAINT: implicit float conversion in rgi test
  - [\#17700](https://github.com/scipy/scipy/pull/17700): ENH: Inverse wishart entropy
  - [\#17701](https://github.com/scipy/scipy/pull/17701): DOC: stats: Fix a reference for the genexpon distribution.
  - [\#17702](https://github.com/scipy/scipy/pull/17702): DOC: stats: complete references and links for descriptive stats
  - [\#17704](https://github.com/scipy/scipy/pull/17704): MAINT: optimize.bracket: don't fail silently
  - [\#17705](https://github.com/scipy/scipy/pull/17705): DOC: optimize.minimize\_scalar and friends: correct documentation...
  - [\#17707](https://github.com/scipy/scipy/pull/17707): DOC: add acetazolamide example to \`stats.fisher\_exact\`
  - [\#17708](https://github.com/scipy/scipy/pull/17708): ENH: stats: Implement \_ppf and \_isf for genexpon.
  - [\#17709](https://github.com/scipy/scipy/pull/17709): MAINT: update copyright date
  - [\#17711](https://github.com/scipy/scipy/pull/17711): MAINT: forward port 1.10.0 relnotes
  - [\#17714](https://github.com/scipy/scipy/pull/17714): ENH: Provide public API for fast DisjointSet subset size.
  - [\#17724](https://github.com/scipy/scipy/pull/17724): DOC: spatial: Several updates:
  - [\#17729](https://github.com/scipy/scipy/pull/17729): STY: fix unicode error
  - [\#17730](https://github.com/scipy/scipy/pull/17730): MAINT: rotate CircleCI ssh key
  - [\#17732](https://github.com/scipy/scipy/pull/17732): MAINT: optimize.toms748: don't do newton after secant interpolation
  - [\#17742](https://github.com/scipy/scipy/pull/17742): ENH: override \_entropy for beta, chi and chi2 distributions
  - [\#17747](https://github.com/scipy/scipy/pull/17747): DOC: stats.jarque\_bera: add semi-realistic example
  - [\#17750](https://github.com/scipy/scipy/pull/17750): ENH: Support multinomial distributions with n=0 trials.
  - [\#17758](https://github.com/scipy/scipy/pull/17758): ENH: analytical formula for f distribution entropy
  - [\#17759](https://github.com/scipy/scipy/pull/17759): DOC: stats.skewtest: add semi-realistic example
  - [\#17762](https://github.com/scipy/scipy/pull/17762): DOC: remove space between directive name and double colon `::`
  - [\#17763](https://github.com/scipy/scipy/pull/17763): DOC: single -\> double colon for directive.
  - [\#17764](https://github.com/scipy/scipy/pull/17764): ENH: entropy for matrix normal distribution
  - [\#17765](https://github.com/scipy/scipy/pull/17765): DOC: stats: additional normality test examples
  - [\#17767](https://github.com/scipy/scipy/pull/17767): DOC: stats: reorganize hypothesis tests in main page
  - [\#17768](https://github.com/scipy/scipy/pull/17768): TST: special: fix incorrectly named tests
  - [\#17769](https://github.com/scipy/scipy/pull/17769): DOC/BUG: add missing entropy methods in docstrings
  - [\#17770](https://github.com/scipy/scipy/pull/17770): TST: stats: fixed misnamed tests
  - [\#17772](https://github.com/scipy/scipy/pull/17772): MAINT: remove unused test utility functions
  - [\#17773](https://github.com/scipy/scipy/pull/17773): DOC: stats: add realistic examples to correlation tests
  - [\#17778](https://github.com/scipy/scipy/pull/17778): DOC: stats: add realistic examples to variance tests
  - [\#17780](https://github.com/scipy/scipy/pull/17780): MAINT: optimize.minimize: fix new callback interface when parameter...
  - [\#17784](https://github.com/scipy/scipy/pull/17784): DOC: linalg: fix docstring of \`linalg.sqrtm\`
  - [\#17786](https://github.com/scipy/scipy/pull/17786): DOC: examples for ndtr, ndtri
  - [\#17791](https://github.com/scipy/scipy/pull/17791): DEP: remove maxiter kwarg in \_minimize\_tnc
  - [\#17793](https://github.com/scipy/scipy/pull/17793): MAINT: remove divide by zero in differential\_evolution
  - [\#17794](https://github.com/scipy/scipy/pull/17794): TST: Added test suite for dgamma distribution
  - [\#17812](https://github.com/scipy/scipy/pull/17812): MAINT: add (optional) pre-commit hook
  - [\#17813](https://github.com/scipy/scipy/pull/17813): MAINT: integrate.qmc\_quad: re-introduce qmc\_quad
  - [\#17816](https://github.com/scipy/scipy/pull/17816): MAINT: allow typed method in \`stats.sobol\_indices\`
  - [\#17817](https://github.com/scipy/scipy/pull/17817): MAINT: remove unused args parameter from \`qmc\_quad\`
  - [\#17818](https://github.com/scipy/scipy/pull/17818): BUG/ENH: stats: several updates for dgamma.
  - [\#17820](https://github.com/scipy/scipy/pull/17820): DOC/BUG: plot \`ndtri\` only where it is defined
  - [\#17824](https://github.com/scipy/scipy/pull/17824): ENH: analytical entropy for invgauss distribution
  - [\#17825](https://github.com/scipy/scipy/pull/17825): DOC: optimize: change term zero to root
  - [\#17829](https://github.com/scipy/scipy/pull/17829): DOC: stats: document RNG behavior when distribution is deepcopied
  - [\#17830](https://github.com/scipy/scipy/pull/17830): MAINT: stats.\_axis\_nan\_policy: raise appropriate TypeErrors
  - [\#17834](https://github.com/scipy/scipy/pull/17834): MAINT: improve accuracy of betaprime cdf in scipy.stats
  - [\#17835](https://github.com/scipy/scipy/pull/17835): DOC: integrate: document limitation of numerical integration
  - [\#17836](https://github.com/scipy/scipy/pull/17836): DOC: integrate.solve\_ivp: clarify impact of parameter \`vectorized\`
  - [\#17837](https://github.com/scipy/scipy/pull/17837): DEP: integrate.nquad: deprecate parameter \`full\_output\`
  - [\#17838](https://github.com/scipy/scipy/pull/17838): DOC: integrate.quad: behavior is not guaranteed for divergent...
  - [\#17841](https://github.com/scipy/scipy/pull/17841): DOC: linalg: expand pinv example
  - [\#17842](https://github.com/scipy/scipy/pull/17842): DOC, MAINT: Add issue template for Documentation issues
  - [\#17848](https://github.com/scipy/scipy/pull/17848): ENH: implement \_sf and \_isf for powernorm distribution
  - [\#17849](https://github.com/scipy/scipy/pull/17849): ENH: special: Add the function \_scaled\_exp1
  - [\#17852](https://github.com/scipy/scipy/pull/17852): MAINT: optimize: improve \`optimize.curve\_fit\` doc and error...
  - [\#17853](https://github.com/scipy/scipy/pull/17853): DOC: integrate.dblquad/tplquad: update result descriptions
  - [\#17857](https://github.com/scipy/scipy/pull/17857): MAINT: analytical formula for genlogistic entropy
  - [\#17865](https://github.com/scipy/scipy/pull/17865): MAINT: stats: fix recent CI and other issues
  - [\#17867](https://github.com/scipy/scipy/pull/17867): DOC: note on negative variables for linprog
  - [\#17868](https://github.com/scipy/scipy/pull/17868): ENH: add analytical formula for Nakagami distribution entropy
  - [\#17873](https://github.com/scipy/scipy/pull/17873): ENH: Added analytical formula for dgamma distribution entropy...
  - [\#17874](https://github.com/scipy/scipy/pull/17874): ENH: Added analytical formula for truncnorm entropy (\#17748)
  - [\#17876](https://github.com/scipy/scipy/pull/17876): DOC: remove hidden stats sections from sidebar/toctree
  - [\#17878](https://github.com/scipy/scipy/pull/17878): Lint everything
  - [\#17879](https://github.com/scipy/scipy/pull/17879): DOC: add docs for the main namespace
  - [\#17881](https://github.com/scipy/scipy/pull/17881): BUG: Fix handling on user-supplied filters in \`signal.decimate\`
  - [\#17882](https://github.com/scipy/scipy/pull/17882): BLD: fix Meson build warnings about multiple targets
  - [\#17883](https://github.com/scipy/scipy/pull/17883): DOC: Clarified the meaning of optional arguments in optimize.leastsq
  - [\#17886](https://github.com/scipy/scipy/pull/17886): ENH: Warn about missing boundary when NOLA condition failed in...
  - [\#17889](https://github.com/scipy/scipy/pull/17889): DOC: Cleanup development guide
  - [\#17892](https://github.com/scipy/scipy/pull/17892): MAINT: stats: Post-"lint everything" clean up in stats.
  - [\#17894](https://github.com/scipy/scipy/pull/17894): MAINT: update .gitignore with meson and linter
  - [\#17895](https://github.com/scipy/scipy/pull/17895): DOC: config info in issue template
  - [\#17897](https://github.com/scipy/scipy/pull/17897): MAINT: Update the "lint everything" SHA in .git-blame-ignore-revs
  - [\#17898](https://github.com/scipy/scipy/pull/17898): DOC: remove hidden submodules from sidebar
  - [\#17899](https://github.com/scipy/scipy/pull/17899): MAINT: use conda for linters
  - [\#17900](https://github.com/scipy/scipy/pull/17900): Re-implement pre-commit hook in Python
  - [\#17906](https://github.com/scipy/scipy/pull/17906): DOC: interpolate: add a note against using triangulation based...
  - [\#17907](https://github.com/scipy/scipy/pull/17907): DOC: stats.wilcoxon: warn about roundoff errors in x-y
  - [\#17908](https://github.com/scipy/scipy/pull/17908): ENH: powerlognormal distribution improvements
  - [\#17909](https://github.com/scipy/scipy/pull/17909): ENH: improve accuracy of betaprime ppf in scipy.stats
  - [\#17915](https://github.com/scipy/scipy/pull/17915): DOC: Add warning to butter function docstring
  - [\#17921](https://github.com/scipy/scipy/pull/17921): CI: clean conda index upon cache invalidation
  - [\#17922](https://github.com/scipy/scipy/pull/17922): DOC: corrected doc of bilinear discretization of lti
  - [\#17929](https://github.com/scipy/scipy/pull/17929): ENH: stats.nakagami.entropy: improve formulation
  - [\#17930](https://github.com/scipy/scipy/pull/17930): ENH: use asymptotic expansions for entropy of \`genlogistic\`...
  - [\#17937](https://github.com/scipy/scipy/pull/17937): DOC: Update pip + venv instructions in the contributor documentation...
  - [\#17939](https://github.com/scipy/scipy/pull/17939): DOC: ttest\_ind\_from\_stats: discuss negative stdev
  - [\#17943](https://github.com/scipy/scipy/pull/17943): ENH: early exit random-cd optimization in 1D
  - [\#17944](https://github.com/scipy/scipy/pull/17944): pre-commit should fail when fixes are made by Ruff
  - [\#17945](https://github.com/scipy/scipy/pull/17945): DOC: remove seed in HTML only
  - [\#17946](https://github.com/scipy/scipy/pull/17946): ENH: Maxwell distribution \`sf\`/\`isf\` override
  - [\#17947](https://github.com/scipy/scipy/pull/17947): TST: Update list of modules for import cycle checks
  - [\#17948](https://github.com/scipy/scipy/pull/17948): STY: fix only staged files.
  - [\#17949](https://github.com/scipy/scipy/pull/17949): ENH: stats.dirichlet\_multinomial: vectorize implementation
  - [\#17950](https://github.com/scipy/scipy/pull/17950): MAINT: bump OpenBLAS version, bump macOS image used in GHA
  - [\#17956](https://github.com/scipy/scipy/pull/17956): MAINT: optimize.dual\_annealing: fix callable jac with args
  - [\#17959](https://github.com/scipy/scipy/pull/17959): MAINT: update supported versions of Python and NumPy to follow...
  - [\#17961](https://github.com/scipy/scipy/pull/17961): ENH: optimize.linprog: pass unrecognized options to HiGHS verbatim
  - [\#17964](https://github.com/scipy/scipy/pull/17964): DEP: integrate.quad\_vec: deprecate parameter full\_output
  - [\#17967](https://github.com/scipy/scipy/pull/17967): MAINT: Fully qualify std::move invocations to fix clang -Wunqualified-std-cast-call
  - [\#17971](https://github.com/scipy/scipy/pull/17971): ENH: stats: add axis tuple and nan\_policy to \`sem\` and \`iqr\`
  - [\#17975](https://github.com/scipy/scipy/pull/17975): BUG: Update test\_lobpcg.py
  - [\#17976](https://github.com/scipy/scipy/pull/17976): DOC/MAINT: simplify release entries
  - [\#17980](https://github.com/scipy/scipy/pull/17980): FIX: CI: avoid passing Cython files to ruff
  - [\#17982](https://github.com/scipy/scipy/pull/17982): MAINT: add release entries move to blame ignore
  - [\#17987](https://github.com/scipy/scipy/pull/17987): DOC: move .rst.txt to source and cleaning around generating doc
  - [\#17989](https://github.com/scipy/scipy/pull/17989): MAINT: sparse.linalg: remove unused \_\_main\_\_ code
  - [\#17990](https://github.com/scipy/scipy/pull/17990): BLD: make musllinux wheels for nightly
  - [\#17998](https://github.com/scipy/scipy/pull/17998): ENH: optimize.RootResults: make \`RootResults\` an \`OptimizeResult\`
  - [\#18000](https://github.com/scipy/scipy/pull/18000): DOC: stats, interpolate: Fix some minor docstring issues.
  - [\#18002](https://github.com/scipy/scipy/pull/18002): ENH: override halflogistic \`sf\` and \`isf\`
  - [\#18003](https://github.com/scipy/scipy/pull/18003): ENH: improve halfnorm CDF precision
  - [\#18006](https://github.com/scipy/scipy/pull/18006): BLD: use a relative path to numpy include and library directories
  - [\#18008](https://github.com/scipy/scipy/pull/18008): MAINT: forward port 1.10.1 relnotes
  - [\#18013](https://github.com/scipy/scipy/pull/18013): MAINT: stats.vonmises.fit: maintain backward compatibility
  - [\#18015](https://github.com/scipy/scipy/pull/18015): TST: optimize.root\_scalar: refactor tests and add Chandrupatla...
  - [\#18016](https://github.com/scipy/scipy/pull/18016): Add axes argument to ndimage filters
  - [\#18018](https://github.com/scipy/scipy/pull/18018): DOC: Add an example showing how to plot Rotations to the docs
  - [\#18019](https://github.com/scipy/scipy/pull/18019): add tests for \`trimmed\_var\` and \`trimmed\_std\` in \`stats.mstats\`
  - [\#18020](https://github.com/scipy/scipy/pull/18020): TST: stats.mstats: add \`median\_cihs\`/\`sen\_seasonal\_slopes\`...
  - [\#18021](https://github.com/scipy/scipy/pull/18021): DEP: linalg: deprecate tri{,u,l}
  - [\#18022](https://github.com/scipy/scipy/pull/18022): DOC: interpolate: link to the gist with the porting guide
  - [\#18023](https://github.com/scipy/scipy/pull/18023): DOC: how to document examples using RNG and also self-contained...
  - [\#18027](https://github.com/scipy/scipy/pull/18027): DOC: fix section title typo in interpolation tutorial
  - [\#18028](https://github.com/scipy/scipy/pull/18028): DOC: fix underlying of title in extrapolate
  - [\#18029](https://github.com/scipy/scipy/pull/18029): fix error from betabinom stats using only integers for a and...
  - [\#18032](https://github.com/scipy/scipy/pull/18032): BLD: add NDEBUG flag for release builds
  - [\#18034](https://github.com/scipy/scipy/pull/18034): BLD: avoid running \`run\_command(py3, ...)\`, for better cross-compiling
  - [\#18035](https://github.com/scipy/scipy/pull/18035): ENH: stats: add ecdf function
  - [\#18036](https://github.com/scipy/scipy/pull/18036): BLD: build Windows wheel for py39 against numpy 1.22.3
  - [\#18037](https://github.com/scipy/scipy/pull/18037): DOC/MAINT: fix source button
  - [\#18040](https://github.com/scipy/scipy/pull/18040): DOC: Fix error in doc of \_minimize\_trustregion\_exact
  - [\#18043](https://github.com/scipy/scipy/pull/18043): MAINT: update GH bug template
  - [\#18045](https://github.com/scipy/scipy/pull/18045): MAINT: update codeowners.
  - [\#18047](https://github.com/scipy/scipy/pull/18047): DOC: Update scipy.spatial.distance.pdist docstring to match its...
  - [\#18049](https://github.com/scipy/scipy/pull/18049): STY: Include Python.h before any other headers.
  - [\#18050](https://github.com/scipy/scipy/pull/18050): MAINT: integrate.qmc\_quad: correct behavior of parameter \`log\`
  - [\#18052](https://github.com/scipy/scipy/pull/18052): BLD: use anaconda-client to upload wheels
  - [\#18053](https://github.com/scipy/scipy/pull/18053): DOC fix expectile docstring - empirical CDF
  - [\#18058](https://github.com/scipy/scipy/pull/18058): BLD: use meson-native dependency lookup for pybind11
  - [\#18059](https://github.com/scipy/scipy/pull/18059): Johnson distributions \`sf\` and \`isf\` override
  - [\#18060](https://github.com/scipy/scipy/pull/18060): MAINT: remove pavement
  - [\#18061](https://github.com/scipy/scipy/pull/18061): ENH: implement array @ LinearOperator
  - [\#18063](https://github.com/scipy/scipy/pull/18063): DOC: improve documentation for [distance\_transform](){cdt,edt}
  - [\#18064](https://github.com/scipy/scipy/pull/18064): DOC: add examples in for xlogy
  - [\#18066](https://github.com/scipy/scipy/pull/18066): TST: stats.nct: add test for crash with large nc
  - [\#18068](https://github.com/scipy/scipy/pull/18068): TST: stats.ksone: loosen variance test tolerance
  - [\#18070](https://github.com/scipy/scipy/pull/18070): Docstring: note on bivariate spline axis ordering
  - [\#18072](https://github.com/scipy/scipy/pull/18072): DOC: Modifying t parameter documentation issue in splprep \#17893
  - [\#18073](https://github.com/scipy/scipy/pull/18073): MAINT: avoid non-recommended numpy functions and constants
  - [\#18075](https://github.com/scipy/scipy/pull/18075): MAINT: update pooch deps
  - [\#18076](https://github.com/scipy/scipy/pull/18076): DOC: fix docstring typo for \`kurtosis\` and whitespace in \`\_continuous\_distns\`
  - [\#18077](https://github.com/scipy/scipy/pull/18077): BUG: Check for initial state finiteness
  - [\#18081](https://github.com/scipy/scipy/pull/18081): ENH: allow single observation for equal variance in \`stats.ttest\_ind\`
  - [\#18082](https://github.com/scipy/scipy/pull/18082): DOC: add examples for xlog1py
  - [\#18083](https://github.com/scipy/scipy/pull/18083): STY: fix mypy assignment.
  - [\#18084](https://github.com/scipy/scipy/pull/18084): BUG: calculate VDC permutations at init of Halton
  - [\#18092](https://github.com/scipy/scipy/pull/18092): ENH: stats.ecdf: support right-censored data
  - [\#18094](https://github.com/scipy/scipy/pull/18094): ENH: improve entropy calculation of chi distribution using asymptotic...
  - [\#18095](https://github.com/scipy/scipy/pull/18095): ENH: asymptotic expansion for gamma distribution entropy
  - [\#18096](https://github.com/scipy/scipy/pull/18096): MAINT: stats.johnsonsu: override \_stats
  - [\#18098](https://github.com/scipy/scipy/pull/18098): ENH: increase available range of Gompertz entropy using scaled\_exp1
  - [\#18101](https://github.com/scipy/scipy/pull/18101): DOC: adding references to the UnivariateSpline docstring \#17828
  - [\#18102](https://github.com/scipy/scipy/pull/18102): ENH: stats.goodness\_of\_fit: add Filliben's test
  - [\#18104](https://github.com/scipy/scipy/pull/18104): BUG: enable matlab nested arrs
  - [\#18107](https://github.com/scipy/scipy/pull/18107): ENH: add Dunnett's test
  - [\#18112](https://github.com/scipy/scipy/pull/18112): FIX: reset semantic in \`QMCEngine.reset\`
  - [\#18120](https://github.com/scipy/scipy/pull/18120): Correct the comments about \` fmin\_powell\` in \`scipy/optimize\`
  - [\#18122](https://github.com/scipy/scipy/pull/18122): ENH: Added asymptotic expansion for invgamma entropy (\#18093)
  - [\#18127](https://github.com/scipy/scipy/pull/18127): MAINT: cleanup inconsistencies in \_continous\_dists
  - [\#18128](https://github.com/scipy/scipy/pull/18128): MAINT: add test against generic fit method for vonmises distribution
  - [\#18129](https://github.com/scipy/scipy/pull/18129): TST: stats.rv\_continuous.fit: use \`nnlf\` instead of \`\_reduce\_func\`...
  - [\#18130](https://github.com/scipy/scipy/pull/18130): Some doc updates and small code tweaks.
  - [\#18131](https://github.com/scipy/scipy/pull/18131): ENH: Added asymptotic expansion for gengamma entropy
  - [\#18134](https://github.com/scipy/scipy/pull/18134): ENH: stats: Improve \_cdf and implement \_sf for genhyperbolic
  - [\#18135](https://github.com/scipy/scipy/pull/18135): Added asymptotic expansion for t entropy (\#18093)
  - [\#18136](https://github.com/scipy/scipy/pull/18136): ENH: stats.ecdf: add \`confidence\_interval\` methods
  - [\#18137](https://github.com/scipy/scipy/pull/18137): Bugfix for somersd where an integer overflow could occur
  - [\#18138](https://github.com/scipy/scipy/pull/18138): ENH: improve precision of genlogistic methods
  - [\#18144](https://github.com/scipy/scipy/pull/18144): DOC: Add doc examples for friedmanchisquare
  - [\#18145](https://github.com/scipy/scipy/pull/18145): BLD: emit a warning when building from source on 32-bit Windows
  - [\#18149](https://github.com/scipy/scipy/pull/18149): TST: fix issue with inaccurate \`cython\_blas\` tests
  - [\#18150](https://github.com/scipy/scipy/pull/18150): ENH: add CI and str to Dunnett's test
  - [\#18152](https://github.com/scipy/scipy/pull/18152): ENH: stats.moment: enable non-central moment calculation
  - [\#18157](https://github.com/scipy/scipy/pull/18157): CI: fix pre-release job that is failing on Cython 3.0b1
  - [\#18158](https://github.com/scipy/scipy/pull/18158): DOC:stats: Fix levy and levy\_l descriptions
  - [\#18160](https://github.com/scipy/scipy/pull/18160): BUG: Wrong status returned by \_check\_result. See \#18106. optimize
  - [\#18162](https://github.com/scipy/scipy/pull/18162): ENH: Dweibull entropy
  - [\#18168](https://github.com/scipy/scipy/pull/18168): TST: spatial: skip failing test to make CI green again
  - [\#18172](https://github.com/scipy/scipy/pull/18172): MAINT: optimize.root\_scalar: return gracefully when callable...
  - [\#18173](https://github.com/scipy/scipy/pull/18173): DOC: update links for ARPACK to point to ARPACK-NG
  - [\#18174](https://github.com/scipy/scipy/pull/18174): DOC: cite pip issue about multiple \`--config-settings\`
  - [\#18178](https://github.com/scipy/scipy/pull/18178): ENH: Added \`\_sf\` method for anglit distribution (\#17832)
  - [\#18181](https://github.com/scipy/scipy/pull/18181): DOC: wheel build infra updates
  - [\#18187](https://github.com/scipy/scipy/pull/18187): MAINT: stats.ecdf: store number at risk just before events
  - [\#18188](https://github.com/scipy/scipy/pull/18188): BUG: interpolate: add x-y length validation for \`make\_smoothing\_spline\`.
  - [\#18189](https://github.com/scipy/scipy/pull/18189): DOC: Fix for side bar rendering on top of text issue
  - [\#18190](https://github.com/scipy/scipy/pull/18190): ENH: fix vonmises fit for bad guess of location parameter
  - [\#18193](https://github.com/scipy/scipy/pull/18193): MAINT: stats.kendalltau: avoid overflow
  - [\#18195](https://github.com/scipy/scipy/pull/18195): MAINT: interpolate: remove duplicated FITPACK interface \_fitpack.\_[spl]().
  - [\#18196](https://github.com/scipy/scipy/pull/18196): ENH: add Log rank for survival analysis
  - [\#18199](https://github.com/scipy/scipy/pull/18199): BUG: throw ValueError for mismatched w dimensions and test for...
  - [\#18200](https://github.com/scipy/scipy/pull/18200): TST: stats: Move genexpon from xslow to slow fit test sets.
  - [\#18204](https://github.com/scipy/scipy/pull/18204): MAINT/TST: fix \`Slerp\` typing and better iv in \`Rotation\`
  - [\#18207](https://github.com/scipy/scipy/pull/18207): ENH: improve precision of folded normal distribution cdf
  - [\#18209](https://github.com/scipy/scipy/pull/18209): ENH: improve integrate.simpson for even number of points
  - [\#18210](https://github.com/scipy/scipy/pull/18210): ENH: stats.ttest\_ind: add degrees of freedom and confidence interval
  - [\#18212](https://github.com/scipy/scipy/pull/18212): ENH: stats.ecdf: add \`evaluate\` and \`plot\` methods; restructure...
  - [\#18215](https://github.com/scipy/scipy/pull/18215): DOC: stats: describe attributes of \`DunnettResult\`
  - [\#18216](https://github.com/scipy/scipy/pull/18216): MAINT: replace use of make\_dataclass with explicit dataclasses
  - [\#18217](https://github.com/scipy/scipy/pull/18217): MAINT: stats: consistently return NumPy numbers
  - [\#18221](https://github.com/scipy/scipy/pull/18221): DOC: add guidance on how to make a dataclass for result objects
  - [\#18222](https://github.com/scipy/scipy/pull/18222): MAINT: stats.TTestResult: fix NaN bug in ttest confidence intervals
  - [\#18225](https://github.com/scipy/scipy/pull/18225): ENH:MAINT:linalg det in Cython and with nDarray support
  - [\#18227](https://github.com/scipy/scipy/pull/18227): ENH: stats: resampling methods configuration classes and example...
  - [\#18228](https://github.com/scipy/scipy/pull/18228): ENH: stats.geometric.entropy: implement analytical formula
  - [\#18229](https://github.com/scipy/scipy/pull/18229): ENH: stats.bootstrap: add one-sided confidence intervals
  - [\#18230](https://github.com/scipy/scipy/pull/18230): BUG: nan segfault in KDTree, reject non-finite input
  - [\#18231](https://github.com/scipy/scipy/pull/18231): ENH: stats.monte\_carlo\_test: add support for multi-sample statistics
  - [\#18232](https://github.com/scipy/scipy/pull/18232): ENH: override dweibull distribution survival and inverse survival...
  - [\#18237](https://github.com/scipy/scipy/pull/18237): MAINT: update typing of Rotation
  - [\#18238](https://github.com/scipy/scipy/pull/18238): MAINT:optimize: shgo assorted fixes
  - [\#18240](https://github.com/scipy/scipy/pull/18240): fix typo
  - [\#18241](https://github.com/scipy/scipy/pull/18241): MAINT: remove Gitpod in favour of GitHub CodeSpaces
  - [\#18242](https://github.com/scipy/scipy/pull/18242): MAINT: Allow scipy to be compiled in cython3
  - [\#18243](https://github.com/scipy/scipy/pull/18243): TST: stats.dunnett: fix seed in test\_shapes
  - [\#18245](https://github.com/scipy/scipy/pull/18245): DOC: remove content related to \`setup.py\` usage from the docs
  - [\#18246](https://github.com/scipy/scipy/pull/18246): ci: touch up wheel build action
  - [\#18247](https://github.com/scipy/scipy/pull/18247): BLD: Add const to Cython signatures for BLAS/LAPACK
  - [\#18248](https://github.com/scipy/scipy/pull/18248): BLD: implement version check for minimum Cython version
  - [\#18251](https://github.com/scipy/scipy/pull/18251): DOC: orthogonal\_procrustes fix date of reference paper and DOI
  - [\#18257](https://github.com/scipy/scipy/pull/18257): BLD: fix missing build dependency on cython signature .txt files
  - [\#18258](https://github.com/scipy/scipy/pull/18258): DOC: fix link in release notes v1.7
  - [\#18261](https://github.com/scipy/scipy/pull/18261): Add axes support to uniform\_filter, minimum\_filter, maximum\_filter
  - [\#18263](https://github.com/scipy/scipy/pull/18263): BUG: some tweaks to PROPACK f2py wrapper and build flags
  - [\#18264](https://github.com/scipy/scipy/pull/18264): MAINT: remove \`from numpy.math cimport\` usages, update \`npy\_blas.h\`
  - [\#18266](https://github.com/scipy/scipy/pull/18266): MAINT: Explicitly mark \`cdef\` functions not raising exception...
  - [\#18269](https://github.com/scipy/scipy/pull/18269): ENH: stats: Implement \_sf and \_isf for exponweib.
  - [\#18270](https://github.com/scipy/scipy/pull/18270): CI: test meson-python from its main branch in one CI job
  - [\#18275](https://github.com/scipy/scipy/pull/18275): TST: stats: infrastructure for generation of distribution function...
  - [\#18276](https://github.com/scipy/scipy/pull/18276): MAINT: stats.betaprime: avoid spurious warnings in \`fit\`, \`stats\`
  - [\#18280](https://github.com/scipy/scipy/pull/18280): DOC: spatial.distance: update formula for {s,sq}euclidean
  - [\#18281](https://github.com/scipy/scipy/pull/18281): BLD: Enable incompatible pointer types warnings
  - [\#18284](https://github.com/scipy/scipy/pull/18284): DOC: improved gmres doc on preconditioning (scipy.sparse.linalg)
  - [\#18285](https://github.com/scipy/scipy/pull/18285): MAINT: Remove codecov
  - [\#18287](https://github.com/scipy/scipy/pull/18287): DOC: \`distance\_transform\_bf\` example
  - [\#18288](https://github.com/scipy/scipy/pull/18288): TST: stats.ortho\_group: improve determinant distribution test
  - [\#18289](https://github.com/scipy/scipy/pull/18289): MAINT: mmread allow leading whitespace
  - [\#18290](https://github.com/scipy/scipy/pull/18290): DEP: stats.mode: raise with non-numeric input
  - [\#18291](https://github.com/scipy/scipy/pull/18291): TST: stats.\_axis\_nan\_policy: add test that decorated function...
  - [\#18292](https://github.com/scipy/scipy/pull/18292): CI: add CircleCI API token to fix html preview link
  - [\#18293](https://github.com/scipy/scipy/pull/18293): BUG: fix for incompatible pointer warning from stats.\_rcond \#18282
  - [\#18294](https://github.com/scipy/scipy/pull/18294): CI: remove \`setup.py\` based jobs from GitHub Actions and run...
  - [\#18297](https://github.com/scipy/scipy/pull/18297): MAINT: linalg.solve\_discrete\_are: fix typo in error message
  - [\#18299](https://github.com/scipy/scipy/pull/18299): DOC: interpolate: add see also references for data on regular...
  - [\#18301](https://github.com/scipy/scipy/pull/18301): CI: remove \`runtests.py\` and related scripts/files
  - [\#18303](https://github.com/scipy/scipy/pull/18303): DOC: css adjustment in dark mode and hidden toctree in dev section
  - [\#18304](https://github.com/scipy/scipy/pull/18304): MAINT: update boost\_math
  - [\#18305](https://github.com/scipy/scipy/pull/18305): ENH: ndimage: add axes argument to rank\_filter, percentile\_filter,...
  - [\#18307](https://github.com/scipy/scipy/pull/18307): DOC: add cdf under methods for multivariate t distribution
  - [\#18311](https://github.com/scipy/scipy/pull/18311): CI: move lint job from Azure to GHA
  - [\#18312](https://github.com/scipy/scipy/pull/18312): CI: move gcc-8 test to GHA
  - [\#18313](https://github.com/scipy/scipy/pull/18313): CI: remove asv from AzureCI
  - [\#18314](https://github.com/scipy/scipy/pull/18314): CI: remove scikit-umfpack/sparse from Azure testing
  - [\#18315](https://github.com/scipy/scipy/pull/18315): CI: remove coverage jobs
  - [\#18318](https://github.com/scipy/scipy/pull/18318): MAINT: Mark function pointer ctypedefs as noexcept
  - [\#18320](https://github.com/scipy/scipy/pull/18320): CI: migrate ref guide-check to CircleCI
  - [\#18321](https://github.com/scipy/scipy/pull/18321): Revert "ENH: stats.anderson\_ksamp: add permutation version of...
  - [\#18323](https://github.com/scipy/scipy/pull/18323): ENH: increase available range of vonmises \`fit\`
  - [\#18324](https://github.com/scipy/scipy/pull/18324): ENH: add \`entropy\` method for multivariate t distribution
  - [\#18325](https://github.com/scipy/scipy/pull/18325): CI: move Azure cp39/full/win job to GHA
  - [\#18327](https://github.com/scipy/scipy/pull/18327): MAINT: optimize.milp: improve behavior for unexpected sparse...
  - [\#18328](https://github.com/scipy/scipy/pull/18328): MAINT: stats.shapiro: override p-value when len(x)==3
  - [\#18330](https://github.com/scipy/scipy/pull/18330): BLD: avoid build warnings on Windows, bump pybind11 and meson...
  - [\#18332](https://github.com/scipy/scipy/pull/18332): TST: fix minor tolerance issue for \`stats.multivariate\_t\` test
  - [\#18333](https://github.com/scipy/scipy/pull/18333): CI: windows cp311 use-pythran=false full, sdist GHA
  - [\#18337](https://github.com/scipy/scipy/pull/18337): MAINT: update boost\_math
  - [\#18339](https://github.com/scipy/scipy/pull/18339): TST: optimize: fix test\_milp\_timeout
  - [\#18340](https://github.com/scipy/scipy/pull/18340): DOC: interpolate: declare Rbf legacy
  - [\#18341](https://github.com/scipy/scipy/pull/18341): DEP: signal: deprecate using medfilt and order\_filter with float128...
  - [\#18342](https://github.com/scipy/scipy/pull/18342): TST: stats.mstats.median\_cihs: strengthen test
  - [\#18343](https://github.com/scipy/scipy/pull/18343): MAINT: use math.prod (python \>= 3.8)
  - [\#18344](https://github.com/scipy/scipy/pull/18344): MAINT: Set cython compiler directive cpow to True
  - [\#18345](https://github.com/scipy/scipy/pull/18345): DEV: work around pathlib bug affecting dev.py for Python 3.9...
  - [\#18349](https://github.com/scipy/scipy/pull/18349): MAINT: stats.dgamma.entropy: avoid deprecated NumPy usage and...
  - [\#18350](https://github.com/scipy/scipy/pull/18350): TST: use np not math for functions to avoid conversion of ndim\>0...
  - [\#18351](https://github.com/scipy/scipy/pull/18351): CI: remove Azure sdist job
  - [\#18352](https://github.com/scipy/scipy/pull/18352): MAINT: stats: more avoidance of deprecated NumPy usage
  - [\#18353](https://github.com/scipy/scipy/pull/18353): Migrate ruff.toml configuration to lint.toml
  - [\#18355](https://github.com/scipy/scipy/pull/18355): ENH: allow dividing LinearOperator by number
  - [\#18357](https://github.com/scipy/scipy/pull/18357): MAINT: clearer error in \`LinearOperator \* spmatrix\`
  - [\#18358](https://github.com/scipy/scipy/pull/18358): ENH:MAINT:linalg:lu Cythonized and ndarray support added
  - [\#18359](https://github.com/scipy/scipy/pull/18359): MAINT: Fix broken link in setup.py
  - [\#18360](https://github.com/scipy/scipy/pull/18360): DOC: improve neg. binomial function examples in \`special\`
  - [\#18362](https://github.com/scipy/scipy/pull/18362): MAINT: Add noexcept function declaration to \`\_cythonized\_array\_utils.pxd\`
  - [\#18369](https://github.com/scipy/scipy/pull/18369): CI: bdist\_wheel windows job Azure --\> GHA
  - [\#18370](https://github.com/scipy/scipy/pull/18370): DOC: stats.chisquare: attribute is pvalue, not p
  - [\#18374](https://github.com/scipy/scipy/pull/18374): CI: pin to rtools40
  - [\#18378](https://github.com/scipy/scipy/pull/18378): DOC: add output\_type to signature of cKDTree.query\_pairs
  - [\#18379](https://github.com/scipy/scipy/pull/18379): TST/MAINT: remove vonmises fit correctnes test for extreme kappa...
  - [\#18380](https://github.com/scipy/scipy/pull/18380): MAINT: Limit fittable data for von mises fisher distribution...
  - [\#18382](https://github.com/scipy/scipy/pull/18382): TST: stats.cosine: modify test to silence failure
  - [\#18383](https://github.com/scipy/scipy/pull/18383): MAINT: add smoke testing of signal.detrend
  - [\#18384](https://github.com/scipy/scipy/pull/18384): DOC: improve vonmises documentation
  - [\#18387](https://github.com/scipy/scipy/pull/18387): DOC: interpolate: deduplicate docstrings in \_fitpack\_py and \_fitpack\_impl
  - [\#18392](https://github.com/scipy/scipy/pull/18392): BUG: optimize.differential\_evolution: fix division by zero error
  - [\#18399](https://github.com/scipy/scipy/pull/18399): DOC: Replace "HACKING" with "hacking"
  - [\#18400](https://github.com/scipy/scipy/pull/18400): DOC: improve description of the method argument in mannwhitneyu
  - [\#18402](https://github.com/scipy/scipy/pull/18402): TST: fix failing signal.windows tests
  - [\#18405](https://github.com/scipy/scipy/pull/18405): Revert "BLD: Add const to Cython signatures for BLAS/LAPACK (\#18247)"
  - [\#18410](https://github.com/scipy/scipy/pull/18410): TST: fix test failures in linprog unboundedness test
  - [\#18411](https://github.com/scipy/scipy/pull/18411): BLD: an Intel Fortran fix and MinGW-related cleanups
  - [\#18412](https://github.com/scipy/scipy/pull/18412): MAINT: signal: simplify shape manipulations in signal.detrend
  - [\#18413](https://github.com/scipy/scipy/pull/18413): MAINT: Harmonized documentation for Interpolator classes
  - [\#18414](https://github.com/scipy/scipy/pull/18414): CI: move last Azure job to GHA
  - [\#18418](https://github.com/scipy/scipy/pull/18418): Fix warning when \`nogil\` is placed before \`except\`
  - [\#18419](https://github.com/scipy/scipy/pull/18419): MAINT: interpolate: remove unused codes in \`\_fitpackmodule.c\`.
  - [\#18421](https://github.com/scipy/scipy/pull/18421): BLD: more PROPACK fixes, removing timer code
  - [\#18422](https://github.com/scipy/scipy/pull/18422): MAINT: stats: genexpon is no longer too slow for test\_rvs\_broadcast.
  - [\#18426](https://github.com/scipy/scipy/pull/18426): BLD: fix two \`-Duse-g77-abi\` regressions and a PROPACK bug
  - [\#18427](https://github.com/scipy/scipy/pull/18427): ENH: prevent unnecessary computation in \`scipy.stats.rankdata\`
  - [\#18429](https://github.com/scipy/scipy/pull/18429): DOC: rewrite all build docs and restructure build/contributor...
  - [\#18430](https://github.com/scipy/scipy/pull/18430): MAINT: stats.mode: improve \`nan\_policy\` behavior
  - [\#18433](https://github.com/scipy/scipy/pull/18433): ENH: improve t distribution logpdf and pdf for large degrees...
  - [\#18438](https://github.com/scipy/scipy/pull/18438): BLD: DOC: fix Sphinx doc build caching behavior for \`.dev\`...
  - [\#18439](https://github.com/scipy/scipy/pull/18439): BLD: detect \`xsimd\` if it's installed and add to pythran dependency
  - [\#18441](https://github.com/scipy/scipy/pull/18441): ENH:stats: add sf method for betaprime
  - [\#18442](https://github.com/scipy/scipy/pull/18442): TST: fix precision of several linalg/sparse.linalg tests
  - [\#18444](https://github.com/scipy/scipy/pull/18444): DOC: clarify Sobel transform
  - [\#18446](https://github.com/scipy/scipy/pull/18446): MAINT: fix Deb03 GO benchmark
  - [\#18447](https://github.com/scipy/scipy/pull/18447): DOC: remove references to Azure
  - [\#18449](https://github.com/scipy/scipy/pull/18449): ENH: increase truncated exponential distribution sf/isf precision
  - [\#18451](https://github.com/scipy/scipy/pull/18451): DEV: use number of physical cores in \`dev.py build\` by default
  - [\#18454](https://github.com/scipy/scipy/pull/18454): DOC: add \`distance\_transform\_cdt\` example
  - [\#18455](https://github.com/scipy/scipy/pull/18455): MAINT: simplifiy detrend
  - [\#18458](https://github.com/scipy/scipy/pull/18458): DOC: odr: clarify \`cov\_beta\` is not scaled by the residual...
  - [\#18459](https://github.com/scipy/scipy/pull/18459): DOC: optimize: add use of functools.partial to tutorial
  - [\#18460](https://github.com/scipy/scipy/pull/18460): DOC: examples for \`ndimage.generic\_filter\`
  - [\#18461](https://github.com/scipy/scipy/pull/18461): TST: stats: ReferenceDistribution: use complementary methods...
  - [\#18462](https://github.com/scipy/scipy/pull/18462): MAINT: Clean up scipy/sparse/linalg/\_isolve/tests/test\_iterative.py
  - [\#18463](https://github.com/scipy/scipy/pull/18463): MAINT: parametrize scipy/sparse/linalg/\_isolve/tests/test\_iterative.py
  - [\#18466](https://github.com/scipy/scipy/pull/18466): DOC: fix issues in \`svds\` docstring examples that were failing...
  - [\#18468](https://github.com/scipy/scipy/pull/18468): BLD: enforce utf-8 in tools/cythonize.py, and some cleanups
  - [\#18472](https://github.com/scipy/scipy/pull/18472): MAINT: remove lsim2/impulse2/step2 docstring examples
  - [\#18475](https://github.com/scipy/scipy/pull/18475): DOC: remove warnings in doc build
  - [\#18476](https://github.com/scipy/scipy/pull/18476): TST: stats/optimize: filter warnings in tests
  - [\#18482](https://github.com/scipy/scipy/pull/18482): MAINT: ensure Nelder-Mead respects floating point type
  - [\#18486](https://github.com/scipy/scipy/pull/18486): DOC: remove already-resolved deprecation warning filter
  - [\#18489](https://github.com/scipy/scipy/pull/18489): DEP: signal: deprecate importing window functions from signal...
  - [\#18493](https://github.com/scipy/scipy/pull/18493): BUG: stats: Fix the variable that is checked to skip a test.
  - [\#18500](https://github.com/scipy/scipy/pull/18500): MAINT: tweak code comment for list of private-but-present modules
  - [\#18501](https://github.com/scipy/scipy/pull/18501): TST: interpolate: add a regression test for bisplev integer overflow
  - [\#18502](https://github.com/scipy/scipy/pull/18502): BUG: guard against non-finite kd-tree queries
  - [\#18503](https://github.com/scipy/scipy/pull/18503): Fix PPoly readonly issue for c parameter
  - [\#18504](https://github.com/scipy/scipy/pull/18504): MAINT: upload nighlighties to new location
  - [\#18505](https://github.com/scipy/scipy/pull/18505): MAINT: sparse: Generalize isshape to (optionally) handle non-2d...
  - [\#18507](https://github.com/scipy/scipy/pull/18507): Clean up sparse array API
  - [\#18508](https://github.com/scipy/scipy/pull/18508): ENH: Ensure that the result of divide(sparse, dense) is sparse
  - [\#18509](https://github.com/scipy/scipy/pull/18509): Remove indices downcasting for sparse arrays
  - [\#18510](https://github.com/scipy/scipy/pull/18510): TST: Add regression tests for sparse creation functions.
  - [\#18513](https://github.com/scipy/scipy/pull/18513): MAINT: sparse: cosmetic updates + typing for sputils
  - [\#18516](https://github.com/scipy/scipy/pull/18516): DOC: add user guide page introing new sparse arrays
  - [\#18522](https://github.com/scipy/scipy/pull/18522): Pin prerelease pipeline with Cython\>=3.0.0b3
  - [\#18523](https://github.com/scipy/scipy/pull/18523): TST: piecemeal updates to \`test\_base.py\` for sparray conversion
  - [\#18526](https://github.com/scipy/scipy/pull/18526): DOC: Fix broken reference to count\_nonzero in See Also.
  - [\#18527](https://github.com/scipy/scipy/pull/18527): try stable sort in mst tree ordering
  - [\#18528](https://github.com/scipy/scipy/pull/18528): ENH: Update isspmatrix behavior
  - [\#18531](https://github.com/scipy/scipy/pull/18531): Class names to enable isinstance
  - [\#18532](https://github.com/scipy/scipy/pull/18532): Fix format property in \_csr.py
  - [\#18536](https://github.com/scipy/scipy/pull/18536): Add deprecation notices to sparse array docs
  - [\#18538](https://github.com/scipy/scipy/pull/18538): ENH: sparse: Add \_array version of \`diags\` creation functions.
  - [\#18539](https://github.com/scipy/scipy/pull/18539): DOC: sparse: Document sparse canonical formats
  - [\#18540](https://github.com/scipy/scipy/pull/18540): MAINT: sparse: Deprecate multi-Ellipsis indexing
  - [\#18542](https://github.com/scipy/scipy/pull/18542): ENH: sparse: add nanmin/nanmax (followup on gh-8902)
  - [\#18543](https://github.com/scipy/scipy/pull/18543): MAINT: optimize.root\_scalar: ensure that root is a scalar
  - [\#18545](https://github.com/scipy/scipy/pull/18545): TST: speed up \`test\_import\_cycles\`
  - [\#18549](https://github.com/scipy/scipy/pull/18549): TST: optimize: filter RuntimeWarning that does not indicate test...
  - [\#18550](https://github.com/scipy/scipy/pull/18550): DOC: optimize.OptimizeResult: note that not all listed attributes...
  - [\#18551](https://github.com/scipy/scipy/pull/18551): Replace sparse \_\_getattr\_\_ with properties
  - [\#18553](https://github.com/scipy/scipy/pull/18553): BENCH: sparse: Add a benchmark for sparse matrix power
  - [\#18554](https://github.com/scipy/scipy/pull/18554): BUG: sparse: Fix DIA.tocoo canonical format setting
  - [\#18556](https://github.com/scipy/scipy/pull/18556): MAINT: io: replace isspmatrix with issparse in mmio module
  - [\#18560](https://github.com/scipy/scipy/pull/18560): MAINT: integrate: revert\`full\_output\` deprecation / result...
  - [\#18562](https://github.com/scipy/scipy/pull/18562): fix doc strings for csr\_array and friends
  - [\#18563](https://github.com/scipy/scipy/pull/18563): DOC: SciPy 1.11.0 release notes
  - [\#18591](https://github.com/scipy/scipy/pull/18591): MAINT: version bounds for 1.11.0rc1
  - [\#18596](https://github.com/scipy/scipy/pull/18596): DOC: Fix sidebar for API reference pages
  - [\#18598](https://github.com/scipy/scipy/pull/18598): CI: fix wheel upload to anaconda \[wheel build\]
  - [\#18599](https://github.com/scipy/scipy/pull/18599): Revert "ENH: sparse: Add \_array version of \`diags\` creation...
  - [\#18608](https://github.com/scipy/scipy/pull/18608): Fix typo of module name in deprecation warning
  - [\#18629](https://github.com/scipy/scipy/pull/18629): Mark \`void\` functions as \`noexcept\` in \_rotation.pyx
  - [\#18630](https://github.com/scipy/scipy/pull/18630): MAINT: stats: remove long double support for all boost ufuncs
  - [\#18636](https://github.com/scipy/scipy/pull/18636): MAINT: stats.truncnorm/stats.betaprime: fix \_munp for higher...
  - [\#18657](https://github.com/scipy/scipy/pull/18657): MAINT: fix 'no such option' error in build\_scipy CI
  - [\#18658](https://github.com/scipy/scipy/pull/18658): TST: fix two test failures that showed up on conda-forge
  - [\#18659](https://github.com/scipy/scipy/pull/18659): DOC: \`scipy.\_sensitivity\_analysis\`: correct statement about...
  - [\#18671](https://github.com/scipy/scipy/pull/18671): MAINT: backports for 1.11.0rc2
  - [\#18672](https://github.com/scipy/scipy/pull/18672): BUG: small shim for release process
  - [\#18676](https://github.com/scipy/scipy/pull/18676): BUG: signal: fix detrend with array-like bp
  - [\#18697](https://github.com/scipy/scipy/pull/18697): MAINT: NumPy 1.25.0 shims for arm64
  - [\#18698](https://github.com/scipy/scipy/pull/18698): DEP: interpolate: delay interp2d deprecation and update link
  - [\#18724](https://github.com/scipy/scipy/pull/18724): MAINT, REL: prepare for SciPy 1.11.0 "final"
  - [\#18737](https://github.com/scipy/scipy/pull/18737): TST: flaky TestSOSFreqz::test\_fs\_param
  - [\#18738](https://github.com/scipy/scipy/pull/18738): TST: flaky \`test\_complex\_iir\_dlti\`

---

1.11.1-notes.md

---

# SciPy 1.11.1 Release Notes

<div class="contents">

</div>

SciPy 1.11.1 is a bug-fix release with no new features compared to 1.11.0. In particular, a licensing issue discovered after the release of 1.11.0 has been addressed.

## Authors

  - Name (commits)
  - h-vetinari (1)
  - Robert Kern (1)
  - Ilhan Polat (4)
  - Tyler Reddy (8)

A total of 4 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.11.1

  - [\#18739](https://github.com/scipy/scipy/issues/18739): BUG: run method of scipy.odr.ODR class fails when delta0 parameter...
  - [\#18751](https://github.com/scipy/scipy/issues/18751): BUG: segfault in \`scipy.linalg.lu\` on x86\_64 windows and macos...
  - [\#18753](https://github.com/scipy/scipy/issues/18753): BUG: factorial return type inconsistent for 0-dim arrays
  - [\#18759](https://github.com/scipy/scipy/issues/18759): determinant of a 1x1 matrix returns an array, not a scalar
  - [\#18765](https://github.com/scipy/scipy/issues/18765): Licensing concern

### Pull requests for 1.11.1

  - [\#18741](https://github.com/scipy/scipy/pull/18741): BUG: Fix work array construction for various weight shapes.
  - [\#18747](https://github.com/scipy/scipy/pull/18747): REL, MAINT: prep for 1.11.1
  - [\#18754](https://github.com/scipy/scipy/pull/18754): BUG: fix handling for \`factorial(..., exact=False)\` for 0-dim...
  - [\#18762](https://github.com/scipy/scipy/pull/18762): FIX:linalg.lu:Guard against permute\_l out of bound behavior
  - [\#18763](https://github.com/scipy/scipy/pull/18763): MAINT:linalg.det:Return scalars for singleton inputs
  - [\#18778](https://github.com/scipy/scipy/pull/18778): MAINT: fix unuran licensing

---

1.11.2-notes.md

---

# SciPy 1.11.2 Release Notes

<div class="contents">

</div>

SciPy 1.11.2 is a bug-fix release with no new features compared to 1.11.1. Python 3.12 and musllinux wheels are provided with this release.

## Authors

  - Name (commits)
  - Evgeni Burovski (2)
  - CJ Carey (3)
  - Dieter Werthmüller (1)
  - elbarso (1) +
  - Ralf Gommers (2)
  - Matt Haberland (1)
  - jokasimr (1) +
  - Thilo Leitzbach (1) +
  - LemonBoy (1) +
  - Ellie Litwack (2) +
  - Sturla Molden (1)
  - Andrew Nelson (5)
  - Tyler Reddy (39)
  - Daniel Schmitz (6)
  - Dan Schult (2)
  - Albert Steppi (1)
  - Matus Valo (1)
  - Stefan van der Walt (1)

A total of 18 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.11.2

  - [\#4690](https://github.com/scipy/scipy/issues/4690): special.jn\_zeros(281, 6) hangs
  - [\#12247](https://github.com/scipy/scipy/issues/12247): Complex matrix square root of positive semi-definite matrix
  - [\#18398](https://github.com/scipy/scipy/issues/18398): BUG: \`loadmat\` fails to load matlab structures with anonymous...
  - [\#18603](https://github.com/scipy/scipy/issues/18603): BUG: Floating point CSC with int64 indices doesn't work with...
  - [\#18730](https://github.com/scipy/scipy/issues/18730): BUG: \`scipy.optimize.minimize\` fails when \`dtype=float32\`...
  - [\#18788](https://github.com/scipy/scipy/issues/18788): DOC: Broken link to installation instructions in README.rst
  - [\#18792](https://github.com/scipy/scipy/issues/18792): BUG: Build failure with Cython 3.0.0b3 if scipy is already installed
  - [\#18793](https://github.com/scipy/scipy/issues/18793): BUG: optimize.least\_squares with method='trf' yields wrong result...
  - [\#18800](https://github.com/scipy/scipy/issues/18800): BUG: cKDtree.query no longer accepts DataFrame as input
  - [\#19002](https://github.com/scipy/scipy/issues/19002): Spalde error with scipy 1.10: 0-th dimension must be fixed
  - [\#19022](https://github.com/scipy/scipy/issues/19022): BUG: \<Compilation of scipy 1.11 falls with python3.12\>
  - [\#19026](https://github.com/scipy/scipy/issues/19026): BUG: Compilation of scipy 1.10.1 and 1.11.1 fails with Python...

### Pull requests for 1.11.2

  - [\#17918](https://github.com/scipy/scipy/pull/17918): BUG: Fix error in linalg/\_matfuncs\_sqrtm.py
  - [\#18644](https://github.com/scipy/scipy/pull/18644): BUG: sparse.linalg: Cast index arrays to intc before calling...
  - [\#18784](https://github.com/scipy/scipy/pull/18784): Allow johnsonsu parameters to be floats
  - [\#18785](https://github.com/scipy/scipy/pull/18785): MAINT: stats: fix NumPy DeprecationWarnings
  - [\#18787](https://github.com/scipy/scipy/pull/18787): REL, MAINT: prep for 1.11.2
  - [\#18790](https://github.com/scipy/scipy/pull/18790): DOC: Fix broken link to installation guide in README
  - [\#18804](https://github.com/scipy/scipy/pull/18804): BUG: Ensure cKDtree.query does not pass Pandas DataFrame to np.isfinite
  - [\#18809](https://github.com/scipy/scipy/pull/18809): CI, MAINT: 32-bit Pillow pin
  - [\#18810](https://github.com/scipy/scipy/pull/18810): BLD: copy \`cython\_optimize.pxd\` to build dir
  - [\#18825](https://github.com/scipy/scipy/pull/18825): BUG: make \`L-BFGS-B\` optimizer work with single precision gradient
  - [\#18831](https://github.com/scipy/scipy/pull/18831): BUG: io/matlab: Fix loading of mat files containing fn handles...
  - [\#18859](https://github.com/scipy/scipy/pull/18859): BUG: make Bessel-roots function not hang and not skip roots
  - [\#18894](https://github.com/scipy/scipy/pull/18894): DOC: linking interp1d docstring to tutorial
  - [\#18896](https://github.com/scipy/scipy/pull/18896): BUG: lsq trf gives x=1e-10 if x0 is near a bound
  - [\#18937](https://github.com/scipy/scipy/pull/18937): CI/BLD: create cp312 wheels
  - [\#18961](https://github.com/scipy/scipy/pull/18961): DOC: Fix installation instructions using venv/pip
  - [\#18985](https://github.com/scipy/scipy/pull/18985): CI: move the musllinux Cirrus job to GHA, optimize other jobs
  - [\#18999](https://github.com/scipy/scipy/pull/18999): CI: reduce Cirrus CI usage during wheel builds
  - [\#19004](https://github.com/scipy/scipy/pull/19004): BUG: interpolate: fix spalde with len(c) \< len(t)
  - [\#19025](https://github.com/scipy/scipy/pull/19025): BUG: pass unused xrtol in fmin\_bfgs to \_minimize\_bfgs
  - [\#19027](https://github.com/scipy/scipy/pull/19027): BLD: rename \`setup.py\` to \`\_setup.py\` to signal it should...
  - [\#19034](https://github.com/scipy/scipy/pull/19034): MAINT: NumPy 1.25.x deprecations
  - [\#19054](https://github.com/scipy/scipy/pull/19054): MAINT: ensure cobyla objective returns scalar

---

1.11.3-notes.md

---

# SciPy 1.11.3 Release Notes

<div class="contents">

</div>

SciPy 1.11.3 is a bug-fix release with no new features compared to 1.11.2.

## Authors

  - Name (commits)
  - Jake Bowhay (2)
  - CJ Carey (1)
  - Colin Carroll (1) +
  - Anirudh Dagar (2)
  - drestebon (1) +
  - Ralf Gommers (5)
  - Matt Haberland (2)
  - Julien Jerphanion (1)
  - Uwe L. Korn (1) +
  - Ellie Litwack (2)
  - Andrew Nelson (5)
  - Bharat Raghunathan (1)
  - Tyler Reddy (37)
  - Søren Fuglede Jørgensen (2)
  - Hielke Walinga (1) +
  - Warren Weckesser (1)
  - Bernhard M. Wiedemann (1)

A total of 17 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.11.3

  - [\#15093](https://github.com/scipy/scipy/issues/15093): BUG: scipy.optimize's trust-constr algorithm hangs when keep-feasible...
  - [\#15273](https://github.com/scipy/scipy/issues/15273): freqz: suboptimal performance for worN=2\*\*n+1, include\_nyquist=True...
  - [\#17269](https://github.com/scipy/scipy/issues/17269): Bug in scipy.sparse.csgraph.min\_weight\_full\_bipartite\_matching
  - [\#17289](https://github.com/scipy/scipy/issues/17289): BUG: Different results between numpy.fft.rfft and scipy.signal.freqz
  - [\#18716](https://github.com/scipy/scipy/issues/18716): Buffer dtype mismatch, expected 'ITYPE\_t' but got 'long'
  - [\#18782](https://github.com/scipy/scipy/issues/18782): BUG: johnsonsu distribution no longer accepts integer \`b\` parameter
  - [\#18922](https://github.com/scipy/scipy/issues/18922): BUG: dev.py has \`distutils\` usage
  - [\#19101](https://github.com/scipy/scipy/issues/19101): BUG: mesonpy embeds random path in .pyx files
  - [\#19103](https://github.com/scipy/scipy/issues/19103): BUG: Regression in 1.11.2: optimize.least\_squares with method='trf'...
  - [\#19132](https://github.com/scipy/scipy/issues/19132): BUG: Build fails on latest commit
  - [\#19149](https://github.com/scipy/scipy/issues/19149): BUG: scipy.sparse.csgraph.laplacian raises AttributeError on...
  - [\#19197](https://github.com/scipy/scipy/issues/19197): BUG: Incorrect sampling from zero rank covariance

### Pull requests for 1.11.3

  - [\#17633](https://github.com/scipy/scipy/pull/17633): BUG: add infeasibility checks to min\_weight\_full\_bipartite\_matching
  - [\#18784](https://github.com/scipy/scipy/pull/18784): BUG: Allow johnsonsu parameters to be floats
  - [\#18913](https://github.com/scipy/scipy/pull/18913): BUG: sparse.csgraph: Support int64 indices in traversal.pyx
  - [\#18924](https://github.com/scipy/scipy/pull/18924): BUG: Fix python3.12 distutils dev.py build
  - [\#18956](https://github.com/scipy/scipy/pull/18956): BUG: trust-constr Bounds exclusive
  - [\#19076](https://github.com/scipy/scipy/pull/19076): MAINT: should not be using np.float64() on arrays
  - [\#19084](https://github.com/scipy/scipy/pull/19084): REL, MAINT: prep for 1.11.3
  - [\#19111](https://github.com/scipy/scipy/pull/19111): BUG: Fixes \#19103 by adding back make\_strictly\_feasible to lsq...
  - [\#19123](https://github.com/scipy/scipy/pull/19123): BLD: Avoid absolute pathnames in .pyx files
  - [\#19135](https://github.com/scipy/scipy/pull/19135): MAINT: signal: Remove the cval parameter from the private function...
  - [\#19139](https://github.com/scipy/scipy/pull/19139): BLD: revert to using published wheels \[wheel build\]
  - [\#19156](https://github.com/scipy/scipy/pull/19156): BUG: Support sparse arrays in scipy.sparse.csgraph.laplacian
  - [\#19199](https://github.com/scipy/scipy/pull/19199): MAINT: stats.CovViaEigendecomposition: fix \`\_LA\` attribute...
  - [\#19200](https://github.com/scipy/scipy/pull/19200): TST: fix \`TestODR.test\_implicit\` test failure with tolerance...
  - [\#19208](https://github.com/scipy/scipy/pull/19208): BUG: freqz rfft grid fix
  - [\#19280](https://github.com/scipy/scipy/pull/19280): MAINT: newton, make sure x0 is an inexact type
  - [\#19286](https://github.com/scipy/scipy/pull/19286): BUG: stats: fix build failure due to incorrect Boost policies...
  - [\#19290](https://github.com/scipy/scipy/pull/19290): BLD: add float.h include to \`\_fpumode.c\`, fixes Clang on Windows...
  - [\#19299](https://github.com/scipy/scipy/pull/19299): MAINT: fix libquadmath licence

---

1.11.4-notes.md

---

# SciPy 1.11.4 Release Notes

<div class="contents">

</div>

SciPy 1.11.4 is a bug-fix release with no new features compared to 1.11.3.

## Authors

  - Name (commits)
  - Jake Bowhay (2)
  - Ralf Gommers (4)
  - Julien Jerphanion (2)
  - Nikolay Mayorov (2)
  - Melissa Weber Mendonça (1)
  - Tirth Patel (1)
  - Tyler Reddy (22)
  - Dan Schult (3)
  - Nicolas Vetsch (1) +

A total of 9 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.11.4

  - [\#19189](https://github.com/scipy/scipy/issues/19189): Contradiction in \`pyproject.toml\` requirements?
  - [\#19228](https://github.com/scipy/scipy/issues/19228): Doc build fails with Python 3.11
  - [\#19245](https://github.com/scipy/scipy/issues/19245): BUG: upcasting of indices dtype from DIA to COO/CSR/BSR arrays
  - [\#19351](https://github.com/scipy/scipy/issues/19351): BUG: Regression in 1.11.3 can still fail for \`optimize.least\_squares\`...
  - [\#19357](https://github.com/scipy/scipy/issues/19357): BUG: build failure with Xcode 15 linker
  - [\#19359](https://github.com/scipy/scipy/issues/19359): BUG: DiscreteAliasUrn construction fails with UNURANError for...
  - [\#19387](https://github.com/scipy/scipy/issues/19387): BUG: problem importing libgfortran.5.dylib on macOS Sonoma
  - [\#19403](https://github.com/scipy/scipy/issues/19403): BUG: scipy.sparse.lil\_matrix division by complex number leads...
  - [\#19437](https://github.com/scipy/scipy/issues/19437): BUG: can't install scipy on mac m1 with poetry due to incompatible...
  - [\#19500](https://github.com/scipy/scipy/issues/19500): DOC: doc build failing
  - [\#19513](https://github.com/scipy/scipy/issues/19513): BUG: Python version constraints in releases causes issues for...

### Pull requests for 1.11.4

  - [\#19230](https://github.com/scipy/scipy/pull/19230): DOC, MAINT: workaround for py311 docs
  - [\#19307](https://github.com/scipy/scipy/pull/19307): set idx\_dtype in sparse dia\_array.tocoo
  - [\#19316](https://github.com/scipy/scipy/pull/19316): MAINT: Prep 1.11.4
  - [\#19320](https://github.com/scipy/scipy/pull/19320): BLD: fix up version parsing issue in cythonize.py for setup.py...
  - [\#19329](https://github.com/scipy/scipy/pull/19329): DOC: stats.chisquare: result object contains attribute 'statistic'
  - [\#19335](https://github.com/scipy/scipy/pull/19335): BUG: fix pow method for sparrays with power zero
  - [\#19364](https://github.com/scipy/scipy/pull/19364): MAINT, BUG: stats: update the UNU.RAN submodule with DAU fix
  - [\#19379](https://github.com/scipy/scipy/pull/19379): BUG: Restore the original behavior of 'trf' from least\_squares...
  - [\#19400](https://github.com/scipy/scipy/pull/19400): BLD: use classic linker on macOS 14 (Sonoma), the new linker...
  - [\#19408](https://github.com/scipy/scipy/pull/19408): BUG: Fix typecasting problem in scipy.sparse.lil\_matrix truediv
  - [\#19504](https://github.com/scipy/scipy/pull/19504): DOC, MAINT: Bump CircleCI Python version to 3.11
  - [\#19517](https://github.com/scipy/scipy/pull/19517): MAINT, REL: unpin Python 1.11.x branch
  - [\#19550](https://github.com/scipy/scipy/pull/19550): MAINT, BLD: poetry loongarch shims

---

1.12.0-notes.md

---

# SciPy 1.12.0 Release Notes

<div class="contents">

</div>

SciPy 1.12.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.12.x branch, and on adding new features on the main branch.

This release requires Python 3.9+ and NumPy 1.22.4 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - Experimental support for the array API standard has been added to part of <span class="title-ref">scipy.special</span>, and to all of <span class="title-ref">scipy.fft</span> and <span class="title-ref">scipy.cluster</span>. There are likely to be bugs and early feedback for usage with CuPy arrays, PyTorch tensors, and other array API compatible libraries is appreciated. Use the `SCIPY_ARRAY_API` environment variable for testing.
  - A new class, `ShortTimeFFT`, provides a more versatile implementation of the short-time Fourier transform (STFT), its inverse (ISTFT) as well as the (cross-) spectrogram. It utilizes an improved algorithm for calculating the ISTFT.
  - Several new constructors have been added for sparse arrays, and many operations now additionally support sparse arrays, further facilitating the migration from sparse matrices.
  - A large portion of the <span class="title-ref">scipy.stats</span> API now has improved support for handling `NaN` values, masked arrays, and more fine-grained shape-handling. The accuracy and performance of a number of `stats` methods have been improved, and a number of new statistical tests and distributions have been added.

## New features

### <span class="title-ref">scipy.cluster</span> improvements

  - Experimental support added for the array API standard; PyTorch tensors, CuPy arrays and array API compatible array libraries are now accepted (GPU support is limited to functions with pure Python implementations). CPU arrays which can be converted to and from NumPy are supported module-wide and returned arrays will match the input type. This behaviour is enabled by setting the `SCIPY_ARRAY_API` environment variable before importing `scipy`. This experimental support is still under development and likely to contain bugs - testing is very welcome.

### <span class="title-ref">scipy.fft</span> improvements

  - Experimental support added for the array API standard; functions which are part of the `fft` array API standard extension module, as well as the Fast Hankel Transforms and the basic FFTs which are not in the extension module, now accept PyTorch tensors, CuPy arrays and array API compatible array libraries. CPU arrays which can be converted to and from NumPy arrays are supported module-wide and returned arrays will match the input type. This behaviour is enabled by setting the `SCIPY_ARRAY_API` environment variable before importing `scipy`. This experimental support is still under development and likely to contain bugs - testing is very welcome.

### <span class="title-ref">scipy.integrate</span> improvements

  - Added <span class="title-ref">scipy.integrate.cumulative\_simpson</span> for cumulative quadrature from sampled data using Simpson's 1/3 rule.

### <span class="title-ref">scipy.interpolate</span> improvements

  - New class `NdBSpline` represents tensor-product splines in N dimensions. This class only knows how to evaluate a tensor product given coefficients and knot vectors. This way it generalizes `BSpline` for 1D data to N-D, and parallels `NdPPoly` (which represents N-D tensor product polynomials). Evaluations exploit the localized nature of b-splines.
  - `NearestNDInterpolator.__call__` accepts `**query_options`, which are passed through to the `KDTree.query` call to find nearest neighbors. This allows, for instance, to limit the neighbor search distance and parallelize the query using the `workers` keyword.
  - `BarycentricInterpolator` now allows computing the derivatives.
  - It is now possible to change interpolation values in an existing `CloughTocher2DInterpolator` instance, while also saving the barycentric coordinates of interpolation points.

### <span class="title-ref">scipy.linalg</span> improvements

  - Access to new low-level LAPACK functions is provided via `dtgsyl` and `stgsyl`.

### <span class="title-ref">scipy.ndimage</span> improvements

### <span class="title-ref">scipy.optimize</span> improvements

  - <span class="title-ref">scipy.optimize.isotonic\_regression</span> has been added to allow nonparametric isotonic regression.
  - <span class="title-ref">scipy.optimize.nnls</span> is rewritten in Python and now implements the so-called fnnls or fast nnls, making it more efficient for high-dimensional problems.
  - The result object of <span class="title-ref">scipy.optimize.root</span> and <span class="title-ref">scipy.optimize.root\_scalar</span> now reports the method used.
  - The `callback` method of <span class="title-ref">scipy.optimize.differential\_evolution</span> can now be passed more detailed information via the `intermediate_results` keyword parameter. Also, the evolution `strategy` now accepts a callable for additional customization. The performance of `differential_evolution` has also been improved.
  - <span class="title-ref">scipy.optimize.minimize</span> method `Newton-CG` now supports functions that return sparse Hessian matrices/arrays for the `hess` parameter and is slightly more efficient.
  - <span class="title-ref">scipy.optimize.minimize</span> method `BFGS` now accepts an initial estimate for the inverse of the Hessian, which allows for more efficient workflows in some circumstances. The new parameter is `hess_inv0`.
  - <span class="title-ref">scipy.optimize.minimize</span> methods `CG`, `Newton-CG`, and `BFGS` now accept parameters `c1` and `c2`, allowing specification of the Armijo and curvature rule parameters, respectively.
  - <span class="title-ref">scipy.optimize.curve\_fit</span> performance has improved due to more efficient memoization of the callable function.

### <span class="title-ref">scipy.signal</span> improvements

  - `freqz`, `freqz_zpk`, and `group_delay` are now more accurate when `fs` has a default value.
  - The new class `ShortTimeFFT` provides a more versatile implementation of the short-time Fourier transform (STFT), its inverse (ISTFT) as well as the (cross-) spectrogram. It utilizes an improved algorithm for calculating the ISTFT based on dual windows and provides more fine-grained control of the parametrization especially in regard to scaling and phase-shift. Functionality was implemented to ease working with signal and STFT chunks. A section has been added to the "SciPy User Guide" providing algorithmic details. The functions `stft`, `istft` and `spectrogram` have been marked as legacy.

### <span class="title-ref">scipy.sparse</span> improvements

  - `sparse.linalg` iterative solvers `sparse.linalg.cg`, `sparse.linalg.cgs`, `sparse.linalg.bicg`, `sparse.linalg.bicgstab`, `sparse.linalg.gmres`, and `sparse.linalg.qmr` are rewritten in Python.
  - Updated vendored SuperLU version to `6.0.1`, along with a few additional fixes.
  - Sparse arrays have gained additional constructors: `eye_array`, `random_array`, `block_array`, and `identity`. `kron` and `kronsum` have been adjusted to additionally support operation on sparse arrays.
  - Sparse matrices now support a transpose with `axes=(1, 0)`, to mirror the `.T` method.
  - `LaplacianNd` now allows selection of the largest subset of eigenvalues, and additionally now supports retrieval of the corresponding eigenvectors. The performance of `LaplacianNd` has also been improved.
  - The performance of `dok_matrix` and `dok_array` has been improved, and their inheritance behavior should be more robust.
  - `hstack`, `vstack`, and `block_diag` now work with sparse arrays, and preserve the input sparse type.
  - A new function, <span class="title-ref">scipy.sparse.linalg.matrix\_power</span>, has been added, allowing for exponentiation of sparse arrays.

### <span class="title-ref">scipy.spatial</span> improvements

  - Two new methods were implemented for `spatial.transform.Rotation`: `__pow__` to raise a rotation to integer or fractional power and `approx_equal` to check if two rotations are approximately equal.
  - The method `Rotation.align_vectors` was extended to solve a constrained alignment problem where two vectors are required to be aligned precisely. Also when given a single pair of vectors, the algorithm now returns the rotation with minimal magnitude, which can be considered as a minor backward incompatible change.
  - A new representation for `spatial.transform.Rotation` called Davenport angles is available through `from_davenport` and `as_davenport` methods.
  - Performance improvements have been added to `distance.hamming` and `distance.correlation`.
  - Improved performance of `SphericalVoronoi` `sort_vertices_of_regions` and two dimensional area calculations.

### <span class="title-ref">scipy.special</span> improvements

  - Added <span class="title-ref">scipy.special.stirling2</span> for computation of Stirling numbers of the second kind. Both exact calculation and an asymptotic approximation (the default) are supported via `exact=True` and `exact=False` (the default) respectively.
  - Added <span class="title-ref">scipy.special.betaincc</span> for computation of the complementary incomplete Beta function and <span class="title-ref">scipy.special.betainccinv</span> for computation of its inverse.
  - Improved precision of <span class="title-ref">scipy.special.betainc</span> and <span class="title-ref">scipy.special.betaincinv</span>.
  - Experimental support added for alternative backends: functions <span class="title-ref">scipy.special.log\_ndtr</span>, <span class="title-ref">scipy.special.ndtr</span>, <span class="title-ref">scipy.special.ndtri</span>, <span class="title-ref">scipy.special.erf</span>, <span class="title-ref">scipy.special.erfc</span>, <span class="title-ref">scipy.special.i0</span>, <span class="title-ref">scipy.special.i0e</span>, <span class="title-ref">scipy.special.i1</span>, <span class="title-ref">scipy.special.i1e</span>, <span class="title-ref">scipy.special.gammaln</span>, <span class="title-ref">scipy.special.gammainc</span>, <span class="title-ref">scipy.special.gammaincc</span>, <span class="title-ref">scipy.special.logit</span>, and <span class="title-ref">scipy.special.expit</span> now accept PyTorch tensors and CuPy arrays. These features are still under development and likely to contain bugs, so they are disabled by default; enable them by setting a `SCIPY_ARRAY_API` environment variable to `1` before importing `scipy`. Testing is appreciated\!

### <span class="title-ref">scipy.stats</span> improvements

  - Added <span class="title-ref">scipy.stats.quantile\_test</span>, a nonparametric test of whether a hypothesized value is the quantile associated with a specified probability. The `confidence_interval` method of the result object gives a confidence interval of the quantile.
  - <span class="title-ref">scipy.stats.sampling.FastGeneratorInversion</span> provides a convenient interface to fast random sampling via numerical inversion of distribution CDFs.
  - <span class="title-ref">scipy.stats.geometric\_discrepancy</span> adds geometric/topological discrepancy metrics for random samples.
  - <span class="title-ref">scipy.stats.multivariate\_normal</span> now has a `fit` method for fitting distribution parameters to data via maximum likelihood estimation.
  - <span class="title-ref">scipy.stats.bws\_test</span> performs the Baumgartner-Weiss-Schindler test of whether two-samples were drawn from the same distribution.
  - <span class="title-ref">scipy.stats.jf\_skew\_t</span> implements the Jones and Faddy skew-t distribution.
  - <span class="title-ref">scipy.stats.anderson\_ksamp</span> now supports a permutation version of the test using the `method` parameter.
  - The `fit` methods of <span class="title-ref">scipy.stats.halfcauchy</span>, <span class="title-ref">scipy.stats.halflogistic</span>, and <span class="title-ref">scipy.stats.halfnorm</span> are faster and more accurate.
  - <span class="title-ref">scipy.stats.beta</span> `entropy` accuracy has been improved for extreme values of distribution parameters.
  - The accuracy of `sf` and/or `isf` methods have been improved for several distributions: <span class="title-ref">scipy.stats.burr</span>, <span class="title-ref">scipy.stats.hypsecant</span>, <span class="title-ref">scipy.stats.kappa3</span>, <span class="title-ref">scipy.stats.loglaplace</span>, <span class="title-ref">scipy.stats.lognorm</span>, <span class="title-ref">scipy.stats.lomax</span>, <span class="title-ref">scipy.stats.pearson3</span>, <span class="title-ref">scipy.stats.rdist</span>, and <span class="title-ref">scipy.stats.pareto</span>.
  - The following functions now support parameters `axis`, `nan_policy`, and `keep_dims`: <span class="title-ref">scipy.stats.entropy</span>, <span class="title-ref">scipy.stats.differential\_entropy</span>, <span class="title-ref">scipy.stats.variation</span>, <span class="title-ref">scipy.stats.ansari</span>, <span class="title-ref">scipy.stats.bartlett</span>, <span class="title-ref">scipy.stats.levene</span>, <span class="title-ref">scipy.stats.fligner</span>, <span class="title-ref">scipy.stats.circmean</span>, <span class="title-ref">scipy.stats.circvar</span>, <span class="title-ref">scipy.stats.circstd</span>, <span class="title-ref">scipy.stats.tmean</span>, <span class="title-ref">scipy.stats.tvar</span>, <span class="title-ref">scipy.stats.tstd</span>, <span class="title-ref">scipy.stats.tmin</span>, <span class="title-ref">scipy.stats.tmax</span>, and <span class="title-ref">scipy.stats.tsem</span>.
  - The `logpdf` and `fit` methods of <span class="title-ref">scipy.stats.skewnorm</span> have been improved.
  - The beta negative binomial distribution is implemented as <span class="title-ref">scipy.stats.betanbinom</span>.
  - Improved performance of <span class="title-ref">scipy.stats.invwishart</span> `rvs` and `logpdf`.
  - A source of intermediate overflow in <span class="title-ref">scipy.stats.boxcox\_normmax</span> with `method='mle'` has been eliminated, and the returned value of `lmbda` is constrained such that the transformed data will not overflow.
  - <span class="title-ref">scipy.stats.nakagami</span> `stats` is more accurate and reliable.
  - A source of intermediate overflow in <span class="title-ref">scipy.norminvgauss.pdf</span> has been eliminated.
  - Added support for masked arrays to <span class="title-ref">scipy.stats.circmean</span>, <span class="title-ref">scipy.stats.circvar</span>, <span class="title-ref">scipy.stats.circstd</span>, and <span class="title-ref">scipy.stats.entropy</span>.
  - <span class="title-ref">scipy.stats.dirichlet</span> has gained a new covariance (`cov`) method.
  - Improved accuracy of `entropy` method of <span class="title-ref">scipy.stats.multivariate\_t</span> for large degrees of freedom.
  - <span class="title-ref">scipy.stats.loggamma</span> has an improved `entropy` method.

## Deprecated features

  - Error messages have been made clearer for objects that don't exist in the public namespace and warnings sharpened for private attributes that are not supposed to be imported at all.
  - <span class="title-ref">scipy.signal.cmplx\_sort</span> has been deprecated and will be removed in SciPy 1.15. A replacement you can use is provided in the deprecation message.
  - Values the argument `initial` of <span class="title-ref">scipy.integrate.cumulative\_trapezoid</span> other than `0` and `None` are now deprecated.
  - <span class="title-ref">scipy.stats.rvs\_ratio\_uniforms</span> is deprecated in favour of <span class="title-ref">scipy.stats.sampling.RatioUniforms</span>
  - <span class="title-ref">scipy.integrate.quadrature</span> and <span class="title-ref">scipy.integrate.romberg</span> have been deprecated due to accuracy issues and interface shortcomings. They will be removed in SciPy 1.15. Please use <span class="title-ref">scipy.integrate.quad</span> instead.
  - Coinciding with upcoming changes to function signatures (e.g. removal of a deprecated keyword), we are deprecating positional use of keyword arguments for the affected functions, which will raise an error starting with SciPy 1.14. In some cases, this has delayed the originally announced removal date, to give time to respond to the second part of the deprecation. Affected functions are:
      - `linalg.{eigh, eigvalsh, pinv}`
      - `integrate.simpson`
      - `signal.{firls, firwin, firwin2, remez}`
      - `sparse.linalg.{bicg, bicgstab, cg, cgs, gcrotmk, gmres, lgmres, minres, qmr, tfqmr}`
      - `special.comb`
      - `stats.kendalltau`
  - All wavelet functions have been deprecated, as PyWavelets provides suitable implementations; affected functions are: `signal.{daub, qmf, cascade, morlet, morlet2, ricker, cwt}`
  - `scipy.integrate.trapz`, `scipy.integrate.cumtrapz`, and `scipy.integrate.simps` have been deprecated in favour of <span class="title-ref">scipy.integrate.trapezoid</span>, <span class="title-ref">scipy.integrate.cumulative\_trapezoid</span>, and <span class="title-ref">scipy.integrate.simpson</span> respectively and will be removed in SciPy 1.14.
  - The `tol` argument of `scipy.sparse.linalg.{bcg,bicstab,cg,cgs,gcrotmk,gmres,lgmres,minres,qmr,tfqmr}` is now deprecated in favour of `rtol` and will be removed in SciPy 1.14. Furthermore, the default value of `atol` for these functions is due to change to `0.0` in SciPy 1.14.

## Expired Deprecations

There is an ongoing effort to follow through on long-standing deprecations. The following previously deprecated features are affected:

  - The `centered` keyword of <span class="title-ref">scipy.stats.qmc.LatinHypercube</span> has been removed. Use `scrambled=False` instead of `centered=True`.
  - `scipy.stats.binom_test` has been removed in favour of <span class="title-ref">scipy.stats.binomtest</span>.
  - In <span class="title-ref">scipy.stats.iqr</span>, the use of `scale='raw'` has been removed in favour of `scale=1`.
  - Functions from NumPy's main namespace which were exposed in SciPy's main namespace, such as `numpy.histogram` exposed by `scipy.histogram`, have been removed from SciPy's main namespace. Please use the functions directly from `numpy`.

## Backwards incompatible changes

## Other changes

  - The arguments used to compile and link SciPy are now available via `show_config`.

## Authors

  - Name (commits)
  - endolith (1)
  - h-vetinari (34)
  - Tom Adamczewski (3) +
  - Anudeep Adiraju (1) +
  - akeemlh (1)
  - Alex Amadori (2) +
  - Raja Yashwanth Avantsa (2) +
  - Seth Axen (1) +
  - Ross Barnowski (1)
  - Dan Barzilay (1) +
  - Ashish Bastola (1) +
  - Christoph Baumgarten (2)
  - Ben Beasley (3) +
  - Doron Behar (1)
  - Peter Bell (1)
  - Sebastian Berg (1)
  - Ben Boeckel (1) +
  - David Boetius (1) +
  - Matt Borland (1)
  - Jake Bowhay (103)
  - Larry Bradley (1) +
  - Dietrich Brunn (5)
  - Evgeni Burovski (102)
  - Matthias Bussonnier (18)
  - CJ Carey (6)
  - Colin Carroll (1) +
  - Aadya Chinubhai (1) +
  - Luca Citi (1)
  - Lucas Colley (141) +
  - com3dian (1) +
  - Anirudh Dagar (4)
  - Danni (1) +
  - Dieter Werthmüller (1)
  - John Doe (2) +
  - Philippe DONNAT (2) +
  - drestebon (1) +
  - Thomas Duvernay (1)
  - elbarso (1) +
  - emilfrost (2) +
  - Paul Estano (8) +
  - Evandro (2)
  - Franz Király (1) +
  - Nikita Furin (1) +
  - gabrielthomsen (1) +
  - Lukas Geiger (9) +
  - Artem Glebov (22) +
  - Caden Gobat (1)
  - Ralf Gommers (127)
  - Alexander Goscinski (2) +
  - Rohit Goswami (2) +
  - Olivier Grisel (1)
  - Matt Haberland (244)
  - Charles Harris (1)
  - harshilkamdar (1) +
  - Alon Hovav (2) +
  - Gert-Ludwig Ingold (1)
  - Romain Jacob (1) +
  - jcwhitehead (1) +
  - Julien Jerphanion (13)
  - He Jia (1)
  - JohnWT (1) +
  - jokasimr (1) +
  - Evan W Jones (1)
  - Karen Róbertsdóttir (1) +
  - Ganesh Kathiresan (1)
  - Robert Kern (11)
  - Andrew Knyazev (4)
  - Uwe L. Korn (1) +
  - Rishi Kulkarni (1)
  - Kale Kundert (3) +
  - Jozsef Kutas (2)
  - Kyle0 (2) +
  - Robert Langefeld (1) +
  - Jeffrey Larson (1) +
  - Jessy Lauer (1) +
  - lciti (1) +
  - Hoang Le (1) +
  - Antony Lee (5)
  - Thilo Leitzbach (4) +
  - LemonBoy (2) +
  - Ellie Litwack (8) +
  - Thomas Loke (4) +
  - Malte Londschien (1) +
  - Christian Lorentzen (6)
  - Adam Lugowski (10) +
  - lutefiskhotdish (1)
  - mainak33 (1) +
  - Ben Mares (11) +
  - mart-mihkel (2) +
  - Mateusz Sokół (24) +
  - Nikolay Mayorov (4)
  - Nicholas McKibben (1)
  - Melissa Weber Mendonça (7)
  - Michał Górny (1)
  - Kat Mistberg (2) +
  - mkiffer (1) +
  - mocquin (1) +
  - Nicolas Mokus (2) +
  - Sturla Molden (1)
  - Roberto Pastor Muela (3) +
  - Bijay Nayak (1) +
  - Andrew Nelson (105)
  - Praveer Nidamaluri (3) +
  - Lysandros Nikolaou (2)
  - Dimitri Papadopoulos Orfanos (7)
  - Pablo Rodríguez Pérez (1) +
  - Dimitri Papadopoulos (2)
  - Tirth Patel (14)
  - Kyle Paterson (1) +
  - Paul (4) +
  - Yann Pellegrini (2) +
  - Matti Picus (4)
  - Ilhan Polat (36)
  - Pranav (1) +
  - Bharat Raghunathan (1)
  - Chris Rapson (1) +
  - Matteo Raso (4)
  - Tyler Reddy (215)
  - Martin Reinecke (1)
  - Tilo Reneau-Cardoso (1) +
  - resting-dove (2) +
  - Simon Segerblom Rex (4)
  - Lucas Roberts (2)
  - Pamphile Roy (31)
  - Feras Saad (3) +
  - Atsushi Sakai (3)
  - Masahiro Sakai (2) +
  - Omar Salman (14)
  - Andrej Savikin (1) +
  - Daniel Schmitz (55)
  - Dan Schult (19)
  - Scott Shambaugh (9)
  - Sheila-nk (2) +
  - Mauro Silberberg (3) +
  - Maciej Skorski (1) +
  - Laurent Sorber (1) +
  - Albert Steppi (28)
  - Kai Striega (1)
  - Saswat Susmoy (1) +
  - Alex Szatmary (1) +
  - Søren Fuglede Jørgensen (3)
  - othmane tamri (3) +
  - Ewout ter Hoeven (1)
  - Will Tirone (1)
  - TLeitzbach (1) +
  - Kevin Topolski (1) +
  - Edgar Andrés Margffoy Tuay (1)
  - Dipansh Uikey (1) +
  - Matus Valo (3)
  - Christian Veenhuis (2)
  - Nicolas Vetsch (1) +
  - Isaac Virshup (7)
  - Hielke Walinga (2) +
  - Stefan van der Walt (2)
  - Warren Weckesser (7)
  - Bernhard M. Wiedemann (4)
  - Levi John Wolf (1)
  - Xuefeng Xu (4) +
  - Rory Yorke (2)
  - YoussefAli1 (1) +
  - Irwin Zaid (4) +
  - Jinzhe Zeng (1) +
  - JIMMY ZHAO (1) +

A total of 163 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.12.0

  - [\#2725](https://github.com/scipy/scipy/issues/2725): Barycentric interpolation should allow evaluation of derivatives
  - [\#4244](https://github.com/scipy/scipy/issues/4244): betaincinv accuracy
  - [\#4677](https://github.com/scipy/scipy/issues/4677): Unexpected behavior from scipy.special.btdtri
  - [\#4819](https://github.com/scipy/scipy/issues/4819): Comparison operator overloading doesn't work with sparse matrices
  - [\#5022](https://github.com/scipy/scipy/issues/5022): bicg returns last iterate, not the smallest-residue vector
  - [\#6198](https://github.com/scipy/scipy/issues/6198): callback for Krylov methods
  - [\#7241](https://github.com/scipy/scipy/issues/7241): ENH: Implement Chandrupatla's algorithm for root finding (simpler/faster...
  - [\#8792](https://github.com/scipy/scipy/issues/8792): Newton-CG throws error when Hessian is a \`scipy.sparse\` class
  - [\#9527](https://github.com/scipy/scipy/issues/9527): Anderson-Darling ksamples can not estimate p-values beyond given...
  - [\#11516](https://github.com/scipy/scipy/issues/11516): Recommend ccache for benchmarks in contributor documentation
  - [\#12017](https://github.com/scipy/scipy/issues/12017): Expose FACTOR parameter instead of using magic number in scipy.optimize.nnls
  - [\#12748](https://github.com/scipy/scipy/issues/12748): Convergence issue of GMRES
  - [\#12796](https://github.com/scipy/scipy/issues/12796): BUG: nonmonotonicity in betaincinv, btdtri, stats.beta.ppf
  - [\#13306](https://github.com/scipy/scipy/issues/13306): griddata with multiple data values
  - [\#13437](https://github.com/scipy/scipy/issues/13437): DOC: Add example as to how to use solve\_ivp to solve complex...
  - [\#14037](https://github.com/scipy/scipy/issues/14037): ENH: other quality metrics for random sampling
  - [\#14480](https://github.com/scipy/scipy/issues/14480): LSODA implementation of dense output yields incorrect result
  - [\#15676](https://github.com/scipy/scipy/issues/15676): ENH: Implement \`multivariate\_normal.fit\`
  - [\#15738](https://github.com/scipy/scipy/issues/15738): DEP: change default of atol in \`scipy.sparse.linalg.\*\`
  - [\#16729](https://github.com/scipy/scipy/issues/16729): \_fitpack / dfitpack duplication
  - [\#16880](https://github.com/scipy/scipy/issues/16880): ENH: Add Rotation.align\_vector
  - [\#17290](https://github.com/scipy/scipy/issues/17290): ENH: multi dimensional wasserstein/earth mover distance in Scipy
  - [\#17398](https://github.com/scipy/scipy/issues/17398): BUG: Documentation for \`scipy.optimize.differential\_evolution\`...
  - [\#17462](https://github.com/scipy/scipy/issues/17462): ENH: Create Rotations by aligning a primary axis and best-fitting...
  - [\#17493](https://github.com/scipy/scipy/issues/17493): BUG: stats: Occasional failures of some tests of \`levy\_stable\`
  - [\#17572](https://github.com/scipy/scipy/issues/17572): BUG: Deprecation warning says to use non-existent symbols
  - [\#17706](https://github.com/scipy/scipy/issues/17706): ENH: add isotonic regression
  - [\#17734](https://github.com/scipy/scipy/issues/17734): BUG: dijkstra algorithm is returning different results in v1.10...
  - [\#17744](https://github.com/scipy/scipy/issues/17744): BUG: test\_maxiter\_worsening\[lgmres\] failed on riscv
  - [\#17756](https://github.com/scipy/scipy/issues/17756): DOC: dimension clarification in \`directed\_hausdorff \`
  - [\#17771](https://github.com/scipy/scipy/issues/17771): BUG: cannot import ODEintWarning from scipy.integrate
  - [\#17864](https://github.com/scipy/scipy/issues/17864): ENH: feature request for initial hessian estimate in scipy bfgs...
  - [\#17890](https://github.com/scipy/scipy/issues/17890): ENH: Stirling Numbers of the second Kind
  - [\#18093](https://github.com/scipy/scipy/issues/18093): BUG: entropy calculations failing for large values
  - [\#18279](https://github.com/scipy/scipy/issues/18279): BUG: deprecation warnings for private API are misleading
  - [\#18316](https://github.com/scipy/scipy/issues/18316): DOC: update scipy.stats.truncnorm.rvs example
  - [\#18389](https://github.com/scipy/scipy/issues/18389): BUG: Yeo-Johnson Power Transformer gives Numpy warning
  - [\#18404](https://github.com/scipy/scipy/issues/18404): ENH: Add wrapper for LAPACK functions stgsyl and dtgsyl
  - [\#18432](https://github.com/scipy/scipy/issues/18432): BUG: levy\_stable.pdf does not use pdf\_default\_method\_name attribute
  - [\#18452](https://github.com/scipy/scipy/issues/18452): BUG: DST 2 and 3 with \`norm="ortho"\` are not orthogonal
  - [\#18457](https://github.com/scipy/scipy/issues/18457): DOC: clarify that \`prewitt\` filter does not return the magnitude...
  - [\#18506](https://github.com/scipy/scipy/issues/18506): BUG: Strange behavior of scipy.stats.hypergeom.sf function with...
  - [\#18511](https://github.com/scipy/scipy/issues/18511): BUG: Incorrect hypergeometric mean calculation
  - [\#18564](https://github.com/scipy/scipy/issues/18564): BUG: \`rv\_discrete\` fails when support is unbounded below
  - [\#18568](https://github.com/scipy/scipy/issues/18568): BUG: circe-ci eigenvalue-LOBPCG benchmarks do not check accuracy...
  - [\#18577](https://github.com/scipy/scipy/issues/18577): DEP: deprecate positional arguments in \`sparse.gmres\`
  - [\#18578](https://github.com/scipy/scipy/issues/18578): DEP: deprecate positional arguments in \`stats.kendalltau\`
  - [\#18579](https://github.com/scipy/scipy/issues/18579): DEP: deprecate positional arguments in \`firwin\*\`
  - [\#18580](https://github.com/scipy/scipy/issues/18580): DEP: removal of \`scale='raw'\` in \`iqr\`
  - [\#18581](https://github.com/scipy/scipy/issues/18581): DEP: removal of \`stats.binom\_test\`
  - [\#18582](https://github.com/scipy/scipy/issues/18582): DEP: removal of parameter \`centered\` of \`stats.qmc.LatinHypercube\`
  - [\#18592](https://github.com/scipy/scipy/issues/18592): Semantics of sparse array creation functions
  - [\#18637](https://github.com/scipy/scipy/issues/18637): BUG: Anaconda environment creation with python 3.11
  - [\#18639](https://github.com/scipy/scipy/issues/18639): ENH: \`multivariate\_normal.rvs\` extremely slow
  - [\#18643](https://github.com/scipy/scipy/issues/18643): DOC: Problem with the randint description
  - [\#18647](https://github.com/scipy/scipy/issues/18647): BUG: dgbmv gives "(len(x)\>offx+(trans==0?m-1:n-1)\*abs(incx))...
  - [\#18651](https://github.com/scipy/scipy/issues/18651): DOC: Missing equal sign in equation of Lomb-Scargle periodogram
  - [\#18669](https://github.com/scipy/scipy/issues/18669): DOC: sparse docs "matrix" and "array" mixup
  - [\#18680](https://github.com/scipy/scipy/issues/18680): stats: XSLOW test failures in TestFit
  - [\#18702](https://github.com/scipy/scipy/issues/18702): DEP: deprecate aliased integration methods that are (close to)...
  - [\#18721](https://github.com/scipy/scipy/issues/18721): TST: Cause of \`test\_linsolve.py\` test failure
  - [\#18748](https://github.com/scipy/scipy/issues/18748): \[DOC\] Incorrect docstring for \`boxcox\_normmax\` argument \`method="mle"\`,...
  - [\#18836](https://github.com/scipy/scipy/issues/18836): DOC: API reference doesn't point users to replacement for interp1d
  - [\#18838](https://github.com/scipy/scipy/issues/18838): BUG: stats.burr12: distribution returns invalid moments
  - [\#18839](https://github.com/scipy/scipy/issues/18839): ENH: concatenating sparse arrays should return sparse arrays
  - [\#18849](https://github.com/scipy/scipy/issues/18849): BUG: \`python dev.py bench\` fails
  - [\#18860](https://github.com/scipy/scipy/issues/18860): BUG/BENCH: clough\_tocher benchmark fails
  - [\#18864](https://github.com/scipy/scipy/issues/18864): BUG: curve\_fit memoization causes significant overhead in function...
  - [\#18868](https://github.com/scipy/scipy/issues/18868): CI/BENCH: Fail on error
  - [\#18876](https://github.com/scipy/scipy/issues/18876): DOC: integrate: clarify that event and jac must have the same...
  - [\#18881](https://github.com/scipy/scipy/issues/18881): DOC: lobpcg examples improvement
  - [\#18903](https://github.com/scipy/scipy/issues/18903): DOC: links in hacking.rst go back to hacking.rst instead of their...
  - [\#18939](https://github.com/scipy/scipy/issues/18939): ENH: add new representations for Sakurai and Mikota matrices...
  - [\#18944](https://github.com/scipy/scipy/issues/18944): How to change the default setup for using res.plot()
  - [\#18953](https://github.com/scipy/scipy/issues/18953): BUG: \`\`scipy.optimize.\_differentialevolution\`\` incorrectly...
  - [\#18966](https://github.com/scipy/scipy/issues/18966): BUG: \`PyArray\_MAX\` no longer available in \`numpy/arrayobject.h\`
  - [\#18981](https://github.com/scipy/scipy/issues/18981): ENH: Publish musllinux wheels to PyPI
  - [\#18984](https://github.com/scipy/scipy/issues/18984): DOC: scipy.stats.lognorm — SciPy v1.12.0.dev Manual
  - [\#18987](https://github.com/scipy/scipy/issues/18987): BUG: reproducible builds problem in \_stats\_pythran.cpython-311-x86\_64-linux-gnu.so
  - [\#19008](https://github.com/scipy/scipy/issues/19008): DOC: error in scipy.integrate.DOP853
  - [\#19009](https://github.com/scipy/scipy/issues/19009): DOC: Maybe a typo on the parameter 'alternative' in the Mann-Whitney...
  - [\#19024](https://github.com/scipy/scipy/issues/19024): BUG: \#18481 made BFGS minimization less accurate
  - [\#19039](https://github.com/scipy/scipy/issues/19039): BUG: stats.zscore returns all NaN if given masked array with...
  - [\#19049](https://github.com/scipy/scipy/issues/19049): TST: add test for gh-17918
  - [\#19056](https://github.com/scipy/scipy/issues/19056): ENH: add computing a selected number \`m\` of extreme eigenpairs...
  - [\#19063](https://github.com/scipy/scipy/issues/19063): DOC: typo in scipy.linalg.pinv.html
  - [\#19075](https://github.com/scipy/scipy/issues/19075): ENH: Allow to choose line-search parameters in related optimization...
  - [\#19082](https://github.com/scipy/scipy/issues/19082): MAINT, REL: Programming Language directive
  - [\#19090](https://github.com/scipy/scipy/issues/19090): BUG: root\_scalar (newton method), inconsistent objective function...
  - [\#19092](https://github.com/scipy/scipy/issues/19092): ENH: update vendored SuperLU version
  - [\#19098](https://github.com/scipy/scipy/issues/19098): ENH: add method in RootResults of root\_scalar and root
  - [\#19102](https://github.com/scipy/scipy/issues/19102): BUG: \`least\_squares\` with \`method='trf'\` with initial params...
  - [\#19117](https://github.com/scipy/scipy/issues/19117): TST/MAINT: \`AssertionError\`s with fresh build on M1 macOS
  - [\#19118](https://github.com/scipy/scipy/issues/19118): BUG: \`np\`-coercible array-likes are not accepted with array...
  - [\#19140](https://github.com/scipy/scipy/issues/19140): DOC: stats: alternative loc-scale handling in levy\_stable
  - [\#19147](https://github.com/scipy/scipy/issues/19147): BUG: asfarray is removed from numpy
  - [\#19150](https://github.com/scipy/scipy/issues/19150): build warnings from pythran (?)
  - [\#19158](https://github.com/scipy/scipy/issues/19158): BUG: Source archives have bogus timestamps
  - [\#19161](https://github.com/scipy/scipy/issues/19161): ENH: allow \`sparse\_matrix.transpose(axes=(1, 0))\`
  - [\#19167](https://github.com/scipy/scipy/issues/19167): BUG: build graph non-determinism
  - [\#19177](https://github.com/scipy/scipy/issues/19177): TST: SphericalVoronoi tests not sensitive to regions internal...
  - [\#19185](https://github.com/scipy/scipy/issues/19185): BUG: minimize\_scalar not checking entire area specified by bounds
  - [\#19188](https://github.com/scipy/scipy/issues/19188): DOC: 1D arrays with KDTree
  - [\#19190](https://github.com/scipy/scipy/issues/19190): TST: skip reason incorrect in some cases, related to array API...
  - [\#19193](https://github.com/scipy/scipy/issues/19193): DOC: typo in scipy.stats.Covariance
  - [\#19241](https://github.com/scipy/scipy/issues/19241): BUG: utils from scipy.sparse.sputils are not available from scipy.sparse...
  - [\#19273](https://github.com/scipy/scipy/issues/19273): Calculation of frequencies w is not accurate when fs is default...
  - [\#19276](https://github.com/scipy/scipy/issues/19276): MAINT: array types: make \`compliance\_scipy\` more strict
  - [\#19332](https://github.com/scipy/scipy/issues/19332): ENH: help \`skewnorm.fit\` find global minimum
  - [\#19352](https://github.com/scipy/scipy/issues/19352): CI, BUILD: SciPy build failure with Cython 3.0.3 (bisected)
  - [\#19363](https://github.com/scipy/scipy/issues/19363): DOC: inconsistent terminology at scipy.interpolate.griddata.html
  - [\#19373](https://github.com/scipy/scipy/issues/19373): DOC: interpolate: add note to BarycentricInterpolator.add\_xi...
  - [\#19396](https://github.com/scipy/scipy/issues/19396): BUG: L-BFGS-B has surprisingly high memory consumption
  - [\#19398](https://github.com/scipy/scipy/issues/19398): BUG: Missing assertion in test\_filter\_design.py
  - [\#19406](https://github.com/scipy/scipy/issues/19406): CI, MAINT: known CI issue with NumPy main/latest
  - [\#19442](https://github.com/scipy/scipy/issues/19442): BUG: Error collecting tests due to inconsistent parameterization...
  - [\#19448](https://github.com/scipy/scipy/issues/19448): DOC:fft: next\_fast\_len signature is empty in docs
  - [\#19490](https://github.com/scipy/scipy/issues/19490): MAINT: lint: fail inventory
  - [\#19544](https://github.com/scipy/scipy/issues/19544): DOC/MAINT: refguide-check errors
  - [\#19553](https://github.com/scipy/scipy/issues/19553): BUG: Test suite leaks file descriptors (\`OSError: \[Errno 24\]...
  - [\#19565](https://github.com/scipy/scipy/issues/19565): DOC/DX: \`meson-python\` missing from 'required build dependencies'
  - [\#19568](https://github.com/scipy/scipy/issues/19568): DOC/DX: \`cd scipy\` missing from 'Building from source'
  - [\#19575](https://github.com/scipy/scipy/issues/19575): BUG: scipy.ndimage.watershed\_ift cost data type is too small...
  - [\#19577](https://github.com/scipy/scipy/issues/19577): Windows build problems related to fast matrix market parts
  - [\#19599](https://github.com/scipy/scipy/issues/19599): ENH: Returning NotImplemented when multiplying sparse arrays...
  - [\#19612](https://github.com/scipy/scipy/issues/19612): ENH: add best cost function evaluation to differential evolution...
  - [\#19616](https://github.com/scipy/scipy/issues/19616): BUG: Normal Inverse Gaussian numerically unstable
  - [\#19620](https://github.com/scipy/scipy/issues/19620): \_lib: Test error in test\_warning\_calls\_filters because of a Python...
  - [\#19636](https://github.com/scipy/scipy/issues/19636): DOC: issue in documentation for the callback argument in scipy.optimize.minimize
  - [\#19640](https://github.com/scipy/scipy/issues/19640): CI, MAINT: pre-release job failures with scipy-openblas32
  - [\#19726](https://github.com/scipy/scipy/issues/19726): BUG: 1.12.0rc1: build failure on windows due to macro collision...
  - [\#19747](https://github.com/scipy/scipy/issues/19747): BUG: Invalid \`IndexError\` from \`scipy.stats.nbinom.logcdf\`
  - [\#19795](https://github.com/scipy/scipy/issues/19795): MAINT: need stable Pythran release for SciPy 1.12.0 RC2
  - [\#19804](https://github.com/scipy/scipy/issues/19804): MAINT/TST: Warnings failing test suite with \`pytest 8\`
  - [\#19852](https://github.com/scipy/scipy/issues/19852): CI, MAINT: Windows 3.11 CI failure with file access issue
  - [\#19906](https://github.com/scipy/scipy/issues/19906): BUG: 1.12.0rc2 SciPy rather than scipy in \`pip list\` output

## Pull requests for 1.12.0

  - [\#12680](https://github.com/scipy/scipy/pull/12680): ENH: stats: add nonparametric one-sample quantile test and CI
  - [\#14103](https://github.com/scipy/scipy/pull/14103): DOC: integrate: Add complex matrix DE solution to examples
  - [\#14552](https://github.com/scipy/scipy/pull/14552): BUG: Fix LSODA interpolation scheme
  - [\#17408](https://github.com/scipy/scipy/pull/17408): ENH: Short-Time Fourier Transform (STFT) Enhancements
  - [\#17452](https://github.com/scipy/scipy/pull/17452): ENH: Add the \_\_pow\_\_ operator for Rotations
  - [\#17460](https://github.com/scipy/scipy/pull/17460): ENH: New Rotation method approx\_equal()
  - [\#17473](https://github.com/scipy/scipy/pull/17473): ENH: stats: multivariate Wasserstein distance/EMD
  - [\#17495](https://github.com/scipy/scipy/pull/17495): DOC: Optimize: update DE documentation
  - [\#17542](https://github.com/scipy/scipy/pull/17542): ENH: Extend Rotation.align\_vectors() to allow an infinite weight,...
  - [\#17697](https://github.com/scipy/scipy/pull/17697): ENH: special: Improvements for the incomplete beta functions.
  - [\#17719](https://github.com/scipy/scipy/pull/17719): ENH: Add Chandrupatla's algorithm to optimize.\_zeros\_py.py to...
  - [\#17722](https://github.com/scipy/scipy/pull/17722): ENH add pava and isotonic\_regression
  - [\#17728](https://github.com/scipy/scipy/pull/17728): ENH: Implemented Rotation.from\_davenport and Rotation.as\_davenport
  - [\#17757](https://github.com/scipy/scipy/pull/17757): DOC: clarify input dimensions for \`directed\_hausdorff\` method
  - [\#17955](https://github.com/scipy/scipy/pull/17955): ENH: add simplified fast numerical inversion to stats.sampling
  - [\#18103](https://github.com/scipy/scipy/pull/18103): ENH: add stirling2 function to \`scipy.special\`
  - [\#18133](https://github.com/scipy/scipy/pull/18133): BUG: Fix fails of some tests and bad behaviour for x=zeta in...
  - [\#18151](https://github.com/scipy/scipy/pull/18151): ENH: add cumulative\_simpson integration to scipy.integrate
  - [\#18156](https://github.com/scipy/scipy/pull/18156): ENH: Added loggamma entropy method
  - [\#18197](https://github.com/scipy/scipy/pull/18197): ENH: Add derivatives for BarycentricInterpolator
  - [\#18219](https://github.com/scipy/scipy/pull/18219): DEP: integrate: Deprecate \`initial\` values other than None...
  - [\#18348](https://github.com/scipy/scipy/pull/18348): ENH: add private function to bracket root of monotonic function
  - [\#18361](https://github.com/scipy/scipy/pull/18361): ENH: add \`fit\` method to \`multivariate\_normal\`
  - [\#18363](https://github.com/scipy/scipy/pull/18363): ENH: stats: add Baumgartner-Weiss-Schindler test
  - [\#18376](https://github.com/scipy/scipy/pull/18376): ENH: CloughTocher2DInterpolator multiple times with different...
  - [\#18465](https://github.com/scipy/scipy/pull/18465): ENH: asymptotic expansion for multivariate t entropy
  - [\#18470](https://github.com/scipy/scipy/pull/18470): ENH: stats.anderson\_ksamp: re-add permutation version of test
  - [\#18477](https://github.com/scipy/scipy/pull/18477): DOC: stats.truncnorm: add example about truncation points
  - [\#18481](https://github.com/scipy/scipy/pull/18481): MAINT: differentiable fns respect float width. Closes \#15602
  - [\#18488](https://github.com/scipy/scipy/pull/18488): MAINT:ENH:sparse.linalg: Rewrite iterative solvers in Python,...
  - [\#18492](https://github.com/scipy/scipy/pull/18492): Add NdBSpline: n-dim tensor product b-spline object
  - [\#18496](https://github.com/scipy/scipy/pull/18496): ENH: Faster \_select\_samples in \_differential\_evolution.py
  - [\#18499](https://github.com/scipy/scipy/pull/18499): ENH: asymptotic expansion for beta entropy for large a and b
  - [\#18544](https://github.com/scipy/scipy/pull/18544): ENH: sparse.linalg: Implement matrix\_power()
  - [\#18552](https://github.com/scipy/scipy/pull/18552): DOC: stats.laplace\_asymmetric: note relationship between scale...
  - [\#18570](https://github.com/scipy/scipy/pull/18570): ENH:optimize: Rewrite nnls in Python
  - [\#18571](https://github.com/scipy/scipy/pull/18571): ENH: linalg: Add wrapper for \`?tgsyl\`
  - [\#18575](https://github.com/scipy/scipy/pull/18575): REL: set version to 1.12.0.dev0
  - [\#18585](https://github.com/scipy/scipy/pull/18585): DOC: stats.rv\_discrete: note that default methods are not compatible...
  - [\#18586](https://github.com/scipy/scipy/pull/18586): ENH: override sf for rdist distribution
  - [\#18587](https://github.com/scipy/scipy/pull/18587): DEP: signal: deprecate cmplx\_sort
  - [\#18589](https://github.com/scipy/scipy/pull/18589): DEP: remove parameter centered of stats.qmc.LatinHypercube
  - [\#18594](https://github.com/scipy/scipy/pull/18594): DOC: more explicit example usage of scipy.linalg.lu\_factor
  - [\#18602](https://github.com/scipy/scipy/pull/18602): MAINT: stats.hypergeom.mean: correct for large args
  - [\#18606](https://github.com/scipy/scipy/pull/18606): ENH: override sf for Pearson3 distribution
  - [\#18609](https://github.com/scipy/scipy/pull/18609): TST: update nonlin tests for sparse arrays
  - [\#18610](https://github.com/scipy/scipy/pull/18610): DEP: stats: remove deprecated binom\_test
  - [\#18612](https://github.com/scipy/scipy/pull/18612): DEP: stats.iqr: remove deprecated \`scale='raw'\`
  - [\#18613](https://github.com/scipy/scipy/pull/18613): BUG: fix ortho mode in DST type 2/3
  - [\#18614](https://github.com/scipy/scipy/pull/18614): MAINT: don't override sf for loguniform/reciprocal distribution
  - [\#18616](https://github.com/scipy/scipy/pull/18616): ENH: override sf in loglaplace distribution
  - [\#18617](https://github.com/scipy/scipy/pull/18617): MAINT: interpolate: delete duplicated FITPACK bisplev interface
  - [\#18620](https://github.com/scipy/scipy/pull/18620): MAINT: signal: avoid eval/exec in hilbert2
  - [\#18622](https://github.com/scipy/scipy/pull/18622): MAINT: Move rvs\_ratio\_uniforms to sampling
  - [\#18624](https://github.com/scipy/scipy/pull/18624): DEP: adjust deprecation of positional arguments
  - [\#18631](https://github.com/scipy/scipy/pull/18631): ENH: Add \`fast\_matrix\_market\` to scipy.io
  - [\#18633](https://github.com/scipy/scipy/pull/18633): BUG: Fix issue levy\_stable.pdf
  - [\#18640](https://github.com/scipy/scipy/pull/18640): MAINT: Fix lint warnings in \`\_traversal.pyx\`
  - [\#18641](https://github.com/scipy/scipy/pull/18641): ENH: makes \`\_covariance\` a cached property
  - [\#18649](https://github.com/scipy/scipy/pull/18649): DEP: scipy.stats.morestats: clarify deprecation warnings
  - [\#18652](https://github.com/scipy/scipy/pull/18652): BUG: Fixes how the length of argument x of linalg.blas.?gbmv...
  - [\#18653](https://github.com/scipy/scipy/pull/18653): DOC: Add missing equal sign to Lomb-Scargle periodogram equation
  - [\#18661](https://github.com/scipy/scipy/pull/18661): CI: update \`SCIPY\_NIGHTLY\_UPLOAD\_TOKEN\` on CirrusCI.
  - [\#18664](https://github.com/scipy/scipy/pull/18664): ENH: stats.dirichlet: add covariance method
  - [\#18666](https://github.com/scipy/scipy/pull/18666): DEV: update environment.yml, removing setuptools
  - [\#18667](https://github.com/scipy/scipy/pull/18667): DEV: Add Windows specific instructions to environment.yml
  - [\#18668](https://github.com/scipy/scipy/pull/18668): ENH: add machinery to support Array API
  - [\#18670](https://github.com/scipy/scipy/pull/18670): MAINT: signal: deduplicate \*ord functions
  - [\#18677](https://github.com/scipy/scipy/pull/18677): TST: linalg: improve seeding of some tests that are a problem...
  - [\#18679](https://github.com/scipy/scipy/pull/18679): MAINT:stats:Cythonize and remove Fortran statlib code
  - [\#18682](https://github.com/scipy/scipy/pull/18682): TST: stats: fix xslow test failures
  - [\#18686](https://github.com/scipy/scipy/pull/18686): DEV: Add ability to run memory benchmarks on macOS
  - [\#18689](https://github.com/scipy/scipy/pull/18689): CI: test with Python 3.12-beta
  - [\#18690](https://github.com/scipy/scipy/pull/18690): DOC: mention that \`genlogistic\` is one of several types of...
  - [\#18692](https://github.com/scipy/scipy/pull/18692): MAINT: signal: replace \`[np.r]()\["-1", arrays\]\` by a more sane...
  - [\#18694](https://github.com/scipy/scipy/pull/18694): DOC: signal: Updated Chebyshev 2 documentation
  - [\#18695](https://github.com/scipy/scipy/pull/18695): ENH: override halflogistic fit for free parameters
  - [\#18696](https://github.com/scipy/scipy/pull/18696): MAINT Fix broken link in scipy.optimize.\_differentialevolution.py
  - [\#18699](https://github.com/scipy/scipy/pull/18699): DEP: integrate: deprecate old aliases
  - [\#18705](https://github.com/scipy/scipy/pull/18705): MAINT Optimize link in scipy.optimize.\_differentialevolution.py
  - [\#18706](https://github.com/scipy/scipy/pull/18706): DOC: linalg: various doc improvements
  - [\#18708](https://github.com/scipy/scipy/pull/18708): MAINT: signal/dlsim: avoid using interp1d; use make\_interp\_spline...
  - [\#18710](https://github.com/scipy/scipy/pull/18710): MAINT: remove [np.r]()\["-1", ...\]
  - [\#18712](https://github.com/scipy/scipy/pull/18712): MAINT: bump minimal supported NumPy version to 1.22.4
  - [\#18713](https://github.com/scipy/scipy/pull/18713): MAINT: fix linter error in \`\_fitpack\_impl.py\`
  - [\#18714](https://github.com/scipy/scipy/pull/18714): ENH: Improve beta entropy when one argument is large
  - [\#18715](https://github.com/scipy/scipy/pull/18715): MAINT: signal: remove duplicated \_atleast\_2d\_or\_none
  - [\#18718](https://github.com/scipy/scipy/pull/18718): TST: mark two tests of \`lsq\_linear\` as xslow
  - [\#18719](https://github.com/scipy/scipy/pull/18719): MAINT: optimize.\_chandrupatla: result object fixup
  - [\#18720](https://github.com/scipy/scipy/pull/18720): DOC: Fix notational variation in \_lbfgsb\_py.py: "pg\_i" and "proj...
  - [\#18723](https://github.com/scipy/scipy/pull/18723): MAINT:sparse.linalg: Use \_NoValue for deprecated kwargs
  - [\#18726](https://github.com/scipy/scipy/pull/18726): ENH: improve halflogistic distribution fitting with fixed parameters
  - [\#18727](https://github.com/scipy/scipy/pull/18727): MAINT: Add skip CI link to PR template
  - [\#18728](https://github.com/scipy/scipy/pull/18728): MAINT: optimize.\_chandrupatla: refactor for code reuse
  - [\#18729](https://github.com/scipy/scipy/pull/18729): DOC: Add note connecting weibull\_min to standard exponential.
  - [\#18734](https://github.com/scipy/scipy/pull/18734): MAINT: Update codeowners
  - [\#18742](https://github.com/scipy/scipy/pull/18742): ENH: differential\_evolution callback accepts intermediate\_result
  - [\#18744](https://github.com/scipy/scipy/pull/18744): TST:sparse.linalg:Relax test\_hermitian\_modes tolerances
  - [\#18746](https://github.com/scipy/scipy/pull/18746): MAINT: forward port 1.11.0 relnotes
  - [\#18755](https://github.com/scipy/scipy/pull/18755): ENH: override isf for Burr distribution
  - [\#18756](https://github.com/scipy/scipy/pull/18756): DOC: stats.boxcox\_normmax: correct minimize -\> maximize
  - [\#18758](https://github.com/scipy/scipy/pull/18758): DOC: Document performance cliff for scipy.sparse.random
  - [\#18760](https://github.com/scipy/scipy/pull/18760): ENH: override halfnorm fit
  - [\#18764](https://github.com/scipy/scipy/pull/18764): ENH: stats: add informative error message to \`boxcox\_normmax\`...
  - [\#18771](https://github.com/scipy/scipy/pull/18771): Fix typo from \#18758
  - [\#18777](https://github.com/scipy/scipy/pull/18777): DOC: Clarify Prewitt filter
  - [\#18783](https://github.com/scipy/scipy/pull/18783): ENH: stats: Implement \_sf and \_isf for hypsecant.
  - [\#18786](https://github.com/scipy/scipy/pull/18786): MAINT: forward port 1.11.1 relnotes
  - [\#18794](https://github.com/scipy/scipy/pull/18794): MAINT: fix \`halflogistic.fit\` for bad location guess
  - [\#18795](https://github.com/scipy/scipy/pull/18795): BUG, DOC: Correct \`adsurl\` value and add a general \`url\`...
  - [\#18799](https://github.com/scipy/scipy/pull/18799): ENH: simplify \`gausshyper.pdf\`
  - [\#18802](https://github.com/scipy/scipy/pull/18802): MAINT: Use \`sparse.diags\` instead of \`spdiags\` internally.
  - [\#18803](https://github.com/scipy/scipy/pull/18803): MAINT: \`rv\_discrete\` should raise with duplicate \`xk\` in...
  - [\#18807](https://github.com/scipy/scipy/pull/18807): ENH: remove unnecessary root-find from skewnorm
  - [\#18808](https://github.com/scipy/scipy/pull/18808): TST: test for gh-18800
  - [\#18812](https://github.com/scipy/scipy/pull/18812): DEP: linalg: sharpen deprecation warning for pinv {,r}cond
  - [\#18814](https://github.com/scipy/scipy/pull/18814): DOC: update windows instructions and move conda/mamba
  - [\#18815](https://github.com/scipy/scipy/pull/18815): ENH:stats: Add \_isf method to loglaplace
  - [\#18816](https://github.com/scipy/scipy/pull/18816): ENH:stats: Add \_isf method to lognorm
  - [\#18817](https://github.com/scipy/scipy/pull/18817): DOC: Fix examples in randint description
  - [\#18818](https://github.com/scipy/scipy/pull/18818): MAINT: Simplify codespaces env activation
  - [\#18819](https://github.com/scipy/scipy/pull/18819): TST: stats.dgamma.pdf: adjust test that fails intermittently
  - [\#18820](https://github.com/scipy/scipy/pull/18820): ENH:stats: Add \_isf method to pareto
  - [\#18822](https://github.com/scipy/scipy/pull/18822): ENH:stats: Add \_sf and \_isf methods to kappa3
  - [\#18823](https://github.com/scipy/scipy/pull/18823): ENH:stats: Add \_isf method to lomax
  - [\#18824](https://github.com/scipy/scipy/pull/18824): ENH: override halfcauchy distribution fit
  - [\#18826](https://github.com/scipy/scipy/pull/18826): DEP: linalg: use \_NoValue for eigh/eigvalsh positional argument...
  - [\#18829](https://github.com/scipy/scipy/pull/18829): ENH: optimize: vectorized minimization of univariate functions
  - [\#18830](https://github.com/scipy/scipy/pull/18830): DOC: soften wording on import guidelines, mention lazy loading
  - [\#18833](https://github.com/scipy/scipy/pull/18833): ENH: optimize: release the GIL while computing the LSAP solution
  - [\#18835](https://github.com/scipy/scipy/pull/18835): DEP: scipy.stats.stats: clarify deprecation warnings
  - [\#18840](https://github.com/scipy/scipy/pull/18840): MAINT: stats.burr12: moments are undefined when c\*d \<= order
  - [\#18841](https://github.com/scipy/scipy/pull/18841): MAINT: \*sctype\* replace NumPy 2.0
  - [\#18843](https://github.com/scipy/scipy/pull/18843): DEP: vendor sklearn's mechanism to deprecate passing kwargs positionally
  - [\#18846](https://github.com/scipy/scipy/pull/18846): MAINT: Reduce file size of the SVG files included in \`signal.rst\`
  - [\#18847](https://github.com/scipy/scipy/pull/18847): MAINT: ptp no method for NumPy 2.0
  - [\#18848](https://github.com/scipy/scipy/pull/18848): ENH: add compile and link args to \`show\_config\` output
  - [\#18850](https://github.com/scipy/scipy/pull/18850): ENH: improve performance of \`SphericalVoronoi\` area calculation
  - [\#18852](https://github.com/scipy/scipy/pull/18852): BUG: fix overflow in stats.yeojohnson
  - [\#18853](https://github.com/scipy/scipy/pull/18853): BENCH: Remove factorial benchmarks
  - [\#18854](https://github.com/scipy/scipy/pull/18854): MAINT: signal: lighten the notation in lsim
  - [\#18856](https://github.com/scipy/scipy/pull/18856): MAINT: Remove more runtests.py stuff
  - [\#18858](https://github.com/scipy/scipy/pull/18858): MAINT: clean up views/strides/dtypes utilities in \`cluster.hierarcy\`
  - [\#18861](https://github.com/scipy/scipy/pull/18861): MAINT: avoid \`np.deprecate\` and \`np.core\`, add \`normalize\_axis\_index\`...
  - [\#18862](https://github.com/scipy/scipy/pull/18862): ENH: sparse arrays for hstack, vstack, bmat, block\_diag. New...
  - [\#18863](https://github.com/scipy/scipy/pull/18863): DEP: remove extra np.deprecate and add docs back
  - [\#18872](https://github.com/scipy/scipy/pull/18872): DOC: Add relationship between Fisk (log-logistic) and logistic.
  - [\#18873](https://github.com/scipy/scipy/pull/18873): DOC: add more cross compilation details
  - [\#18885](https://github.com/scipy/scipy/pull/18885): DOC: minor issues in install commands
  - [\#18886](https://github.com/scipy/scipy/pull/18886): MAINT/DOC: remove docstring issues in ndimage
  - [\#18887](https://github.com/scipy/scipy/pull/18887): DOC: tab sync based on same tab name using \`\`sync\`\` statement
  - [\#18888](https://github.com/scipy/scipy/pull/18888): MAINT: Set RAM requirement for Codespaces
  - [\#18889](https://github.com/scipy/scipy/pull/18889): CI: Add prerelease build with 64bit OpenBLAS nightly
  - [\#18893](https://github.com/scipy/scipy/pull/18893): ENH: Geometric quality metrics for random sampling
  - [\#18898](https://github.com/scipy/scipy/pull/18898): DOC: fix sparse docs "matrix" and "array" mixup
  - [\#18905](https://github.com/scipy/scipy/pull/18905): DOC: Clarify DOF in f-distribution notes
  - [\#18910](https://github.com/scipy/scipy/pull/18910): DOC: from CONTRIBUTING.rst link to SciPy website
  - [\#18911](https://github.com/scipy/scipy/pull/18911): DOC/MAINT: \`special\` doc fixes
  - [\#18914](https://github.com/scipy/scipy/pull/18914): ENH: Enhance \`dev.py\` by adding command to query PYTHONPATH
  - [\#18916](https://github.com/scipy/scipy/pull/18916): DEP: stats: improve deprecation of private but present modules
  - [\#18917](https://github.com/scipy/scipy/pull/18917): ENH: move {c, q}spline\_1d to use sosfilt/lfilter
  - [\#18920](https://github.com/scipy/scipy/pull/18920): DOC: indicate functions with multiple valid solutions in csgraph
  - [\#18927](https://github.com/scipy/scipy/pull/18927): TST: use Hypothesis for property-based tests
  - [\#18929](https://github.com/scipy/scipy/pull/18929): ENH: change sparse dok from subclass of dict to have attribute...
  - [\#18930](https://github.com/scipy/scipy/pull/18930): ENH: \_lib.\_util: make \_lazywhere compatible with Array API
  - [\#18931](https://github.com/scipy/scipy/pull/18931): MAINT: cleanup redundant tests for \`vonmises.fit\`
  - [\#18932](https://github.com/scipy/scipy/pull/18932): DEP: deprecate positional arguments for some methods in signal.\_fir\_f…
  - [\#18933](https://github.com/scipy/scipy/pull/18933): DEP: deprecate positional arguments for special.comb
  - [\#18934](https://github.com/scipy/scipy/pull/18934): DEP: deprecate positional arguments for some methods in sparse.linalg…
  - [\#18935](https://github.com/scipy/scipy/pull/18935): DEP: deprecate positional arguments for linalg.pinv
  - [\#18936](https://github.com/scipy/scipy/pull/18936): DEP: deprecate positional arguments for stats.kendalltau
  - [\#18942](https://github.com/scipy/scipy/pull/18942): CI: Change OpenBLAS nightly wheel location
  - [\#18943](https://github.com/scipy/scipy/pull/18943): DEP: sparse.linalg: deprecate positional arguments for gcrotmk,...
  - [\#18946](https://github.com/scipy/scipy/pull/18946): DEP: linalg: deprecate positional args for eigh/eigvalsh
  - [\#18948](https://github.com/scipy/scipy/pull/18948): ENH: Jones and Faddy Skew-T distribution
  - [\#18949](https://github.com/scipy/scipy/pull/18949): DOC: stats.FitResult.plot: add example
  - [\#18952](https://github.com/scipy/scipy/pull/18952): MAINT: Remove \`.\_is\_array\` since there's now: \`isinstance(x,...
  - [\#18954](https://github.com/scipy/scipy/pull/18954): BENCH: update/rewrite lobpcg benchmark sparse\_linalg\_lobpcg.py
  - [\#18955](https://github.com/scipy/scipy/pull/18955): MAINT/DOC: spatial: Document and test the double cover property...
  - [\#18958](https://github.com/scipy/scipy/pull/18958): MAINT: optimize.differential\_evolution: clarify that bounds must...
  - [\#18962](https://github.com/scipy/scipy/pull/18962): Update name of coverage action
  - [\#18963](https://github.com/scipy/scipy/pull/18963): ENH:sparse.linalg: Add LaplacianNd class to special sparse arrays
  - [\#18967](https://github.com/scipy/scipy/pull/18967): MAINT: redefine \`PyArray\_MAX\`/\`PyArray\_MIN\` because they...
  - [\#18968](https://github.com/scipy/scipy/pull/18968): DEP: optimize: improve deprecation of private modules named without...
  - [\#18970](https://github.com/scipy/scipy/pull/18970): DEP: integrate: improve deprecation of private modules named...
  - [\#18973](https://github.com/scipy/scipy/pull/18973): MAINT: linalg: remove a stray np.cast
  - [\#18975](https://github.com/scipy/scipy/pull/18975): ENH: Port scipy to use new numpy complex types
  - [\#18977](https://github.com/scipy/scipy/pull/18977): ENH: Expose c1 and c2 of scalar\_search\_wolfe to fmin\_bfgs
  - [\#18986](https://github.com/scipy/scipy/pull/18986): ENH: add possibility to fix parameters in multivariate normal...
  - [\#18992](https://github.com/scipy/scipy/pull/18992): DEP: interpolate: improve deprecation of private modules named...
  - [\#18995](https://github.com/scipy/scipy/pull/18995): DOC: stats.lognorm: add example of the relationship between norm...
  - [\#18996](https://github.com/scipy/scipy/pull/18996): ENH: optimize.curve\_fit: reduce overhead of lightweight memoization
  - [\#18997](https://github.com/scipy/scipy/pull/18997): DOC: add \`noexcept\` to \`cython\_optimize\` docs
  - [\#19000](https://github.com/scipy/scipy/pull/19000): MAINT: fft: rename \`test\_numpy.py\` to \`test\_basic.py\`
  - [\#19005](https://github.com/scipy/scipy/pull/19005): ENH: fft: support array API standard
  - [\#19007](https://github.com/scipy/scipy/pull/19007): BLD: Add venv to .gitignore
  - [\#19010](https://github.com/scipy/scipy/pull/19010): DOC/MAINT: typo: change Azure reference to Cirrus
  - [\#19012](https://github.com/scipy/scipy/pull/19012): DOC: stats.mannwhitneyu: address apparent sign inconsistency...
  - [\#19013](https://github.com/scipy/scipy/pull/19013): DOCS: Fixed typo in \_fitpack2.py
  - [\#19014](https://github.com/scipy/scipy/pull/19014): MAINT: copy, array-api compatible utility function
  - [\#19015](https://github.com/scipy/scipy/pull/19015): ENH: Update numpy exceptions imports
  - [\#19018](https://github.com/scipy/scipy/pull/19018): TST/BUG: fix array API test skip decorators
  - [\#19023](https://github.com/scipy/scipy/pull/19023): ENH: special: dispatch to array library
  - [\#19030](https://github.com/scipy/scipy/pull/19030): MAINT: replace \`optparse\` usage with \`argparse\`
  - [\#19033](https://github.com/scipy/scipy/pull/19033): MAINT: Fix codespaces setup.sh script
  - [\#19035](https://github.com/scipy/scipy/pull/19035): DEP: linalg: improve deprecation of private modules named without...
  - [\#19045](https://github.com/scipy/scipy/pull/19045): MAINT: Change \`add\_newdoc\` import and remove \`NINF\`
  - [\#19047](https://github.com/scipy/scipy/pull/19047): Corrected a grammatical error in the docstring of class DOP853
  - [\#19050](https://github.com/scipy/scipy/pull/19050): CI/BLD: make nightly wheels daily closes \#19048
  - [\#19051](https://github.com/scipy/scipy/pull/19051): ENH: array agnostic \`cov\`, used in \`cluster\`
  - [\#19052](https://github.com/scipy/scipy/pull/19052): BENCH: update asv, fail benchmark CI on errors, fix fallout
  - [\#19053](https://github.com/scipy/scipy/pull/19053): CI: cirrus mods
  - [\#19055](https://github.com/scipy/scipy/pull/19055): MAINT: use \`copy\` utility from \#19014 in \`cluster\`
  - [\#19057](https://github.com/scipy/scipy/pull/19057): ENH: add computing a selected number m of extreme eigenpairs...
  - [\#19060](https://github.com/scipy/scipy/pull/19060): MAINT: port minpack2.dcsrch from Fortran to Python, remove Fortran...
  - [\#19061](https://github.com/scipy/scipy/pull/19061): DOC: spell NaN -\> nan
  - [\#19062](https://github.com/scipy/scipy/pull/19062): BLD: Replace complex occurences with singlecomplex in SuperLU
  - [\#19064](https://github.com/scipy/scipy/pull/19064): TST: bump tolerance of \`TestTruncexpon.test\_is\_isf\` a little
  - [\#19066](https://github.com/scipy/scipy/pull/19066): Update dfovec.py case 20 for zero indexing
  - [\#19067](https://github.com/scipy/scipy/pull/19067): DEP: remove all deprecated \`scipy.\<numpy-func\>\` objects
  - [\#19070](https://github.com/scipy/scipy/pull/19070): DEP: odr: improved deprecation of private modules
  - [\#19073](https://github.com/scipy/scipy/pull/19073): DOC: remove reference to no longer imported numpy funcs
  - [\#19074](https://github.com/scipy/scipy/pull/19074): TST: add regression test for sqrtm unexpectedly converting to...
  - [\#19078](https://github.com/scipy/scipy/pull/19078): ENH: Reflect changes from numpy namespace refactor part 3
  - [\#19081](https://github.com/scipy/scipy/pull/19081): ENH: optimize: c1 and c2 of scalar\_search\_wolfe to cg and newton-cg
  - [\#19083](https://github.com/scipy/scipy/pull/19083): MAINT: forward port 1.11.2 relnotes
  - [\#19086](https://github.com/scipy/scipy/pull/19086): BLD: tweaks to build dependencies and 3.12 classifier in pyproject.toml
  - [\#19087](https://github.com/scipy/scipy/pull/19087): DOC: add info about usage of ccache for benchmarks
  - [\#19089](https://github.com/scipy/scipy/pull/19089): DOC: add comment on args in solve\_ivp (\#18876)
  - [\#19091](https://github.com/scipy/scipy/pull/19091): MAINT: optimize.root\_scalar: handle args when method is newton...
  - [\#19093](https://github.com/scipy/scipy/pull/19093): MAINT: stats.zscore: return correct result when 0th element is...
  - [\#19094](https://github.com/scipy/scipy/pull/19094): BUG: optimize: update incorrect c1 value
  - [\#19095](https://github.com/scipy/scipy/pull/19095): ENH: optimize: add inv Hess estimate in BFGS
  - [\#19100](https://github.com/scipy/scipy/pull/19100): MAINT: Move \`trapezoid\` implementation to SciPy
  - [\#19104](https://github.com/scipy/scipy/pull/19104): MAINT: fix the CT subclass benchmark
  - [\#19110](https://github.com/scipy/scipy/pull/19110): MAINT: Remove usages of np.row\_stack and np.in1d
  - [\#19113](https://github.com/scipy/scipy/pull/19113): MAINT, TST: default\_rng few tests
  - [\#19115](https://github.com/scipy/scipy/pull/19115): ENH, TST: Use explicit imports in docstring examples
  - [\#19127](https://github.com/scipy/scipy/pull/19127): DOC: linalg: fix typos in pinv docs
  - [\#19128](https://github.com/scipy/scipy/pull/19128): ENH: optimize: add method attribute to result object from root\_scalar...
  - [\#19129](https://github.com/scipy/scipy/pull/19129): DOC:Added Examples To \`combine\_pvalues\` and \`fhtoffset\`
  - [\#19136](https://github.com/scipy/scipy/pull/19136): MAINT: remove NumPy infty alias
  - [\#19141](https://github.com/scipy/scipy/pull/19141): MAINT: more NumPy API shims
  - [\#19143](https://github.com/scipy/scipy/pull/19143): MAINT: remove asfarray usage
  - [\#19146](https://github.com/scipy/scipy/pull/19146): DOC: sparse.linalg: Enhance lobpcg documentation with updated...
  - [\#19152](https://github.com/scipy/scipy/pull/19152): DOC: fix predeces(s)or typo.
  - [\#19157](https://github.com/scipy/scipy/pull/19157): TST: add array-agnostic assertions
  - [\#19162](https://github.com/scipy/scipy/pull/19162): ENH: Allow \`sparse\_mtx.transpose(axes=(1, 0))\`
  - [\#19165](https://github.com/scipy/scipy/pull/19165): DEP: improve deprecation warnings for constants module
  - [\#19166](https://github.com/scipy/scipy/pull/19166): MAINT: Reflect changes from \`numpy\` namespace refactor Part...
  - [\#19168](https://github.com/scipy/scipy/pull/19168): BLD: special: fix dependencies for \`\_ellip\_harm\_2\`
  - [\#19170](https://github.com/scipy/scipy/pull/19170): MAINT: fix a number of issues in Cython code
  - [\#19171](https://github.com/scipy/scipy/pull/19171): ENH: constructors for sparse arrays
  - [\#19172](https://github.com/scipy/scipy/pull/19172): MAINT: Spherical Voronoi sort simplify
  - [\#19173](https://github.com/scipy/scipy/pull/19173): MAINT: integrate.\_tanhsinh: improvements after further testing
  - [\#19175](https://github.com/scipy/scipy/pull/19175): DOC: stats: Correct levy\_stable loc-scale note
  - [\#19178](https://github.com/scipy/scipy/pull/19178): MAINT/DOC: add \`fit\` to multivariate normal methods in documentation
  - [\#19179](https://github.com/scipy/scipy/pull/19179): DOC: Added example for tf2zpk function
  - [\#19183](https://github.com/scipy/scipy/pull/19183): MAINT: Import \`fromarrays\` from \`rec\`
  - [\#19184](https://github.com/scipy/scipy/pull/19184): TST: fix sparse constructor test with large memory footprint
  - [\#19186](https://github.com/scipy/scipy/pull/19186): TST: \_lib: improve array API assertions
  - [\#19187](https://github.com/scipy/scipy/pull/19187): BUG: accept \`np\`-coercible array-likes with array API flag...
  - [\#19191](https://github.com/scipy/scipy/pull/19191): BLD: update minimum versions of meson-python and pythran
  - [\#19192](https://github.com/scipy/scipy/pull/19192): TST: test tolerance bumps to fix reported failures
  - [\#19194](https://github.com/scipy/scipy/pull/19194): BUG/TST: fix \`test\_array\_api\` for \`cupy\`
  - [\#19195](https://github.com/scipy/scipy/pull/19195): DOC: Fixed typo in scipy.stats.Covariance
  - [\#19198](https://github.com/scipy/scipy/pull/19198): DOC: optimize.minimize\_scalar: note limitations and suggest alternatives
  - [\#19201](https://github.com/scipy/scipy/pull/19201): DOC: missing backticks
  - [\#19202](https://github.com/scipy/scipy/pull/19202): DOC: remove old mention to Python 2.
  - [\#19203](https://github.com/scipy/scipy/pull/19203): DOC: Fix \_nan\_allsame example prompt.
  - [\#19204](https://github.com/scipy/scipy/pull/19204): DOC: missing (and stray) backtick in mannwhitneyu
  - [\#19206](https://github.com/scipy/scipy/pull/19206): TST, MAINT: skip fix for array API tests
  - [\#19217](https://github.com/scipy/scipy/pull/19217): BLD: start building wheels against numpy 2.0 \[wheel build\]
  - [\#19218](https://github.com/scipy/scipy/pull/19218): DOC: Added examples for zpk2tf, tf2sos, sos2tf, lp2lp\_zpk, lp2hp\_zpk,...
  - [\#19219](https://github.com/scipy/scipy/pull/19219): ENH: Implemented custom mutation / crossover functions for DifferentialEvolution
  - [\#19222](https://github.com/scipy/scipy/pull/19222): DOC: clarify guidance on style modifications
  - [\#19224](https://github.com/scipy/scipy/pull/19224): BUG: integrate: expose ODEintWarning
  - [\#19226](https://github.com/scipy/scipy/pull/19226): DEP: improve message for deprecated private API for \`sparse\`
  - [\#19227](https://github.com/scipy/scipy/pull/19227): DOC: Trailing character after closing backquote.
  - [\#19229](https://github.com/scipy/scipy/pull/19229): DOC: Fix repeated typos in dev.py
  - [\#19233](https://github.com/scipy/scipy/pull/19233): DOC: Fix character after trailing backticks
  - [\#19236](https://github.com/scipy/scipy/pull/19236): BUG: Remove removed item from \`\_\_all\_\_\`
  - [\#19237](https://github.com/scipy/scipy/pull/19237): DOC: Missing import in private \_nan\_allsame function docs.
  - [\#19240](https://github.com/scipy/scipy/pull/19240): DEP: spatial: improve deprecation of private modules without...
  - [\#19243](https://github.com/scipy/scipy/pull/19243): DOC: stats: fix documentation of warnings raised by pearsonr
  - [\#19244](https://github.com/scipy/scipy/pull/19244): MAINT: scipy.io NEP 50 shims
  - [\#19247](https://github.com/scipy/scipy/pull/19247): MAINT: NumPy version check removals
  - [\#19251](https://github.com/scipy/scipy/pull/19251): TST/MAINT: cluster: use new array API assertions
  - [\#19253](https://github.com/scipy/scipy/pull/19253): MAINT: Cleanup expired ndarray methods
  - [\#19256](https://github.com/scipy/scipy/pull/19256): DOC: Added examples for correlation, num\_obs\_dm, num\_obs\_y functions.
  - [\#19259](https://github.com/scipy/scipy/pull/19259): DOC: outline workaround when precision losses occur in BFGS \[skip...
  - [\#19261](https://github.com/scipy/scipy/pull/19261): MAINT: fft: refactor basic backend with \`\_execute\_1D\`
  - [\#19262](https://github.com/scipy/scipy/pull/19262): MAINT: fft: clean up test-skips
  - [\#19263](https://github.com/scipy/scipy/pull/19263): ENH: fft: GPU support for non-standard basic transforms
  - [\#19264](https://github.com/scipy/scipy/pull/19264): MAINT/TST: fft: remove duplicate namespace and dtype checks
  - [\#19265](https://github.com/scipy/scipy/pull/19265): MAINT: array API: rename \`arg\_err\_msg\` and move to \`\_lib\`
  - [\#19266](https://github.com/scipy/scipy/pull/19266): ENH: use inplace add in \_minimize\_newtoncg
  - [\#19267](https://github.com/scipy/scipy/pull/19267): MAINT: use linalg.norm in \`\_minimize\_newtoncg\`
  - [\#19270](https://github.com/scipy/scipy/pull/19270): MAINT: fix -Wdeprecated-non-prototype warnings in Cephes code
  - [\#19271](https://github.com/scipy/scipy/pull/19271): DOC: add example for \`ndimage.shift\`
  - [\#19275](https://github.com/scipy/scipy/pull/19275): MAINT: Add warning filter for \`numpy.core\` rename
  - [\#19278](https://github.com/scipy/scipy/pull/19278): DOC: use \`np.copysign()\` instead of \`np.sign()\`
  - [\#19281](https://github.com/scipy/scipy/pull/19281): DOC: add \`fft\` to list of array API supporting modules
  - [\#19282](https://github.com/scipy/scipy/pull/19282): MAINT: fft: clean up assertions
  - [\#19284](https://github.com/scipy/scipy/pull/19284): ENH: update SuperLU to version 6.0.1
  - [\#19285](https://github.com/scipy/scipy/pull/19285): MAINT fix more \`-Wdeprecate-non-prototype\` warnings
  - [\#19287](https://github.com/scipy/scipy/pull/19287): ENH: add exact=False support for stirling2
  - [\#19289](https://github.com/scipy/scipy/pull/19289): BLD: stats: improve build config for \`unuran\_wrapper\`
  - [\#19293](https://github.com/scipy/scipy/pull/19293): MAINT: optimize.\_bracket\_root: refactor and comment for clarity
  - [\#19294](https://github.com/scipy/scipy/pull/19294): MAINT: replace IOError alias with OSError
  - [\#19295](https://github.com/scipy/scipy/pull/19295): DOC: fix typos found by codespell
  - [\#19296](https://github.com/scipy/scipy/pull/19296): MAINT: fix linter issues
  - [\#19298](https://github.com/scipy/scipy/pull/19298): MAINT: replace io.open alias with built-in open
  - [\#19302](https://github.com/scipy/scipy/pull/19302): MAINT: Fix/parametrize Rotation tests.
  - [\#19304](https://github.com/scipy/scipy/pull/19304): DOC: fix page typo in ks\_2samp reference
  - [\#19310](https://github.com/scipy/scipy/pull/19310): MAINT: Remove \`[np.int]()\` and \`np.uint\`
  - [\#19311](https://github.com/scipy/scipy/pull/19311): DOC: invalid interpreted-text (missing space after closing backtick).
  - [\#19312](https://github.com/scipy/scipy/pull/19312): DOC: Misc formatting error.
  - [\#19313](https://github.com/scipy/scipy/pull/19313): DOC: And new line at end of line in CPP code.
  - [\#19314](https://github.com/scipy/scipy/pull/19314): DOC: Rst don't like list without blanklines.
  - [\#19315](https://github.com/scipy/scipy/pull/19315): MAINT: forward port 1.11.3 relnotes
  - [\#19317](https://github.com/scipy/scipy/pull/19317): MAINT: remove support for building with setup.py
  - [\#19327](https://github.com/scipy/scipy/pull/19327): ENH: Add a numerically stable logpdf function for the skewnorm...
  - [\#19331](https://github.com/scipy/scipy/pull/19331): MAINT, BLD: more setup.py cleanups
  - [\#19333](https://github.com/scipy/scipy/pull/19333): ENH: Fit skewnorms with MLE more robustly
  - [\#19340](https://github.com/scipy/scipy/pull/19340): DEP: deprecate scipy.signal wavelets
  - [\#19341](https://github.com/scipy/scipy/pull/19341): MAINT: Remove remaining \`[numpy.int]()\` and filter \`np.long\`...
  - [\#19346](https://github.com/scipy/scipy/pull/19346): MAINT: stats: fix \`differential\_entropy\` too small error behavior
  - [\#19347](https://github.com/scipy/scipy/pull/19347): BUG: fix ValueError in stats.truncpareto
  - [\#19349](https://github.com/scipy/scipy/pull/19349): MAINT: Minor fix to shim import of scipy.signal.
  - [\#19350](https://github.com/scipy/scipy/pull/19350): ENH: stats: add support for masked arrays, \`nan\_policy\`, and...
  - [\#19358](https://github.com/scipy/scipy/pull/19358): TST: SphericalVoronoi region type
  - [\#19360](https://github.com/scipy/scipy/pull/19360): BLD, MAINT: more build system cleanups
  - [\#19367](https://github.com/scipy/scipy/pull/19367): CI: avoid using Cython 3.0.3
  - [\#19371](https://github.com/scipy/scipy/pull/19371): ENH: stats.ansari: add axis / nan\_policy / keepdims support
  - [\#19376](https://github.com/scipy/scipy/pull/19376): TST: bump tolerance of \`test\_al\_mohy\_higham\_2012\_experiment\_1\`
  - [\#19380](https://github.com/scipy/scipy/pull/19380): DEV/CI: use scipy-openblas32 wheels in dev.py and some CI jobs
  - [\#19385](https://github.com/scipy/scipy/pull/19385): ENH: beta negative binomial distribution
  - [\#19390](https://github.com/scipy/scipy/pull/19390): DOC, MAINT: more distutils/build cleanups
  - [\#19391](https://github.com/scipy/scipy/pull/19391): MAINT: spatial: Change error message in KDTree to be more informative.
  - [\#19392](https://github.com/scipy/scipy/pull/19392): ENH: stats.bartlett: add axis / nan\_policy / keepdims support
  - [\#19394](https://github.com/scipy/scipy/pull/19394): MAINT: Partially revert \`[np.int]()\` changes
  - [\#19395](https://github.com/scipy/scipy/pull/19395): DEP: ndimage: improve the deprecation of private modules named...
  - [\#19399](https://github.com/scipy/scipy/pull/19399): TST: signal: add missing assertion in test\_filter\_design.py
  - [\#19402](https://github.com/scipy/scipy/pull/19402): MAINT: l-bfgs-b remove intermediate bounds array
  - [\#19409](https://github.com/scipy/scipy/pull/19409): MAINT: fix a C++ build error with GCC 13
  - [\#19410](https://github.com/scipy/scipy/pull/19410): DOC: interpolate: add note to BarycentricInterpolator.add\_xi
  - [\#19412](https://github.com/scipy/scipy/pull/19412): ENH: stats: add support for masked arrays for circular statistics...
  - [\#19414](https://github.com/scipy/scipy/pull/19414): BLD: with-scipy-openblas instead of use-scipy-openblas
  - [\#19419](https://github.com/scipy/scipy/pull/19419): ENH: SphericalVoronoi sort faster
  - [\#19422](https://github.com/scipy/scipy/pull/19422): DOC: Fix trivial typo.
  - [\#19425](https://github.com/scipy/scipy/pull/19425): ENH: stats: add masked array, axis tuple, and nan policy support...
  - [\#19426](https://github.com/scipy/scipy/pull/19426): MAINT: Update \`fft.helper\` import
  - [\#19428](https://github.com/scipy/scipy/pull/19428): ENH: stats.levene/fligner: add axis / nan\_policy / keepdims support
  - [\#19429](https://github.com/scipy/scipy/pull/19429): DOC: Fix documentation of callback function signature of scipy.optimize.minimize
  - [\#19431](https://github.com/scipy/scipy/pull/19431): MAINT: more NEP 50 shims
  - [\#19433](https://github.com/scipy/scipy/pull/19433): DOC: Add example for \`stats.hdquantiles\`
  - [\#19435](https://github.com/scipy/scipy/pull/19435): MAINT: Translate lambertw\_scalar into C++
  - [\#19439](https://github.com/scipy/scipy/pull/19439): BLD: update build dependency versions in pyproject.toml
  - [\#19440](https://github.com/scipy/scipy/pull/19440): DOC: remove unused parameter in spline\_filter docstring
  - [\#19443](https://github.com/scipy/scipy/pull/19443): TST: Fix \#19442 minimally
  - [\#19445](https://github.com/scipy/scipy/pull/19445): TST: Remove some unnecessary tuple conversions
  - [\#19449](https://github.com/scipy/scipy/pull/19449): DOC/MAINT: fft: fix signature for next\_fast\_len
  - [\#19453](https://github.com/scipy/scipy/pull/19453): Added parenthesis for accurate calculation of frequencies w when...
  - [\#19458](https://github.com/scipy/scipy/pull/19458): DOC: spatial: Rotation docs updates
  - [\#19461](https://github.com/scipy/scipy/pull/19461): DOC: dev: update max line length to 88 characters
  - [\#19465](https://github.com/scipy/scipy/pull/19465): DOC: fix broken NetCDF URL
  - [\#19466](https://github.com/scipy/scipy/pull/19466): MAINT: NumPy int type shims
  - [\#19469](https://github.com/scipy/scipy/pull/19469): DEP: special: improve deprecation of private modules named without...
  - [\#19471](https://github.com/scipy/scipy/pull/19471): MAINT: Translate binom to C++
  - [\#19472](https://github.com/scipy/scipy/pull/19472): MAINT: Update fast\_matrix\_market to 1.7.4
  - [\#19482](https://github.com/scipy/scipy/pull/19482): MAINT: Make use of sf\_error conditional on flag in scipy::special...
  - [\#19483](https://github.com/scipy/scipy/pull/19483): ENH: add max dist to NearestNDInterpolator
  - [\#19484](https://github.com/scipy/scipy/pull/19484): CI: limit scipy-openblas32 wheel to 0.3.23.293.2
  - [\#19487](https://github.com/scipy/scipy/pull/19487): ENH: stats.cramervonmises/epps\_singleton: add axis / nan\_policy...
  - [\#19489](https://github.com/scipy/scipy/pull/19489): MAINT: lint: ignore E501 (line length) by subpackage
  - [\#19491](https://github.com/scipy/scipy/pull/19491): MAINT/STY: misc: remove E501 (line length) lint ignore
  - [\#19494](https://github.com/scipy/scipy/pull/19494): MAINT/STY: \`conftest.py\`: remove E501 (line length) lint ignore
  - [\#19495](https://github.com/scipy/scipy/pull/19495): MAINT: get rid of Python 2 left-overs
  - [\#19497](https://github.com/scipy/scipy/pull/19497): CI: add '\[lint only\]', '\[docs only\]' skip tags
  - [\#19501](https://github.com/scipy/scipy/pull/19501): TST: skip test\_bootstrap\_against\_theory
  - [\#19503](https://github.com/scipy/scipy/pull/19503): MAINT/STY: fftpack: remove E501 (line length) lint ignore
  - [\#19505](https://github.com/scipy/scipy/pull/19505): MAINT/STY: \`scipyoptdoc.py\`: remove E501 (line length) lint...
  - [\#19506](https://github.com/scipy/scipy/pull/19506): MAINT: sparse: update tests to switch to format and toarray from...
  - [\#19507](https://github.com/scipy/scipy/pull/19507): MAINT/DOC: stats: fix lint errors
  - [\#19508](https://github.com/scipy/scipy/pull/19508): MAINT/DOC/BENCH: optimize: fix linter errors
  - [\#19509](https://github.com/scipy/scipy/pull/19509): MAINT: fix remaining lint errors
  - [\#19510](https://github.com/scipy/scipy/pull/19510): DEP: integrate: deprecate romberg and quadrature
  - [\#19514](https://github.com/scipy/scipy/pull/19514): MAINT/STY: odr: remove E501 (line length) lint ignore
  - [\#19515](https://github.com/scipy/scipy/pull/19515): MAINT: Restructure extra\_special (working name) as internal library
  - [\#19516](https://github.com/scipy/scipy/pull/19516): MAINT: lint: enable UP rules
  - [\#19519](https://github.com/scipy/scipy/pull/19519): DOC: Fix example used in stats tutorial
  - [\#19520](https://github.com/scipy/scipy/pull/19520): MAINT/STY: fft: remove E501 (line length) lint ignore, \`noqa\`...
  - [\#19523](https://github.com/scipy/scipy/pull/19523): MAINT/STY: constants: remove E501 (line length) lint ignore
  - [\#19525](https://github.com/scipy/scipy/pull/19525): DOC, CI: refguide may vary locs
  - [\#19527](https://github.com/scipy/scipy/pull/19527): DOC, MAINT: more refguide fixes
  - [\#19529](https://github.com/scipy/scipy/pull/19529): MAINT: blanket \`noqa\` vet
  - [\#19533](https://github.com/scipy/scipy/pull/19533): DOC: fix more typos found by codespell
  - [\#19534](https://github.com/scipy/scipy/pull/19534): MAINT: get rid of more Python 2 left-overs
  - [\#19540](https://github.com/scipy/scipy/pull/19540): DOC: \_binomtest.py: Add clearer error messages
  - [\#19546](https://github.com/scipy/scipy/pull/19546): MAINT: Fix interpolate.make\_smoothing\_spline's size validation...
  - [\#19556](https://github.com/scipy/scipy/pull/19556): DOC: revert part of bcbb18f / \#19533
  - [\#19558](https://github.com/scipy/scipy/pull/19558): MAINT: forward port 1.11.4 relnotes
  - [\#19562](https://github.com/scipy/scipy/pull/19562): MAINT: Fix typos in Rotation.from\_mrp referenced paper
  - [\#19564](https://github.com/scipy/scipy/pull/19564): MAINT: Mark in \`.gitignore\` the directories instead of their...
  - [\#19570](https://github.com/scipy/scipy/pull/19570): DOC: Fixed build instructions in index.rst (\#19568)
  - [\#19574](https://github.com/scipy/scipy/pull/19574): DOC: update Building from source docs for editable installs
  - [\#19576](https://github.com/scipy/scipy/pull/19576): BUG: Use uint32 for cost in NI\_WatershedElement
  - [\#19578](https://github.com/scipy/scipy/pull/19578): BUG: stats.\_axis\_nan\_policy\_factory: respect too\_small when detecting...
  - [\#19579](https://github.com/scipy/scipy/pull/19579): BLD:MAINT:Update dev.py message
  - [\#19581](https://github.com/scipy/scipy/pull/19581): BUG: interpolate/ndbspline: fix OOB access for len(tx) \!= len(ty)...
  - [\#19583](https://github.com/scipy/scipy/pull/19583): ENH: Use \`np.dot\` to speedup \`spatial.distance.correlation\`
  - [\#19585](https://github.com/scipy/scipy/pull/19585): DEP: improve deprecation of remaining private modules named without...
  - [\#19588](https://github.com/scipy/scipy/pull/19588): BLD:Add missing cstdin include in fast matrix market
  - [\#19589](https://github.com/scipy/scipy/pull/19589): ENH: Use \`np.dot\` to speedup \`spatial.distance.hamming\`
  - [\#19590](https://github.com/scipy/scipy/pull/19590): MAINT:special:Add more noexcept to Cython signatures
  - [\#19591](https://github.com/scipy/scipy/pull/19591): MAINT: interpolate/RGI: avoid unnecessary validation of data...
  - [\#19593](https://github.com/scipy/scipy/pull/19593): Returning NotImplemented in comparisons with sparse arrays
  - [\#19597](https://github.com/scipy/scipy/pull/19597): TST: special.\_sinpi/\_cospi: skip failing \`test\_intermediate\_overflow\`
  - [\#19600](https://github.com/scipy/scipy/pull/19600): Fix sparse multiply
  - [\#19601](https://github.com/scipy/scipy/pull/19601): ENH: Make special C++ implementations work on CUDA (and beyond\!)
  - [\#19603](https://github.com/scipy/scipy/pull/19603): DOC: doc shim for eig normalization
  - [\#19604](https://github.com/scipy/scipy/pull/19604): BUG: fix overflow in stats.boxcox\_normmax when method='mle'
  - [\#19606](https://github.com/scipy/scipy/pull/19606): MAINT: array types: restrict to boolean & numerical dtypes
  - [\#19608](https://github.com/scipy/scipy/pull/19608): MAINT/DOC: refguide-check fixes
  - [\#19609](https://github.com/scipy/scipy/pull/19609): MAINT: lint: enable line-length check (package-wide)
  - [\#19611](https://github.com/scipy/scipy/pull/19611): DOC: clarify interpolator termionolgy
  - [\#19613](https://github.com/scipy/scipy/pull/19613): MAINT: Added clang-format formatting for special C++ files
  - [\#19617](https://github.com/scipy/scipy/pull/19617): fix numerical stability
  - [\#19618](https://github.com/scipy/scipy/pull/19618): MAINT: qmc permutations win type
  - [\#19622](https://github.com/scipy/scipy/pull/19622): CI: undo cython==0.29.35 pin for the 32-bit Linux job, remove...
  - [\#19623](https://github.com/scipy/scipy/pull/19623): MAINT: lint: enable \`stacklevel\` warnings check
  - [\#19624](https://github.com/scipy/scipy/pull/19624): MAINT/TST: \_lib: use value instead of deprecated s
  - [\#19626](https://github.com/scipy/scipy/pull/19626): MAINT: more SciPy windows int shims
  - [\#19628](https://github.com/scipy/scipy/pull/19628): DOC: 1.12.0 release notes
  - [\#19635](https://github.com/scipy/scipy/pull/19635): MAINT: simplify Nakagami mean calculation
  - [\#19637](https://github.com/scipy/scipy/pull/19637): DOC: Clarify integration error bound in \`integrate\` tutorial
  - [\#19648](https://github.com/scipy/scipy/pull/19648): MAINT: simplify chi distribution mean calculation
  - [\#19651](https://github.com/scipy/scipy/pull/19651): MAINT: stats.entropy: silence mypy
  - [\#19656](https://github.com/scipy/scipy/pull/19656): BUG: Remove unnecessary incref on unrelated type
  - [\#19658](https://github.com/scipy/scipy/pull/19658): MAINT: git blame ignores for lint clean-ups
  - [\#19660](https://github.com/scipy/scipy/pull/19660): STY: special: use indent width of 4 in clang-format
  - [\#19661](https://github.com/scipy/scipy/pull/19661): CI: fix pre-release job by correct version pin for scipy-openblas32
  - [\#19670](https://github.com/scipy/scipy/pull/19670): MAINT: version bounds for 1.12.0rc1
  - [\#19677](https://github.com/scipy/scipy/pull/19677): DOC: array types: mention partial support in \`special\`
  - [\#19686](https://github.com/scipy/scipy/pull/19686): TST: fix incorrect signal.sosfilt tests
  - [\#19690](https://github.com/scipy/scipy/pull/19690): BLD: avoid fast-math for oneAPI compilers, fix up handling of...
  - [\#19691](https://github.com/scipy/scipy/pull/19691): BUG: fix negative overflow in stats.boxcox\_normmax
  - [\#19693](https://github.com/scipy/scipy/pull/19693): BUG: Prevent mutation of \`w\` parameter in \`spatial.distance.\*\`
  - [\#19702](https://github.com/scipy/scipy/pull/19702): DEP: Adopt \`\*tol\` deprecations also for \`gcrotmk/lgmres/minres/tfqmr\`
  - [\#19709](https://github.com/scipy/scipy/pull/19709): MAINT: Cumulative simpson follow-up comments
  - [\#19735](https://github.com/scipy/scipy/pull/19735): DOC: update release notes with all deprecations for 1.12 release
  - [\#19748](https://github.com/scipy/scipy/pull/19748): TST: skip RGI(..., method="pchip" for complex values)
  - [\#19751](https://github.com/scipy/scipy/pull/19751): BUG: Make FMM classes \`py::module\_local\` (fix for 1.12RC)
  - [\#19761](https://github.com/scipy/scipy/pull/19761): MAINT: Avoid use of aligned\_alloc in pocketfft on windows
  - [\#19779](https://github.com/scipy/scipy/pull/19779): BUG: Fix \`nbinom.logcdf\` for invalid input
  - [\#19785](https://github.com/scipy/scipy/pull/19785): BUG: support sparse Hessian in \`Newton-CG\`
  - [\#19797](https://github.com/scipy/scipy/pull/19797): MAINT: 1.12.0rc2 prep
  - [\#19800](https://github.com/scipy/scipy/pull/19800): TST: loosen tolerances for tests that fail otherwise on windows+MKL
  - [\#19806](https://github.com/scipy/scipy/pull/19806): TST: fix compatibility with pytest 8
  - [\#19830](https://github.com/scipy/scipy/pull/19830): REL: bump copyright to 2024
  - [\#19842](https://github.com/scipy/scipy/pull/19842): TST: move reference data for test\_real\_transforms to a fixture
  - [\#19859](https://github.com/scipy/scipy/pull/19859): BLD: improve scipy-openblas dependency check
  - [\#19877](https://github.com/scipy/scipy/pull/19877): DOC: 1.12 release notes tweaks
  - [\#19881](https://github.com/scipy/scipy/pull/19881): Revert "ENH: stats.wasserstein\_distance: multivariate Wasserstein...
  - [\#19892](https://github.com/scipy/scipy/pull/19892): DEP: extend some announced deprecations due to out-of-band 1.13...
  - [\#19903](https://github.com/scipy/scipy/pull/19903): DEP: reflect extended deprecations also in release notes
  - [\#19910](https://github.com/scipy/scipy/pull/19910): BLD: ensure the name of the installed \`scipy\` package is lower-case

---

1.13.0-notes.md

---

# SciPy 1.13.0 Release Notes

<div class="contents">

</div>

SciPy 1.13.0 is the culmination of 3 months of hard work. This out-of-band release aims to support NumPy `2.0.0`, and is backwards compatible to NumPy `1.22.4`. The version of OpenBLAS used to build the PyPI wheels has been increased to `0.3.26.dev`.

This release requires Python 3.9+ and NumPy 1.22.4 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - Support for NumPy `2.0.0`.
  - Interactive examples have been added to the documentation, allowing users to run the examples locally on embedded Jupyterlite notebooks in their browser.
  - Preliminary 1D array support for the COO and DOK sparse formats.
  - Several <span class="title-ref">scipy.stats</span> functions have gained support for additional `axis`, `nan_policy`, and `keepdims` arguments. <span class="title-ref">scipy.stats</span> also has several performance and accuracy improvements.

## New features

### <span class="title-ref">scipy.integrate</span> improvements

  - The `terminal` attribute of <span class="title-ref">scipy.integrate.solve\_ivp</span> `events` callables now additionally accepts integer values to specify a number of occurrences required for termination, rather than the previous restriction of only accepting a `bool` value to terminate on the first registered event.

### <span class="title-ref">scipy.io</span> improvements

  - <span class="title-ref">scipy.io.wavfile.write</span> has improved `dtype` input validation.

### <span class="title-ref">scipy.interpolate</span> improvements

  - The Modified Akima Interpolation has been added to `interpolate.Akima1DInterpolator`, available via the new `method` argument.
  - New method `BSpline.insert_knot` inserts a knot into a `BSpline` instance. This routine is similar to the module-level <span class="title-ref">scipy.interpolate.insert</span> function, and works with the BSpline objects instead of `tck` tuples.
  - `RegularGridInterpolator` gained the functionality to compute derivatives in place. For instance, `RegularGridInterolator((x, y), values, method="cubic")(xi, nu=(1, 1))` evaluates the mixed second derivative, \(\partial^2 / \partial x \partial y\) at `xi`.
  - Performance characteristics of tensor-product spline methods of `RegularGridInterpolator` have been changed: evaluations should be significantly faster, while construction might be slower. If you experience issues with construction times, you may need to experiment with optional keyword arguments `solver` and `solver_args`. Previous behavior (fast construction, slow evaluations) can be obtained via <span class="title-ref">"\*\_legacy"</span> methods: `method="cubic_legacy"` is exactly equivalent to `method="cubic"` in previous releases. See `gh-19633` for details.

### <span class="title-ref">scipy.signal</span> improvements

  - Many filter design functions now have improved input validation for the sampling frequency (`fs`).

### <span class="title-ref">scipy.sparse</span> improvements

  - `coo_array` now supports 1D shapes, and has additional 1D support for `min`, `max`, `argmin`, and `argmax`. The DOK format now has preliminary 1D support as well, though only supports simple integer indices at the time of writing.
  - Experimental support has been added for `pydata/sparse` array inputs to <span class="title-ref">scipy.sparse.csgraph</span>.
  - `dok_array` and `dok_matrix` now have proper implementations of `fromkeys`.
  - `csr` and `csc` formats now have improved `setdiag` performance.

### <span class="title-ref">scipy.spatial</span> improvements

  - `voronoi_plot_2d` now draws Voronoi edges to infinity more clearly when the aspect ratio is skewed.

### <span class="title-ref">scipy.special</span> improvements

  - All Fortran code, namely, `AMOS`, `specfun`, and `cdflib` libraries that the majority of special functions depend on, is ported to Cython/C.
  - The function `factorialk` now also supports faster, approximate calculation using `exact=False`.

### <span class="title-ref">scipy.stats</span> improvements

  - <span class="title-ref">scipy.stats.rankdata</span> and <span class="title-ref">scipy.stats.wilcoxon</span> have been vectorized, improving their performance and the performance of hypothesis tests that depend on them.
  - `stats.mannwhitneyu` should now be faster due to a vectorized statistic calculation, improved caching, improved exploitation of symmetry, and a memory reduction. `PermutationMethod` support was also added.
  - <span class="title-ref">scipy.stats.mood</span> now has `nan_policy` and `keepdims` support.
  - <span class="title-ref">scipy.stats.brunnermunzel</span> now has `axis` and `keepdims` support.
  - <span class="title-ref">scipy.stats.friedmanchisquare</span>, <span class="title-ref">scipy.stats.shapiro</span>, <span class="title-ref">scipy.stats.normaltest</span>, <span class="title-ref">scipy.stats.skewtest</span>, <span class="title-ref">scipy.stats.kurtosistest</span>, <span class="title-ref">scipy.stats.f\_oneway</span>, <span class="title-ref">scipy.stats.alexandergovern</span>, <span class="title-ref">scipy.stats.combine\_pvalues</span>, and <span class="title-ref">scipy.stats.kstest</span> have gained `axis`, `nan_policy` and `keepdims` support.
  - <span class="title-ref">scipy.stats.boxcox\_normmax</span> has gained a `ymax` parameter to allow user specification of the maximum value of the transformed data.
  - <span class="title-ref">scipy.stats.vonmises</span> `pdf` method has been extended to support `kappa=0`. The `fit` method is also more performant due to the use of non-trivial bounds to solve for `kappa`.
  - High order `moment` calculations for <span class="title-ref">scipy.stats.powerlaw</span> are now more accurate.
  - The `fit` methods of <span class="title-ref">scipy.stats.gamma</span> (with `method='mm'`) and <span class="title-ref">scipy.stats.loglaplace</span> are faster and more reliable.
  - <span class="title-ref">scipy.stats.goodness\_of\_fit</span> now supports the use of a custom `statistic` provided by the user.
  - <span class="title-ref">scipy.stats.wilcoxon</span> now supports `PermutationMethod`, enabling calculation of accurate p-values in the presence of ties and zeros.
  - <span class="title-ref">scipy.stats.monte\_carlo\_test</span> now has improved robustness in the face of numerical noise.
  - <span class="title-ref">scipy.stats.wasserstein\_distance\_nd</span> was introduced to compute the Wasserstein-1 distance between two N-D discrete distributions.

## Deprecated features

  - Complex dtypes in `PchipInterpolator` and `Akima1DInterpolator` have been deprecated and will raise an error in SciPy 1.15.0. If you are trying to use the real components of the passed array, use `np.real` on `y`.
  - Non-integer values of `n` together with `exact=True` are deprecated for <span class="title-ref">scipy.special.factorial</span>.

## Expired Deprecations

There is an ongoing effort to follow through on long-standing deprecations. The following previously deprecated features are affected:

  - `scipy.signal.{lsim2,impulse2,step2}` have been removed in favour of `scipy.signal.{lsim,impulse,step}`.
  - Window functions can no longer be imported from the <span class="title-ref">scipy.signal</span> namespace and instead should be accessed through either <span class="title-ref">scipy.signal.windows</span> or <span class="title-ref">scipy.signal.get\_window</span>.
  - <span class="title-ref">scipy.sparse</span> no longer supports multi-Ellipsis indexing
  - `scipy.signal.{bspline,quadratic,cubic}` have been removed in favour of alternatives in <span class="title-ref">scipy.interpolate</span>.
  - `scipy.linalg.tri{,u,l}` have been removed in favour of `numpy.tri{,u,l}`.
  - Non-integer arrays in <span class="title-ref">scipy.special.factorial</span> with `exact=True` now raise an error.
  - Functions from NumPy's main namespace which were exposed in SciPy's main namespace, such as `numpy.histogram` exposed by `scipy.histogram`, have been removed from SciPy's main namespace. Please use the functions directly from `numpy`. This was originally performed for SciPy 1.12.0 however was missed from the release notes so is included here for completeness.

## Backwards incompatible changes

## Other changes

  - The second argument of <span class="title-ref">scipy.stats.moment</span> has been renamed to `order` while maintaining backward compatibility.

## Authors

  - Name (commits)
  - h-vetinari (50)
  - acceptacross (1) +
  - Petteri Aimonen (1) +
  - Francis Allanah (2) +
  - Jonas Kock am Brink (1) +
  - anupriyakkumari (12) +
  - Aman Atman (2) +
  - Aaditya Bansal (1) +
  - Christoph Baumgarten (2)
  - Sebastian Berg (4)
  - Nicolas Bloyet (2) +
  - Matt Borland (1)
  - Jonas Bosse (1) +
  - Jake Bowhay (25)
  - Matthew Brett (1)
  - Dietrich Brunn (7)
  - Evgeni Burovski (65)
  - Matthias Bussonnier (4)
  - Tim Butters (1) +
  - Cale (1) +
  - CJ Carey (5)
  - Thomas A Caswell (1)
  - Sean Cheah (44) +
  - Lucas Colley (97)
  - com3dian (1)
  - Gianluca Detommaso (1) +
  - Thomas Duvernay (1)
  - DWesl (2)
  - f380cedric (1) +
  - fancidev (13) +
  - Daniel Garcia (1) +
  - Lukas Geiger (3)
  - Ralf Gommers (147)
  - Matt Haberland (81)
  - Tessa van der Heiden (2) +
  - Shawn Hsu (1) +
  - inky (3) +
  - Jannes Münchmeyer (2) +
  - Aditya Vidyadhar Kamath (2) +
  - Agriya Khetarpal (1) +
  - Andrew Landau (1) +
  - Eric Larson (7)
  - Zhen-Qi Liu (1) +
  - Christian Lorentzen (2)
  - Adam Lugowski (4)
  - m-maggi (6) +
  - Chethin Manage (1) +
  - Ben Mares (1)
  - Chris Markiewicz (1) +
  - Mateusz Sokół (3)
  - Daniel McCloy (1) +
  - Melissa Weber Mendonça (6)
  - Josue Melka (1)
  - Michał Górny (4)
  - Juan Montesinos (1) +
  - Juan F. Montesinos (1) +
  - Takumasa Nakamura (1)
  - Andrew Nelson (27)
  - Praveer Nidamaluri (1)
  - Yagiz Olmez (5) +
  - Dimitri Papadopoulos Orfanos (1)
  - Drew Parsons (1) +
  - Tirth Patel (7)
  - Pearu Peterson (1)
  - Matti Picus (3)
  - Rambaud Pierrick (1) +
  - Ilhan Polat (30)
  - Quentin Barthélemy (1)
  - Tyler Reddy (117)
  - Pamphile Roy (10)
  - Atsushi Sakai (8)
  - Daniel Schmitz (10)
  - Dan Schult (17)
  - Eli Schwartz (4)
  - Stefanie Senger (1) +
  - Scott Shambaugh (2)
  - Kevin Sheppard (2)
  - sidsrinivasan (4) +
  - Samuel St-Jean (1)
  - Albert Steppi (31)
  - Adam J. Stewart (4)
  - Kai Striega (3)
  - Ruikang Sun (1) +
  - Mike Taves (1)
  - Nicolas Tessore (3)
  - Benedict T Thekkel (1) +
  - Will Tirone (4)
  - Jacob Vanderplas (2)
  - Christian Veenhuis (1)
  - Isaac Virshup (2)
  - Ben Wallace (1) +
  - Xuefeng Xu (3)
  - Xiao Yuan (5)
  - Irwin Zaid (8)
  - Elmar Zander (1) +
  - Mathias Zechmeister (1) +

A total of 96 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.13.0

  - [\#1603](https://github.com/scipy/scipy/issues/1603): binomial ppf gives bogus results for small binomial probability...
  - [\#2254](https://github.com/scipy/scipy/issues/2254): linalg.eig test failure (test\_singular) (Trac \#1735)
  - [\#8398](https://github.com/scipy/scipy/issues/8398): Precision of CDFLIB too low
  - [\#9950](https://github.com/scipy/scipy/issues/9950): "++" initialization in kmeans2 fails for univariate data
  - [\#10317](https://github.com/scipy/scipy/issues/10317): scipy.stats.nbinom.interval returns wrong result for p=1
  - [\#10569](https://github.com/scipy/scipy/issues/10569): API: \`s\` argument different in scipy.fft and numpy.fft
  - [\#11359](https://github.com/scipy/scipy/issues/11359): lfilter error when input b is 0-dim
  - [\#11577](https://github.com/scipy/scipy/issues/11577): generalized eigenvalues are sometimes wrong (on some hardware)
  - [\#14001](https://github.com/scipy/scipy/issues/14001): Pycharm scipy SVD returning error code without message
  - [\#14176](https://github.com/scipy/scipy/issues/14176): Add option for terminating solver after n events
  - [\#14220](https://github.com/scipy/scipy/issues/14220): Documentation for dctn/idctn s-parameter is confusing
  - [\#14450](https://github.com/scipy/scipy/issues/14450): Passing a numpy array as sampling frequency to signal.iirfilter...
  - [\#14586](https://github.com/scipy/scipy/issues/14586): Problem with freeing-up memory of matrix
  - [\#15039](https://github.com/scipy/scipy/issues/15039): BUG: sparse.dok\_matrix.fromkeys method totally nonfunctional
  - [\#15108](https://github.com/scipy/scipy/issues/15108): BUG: Seg. fault in scipy.sparse.linalg tests in PROPACK
  - [\#16098](https://github.com/scipy/scipy/issues/16098): BLD:1.8.0: SciPy is not LTO ready
  - [\#16792](https://github.com/scipy/scipy/issues/16792): BUG: Manually vectorizing scipy.linalg.expm fails in version...
  - [\#16930](https://github.com/scipy/scipy/issues/16930): BUG: scipy.linalg.blas.dnrm2 may return error result when incx...
  - [\#17004](https://github.com/scipy/scipy/issues/17004): Test failures for \`Test\_SVDS\_PROPACK.test\_small\_sigma2\` test...
  - [\#17125](https://github.com/scipy/scipy/issues/17125): BUG: osx-64 scipy 1.9.1 test\_bad\_geneig numerical error
  - [\#17172](https://github.com/scipy/scipy/issues/17172): BUG: scipy.linalg.expm, coshm, sinhm and tanhm fail for read-only...
  - [\#17362](https://github.com/scipy/scipy/issues/17362): Add support for Flexiblas
  - [\#17436](https://github.com/scipy/scipy/issues/17436): BUG: linalg.cholesky: segmentation fault with large matrix
  - [\#17530](https://github.com/scipy/scipy/issues/17530): Unnecessary approximation in \`scipy.stats.wilcoxon(x, y)\`
  - [\#17681](https://github.com/scipy/scipy/issues/17681): BUG: special: \`pbvv\_seq\` is broken.
  - [\#18086](https://github.com/scipy/scipy/issues/18086): BUG: \`scipy.linalg.expm\` generates inconsistent results between...
  - [\#18089](https://github.com/scipy/scipy/issues/18089): DOC: \<Scaling due to window not clear for spectrum and density\>
  - [\#18166](https://github.com/scipy/scipy/issues/18166): ENH: stats.vonmises.pdf: return 1/(2pi) when kappa=0
  - [\#18408](https://github.com/scipy/scipy/issues/18408): MAINT: status of C++17 in the interregnum of meson without native...
  - [\#18423](https://github.com/scipy/scipy/issues/18423): ENH: Adding the SDMN Fortran routine to the python Wrapped functions.
  - [\#18678](https://github.com/scipy/scipy/issues/18678): BUG: scipy.special.stdtrit is not thread-safe for df.size \> 500
  - [\#18722](https://github.com/scipy/scipy/issues/18722): DOC: in optimize.quadratic\_assignment 2opt method, partial\_match...
  - [\#18767](https://github.com/scipy/scipy/issues/18767): Too-strict version restrictions on NumPy break distribution builds
  - [\#18773](https://github.com/scipy/scipy/issues/18773): BUG: Update oldest-supported-numpy metadata
  - [\#18902](https://github.com/scipy/scipy/issues/18902): DOC: make default bounds in scipy.optimize.linprog more obvious
  - [\#19088](https://github.com/scipy/scipy/issues/19088): \`pull-request-labeler\` misbehaving and therefore disabled again
  - [\#19181](https://github.com/scipy/scipy/issues/19181): TST: improve array API test skip decorators
  - [\#19225](https://github.com/scipy/scipy/issues/19225): stats.t.fit() with own optimizer (e.g. to use Nelder-Mead) fails...
  - [\#19486](https://github.com/scipy/scipy/issues/19486): Query: Where is cdflib used in SciPy code?
  - [\#19573](https://github.com/scipy/scipy/issues/19573): scipy.fft.fht - documentation issue
  - [\#19584](https://github.com/scipy/scipy/issues/19584): BUG: MATLAB expm vs scipy.linalg.expm: overflow/invalid value...
  - [\#19596](https://github.com/scipy/scipy/issues/19596): BENCH: spatial.distance.\* "non-xdist" benchmarks
  - [\#19605](https://github.com/scipy/scipy/issues/19605): BUG: wheel runs have a \*lot\* of test fails at the moment.
  - [\#19642](https://github.com/scipy/scipy/issues/19642): Speeding up Mann-Whitney U-Test
  - [\#19653](https://github.com/scipy/scipy/issues/19653): ENH: Voronoi diagram gives unexpected results from scipy.spatial
  - [\#19659](https://github.com/scipy/scipy/issues/19659): BUG: savemat(..., format="4") throws ValueError errorneously...
  - [\#19678](https://github.com/scipy/scipy/issues/19678): BUG: scipy.stats.theilslopes returns invalid data when input...
  - [\#19683](https://github.com/scipy/scipy/issues/19683): BUG/TST: cluster: incorrect test for \`seed\` param of {\`kmeans\`,...
  - [\#19729](https://github.com/scipy/scipy/issues/19729): DOC: Add interactive examples with jupyterlite-sphinx
  - [\#19732](https://github.com/scipy/scipy/issues/19732): DOC: Likelihood function depending on censoring type
  - [\#19733](https://github.com/scipy/scipy/issues/19733): BUG: \`pythran\` min version not enforced
  - [\#19737](https://github.com/scipy/scipy/issues/19737): TST: io: \`test\_fortranfiles\_mixed\_record\` fails with numpy...
  - [\#19739](https://github.com/scipy/scipy/issues/19739): BUG: pchip interpolation of complex values is buggy due to sign...
  - [\#19740](https://github.com/scipy/scipy/issues/19740): CI, MAINT: some easy cleanups for Python version
  - [\#19754](https://github.com/scipy/scipy/issues/19754): MAINT, TST: test\_public\_api.py can fail with NumPy main, via...
  - [\#19767](https://github.com/scipy/scipy/issues/19767): Build warnings from SuperLU fixed upstream
  - [\#19772](https://github.com/scipy/scipy/issues/19772): DOC: stats: The docstring for \`scipy.stats.crystalball\` needs...
  - [\#19774](https://github.com/scipy/scipy/issues/19774): DOC: Detail what "concatenate" means in the context of \`spatial.transform.Rotation.concatenate\`
  - [\#19799](https://github.com/scipy/scipy/issues/19799): DOC: array types: update array validation guidance
  - [\#19813](https://github.com/scipy/scipy/issues/19813): BUG: typo in specfun.f?
  - [\#19819](https://github.com/scipy/scipy/issues/19819): BUG: In RBFInterpolator, wrong warning message if degree=-1
  - [\#19831](https://github.com/scipy/scipy/issues/19831): Test failures with OpenBLAS 0.3.26
  - [\#19835](https://github.com/scipy/scipy/issues/19835): DOC: \`fft\` missing from list of subpackages
  - [\#19836](https://github.com/scipy/scipy/issues/19836): DOC: remove incorrect sentence about subpackage imports
  - [\#19846](https://github.com/scipy/scipy/issues/19846): CI: pre-release Linux job isn't using NumPy pre-release anymore
  - [\#19848](https://github.com/scipy/scipy/issues/19848): \`\_lib.\_util.MapWrapper\` uses multiprocessing with \`fork\`,...
  - [\#19854](https://github.com/scipy/scipy/issues/19854): scipy.special.logsumexp for complex input with return\_sign=True...
  - [\#19862](https://github.com/scipy/scipy/issues/19862): DOC: documentation for transpose operator for sparse matrices...
  - [\#19867](https://github.com/scipy/scipy/issues/19867): New ndimage and RBFInterpolator test failures in pre-release...
  - [\#19896](https://github.com/scipy/scipy/issues/19896): BUG: \`special.nctdtr\` broken in main
  - [\#19897](https://github.com/scipy/scipy/issues/19897): DOC: scipy.stats.unitary\_group does not specify dim\>1
  - [\#19928](https://github.com/scipy/scipy/issues/19928): TST: special: array types: test tol failure with \`torch\` backend
  - [\#19943](https://github.com/scipy/scipy/issues/19943): BUG: sparse: CSC.setdiag is slower than converting to LIL and...
  - [\#19948](https://github.com/scipy/scipy/issues/19948): BUG: scipy.sparse.linalg.gmres fails when provided x0 solves...
  - [\#19951](https://github.com/scipy/scipy/issues/19951): BUG: boolean masking broken for sparse array classes
  - [\#19963](https://github.com/scipy/scipy/issues/19963): DOC: scipy.optimize with large differences in parameter scales
  - [\#19974](https://github.com/scipy/scipy/issues/19974): DOC/REL: retroactively add missing expired deprecations to 1.12.0...
  - [\#19991](https://github.com/scipy/scipy/issues/19991): BUG: Scipy Optimize with Nelder-Mead method has issues when specifying...
  - [\#19993](https://github.com/scipy/scipy/issues/19993): BUG: F\_INT type conflict with f2py translation of INTEGER type...
  - [\#19998](https://github.com/scipy/scipy/issues/19998): DOC: Boundary conditions in splrep
  - [\#20001](https://github.com/scipy/scipy/issues/20001): BUG: scipy.stats.loglaplace may return negative moments
  - [\#20009](https://github.com/scipy/scipy/issues/20009): BUG: ShortTimeFFT fails with complex input
  - [\#20012](https://github.com/scipy/scipy/issues/20012): MAINT: Use NumPy sliding\_window\_view instead of as\_strided in...
  - [\#20014](https://github.com/scipy/scipy/issues/20014): TST: signal: TestCorrelateReal failing on Meson 3.12 job
  - [\#20027](https://github.com/scipy/scipy/issues/20027): BUG: \`sparse.random\` returns transposed array in 1.12
  - [\#20031](https://github.com/scipy/scipy/issues/20031): TST: prefer \`pytest.warns\` over \`np.testing.assert\_warns\`
  - [\#20034](https://github.com/scipy/scipy/issues/20034): TST: linalg: test\_decomp\_cossin.py::test\_cossin\_separate\[float64\]...
  - [\#20036](https://github.com/scipy/scipy/issues/20036): MAINT: implement scipy.stats.powerlaw.\_munp
  - [\#20041](https://github.com/scipy/scipy/issues/20041): BUG: Using LinearConstraint with optimize.differential\_evolution
  - [\#20042](https://github.com/scipy/scipy/issues/20042): BUG: scipy.stats.percentileofscore has a mistake
  - [\#20043](https://github.com/scipy/scipy/issues/20043): equality used to compare floating point numbers (test\_bootstrap\_alternative)
  - [\#20060](https://github.com/scipy/scipy/issues/20060): BUG: stacking two dok\_array produces a NotImplementedError about...
  - [\#20062](https://github.com/scipy/scipy/issues/20062): MAINT, TST: test failures against NumPy main
  - [\#20071](https://github.com/scipy/scipy/issues/20071): MAINT: doc build warnings
  - [\#20075](https://github.com/scipy/scipy/issues/20075): BUG: \`eigh\_tridiagonal\` with \`select="i"\` fails for 1x1 matrices
  - [\#20084](https://github.com/scipy/scipy/issues/20084): BUG: \`import scipy.\_lib.\_testutils\` raises exception in some...
  - [\#20100](https://github.com/scipy/scipy/issues/20100): ENH: Expose NoConvergence error class in the scipy.optimize namespace
  - [\#20107](https://github.com/scipy/scipy/issues/20107): MAINT: builds broken against NumPy main
  - [\#20129](https://github.com/scipy/scipy/issues/20129): BUG: regression: eval\_chebyt gives wrong results for complex...
  - [\#20131](https://github.com/scipy/scipy/issues/20131): DOC: linalg: Unclear description for the output \`P\` of \`qr\`.
  - [\#20142](https://github.com/scipy/scipy/issues/20142): Typo in the doc of the Kstwobign distribution
  - [\#20156](https://github.com/scipy/scipy/issues/20156): BUG: sparse.dok\_matrix throws KeyError for valid pop(key) since...
  - [\#20157](https://github.com/scipy/scipy/issues/20157): MAINT, TST: test\_svds\_parameter\_tol failures
  - [\#20161](https://github.com/scipy/scipy/issues/20161): \`dev.py test\` fails to accept both \`--argument\` and \`--...
  - [\#20170](https://github.com/scipy/scipy/issues/20170): Test failures due to \`asarray(..., copy=False)\` semantics change...
  - [\#20180](https://github.com/scipy/scipy/issues/20180): deprecation warnings for Node.js 16 on GHA wheel build jobs
  - [\#20182](https://github.com/scipy/scipy/issues/20182): BUG: \`csr\_row\_index\` and \`csr\_column\_index\` error for mixed...
  - [\#20188](https://github.com/scipy/scipy/issues/20188): BUG: Raising scipy.spatial.transform.Rotation to power of 0 adds...
  - [\#20214](https://github.com/scipy/scipy/issues/20214): BUG: minimize(method="newton-cg") crashes with UnboundLocalError...
  - [\#20220](https://github.com/scipy/scipy/issues/20220): new problem on Cirrus with Homebrew Python in macOS arm64 jobs
  - [\#20225](https://github.com/scipy/scipy/issues/20225): CI/MAINT: \`choco\` error for invalid credentials
  - [\#20230](https://github.com/scipy/scipy/issues/20230): CI, DOC, TST: failure related to scipy/stats/\_distn\_infrastructure.py...
  - [\#20268](https://github.com/scipy/scipy/issues/20268): MAINT: failing prerelease deps job - "numpy.broadcast size changed"
  - [\#20291](https://github.com/scipy/scipy/issues/20291): BUG: Macro collision (\`complex\`) with Windows SDK in amos code
  - [\#20294](https://github.com/scipy/scipy/issues/20294): BUG: Hang on Windows in scikit-learn with 1.13rc1 and 1.14.dev...
  - [\#20300](https://github.com/scipy/scipy/issues/20300): BUG: SciPy 1.13.0rc1 not buildable on old macOS due to pocketfft...
  - [\#20302](https://github.com/scipy/scipy/issues/20302): BUG: scipy.optimize.nnls fails with exception
  - [\#20340](https://github.com/scipy/scipy/issues/20340): BUG: line\_search\_wolfe2 fails to converge due to a wrong condition
  - [\#20344](https://github.com/scipy/scipy/issues/20344): MAINT/DOC: remove outdated note about NumPy imports

## Pull requests for 1.13.0

  - [\#8404](https://github.com/scipy/scipy/pull/8404): ENH:special:Tighten cdflib precision to 1e-15
  - [\#14771](https://github.com/scipy/scipy/pull/14771): ENH: integrate.solve\_ivp: allow event \`terminal\` attribute...
  - [\#16660](https://github.com/scipy/scipy/pull/16660): DOC: update pydata-sphinx theme
  - [\#17265](https://github.com/scipy/scipy/pull/17265): Doc: fix linalg.lstsq documentation on residues
  - [\#17525](https://github.com/scipy/scipy/pull/17525): TST: linalg: temporarily silence failure in test\_solve\_generalized\_discrete\_are
  - [\#18530](https://github.com/scipy/scipy/pull/18530): ENH: sparse: Generalize coo\_array to support 1d shapes
  - [\#18541](https://github.com/scipy/scipy/pull/18541): MAINT: sparse: Stop supporting multi-Ellipsis indexing
  - [\#18828](https://github.com/scipy/scipy/pull/18828): ENH: improve dtype check in wavfile.write
  - [\#19444](https://github.com/scipy/scipy/pull/19444): ENH: Add faster inverse-Wishart rvs and logpdf
  - [\#19488](https://github.com/scipy/scipy/pull/19488): DOC: Improving "Spectral Analysis" section in User Guide
  - [\#19541](https://github.com/scipy/scipy/pull/19541): BUG: fix cosine distance result type
  - [\#19545](https://github.com/scipy/scipy/pull/19545): ENH: integrate.\_tanhsinh: support vector-valued functions
  - [\#19555](https://github.com/scipy/scipy/pull/19555): DOC: Small documentation and docstring corrections for \`ShortTimeFFT\`
  - [\#19560](https://github.com/scipy/scipy/pull/19560): ENH:MAINT:special:Cythonize cdflib
  - [\#19587](https://github.com/scipy/scipy/pull/19587): ENH:MAINT:special:Rewrite amos F77 code
  - [\#19631](https://github.com/scipy/scipy/pull/19631): ENH: add parameter ymax in stats.boxcox\_normmax
  - [\#19633](https://github.com/scipy/scipy/pull/19633): ENH: use NdBSpline in RegularGridInterpolator to speed up evaluations
  - [\#19650](https://github.com/scipy/scipy/pull/19650): ENH: stats.kstests: add axis / nan\_policy / keepdims support
  - [\#19662](https://github.com/scipy/scipy/pull/19662): ENH: stats.normaltest/skewtest/kurtosistest: add axis / nan\_policy...
  - [\#19663](https://github.com/scipy/scipy/pull/19663): DOC: Add example to rv\_continuous.fit
  - [\#19664](https://github.com/scipy/scipy/pull/19664): DOC: Add example for mstats.brunnermunzel
  - [\#19666](https://github.com/scipy/scipy/pull/19666): DOC: Add Example to lbfgsb docstring
  - [\#19667](https://github.com/scipy/scipy/pull/19667): ENH: integrate.\_nsum: function for finite and infinite summation
  - [\#19669](https://github.com/scipy/scipy/pull/19669): REL: set version to 1.13.0.dev0
  - [\#19672](https://github.com/scipy/scipy/pull/19672): DEP: signal: remove scipy.signal.{bspline,quadratic,cubic}
  - [\#19674](https://github.com/scipy/scipy/pull/19674): DEP: linalg: remove tri{,u,l}
  - [\#19675](https://github.com/scipy/scipy/pull/19675): DEP: signal: remove scipy.signal.{lsim2,impulse2,step2}
  - [\#19676](https://github.com/scipy/scipy/pull/19676): DEP: signal: remove ability to import window functions from signal...
  - [\#19679](https://github.com/scipy/scipy/pull/19679): MAINT: stats.theilslopes: consistent promotion of \`x\` and \`y\`
  - [\#19680](https://github.com/scipy/scipy/pull/19680): ENH: stats.shapiro: add axis / nan\_policy / keepdims support
  - [\#19681](https://github.com/scipy/scipy/pull/19681): MAINT: Add binom to new C++ special lib along with its cephes...
  - [\#19682](https://github.com/scipy/scipy/pull/19682): TST: consolidate array API test skip decorators
  - [\#19687](https://github.com/scipy/scipy/pull/19687): MAINT:linalg: Remove redundant det and lu Fortran files
  - [\#19689](https://github.com/scipy/scipy/pull/19689): MAINT: stats.moment: rename parameter \`moment\` to \`order\`
  - [\#19694](https://github.com/scipy/scipy/pull/19694): MAINT: Remove \`PDistWeightedMetricWrapper\` and \`CDistWeightedMetricWrapper\`
  - [\#19695](https://github.com/scipy/scipy/pull/19695): MAINT: Prefer \`np.fill\_diagonal\` over \`diag\_indices\`
  - [\#19696](https://github.com/scipy/scipy/pull/19696): ENH: add \`method\` arg to \`interpolate.Akima1DInterpolator\`
  - [\#19698](https://github.com/scipy/scipy/pull/19698): MAINT: bump project version
  - [\#19701](https://github.com/scipy/scipy/pull/19701): MAINT: make import of \`array\_api\_compat\` nicer
  - [\#19703](https://github.com/scipy/scipy/pull/19703): DEP: non-integers in \`factorial(..., exact=True)\`: deprecate...
  - [\#19708](https://github.com/scipy/scipy/pull/19708): DOC: spatial.distance: add missing optional param markers
  - [\#19710](https://github.com/scipy/scipy/pull/19710): TST: fix pytest discovery errors with editable installs
  - [\#19711](https://github.com/scipy/scipy/pull/19711): DOC: clarify ttest\_1samp argument
  - [\#19714](https://github.com/scipy/scipy/pull/19714): BLD: require Cython \>=3.0.4, drop 0.29.X support
  - [\#19715](https://github.com/scipy/scipy/pull/19715): ENH: sparse: Add DOK support for 1d (without indexing)
  - [\#19716](https://github.com/scipy/scipy/pull/19716): ENH: enable approximation for factorialk
  - [\#19721](https://github.com/scipy/scipy/pull/19721): DOC: add rationale for 88 char line length
  - [\#19722](https://github.com/scipy/scipy/pull/19722): DOC: update release version procedure
  - [\#19723](https://github.com/scipy/scipy/pull/19723): ENH, MAINT: voronoi\_plot\_2d nicer inf lines
  - [\#19724](https://github.com/scipy/scipy/pull/19724): MAINT: Windows NumPy 2.x int shims
  - [\#19725](https://github.com/scipy/scipy/pull/19725): MNT: use int instead of long in cython code
  - [\#19728](https://github.com/scipy/scipy/pull/19728): MAINT: enhance the configuration for the \`pull-request-labeler\`...
  - [\#19730](https://github.com/scipy/scipy/pull/19730): MAINT: bs4 deprecation shim
  - [\#19731](https://github.com/scipy/scipy/pull/19731): ENH: stats.mood: add nan\_policy / keepdims support
  - [\#19738](https://github.com/scipy/scipy/pull/19738): BLD: require \`pythran\>=0.14.0\`
  - [\#19741](https://github.com/scipy/scipy/pull/19741): ENH: stats.friedmanchisquare/brunnermunzel: add axis / nan\_policy...
  - [\#19742](https://github.com/scipy/scipy/pull/19742): CI: fix PR labeler config file
  - [\#19743](https://github.com/scipy/scipy/pull/19743): ENH: sparse: Add min-max 1d support and tests
  - [\#19744](https://github.com/scipy/scipy/pull/19744): ENH: stats.mannwhitneyu: speed improvement, memory reduction,...
  - [\#19745](https://github.com/scipy/scipy/pull/19745): TST: fortranfiles fix
  - [\#19746](https://github.com/scipy/scipy/pull/19746): CI: add labeler based on issue/PR titles
  - [\#19749](https://github.com/scipy/scipy/pull/19749): ENH: stats.mannwhitneyu: vectorize statistic calculation
  - [\#19750](https://github.com/scipy/scipy/pull/19750): DEV/BLD: generate \`requirements/\*\` files to simplify build
  - [\#19752](https://github.com/scipy/scipy/pull/19752): DEP: deprecate complex dtypes in \`PchipInterpolator\` and \`Akima1DInterpolator\`
  - [\#19755](https://github.com/scipy/scipy/pull/19755): MAINT/TST: ignore backend import errors when not in array API...
  - [\#19757](https://github.com/scipy/scipy/pull/19757): ENH: Add vectorized scalar minimization bracket finder
  - [\#19758](https://github.com/scipy/scipy/pull/19758): MAINT: correct inaccurate comment
  - [\#19760](https://github.com/scipy/scipy/pull/19760): MAINT: interpolate: remove dead code
  - [\#19762](https://github.com/scipy/scipy/pull/19762): ENH: stats.monte\_carlo\_test: account for inexact calculation...
  - [\#19763](https://github.com/scipy/scipy/pull/19763): MAINT: integrate.\_nsum: adjust algorithm for determining number...
  - [\#19768](https://github.com/scipy/scipy/pull/19768): MAINT: SuperLU upstream fix for compile warnings
  - [\#19770](https://github.com/scipy/scipy/pull/19770): ENH: stats.wilcoxon: rewrite for speed and clarity; add PermutationMethod...
  - [\#19773](https://github.com/scipy/scipy/pull/19773): DOC: stats: The docstring for scipy.stats.crystalball needs an...
  - [\#19775](https://github.com/scipy/scipy/pull/19775): DOC: Docstring and examples for Rotation.concatenate
  - [\#19776](https://github.com/scipy/scipy/pull/19776): ENH: stats.rankdata: vectorize calculation
  - [\#19777](https://github.com/scipy/scipy/pull/19777): ENH: add \`BSpline.insert\_knot\` method
  - [\#19778](https://github.com/scipy/scipy/pull/19778): DOC, MAINT: fix make dist in rel process
  - [\#19780](https://github.com/scipy/scipy/pull/19780): MAINT: scipy.stats: replace \`\_normtest\_finish\`/\`\_ttest\_finish\`/etc......
  - [\#19781](https://github.com/scipy/scipy/pull/19781): CI, MAINT: switch to stable python release
  - [\#19786](https://github.com/scipy/scipy/pull/19786): BLD: fix "Failed to guess install tag" in meson-log.txt, add...
  - [\#19787](https://github.com/scipy/scipy/pull/19787): DOC/BLD: macOS Homebrew OpenBlas detection advice
  - [\#19788](https://github.com/scipy/scipy/pull/19788): DOC: stats.trim\_mean: correct documentation
  - [\#19790](https://github.com/scipy/scipy/pull/19790): BENCH: Added benchmarks for individual distance metrics
  - [\#19792](https://github.com/scipy/scipy/pull/19792): MAINT: simplify \`t.logpdf\`
  - [\#19796](https://github.com/scipy/scipy/pull/19796): API: Enable \`pydata/sparse\` input for csgraph module
  - [\#19803](https://github.com/scipy/scipy/pull/19803): TST: stats: compare geometric zscore to naive version instead...
  - [\#19807](https://github.com/scipy/scipy/pull/19807): DOC: fft: add note about FHT formulas
  - [\#19808](https://github.com/scipy/scipy/pull/19808): MAINT: move elementwise algorithms and framework
  - [\#19810](https://github.com/scipy/scipy/pull/19810): MAINT: set \`NPY\_NO\_DEPRECATED\_API\` also for Cython code
  - [\#19811](https://github.com/scipy/scipy/pull/19811): BLD: set default \`cpp\_std\` to \`c++17\`
  - [\#19818](https://github.com/scipy/scipy/pull/19818): MAINT: uarray CXX version hex cleanup
  - [\#19820](https://github.com/scipy/scipy/pull/19820): TST: linalg: Test Cython LAPACK complex ladiv
  - [\#19821](https://github.com/scipy/scipy/pull/19821): BLD: resolve missing prototype warnings in lsoda/vode
  - [\#19822](https://github.com/scipy/scipy/pull/19822): BLD: propack: resolve missing return value warnings
  - [\#19823](https://github.com/scipy/scipy/pull/19823): CI/DEV: add some new auto-labels
  - [\#19824](https://github.com/scipy/scipy/pull/19824): ENH:Rewrite specfun F77 code in C
  - [\#19825](https://github.com/scipy/scipy/pull/19825): MAINT: \`CODEOWNERS\` syntax fix and changes
  - [\#19827](https://github.com/scipy/scipy/pull/19827): MAINT: spatial: fix build warnings in \`ckdtree\` code
  - [\#19828](https://github.com/scipy/scipy/pull/19828): CI/DEV: fix and simplify \`label-globs\` syntax
  - [\#19829](https://github.com/scipy/scipy/pull/19829): MAINT: interpolate: fix build warning from \`\_ppoly.pyx\`
  - [\#19837](https://github.com/scipy/scipy/pull/19837): MAINT: special: fix meson deprecation warning
  - [\#19838](https://github.com/scipy/scipy/pull/19838): DOC: fft: improve \`s\` description for real transforms
  - [\#19843](https://github.com/scipy/scipy/pull/19843): DOC: Add \`fft\` to list of submodules in tutorial
  - [\#19844](https://github.com/scipy/scipy/pull/19844): TST: fix more cases of fd leaks from np.load()
  - [\#19849](https://github.com/scipy/scipy/pull/19849): CI: fix prerelease job to use numpy 2.0, and add a second job...
  - [\#19853](https://github.com/scipy/scipy/pull/19853): ENH: sparse: foundation for 1D arrays (add test suite, round...
  - [\#19855](https://github.com/scipy/scipy/pull/19855): BLD: Revamp BLAS/LAPACK G77 ABI wrappers and fix PROPACK segfaults
  - [\#19856](https://github.com/scipy/scipy/pull/19856): BLD: simplify pythran version requirement in meson
  - [\#19857](https://github.com/scipy/scipy/pull/19857): BLD: make scipy build warning-free with LTO enabled
  - [\#19860](https://github.com/scipy/scipy/pull/19860): MAINT: fix BLD label typo
  - [\#19861](https://github.com/scipy/scipy/pull/19861): BUG:io:Skip arr\_to\_chars call for single code points
  - [\#19864](https://github.com/scipy/scipy/pull/19864): Add documentation to explain behavior for transposing csr or...
  - [\#19866](https://github.com/scipy/scipy/pull/19866): DOC: Change default for bounds in scipy.optimize.linprog
  - [\#19868](https://github.com/scipy/scipy/pull/19868): MAINT: fix use of \`unique(..., return\_inverse=True)\`
  - [\#19869](https://github.com/scipy/scipy/pull/19869): MAINT: array types: rename \`as\_xparray\` to \`\_asarray\`
  - [\#19870](https://github.com/scipy/scipy/pull/19870): MAINT: logsumexp: properly handle complex sign
  - [\#19871](https://github.com/scipy/scipy/pull/19871): MAINT: make isinstance check in \`stats.\_distn\_infrastructure\`...
  - [\#19874](https://github.com/scipy/scipy/pull/19874): rankdata: ensure correct shape for empty inputs
  - [\#19876](https://github.com/scipy/scipy/pull/19876): MAINT: stats: Add tests to ensure consistency between \`wasserstein\_distance\` and different backends of \`wasserstein\_distance\_nd\`
  - [\#19880](https://github.com/scipy/scipy/pull/19880): DOC: prepare 1.13.0 release notes
  - [\#19882](https://github.com/scipy/scipy/pull/19882): MAINT: vendor \`pocketfft\` as git submodule
  - [\#19885](https://github.com/scipy/scipy/pull/19885): MAINT: fix some small array API support issues
  - [\#19886](https://github.com/scipy/scipy/pull/19886): TST: stats: fix a few issues with non-reproducible seeding
  - [\#19891](https://github.com/scipy/scipy/pull/19891): MAINT: stats: fix editable install issue in \`qmc\` and MPL-related...
  - [\#19893](https://github.com/scipy/scipy/pull/19893): MAINT: remove unused itertools-import in scipy.interpolate.\_interpolate
  - [\#19901](https://github.com/scipy/scipy/pull/19901): MAINT: special: remove use of \`numpy.math\` from \`\_cdflib.pyx\`
  - [\#19902](https://github.com/scipy/scipy/pull/19902): BUG:special:cdflib: Correct cdftnc Cython bugs
  - [\#19908](https://github.com/scipy/scipy/pull/19908): Fix AIX build break.
  - [\#19909](https://github.com/scipy/scipy/pull/19909): MAINT:linalg:Adjust lwork/liwork changes OpenBLAS 0.3.26
  - [\#19916](https://github.com/scipy/scipy/pull/19916): MAINT: update pocketfft git submodule location
  - [\#19917](https://github.com/scipy/scipy/pull/19917): MAINT: replicate FITPACK's \`fpchec\` routine in python
  - [\#19924](https://github.com/scipy/scipy/pull/19924): TST: cluster: fix test\_kmeans\_and\_kmeans2\_random\_seed
  - [\#19925](https://github.com/scipy/scipy/pull/19925): MAINT: forward port 1.12.0 relnotes
  - [\#19927](https://github.com/scipy/scipy/pull/19927): BUG: cluster.kmeans\*: array types: accept \`int\`s for k
  - [\#19929](https://github.com/scipy/scipy/pull/19929): DOC: updated incorrect sentence about subpackage imports. See...
  - [\#19931](https://github.com/scipy/scipy/pull/19931): MAINT:special:cdflib:Refine the tolerances further
  - [\#19932](https://github.com/scipy/scipy/pull/19932): ENH:stats:Use explicit formula for gamma.fit('mm')
  - [\#19933](https://github.com/scipy/scipy/pull/19933): BUG: Correct handling of -inf in special stdr funcs
  - [\#19934](https://github.com/scipy/scipy/pull/19934): BUG:special:amos: Fix some mistakes in the AMOS C translation
  - [\#19937](https://github.com/scipy/scipy/pull/19937): TST: Add RNG seeds for TestInvgauss and TestLaplace
  - [\#19938](https://github.com/scipy/scipy/pull/19938): MAINT: special: array types: fix warning when not in array API...
  - [\#19939](https://github.com/scipy/scipy/pull/19939): BUG:special:amos: Fix exit path in \`amos\_asyi\`
  - [\#19942](https://github.com/scipy/scipy/pull/19942): MAINT: hypothesis: document minimum required version
  - [\#19944](https://github.com/scipy/scipy/pull/19944): BUG: Correct handling of inf support in binomial
  - [\#19945](https://github.com/scipy/scipy/pull/19945): BLD: fix issue with escape sequences in \`\_\_config\_\_.py\`
  - [\#19947](https://github.com/scipy/scipy/pull/19947): BUG:special:amos: Fix typo in \`amos\_mlri\`
  - [\#19950](https://github.com/scipy/scipy/pull/19950): DOC: stats.logrank: fix typo that affect survival curves in manual
  - [\#19952](https://github.com/scipy/scipy/pull/19952): BUG:sparse:Add early exit to gmres when x0 already solves problem
  - [\#19957](https://github.com/scipy/scipy/pull/19957): defect: sparse: 1d bool mask with wrong shape should raise IndexError
  - [\#19961](https://github.com/scipy/scipy/pull/19961): DOC: Add version warning banner to documentation
  - [\#19962](https://github.com/scipy/scipy/pull/19962): ENH: sparse: speedup csr/csc setdiag by converting to coo
  - [\#19965](https://github.com/scipy/scipy/pull/19965): DOC: scale of parameters in optimize.curve\_fit
  - [\#19969](https://github.com/scipy/scipy/pull/19969): DOC: Fix landing page images for dark theme
  - [\#19971](https://github.com/scipy/scipy/pull/19971): ENH: Input validation for sampling frequency in signal.filter...
  - [\#19975](https://github.com/scipy/scipy/pull/19975): ENH: support custom statistic in goodness\_of\_fit function (gh-19894)
  - [\#19977](https://github.com/scipy/scipy/pull/19977): DOC: document a common alternative parameterization of invgauss.
  - [\#19978](https://github.com/scipy/scipy/pull/19978): DOC: fix autosummary for scipy.signal.ShortTimeFFT.t/T under...
  - [\#19980](https://github.com/scipy/scipy/pull/19980): ENH: stats: add axis/nan\_policy support to \`f\_oneway\` and \`alexandergovern\`
  - [\#19981](https://github.com/scipy/scipy/pull/19981): TST: correct typo in TestGamma.test\_fit\_mm function.
  - [\#19995](https://github.com/scipy/scipy/pull/19995): TST, MAINT: test\_immediate\_updating fix
  - [\#19997](https://github.com/scipy/scipy/pull/19997): MAINT: Adjust the codebase to the new \`np.array\`'s \`copy\`...
  - [\#20000](https://github.com/scipy/scipy/pull/20000): MAINT: interpolate: address review comments on NdBSpline/RGI
  - [\#20003](https://github.com/scipy/scipy/pull/20003): MAINT: sparse: change coo\_matrix.indices to coo\_matrix.coords
  - [\#20004](https://github.com/scipy/scipy/pull/20004): MAINT: sparse: change method names \_[mul]()\* to \_[matmul]()\* all...
  - [\#20005](https://github.com/scipy/scipy/pull/20005): MAINT: Remove partial from \`\_\_all\_\_\` (removed from submodule)
  - [\#20006](https://github.com/scipy/scipy/pull/20006): BENCH: optimize: add timings to global optimizers benchmarks
  - [\#20010](https://github.com/scipy/scipy/pull/20010): BUG: Add proper error message for \`ShortTimeFFT\` for onesided...
  - [\#20013](https://github.com/scipy/scipy/pull/20013): MAINT: signal: use \`sliding\_window\_view\` instead of \`as\_strided\`
  - [\#20016](https://github.com/scipy/scipy/pull/20016): DOC: update release docs to reflect new version banner
  - [\#20017](https://github.com/scipy/scipy/pull/20017): BUG: loglaplace moment should be non-negative.
  - [\#20018](https://github.com/scipy/scipy/pull/20018): ENH: refer to the Laplace distribution in log-Laplace documentation.
  - [\#20019](https://github.com/scipy/scipy/pull/20019): DOC: Add support for interactive examples with jupyterlite-sphinx
  - [\#20020](https://github.com/scipy/scipy/pull/20020): TST: TestCorrelateReal overflow shim
  - [\#20021](https://github.com/scipy/scipy/pull/20021): ENH: fix numerical instability around zero in boxcox\_llf
  - [\#20023](https://github.com/scipy/scipy/pull/20023): ENH: use analytic formula for log-laplace MLE when loc is known.
  - [\#20024](https://github.com/scipy/scipy/pull/20024): ENH:stats: Add multivariate Wasserstein distance as a separate...
  - [\#20032](https://github.com/scipy/scipy/pull/20032): MAINT: Adjust some comments in special C++ library
  - [\#20033](https://github.com/scipy/scipy/pull/20033): MAINT: sparse: Un-deprecate getnnz()
  - [\#20037](https://github.com/scipy/scipy/pull/20037): MAINT: Add special handling for complex infinite input in digamma
  - [\#20039](https://github.com/scipy/scipy/pull/20039): ENH: use analytical formula in scipy.stats.powerlaw.\_munp().
  - [\#20044](https://github.com/scipy/scipy/pull/20044): TST: \_ConstraintWrapper returns a violation of the correct shape
  - [\#20045](https://github.com/scipy/scipy/pull/20045): DOC: add missing np. in tutorial
  - [\#20047](https://github.com/scipy/scipy/pull/20047): TST: use assert\_allclose in test\_bootstrap\_alternative
  - [\#20052](https://github.com/scipy/scipy/pull/20052): FIX: Allow any dtype-specifier for ndimage output
  - [\#20053](https://github.com/scipy/scipy/pull/20053): Add sorting requirement for partial\_match and partial\_guess
  - [\#20054](https://github.com/scipy/scipy/pull/20054): BUG: SciPy.interpolate.CubicSpline with periodic data
  - [\#20063](https://github.com/scipy/scipy/pull/20063): ENH: optimize.\_differentiate: add option preserve\_shape
  - [\#20065](https://github.com/scipy/scipy/pull/20065): MAINT Fix broken link in \`scipy.stats.\_multivariate.py\`
  - [\#20067](https://github.com/scipy/scipy/pull/20067): TST: shims for NumPy fft changes
  - [\#20068](https://github.com/scipy/scipy/pull/20068): Changed assert\_warns in stats testing to pytest.warns.
  - [\#20069](https://github.com/scipy/scipy/pull/20069): MAINT/DOC: \`special.nrdtrimn/nrdtrisd\` docstring fixes
  - [\#20070](https://github.com/scipy/scipy/pull/20070): MAINT: silence ruff deprecation warning
  - [\#20076](https://github.com/scipy/scipy/pull/20076): BUG:linalg:Add early exit to eigh\_tridiagonal for 1x1 input
  - [\#20078](https://github.com/scipy/scipy/pull/20078): CI: update github actions and cibuildwheel
  - [\#20080](https://github.com/scipy/scipy/pull/20080): BUG: sparse: Fix hstack, etc for dok\_array
  - [\#20086](https://github.com/scipy/scipy/pull/20086): MAINT: detect musl differently.
  - [\#20087](https://github.com/scipy/scipy/pull/20087): MAINT: switch from \`numpy.array\_api\` to \`array-api-strict\`
  - [\#20092](https://github.com/scipy/scipy/pull/20092): DOC: Fix a could of places that are parsed as substitution references...
  - [\#20093](https://github.com/scipy/scipy/pull/20093): DOC: Fix small typos in \`signal.rst\` and \`\_short\_time\_fft.py\`
  - [\#20095](https://github.com/scipy/scipy/pull/20095): DOC: tick tensor product splines off the roadmap
  - [\#20096](https://github.com/scipy/scipy/pull/20096): TST:linalg:Reduce the size of the cossin test
  - [\#20098](https://github.com/scipy/scipy/pull/20098): MAINT: minor array API skip improvements
  - [\#20101](https://github.com/scipy/scipy/pull/20101): MAINT: editorial changes in the doc string of scipy.stats.vonmises.
  - [\#20102](https://github.com/scipy/scipy/pull/20102): ENH: use non-trivial bounds to solve for kappa of vonmises MLE.
  - [\#20103](https://github.com/scipy/scipy/pull/20103): MAINT: optimize: expose \`NoConvergence\`
  - [\#20104](https://github.com/scipy/scipy/pull/20104): ENH: allow shape parameter kappa to be zero in vonmises distribution.
  - [\#20106](https://github.com/scipy/scipy/pull/20106): DOC: update docstring of stats.percentileofscore
  - [\#20108](https://github.com/scipy/scipy/pull/20108): MAINT: shim for descr-\>f access
  - [\#20111](https://github.com/scipy/scipy/pull/20111): DOC: clarify accepted values for \`dim\` in \`unitary\_group\`.
  - [\#20112](https://github.com/scipy/scipy/pull/20112): BLD: signal: do not install Pythran source alongside the Cython...
  - [\#20119](https://github.com/scipy/scipy/pull/20119): Fix small issues in docstrings
  - [\#20121](https://github.com/scipy/scipy/pull/20121): BLD: simplifications in meson.build files
  - [\#20122](https://github.com/scipy/scipy/pull/20122): MAINT: update Boost.Math to 1.83.0
  - [\#20123](https://github.com/scipy/scipy/pull/20123): MAINT: stats: fix test failure in \`kendalltau\_seasonal\`
  - [\#20130](https://github.com/scipy/scipy/pull/20130): BUG: Use Cython implementation of complex hyp2f1 in orthogonal\_eval.pxd
  - [\#20135](https://github.com/scipy/scipy/pull/20135): MAINT: interpolate: define \`F\_INT\` as \`int\` rather than \`npy\_int32\`
  - [\#20138](https://github.com/scipy/scipy/pull/20138): TST: optimize: silence the output from calling cobyla with disp=True
  - [\#20141](https://github.com/scipy/scipy/pull/20141): MAINT/CI: special/array types: test alternative backends in CI
  - [\#20143](https://github.com/scipy/scipy/pull/20143): DOC: stats: Fix typo in the doc of the Kstwobign distribution
  - [\#20144](https://github.com/scipy/scipy/pull/20144): MAINT, ENH: Hausdorff simplification
  - [\#20145](https://github.com/scipy/scipy/pull/20145): TST: special: bump tolerances for new \`cdftnc\` regression tests
  - [\#20146](https://github.com/scipy/scipy/pull/20146): MAINT: fix incorrect \`noexcept\` usage in Cython functions
  - [\#20149](https://github.com/scipy/scipy/pull/20149): BLD: Ensure Python.h is included before system headers.
  - [\#20153](https://github.com/scipy/scipy/pull/20153): BLD: interpolate: \_interpnd\_info does not need installing
  - [\#20154](https://github.com/scipy/scipy/pull/20154): ENH: sparse: implement fromkeys for \_dok\_base
  - [\#20163](https://github.com/scipy/scipy/pull/20163): MAINT: dev.py: allow --args after --
  - [\#20168](https://github.com/scipy/scipy/pull/20168): BUG: optimize: Fix constraint condition in inner loop of nnls
  - [\#20172](https://github.com/scipy/scipy/pull/20172): MAINT: (additional) array copy semantics shims
  - [\#20173](https://github.com/scipy/scipy/pull/20173): TST:special:Add partial tests for nrdtrimn and nrdtrisd
  - [\#20174](https://github.com/scipy/scipy/pull/20174): DOC: interpolate: \`splrep\` default boundary condition
  - [\#20175](https://github.com/scipy/scipy/pull/20175): MAINT: sparse: add missing dict methods to DOK and tests
  - [\#20176](https://github.com/scipy/scipy/pull/20176): MAINT: vulture/ruff fixups
  - [\#20181](https://github.com/scipy/scipy/pull/20181): MAINT: Avoid \`descr-\>elsize\` and use intp for it.
  - [\#20183](https://github.com/scipy/scipy/pull/20183): BUG: Fix fancy indexing on compressed sparse arrays with mixed...
  - [\#20184](https://github.com/scipy/scipy/pull/20184): DOC, DX: Remove version warning banner in latest version
  - [\#20186](https://github.com/scipy/scipy/pull/20186): MAINT: update action. Closes \#20180
  - [\#20191](https://github.com/scipy/scipy/pull/20191): BUG: Fix shape of single Rotation raised to the 0 or 1 power
  - [\#20193](https://github.com/scipy/scipy/pull/20193): MAINT: Bump \`npy2\_compat.h\` and add temporary pybind11 workaround
  - [\#20195](https://github.com/scipy/scipy/pull/20195): ENH: linalg: allow readonly arrays in expm et al
  - [\#20197](https://github.com/scipy/scipy/pull/20197): TST: linalg: fix complex sort in test\_bad\_geneig
  - [\#20198](https://github.com/scipy/scipy/pull/20198): BLD: update minimum Cython version to 3.0.8
  - [\#20203](https://github.com/scipy/scipy/pull/20203): TST: linalg: undo xfail TestEig::test\_singular
  - [\#20204](https://github.com/scipy/scipy/pull/20204): TST: linalg: add a regression test for a gen eig problem
  - [\#20205](https://github.com/scipy/scipy/pull/20205): BUG: Fixed \`fftshift()\` in \`ShortTimeFFT\`.
  - [\#20206](https://github.com/scipy/scipy/pull/20206): DOC: clarify role of p in linalg.qr.
  - [\#20209](https://github.com/scipy/scipy/pull/20209): CI: move regular macosx\_arm64 from cirrus to GHA
  - [\#20210](https://github.com/scipy/scipy/pull/20210): BLD: macosx\_arm64 wheel build on GHA instead of cirrus
  - [\#20212](https://github.com/scipy/scipy/pull/20212): BUG: linalg/sqrtm: more robust check for real-\>complex Schur...
  - [\#20215](https://github.com/scipy/scipy/pull/20215): MAINT: bump OpenBLAS "the old way"
  - [\#20217](https://github.com/scipy/scipy/pull/20217): DOC/MAINT: add examples for nctdtridf, nctdtrinc, nctdtrit
  - [\#20218](https://github.com/scipy/scipy/pull/20218): TST: mark linalg.sqrtm test as xfail
  - [\#20221](https://github.com/scipy/scipy/pull/20221): TST: Tweak tols and ignore warnings for more reliable SVD tests
  - [\#20222](https://github.com/scipy/scipy/pull/20222): DOC add likelihood formula to stats.CensoredData
  - [\#20224](https://github.com/scipy/scipy/pull/20224): BUG: fix \`cluster.vq.kmeans2\` with minit='++' for 1D data
  - [\#20227](https://github.com/scipy/scipy/pull/20227): MAINT: remove repeated "the" typos
  - [\#20229](https://github.com/scipy/scipy/pull/20229): BUG: linalg: fix int overflow in Cholesky (potrf)
  - [\#20231](https://github.com/scipy/scipy/pull/20231): DOC/DX: array types: update \`\_asarray\` description
  - [\#20232](https://github.com/scipy/scipy/pull/20232): BLD: Refactor BLAS/LAPACK wrapper infrastructure
  - [\#20233](https://github.com/scipy/scipy/pull/20233): DOC: stats.rv\_continuous.fit: fix backslashes
  - [\#20235](https://github.com/scipy/scipy/pull/20235): DOC: add reference for ARGUS distribution in scipy.stats
  - [\#20236](https://github.com/scipy/scipy/pull/20236): DOC: fix small typo in array API docs
  - [\#20237](https://github.com/scipy/scipy/pull/20237): MAINT: optimize: update \`\_direct\` for typos
  - [\#20238](https://github.com/scipy/scipy/pull/20238): MAINT: revert ARPACK changes from \#20227
  - [\#20241](https://github.com/scipy/scipy/pull/20241): BLD: remove use of \`NPY\_VISIBILITY\_HIDDEN\`
  - [\#20243](https://github.com/scipy/scipy/pull/20243): MAINT: Specfun translation into C++
  - [\#20245](https://github.com/scipy/scipy/pull/20245): MAINT: Updated \_specfun.pyx
  - [\#20248](https://github.com/scipy/scipy/pull/20248): MAINT: Removed specfun\_lib and updated specfun\_wrappers
  - [\#20250](https://github.com/scipy/scipy/pull/20250): MAINT: interpolate: const qualify cython arrays
  - [\#20251](https://github.com/scipy/scipy/pull/20251): MAINT:special:Adjust inf values for cdflib
  - [\#20254](https://github.com/scipy/scipy/pull/20254): MAINT: linalg: readability refactor Riccati equation solver tests
  - [\#20259](https://github.com/scipy/scipy/pull/20259): BUG: linalg: fix \`expm\` for large arrays
  - [\#20261](https://github.com/scipy/scipy/pull/20261): BUG:linalg:Remove the 2x2 branch in expm
  - [\#20263](https://github.com/scipy/scipy/pull/20263): DOC/REL: add missing expired deprecations to 1.12.0 notes
  - [\#20266](https://github.com/scipy/scipy/pull/20266): MAINT: stats.wilcoxon: pass \`PermutationMethod\` options to...
  - [\#20270](https://github.com/scipy/scipy/pull/20270): BLD: update dependencies for 1.13.0 release and numpy 2.0
  - [\#20279](https://github.com/scipy/scipy/pull/20279): MAINT: 1.13.0rc1 prep \[wheel build\]
  - [\#20290](https://github.com/scipy/scipy/pull/20290): REL: set 1.13.0rc2 unreleased
  - [\#20299](https://github.com/scipy/scipy/pull/20299): BUG: Optimize: NewtonCG min crashes with xtol=0
  - [\#20313](https://github.com/scipy/scipy/pull/20313): MAINT: bump pocketfft, MacOS patch
  - [\#20314](https://github.com/scipy/scipy/pull/20314): BUG: sparse: Restore random coordinate ordering to pre-1.12 results
  - [\#20318](https://github.com/scipy/scipy/pull/20318): BUG: signal: Fix scalar input issue of signal.lfilter
  - [\#20327](https://github.com/scipy/scipy/pull/20327): DOC: mention BSpline.insert\_knot in the 1.13.0 release notes
  - [\#20333](https://github.com/scipy/scipy/pull/20333): BUG: sync pocketfft again
  - [\#20337](https://github.com/scipy/scipy/pull/20337): MAINT: spatial: use cython\_lapack in spatial/\_qhull.pyx
  - [\#20341](https://github.com/scipy/scipy/pull/20341): BUG: linalg: raise an error in dnrm2(..., incx\<0)
  - [\#20345](https://github.com/scipy/scipy/pull/20345): BUG: nelder-mead fix degenerate simplex
  - [\#20347](https://github.com/scipy/scipy/pull/20347): BLD: require pybind11 \>=2.12.0 for numpy 2.0 compatibility
  - [\#20349](https://github.com/scipy/scipy/pull/20349): Do not segfault in svd(a) with VT.size \> INT\_MAX
  - [\#20350](https://github.com/scipy/scipy/pull/20350): BUG: optimize: Fix wrong condition to check invalid optimization...
  - [\#20353](https://github.com/scipy/scipy/pull/20353): DOC: remove outdated NumPy imports note
  - [\#20359](https://github.com/scipy/scipy/pull/20359): ENH: Converting amos to std::complex
  - [\#20361](https://github.com/scipy/scipy/pull/20361): ENH: Rest of amos translation
  - [\#20362](https://github.com/scipy/scipy/pull/20362): MAINT, BUG: bump OpenBLAS
  - [\#20364](https://github.com/scipy/scipy/pull/20364): BUG: interpolate: Fix wrong warning message if degree=-1 in \`interpolate.RBFInterpolator\`
  - [\#20374](https://github.com/scipy/scipy/pull/20374): MAINT: update pybind11 and numpy build-time requirements for...

---

1.13.1-notes.md

---

# SciPy 1.13.1 Release Notes

<div class="contents">

</div>

SciPy 1.13.1 is a bug-fix release with no new features compared to 1.13.0. The version of OpenBLAS shipped with the PyPI binaries has been increased to 0.3.27.

## Authors

  - Name (commits)
  - h-vetinari (1)
  - Jake Bowhay (2)
  - Evgeni Burovski (6)
  - Sean Cheah (2)
  - Lucas Colley (2)
  - DWesl (2)
  - Ralf Gommers (7)
  - Ben Greiner (1) +
  - Matt Haberland (2)
  - Gregory R. Lee (1)
  - Philip Loche (1) +
  - Sijo Valayakkad Manikandan (1) +
  - Matti Picus (1)
  - Tyler Reddy (62)
  - Atsushi Sakai (1)
  - Daniel Schmitz (2)
  - Dan Schult (3)
  - Scott Shambaugh (2)
  - Edgar Andrés Margffoy Tuay (1)

A total of 19 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.13.1

  - [\#19423](https://github.com/scipy/scipy/issues/19423): BUG: \`scipy.ndimage.value\_indices\` returns empty dict for \`intc\`/\`uintc\` dtype on Windows
  - [\#20264](https://github.com/scipy/scipy/issues/20264): DOC, MAINT: .jupyterlite.doit.db shows up untracked
  - [\#20392](https://github.com/scipy/scipy/issues/20392): DOC: optimize.root(method='lm') option
  - [\#20415](https://github.com/scipy/scipy/issues/20415): BUG: csr\_array can no longer be initialized with 1D array
  - [\#20471](https://github.com/scipy/scipy/issues/20471): BUG: \`TestEig.test\_falker\` fails on windows + MKL as well as...
  - [\#20491](https://github.com/scipy/scipy/issues/20491): BUG: Cannot find \`OpenBLAS\` on Cygwin
  - [\#20506](https://github.com/scipy/scipy/issues/20506): BUG: special.spherical\_in: derivative at \`z=0, n=1\` incorrect
  - [\#20512](https://github.com/scipy/scipy/issues/20512): BUG: \`eigh\` fails for size 1 array with driver=evd
  - [\#20531](https://github.com/scipy/scipy/issues/20531): BUG: warning from \`optimize.least\_squares\` for astropy with...
  - [\#20555](https://github.com/scipy/scipy/issues/20555): BUG: spatial: error in \`Rotation.align\_vectors()\` with an infinite...
  - [\#20576](https://github.com/scipy/scipy/issues/20576): MAINT, TST: two types of failures observed on maintenance/1.13.x...
  - [\#20580](https://github.com/scipy/scipy/issues/20580): BUG: scipy.special.factorial2 doesn't handle \`uint32\` dtypes
  - [\#20591](https://github.com/scipy/scipy/issues/20591): BUG: scipy.stats.wilcoxon in 1.13 fails on 2D array with nan...
  - [\#20623](https://github.com/scipy/scipy/issues/20623): BUG: scipy.spatial.Delaunay, scipy.interpolate.LinearNDInterpolator...
  - [\#20648](https://github.com/scipy/scipy/issues/20648): BUG: stats.yulesimon: incorrect kurtosis values
  - [\#20652](https://github.com/scipy/scipy/issues/20652): BUG: incorrect origin tuple handling in ndimage \`minimum\_filter\`...
  - [\#20660](https://github.com/scipy/scipy/issues/20660): BUG: spatial: \`Rotation.align\_vectors()\` incorrect for anti-parallel...
  - [\#20670](https://github.com/scipy/scipy/issues/20670): BUG: sparse matrix creation in 1.13 with indices not summing...
  - [\#20692](https://github.com/scipy/scipy/issues/20692): BUG: stats.zipf: incorrect pmf values
  - [\#20714](https://github.com/scipy/scipy/issues/20714): CI: scipy installation failing in umfpack tests

### Pull requests for 1.13.1

  - [\#20280](https://github.com/scipy/scipy/pull/20280): MAINT: added doc/source/.jupyterlite.doit.db to .gitignore See...
  - [\#20322](https://github.com/scipy/scipy/pull/20322): BUG: sparse: align dok\_array.pop() to dict.pop() for case with...
  - [\#20333](https://github.com/scipy/scipy/pull/20333): BUG: sync pocketfft again
  - [\#20381](https://github.com/scipy/scipy/pull/20381): REL, MAINT: prep for 1.13.1
  - [\#20401](https://github.com/scipy/scipy/pull/20401): DOC: optimize: fix wrong optional argument name in \`root(method="lm")\`.
  - [\#20435](https://github.com/scipy/scipy/pull/20435): DOC: add missing deprecations from 1.13.0 release notes
  - [\#20437](https://github.com/scipy/scipy/pull/20437): MAINT/DOC: fix syntax in 1.13.0 release notes
  - [\#20444](https://github.com/scipy/scipy/pull/20444): BUG: sparse: Clean up 1D input handling to sparse array/matrix...
  - [\#20449](https://github.com/scipy/scipy/pull/20449): DOC: remove spurious backtick from release notes
  - [\#20473](https://github.com/scipy/scipy/pull/20473): BUG: linalg: fix ordering of complex conj gen eigenvalues
  - [\#20474](https://github.com/scipy/scipy/pull/20474): TST: tolerance bumps for the conda-forge builds
  - [\#20484](https://github.com/scipy/scipy/pull/20484): TST: compare absolute values of U and VT in pydata-sparse SVD...
  - [\#20505](https://github.com/scipy/scipy/pull/20505): BUG: Include Python.h before system headers.
  - [\#20516](https://github.com/scipy/scipy/pull/20516): BUG: linalg: fix eigh(1x1 array, driver='evd') f2py check
  - [\#20527](https://github.com/scipy/scipy/pull/20527): BUG: \`spherical\_in\` for \`n=0\` and \`z=0\`
  - [\#20530](https://github.com/scipy/scipy/pull/20530): BLD: Fix error message for f2py generation fail
  - [\#20533](https://github.com/scipy/scipy/pull/20533): TST: Adapt to \`\_\_array\_\_(copy=True)\`
  - [\#20537](https://github.com/scipy/scipy/pull/20537): BLD: Move Python-including files to start of source.
  - [\#20567](https://github.com/scipy/scipy/pull/20567): REV: 1.13.x: revert changes to f2py and tempita handling in meson.build...
  - [\#20569](https://github.com/scipy/scipy/pull/20569): update openblas to 0.3.27
  - [\#20573](https://github.com/scipy/scipy/pull/20573): BUG: Fix error with 180 degree rotation in Rotation.align\_vectors()...
  - [\#20586](https://github.com/scipy/scipy/pull/20586): MAINT: optimize.linprog: fix bug when integrality is a list of...
  - [\#20592](https://github.com/scipy/scipy/pull/20592): MAINT: stats.wilcoxon: fix failure with multidimensional \`x\`...
  - [\#20601](https://github.com/scipy/scipy/pull/20601): MAINT: lint: temporarily disable UP031
  - [\#20607](https://github.com/scipy/scipy/pull/20607): BUG: handle uint arrays in factorial{,2,k}
  - [\#20611](https://github.com/scipy/scipy/pull/20611): BUG: prevent QHull message stream being closed twice
  - [\#20629](https://github.com/scipy/scipy/pull/20629): MAINT/DEV: lint: disable UP032
  - [\#20633](https://github.com/scipy/scipy/pull/20633): BUG: fix Vor/Delaunay segfaults
  - [\#20644](https://github.com/scipy/scipy/pull/20644): BUG: ndimage.value\_indices: deal with unfixed types
  - [\#20653](https://github.com/scipy/scipy/pull/20653): BUG: ndimage: fix origin handling for \`{minimum, maximum}\_filter\`
  - [\#20654](https://github.com/scipy/scipy/pull/20654): MAINT: stats.yulesimon: fix kurtosis
  - [\#20687](https://github.com/scipy/scipy/pull/20687): BUG: sparse: Fix summing duplicates for CSR/CSC creation from...
  - [\#20702](https://github.com/scipy/scipy/pull/20702): BUG: stats: Fix \`zipf.pmf\` and \`zipfian.pmf\` for int32 \`k\`
  - [\#20727](https://github.com/scipy/scipy/pull/20727): CI: pin Python for MacOS conda

---

1.14.0-notes.md

---

# SciPy 1.14.0 Release Notes

<div class="contents">

</div>

SciPy 1.14.0 is the culmination of 3 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.14.x branch, and on adding new features on the main branch.

This release requires Python 3.10+ and NumPy 1.23.5 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - SciPy now supports the new Accelerate library introduced in macOS 13.3, and has wheels built against Accelerate for macOS \>=14 resulting in significant performance improvements for many linear algebra operations.
  - A new method, `cobyqa`, has been added to <span class="title-ref">scipy.optimize.minimize</span> - this is an interface for COBYQA (Constrained Optimization BY Quadratic Approximations), a derivative-free optimization solver, designed to supersede COBYLA, developed by the Department of Applied Mathematics, The Hong Kong Polytechnic University.
  - <span class="title-ref">scipy.sparse.linalg.spsolve\_triangular</span> is now more than an order of magnitude faster in many cases.

## New features

### <span class="title-ref">scipy.fft</span> improvements

  - A new function, <span class="title-ref">scipy.fft.prev\_fast\_len</span>, has been added. This function finds the largest composite of FFT radices that is less than the target length. It is useful for discarding a minimal number of samples before FFT.

### <span class="title-ref">scipy.io</span> improvements

  - `wavfile` now supports reading and writing of `wav` files in the RF64 format, allowing files greater than 4 GB in size to be handled.

### <span class="title-ref">scipy.constants</span> improvements

  - Experimental support for the array API standard has been added.

### <span class="title-ref">scipy.interpolate</span> improvements

  - <span class="title-ref">scipy.interpolate.Akima1DInterpolator</span> now supports extrapolation via the `extrapolate` argument.

### <span class="title-ref">scipy.optimize</span> improvements

  - <span class="title-ref">scipy.optimize.HessianUpdateStrategy</span> now also accepts square arrays for `init_scale`.
  - A new method, `cobyqa`, has been added to <span class="title-ref">scipy.optimize.minimize</span> - this is an interface for COBYQA (Constrained Optimization BY Quadratic Approximations), a derivative-free optimization solver, designed to supersede COBYLA, developed by the Department of Applied Mathematics, The Hong Kong Polytechnic University.
  - There are some performance improvements in <span class="title-ref">scipy.optimize.differential\_evolution</span>.
  - <span class="title-ref">scipy.optimize.approx\_fprime</span> now has linear space complexity.

### <span class="title-ref">scipy.signal</span> improvements

  - <span class="title-ref">scipy.signal.minimum\_phase</span> has a new argument `half`, allowing the provision of a filter of the same length as the linear-phase FIR filter coefficients and with the same magnitude spectrum.

### <span class="title-ref">scipy.sparse</span> improvements

  - Sparse arrays now support 1D shapes in COO, DOK and CSR formats. These are all the formats we currently intend to support 1D shapes. Other sparse array formats raise an exception for 1D input.
  - Sparse array methods min/nanmin/argmin and max analogs now return 1D arrays. Results are still COO format sparse arrays for min/nanmin and dense `np.ndarray` for argmin.
  - Iterating over `csr_array` or `csc_array` yields 1D (CSC) arrays.
  - Sparse matrix and array objects improve their `repr` and `str` output.
  - A special case has been added to handle multiplying a `dia_array` by a scalar, which avoids a potentially costly conversion to CSR format.
  - <span class="title-ref">scipy.sparse.csgraph.yen</span> has been added, allowing usage of Yen's K-Shortest Paths algorithm on a directed on undirected graph.
  - Addition between DIA-format sparse arrays and matrices is now faster.
  - <span class="title-ref">scipy.sparse.linalg.spsolve\_triangular</span> is now more than an order of magnitude faster in many cases.

### <span class="title-ref">scipy.spatial</span> improvements

  - `Rotation` supports an alternative "scalar-first" convention of quaternion component ordering. It is available via the keyword argument `scalar_first` of `from_quat` and `as_quat` methods.
  - Some minor performance improvements for inverting of `Rotation` objects.

### <span class="title-ref">scipy.special</span> improvements

  - Added <span class="title-ref">scipy.special.log\_wright\_bessel</span>, for calculation of the logarithm of Wright's Bessel function.
  - The relative error in <span class="title-ref">scipy.special.hyp2f1</span> calculations has improved substantially.
  - Improved behavior of `boxcox`, `inv_boxcox`, `boxcox1p`, and `inv_boxcox1p` by preventing premature overflow.

### <span class="title-ref">scipy.stats</span> improvements

  - A new function <span class="title-ref">scipy.stats.power</span> can be used for simulating the power of a hypothesis test with respect to a specified alternative.
  - The Irwin-Hall (AKA Uniform Sum) distribution has been added as <span class="title-ref">scipy.stats.irwinhall</span>.
  - Exact p-value calculations of <span class="title-ref">scipy.stats.mannwhitneyu</span> are much faster and use less memory.
  - <span class="title-ref">scipy.stats.pearsonr</span> now accepts n-D arrays and computes the statistic along a specified `axis`.
  - <span class="title-ref">scipy.stats.kstat</span>, <span class="title-ref">scipy.stats.kstatvar</span>, and <span class="title-ref">scipy.stats.bartlett</span> are faster at performing calculations along an axis of a large n-D array.

## Array API Standard Support

*Experimental* support for array libraries other than NumPy has been added to existing sub-packages in recent versions of SciPy. Please consider testing these features by setting an environment variable `SCIPY_ARRAY_API=1` and providing PyTorch, JAX, or CuPy arrays as array arguments.

As of 1.14.0, there is support for

  - <span class="title-ref">scipy.cluster</span>
  - <span class="title-ref">scipy.fft</span>
  - <span class="title-ref">scipy.constants</span>
  - \`scipy.special\`: (select functions)
      - <span class="title-ref">scipy.special.log\_ndtr</span>
      - <span class="title-ref">scipy.special.ndtr</span>
      - <span class="title-ref">scipy.special.ndtri</span>
      - <span class="title-ref">scipy.special.erf</span>
      - <span class="title-ref">scipy.special.erfc</span>
      - <span class="title-ref">scipy.special.i0</span>
      - <span class="title-ref">scipy.special.i0e</span>
      - <span class="title-ref">scipy.special.i1</span>
      - <span class="title-ref">scipy.special.i1e</span>
      - <span class="title-ref">scipy.special.gammaln</span>
      - <span class="title-ref">scipy.special.gammainc</span>
      - <span class="title-ref">scipy.special.gammaincc</span>
      - <span class="title-ref">scipy.special.logit</span>
      - <span class="title-ref">scipy.special.expit</span>
      - <span class="title-ref">scipy.special.entr</span>
      - <span class="title-ref">scipy.special.rel\_entr</span>
      - <span class="title-ref">scipy.special.xlogy</span>
      - <span class="title-ref">scipy.special.chdtrc</span>
  - \`scipy.stats\`: (select functions)
      - <span class="title-ref">scipy.stats.describe</span>
      - <span class="title-ref">scipy.stats.moment</span>
      - <span class="title-ref">scipy.stats.skew</span>
      - <span class="title-ref">scipy.stats.kurtosis</span>
      - <span class="title-ref">scipy.stats.kstat</span>
      - <span class="title-ref">scipy.stats.kstatvar</span>
      - <span class="title-ref">scipy.stats.circmean</span>
      - <span class="title-ref">scipy.stats.circvar</span>
      - <span class="title-ref">scipy.stats.circstd</span>
      - <span class="title-ref">scipy.stats.entropy</span>
      - <span class="title-ref">scipy.stats.variation</span>
      - <span class="title-ref">scipy.stats.sem</span>
      - <span class="title-ref">scipy.stats.ttest\_1samp</span>
      - <span class="title-ref">scipy.stats.pearsonr</span>
      - <span class="title-ref">scipy.stats.chisquare</span>
      - <span class="title-ref">scipy.stats.skewtest</span>
      - <span class="title-ref">scipy.stats.kurtosistest</span>
      - <span class="title-ref">scipy.stats.normaltest</span>
      - <span class="title-ref">scipy.stats.jarque\_bera</span>
      - <span class="title-ref">scipy.stats.bartlett</span>
      - <span class="title-ref">scipy.stats.power\_divergence</span>
      - <span class="title-ref">scipy.stats.monte\_carlo\_test</span>

## Deprecated features

  - <span class="title-ref">scipy.stats.gstd</span>, <span class="title-ref">scipy.stats.chisquare</span>, and <span class="title-ref">scipy.stats.power\_divergence</span> have deprecated support for masked array input.
  - <span class="title-ref">scipy.stats.linregress</span> has deprecated support for specifying both samples in one argument; `x` and `y` are to be provided as separate arguments.
  - The `conjtransp` method for <span class="title-ref">scipy.sparse.dok\_array</span> and <span class="title-ref">scipy.sparse.dok\_matrix</span> has been deprecated and will be removed in SciPy 1.16.0.
  - The option `quadrature="trapz"` in <span class="title-ref">scipy.integrate.quad\_vec</span> has been deprecated in favour of `quadrature="trapezoid"` and will be removed in SciPy 1.16.0.
  - `scipy.special.{comb,perm}` have deprecated support for use of `exact=True` in conjunction with non-integral `N` and/or `k`.

## Backwards incompatible changes

  - Many <span class="title-ref">scipy.stats</span> functions now produce a standardized warning message when an input sample is too small (e.g. zero size). Previously, these functions may have raised an error, emitted one or more less informative warnings, or emitted no warnings. In most cases, returned results are unchanged; in almost all cases the correct result is `NaN`.

### Expired deprecations

There is an ongoing effort to follow through on long-standing deprecations. The following previously deprecated features are affected:

  - Several previously deprecated methods for sparse arrays were removed: `asfptype`, `getrow`, `getcol`, `get_shape`, `getmaxprint`, `set_shape`, `getnnz`, and `getformat`. Additionally, the `.A` and `.H` attributes were removed.
  - `scipy.integrate.{simps,trapz,cumtrapz}` have been removed in favour of `simpson`, `trapezoid`, and `cumulative_trapezoid`.
  - The `tol` argument of `scipy.sparse.linalg.{bcg,bicstab,cg,cgs,gcrotmk, mres,lgmres,minres,qmr,tfqmr}` has been removed in favour of `rtol`. Furthermore, the default value of `atol` for these functions has changed to `0.0`.
  - The `restrt` argument of <span class="title-ref">scipy.sparse.linalg.gmres</span> has been removed in favour of `restart`.
  - The `initial_lexsort` argument of <span class="title-ref">scipy.stats.kendalltau</span> has been removed.
  - The `cond` and `rcond` arguments of <span class="title-ref">scipy.linalg.pinv</span> have been removed.
  - The `even` argument of <span class="title-ref">scipy.integrate.simpson</span> has been removed.
  - The `turbo` and `eigvals` arguments from `scipy.linalg.{eigh,eigvalsh}` have been removed.
  - The `legacy` argument of <span class="title-ref">scipy.special.comb</span> has been removed.
  - The `hz`/`nyq` argument of `signal.{firls, firwin, firwin2, remez}` has been removed.
  - Objects that weren't part of the public interface but were accessible through deprecated submodules have been removed.
  - `float128`, `float96`, and object arrays now raise an error in <span class="title-ref">scipy.signal.medfilt</span> and <span class="title-ref">scipy.signal.order\_filter</span>.
  - `scipy.interpolate.interp2d` has been replaced by an empty stub (to be removed completely in the future).
  - Coinciding with changes to function signatures (e.g. removal of a deprecated keyword), we had deprecated positional use of keyword arguments for the affected functions, which will now raise an error. Affected functions are:
      - `sparse.linalg.{bicg, bicgstab, cg, cgs, gcrotmk, gmres, lgmres, minres, qmr, tfqmr}`
      - `stats.kendalltau`
      - `linalg.pinv`
      - `integrate.simpson`
      - `linalg.{eigh,eigvalsh}`
      - `special.comb`
      - `signal.{firls, firwin, firwin2, remez}`

## Other changes

  - SciPy now uses C17 as the C standard to build with, instead of C99. The C++ standard remains C++17.
  - macOS Accelerate, which got a major upgrade in macOS 13.3, is now supported. This results in significant performance improvements for linear algebra operations, as well as smaller binary wheels.
  - Cross-compilation should be smoother and QEMU or similar is no longer needed to run the cross interpreter.
  - Experimental array API support for the JAX backend has been added to several parts of SciPy.

## Authors

  - Name (commits)
  - h-vetinari (34)
  - Steven Adams (1) +
  - Max Aehle (1) +
  - Ataf Fazledin Ahamed (2) +
  - Luiz Eduardo Amaral (1) +
  - Trinh Quoc Anh (1) +
  - Miguel A. Batalla (7) +
  - Tim Beyer (1) +
  - Andrea Blengino (1) +
  - boatwrong (1)
  - Jake Bowhay (51)
  - Dietrich Brunn (2)
  - Evgeni Burovski (177)
  - Tim Butters (7) +
  - CJ Carey (5)
  - Sean Cheah (46)
  - Lucas Colley (73)
  - Giuseppe "Peppe" Dilillo (1) +
  - DWesl (2)
  - Pieter Eendebak (5)
  - Kenji S Emerson (1) +
  - Jonas Eschle (1)
  - fancidev (2)
  - Anthony Frazier (1) +
  - Ilan Gold (1) +
  - Ralf Gommers (125)
  - Rohit Goswami (28)
  - Ben Greiner (1) +
  - Lorenzo Gualniera (1) +
  - Matt Haberland (260)
  - Shawn Hsu (1) +
  - Budjen Jovan (3) +
  - Jozsef Kutas (1)
  - Eric Larson (3)
  - Gregory R. Lee (4)
  - Philip Loche (1) +
  - Christian Lorentzen (5)
  - Sijo Valayakkad Manikandan (2) +
  - marinelay (2) +
  - Nikolay Mayorov (1)
  - Nicholas McKibben (2)
  - Melissa Weber Mendonça (7)
  - João Mendes (1) +
  - Samuel Le Meur-Diebolt (1) +
  - Tomiță Militaru (2) +
  - Andrew Nelson (35)
  - Lysandros Nikolaou (1)
  - Nick ODell (5) +
  - Jacob Ogle (1) +
  - Pearu Peterson (1)
  - Matti Picus (5)
  - Ilhan Polat (9)
  - pwcnorthrop (3) +
  - Bharat Raghunathan (1)
  - Tom M. Ragonneau (2) +
  - Tyler Reddy (101)
  - Pamphile Roy (18)
  - Atsushi Sakai (9)
  - Daniel Schmitz (5)
  - Julien Schueller (2) +
  - Dan Schult (13)
  - Tomer Sery (7)
  - Scott Shambaugh (4)
  - Tuhin Sharma (1) +
  - Sheila-nk (4)
  - Skylake (1) +
  - Albert Steppi (215)
  - Kai Striega (6)
  - Zhibing Sun (2) +
  - Nimish Telang (1) +
  - toofooboo (1) +
  - tpl2go (1) +
  - Edgar Andrés Margffoy Tuay (44)
  - Andrew Valentine (1)
  - Valerix (1) +
  - Christian Veenhuis (1)
  - void (2) +
  - Warren Weckesser (3)
  - Xuefeng Xu (1)
  - Rory Yorke (1)
  - Xiao Yuan (1)
  - Irwin Zaid (35)
  - Elmar Zander (1) +
  - Zaikun ZHANG (1)
  - ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh) (4) +

A total of 85 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.14.0

  - [\#5369](https://github.com/scipy/scipy/issues/5369): fsolve & root incorrect function-call count
  - [\#7203](https://github.com/scipy/scipy/issues/7203): vtk incompatibility with scipy.interpolate (and mvpoly.rbf)
  - [\#8056](https://github.com/scipy/scipy/issues/8056): cho\_factor and cho\_solve don't support (0,0)-shape matrices
  - [\#8083](https://github.com/scipy/scipy/issues/8083): special.hyp2f1 returns the wrong values when c-a-b is an integer...
  - [\#8510](https://github.com/scipy/scipy/issues/8510): ValueError: failed to create intent(cacheoptional array--...
  - [\#8848](https://github.com/scipy/scipy/issues/8848): \`integrate.solve\_ivp\` try to evaluate the function with much...
  - [\#8856](https://github.com/scipy/scipy/issues/8856): LinearNDInterpolator not thread safe
  - [\#9198](https://github.com/scipy/scipy/issues/9198): \`solve\_ivp\` RK45 can evaluate the function at times later than...
  - [\#9307](https://github.com/scipy/scipy/issues/9307): feature request: make \`scipy.stats.pearsonr\` accept 2-D arrays
  - [\#9459](https://github.com/scipy/scipy/issues/9459): BUG: linalg: lu and decompositions don't support (0, 1) or (0,...
  - [\#12515](https://github.com/scipy/scipy/issues/12515): scipy.linalg.pinvh gives incorrect results
  - [\#14244](https://github.com/scipy/scipy/issues/14244): ValueError: On entry to DGESDD parameter number 10 had an illegal...
  - [\#14389](https://github.com/scipy/scipy/issues/14389): \`linalg.inv\` fails for arrays of shape (0, 0)
  - [\#14806](https://github.com/scipy/scipy/issues/14806): ENH: Add the Irwin-Hall (Uniform Sum) and Bates (Uniform Mean)...
  - [\#15722](https://github.com/scipy/scipy/issues/15722): DEP: special.comb: deprecate \`exact=True\` for non-integers
  - [\#16131](https://github.com/scipy/scipy/issues/16131): BUG: spsolve\_triangular is way slower than spsolve
  - [\#16583](https://github.com/scipy/scipy/issues/16583): Combining extensions in \`stats.\_boost\` into one
  - [\#16748](https://github.com/scipy/scipy/issues/16748): None of the \`[cython]()\*\` APIs have any tests using Cython
  - [\#16926](https://github.com/scipy/scipy/issues/16926): TEST/BUG: Tolerance violation in test\_solvers::test\_solve\_discrete\_are
  - [\#17084](https://github.com/scipy/scipy/issues/17084): ENH: Exporting the removed component of detrend()
  - [\#17341](https://github.com/scipy/scipy/issues/17341): BUG: \`solve\_ivp\` evaluates outside the requested interval for...
  - [\#17559](https://github.com/scipy/scipy/issues/17559): ENH: \_mannwhitneyu.py computation of exact MWU statistics may...
  - [\#17658](https://github.com/scipy/scipy/issues/17658): Inconsistent support for empty matrices in linalg
  - [\#19322](https://github.com/scipy/scipy/issues/19322): BUG: \`rv\_discrete.expect\` fails when duplicate positions
  - [\#19348](https://github.com/scipy/scipy/issues/19348): BUG: stats.nct.pdf inconsistent behavior when compared to MATLAB...
  - [\#19586](https://github.com/scipy/scipy/issues/19586): BUG: scipy.signal.group\_delay not correct for complex coefficients
  - [\#19598](https://github.com/scipy/scipy/issues/19598): BUG: Bug in \`scipy.sparse.linalg.svds\` for large sparse matrices...
  - [\#19649](https://github.com/scipy/scipy/issues/19649): ENH: as\_quat() and from\_quat() seams to be reverse x,y,z,w vs...
  - [\#19734](https://github.com/scipy/scipy/issues/19734): Build warnings from HiGHS
  - [\#19872](https://github.com/scipy/scipy/issues/19872): BUG: error in calculation of p-values in sp.stats.wilcoxon when...
  - [\#19905](https://github.com/scipy/scipy/issues/19905): DEP: remove deprecated imports from privatized modules
  - [\#19918](https://github.com/scipy/scipy/issues/19918): ENH: Adding COBYQA to \`scipy.optimize\`?
  - [\#19921](https://github.com/scipy/scipy/issues/19921): BUG: Inconsistent Output from BenchGlobal Compared to BenchLeastSquares...
  - [\#19964](https://github.com/scipy/scipy/issues/19964): MAINT:BLD:special:Overhaul \_ufuncs and cython\_special machinery
  - [\#20124](https://github.com/scipy/scipy/issues/20124): BUG: stats.skewnorm.ppf returns wrong values with moderately...
  - [\#20128](https://github.com/scipy/scipy/issues/20128): BUG: \`csr\_array(int())\` errors
  - [\#20208](https://github.com/scipy/scipy/issues/20208): BUG: Test failures due to \`invalid value encountered in \_beta\_ppf\`...
  - [\#20247](https://github.com/scipy/scipy/issues/20247): ENH: Akima1DInterpolator Extrapolation
  - [\#20256](https://github.com/scipy/scipy/issues/20256): MAINT, BLD: symbol visibility warnings on MacOS ARM static lib...
  - [\#20277](https://github.com/scipy/scipy/issues/20277): Very noisy doc builds after jupyterlite-sphinx integration
  - [\#20296](https://github.com/scipy/scipy/issues/20296): CI: jupyterlite-shpinx pin breaks recent doc builds
  - [\#20324](https://github.com/scipy/scipy/issues/20324): MAINT, BUG (?): pearsonr statistic return type change
  - [\#20357](https://github.com/scipy/scipy/issues/20357): BUG: Memory usage in griddata function in version 1.12
  - [\#20358](https://github.com/scipy/scipy/issues/20358): TST, MAINT: failure in TestGroupDelay::test\_singular against...
  - [\#20377](https://github.com/scipy/scipy/issues/20377): ENH: sparse: Update str dunder to handle 1D (and 2D better)
  - [\#20378](https://github.com/scipy/scipy/issues/20378): ENH: sparse: Update repr dunder to handle 1D (and maybe 2D better)
  - [\#20385](https://github.com/scipy/scipy/issues/20385): MAINT: special version hex cleanup
  - [\#20386](https://github.com/scipy/scipy/issues/20386): BUG: scipy.stats.kstest returns NaN starting in scipy 1.12
  - [\#20388](https://github.com/scipy/scipy/issues/20388): DOC: Version switcher is not vertically centred on mobile
  - [\#20394](https://github.com/scipy/scipy/issues/20394): BUG: unnecessary computations in iirpeak/iirnotch/iircomb filter...
  - [\#20399](https://github.com/scipy/scipy/issues/20399): BUG: scipy.special.logsumexp raises ValueError for a zero-size...
  - [\#20419](https://github.com/scipy/scipy/issues/20419): BUG: nightly: .special.jv now promotes float32 inputs to float64
  - [\#20434](https://github.com/scipy/scipy/issues/20434): BUG: sparse dia\_array changes to csr after multiplication
  - [\#20455](https://github.com/scipy/scipy/issues/20455): BUG: signal.iirfilter: overflow for integer input
  - [\#20458](https://github.com/scipy/scipy/issues/20458): MAINT: more potential cleanups related to version bumps
  - [\#20461](https://github.com/scipy/scipy/issues/20461): DOC: some likely changes to release process docs
  - [\#20466](https://github.com/scipy/scipy/issues/20466): BUG: scipy.linalg.bandwidth returns incorrect upper bandwidth
  - [\#20470](https://github.com/scipy/scipy/issues/20470): BUG: \`TestNNLS.test\_nnls\_inner\_loop\_case1\` fails with MKL
  - [\#20486](https://github.com/scipy/scipy/issues/20486): DEP: deprecate and remove remaining usages of slur-adjacent "trapz"
  - [\#20488](https://github.com/scipy/scipy/issues/20488): BUG: When given invalid bounds, \`\_minimize\_neldermead\` raises...
  - [\#20492](https://github.com/scipy/scipy/issues/20492): DOC: linalg.solve\_discrete\_lyapunov: dead reference link
  - [\#20502](https://github.com/scipy/scipy/issues/20502): BUG: special.hyp2f1: local test failure
  - [\#20509](https://github.com/scipy/scipy/issues/20509): DOC: Clarify behavior of \`sparse.csgraph.dijkstra\` for \`directed=False\`
  - [\#20523](https://github.com/scipy/scipy/issues/20523): CI/BLD: Nightly wheel builds failing for macOS x86\_64
  - [\#20535](https://github.com/scipy/scipy/issues/20535): BUG: generate\_f2py mod is called by the wrong interpreter
  - [\#20540](https://github.com/scipy/scipy/issues/20540): BUG: pytest scipy/linalg/tests/test\_extending.py fails with Cython...
  - [\#20551](https://github.com/scipy/scipy/issues/20551): DOC/DEV: clearly document which code has an active upstream repo
  - [\#20562](https://github.com/scipy/scipy/issues/20562): BUG: Invalid default bracket selection in \_bracket\_minimum.
  - [\#20564](https://github.com/scipy/scipy/issues/20564): TST: stats array API failure for test\_skew\_constant\_value\[torch\]...
  - [\#20584](https://github.com/scipy/scipy/issues/20584): BUG: \`optimize.linprog\` fails with \`list\` type \`integrality\`...
  - [\#20587](https://github.com/scipy/scipy/issues/20587): BLD: warning from \`scipy/special/special/gamma.h\`
  - [\#20598](https://github.com/scipy/scipy/issues/20598): ENH: special: add log of wright\_bessel
  - [\#20603](https://github.com/scipy/scipy/issues/20603): DOC: document switch from mailing list to discourse
  - [\#20614](https://github.com/scipy/scipy/issues/20614): DOC: dual\_annealing optimizer does not pass bounds to minimizer...
  - [\#20618](https://github.com/scipy/scipy/issues/20618): BUG: scipy 'minimize' with method='trust-constr' with equality...
  - [\#20620](https://github.com/scipy/scipy/issues/20620): DOC: Suggested improvement to interp2d transition guide
  - [\#20641](https://github.com/scipy/scipy/issues/20641): BUG: stats: Two new XSLOW test failures
  - [\#20661](https://github.com/scipy/scipy/issues/20661): MAINT, TST: failure in test\_axis\_nan\_policy\_decorated\_positional\_args...
  - [\#20662](https://github.com/scipy/scipy/issues/20662): DOC: Missing blankspace in error message raised by cont2discrete()
  - [\#20674](https://github.com/scipy/scipy/issues/20674): DOC: A typo in authors name in signal.ellipap reference
  - [\#20683](https://github.com/scipy/scipy/issues/20683): DOC: A typo in ValueError raised by signal.iirdesign
  - [\#20691](https://github.com/scipy/scipy/issues/20691): ENH: Reintroduce Apple Accelerate support
  - [\#20697](https://github.com/scipy/scipy/issues/20697): BUG: special: algorithmic Error in \`ratevl\` in \`cephes/polevl.h\`
  - [\#20755](https://github.com/scipy/scipy/issues/20755): BUG: stats: Two new test failures
  - [\#20768](https://github.com/scipy/scipy/issues/20768): BUG: optimize.minimize: garbage collection in \`lbfgs\`
  - [\#20783](https://github.com/scipy/scipy/issues/20783): BUG: Build failure on PyPy3.10 7.3.16: \`error: ‘Py\_Initialize’...
  - [\#20797](https://github.com/scipy/scipy/issues/20797): BUG: special.hyp1f1: broken for complex argument
  - [\#20802](https://github.com/scipy/scipy/issues/20802): MAINT, TST: pytest-fail-slow and local concurrent runs/variability
  - [\#20840](https://github.com/scipy/scipy/issues/20840): BUG: first shared library in scipy fails to be consumed by MSVC
  - [\#20850](https://github.com/scipy/scipy/issues/20850): DOC: stats.bootstrap: improve documentation multidimensional...
  - [\#20852](https://github.com/scipy/scipy/issues/20852): BUG: Library not loaded: @rpath/libgfortran.5.dylib for scipy...
  - [\#20860](https://github.com/scipy/scipy/issues/20860): BUG/BLD: scipy-1.13.1 fails to build with msvc
  - [\#20901](https://github.com/scipy/scipy/issues/20901): BUG: \`zsh: abort python\` after \`scipy.linalg.sqrtm\` on empty...
  - [\#20911](https://github.com/scipy/scipy/issues/20911): TST: TestEig.test\_singular failing tolerance with generic BLAS...
  - [\#20921](https://github.com/scipy/scipy/issues/20921): DOC: stats: wrong docstrings of \`\*Result\` classes
  - [\#20938](https://github.com/scipy/scipy/issues/20938): TST: tolerance violations with SciPy 1.14.0rc1 on linux-{aarch64,ppc64le}
  - [\#20943](https://github.com/scipy/scipy/issues/20943): TST: test failures on windows with SciPy 1.14.0rc1

## Pull requests for 1.14.0

  - [\#13534](https://github.com/scipy/scipy/pull/13534): ENH: Add more initialization methods for HessianUpdateStrategy
  - [\#15321](https://github.com/scipy/scipy/pull/15321): ENH: fft: Add \`prev\_fast\_len\` to complement \`next\_fast\_len\`
  - [\#17348](https://github.com/scipy/scipy/pull/17348): BUG: integrate: make \`select\_initial\_step\` aware of integration...
  - [\#17924](https://github.com/scipy/scipy/pull/17924): ENH: sparse.linalg: speed up \`spsolve\_triangular\`
  - [\#18926](https://github.com/scipy/scipy/pull/18926): ENH: Move symiirorder1/2, cspline2d, qspline2d and spline\_filter...
  - [\#19561](https://github.com/scipy/scipy/pull/19561): ENH: stats.power: add function to simulate hypothesis test power
  - [\#19627](https://github.com/scipy/scipy/pull/19627): FIX: correctly compute group\_delay for complex-coefficient TFs
  - [\#19673](https://github.com/scipy/scipy/pull/19673): DEP: signal: raise error using medfilt and order\_filter with...
  - [\#19706](https://github.com/scipy/scipy/pull/19706): ENH: Add half=True kwarg to minimum\_phase
  - [\#19816](https://github.com/scipy/scipy/pull/19816): BLD: Add Accelerate support for macOS 13.3+
  - [\#19900](https://github.com/scipy/scipy/pull/19900): MAINT/TST: fft: remove xp backend skips, test \`fftfreq\` \`device\`
  - [\#19904](https://github.com/scipy/scipy/pull/19904): MAINT: remove incidental imports from private modules
  - [\#19923](https://github.com/scipy/scipy/pull/19923): ENH: stats.mannwhitneyu: replace exact p-value calculation
  - [\#19954](https://github.com/scipy/scipy/pull/19954): MAINT: Translate wright\_bessel function to C++
  - [\#19960](https://github.com/scipy/scipy/pull/19960): DOC: Add examples to \`scipy.interpolate.spalde\`
  - [\#19994](https://github.com/scipy/scipy/pull/19994): ENH: add cobyqa to scipy.optimize.
  - [\#20073](https://github.com/scipy/scipy/pull/20073): ENH: special: fix premature overflow in \`boxcox\`
  - [\#20079](https://github.com/scipy/scipy/pull/20079): ENH: io: Read and write wav files of size \> 4GB
  - [\#20085](https://github.com/scipy/scipy/pull/20085): ENH: array types: add JAX support
  - [\#20089](https://github.com/scipy/scipy/pull/20089): ENH: Translate complex valued hyp2f1 to C++ and make improvements
  - [\#20127](https://github.com/scipy/scipy/pull/20127): ENH/TST: Refactor refguide-check, take 3
  - [\#20137](https://github.com/scipy/scipy/pull/20137): ENH: stats.pearsonr: add support for \`axis\` argument
  - [\#20187](https://github.com/scipy/scipy/pull/20187): ENH: sparse.csgraph: Yen K-shortest paths
  - [\#20199](https://github.com/scipy/scipy/pull/20199): DOC/DEV/MAINT: update core-dev guide
  - [\#20202](https://github.com/scipy/scipy/pull/20202): DOC: Reorganize contents of stats User Guide section
  - [\#20255](https://github.com/scipy/scipy/pull/20255): TST: linalg: reenable gges\[float32\] tests
  - [\#20257](https://github.com/scipy/scipy/pull/20257): BUG: prevent file descriptor leak in \`openblas\_support.py\`...
  - [\#20260](https://github.com/scipy/scipy/pull/20260): ENH: Begin overhaul of ufunc machinery
  - [\#20265](https://github.com/scipy/scipy/pull/20265): ENH: optimize: const qualify Cython array arguments
  - [\#20269](https://github.com/scipy/scipy/pull/20269): REL: set version to 1.14.0dev0
  - [\#20273](https://github.com/scipy/scipy/pull/20273): MAINT/DEV: enforce minimum \`ruff\` version
  - [\#20275](https://github.com/scipy/scipy/pull/20275): MAINT/DEV: add auto-fix to \`dev.py lint\`
  - [\#20278](https://github.com/scipy/scipy/pull/20278): DEP: integrate: remove simps,trapz,cumtrapz
  - [\#20281](https://github.com/scipy/scipy/pull/20281): BUG: optimize: correct \`nfev\` values
  - [\#20283](https://github.com/scipy/scipy/pull/20283): DEP: sparse: deprecate conjtransp() method for dok\_array/matrix...
  - [\#20284](https://github.com/scipy/scipy/pull/20284): ENH: stats.pearsonr: add array API support
  - [\#20289](https://github.com/scipy/scipy/pull/20289): DOC: Pin Jupyterlite Sphinx to avoid noisy doc builds
  - [\#20292](https://github.com/scipy/scipy/pull/20292): ENH: stats.moment: add array API support
  - [\#20295](https://github.com/scipy/scipy/pull/20295): BUG: linalg: support empty arrays
  - [\#20297](https://github.com/scipy/scipy/pull/20297): BUG: linalg: use SYEV not SYEVR for pinvh
  - [\#20298](https://github.com/scipy/scipy/pull/20298): DOC: linalg: mention that eigenvalues\_only=True/False may change...
  - [\#20304](https://github.com/scipy/scipy/pull/20304): ENH: interpolate: allow Akima extrapolation
  - [\#20310](https://github.com/scipy/scipy/pull/20310): MAINT: Pin jupyterlite-sphinx to \>=0.13.1
  - [\#20315](https://github.com/scipy/scipy/pull/20315): DOC: add docs on how to debug linear algebra related issues
  - [\#20317](https://github.com/scipy/scipy/pull/20317): MAINT/DEV: rename \`skip\_if\_array\_api\` to \`skip\_xp\_backends\`
  - [\#20320](https://github.com/scipy/scipy/pull/20320): ENH: Generalised ufuncs in special
  - [\#20321](https://github.com/scipy/scipy/pull/20321): BUG: Fix for scipy.special seterr, geterr, errstate
  - [\#20325](https://github.com/scipy/scipy/pull/20325): MAINT: Improve performance of ndimage.binary\_erosion
  - [\#20326](https://github.com/scipy/scipy/pull/20326): MAINT: Replace usage of np.prod
  - [\#20328](https://github.com/scipy/scipy/pull/20328): DOC: fix small typo in odds\_ratio
  - [\#20329](https://github.com/scipy/scipy/pull/20329): MAINT: update \`array\_api\_compat\` to v1.5.1
  - [\#20331](https://github.com/scipy/scipy/pull/20331): MAINT: Fix Cythonize bug in optimize with const view
  - [\#20335](https://github.com/scipy/scipy/pull/20335): TST: linalg: undo xfails of QZ and DARE
  - [\#20342](https://github.com/scipy/scipy/pull/20342): BLD: linalg: fix rebuild dependencies for .pyf.src files
  - [\#20354](https://github.com/scipy/scipy/pull/20354): MAINT: unpin pytest for wheels
  - [\#20355](https://github.com/scipy/scipy/pull/20355): TST: signal: bump tolerance for new \`signal.group\_delay\` test
  - [\#20356](https://github.com/scipy/scipy/pull/20356): BLD: update numpy build dependency in pyproject.toml for numpy...
  - [\#20367](https://github.com/scipy/scipy/pull/20367): STY: always \`import numpy as np\`
  - [\#20373](https://github.com/scipy/scipy/pull/20373): MAINT: drop Python 3.9 and NumPy 1.22.x
  - [\#20380](https://github.com/scipy/scipy/pull/20380): MAINT: forward port 1.13.0 relnotes
  - [\#20382](https://github.com/scipy/scipy/pull/20382): MAINT: lint: enforce \`numpy as np\` alias
  - [\#20384](https://github.com/scipy/scipy/pull/20384): ENH:special:Re-rewrite cdflib in C
  - [\#20390](https://github.com/scipy/scipy/pull/20390): MAINT:Translate the entirety of cephes into C++
  - [\#20393](https://github.com/scipy/scipy/pull/20393): MAINT/BLD: Remove \`stats.\_boost\` and add the distribution related...
  - [\#20397](https://github.com/scipy/scipy/pull/20397): ENH: Support scalar-first order of quaternion components in Rotation
  - [\#20403](https://github.com/scipy/scipy/pull/20403): ENH: special: add ufuncs for amos
  - [\#20404](https://github.com/scipy/scipy/pull/20404): BUG: interpolate: fix high memory usage for 2 classes
  - [\#20405](https://github.com/scipy/scipy/pull/20405): BUG: Fix pair of bugs in Amos and Cephes yv which masked each...
  - [\#20413](https://github.com/scipy/scipy/pull/20413): MAINT: Vendor npyrandom instead of using static library
  - [\#20416](https://github.com/scipy/scipy/pull/20416): ENH: optimize.\_chandrupatla: allow infinite function value at...
  - [\#20417](https://github.com/scipy/scipy/pull/20417): ENH: Make cython\_special actual code, not autogenerated
  - [\#20418](https://github.com/scipy/scipy/pull/20418): BUG: signal: corrections to \`iir{peak,notch,comb}\` filter gain
  - [\#20420](https://github.com/scipy/scipy/pull/20420): DOC: stats: speed up the very slow \`bootstrap\` examples
  - [\#20421](https://github.com/scipy/scipy/pull/20421): Added float32 overloads for amos functions
  - [\#20422](https://github.com/scipy/scipy/pull/20422): TST: Test cimporting Cython APIs
  - [\#20424](https://github.com/scipy/scipy/pull/20424): MAINT:special: Add license to cdflib and remove old pxd file
  - [\#20425](https://github.com/scipy/scipy/pull/20425): MAINT: Fix DOI visibility badge in README
  - [\#20426](https://github.com/scipy/scipy/pull/20426): DOC: add hints on how to debug linalg issues with gdb
  - [\#20427](https://github.com/scipy/scipy/pull/20427): DOC: speed up some examples
  - [\#20438](https://github.com/scipy/scipy/pull/20438): ENH: Translate \`sph\_harm\` Cython-\>C++, add \`sph\_harm\_all\`...
  - [\#20441](https://github.com/scipy/scipy/pull/20441): BLD: Install cython\_special.pxd
  - [\#20443](https://github.com/scipy/scipy/pull/20443): MAINT: sparse: Update EfficiencyWarning message to reflect array/matrix
  - [\#20445](https://github.com/scipy/scipy/pull/20445): ENH: sparse: special-case DIA \* scalar
  - [\#20446](https://github.com/scipy/scipy/pull/20446): MAINT: remove repetitive word typos
  - [\#20450](https://github.com/scipy/scipy/pull/20450): BLD: avoid setting an environment variable in a meson.build file
  - [\#20453](https://github.com/scipy/scipy/pull/20453): DOC: special: add examples for pdtrc, pdtri, pdtrik
  - [\#20454](https://github.com/scipy/scipy/pull/20454): DOC: Update toolchain roadmap (1/N)
  - [\#20456](https://github.com/scipy/scipy/pull/20456): BUG: signal.iirfilter: avoid integer overflow
  - [\#20457](https://github.com/scipy/scipy/pull/20457): ENH: Add \`scipy.special.\_ufuncs.\_iv\_ratio\`
  - [\#20460](https://github.com/scipy/scipy/pull/20460): DOC: Remove extra css colors and settings
  - [\#20462](https://github.com/scipy/scipy/pull/20462): DOC: update readme with link to new forum
  - [\#20463](https://github.com/scipy/scipy/pull/20463): MAINT: Refactor special function ufunc generation and consolidate...
  - [\#20465](https://github.com/scipy/scipy/pull/20465): MAINT: special: fix compiler warning for unused variable
  - [\#20467](https://github.com/scipy/scipy/pull/20467): MAINT: stats.\_contains\_nan: fix bug when -inf and inf are in...
  - [\#20468](https://github.com/scipy/scipy/pull/20468): TST: stats: mark tests slow/xslow
  - [\#20469](https://github.com/scipy/scipy/pull/20469): MAINT/CI: Remove doctesting from refguide-check
  - [\#20477](https://github.com/scipy/scipy/pull/20477): BLD: ensure all static libraries use hidden visibility
  - [\#20478](https://github.com/scipy/scipy/pull/20478): CI/MAINT: Increase minimum required compiler versions to GCC...
  - [\#20480](https://github.com/scipy/scipy/pull/20480): CI: fail slow tests
  - [\#20481](https://github.com/scipy/scipy/pull/20481): ENH: stats: Add the Irwin-Hall distribution
  - [\#20482](https://github.com/scipy/scipy/pull/20482): CI: standardize job names
  - [\#20483](https://github.com/scipy/scipy/pull/20483): ENH: special: translate \`sph\_bessel\` to C++, refactor \`cyl\_bessel\`
  - [\#20487](https://github.com/scipy/scipy/pull/20487): TST: adjust other very slow tests
  - [\#20490](https://github.com/scipy/scipy/pull/20490): BUG: sparse: raise error for array classes, document/test old...
  - [\#20494](https://github.com/scipy/scipy/pull/20494): BUG: \_qmc.py::\_random\_oa\_lhs produces correlated samples
  - [\#20495](https://github.com/scipy/scipy/pull/20495): BUG: Remove keyword argument from ValueError in SciPy.optimize
  - [\#20497](https://github.com/scipy/scipy/pull/20497): DEP: interpolate: replace interp2d by stub
  - [\#20498](https://github.com/scipy/scipy/pull/20498): DEP: switch sparse methods to kwarg-only; remove tol/restrt kwargs
  - [\#20499](https://github.com/scipy/scipy/pull/20499): DEP: execute sparse array API deprecations
  - [\#20500](https://github.com/scipy/scipy/pull/20500): DOC: Update dead reference link in \`Scipy.linalg.\_solvers.py\`:...
  - [\#20501](https://github.com/scipy/scipy/pull/20501): MAINT: optimize.\_chandrupatla: reduce xatol
  - [\#20503](https://github.com/scipy/scipy/pull/20503): MAINT: spatial: Fix type annotation of \`query\_ball\_point\`
  - [\#20508](https://github.com/scipy/scipy/pull/20508): DOC: Fix legacy admonition styling
  - [\#20510](https://github.com/scipy/scipy/pull/20510): BLD: Accelerate wheels for macOS 14+
  - [\#20511](https://github.com/scipy/scipy/pull/20511): BUG: Fix raising ValueError on a zero-size array for SciPy.special.logsumexp
  - [\#20515](https://github.com/scipy/scipy/pull/20515): BLD: default to C17 rather than C99
  - [\#20522](https://github.com/scipy/scipy/pull/20522): TST: Skip or fix some failing tests on certain macOS builds
  - [\#20526](https://github.com/scipy/scipy/pull/20526): BLD: adjust lower bound on Clang/LLVM from 14.0 to 12.0
  - [\#20529](https://github.com/scipy/scipy/pull/20529): MAINT: remove repeated "is" typos
  - [\#20534](https://github.com/scipy/scipy/pull/20534): BUG: Fixes incorrect upper\_band value for scipy.linalg.bandwidth
  - [\#20536](https://github.com/scipy/scipy/pull/20536): CI: Check whether Python.h is included first in a file
  - [\#20538](https://github.com/scipy/scipy/pull/20538): TST: \_lib: remove redundant test for missing \`stacklevel\`
  - [\#20541](https://github.com/scipy/scipy/pull/20541): ENH: stats.skew: add array-API support
  - [\#20542](https://github.com/scipy/scipy/pull/20542): BLD: Accelerate builds should not define \`NO\_APPEND\_FORTRAN\`
  - [\#20545](https://github.com/scipy/scipy/pull/20545): ENH: stats.ttest\_1samp: add array-API support
  - [\#20546](https://github.com/scipy/scipy/pull/20546): DOC: use more correct and inclusive pronouns
  - [\#20547](https://github.com/scipy/scipy/pull/20547): DOC: stats.linregress: split stats/mstats documentation
  - [\#20548](https://github.com/scipy/scipy/pull/20548): TST: Skip Cython tests for editable installs
  - [\#20550](https://github.com/scipy/scipy/pull/20550): DEP: stats: switch kendalltau to kwarg-only, remove initial\_lexsort...
  - [\#20554](https://github.com/scipy/scipy/pull/20554): DEP: integrate: switch simpson to kwarg-only, remove even kwarg
  - [\#20556](https://github.com/scipy/scipy/pull/20556): DOC: release process updates
  - [\#20559](https://github.com/scipy/scipy/pull/20559): DOC/DEV: add core-dev page on vendored code
  - [\#20560](https://github.com/scipy/scipy/pull/20560): DEP: linalg: remove turbo / eigvals kwargs from linalg.{eigh,eigvalsh}...
  - [\#20563](https://github.com/scipy/scipy/pull/20563): BUG: Fix invalid default bracket selection in \_bracket\_minimum
  - [\#20565](https://github.com/scipy/scipy/pull/20565): DEP: linalg: remove cond / rcond kwargs from linalg.pinv and...
  - [\#20568](https://github.com/scipy/scipy/pull/20568): DOC: change approx\_fprime doctest
  - [\#20572](https://github.com/scipy/scipy/pull/20572): MAINT: vendor Tempita in \`scipy/\_build\_utils\`
  - [\#20575](https://github.com/scipy/scipy/pull/20575): TST: stats.skew: assert\_equal -\> xp\_assert\_equal as appropriate
  - [\#20577](https://github.com/scipy/scipy/pull/20577): DEV: add unicode check to pre-commit-hook
  - [\#20578](https://github.com/scipy/scipy/pull/20578): DEP: signal: remove nyq / Hz kwargs in firwin\* and switch to...
  - [\#20582](https://github.com/scipy/scipy/pull/20582): MAINT: optimize.isotonic\_regression: remove unnecessary copies
  - [\#20583](https://github.com/scipy/scipy/pull/20583): TST: stats.rv\_continuous.fit: adjust fit XSLOW/XFAIL/skip sets
  - [\#20585](https://github.com/scipy/scipy/pull/20585): CI/BLD: use scipy-openblas wheel when building
  - [\#20588](https://github.com/scipy/scipy/pull/20588): DEP: special: remove legacy kwarg from special.comb and switch...
  - [\#20590](https://github.com/scipy/scipy/pull/20590): Revert "ENH: Use \`highspy\` in \`linprog\`"
  - [\#20593](https://github.com/scipy/scipy/pull/20593): ENH: constants: add array api support
  - [\#20595](https://github.com/scipy/scipy/pull/20595): ENH: \`stats.circ\_\_\_\`: add array-API support
  - [\#20597](https://github.com/scipy/scipy/pull/20597): ENH: stats.skewtest: add array-API support
  - [\#20600](https://github.com/scipy/scipy/pull/20600): TYP: update supported Mypy version from 1.0.0 to 1.10.0
  - [\#20604](https://github.com/scipy/scipy/pull/20604): ENH: stats.monte\_carlo\_test: add array API support
  - [\#20612](https://github.com/scipy/scipy/pull/20612): BLD: fix use of non-default interpreter, improve f2py handling
  - [\#20615](https://github.com/scipy/scipy/pull/20615): ENH: stats: Implement \_isf for burr12
  - [\#20616](https://github.com/scipy/scipy/pull/20616): DOC: integrate: remove references to deprecated and legacy functions
  - [\#20619](https://github.com/scipy/scipy/pull/20619): ENH: spatial: serialize concurrent calls to QHull
  - [\#20621](https://github.com/scipy/scipy/pull/20621): TYP: add type annotations to \`scipy/\_lib/\_array\_api.py\`
  - [\#20625](https://github.com/scipy/scipy/pull/20625): TST: add dtype dependent default rtol to xp\_assert\_close
  - [\#20627](https://github.com/scipy/scipy/pull/20627): MAINT: special: Drop unused function\_calls variable in kolmogorov.h
  - [\#20628](https://github.com/scipy/scipy/pull/20628): TST: integrate.tanhsinh: make test case XSLOW
  - [\#20630](https://github.com/scipy/scipy/pull/20630): ENH: optimize.\_jacobian: use \_differentiate to compute accurate...
  - [\#20631](https://github.com/scipy/scipy/pull/20631): ENH: stats.sem: add array-API support
  - [\#20634](https://github.com/scipy/scipy/pull/20634): ENH: stats: add array-API support to kstat/kstatvar
  - [\#20637](https://github.com/scipy/scipy/pull/20637): MAINT: Fix broken links in \`datasets.\_fetchers\` module
  - [\#20640](https://github.com/scipy/scipy/pull/20640): TST: adjust new array API test, slow tests
  - [\#20642](https://github.com/scipy/scipy/pull/20642): TST: stats.ttest\_1samp: fix xslow test
  - [\#20643](https://github.com/scipy/scipy/pull/20643): MAINT:update boost to fix \`skewnorm.ppf\`
  - [\#20645](https://github.com/scipy/scipy/pull/20645): ENH: optimize.approx\_fprime: avoid quadratic memory usage
  - [\#20646](https://github.com/scipy/scipy/pull/20646): ENH: special: add \`log\_wright\_bessel\`
  - [\#20647](https://github.com/scipy/scipy/pull/20647): ENH: stats.variation: add array-API support
  - [\#20649](https://github.com/scipy/scipy/pull/20649): MAINT: sparse: reformat str and repr for sparse arrays, correct...
  - [\#20651](https://github.com/scipy/scipy/pull/20651): ENH: stats.kstat/kstatvar: add native support for \`axis\`
  - [\#20656](https://github.com/scipy/scipy/pull/20656): ENH: Micro-optimizations for spatial.transform.Rotation methods
  - [\#20657](https://github.com/scipy/scipy/pull/20657): MAINT: remove unused variable in special
  - [\#20658](https://github.com/scipy/scipy/pull/20658): ENH: stats.kurtosis: add array API support
  - [\#20663](https://github.com/scipy/scipy/pull/20663): MAINT: stats.kruskal: fix no-arg behavior w/ SCIPY\_ARRAY\_API=1
  - [\#20664](https://github.com/scipy/scipy/pull/20664): Fix typo in cont2discrete
  - [\#20665](https://github.com/scipy/scipy/pull/20665): trust-constr make origin of error message clearer when there...
  - [\#20667](https://github.com/scipy/scipy/pull/20667): ENH: stats.describe: add array API support
  - [\#20673](https://github.com/scipy/scipy/pull/20673): ENH: stats.entropy, special.{entr, rel\_entr}: add array API support
  - [\#20675](https://github.com/scipy/scipy/pull/20675): DOC: Fixed typo in signal.ellipap
  - [\#20676](https://github.com/scipy/scipy/pull/20676): MAINT: clarify dual\_annealing-minimizer\_kwargs docstring. Closes...
  - [\#20677](https://github.com/scipy/scipy/pull/20677): TST: test\_\_differential\_evolution tweaks for speed
  - [\#20679](https://github.com/scipy/scipy/pull/20679): MAINT: special.wright\_bessel: add comment about reference text
  - [\#20684](https://github.com/scipy/scipy/pull/20684): MAINT: Fix missing whitespace in signal.iirdesign, spacing consistency...
  - [\#20685](https://github.com/scipy/scipy/pull/20685): MAINT: Add graceful handling of invalid initial brackets to elementwise...
  - [\#20689](https://github.com/scipy/scipy/pull/20689): ENH: optimize.\_chandrupatla: add array API support
  - [\#20694](https://github.com/scipy/scipy/pull/20694): MAINT: stats: make reducing functions emit consistent warning...
  - [\#20696](https://github.com/scipy/scipy/pull/20696): MAINT: stats.gstd: return result rather than raising
  - [\#20698](https://github.com/scipy/scipy/pull/20698): DEV/BLD: add --with-accelerate flag to \`dev.py build\`
  - [\#20705](https://github.com/scipy/scipy/pull/20705): MAINT: Add missing whitespace
  - [\#20711](https://github.com/scipy/scipy/pull/20711): MAINT: numpy cleanup version bumps: fixes issue \#20458
  - [\#20712](https://github.com/scipy/scipy/pull/20712): ENH/BLD: Add install tags for \`tests\`
  - [\#20715](https://github.com/scipy/scipy/pull/20715): ENH: stats.kurtosistest: add array API support
  - [\#20716](https://github.com/scipy/scipy/pull/20716): DEP: integrate.quad\_vec: deprecate \`quadrature="trapz"\`
  - [\#20722](https://github.com/scipy/scipy/pull/20722): ENH: sparse: Speed up \`\_add\_sparse\` for DIA format
  - [\#20726](https://github.com/scipy/scipy/pull/20726): DOC: stats.{circmean, circvar, circstd}: improve accuracy/clarity
  - [\#20730](https://github.com/scipy/scipy/pull/20730): BUG: special: fix algorithmic error in \`ratevl\` in \`cephes/polevl.h\`
  - [\#20732](https://github.com/scipy/scipy/pull/20732): BUG: interpolate: do not segfault on bad boundary conditions
  - [\#20734](https://github.com/scipy/scipy/pull/20734): BUG: stats.ttest\_1samp: fix use of \`keepdims\`
  - [\#20736](https://github.com/scipy/scipy/pull/20736): ENH: stats.normaltest/jarque\_bera: add array-API support
  - [\#20737](https://github.com/scipy/scipy/pull/20737): TST, MAINT: run optimize array API tests and fix \`chandrupatla\`
  - [\#20738](https://github.com/scipy/scipy/pull/20738): DOC: sparse.csgraph.dijkstra: add warning for \`directed=False\`...
  - [\#20741](https://github.com/scipy/scipy/pull/20741): MAINT: optimize: another fail\_slow exception for COBYQA
  - [\#20744](https://github.com/scipy/scipy/pull/20744): MAINT: use PyTorch 2.3 in CI, fix CuPy failures, more type annotations...
  - [\#20745](https://github.com/scipy/scipy/pull/20745): BUG: Fix incorrect brackets in cephes hyperg.h
  - [\#20746](https://github.com/scipy/scipy/pull/20746): DOC: stats: update formulas given for kstat/kstatvar to reflect...
  - [\#20748](https://github.com/scipy/scipy/pull/20748): TST: bump tolerance to address local \`test\_axis\_nan\_policy\`...
  - [\#20750](https://github.com/scipy/scipy/pull/20750): ENH: some micro-optimisations for differential\_evolution
  - [\#20751](https://github.com/scipy/scipy/pull/20751): ENH: stats.bartlett: add native \`axis\` and array API support
  - [\#20753](https://github.com/scipy/scipy/pull/20753): ENH: stats.chisquare/power\_divergence: add array API support
  - [\#20756](https://github.com/scipy/scipy/pull/20756): TST: stats: refactor tests of normality tests
  - [\#20764](https://github.com/scipy/scipy/pull/20764): TST: stats.fit: address xslow test failures
  - [\#20765](https://github.com/scipy/scipy/pull/20765): MAINT: stats.wilcoxon: make \`method='exact'\` symmetric w/ ties
  - [\#20769](https://github.com/scipy/scipy/pull/20769): MAINT: stats: move \`multiscale\_graphcorr\` tests to save time
  - [\#20770](https://github.com/scipy/scipy/pull/20770): MAINT: optimize: remove circular reference in \`ScalarFunction\`
  - [\#20775](https://github.com/scipy/scipy/pull/20775): MAINT: forward port 1.13.1 relnotes
  - [\#20777](https://github.com/scipy/scipy/pull/20777): ENH: stats: end-to-end array-API support for normality tests
  - [\#20778](https://github.com/scipy/scipy/pull/20778): DOC: signal: Documentation improvements of \`detrend\` function
  - [\#20780](https://github.com/scipy/scipy/pull/20780): DEP: special.comb: deprecate \`exact=True\` for non-integer intputs
  - [\#20781](https://github.com/scipy/scipy/pull/20781): TST: stats: remove overhead of array\_namespace in calls to \_get\_pvalue
  - [\#20782](https://github.com/scipy/scipy/pull/20782): ENH: stats: end-to-end array-API support for NHSTs with chi-squared...
  - [\#20784](https://github.com/scipy/scipy/pull/20784): DOC: SciPy 1.14.0 relnotes
  - [\#20787](https://github.com/scipy/scipy/pull/20787): DOC: interpolate: mention default kinds in interp2d transition...
  - [\#20788](https://github.com/scipy/scipy/pull/20788): ENH: optimize: improve \`cobyqa\` performance by reducing overhead...
  - [\#20789](https://github.com/scipy/scipy/pull/20789): DEP: stats.linregress: deprecate one-arg use
  - [\#20790](https://github.com/scipy/scipy/pull/20790): BUG: special: remove redundant \`Py\_Initialize\`
  - [\#20791](https://github.com/scipy/scipy/pull/20791): TST: optimize: fix failing tests for \`\_bracket\_minimum\`
  - [\#20792](https://github.com/scipy/scipy/pull/20792): BUG: sparse: Fix argmin/max shape diff between axis 0/1. And...
  - [\#20795](https://github.com/scipy/scipy/pull/20795): MAINT: fix warnings about \`noexcept\` and \`except \*\` in Cython...
  - [\#20796](https://github.com/scipy/scipy/pull/20796): BLD: optimize: silence build warnings coming from HiGHS
  - [\#20798](https://github.com/scipy/scipy/pull/20798): MAINT: special: fix numpy initialization, avoid build warnings
  - [\#20799](https://github.com/scipy/scipy/pull/20799): DOC: ndimage: improve grayscale morphology docstrings
  - [\#20804](https://github.com/scipy/scipy/pull/20804): MAINT: remove pytest-fail-slow from pyproject.toml
  - [\#20805](https://github.com/scipy/scipy/pull/20805): BUG: special: Restore missing line of code in the function cchg().
  - [\#20807](https://github.com/scipy/scipy/pull/20807): TST: stats.nbinom: adjust cdf-ppf roundtrip test
  - [\#20812](https://github.com/scipy/scipy/pull/20812): DOC: extend "building reproducible binaries" page
  - [\#20815](https://github.com/scipy/scipy/pull/20815): DOC: integrate: odeint user functions must not modify y.
  - [\#20819](https://github.com/scipy/scipy/pull/20819): REV: revert accidental \`cobyqa\` update in gh-17924
  - [\#20820](https://github.com/scipy/scipy/pull/20820): BLD: Warning fix from \`\`scipy/special/special/gamma.h\`\`
  - [\#20828](https://github.com/scipy/scipy/pull/20828): DEP: deprecate trapz alias of \`stats.trapezoid\` distribution
  - [\#20831](https://github.com/scipy/scipy/pull/20831): MAINT: version pins/prep for 1.14.0rc1
  - [\#20838](https://github.com/scipy/scipy/pull/20838): DOC: sparse: 1.14.0 release notes additions
  - [\#20839](https://github.com/scipy/scipy/pull/20839): REL: set 1.14.0rc2 unreleased
  - [\#20841](https://github.com/scipy/scipy/pull/20841): DOC: add cobyqa website reference
  - [\#20851](https://github.com/scipy/scipy/pull/20851): DOC: add cobyqa website reference (\#20841)
  - [\#20858](https://github.com/scipy/scipy/pull/20858): MAINT: \`stats.bootstrap\`: emit \`FutureWarning\` about broadcasting
  - [\#20870](https://github.com/scipy/scipy/pull/20870): BLD: test delocate works by removing original lib \[wheel build\]
  - [\#20881](https://github.com/scipy/scipy/pull/20881): DOC: mailing list to forum
  - [\#20890](https://github.com/scipy/scipy/pull/20890): DOC: Write API reference titles in monospace font
  - [\#20909](https://github.com/scipy/scipy/pull/20909): DEP: special.perm: deprecate non-integer \`N\` and \`k\` with...
  - [\#20914](https://github.com/scipy/scipy/pull/20914): TST: linalg: bump tolerance in \`TestEig::test\_singular\`
  - [\#20919](https://github.com/scipy/scipy/pull/20919): BLD: optimize: use hidden visibility for static HiGHS libraries
  - [\#20920](https://github.com/scipy/scipy/pull/20920): MAINT: special: fix msvc build by using \`new\` and \`delete\`...
  - [\#20923](https://github.com/scipy/scipy/pull/20923): DOC: update doctests to satisfy scipy-doctests==1.2.0
  - [\#20927](https://github.com/scipy/scipy/pull/20927): MAINT: adapt to a scipy-doctests change
  - [\#20933](https://github.com/scipy/scipy/pull/20933): MAINT: 1.14.0rc2 backports
  - [\#20936](https://github.com/scipy/scipy/pull/20936): DOC: \`array\_api.rst\`: update 1.14 functions with array API...
  - [\#20937](https://github.com/scipy/scipy/pull/20937): BUG/BLD: special: Ensure symbols in \`sf\_error\_state\` shared...
  - [\#20945](https://github.com/scipy/scipy/pull/20945): TST: address tolerance violations with SciPy 1.14.0rc1 on linux-{aarch64,ppc64le}
  - [\#20952](https://github.com/scipy/scipy/pull/20952): TST: loosen tolerance in test\_x0\_working to pass with alternate...
  - [\#20953](https://github.com/scipy/scipy/pull/20953): TST: loosen tolerance in test\_krandinit slightly to pass with...
  - [\#20961](https://github.com/scipy/scipy/pull/20961): TST: robustify test\_nnls\_inner\_loop\_case1
  - [\#20970](https://github.com/scipy/scipy/pull/20970): REL: set 1.14.0 rc3 unreleased
  - [\#20973](https://github.com/scipy/scipy/pull/20973): TST:sparse.linalg: Skip test due to sensitivity to numerical...
  - [\#20979](https://github.com/scipy/scipy/pull/20979): STY: \`\_lib.\_util\`: address new mypy complaint in main

---

1.14.1-notes.md

---

# SciPy 1.14.1 Release Notes

<div class="contents">

</div>

SciPy 1.14.1 adds support for Python 3.13, including binary wheels on PyPI. Apart from that, it is a bug-fix release with no new features compared to 1.14.0.

## Authors

  - Name (commits)
  - h-vetinari (1)
  - Evgeni Burovski (1)
  - CJ Carey (2)
  - Lucas Colley (3)
  - Ralf Gommers (3)
  - Melissa Weber Mendonça (1)
  - Andrew Nelson (3)
  - Nick ODell (1)
  - Tyler Reddy (36)
  - Daniel Schmitz (1)
  - Dan Schult (4)
  - Albert Steppi (2)
  - Ewout ter Hoeven (1)
  - Tibor Völcker (2) +
  - Adam Turner (1) +
  - Warren Weckesser (2)
  - ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh) (1)

A total of 17 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.14.1

  - [\#19572](https://github.com/scipy/scipy/issues/19572): BUG: doccer: \`test\_decorator\` fails with Python 3.13 due to...
  - [\#19911](https://github.com/scipy/scipy/issues/19911): BUG: open\_memstream unavailable with glibc \>= 2.10 + C99
  - [\#20992](https://github.com/scipy/scipy/issues/20992): ENH: 3.13 wheels
  - [\#20993](https://github.com/scipy/scipy/issues/20993): BUG: spsolve prints "dgstrf info" to stdout on singular matrices
  - [\#21058](https://github.com/scipy/scipy/issues/21058): BUG: \`special.pro\_rad1\`: incorrect results
  - [\#21064](https://github.com/scipy/scipy/issues/21064): BUG: sparse: \`hstack/vstack\` between a sparse and ndarray breaks...
  - [\#21073](https://github.com/scipy/scipy/issues/21073): MAINT: \`cluster\`/\`stats\`: array API test failures in main
  - [\#21079](https://github.com/scipy/scipy/issues/21079): BUG: unable to securely deploy app as scipy 1.14.0 requires write...
  - [\#21142](https://github.com/scipy/scipy/issues/21142): BUG: signal: crash in \`signaltools\` on free-threaded Python,...
  - [\#21195](https://github.com/scipy/scipy/issues/21195): CI: documentation build failing?
  - [\#21207](https://github.com/scipy/scipy/issues/21207): BUG: \`fft.hfftn\` fails on list inputs
  - [\#21234](https://github.com/scipy/scipy/issues/21234): BUG: Files in SuperLU under LGPL license
  - [\#21238](https://github.com/scipy/scipy/issues/21238): BUG: io/scipy.sparse.csgraph: refguide check failure in main
  - [\#21250](https://github.com/scipy/scipy/issues/21250): DOC: \`sampling\_tdr.rst\` failing in CircleCI smoke-tutorials...
  - [\#21272](https://github.com/scipy/scipy/issues/21272): BUG: dtype changed for argument to \`rv\_discrete.\_pmf\`
  - [\#21306](https://github.com/scipy/scipy/issues/21306): BUG: odr: pickling is not possible
  - [\#21323](https://github.com/scipy/scipy/issues/21323): DOC: build failing in CI
  - [\#21408](https://github.com/scipy/scipy/issues/21408): BLD, CI: Cirrus 3.13 wheels?

### Pull requests for 1.14.1

  - [\#21000](https://github.com/scipy/scipy/pull/21000): BLD: make cp313 wheels \[wheel build\]
  - [\#21038](https://github.com/scipy/scipy/pull/21038): REL, MAINT: prep for 1.14.1
  - [\#21062](https://github.com/scipy/scipy/pull/21062): BUG: special: Fixes for pro\_rad1
  - [\#21067](https://github.com/scipy/scipy/pull/21067): BUG: special: remove type punning to avoid warnings in LTO builds
  - [\#21069](https://github.com/scipy/scipy/pull/21069): MAINT: uarray: fix typo in \`small\_dynamic\_array.h\`
  - [\#21074](https://github.com/scipy/scipy/pull/21074): MAINT: adapt to array-api-strict 2.0
  - [\#21084](https://github.com/scipy/scipy/pull/21084): BLD: Enable \`open\_memstream()\` on newer glibc
  - [\#21104](https://github.com/scipy/scipy/pull/21104): MAINT: Unskip \`scipy.misc.test.test\_decorator\` for Python 3.13+
  - [\#21107](https://github.com/scipy/scipy/pull/21107): DOC: add release note for 1.14 sparse section about sparse array...
  - [\#21108](https://github.com/scipy/scipy/pull/21108): BUG: sparse: fix 1D for vstack/hstack and Improve 1D error msgs...
  - [\#21160](https://github.com/scipy/scipy/pull/21160): BUG: signal: fix crash under free-threaded CPython in medfilt2d
  - [\#21172](https://github.com/scipy/scipy/pull/21172): BUG: sparse.linalg: Update \`SuperLU\` to fix unfilterable output...
  - [\#21200](https://github.com/scipy/scipy/pull/21200): DOC: Fix type of \`\`html\_sidebars\`\` value in \`\`conf.py\`\`
  - [\#21209](https://github.com/scipy/scipy/pull/21209): BUG: fft: fix array-like input
  - [\#21244](https://github.com/scipy/scipy/pull/21244): BUG: sparse: fix failing doctests in io and csgraph that print...
  - [\#21271](https://github.com/scipy/scipy/pull/21271): DOC: stats: silence the doctest error
  - [\#21274](https://github.com/scipy/scipy/pull/21274): MAINT: sparse.linalg: update \`SuperLU/colamd.c\` to fix license...
  - [\#21283](https://github.com/scipy/scipy/pull/21283): BUG: stats: adapt to \`np.floor\` type promotion removal
  - [\#21305](https://github.com/scipy/scipy/pull/21305): MAINT: \`stats.bartlett\`: ensure statistic is non-negative
  - [\#21315](https://github.com/scipy/scipy/pull/21315): CI: Update to cibuildwheel 2.20.0
  - [\#21320](https://github.com/scipy/scipy/pull/21320): BUG: odr: fix pickling
  - [\#21324](https://github.com/scipy/scipy/pull/21324): DOC: Don't use Sphinx 8.0.0 until gh-21323 is resolved.
  - [\#21400](https://github.com/scipy/scipy/pull/21400): BUG: sparse: Fix 1D specialty hstack codes
  - [\#21401](https://github.com/scipy/scipy/pull/21401): MAINT: special: Accommodate changed integer handling in NumPy...
  - [\#21409](https://github.com/scipy/scipy/pull/21409): BLD: cp313 wheels on \`manylinux\_aarch64\`

---

1.15.0-notes.md

---

# SciPy 1.15.0 Release Notes

<div class="note">

<div class="title">

Note

</div>

SciPy 1.15.0 is not released yet\!

</div>

<div class="contents">

</div>

SciPy 1.15.0 is the culmination of X months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.15.x branch, and on adding new features on the main branch.

This release requires Python 3.10+ and NumPy 1.23.5 or greater.

## Highlights of this release

## New features

### <span class="title-ref">scipy.cluster</span> improvements

### <span class="title-ref">scipy.interpolate</span> improvements

### <span class="title-ref">scipy.linalg</span> improvements

### <span class="title-ref">scipy.ndimage</span> improvements

### <span class="title-ref">scipy.optimize</span> improvements

### <span class="title-ref">scipy.signal</span> improvements

### <span class="title-ref">scipy.sparse</span> improvements

### <span class="title-ref">scipy.spatial</span> improvements

### <span class="title-ref">scipy.special</span> improvements

### <span class="title-ref">scipy.stats</span> improvements

## Deprecated features

### <span class="title-ref">scipy.linalg</span> deprecations

### <span class="title-ref">scipy.spatial</span> deprecations

## Backwards incompatible changes

## Other changes

## Authors

## Issues closed for 1.15.0

## Pull requests for 1.15.0

---

1.2.0-notes.md

---

# SciPy 1.2.0 Release Notes

<div class="contents">

</div>

SciPy 1.2.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.2.x branch, and on adding new features on the master branch.

This release requires Python 2.7 or 3.4+ and NumPy 1.8.2 or greater.

<div class="note">

<div class="title">

Note

</div>

This will be the last SciPy release to support Python 2.7. Consequently, the 1.2.x series will be a long term support (LTS) release; we will backport bug-fixes until 1 Jan 2020.

</div>

For running on PyPy, PyPy3 6.0+ and NumPy 1.15.0 are required.

## Highlights of this release

  - 1-D root finding improvements with a new solver, `toms748`, and a new unified interface, `root_scalar`
  - new `dual_annealing` optimization method that combines stochastic and local deterministic searching
  - a new optimization algorithm, `shgo` (simplicial homology global optimization), for derivative-free optimization problems
  - a new category of quaternion-based transformations are available in <span class="title-ref">scipy.spatial.transform</span>

## New features

### <span class="title-ref">scipy.ndimage</span> improvements

Proper spline coefficient calculations have been added for the `mirror`, `wrap`, and `reflect` modes of <span class="title-ref">scipy.ndimage.rotate</span>.

### <span class="title-ref">scipy.fftpack</span> improvements

DCT-IV, DST-IV, DCT-I, and DST-I orthonormalization are now supported in <span class="title-ref">scipy.fftpack</span>.

### <span class="title-ref">scipy.interpolate</span> improvements

<span class="title-ref">scipy.interpolate.pade</span> now accepts a new argument for the order of the numerator.

### <span class="title-ref">scipy.cluster</span> improvements

<span class="title-ref">scipy.cluster.vq.kmeans2</span> gained a new initialization method, kmeans++.

### <span class="title-ref">scipy.special</span> improvements

The function `softmax` was added to <span class="title-ref">scipy.special</span>.

### <span class="title-ref">scipy.optimize</span> improvements

The one-dimensional nonlinear solvers have been given a unified interface <span class="title-ref">scipy.optimize.root\_scalar</span>, similar to the <span class="title-ref">scipy.optimize.root</span> interface for multi-dimensional solvers. `scipy.optimize.root_scalar(f, bracket=[a ,b], method="brenth")` is equivalent to `scipy.optimize.brenth(f, a ,b)`. If no `method` is specified, an appropriate one will be selected based upon the bracket and the number of derivatives available.

The so-called Algorithm 748 of Alefeld, Potra and Shi for root-finding within an enclosing interval has been added as <span class="title-ref">scipy.optimize.toms748</span>. This provides guaranteed convergence to a root with convergence rate per function evaluation of approximately 1.65 (for sufficiently well-behaved functions).

`differential_evolution` now has the `updating` and `workers` keywords. The first chooses between continuous updating of the best solution vector (the default), or once per generation. Continuous updating can lead to faster convergence. The `workers` keyword accepts an `int` or map-like callable, and parallelises the solver (having the side effect of updating once per generation). Supplying an `int` evaluates the trial solutions in N parallel parts. Supplying a map-like callable allows other parallelisation approaches (such as `mpi4py`, or `joblib`) to be used.

`dual_annealing` (and `shgo` below) is a powerful new general-purpose global optimization (GO) algorithm. `dual_annealing` uses two annealing processes to accelerate the convergence towards the global minimum of an objective mathematical function. The first annealing process controls the stochastic Markov chain searching and the second annealing process controls the deterministic minimization. So, dual annealing is a hybrid method that takes advantage of stochastic and local deterministic searching in an efficient way.

`shgo` (simplicial homology global optimization) is a similar algorithm appropriate for solving black box and derivative-free optimization (DFO) problems. The algorithm generally converges to the global solution in finite time. The convergence holds for non-linear inequality and equality constraints. In addition to returning a global minimum, the algorithm also returns any other global and local minima found after every iteration. This makes it useful for exploring the solutions in a domain.

<span class="title-ref">scipy.optimize.newton</span> can now accept a scalar or an array.

`MINPACK` usage is now thread-safe, such that `MINPACK` + callbacks may be used on multiple threads.

### <span class="title-ref">scipy.signal</span> improvements

Digital filter design functions now include a parameter to specify the sampling rate. Previously, digital filters could only be specified using normalized frequency, but different functions used different scales (e.g. 0 to 1 for `butter` vs 0 to π for `freqz`), leading to errors and confusion. With the `fs` parameter, ordinary frequencies can now be entered directly into functions, with the normalization handled internally.

`find_peaks` and related functions no longer raise an exception if the properties of a peak have unexpected values (e.g. a prominence of 0). A `PeakPropertyWarning` is given instead.

The new keyword argument `plateau_size` was added to `find_peaks`. `plateau_size` may be used to select peaks based on the length of the flat top of a peak.

`welch()` and `csd()` methods in <span class="title-ref">scipy.signal</span> now support calculation of a median average PSD, using `average='mean'` keyword.

### <span class="title-ref">scipy.sparse</span> improvements

The <span class="title-ref">scipy.sparse.bsr\_matrix.tocsr</span> method is now implemented directly instead of converting via COO format, and the <span class="title-ref">scipy.sparse.bsr\_matrix.tocsc</span> method is now also routed via CSR conversion instead of COO. The efficiency of both conversions is now improved.

The issue where SuperLU or UMFPACK solvers crashed on matrices with non-canonical format in <span class="title-ref">scipy.sparse.linalg</span> was fixed. The solver wrapper canonicalizes the matrix if necessary before calling the SuperLU or UMFPACK solver.

The `largest` option of <span class="title-ref">scipy.sparse.linalg.lobpcg()</span> was fixed to have a correct (and expected) behavior. The order of the eigenvalues was made consistent with the ARPACK solver (`eigs()`), i.e. ascending for the smallest eigenvalues, and descending for the largest eigenvalues.

The <span class="title-ref">scipy.sparse.random</span> function is now faster and also supports integer and complex values by passing the appropriate value to the `dtype` argument.

### <span class="title-ref">scipy.spatial</span> improvements

The function <span class="title-ref">scipy.spatial.distance.jaccard</span> was modified to return 0 instead of `np.nan` when two all-zero vectors are compared.

Support for the Jensen Shannon distance, the square-root of the divergence, has been added under <span class="title-ref">scipy.spatial.distance.jensenshannon</span>.

An optional keyword was added to the function <span class="title-ref">scipy.spatial.cKDTree.query\_ball\_point()</span> to sort or not sort the returned indices. Not sorting the indices can speed up calls.

A new category of quaternion-based transformations are available in <span class="title-ref">scipy.spatial.transform</span>, including spherical linear interpolation of rotations (`Slerp`), conversions to and from quaternions, Euler angles, and general rotation and inversion capabilities (<span class="title-ref">spatial.transform.Rotation</span>), and uniform random sampling of 3D rotations (<span class="title-ref">spatial.transform.Rotation.random</span>).

### <span class="title-ref">scipy.stats</span> improvements

The Yeo-Johnson power transformation is now supported (`yeojohnson`, `yeojohnson_llf`, `yeojohnson_normmax`, `yeojohnson_normplot`). Unlike the Box-Cox transformation, the Yeo-Johnson transformation can accept negative values.

Added a general method to sample random variates based on the density only, in the new function `rvs_ratio_uniforms`.

The Yule-Simon distribution (`yulesimon`) was added -- this is a new discrete probability distribution.

`stats` and `mstats` now have access to a new regression method, `siegelslopes`, a robust linear regression algorithm

<span class="title-ref">scipy.stats.gaussian\_kde</span> now has the ability to deal with weighted samples, and should have a modest improvement in performance

Levy Stable Parameter Estimation, PDF, and CDF calculations are now supported for <span class="title-ref">scipy.stats.levy\_stable</span>.

The Brunner-Munzel test is now available as `brunnermunzel` in `stats` and `mstats`.

### <span class="title-ref">scipy.linalg</span> improvements

<span class="title-ref">scipy.linalg.lapack</span> now exposes the LAPACK routines using the Rectangular Full Packed storage (RFP) for upper triangular, lower triangular, symmetric, or Hermitian matrices; the upper trapezoidal fat matrix RZ decomposition routines are now available as well.

## Deprecated features

The functions `hyp2f0`, `hyp1f2` and `hyp3f0` in `scipy.special` have been deprecated.

## Backwards-incompatible changes

LAPACK version 3.4.0 or later is now required. Building with Apple Accelerate is no longer supported.

The function `scipy.linalg.subspace_angles(A, B)` now gives correct results for all angles. Before this, the function only returned correct values for those angles which were greater than π/4.

Support for the Bento build system has been removed. Bento had not been maintained for several years, and did not have good Python 3 or wheel support, hence it was time to remove it.

The required signature of <span class="title-ref">scipy.optimize.lingprog</span> `method=simplex` callback function has changed. Before iteration begins, the simplex solver first converts the problem into a standard form that does not, in general, have the same variables or constraints as the problem defined by the user. Previously, the simplex solver would pass a user-specified callback function several separate arguments, such as the current solution vector `xk`, corresponding to this standard-form problem. Unfortunately, the relationship between the standard-form problem and the user-defined problem was not documented, limiting the utility of the information passed to the callback function.

In addition to numerous bug-fix changes, the simplex solver now passes a user-specified callback function a single `OptimizeResult` object containing information that corresponds directly to the user-defined problem. In future releases, this `OptimizeResult` object may be expanded to include additional information, such as variables corresponding to the standard-form problem and information concerning the relationship between the standard-form and user-defined problems.

The implementation of <span class="title-ref">scipy.sparse.random</span> has changed, and this affects the numerical values returned for both `sparse.random` and `sparse.rand` for some matrix shapes and a given seed.

<span class="title-ref">scipy.optimize.newton</span> will no longer use Halley's method in cases where it negatively impacts convergence.

## Authors

  - @endolith

  - @luzpaz

  - Hameer Abbasi +

  - akahard2dj +

  - Anton Akhmerov

  - Joseph Albert

  - alexthomas93 +

  - ashish +

  - atpage +

  - Blair Azzopardi +

  - Yoshiki Vázquez Baeza

  - Bence Bagi +

  - Christoph Baumgarten

  - Lucas Bellomo +

  - BH4 +

  - Aditya Bharti

  - Max Bolingbroke

  - François Boulogne

  - Ward Bradt +

  - Matthew Brett

  - Evgeni Burovski

  - Rafał Byczek +

  - Alfredo Canziani +

  - CJ Carey

  - Lucía Cheung +

  - Poom Chiarawongse +

  - Jeanne Choo +

  - Robert Cimrman

  - Graham Clenaghan +

  - cynthia-rempel +

  - Johannes Damp +

  - Jaime Fernandez del Rio

  - Dowon +

  - emmi474 +

  - Stefan Endres +

  - Thomas Etherington +

  - Piotr Figiel

  - Alex Fikl +

  - fo40225 +

  - Joseph Fox-Rabinovitz

  - Lars G

  - Abhinav Gautam +

  - Stiaan Gerber +

  - C.A.M. Gerlach +

  - Ralf Gommers

  - Todd Goodall

  - Lars Grueter +

  - Sylvain Gubian +

  - Matt Haberland

  - David Hagen

  - Will Handley +

  - Charles Harris

  - Ian Henriksen

  - Thomas Hisch +

  - Theodore Hu

  - Michael Hudson-Doyle +

  - Nicolas Hug +

  - jakirkham +

  - Jakob Jakobson +

  - James +

  - Jan Schlüter

  - jeanpauphilet +

  - josephmernst +

  - Kai +

  - Kai-Striega +

  - kalash04 +

  - Toshiki Kataoka +

  - Konrad0 +

  - Tom Krauss +

  - Johannes Kulick

  - Lars Grüter +

  - Eric Larson

  - Denis Laxalde

  - Will Lee +

  - Katrin Leinweber +

  - Yin Li +

  - 16. 12. Lim +

  - Jesse Livezey +

  - Duncan Macleod +

  - MatthewFlamm +

  - Nikolay Mayorov

  - Mike McClurg +

  - Christian Meyer +

  - Mark Mikofski

  - Naoto Mizuno +

  - mohmmadd +

  - Nathan Musoke

  - Anju Geetha Nair +

  - Andrew Nelson

  - Ayappan P +

  - Nick Papior

  - Haesun Park +

  - Ronny Pfannschmidt +

  - pijyoi +

  - Ilhan Polat

  - Anthony Polloreno +

  - Ted Pudlik

  - puenka

  - Eric Quintero

  - Pradeep Reddy Raamana +

  - Vyas Ramasubramani +

  - Ramon Viñas +

  - Tyler Reddy

  - Joscha Reimer

  - Antonio H Ribeiro

  - richardjgowers +

  - Rob +

  - robbystk +

  - Lucas Roberts +

  - rohan +

  - Joaquin Derrac Rus +

  - Josua Sassen +

  - Bruce Sharpe +

  - Max Shinn +

  - Scott Sievert

  - Sourav Singh

  - Strahinja Lukić +

  - Kai Striega +

  - Shinya SUZUKI +

  - Mike Toews +

  - Piotr Uchwat

  - Miguel de Val-Borro +

  - Nicky van Foreest

  - Paul van Mulbregt

  - Gael Varoquaux

  - Pauli Virtanen

  - Stefan van der Walt

  - Warren Weckesser

  - Joshua Wharton +

  - Bernhard M. Wiedemann +

  - Eric Wieser

  - Josh Wilson

  - Tony Xiang +

  - Roman Yurchak +

  - Roy Zywina +

A total of 137 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.2.0

  - [\#9520](https://github.com/scipy/scipy/issues/9520): signal.correlate with method='fft' doesn't benefit from long...
  - [\#9547](https://github.com/scipy/scipy/issues/9547): signature of dual\_annealing doesn't match other optimizers
  - [\#9540](https://github.com/scipy/scipy/issues/9540): SciPy v1.2.0rc1 cannot be imported on Python 2.7.15
  - [\#1240](https://github.com/scipy/scipy/issues/1240): Allowing multithreaded use of minpack through scipy.optimize...
  - [\#1432](https://github.com/scipy/scipy/issues/1432): scipy.stats.mode extremely slow (Trac \#905)
  - [\#3372](https://github.com/scipy/scipy/issues/3372): Please add Sphinx search field to online scipy html docs
  - [\#3678](https://github.com/scipy/scipy/issues/3678): \_clough\_tocher\_2d\_single direction between centroids
  - [\#4174](https://github.com/scipy/scipy/issues/4174): lobpcg "largest" option invalid?
  - [\#5493](https://github.com/scipy/scipy/issues/5493): anderson\_ksamp p-values\>1
  - [\#5743](https://github.com/scipy/scipy/issues/5743): slsqp fails to detect infeasible problem
  - [\#6139](https://github.com/scipy/scipy/issues/6139): scipy.optimize.linprog failed to find a feasible starting point...
  - [\#6358](https://github.com/scipy/scipy/issues/6358): stats: docstring for <span class="title-ref">vonmises\_line</span> points to <span class="title-ref">vonmises\_line</span>...
  - [\#6498](https://github.com/scipy/scipy/issues/6498): runtests.py is missing in pypi distfile
  - [\#7426](https://github.com/scipy/scipy/issues/7426): scipy.stats.ksone(n).pdf(x) returns nan for positive values of...
  - [\#7455](https://github.com/scipy/scipy/issues/7455): scipy.stats.ksone.pdf(2,x) return incorrect values for x near...
  - [\#7456](https://github.com/scipy/scipy/issues/7456): scipy.special.smirnov and scipy.special.smirnovi have accuracy...
  - [\#7492](https://github.com/scipy/scipy/issues/7492): scipy.special.kolmogorov(x)/kolmogi(p) inefficient, inaccurate...
  - [\#7914](https://github.com/scipy/scipy/issues/7914): TravisCI not failing when it should for -OO run
  - [\#8064](https://github.com/scipy/scipy/issues/8064): linalg.solve test crashes on Windows
  - [\#8212](https://github.com/scipy/scipy/issues/8212): LAPACK Rectangular Full Packed routines
  - [\#8256](https://github.com/scipy/scipy/issues/8256): differential\_evolution bug converges to wrong results in complex...
  - [\#8443](https://github.com/scipy/scipy/issues/8443): Deprecate <span class="title-ref">hyp2f0</span>, <span class="title-ref">hyp1f2</span>, and <span class="title-ref">hyp3f0</span>?
  - [\#8452](https://github.com/scipy/scipy/issues/8452): DOC: ARPACK tutorial has two conflicting equations
  - [\#8680](https://github.com/scipy/scipy/issues/8680): scipy fails compilation when building from source
  - [\#8686](https://github.com/scipy/scipy/issues/8686): Division by zero in \_trustregion.py when x0 is exactly equal...
  - [\#8700](https://github.com/scipy/scipy/issues/8700): \_MINPACK\_LOCK not held when calling into minpack from least\_squares
  - [\#8786](https://github.com/scipy/scipy/issues/8786): erroneous moment values for t-distribution
  - [\#8791](https://github.com/scipy/scipy/issues/8791): Checking COLA condition in istft should be optional (or omitted)
  - [\#8843](https://github.com/scipy/scipy/issues/8843): imresize cannot be deprecated just yet
  - [\#8844](https://github.com/scipy/scipy/issues/8844): Inverse Wishart Log PDF Incorrect for Non-diagonal Scale Matrix?
  - [\#8878](https://github.com/scipy/scipy/issues/8878): vonmises and vonmises\_line in stats: vonmises wrong and superfluous?
  - [\#8895](https://github.com/scipy/scipy/issues/8895): v1.1.0 <span class="title-ref">ndi.rotate</span> documentation – reused parameters not filled...
  - [\#8900](https://github.com/scipy/scipy/issues/8900): Missing complex conjugation in scipy.sparse.linalg.LinearOperator
  - [\#8904](https://github.com/scipy/scipy/issues/8904): BUG: if zero derivative at root, then Newton fails with RuntimeWarning
  - [\#8911](https://github.com/scipy/scipy/issues/8911): make\_interp\_spline bc\_type incorrect input interpretation
  - [\#8942](https://github.com/scipy/scipy/issues/8942): MAINT: Refactor `_linprog.py` and `_linprog_ip.py` to remove...
  - [\#8947](https://github.com/scipy/scipy/issues/8947): np.int64 in scipy.fftpack.next\_fast\_len
  - [\#9020](https://github.com/scipy/scipy/issues/9020): BUG: linalg.subspace\_angles gives wrong results
  - [\#9033](https://github.com/scipy/scipy/issues/9033): scipy.stats.normaltest sometimes gives incorrect returns b/c...
  - [\#9036](https://github.com/scipy/scipy/issues/9036): Bizarre times for <span class="title-ref">scipy.sparse.rand</span> function with 'low' density...
  - [\#9044](https://github.com/scipy/scipy/issues/9044): optimize.minimize(method=\`trust-constr\`) result dict does not...
  - [\#9071](https://github.com/scipy/scipy/issues/9071): doc/linalg: add cho\_solve\_banded to see also of cholesky\_banded
  - [\#9082](https://github.com/scipy/scipy/issues/9082): eigenvalue sorting in scipy.sparse.linalg.eigsh
  - [\#9086](https://github.com/scipy/scipy/issues/9086): signaltools.py:491: FutureWarning: Using a non-tuple sequence...
  - [\#9091](https://github.com/scipy/scipy/issues/9091): test\_spline\_filter failure on 32-bit
  - [\#9122](https://github.com/scipy/scipy/issues/9122): Typo on scipy minimization tutorial
  - [\#9135](https://github.com/scipy/scipy/issues/9135): doc error at <https://docs.scipy.org/doc/scipy/reference/tutorial/stats/discrete_poisson.html>
  - [\#9167](https://github.com/scipy/scipy/issues/9167): DOC: BUG: typo in ndimage LowLevelCallable tutorial example
  - [\#9169](https://github.com/scipy/scipy/issues/9169): truncnorm does not work if b \< a in scipy.stats
  - [\#9250](https://github.com/scipy/scipy/issues/9250): scipy.special.tests.test\_mpmath::TestSystematic::test\_pcfw fails...
  - [\#9259](https://github.com/scipy/scipy/issues/9259): rv.expect() == rv.mean() is false for rv.mean() == nan (and inf)
  - [\#9286](https://github.com/scipy/scipy/issues/9286): DOC: Rosenbrock expression in optimize.minimize tutorial
  - [\#9316](https://github.com/scipy/scipy/issues/9316): SLSQP fails in nested optimization
  - [\#9337](https://github.com/scipy/scipy/issues/9337): scipy.signal.find\_peaks key typo in documentation
  - [\#9345](https://github.com/scipy/scipy/issues/9345): Example from documentation of scipy.sparse.linalg.eigs raises...
  - [\#9383](https://github.com/scipy/scipy/issues/9383): Default value for "mode" in "ndimage.shift"
  - [\#9419](https://github.com/scipy/scipy/issues/9419): dual\_annealing off by one in the number of iterations
  - [\#9442](https://github.com/scipy/scipy/issues/9442): Error in Defintion of Rosenbrock Function
  - [\#9453](https://github.com/scipy/scipy/issues/9453): TST: test\_eigs\_consistency() doesn't have consistent results

### Pull requests for 1.2.0

  - [\#9526](https://github.com/scipy/scipy/pull/9526): TST: relax precision requirements in signal.correlate tests
  - [\#9507](https://github.com/scipy/scipy/pull/9507): CI: MAINT: Skip a ckdtree test on pypy
  - [\#9512](https://github.com/scipy/scipy/pull/9512): TST: test\_random\_sampling 32-bit handling
  - [\#9494](https://github.com/scipy/scipy/pull/9494): TST: test\_kolmogorov xfail 32-bit
  - [\#9486](https://github.com/scipy/scipy/pull/9486): BUG: fix sparse random int handling
  - [\#9550](https://github.com/scipy/scipy/pull/9550): BUG: scipy/\_lib/\_numpy\_compat: get\_randint
  - [\#9549](https://github.com/scipy/scipy/pull/9549): MAINT: make dual\_annealing signature match other optimizers
  - [\#9541](https://github.com/scipy/scipy/pull/9541): BUG: fix SyntaxError due to non-ascii character on Python 2.7
  - [\#7352](https://github.com/scipy/scipy/pull/7352): ENH: add Brunner Munzel test to scipy.stats.
  - [\#7373](https://github.com/scipy/scipy/pull/7373): BUG: Jaccard distance for all-zero arrays would return np.nan
  - [\#7374](https://github.com/scipy/scipy/pull/7374): ENH: Add PDF, CDF and parameter estimation for Stable Distributions
  - [\#8098](https://github.com/scipy/scipy/pull/8098): ENH: Add shgo for global optimization of NLPs.
  - [\#8203](https://github.com/scipy/scipy/pull/8203): ENH: adding simulated dual annealing to optimize
  - [\#8259](https://github.com/scipy/scipy/pull/8259): Option to follow original Storn and Price algorithm and its parallelisation
  - [\#8293](https://github.com/scipy/scipy/pull/8293): ENH add ratio-of-uniforms method for rv generation to scipy.stats
  - [\#8294](https://github.com/scipy/scipy/pull/8294): BUG: Fix slowness in stats.mode
  - [\#8295](https://github.com/scipy/scipy/pull/8295): ENH: add Jensen Shannon distance to <span class="title-ref">scipy.spatial.distance</span>
  - [\#8357](https://github.com/scipy/scipy/pull/8357): ENH: vectorize scalar zero-search-functions
  - [\#8397](https://github.com/scipy/scipy/pull/8397): Add <span class="title-ref">fs=</span> parameter to filter design functions
  - [\#8537](https://github.com/scipy/scipy/pull/8537): ENH: Implement mode parameter for spline filtering.
  - [\#8558](https://github.com/scipy/scipy/pull/8558): ENH: small speedup for stats.gaussian\_kde
  - [\#8560](https://github.com/scipy/scipy/pull/8560): BUG: fix p-value calc of anderson\_ksamp in scipy.stats
  - [\#8614](https://github.com/scipy/scipy/pull/8614): ENH: correct p-values for stats.kendalltau and stats.mstats.kendalltau
  - [\#8670](https://github.com/scipy/scipy/pull/8670): ENH: Require Lapack 3.4.0
  - [\#8683](https://github.com/scipy/scipy/pull/8683): Correcting kmeans documentation
  - [\#8725](https://github.com/scipy/scipy/pull/8725): MAINT: Cleanup scipy.optimize.leastsq
  - [\#8726](https://github.com/scipy/scipy/pull/8726): BUG: Fix \_get\_output in scipy.ndimage to support string
  - [\#8733](https://github.com/scipy/scipy/pull/8733): MAINT: stats: A bit of clean up.
  - [\#8737](https://github.com/scipy/scipy/pull/8737): BUG: Improve numerical precision/convergence failures of smirnov/kolmogorov
  - [\#8738](https://github.com/scipy/scipy/pull/8738): MAINT: stats: A bit of clean up in test\_distributions.py.
  - [\#8740](https://github.com/scipy/scipy/pull/8740): BF/ENH: make minpack thread safe
  - [\#8742](https://github.com/scipy/scipy/pull/8742): BUG: Fix division by zero in trust-region optimization methods
  - [\#8746](https://github.com/scipy/scipy/pull/8746): MAINT: signal: Fix a docstring of a private function, and fix...
  - [\#8750](https://github.com/scipy/scipy/pull/8750): DOC clarified description of norminvgauss in scipy.stats
  - [\#8753](https://github.com/scipy/scipy/pull/8753): DOC: signal: Fix a plot title in the chirp docstring.
  - [\#8755](https://github.com/scipy/scipy/pull/8755): DOC: MAINT: Fix link to the wheel documentation in developer...
  - [\#8760](https://github.com/scipy/scipy/pull/8760): BUG: stats: boltzmann wasn't setting the upper bound.
  - [\#8763](https://github.com/scipy/scipy/pull/8763): \[DOC\] Improved scipy.cluster.hierarchy documentation
  - [\#8765](https://github.com/scipy/scipy/pull/8765): DOC: added example for scipy.stat.mstats.tmin
  - [\#8788](https://github.com/scipy/scipy/pull/8788): DOC: fix definition of optional <span class="title-ref">disp</span> parameter
  - [\#8802](https://github.com/scipy/scipy/pull/8802): MAINT: Suppress dd\_real unused function compiler warnings.
  - [\#8803](https://github.com/scipy/scipy/pull/8803): ENH: Add full\_output support to optimize.newton()
  - [\#8804](https://github.com/scipy/scipy/pull/8804): MAINT: stats cleanup
  - [\#8808](https://github.com/scipy/scipy/pull/8808): DOC: add note about isinstance for frozen rvs
  - [\#8812](https://github.com/scipy/scipy/pull/8812): Updated numpydoc submodule
  - [\#8813](https://github.com/scipy/scipy/pull/8813): MAINT: stats: Fix multinomial docstrings, and do some clean up.
  - [\#8816](https://github.com/scipy/scipy/pull/8816): BUG: fixed \_stats of t-distribution in scipy.stats
  - [\#8817](https://github.com/scipy/scipy/pull/8817): BUG: ndimage: Fix validation of the origin argument in correlate...
  - [\#8822](https://github.com/scipy/scipy/pull/8822): BUG: integrate: Fix crash with repeated t values in odeint.
  - [\#8832](https://github.com/scipy/scipy/pull/8832): Hyperlink DOIs against preferred resolver
  - [\#8837](https://github.com/scipy/scipy/pull/8837): BUG: sparse: Ensure correct dtype for sparse comparison operations.
  - [\#8839](https://github.com/scipy/scipy/pull/8839): DOC: stats: A few tweaks to the linregress docstring.
  - [\#8846](https://github.com/scipy/scipy/pull/8846): BUG: stats: Fix logpdf method of invwishart.
  - [\#8849](https://github.com/scipy/scipy/pull/8849): DOC: signal: Fixed mistake in the firwin docstring.
  - [\#8854](https://github.com/scipy/scipy/pull/8854): DOC: fix type descriptors in ltisys documentation
  - [\#8865](https://github.com/scipy/scipy/pull/8865): Fix tiny typo in docs for chi2 pdf
  - [\#8870](https://github.com/scipy/scipy/pull/8870): Fixes related to invertibility of STFT
  - [\#8872](https://github.com/scipy/scipy/pull/8872): ENH: special: Add the softmax function
  - [\#8874](https://github.com/scipy/scipy/pull/8874): DOC correct gamma function in docstrings in scipy.stats
  - [\#8876](https://github.com/scipy/scipy/pull/8876): ENH: Added TOMS Algorithm 748 as 1-d root finder; 17 test function...
  - [\#8882](https://github.com/scipy/scipy/pull/8882): ENH: Only use Halley's adjustment to Newton if close enough.
  - [\#8883](https://github.com/scipy/scipy/pull/8883): FIX: optimize: make jac and hess truly optional for 'trust-constr'
  - [\#8885](https://github.com/scipy/scipy/pull/8885): TST: Do not error on warnings raised about non-tuple indexing.
  - [\#8887](https://github.com/scipy/scipy/pull/8887): MAINT: filter out np.matrix PendingDeprecationWarning's in numpy...
  - [\#8889](https://github.com/scipy/scipy/pull/8889): DOC: optimize: separate legacy interfaces from new ones
  - [\#8890](https://github.com/scipy/scipy/pull/8890): ENH: Add optimize.root\_scalar() as a universal dispatcher for...
  - [\#8899](https://github.com/scipy/scipy/pull/8899): DCT-IV, DST-IV and DCT-I, DST-I orthonormalization support in...
  - [\#8901](https://github.com/scipy/scipy/pull/8901): MAINT: Reorganize flapack.pyf.src file
  - [\#8907](https://github.com/scipy/scipy/pull/8907): BUG: ENH: Check if guess for newton is already zero before checking...
  - [\#8908](https://github.com/scipy/scipy/pull/8908): ENH: Make sorting optional for cKDTree.query\_ball\_point()
  - [\#8910](https://github.com/scipy/scipy/pull/8910): DOC: sparse.csgraph simple examples.
  - [\#8914](https://github.com/scipy/scipy/pull/8914): DOC: interpolate: fix equivalences of string aliases
  - [\#8918](https://github.com/scipy/scipy/pull/8918): add float\_control(precise, on) to \_fpumode.c
  - [\#8919](https://github.com/scipy/scipy/pull/8919): MAINT: interpolate: improve error messages for common <span class="title-ref">bc\_type</span>...
  - [\#8920](https://github.com/scipy/scipy/pull/8920): DOC: update Contributing to SciPy to say "prefer no PEP8 only...
  - [\#8924](https://github.com/scipy/scipy/pull/8924): MAINT: special: deprecate <span class="title-ref">hyp2f0</span>, <span class="title-ref">hyp1f2</span>, and <span class="title-ref">hyp3f0</span>
  - [\#8927](https://github.com/scipy/scipy/pull/8927): MAINT: special: remove <span class="title-ref">errprint</span>
  - [\#8932](https://github.com/scipy/scipy/pull/8932): Fix broadcasting scale arg of entropy
  - [\#8936](https://github.com/scipy/scipy/pull/8936): Fix (some) non-tuple index warnings
  - [\#8937](https://github.com/scipy/scipy/pull/8937): ENH: implement sparse matrix BSR to CSR conversion directly.
  - [\#8938](https://github.com/scipy/scipy/pull/8938): DOC: add @\_ni\_docstrings.docfiller in ndimage.rotate
  - [\#8940](https://github.com/scipy/scipy/pull/8940): Update \_discrete\_distns.py
  - [\#8943](https://github.com/scipy/scipy/pull/8943): DOC: Finish dangling sentence in <span class="title-ref">convolve</span> docstring
  - [\#8944](https://github.com/scipy/scipy/pull/8944): MAINT: Address tuple indexing and warnings
  - [\#8945](https://github.com/scipy/scipy/pull/8945): ENH: spatial.transform.Rotation \[GSOC2018\]
  - [\#8950](https://github.com/scipy/scipy/pull/8950): csgraph Dijkstra function description rewording
  - [\#8953](https://github.com/scipy/scipy/pull/8953): DOC, MAINT: HTTP -\> HTTPS, and other linkrot fixes
  - [\#8955](https://github.com/scipy/scipy/pull/8955): BUG: np.int64 in scipy.fftpack.next\_fast\_len
  - [\#8958](https://github.com/scipy/scipy/pull/8958): MAINT: Add more descriptive error message for phase one simplex.
  - [\#8962](https://github.com/scipy/scipy/pull/8962): BUG: sparse.linalg: add missing conjugate to \_ScaledLinearOperator.adjoint
  - [\#8963](https://github.com/scipy/scipy/pull/8963): BUG: sparse.linalg: downgrade LinearOperator TypeError to warning
  - [\#8965](https://github.com/scipy/scipy/pull/8965): ENH: Wrapped RFP format and RZ decomposition routines
  - [\#8969](https://github.com/scipy/scipy/pull/8969): MAINT: doc and code fixes for optimize.newton
  - [\#8970](https://github.com/scipy/scipy/pull/8970): Added 'average' keyword for welch/csd to enable median averaging
  - [\#8971](https://github.com/scipy/scipy/pull/8971): Better imresize deprecation warning
  - [\#8972](https://github.com/scipy/scipy/pull/8972): MAINT: Switch np.where(c) for np.nonzero(c)
  - [\#8975](https://github.com/scipy/scipy/pull/8975): MAINT: Fix warning-based failures
  - [\#8979](https://github.com/scipy/scipy/pull/8979): DOC: fix description of count\_sort keyword of dendrogram
  - [\#8982](https://github.com/scipy/scipy/pull/8982): MAINT: optimize: Fixed minor mistakes in test\_linprog.py (\#8978)
  - [\#8984](https://github.com/scipy/scipy/pull/8984): BUG: sparse.linalg: ensure expm casts integer inputs to float
  - [\#8986](https://github.com/scipy/scipy/pull/8986): BUG: optimize/slsqp: do not exit with convergence on steps where...
  - [\#8989](https://github.com/scipy/scipy/pull/8989): MAINT: use collections.abc in basinhopping
  - [\#8990](https://github.com/scipy/scipy/pull/8990): ENH extend p-values of anderson\_ksamp in scipy.stats
  - [\#8991](https://github.com/scipy/scipy/pull/8991): ENH: Weighted kde
  - [\#8993](https://github.com/scipy/scipy/pull/8993): ENH: spatial.transform.Rotation.random \[GSOC 2018\]
  - [\#8994](https://github.com/scipy/scipy/pull/8994): ENH: spatial.transform.Slerp \[GSOC 2018\]
  - [\#8995](https://github.com/scipy/scipy/pull/8995): TST: time.time in test
  - [\#9007](https://github.com/scipy/scipy/pull/9007): Fix typo in fftpack.rst
  - [\#9013](https://github.com/scipy/scipy/pull/9013): Added correct plotting code for two sided output from spectrogram
  - [\#9014](https://github.com/scipy/scipy/pull/9014): BUG: differential\_evolution with inf objective functions
  - [\#9017](https://github.com/scipy/scipy/pull/9017): BUG: fixed \#8446 corner case for asformat(array|dense)
  - [\#9018](https://github.com/scipy/scipy/pull/9018): MAINT: \_lib/ccallback: remove unused code
  - [\#9021](https://github.com/scipy/scipy/pull/9021): BUG: Issue with subspace\_angles
  - [\#9022](https://github.com/scipy/scipy/pull/9022): DOC: Added "See Also" section to lombscargle docstring
  - [\#9034](https://github.com/scipy/scipy/pull/9034): BUG: Fix tolerance printing behavior, remove meaningless tol...
  - [\#9035](https://github.com/scipy/scipy/pull/9035): TST: improve signal.bsplines test coverage
  - [\#9037](https://github.com/scipy/scipy/pull/9037): ENH: add a new init method for k-means
  - [\#9039](https://github.com/scipy/scipy/pull/9039): DOC: Add examples to fftpack.irfft docstrings
  - [\#9048](https://github.com/scipy/scipy/pull/9048): ENH: scipy.sparse.random
  - [\#9050](https://github.com/scipy/scipy/pull/9050): BUG: scipy.io.hb\_write: fails for matrices not in csc format
  - [\#9051](https://github.com/scipy/scipy/pull/9051): MAINT: Fix slow sparse.rand for k \< mn/3 (\#9036).
  - [\#9054](https://github.com/scipy/scipy/pull/9054): MAINT: spatial: Explicitly initialize LAPACK output parameters.
  - [\#9055](https://github.com/scipy/scipy/pull/9055): DOC: Add examples to scipy.special docstrings
  - [\#9056](https://github.com/scipy/scipy/pull/9056): ENH: Use one thread in OpenBLAS
  - [\#9059](https://github.com/scipy/scipy/pull/9059): DOC: Update README with link to Code of Conduct
  - [\#9060](https://github.com/scipy/scipy/pull/9060): BLD: remove support for the Bento build system.
  - [\#9062](https://github.com/scipy/scipy/pull/9062): DOC add sections to overview in scipy.stats
  - [\#9066](https://github.com/scipy/scipy/pull/9066): BUG: Correct "remez" error message
  - [\#9069](https://github.com/scipy/scipy/pull/9069): DOC: update linalg section of roadmap for LAPACK versions.
  - [\#9079](https://github.com/scipy/scipy/pull/9079): MAINT: add spatial.transform to refguide check; complete some...
  - [\#9081](https://github.com/scipy/scipy/pull/9081): MAINT: Add warnings if pivot value is close to tolerance in linprog(method='simplex')
  - [\#9084](https://github.com/scipy/scipy/pull/9084): BUG fix incorrect p-values of kurtosistest in scipy.stats
  - [\#9095](https://github.com/scipy/scipy/pull/9095): DOC: add sections to mstats overview in scipy.stats
  - [\#9096](https://github.com/scipy/scipy/pull/9096): BUG: Add test for Stackoverflow example from issue 8174.
  - [\#9101](https://github.com/scipy/scipy/pull/9101): ENH: add Siegel slopes (robust regression) to scipy.stats
  - [\#9105](https://github.com/scipy/scipy/pull/9105): allow resample\_poly() to output float32 for float32 inputs.
  - [\#9112](https://github.com/scipy/scipy/pull/9112): MAINT: optimize: make trust-constr accept constraint dict (\#9043)
  - [\#9118](https://github.com/scipy/scipy/pull/9118): Add doc entry to cholesky\_banded
  - [\#9120](https://github.com/scipy/scipy/pull/9120): eigsh documentation parameters
  - [\#9125](https://github.com/scipy/scipy/pull/9125): interpolative: correctly reconstruct full rank matrices
  - [\#9126](https://github.com/scipy/scipy/pull/9126): MAINT: Use warnings for unexpected peak properties
  - [\#9129](https://github.com/scipy/scipy/pull/9129): BUG: Do not catch and silence KeyboardInterrupt
  - [\#9131](https://github.com/scipy/scipy/pull/9131): DOC: Correct the typo in scipy.optimize tutorial page
  - [\#9133](https://github.com/scipy/scipy/pull/9133): FIX: Avoid use of bare except
  - [\#9134](https://github.com/scipy/scipy/pull/9134): DOC: Update of 'return\_eigenvectors' description
  - [\#9137](https://github.com/scipy/scipy/pull/9137): DOC: typo fixes for discrete Poisson tutorial
  - [\#9139](https://github.com/scipy/scipy/pull/9139): FIX: Doctest failure in optimize tutorial
  - [\#9143](https://github.com/scipy/scipy/pull/9143): DOC: missing sigma in Pearson r formula
  - [\#9145](https://github.com/scipy/scipy/pull/9145): MAINT: Refactor linear programming solvers
  - [\#9149](https://github.com/scipy/scipy/pull/9149): FIX: Make scipy.odr.ODR ifixx equal to its data.fix if given
  - [\#9156](https://github.com/scipy/scipy/pull/9156): DOC: special: Mention the sigmoid function in the expit docstring.
  - [\#9160](https://github.com/scipy/scipy/pull/9160): Fixed a latex delimiter error in levy()
  - [\#9170](https://github.com/scipy/scipy/pull/9170): DOC: correction / update of docstrings of distributions in scipy.stats
  - [\#9171](https://github.com/scipy/scipy/pull/9171): better description of the hierarchical clustering parameter
  - [\#9174](https://github.com/scipy/scipy/pull/9174): domain check for a \< b in stats.truncnorm
  - [\#9175](https://github.com/scipy/scipy/pull/9175): DOC: Minor grammar fix
  - [\#9176](https://github.com/scipy/scipy/pull/9176): BUG: CloughTocher2DInterpolator: fix miscalculation at neighborless...
  - [\#9177](https://github.com/scipy/scipy/pull/9177): BUILD: Document the "clean" target in the doc/Makefile.
  - [\#9178](https://github.com/scipy/scipy/pull/9178): MAINT: make refguide-check more robust for printed numpy arrays
  - [\#9186](https://github.com/scipy/scipy/pull/9186): MAINT: Remove np.ediff1d occurence
  - [\#9188](https://github.com/scipy/scipy/pull/9188): DOC: correct typo in extending ndimage with C
  - [\#9190](https://github.com/scipy/scipy/pull/9190): ENH: Support specifying axes for fftconvolve
  - [\#9192](https://github.com/scipy/scipy/pull/9192): MAINT: optimize: fixed @pv style suggestions from \#9112
  - [\#9200](https://github.com/scipy/scipy/pull/9200): Fix make\_interp\_spline(..., k=0 or 1, axis\<0)
  - [\#9201](https://github.com/scipy/scipy/pull/9201): BUG: sparse.linalg/gmres: use machine eps in breakdown check
  - [\#9204](https://github.com/scipy/scipy/pull/9204): MAINT: fix up stats.spearmanr and match mstats.spearmanr with...
  - [\#9206](https://github.com/scipy/scipy/pull/9206): MAINT: include benchmarks and dev files in sdist.
  - [\#9208](https://github.com/scipy/scipy/pull/9208): TST: signal: bump bsplines test tolerance for complex data
  - [\#9210](https://github.com/scipy/scipy/pull/9210): TST: mark tests as slow, fix missing random seed
  - [\#9211](https://github.com/scipy/scipy/pull/9211): ENH: add capability to specify orders in pade func
  - [\#9217](https://github.com/scipy/scipy/pull/9217): MAINT: Include `success` and `nit` in OptimizeResult returned...
  - [\#9222](https://github.com/scipy/scipy/pull/9222): ENH: interpolate: Use scipy.spatial.distance to speed-up Rbf
  - [\#9229](https://github.com/scipy/scipy/pull/9229): MNT: Fix Fourier filter double case
  - [\#9233](https://github.com/scipy/scipy/pull/9233): BUG: spatial/distance: fix pdist/cdist performance regression...
  - [\#9234](https://github.com/scipy/scipy/pull/9234): FIX: Proper suppression
  - [\#9235](https://github.com/scipy/scipy/pull/9235): BENCH: rationalize slow benchmarks + miscellaneous fixes
  - [\#9238](https://github.com/scipy/scipy/pull/9238): BENCH: limit number of parameter combinations in spatial.\*KDTree...
  - [\#9239](https://github.com/scipy/scipy/pull/9239): DOC: stats: Fix LaTeX markup of a couple distribution PDFs.
  - [\#9241](https://github.com/scipy/scipy/pull/9241): ENH: Evaluate plateau size during peak finding
  - [\#9242](https://github.com/scipy/scipy/pull/9242): ENH: stats: Implement \_ppf and \_logpdf for crystalball, and do...
  - [\#9246](https://github.com/scipy/scipy/pull/9246): DOC: Properly render versionadded directive in HTML documentation
  - [\#9255](https://github.com/scipy/scipy/pull/9255): DOC: mention RootResults in optimization reference guide
  - [\#9260](https://github.com/scipy/scipy/pull/9260): TST: relax some tolerances so tests pass with x87 math
  - [\#9264](https://github.com/scipy/scipy/pull/9264): TST Use assert\_raises "match" parameter instead of the "message"...
  - [\#9267](https://github.com/scipy/scipy/pull/9267): DOC: clarify expect() return val when moment is inf/nan
  - [\#9272](https://github.com/scipy/scipy/pull/9272): DOC: Add description of default bounds to linprog
  - [\#9277](https://github.com/scipy/scipy/pull/9277): MAINT: sparse/linalg: make test deterministic
  - [\#9278](https://github.com/scipy/scipy/pull/9278): MAINT: interpolate: pep8 cleanup in test\_polyint
  - [\#9279](https://github.com/scipy/scipy/pull/9279): Fixed docstring for resample
  - [\#9280](https://github.com/scipy/scipy/pull/9280): removed first check for float in get\_sum\_dtype
  - [\#9281](https://github.com/scipy/scipy/pull/9281): BUG: only accept 1d input for bartlett / levene in scipy.stats
  - [\#9282](https://github.com/scipy/scipy/pull/9282): MAINT: dense\_output and t\_eval are mutually exclusive inputs
  - [\#9283](https://github.com/scipy/scipy/pull/9283): MAINT: add docs and do some cleanups in interpolate.Rbf
  - [\#9288](https://github.com/scipy/scipy/pull/9288): Run distance\_transform\_edt tests on all types
  - [\#9294](https://github.com/scipy/scipy/pull/9294): DOC: fix the formula typo
  - [\#9298](https://github.com/scipy/scipy/pull/9298): MAINT: optimize/trust-constr: restore .niter attribute for backward-compat
  - [\#9299](https://github.com/scipy/scipy/pull/9299): DOC: clarification of default rvs method in scipy.stats
  - [\#9301](https://github.com/scipy/scipy/pull/9301): MAINT: removed unused import sys
  - [\#9302](https://github.com/scipy/scipy/pull/9302): MAINT: removed unused imports
  - [\#9303](https://github.com/scipy/scipy/pull/9303): DOC: signal: Refer to fs instead of nyq in the firwin docstring.
  - [\#9305](https://github.com/scipy/scipy/pull/9305): ENH: Added Yeo-Johnson power transformation
  - [\#9306](https://github.com/scipy/scipy/pull/9306): ENH - add dual annealing
  - [\#9309](https://github.com/scipy/scipy/pull/9309): ENH add the yulesimon distribution to scipy.stats
  - [\#9317](https://github.com/scipy/scipy/pull/9317): Nested SLSQP bug fix.
  - [\#9320](https://github.com/scipy/scipy/pull/9320): MAINT: stats: avoid underflow in stats.geom.ppf
  - [\#9326](https://github.com/scipy/scipy/pull/9326): Add example for Rosenbrock function
  - [\#9332](https://github.com/scipy/scipy/pull/9332): Sort file lists
  - [\#9340](https://github.com/scipy/scipy/pull/9340): Fix typo in find\_peaks documentation
  - [\#9343](https://github.com/scipy/scipy/pull/9343): MAINT Use np.full when possible
  - [\#9344](https://github.com/scipy/scipy/pull/9344): DOC: added examples to docstring of dirichlet class
  - [\#9346](https://github.com/scipy/scipy/pull/9346): DOC: Fix import of scipy.sparse.linalg in example (\#9345)
  - [\#9350](https://github.com/scipy/scipy/pull/9350): Fix interpolate read only
  - [\#9351](https://github.com/scipy/scipy/pull/9351): MAINT: special.erf: use the x-\>-x symmetry
  - [\#9356](https://github.com/scipy/scipy/pull/9356): Fix documentation typo
  - [\#9358](https://github.com/scipy/scipy/pull/9358): DOC: improve doc for ksone and kstwobign in scipy.stats
  - [\#9362](https://github.com/scipy/scipy/pull/9362): DOC: Change datatypes of A matrices in linprog
  - [\#9364](https://github.com/scipy/scipy/pull/9364): MAINT: Adds implicit none to fftpack fortran sources
  - [\#9369](https://github.com/scipy/scipy/pull/9369): DOC: minor tweak to CoC (updated NumFOCUS contact address).
  - [\#9373](https://github.com/scipy/scipy/pull/9373): Fix exception if python is called with -OO option
  - [\#9374](https://github.com/scipy/scipy/pull/9374): FIX: AIX compilation issue with NAN and INFINITY
  - [\#9376](https://github.com/scipy/scipy/pull/9376): COBLYA -\> COBYLA in docs
  - [\#9377](https://github.com/scipy/scipy/pull/9377): DOC: Add examples integrate: fixed\_quad and quadrature
  - [\#9379](https://github.com/scipy/scipy/pull/9379): MAINT: TST: Make tests NumPy 1.8 compatible
  - [\#9385](https://github.com/scipy/scipy/pull/9385): CI: On Travis matrix "OPTIMIZE=-OO" flag ignored
  - [\#9387](https://github.com/scipy/scipy/pull/9387): Fix defaut value for 'mode' in 'ndimage.shift' in the doc
  - [\#9392](https://github.com/scipy/scipy/pull/9392): BUG: rank has to be integer in rank\_filter: fixed issue 9388
  - [\#9399](https://github.com/scipy/scipy/pull/9399): DOC: Misc. typos
  - [\#9400](https://github.com/scipy/scipy/pull/9400): TST: stats: Fix the expected r-value of a linregress test.
  - [\#9405](https://github.com/scipy/scipy/pull/9405): BUG: np.hstack does not accept generator expressions
  - [\#9408](https://github.com/scipy/scipy/pull/9408): ENH: linalg: Shorter ill-conditioned warning message
  - [\#9418](https://github.com/scipy/scipy/pull/9418): DOC: Fix ndimage docstrings and reduce doc build warnings
  - [\#9421](https://github.com/scipy/scipy/pull/9421): DOC: Add missing docstring examples in scipy.spatial
  - [\#9422](https://github.com/scipy/scipy/pull/9422): DOC: Add an example to integrate.newton\_cotes
  - [\#9427](https://github.com/scipy/scipy/pull/9427): BUG: Fixed defect with maxiter \#9419 in dual annealing
  - [\#9431](https://github.com/scipy/scipy/pull/9431): BENCH: Add dual annealing to scipy benchmark (see \#9415)
  - [\#9435](https://github.com/scipy/scipy/pull/9435): DOC: Add docstring examples for stats.binom\_test
  - [\#9443](https://github.com/scipy/scipy/pull/9443): DOC: Fix the order of indices in optimize tutorial
  - [\#9444](https://github.com/scipy/scipy/pull/9444): MAINT: interpolate: use operator.index for checking/coercing...
  - [\#9445](https://github.com/scipy/scipy/pull/9445): DOC: Added missing example to stats.mstats.kruskal
  - [\#9446](https://github.com/scipy/scipy/pull/9446): DOC: Add note about version changed for jaccard distance
  - [\#9447](https://github.com/scipy/scipy/pull/9447): BLD: version-script handling in setup.py
  - [\#9448](https://github.com/scipy/scipy/pull/9448): TST: skip a problematic linalg test
  - [\#9449](https://github.com/scipy/scipy/pull/9449): TST: fix missing seed in lobpcg test.
  - [\#9456](https://github.com/scipy/scipy/pull/9456): TST: test\_eigs\_consistency() now sorts output

---

1.2.1-notes.md

---

# SciPy 1.2.1 Release Notes

<div class="contents">

</div>

SciPy 1.2.1 is a bug-fix release with no new features compared to 1.2.0. Most importantly, it solves the issue that 1.2.0 cannot be installed from source on Python 2.7 because of non-ascii character issues.

It is also notable that SciPy 1.2.1 wheels were built with OpenBLAS 0.3.5.dev, which may alleviate some linear algebra issues observed in SciPy 1.2.0.

## Authors

  - Eric Larson
  - Mark Mikofski
  - Evgeni Burovski
  - Ralf Gommers
  - Eric Moore
  - Tyler Reddy

### Issues closed for 1.2.1

  - [\#9606](https://github.com/scipy/scipy/issues/9606): SyntaxError: Non-ASCII character 'xe2' in file scipy/stats/\_continuous\_distns.py on line 3346, but no encoding declared
  - [\#9608](https://github.com/scipy/scipy/issues/9608): Version 1.2.0 introduces <span class="title-ref">too many indices for array</span> error in...
  - [\#9709](https://github.com/scipy/scipy/issues/9709): scipy.stats.gaussian\_kde normalizes the weights keyword argument...
  - [\#9733](https://github.com/scipy/scipy/issues/9733): scipy.linalg.qr\_update gives NaN result
  - [\#9724](https://github.com/scipy/scipy/issues/9724): CI: Is scipy.scipy Windows Python36-32bit-full working?

### Pull requests for 1.2.1

  - [\#9612](https://github.com/scipy/scipy/pull/9612): BUG: don't use array newton unless size is greater than 1
  - [\#9615](https://github.com/scipy/scipy/pull/9615): ENH: Add test for encoding
  - [\#9720](https://github.com/scipy/scipy/pull/9720): BUG: stats: weighted KDE does not modify the weights array
  - [\#9739](https://github.com/scipy/scipy/pull/9739): BUG: qr\_updates fails if u is exactly in span Q
  - [\#9725](https://github.com/scipy/scipy/pull/9725): TST: pin mingw for Azure Win CI
  - [\#9736](https://github.com/scipy/scipy/pull/9736): TST: adjust to vmImage dispatch in Azure
  - [\#9681](https://github.com/scipy/scipy/pull/9681): BUG: Fix failing stats tests (partial backport)
  - [\#9662](https://github.com/scipy/scipy/pull/9662): TST: interpolate: avoid pytest deprecations

---

1.2.2-notes.md

---

# SciPy 1.2.2 Release Notes

<div class="contents">

</div>

SciPy 1.2.2 is a bug-fix release with no new features compared to 1.2.1. Importantly, the SciPy 1.2.2 wheels are built with OpenBLAS 0.3.7.dev to alleviate issues with SkylakeX AVX512 kernels.

## Authors

  - CJ Carey
  - Tyler Dawson +
  - Ralf Gommers
  - Kai Striega
  - Andrew Nelson
  - Tyler Reddy
  - Kevin Sheppard +

A total of 7 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.2.2

  - [\#9611](https://github.com/scipy/scipy/issues/9611): Overflow error with new way of p-value calculation in kendall tau correlation for perfectly monotonic vectors
  - [\#9964](https://github.com/scipy/scipy/issues/9964): optimize.newton : overwrites x0 argument when it is a numpy array
  - [\#9784](https://github.com/scipy/scipy/issues/9784): TST: Minimum NumPy version is not being CI tested
  - [\#10132](https://github.com/scipy/scipy/issues/10132): Docs: Description of nnz attribute of sparse.csc\_matrix misleading

### Pull requests for 1.2.2

  - [\#10056](https://github.com/scipy/scipy/pull/10056): BUG: Ensure factorial is not too large in kendaltau
  - [\#9991](https://github.com/scipy/scipy/pull/9991): BUG: Avoid inplace modification of input array in newton
  - [\#9788](https://github.com/scipy/scipy/pull/9788): TST, BUG: f2py-related issues with NumPy \< 1.14.0
  - [\#9749](https://github.com/scipy/scipy/pull/9749): BUG: MapWrapper.\_\_exit\_\_ should terminate
  - [\#10141](https://github.com/scipy/scipy/pull/10141): Update description for nnz on csc.py

---

1.2.3-notes.md

---

# SciPy 1.2.3 Release Notes

<div class="contents">

</div>

SciPy 1.2.3 is a bug-fix release with no new features compared to 1.2.2. It is part of the long-term support (LTS) release series for Python 2.7.

## Authors

  - Geordie McBain
  - Matt Haberland
  - David Hagen
  - Tyler Reddy
  - Pauli Virtanen
  - Eric Larson
  - Yu Feng
  - ananyashreyjain
  - Nikolay Mayorov
  - Evgeni Burovski
  - Warren Weckesser

### Issues closed for 1.2.3

  - [\#4915](https://github.com/scipy/scipy/issues/4915): Bug in unique\_roots in scipy.signal.signaltools.py for roots with same magnitude
  - [\#5546](https://github.com/scipy/scipy/issues/5546): ValueError raised if scipy.sparse.linalg.expm recieves array larger than 200x200
  - [\#7117](https://github.com/scipy/scipy/issues/7117): Warn users when using float32 input data to curve\_fit and friends
  - [\#7906](https://github.com/scipy/scipy/issues/7906): Wrong result from scipy.interpolate.UnivariateSpline.integral for out-of-bounds
  - [\#9581](https://github.com/scipy/scipy/issues/9581): Least-squares minimization fails silently when x and y data are different types
  - [\#9901](https://github.com/scipy/scipy/issues/9901): lsoda fails to detect stiff problem when called from solve\_ivp
  - [\#9988](https://github.com/scipy/scipy/issues/9988): doc build broken with Sphinx 2.0.0
  - [\#10303](https://github.com/scipy/scipy/issues/10303): BUG: optimize: <span class="title-ref">linprog</span> failing TestLinprogSimplexBland::test\_unbounded\_below\_no\_presolve\_corrected
  - [\#10376](https://github.com/scipy/scipy/issues/10376): TST: Travis CI fails (with pytest 5.0 ?)
  - [\#10384](https://github.com/scipy/scipy/issues/10384): CircleCI doc build failing on new warnings
  - [\#10535](https://github.com/scipy/scipy/issues/10535): TST: master branch CI failures
  - [\#11121](https://github.com/scipy/scipy/issues/11121): Calls to <span class="title-ref">scipy.interpolate.splprep</span> increase RAM usage.
  - [\#11198](https://github.com/scipy/scipy/issues/11198): BUG: sparse eigs (arpack) shift-invert drops the smallest eigenvalue for some k
  - [\#11266](https://github.com/scipy/scipy/issues/11266): Sparse matrix constructor data type detection changes on Numpy 1.18.0

### Pull requests for 1.2.3

  - [\#9992](https://github.com/scipy/scipy/pull/9992): MAINT: Undo Sphinx pin
  - [\#10071](https://github.com/scipy/scipy/pull/10071): DOC: reconstruct SuperLU permutation matrices avoiding SparseEfficiencyWarning
  - [\#10076](https://github.com/scipy/scipy/pull/10076): BUG: optimize: fix curve\_fit for mixed float32/float64 input
  - [\#10138](https://github.com/scipy/scipy/pull/10138): BUG: special: Invalid arguments to ellip\_harm can crash Python.
  - [\#10306](https://github.com/scipy/scipy/pull/10306): BUG: optimize: Fix for 10303
  - [\#10309](https://github.com/scipy/scipy/pull/10309): BUG: Pass jac=None directly to lsoda
  - [\#10377](https://github.com/scipy/scipy/pull/10377): TST, MAINT: adjustments for pytest 5.0
  - [\#10379](https://github.com/scipy/scipy/pull/10379): BUG: sparse: set writeability to be forward-compatible with numpy\>=1.17
  - [\#10426](https://github.com/scipy/scipy/pull/10426): MAINT: Fix doc build bugs
  - [\#10540](https://github.com/scipy/scipy/pull/10540): MAINT: Fix Travis and Circle
  - [\#10633](https://github.com/scipy/scipy/pull/10633): BUG: interpolate: integral(a, b) should be zero when both limits are outside of the interpolation range
  - [\#10833](https://github.com/scipy/scipy/pull/10833): BUG: Fix subspace\_angles for complex values
  - [\#10882](https://github.com/scipy/scipy/pull/10882): BUG: sparse/arpack: fix incorrect code for complex hermitian M
  - [\#10906](https://github.com/scipy/scipy/pull/10906): BUG: sparse/linalg: fix expm for np.matrix inputs
  - [\#10961](https://github.com/scipy/scipy/pull/10961): BUG: Fix signal.unique\_roots
  - [\#11126](https://github.com/scipy/scipy/pull/11126): BUG: interpolate/fitpack: fix memory leak in splprep
  - [\#11199](https://github.com/scipy/scipy/pull/11199): BUG: sparse.linalg: mistake in unsymm. real shift-invert ARPACK eigenvalue selection
  - [\#11269](https://github.com/scipy/scipy/pull/11269): Fix: Sparse matrix constructor data type detection changes on Numpy 1.18.0

---

1.3.0-notes.md

---

# SciPy 1.3.0 Release Notes

<div class="contents">

</div>

SciPy 1.3.0 is the culmination of 5 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been some API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.3.x branch, and on adding new features on the master branch.

This release requires Python 3.5+ and NumPy 1.13.3 or greater.

For running on PyPy, PyPy3 6.0+ and NumPy 1.15.0 are required.

## Highlights of this release

  - Three new `stats` functions, a rewrite of `pearsonr`, and an exact computation of the Kolmogorov-Smirnov two-sample test.
  - A new Cython API for bounded scalar-function root-finders in <span class="title-ref">scipy.optimize</span>.
  - Substantial `CSR` and `CSC` sparse matrix indexing performance improvements.
  - Added support for interpolation of rotations with continuous angular rate and acceleration in `RotationSpline`.

## New features

### <span class="title-ref">scipy.interpolate</span> improvements

A new class `CubicHermiteSpline` is introduced. It is a piecewise-cubic interpolator which matches observed values and first derivatives. Existing cubic interpolators `CubicSpline`, `PchipInterpolator` and `Akima1DInterpolator` were made subclasses of `CubicHermiteSpline`.

### <span class="title-ref">scipy.io</span> improvements

For the Attribute-Relation File Format (ARFF) <span class="title-ref">scipy.io.arff.loadarff</span> now supports relational attributes.

<span class="title-ref">scipy.io.mmread</span> can now parse Matrix Market format files with empty lines.

### <span class="title-ref">scipy.linalg</span> improvements

Added wrappers for `?syconv` routines, which convert a symmetric matrix given by a triangular matrix factorization into two matrices and vice versa.

<span class="title-ref">scipy.linalg.clarkson\_woodruff\_transform</span> now uses an algorithm that leverages sparsity. This may provide a 60-90 percent speedup for dense input matrices. Truly sparse input matrices should also benefit from the improved sketch algorithm, which now correctly runs in `O(nnz(A))` time.

Added new functions to calculate symmetric Fiedler matrices and Fiedler companion matrices, named <span class="title-ref">scipy.linalg.fiedler</span> and <span class="title-ref">scipy.linalg.fiedler\_companion</span>, respectively. These may be used for root finding.

### <span class="title-ref">scipy.ndimage</span> improvements

Gaussian filter performances may improve by an order of magnitude in some cases, thanks to the removal of a dependence on `np.polynomial`. This may impact <span class="title-ref">scipy.ndimage.gaussian\_filter</span> for example.

### <span class="title-ref">scipy.optimize</span> improvements

The <span class="title-ref">scipy.optimize.brute</span> minimizer obtained a new keyword `workers`, which can be used to parallelize computation.

A Cython API for bounded scalar-function root-finders in <span class="title-ref">scipy.optimize</span> is available in a new module <span class="title-ref">scipy.optimize.cython\_optimize</span> via `cimport`. This API may be used with `nogil` and `prange` to loop over an array of function arguments to solve for an array of roots more quickly than with pure Python.

`'interior-point'` is now the default method for `linprog`, and `'interior-point'` now uses SuiteSparse for sparse problems when the required scikits (scikit-umfpack and scikit-sparse) are available. On benchmark problems (gh-10026), execution time reductions by factors of 2-3 were typical. Also, a new `method='revised simplex'` has been added. It is not as fast or robust as `method='interior-point'`, but it is a faster, more robust, and equally accurate substitute for the legacy `method='simplex'`.

`differential_evolution` can now use a `Bounds` class to specify the bounds for the optimizing argument of a function.

<span class="title-ref">scipy.optimize.dual\_annealing</span> performance improvements related to vectorization of some internal code.

### <span class="title-ref">scipy.signal</span> improvements

Two additional methods of discretization are now supported by \`scipy.signal.cont2discrete\`: `impulse` and `foh`.

<span class="title-ref">scipy.signal.firls</span> now uses faster solvers.

<span class="title-ref">scipy.signal.detrend</span> now has a lower physical memory footprint in some cases, which may be leveraged using the new `overwrite_data` keyword argument.

<span class="title-ref">scipy.signal.firwin</span> `pass_zero` argument now accepts new string arguments that allow specification of the desired filter type: `'bandpass'`, `'lowpass'`, `'highpass'`, and `'bandstop'`.

<span class="title-ref">scipy.signal.sosfilt</span> may have improved performance due to lower retention of the global interpreter lock (GIL) in the algorithm.

### <span class="title-ref">scipy.sparse</span> improvements

A new keyword was added to `csgraph.dijsktra` that allows users to query the shortest path to ANY of the passed-in indices, as opposed to the shortest path to EVERY passed index.

<span class="title-ref">scipy.sparse.linalg.lsmr</span> performance has been improved by roughly 10 percent on large problems.

Improved performance and reduced physical memory footprint of the algorithm used by <span class="title-ref">scipy.sparse.linalg.lobpcg</span>.

`CSR` and `CSC` sparse matrix fancy indexing performance has been improved substantially.

### <span class="title-ref">scipy.spatial</span> improvements

<span class="title-ref">scipy.spatial.ConvexHull</span> now has a `good` attribute that can be used alongside the `QGn` Qhull options to determine which external facets of a convex hull are visible from an external query point.

<span class="title-ref">scipy.spatial.cKDTree.query\_ball\_point</span> has been modernized to use some newer Cython features, including GIL handling and exception translation. An issue with `return_sorted=True` and scalar queries was fixed, and a new mode named `return_length` was added. `return_length` only computes the length of the returned indices list instead of allocating the array every time.

<span class="title-ref">scipy.spatial.transform.RotationSpline</span> has been added to enable interpolation of rotations with continuous angular rates and acceleration.

### <span class="title-ref">scipy.stats</span> improvements

Added a new function to compute the Epps-Singleton test statistic, <span class="title-ref">scipy.stats.epps\_singleton\_2samp</span>, which can be applied to continuous and discrete distributions.

New functions <span class="title-ref">scipy.stats.median\_absolute\_deviation</span> and <span class="title-ref">scipy.stats.gstd</span> (geometric standard deviation) were added. The <span class="title-ref">scipy.stats.combine\_pvalues</span> method now supports `pearson`, `tippett` and `mudholkar_george` pvalue combination methods.

The <span class="title-ref">scipy.stats.ortho\_group</span> and <span class="title-ref">scipy.stats.special\_ortho\_group</span> `rvs(dim)` functions' algorithms were updated from a `O(dim^4)` implementation to a `O(dim^3)` which gives large speed improvements for `dim>100`.

A rewrite of <span class="title-ref">scipy.stats.pearsonr</span> to use a more robust algorithm, provide meaningful exceptions and warnings on potentially pathological input, and fix at least five separate reported issues in the original implementation.

Improved the precision of `hypergeom.logcdf` and `hypergeom.logsf`.

Added exact computation for Kolmogorov-Smirnov (KS) two-sample test, replacing the previously approximate computation for the two-sided test <span class="title-ref">stats.ks\_2samp</span>. Also added a one-sided, two-sample KS test, and a keyword `alternative` to <span class="title-ref">stats.ks\_2samp</span>.

## Backwards-incompatible changes

### <span class="title-ref">scipy.interpolate</span> changes

Functions from `scipy.interpolate` (`spleval`, `spline`, `splmake`, and `spltopp`) and functions from `scipy.misc` (`bytescale`, `fromimage`, `imfilter`, `imread`, `imresize`, `imrotate`, `imsave`, `imshow`, `toimage`) have been removed. The former set has been deprecated since v0.19.0 and the latter has been deprecated since v1.0.0. Similarly, aliases from `scipy.misc` (`comb`, `factorial`, `factorial2`, `factorialk`, `logsumexp`, `pade`, `info`, `source`, `who`) which have been deprecated since v1.0.0 are removed. [SciPy documentation for v1.1.0](https://docs.scipy.org/doc/scipy-1.1.0/reference/misc.html) can be used to track the new import locations for the relocated functions.

### <span class="title-ref">scipy.linalg</span> changes

For `pinv`, `pinv2`, and `pinvh`, the default cutoff values are changed for consistency (see the docs for the actual values).

### <span class="title-ref">scipy.optimize</span> changes

The default method for `linprog` is now `'interior-point'`. The method's robustness and speed come at a cost: solutions may not be accurate to machine precision or correspond with a vertex of the polytope defined by the constraints. To revert to the original simplex method, include the argument `method='simplex'`.

### <span class="title-ref">scipy.stats</span> changes

Previously, `ks_2samp(data1, data2)` would run a two-sided test and return the approximated p-value. The new signature, `ks_2samp(data1, data2, alternative="two-sided", method="auto")`, still runs the two-sided test by default but returns the exact p-value for small samples and the approximated value for large samples. `method="asymp"` would be equivalent to the old version but `auto` is the better choice.

## Other changes

Our tutorial has been expanded with a new section on global optimizers.

There has been a rework of the `stats.distributions` tutorials.

<span class="title-ref">scipy.optimize</span> now correctly sets the convergence flag of the result to `CONVERR`, a convergence error, for bounded scalar-function root-finders if the maximum iterations has been exceeded, `disp` is false, and `full_output` is true.

<span class="title-ref">scipy.optimize.curve\_fit</span> no longer fails if `xdata` and `ydata` dtypes differ; they are both now automatically cast to `float64`.

<span class="title-ref">scipy.ndimage</span> functions including `binary_erosion`, `binary_closing`, and `binary_dilation` now require an integer value for the number of iterations, which alleviates a number of reported issues.

Fixed normal approximation in case `zero_method == "pratt"` in <span class="title-ref">scipy.stats.wilcoxon</span>.

Fixes for incorrect probabilities, broadcasting issues and thread-safety related to stats distributions setting member variables inside `_argcheck()`.

<span class="title-ref">scipy.optimize.newton</span> now correctly raises a `RuntimeError` in the following cases: when default arguments are used and if a derivative of value zero is obtained (which is a special case of failing to converge).

A draft toolchain roadmap is now available, laying out a compatibility plan including Python versions, C standards, and NumPy versions.

## Authors

  - ananyashreyjain +
  - ApamNapat +
  - Scott Calabrese Barton +
  - Christoph Baumgarten
  - Peter Bell +
  - Jacob Blomgren +
  - Doctor Bob +
  - Mana Borwornpadungkitti +
  - Matthew Brett
  - Evgeni Burovski
  - CJ Carey
  - Vega Theil Carstensen +
  - Robert Cimrman
  - Forrest Collman +
  - Pietro Cottone +
  - David +
  - Idan David +
  - Christoph Deil
  - Dieter Werthmüller
  - Conner DiPaolo +
  - Dowon
  - Michael Dunphy +
  - Peter Andreas Entschev +
  - Gökçen Eraslan +
  - Johann Faouzi +
  - Yu Feng
  - Piotr Figiel +
  - Matthew H Flamm
  - Franz Forstmayr +
  - Christoph Gohlke
  - Richard Janis Goldschmidt +
  - Ralf Gommers
  - Lars Grueter
  - Sylvain Gubian
  - Matt Haberland
  - Yaroslav Halchenko
  - Charles Harris
  - Lindsey Hiltner
  - JakobStruye +
  - He Jia +
  - Jwink3101 +
  - Greg Kiar +
  - Julius Bier Kirkegaard
  - John Kirkham +
  - Thomas Kluyver
  - Vladimir Korolev +
  - Joseph Kuo +
  - Michael Lamparski +
  - Eric Larson
  - Denis Laxalde
  - Katrin Leinweber
  - Jesse Livezey
  - ludcila +
  - Dhruv Madeka +
  - Magnus +
  - Nikolay Mayorov
  - Mark Mikofski
  - Jarrod Millman
  - Markus Mohrhard +
  - Eric Moore
  - Andrew Nelson
  - Aki Nishimura +
  - OGordon100 +
  - Petar Mlinarić +
  - Stefan Peterson
  - Matti Picus +
  - Ilhan Polat
  - Aaron Pries +
  - Matteo Ravasi +
  - Tyler Reddy
  - Ashton Reimer +
  - Joscha Reimer
  - rfezzani +
  - Riadh +
  - Lucas Roberts
  - Heshy Roskes +
  - Mirko Scholz +
  - Taylor D. Scott +
  - Srikrishna Sekhar +
  - Kevin Sheppard +
  - Sourav Singh
  - skjerns +
  - Kai Striega
  - SyedSaifAliAlvi +
  - Gopi Manohar T +
  - Albert Thomas +
  - Timon +
  - Paul van Mulbregt
  - Jacob Vanderplas
  - Daniel Vargas +
  - Pauli Virtanen
  - VNMabus +
  - Stefan van der Walt
  - Warren Weckesser
  - Josh Wilson
  - Nate Yoder +
  - Roman Yurchak

A total of 97 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.3.0

  - [\#1320](https://github.com/scipy/scipy/issues/1320): scipy.stats.distribution: problem with self.a, self.b if they...
  - [\#2002](https://github.com/scipy/scipy/issues/2002): members set in scipy.stats.distributions.\#\#.\_argcheck (Trac \#1477)
  - [\#2823](https://github.com/scipy/scipy/issues/2823): distribution methods add tmp
  - [\#3220](https://github.com/scipy/scipy/issues/3220): Scipy.opimize.fmin\_powell direc argument syntax unclear
  - [\#3728](https://github.com/scipy/scipy/issues/3728): scipy.stats.pearsonr: possible bug with zero variance input
  - [\#6805](https://github.com/scipy/scipy/issues/6805): error-in-scipy-wilcoxon-signed-rank-test-for-equal-series
  - [\#6873](https://github.com/scipy/scipy/issues/6873): 'stats.boxcox' return all same values
  - [\#7117](https://github.com/scipy/scipy/issues/7117): Warn users when using float32 input data to curve\_fit and friends
  - [\#7632](https://github.com/scipy/scipy/issues/7632): it's not possible to tell the \`optimize.least\_squares\` solver...
  - [\#7730](https://github.com/scipy/scipy/issues/7730): stats.pearsonr: Potential division by zero for dataset of length...
  - [\#7933](https://github.com/scipy/scipy/issues/7933): stats.truncnorm fails when providing values outside truncation...
  - [\#8033](https://github.com/scipy/scipy/issues/8033): Add standard filter types to firwin to set pass\_zero intuitively...
  - [\#8600](https://github.com/scipy/scipy/issues/8600): lfilter.c.src zfill has erroneous header
  - [\#8692](https://github.com/scipy/scipy/issues/8692): Non-negative values of \`stats.hypergeom.logcdf\`
  - [\#8734](https://github.com/scipy/scipy/issues/8734): Enable pip build isolation
  - [\#8861](https://github.com/scipy/scipy/issues/8861): scipy.linalg.pinv gives wrong result while scipy.linalg.pinv2...
  - [\#8915](https://github.com/scipy/scipy/issues/8915): need to fix macOS build against older numpy versions
  - [\#8980](https://github.com/scipy/scipy/issues/8980): scipy.stats.pearsonr overflows with high values of x and y
  - [\#9226](https://github.com/scipy/scipy/issues/9226): BUG: signal: SystemError: \<built-in function \_linear\_filter\>...
  - [\#9254](https://github.com/scipy/scipy/issues/9254): BUG: root finders brentq, etc, flag says "converged" even if...
  - [\#9308](https://github.com/scipy/scipy/issues/9308): Test failure - test\_initial\_constraints\_as\_canonical
  - [\#9353](https://github.com/scipy/scipy/issues/9353): scipy.stats.pearsonr returns r=1 if r\_num/r\_den = inf
  - [\#9359](https://github.com/scipy/scipy/issues/9359): Planck distribution is a geometric distribution
  - [\#9381](https://github.com/scipy/scipy/issues/9381): linregress should warn user in 2x2 array case
  - [\#9406](https://github.com/scipy/scipy/issues/9406): BUG: stats: In pearsonr, when r is nan, the p-value must also...
  - [\#9437](https://github.com/scipy/scipy/issues/9437): Cannot create sparse matrix from size\_t indexes
  - [\#9518](https://github.com/scipy/scipy/issues/9518): Relational attributes in loadarff
  - [\#9551](https://github.com/scipy/scipy/issues/9551): BUG: scipy.optimize.newton says the root of x^2+1 is zero.
  - [\#9564](https://github.com/scipy/scipy/issues/9564): rv\_sample accepts invalid input in scipy.stats
  - [\#9565](https://github.com/scipy/scipy/issues/9565): improper handling of multidimensional input in stats.rv\_sample
  - [\#9581](https://github.com/scipy/scipy/issues/9581): Least-squares minimization fails silently when x and y data are...
  - [\#9587](https://github.com/scipy/scipy/issues/9587): Outdated value for scipy.constants.au
  - [\#9611](https://github.com/scipy/scipy/issues/9611): Overflow error with new way of p-value calculation in kendall...
  - [\#9645](https://github.com/scipy/scipy/issues/9645): \`scipy.stats.mode\` crashes with variable length arrays (\`dtype=object\`)
  - [\#9734](https://github.com/scipy/scipy/issues/9734): PendingDeprecationWarning for np.matrix with pytest
  - [\#9786](https://github.com/scipy/scipy/issues/9786): stats.ks\_2samp() misleading for small data sets.
  - [\#9790](https://github.com/scipy/scipy/issues/9790): Excessive memory usage on detrend
  - [\#9801](https://github.com/scipy/scipy/issues/9801): dual\_annealing does not set the success attribute in OptimizeResult
  - [\#9833](https://github.com/scipy/scipy/issues/9833): IntegrationWarning from mielke.stats() during build of html doc.
  - [\#9835](https://github.com/scipy/scipy/issues/9835): scipy.signal.firls seems to be inefficient versus MATLAB firls
  - [\#9864](https://github.com/scipy/scipy/issues/9864): Curve\_fit does not check for empty input data if called with...
  - [\#9869](https://github.com/scipy/scipy/issues/9869): scipy.ndimage.label: Minor documentation issue
  - [\#9882](https://github.com/scipy/scipy/issues/9882): format at the wrong paranthesis in scipy.spatial.transform
  - [\#9889](https://github.com/scipy/scipy/issues/9889): scipy.signal.find\_peaks minor documentation issue
  - [\#9890](https://github.com/scipy/scipy/issues/9890): Minkowski p-norm Issues in cKDTree For Values Other Than 2 Or...
  - [\#9896](https://github.com/scipy/scipy/issues/9896): scipy.stats.\_argcheck sets (not just checks) values
  - [\#9905](https://github.com/scipy/scipy/issues/9905): Memory error in ndimage.binary\_erosion
  - [\#9909](https://github.com/scipy/scipy/issues/9909): binary\_dilation/erosion/closing crashes when iterations is float
  - [\#9919](https://github.com/scipy/scipy/issues/9919): BUG: \`coo\_matrix\` does not validate the \`shape\` argument.
  - [\#9982](https://github.com/scipy/scipy/issues/9982): lsq\_linear hangs/infinite loop with 'trf' method
  - [\#10003](https://github.com/scipy/scipy/issues/10003): exponnorm.pdf returns NAN for small K
  - [\#10011](https://github.com/scipy/scipy/issues/10011): Incorrect check for invalid rotation plane in scipy.ndimage.rotate
  - [\#10024](https://github.com/scipy/scipy/issues/10024): Fails to build from git
  - [\#10048](https://github.com/scipy/scipy/issues/10048): DOC: scipy.optimize.root\_scalar
  - [\#10068](https://github.com/scipy/scipy/issues/10068): DOC: scipy.interpolate.splev
  - [\#10074](https://github.com/scipy/scipy/issues/10074): BUG: \`expm\` calculates the wrong coefficients in the backward...

### Pull requests for 1.3.0

  - [\#7827](https://github.com/scipy/scipy/pull/7827): ENH: sparse: overhaul of sparse matrix indexing
  - [\#8431](https://github.com/scipy/scipy/pull/8431): ENH: Cython optimize zeros api
  - [\#8743](https://github.com/scipy/scipy/pull/8743): DOC: Updated linalg.pinv, .pinv2, .pinvh docstrings
  - [\#8744](https://github.com/scipy/scipy/pull/8744): DOC: added examples to remez docstring
  - [\#9227](https://github.com/scipy/scipy/pull/9227): DOC: update description of "direc" parameter of "fmin\_powell"
  - [\#9263](https://github.com/scipy/scipy/pull/9263): ENH: optimize: added "revised simplex" for scipy.optimize.linprog
  - [\#9325](https://github.com/scipy/scipy/pull/9325): DEP: Remove deprecated functions for 1.3.0
  - [\#9330](https://github.com/scipy/scipy/pull/9330): Add note on push and pull affine transformations
  - [\#9423](https://github.com/scipy/scipy/pull/9423): DOC: Clearly state how 2x2 input arrays are handled in stats.linregress
  - [\#9428](https://github.com/scipy/scipy/pull/9428): ENH: parallelised brute
  - [\#9438](https://github.com/scipy/scipy/pull/9438): BUG: Initialize coo matrix with size\_t indexes
  - [\#9455](https://github.com/scipy/scipy/pull/9455): MAINT: Speed up [get]()(lapack,blas)\_func
  - [\#9465](https://github.com/scipy/scipy/pull/9465): MAINT: Clean up optimize.zeros C solvers interfaces/code.
  - [\#9477](https://github.com/scipy/scipy/pull/9477): DOC: linalg: fix lstsq docstring on residues shape
  - [\#9478](https://github.com/scipy/scipy/pull/9478): DOC: Add docstring examples for rosen functions
  - [\#9479](https://github.com/scipy/scipy/pull/9479): DOC: Add docstring example for ai\_zeros and bi\_zeros
  - [\#9480](https://github.com/scipy/scipy/pull/9480): MAINT: linalg: lstsq clean up
  - [\#9489](https://github.com/scipy/scipy/pull/9489): DOC: roadmap update for changes over the last year.
  - [\#9492](https://github.com/scipy/scipy/pull/9492): MAINT: stats: Improve implementation of chi2 ppf method.
  - [\#9497](https://github.com/scipy/scipy/pull/9497): DOC: Improve docstrings sparse.linalg.isolve
  - [\#9499](https://github.com/scipy/scipy/pull/9499): DOC: Replace "Scipy" with "SciPy" in the .rst doc files for consistency.
  - [\#9500](https://github.com/scipy/scipy/pull/9500): DOC: Document the toolchain and its roadmap.
  - [\#9505](https://github.com/scipy/scipy/pull/9505): DOC: specify which definition of skewness is used
  - [\#9511](https://github.com/scipy/scipy/pull/9511): DEP: interpolate: remove deprecated interpolate\_wrapper
  - [\#9517](https://github.com/scipy/scipy/pull/9517): BUG: improve error handling in stats.iqr
  - [\#9522](https://github.com/scipy/scipy/pull/9522): ENH: Add Fiedler and fiedler companion to special matrices
  - [\#9526](https://github.com/scipy/scipy/pull/9526): TST: relax precision requirements in signal.correlate tests
  - [\#9529](https://github.com/scipy/scipy/pull/9529): DOC: fix missing random seed in optimize.newton example
  - [\#9533](https://github.com/scipy/scipy/pull/9533): MAINT: Use list comprehension when possible
  - [\#9537](https://github.com/scipy/scipy/pull/9537): DOC: add a "big picture" roadmap
  - [\#9538](https://github.com/scipy/scipy/pull/9538): DOC: Replace "Numpy" with "NumPy" in .py, .rst and .txt doc files...
  - [\#9539](https://github.com/scipy/scipy/pull/9539): ENH: add two-sample test (Epps-Singleton) to scipy.stats
  - [\#9559](https://github.com/scipy/scipy/pull/9559): DOC: add section on global optimizers to tutorial
  - [\#9561](https://github.com/scipy/scipy/pull/9561): ENH: remove noprefix.h, change code appropriately
  - [\#9562](https://github.com/scipy/scipy/pull/9562): MAINT: stats: Rewrite pearsonr.
  - [\#9563](https://github.com/scipy/scipy/pull/9563): BUG: Minor bug fix Callback in linprog(method='simplex')
  - [\#9568](https://github.com/scipy/scipy/pull/9568): MAINT: raise runtime error for newton with zeroder if disp true,...
  - [\#9570](https://github.com/scipy/scipy/pull/9570): Correct docstring in show\_options in optimize. Fixes \#9407
  - [\#9573](https://github.com/scipy/scipy/pull/9573): BUG fixes range of pk variable pre-check
  - [\#9577](https://github.com/scipy/scipy/pull/9577): TST: fix minor issue in a signal.stft test.
  - [\#9580](https://github.com/scipy/scipy/pull/9580): Included blank line before list - Fixes \#8658
  - [\#9582](https://github.com/scipy/scipy/pull/9582): MAINT: drop Python 2.7 and 3.4
  - [\#9588](https://github.com/scipy/scipy/pull/9588): MAINT: update \`constants.astronomical\_unit\` to new 2012 value.
  - [\#9592](https://github.com/scipy/scipy/pull/9592): TST: Add 32-bit testing to CI
  - [\#9593](https://github.com/scipy/scipy/pull/9593): DOC: Replace cumulative density with cumulative distribution
  - [\#9596](https://github.com/scipy/scipy/pull/9596): TST: remove VC 9.0 from Azure CI
  - [\#9599](https://github.com/scipy/scipy/pull/9599): Hyperlink DOI to preferred resolver
  - [\#9601](https://github.com/scipy/scipy/pull/9601): DEV: try to limit GC memory use on PyPy
  - [\#9603](https://github.com/scipy/scipy/pull/9603): MAINT: improve logcdf and logsf of hypergeometric distribution
  - [\#9605](https://github.com/scipy/scipy/pull/9605): Reference to pylops in LinearOperator notes and ARPACK example
  - [\#9617](https://github.com/scipy/scipy/pull/9617): TST: reduce max memory usage for sparse.linalg.lgmres test
  - [\#9619](https://github.com/scipy/scipy/pull/9619): FIX: Sparse matrix addition/subtraction eliminates explicit zeros
  - [\#9621](https://github.com/scipy/scipy/pull/9621): bugfix in rv\_sample in scipy.stats
  - [\#9622](https://github.com/scipy/scipy/pull/9622): MAINT: Raise error in directed\_hausdorff distance
  - [\#9623](https://github.com/scipy/scipy/pull/9623): DOC: Build docs with warnings as errors
  - [\#9625](https://github.com/scipy/scipy/pull/9625): Return the number of calls to 'hessp' (not just 'hess') in trust...
  - [\#9627](https://github.com/scipy/scipy/pull/9627): BUG: ignore empty lines in mmio
  - [\#9637](https://github.com/scipy/scipy/pull/9637): Function to calculate the MAD of an array
  - [\#9646](https://github.com/scipy/scipy/pull/9646): BUG: stats: mode for objects w/ndim \> 1
  - [\#9648](https://github.com/scipy/scipy/pull/9648): Add \`stats.contingency\` to refguide-check
  - [\#9650](https://github.com/scipy/scipy/pull/9650): ENH: many lobpcg() algorithm improvements
  - [\#9652](https://github.com/scipy/scipy/pull/9652): Move misc.doccer to \_lib.doccer
  - [\#9660](https://github.com/scipy/scipy/pull/9660): ENH: add pearson, tippett, and mudholkar-george to combine\_pvalues
  - [\#9661](https://github.com/scipy/scipy/pull/9661): BUG: Fix ksone right-hand endpoint, documentation and tests.
  - [\#9664](https://github.com/scipy/scipy/pull/9664): ENH: adding multi-target dijsktra performance enhancement
  - [\#9670](https://github.com/scipy/scipy/pull/9670): MAINT: link planck and geometric distribution in scipy.stats
  - [\#9676](https://github.com/scipy/scipy/pull/9676): ENH: optimize: change default linprog method to interior-point
  - [\#9685](https://github.com/scipy/scipy/pull/9685): Added reference to ndimage.filters.median\_filter
  - [\#9705](https://github.com/scipy/scipy/pull/9705): Fix coefficients in expm helper function
  - [\#9711](https://github.com/scipy/scipy/pull/9711): Release the GIL during sosfilt processing for simple types
  - [\#9721](https://github.com/scipy/scipy/pull/9721): ENH: Convexhull visiblefacets
  - [\#9723](https://github.com/scipy/scipy/pull/9723): BLD: Modify rv\_generic.\_construct\_doc to print out failing distribution...
  - [\#9726](https://github.com/scipy/scipy/pull/9726): BUG: Fix small issues with \`signal.lfilter'
  - [\#9729](https://github.com/scipy/scipy/pull/9729): BUG: Typecheck iterations for binary image operations
  - [\#9730](https://github.com/scipy/scipy/pull/9730): ENH: reduce sizeof(NI\_WatershedElement) by 20%
  - [\#9731](https://github.com/scipy/scipy/pull/9731): ENH: remove suspicious sequence of type castings
  - [\#9739](https://github.com/scipy/scipy/pull/9739): BUG: qr\_updates fails if u is exactly in span Q
  - [\#9749](https://github.com/scipy/scipy/pull/9749): BUG: MapWrapper.\_\_exit\_\_ should terminate
  - [\#9753](https://github.com/scipy/scipy/pull/9753): ENH: Added exact computation for Kolmogorov-Smirnov two-sample...
  - [\#9755](https://github.com/scipy/scipy/pull/9755): DOC: Added example for signal.impulse, copied from impulse2
  - [\#9756](https://github.com/scipy/scipy/pull/9756): DOC: Added docstring example for iirdesign
  - [\#9757](https://github.com/scipy/scipy/pull/9757): DOC: Added examples for step functions
  - [\#9759](https://github.com/scipy/scipy/pull/9759): ENH: Allow pass\_zero to act like btype
  - [\#9760](https://github.com/scipy/scipy/pull/9760): DOC: Added docstring for lp2bs
  - [\#9761](https://github.com/scipy/scipy/pull/9761): DOC: Added docstring and example for lp2bp
  - [\#9764](https://github.com/scipy/scipy/pull/9764): BUG: Catch internal warnings for matrix
  - [\#9766](https://github.com/scipy/scipy/pull/9766): ENH: Speed up \_gaussian\_kernel1d by removing dependence on np.polynomial
  - [\#9769](https://github.com/scipy/scipy/pull/9769): BUG: Fix Cubic Spline Read Only issues
  - [\#9773](https://github.com/scipy/scipy/pull/9773): DOC: Several docstrings
  - [\#9774](https://github.com/scipy/scipy/pull/9774): TST: bump Azure CI OpenBLAS version to match wheels
  - [\#9775](https://github.com/scipy/scipy/pull/9775): DOC: Improve clarity of cov\_x documentation for scipy.optimize.leastsq
  - [\#9779](https://github.com/scipy/scipy/pull/9779): ENH: dual\_annealing vectorise visit\_fn
  - [\#9788](https://github.com/scipy/scipy/pull/9788): TST, BUG: f2py-related issues with NumPy \< 1.14.0
  - [\#9791](https://github.com/scipy/scipy/pull/9791): BUG: fix amax constraint not enforced in scalar\_search\_wolfe2
  - [\#9792](https://github.com/scipy/scipy/pull/9792): ENH: Allow inplace copying in place in "detrend" function
  - [\#9795](https://github.com/scipy/scipy/pull/9795): DOC: Fix/update docstring for dstn and dst
  - [\#9796](https://github.com/scipy/scipy/pull/9796): MAINT: Allow None tolerances in least\_squares
  - [\#9798](https://github.com/scipy/scipy/pull/9798): BUG: fixes abort trap 6 error in scipy issue 9785 in unit tests
  - [\#9807](https://github.com/scipy/scipy/pull/9807): MAINT: improve doc and add alternative keyword to wilcoxon in...
  - [\#9808](https://github.com/scipy/scipy/pull/9808): Fix PPoly integrate and test for CubicSpline
  - [\#9810](https://github.com/scipy/scipy/pull/9810): ENH: Add the geometric standard deviation function
  - [\#9811](https://github.com/scipy/scipy/pull/9811): MAINT: remove invalid derphi default None value in scalar\_search\_wolfe2
  - [\#9813](https://github.com/scipy/scipy/pull/9813): Adapt hamming distance in C to support weights
  - [\#9817](https://github.com/scipy/scipy/pull/9817): DOC: Copy solver description to solver modules
  - [\#9829](https://github.com/scipy/scipy/pull/9829): ENH: Add FOH and equivalent impulse response discretizations...
  - [\#9831](https://github.com/scipy/scipy/pull/9831): ENH: Implement RotationSpline
  - [\#9834](https://github.com/scipy/scipy/pull/9834): DOC: Change mielke distribution default parameters to ensure...
  - [\#9838](https://github.com/scipy/scipy/pull/9838): ENH: Use faster solvers for firls
  - [\#9854](https://github.com/scipy/scipy/pull/9854): ENH: loadarff now supports relational attributes.
  - [\#9856](https://github.com/scipy/scipy/pull/9856): integrate.bvp - improve handling of nonlinear boundary conditions
  - [\#9862](https://github.com/scipy/scipy/pull/9862): TST: reduce Appveyor CI load
  - [\#9874](https://github.com/scipy/scipy/pull/9874): DOC: Update requirements in release notes
  - [\#9883](https://github.com/scipy/scipy/pull/9883): BUG: fixed parenthesis in spatial.rotation
  - [\#9884](https://github.com/scipy/scipy/pull/9884): ENH: Use Sparsity in Clarkson-Woodruff Sketch
  - [\#9888](https://github.com/scipy/scipy/pull/9888): MAINT: Replace NumPy aliased functions
  - [\#9892](https://github.com/scipy/scipy/pull/9892): BUG: Fix 9890 query\_ball\_point returns wrong result when p is...
  - [\#9893](https://github.com/scipy/scipy/pull/9893): BUG: curve\_fit doesn't check for empty input if called with bounds
  - [\#9894](https://github.com/scipy/scipy/pull/9894): scipy.signal.find\_peaks documentation error
  - [\#9898](https://github.com/scipy/scipy/pull/9898): BUG: Set success attribute in OptimizeResult. See \#9801
  - [\#9900](https://github.com/scipy/scipy/pull/9900): BUG: Restrict rv\_generic.\_argcheck() and its overrides from setting...
  - [\#9906](https://github.com/scipy/scipy/pull/9906): fixed a bug in kde logpdf
  - [\#9911](https://github.com/scipy/scipy/pull/9911): DOC: replace example for "np.select" with the one from numpy...
  - [\#9912](https://github.com/scipy/scipy/pull/9912): BF(DOC): point to numpy.select instead of plain (python) .select
  - [\#9914](https://github.com/scipy/scipy/pull/9914): DOC: change ValueError message in \_validate\_pad of signaltools.
  - [\#9915](https://github.com/scipy/scipy/pull/9915): cKDTree query\_ball\_point improvements
  - [\#9918](https://github.com/scipy/scipy/pull/9918): Update ckdtree.pyx with boxsize argument in docstring
  - [\#9920](https://github.com/scipy/scipy/pull/9920): BUG: sparse: Validate explicit shape if given with dense argument...
  - [\#9924](https://github.com/scipy/scipy/pull/9924): BLD: add back pyproject.toml
  - [\#9931](https://github.com/scipy/scipy/pull/9931): Fix empty constraint
  - [\#9935](https://github.com/scipy/scipy/pull/9935): DOC: fix references for stats.f\_oneway
  - [\#9936](https://github.com/scipy/scipy/pull/9936): Revert gh-9619: "FIX: Sparse matrix addition/subtraction eliminates...
  - [\#9937](https://github.com/scipy/scipy/pull/9937): MAINT: fix PEP8 issues and update to pycodestyle 2.5.0
  - [\#9939](https://github.com/scipy/scipy/pull/9939): DOC: correct \`structure\` description in \`ndimage.label\` docstring
  - [\#9940](https://github.com/scipy/scipy/pull/9940): MAINT: remove extraneous distutils copies
  - [\#9945](https://github.com/scipy/scipy/pull/9945): ENH: differential\_evolution can use Bounds object
  - [\#9949](https://github.com/scipy/scipy/pull/9949): Added 'std' to add doctstrings since it is a \`known\_stats\`...
  - [\#9953](https://github.com/scipy/scipy/pull/9953): DOC: Documentation cleanup for stats tutorials.
  - [\#9962](https://github.com/scipy/scipy/pull/9962): \_\_repr\_\_ for Bounds
  - [\#9971](https://github.com/scipy/scipy/pull/9971): ENH: Improve performance of lsmr
  - [\#9987](https://github.com/scipy/scipy/pull/9987): CI: pin Sphinx version to 1.8.5
  - [\#9990](https://github.com/scipy/scipy/pull/9990): ENH: constraint violation
  - [\#9991](https://github.com/scipy/scipy/pull/9991): BUG: Avoid inplace modification of input array in newton
  - [\#9995](https://github.com/scipy/scipy/pull/9995): MAINT: sparse.csgraph: Add cdef to stop build warning.
  - [\#9996](https://github.com/scipy/scipy/pull/9996): BUG: Make minimize\_quadratic\_1d work with infinite bounds correctly
  - [\#10004](https://github.com/scipy/scipy/pull/10004): BUG: Fix unbound local error in linprog - simplex.
  - [\#10007](https://github.com/scipy/scipy/pull/10007): BLD: fix Python 3.7 build with build isolation
  - [\#10009](https://github.com/scipy/scipy/pull/10009): BUG: Make sure that \_binary\_erosion only accepts an integer number...
  - [\#10016](https://github.com/scipy/scipy/pull/10016): Update link to airspeed-velocity
  - [\#10017](https://github.com/scipy/scipy/pull/10017): DOC: Update \`interpolate.LSQSphereBivariateSpline\` to include...
  - [\#10018](https://github.com/scipy/scipy/pull/10018): MAINT: special: Fix a few warnings that occur when compiling...
  - [\#10019](https://github.com/scipy/scipy/pull/10019): TST: Azure summarizes test failures
  - [\#10021](https://github.com/scipy/scipy/pull/10021): ENH: Introduce CubicHermiteSpline
  - [\#10022](https://github.com/scipy/scipy/pull/10022): BENCH: Increase cython version in asv to fix benchmark builds
  - [\#10023](https://github.com/scipy/scipy/pull/10023): BUG: Avoid exponnorm producing nan for small K values.
  - [\#10025](https://github.com/scipy/scipy/pull/10025): BUG: optimize: tweaked linprog status 4 error message
  - [\#10026](https://github.com/scipy/scipy/pull/10026): ENH: optimize: use SuiteSparse in linprog interior-point when...
  - [\#10027](https://github.com/scipy/scipy/pull/10027): MAINT: cluster: clean up the use of malloc() in the function...
  - [\#10028](https://github.com/scipy/scipy/pull/10028): Fix rotate invalid plane check
  - [\#10040](https://github.com/scipy/scipy/pull/10040): MAINT: fix pratt method of wilcox test in scipy.stats
  - [\#10041](https://github.com/scipy/scipy/pull/10041): MAINT: special: Fix a warning generated when building the AMOS...
  - [\#10044](https://github.com/scipy/scipy/pull/10044): DOC: fix up spatial.transform.Rotation docstrings
  - [\#10047](https://github.com/scipy/scipy/pull/10047): MAINT: interpolate: Fix a few build warnings.
  - [\#10051](https://github.com/scipy/scipy/pull/10051): Add project\_urls to setup
  - [\#10052](https://github.com/scipy/scipy/pull/10052): don't set flag to "converged" if max iter exceeded
  - [\#10054](https://github.com/scipy/scipy/pull/10054): MAINT: signal: Fix a few build warnings and modernize some C...
  - [\#10056](https://github.com/scipy/scipy/pull/10056): BUG: Ensure factorial is not too large in kendaltau
  - [\#10058](https://github.com/scipy/scipy/pull/10058): Small speedup in samping from ortho and special\_ortho groups
  - [\#10059](https://github.com/scipy/scipy/pull/10059): BUG: optimize: fix \#10038 by increasing tol
  - [\#10061](https://github.com/scipy/scipy/pull/10061): BLD: DOC: make building docs easier by parsing python version.
  - [\#10064](https://github.com/scipy/scipy/pull/10064): ENH: Significant speedup for ortho and special ortho group
  - [\#10065](https://github.com/scipy/scipy/pull/10065): DOC: Reword parameter descriptions in \`optimize.root\_scalar\`
  - [\#10066](https://github.com/scipy/scipy/pull/10066): BUG: signal: Fix error raised by savgol\_coeffs when deriv \> polyorder.
  - [\#10067](https://github.com/scipy/scipy/pull/10067): MAINT: Fix the cutoff value inconsistency for pinv2 and pinvh
  - [\#10072](https://github.com/scipy/scipy/pull/10072): BUG: stats: Fix boxcox\_llf to avoid loss of precision.
  - [\#10075](https://github.com/scipy/scipy/pull/10075): ENH: Add wrappers for ?syconv routines
  - [\#10076](https://github.com/scipy/scipy/pull/10076): BUG: optimize: fix curve\_fit for mixed float32/float64 input
  - [\#10077](https://github.com/scipy/scipy/pull/10077): DOC: Replace undefined \`k\` in \`interpolate.splev\` docstring
  - [\#10079](https://github.com/scipy/scipy/pull/10079): DOC: Fixed typo, rearranged some doc of stats.morestats.wilcoxon.
  - [\#10080](https://github.com/scipy/scipy/pull/10080): TST: install scikit-sparse for full TravisCI tests
  - [\#10083](https://github.com/scipy/scipy/pull/10083): Clean \`\`\_clean\_inputs\`\` in optimize.linprog
  - [\#10088](https://github.com/scipy/scipy/pull/10088): ENH: optimize: linprog test CHOLMOD/UMFPACK solvers when available
  - [\#10090](https://github.com/scipy/scipy/pull/10090): MAINT: Fix CubicSplinerInterpolator for pandas
  - [\#10091](https://github.com/scipy/scipy/pull/10091): MAINT: improve logcdf and logsf of hypergeometric distribution
  - [\#10095](https://github.com/scipy/scipy/pull/10095): MAINT: Clean \`\`\_clean\_inputs\`\` in linprog
  - [\#10116](https://github.com/scipy/scipy/pull/10116): MAINT: update scipy-sphinx-theme
  - [\#10135](https://github.com/scipy/scipy/pull/10135): BUG: fix linprog revised simplex docstring problem failure

---

1.3.1-notes.md

---

# SciPy 1.3.1 Release Notes

<div class="contents">

</div>

SciPy 1.3.1 is a bug-fix release with no new features compared to 1.3.0.

## Authors

  - Matt Haberland
  - Geordie McBain
  - Yu Feng
  - Evgeni Burovski
  - Sturla Molden
  - Tapasweni Pathak
  - Eric Larson
  - Peter Bell
  - Carlos Ramos Carreño +
  - Ralf Gommers
  - David Hagen
  - Antony Lee
  - Ayappan P
  - Tyler Reddy
  - Pauli Virtanen

A total of 15 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.3.1

  - [\#5040](https://github.com/scipy/scipy/issues/5040): BUG: Empty data handling of (c)KDTrees
  - [\#9901](https://github.com/scipy/scipy/issues/9901): lsoda fails to detect stiff problem when called from solve\_ivp
  - [\#10206](https://github.com/scipy/scipy/issues/10206): sparse matrices indexing with scipy 1.3
  - [\#10232](https://github.com/scipy/scipy/issues/10232): Exception in loadarff with quoted nominal attributes in scipy...
  - [\#10292](https://github.com/scipy/scipy/issues/10292): DOC/REL: Some sections of the release notes are not nested correctly.
  - [\#10303](https://github.com/scipy/scipy/issues/10303): BUG: optimize: <span class="title-ref">linprog</span> failing TestLinprogSimplexBland::test\_unbounded\_below\_no\_presolve\_corrected
  - [\#10376](https://github.com/scipy/scipy/issues/10376): TST: Travis CI fails (with pytest 5.0 ?)
  - [\#10384](https://github.com/scipy/scipy/issues/10384): CircleCI doc build failing on new warnings
  - [\#10398](https://github.com/scipy/scipy/issues/10398): Scipy 1.3.0 build broken in AIX
  - [\#10501](https://github.com/scipy/scipy/issues/10501): BUG: scipy.spatial.HalfspaceIntersection works incorrectly
  - [\#10514](https://github.com/scipy/scipy/issues/10514): BUG: cKDTree GIL handling is incorrect
  - [\#10535](https://github.com/scipy/scipy/issues/10535): TST: master branch CI failures
  - [\#10572](https://github.com/scipy/scipy/issues/10572): BUG: ckdtree query\_ball\_point errors on discontiguous input
  - [\#10597](https://github.com/scipy/scipy/issues/10597): BUG: No warning on PchipInterpolator changing from bernstein base to local power base

### Pull requests for 1.3.1

  - [\#10071](https://github.com/scipy/scipy/pull/10071): DOC: reconstruct SuperLU permutation matrices avoiding SparseEfficiencyWarning
  - [\#10196](https://github.com/scipy/scipy/pull/10196): Fewer checks on xdata for curve\_fit.
  - [\#10207](https://github.com/scipy/scipy/pull/10207): BUG: Compressed matrix indexing should return a scalar
  - [\#10233](https://github.com/scipy/scipy/pull/10233): Fix for ARFF reader regression (\#10232)
  - [\#10306](https://github.com/scipy/scipy/pull/10306): BUG: optimize: Fix for 10303
  - [\#10309](https://github.com/scipy/scipy/pull/10309): BUG: Pass jac=None directly to lsoda
  - [\#10377](https://github.com/scipy/scipy/pull/10377): TST, MAINT: adjustments for pytest 5.0
  - [\#10379](https://github.com/scipy/scipy/pull/10379): BUG: sparse: set writeability to be forward-compatible with numpy\>=1.17
  - [\#10426](https://github.com/scipy/scipy/pull/10426): MAINT: Fix doc build bugs
  - [\#10431](https://github.com/scipy/scipy/pull/10431): Update numpy version for AIX
  - [\#10457](https://github.com/scipy/scipy/pull/10457): BUG: Allow ckdtree to accept empty data input
  - [\#10503](https://github.com/scipy/scipy/pull/10503): BUG: spatial/qhull: get HalfspaceIntersection.dual\_points from the correct array
  - [\#10516](https://github.com/scipy/scipy/pull/10516): BUG: Use nogil contexts in cKDTree
  - [\#10520](https://github.com/scipy/scipy/pull/10520): DOC: Proper .rst formatting for deprecated features and Backwards incompatible changes
  - [\#10540](https://github.com/scipy/scipy/pull/10540): MAINT: Fix Travis and Circle
  - [\#10573](https://github.com/scipy/scipy/pull/10573): BUG: Fix query\_ball\_point with discontiguous input
  - [\#10600](https://github.com/scipy/scipy/pull/10600): BUG: interpolate: fix broken conversions between PPoly/BPoly objects

---

1.3.2-notes.md

---

# SciPy 1.3.2 Release Notes

<div class="contents">

</div>

SciPy 1.3.2 is a bug-fix and maintenance release that adds support for Python 3.8.

## Authors

  - CJ Carey
  - Dany Vohl
  - Martin Gauch +
  - Ralf Gommers
  - Matt Haberland
  - Eric Larson
  - Nikolay Mayorov
  - Sam McCormack +
  - Andrew Nelson
  - Tyler Reddy
  - Pauli Virtanen
  - Huize Wang +
  - Warren Weckesser
  - Joseph Weston +

A total of 14 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.3.2

  - [\#4915](https://github.com/scipy/scipy/issues/4915): Bug in unique\_roots in scipy.signal.signaltools.py for roots...
  - [\#5161](https://github.com/scipy/scipy/issues/5161): Optimizers reporting success when the minimum is NaN
  - [\#5546](https://github.com/scipy/scipy/issues/5546): ValueError raised if scipy.sparse.linalg.expm recieves array...
  - [\#10124](https://github.com/scipy/scipy/issues/10124): linprog(method='revised simplex') doctest bug
  - [\#10609](https://github.com/scipy/scipy/issues/10609): Graph shortest path with Floyd-Warshall removes explicit zeros.
  - [\#10658](https://github.com/scipy/scipy/issues/10658): BUG: stats: Formula for the variance of the noncentral F distribution...
  - [\#10695](https://github.com/scipy/scipy/issues/10695): BUG: Assignation issues in csr\_matrix with fancy indexing
  - [\#10846](https://github.com/scipy/scipy/issues/10846): root\_scalar fails when passed a function wrapped with functools.lru\_cache
  - [\#10902](https://github.com/scipy/scipy/issues/10902): CI: travis osx build failure
  - [\#10967](https://github.com/scipy/scipy/issues/10967): macOS build failure in SuperLU on maintenance/1.3.x
  - [\#10976](https://github.com/scipy/scipy/issues/10976): Typo in sp.stats.wilcoxon docstring

### Pull requests for 1.3.2

  - [\#10498](https://github.com/scipy/scipy/pull/10498): TST: optimize: fixed \`linprog\` \`"disp": True\` bug
  - [\#10536](https://github.com/scipy/scipy/pull/10536): CI: add 3.8-dev to travis
  - [\#10671](https://github.com/scipy/scipy/pull/10671): BUG: stats: Fix the formula for the variance of the noncentral...
  - [\#10693](https://github.com/scipy/scipy/pull/10693): BUG: ScalarFunction stores original array
  - [\#10700](https://github.com/scipy/scipy/pull/10700): BUG: sparse: Loosen checks on sparse fancy assignment
  - [\#10709](https://github.com/scipy/scipy/pull/10709): BUG: Fix floyd\_warshall to support zero-weight edges
  - [\#10756](https://github.com/scipy/scipy/pull/10756): BUG: optimize: ensure solvers exit with success=False for nan...
  - [\#10833](https://github.com/scipy/scipy/pull/10833): BUG: Fix subspace\_angles for complex values
  - [\#10882](https://github.com/scipy/scipy/pull/10882): BUG: sparse/arpack: fix incorrect code for complex hermitian...
  - [\#10891](https://github.com/scipy/scipy/pull/10891): BUG: make C-implemented root finders work with functools.lru\_cache
  - [\#10906](https://github.com/scipy/scipy/pull/10906): BUG: sparse/linalg: fix expm for np.matrix inputs
  - [\#10917](https://github.com/scipy/scipy/pull/10917): CI: fix travis osx CI
  - [\#10930](https://github.com/scipy/scipy/pull/10930): MAINT: Updates for 3.8
  - [\#10938](https://github.com/scipy/scipy/pull/10938): MAINT: Add Python 3.8 to pyproject.toml
  - [\#10943](https://github.com/scipy/scipy/pull/10943): BLD: update Cython version to 0.29.13
  - [\#10961](https://github.com/scipy/scipy/pull/10961): BUG: Fix signal.unique\_roots
  - [\#10971](https://github.com/scipy/scipy/pull/10971): MAINT: use 3.8 stable in CI
  - [\#10977](https://github.com/scipy/scipy/pull/10977): DOC: Fix typo in sp.stats.wilcoxon docsting
  - [\#11025](https://github.com/scipy/scipy/pull/11025): Update \_peak\_finding.py

---

1.3.3-notes.md

---

# SciPy 1.3.3 Release Notes

<div class="contents">

</div>

SciPy 1.3.3 is a bug-fix release with no new features compared to 1.3.2. In particular, a test suite issue involving multiprocessing was fixed for Windows and Python 3.8 on macOS.

Wheels were also updated to place msvcp140.dll at the appropriate location, which was previously causing issues.

## Authors

Ilhan Polat Tyler Reddy Ralf Gommers

### Issues closed for 1.3.3

  - [\#11033](https://github.com/scipy/scipy/issues/11033): deadlock on osx for python 3.8

### Pull requests for 1.3.3

  - [\#11034](https://github.com/scipy/scipy/pull/11034): MAINT: TST: Skip tests with multiprocessing that use "spawn" start method

---

1.4.0-notes.md

---

# SciPy 1.4.0 Release Notes

<div class="contents">

</div>

SciPy 1.4.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.4.x branch, and on adding new features on the master branch.

This release requires Python 3.5+ and NumPy \>=1.13.3 (for Python 3.5, 3.6), \>=1.14.5 (for Python 3.7), \>= 1.17.3 (for Python 3.8)

For running on PyPy, PyPy3 6.0+ and NumPy 1.15.0 are required.

## Highlights of this release

  - a new submodule, <span class="title-ref">scipy.fft</span>, now supersedes <span class="title-ref">scipy.fftpack</span>; this means support for `long double` transforms, faster multi-dimensional transforms, improved algorithm time complexity, release of the global interpreter lock, and control over threading behavior

  - support for `pydata/sparse` arrays in <span class="title-ref">scipy.sparse.linalg</span>

  - substantial improvement to the documentation and functionality of several <span class="title-ref">scipy.special</span> functions, and some new additions

  - the generalized inverse Gaussian distribution has been added to <span class="title-ref">scipy.stats</span>

  - an implementation of the Edmonds-Karp algorithm in <span class="title-ref">scipy.sparse.csgraph.maximum\_flow</span>

  -   - <span class="title-ref">scipy.spatial.SphericalVoronoi</span> now supports n-dimensional input,  
        has linear memory complexity, improved performance, and supports single-hemisphere generators

### New features

## Infrastructure

Documentation can now be built with `runtests.py --doc`

A `Dockerfile` is now available in the `scipy/scipy-dev` repository to facilitate getting started with SciPy development.

## <span class="title-ref">scipy.constants</span> improvements

<span class="title-ref">scipy.constants</span> has been updated with the CODATA 2018 constants.

## <span class="title-ref">scipy.fft</span> added

<span class="title-ref">scipy.fft</span> is a new submodule that supersedes the <span class="title-ref">scipy.fftpack</span> submodule. For the most part, this is a drop-in replacement for `numpy.fft` and <span class="title-ref">scipy.fftpack</span> alike. With some important differences, \`scipy.fft\`: - uses NumPy's conventions for real transforms (`rfft`). This means the return value is a complex array, half the size of the full `fft` output. This is different from the output of `fftpack` which returned a real array representing complex components packed together. - the inverse real to real transforms (`idct` and `idst`) are normalized for `norm=None` in the same way as `ifft`. This means the identity `idct(dct(x)) == x` is now `True` for all norm modes. - does not include the convolutions or pseudo-differential operators from `fftpack`.

This submodule is based on the `pypocketfft` library, developed by the author of `pocketfft` which was recently adopted by NumPy as well. `pypocketfft` offers a number of advantages over fortran `FFTPACK`: - support for long double (`np.longfloat`) precision transforms. - faster multi-dimensional transforms using vectorisation - Bluestein’s algorithm removes the worst-case `O(n^2)` complexity of `FFTPACK` - the global interpreter lock (`GIL`) is released during transforms - optional multithreading of multi-dimensional transforms via the `workers` argument

Note that <span class="title-ref">scipy.fftpack</span> has not been deprecated and will continue to be maintained but is now considered legacy. New code is recommended to use <span class="title-ref">scipy.fft</span> instead, where possible.

## <span class="title-ref">scipy.fftpack</span> improvements

<span class="title-ref">scipy.fftpack</span> now uses pypocketfft to perform its FFTs, offering the same speed and accuracy benefits listed for scipy.fft above but without the improved API.

## <span class="title-ref">scipy.integrate</span> improvements

The function <span class="title-ref">scipy.integrate.solve\_ivp</span> now has an `args` argument. This allows the user-defined functions passed to the function to have additional parameters without having to create wrapper functions or lambda expressions for them.

<span class="title-ref">scipy.integrate.solve\_ivp</span> can now return a `y_events` attribute representing the solution of the ODE at event times

New `OdeSolver` is implemented --- `DOP853`. This is a high-order explicit Runge-Kutta method originally implemented in Fortran. Now we provide a pure Python implementation usable through `solve_ivp` with all its features.

<span class="title-ref">scipy.integrate.quad</span> provides better user feedback when break points are specified with a weighted integrand.

<span class="title-ref">scipy.integrate.quad\_vec</span> is now available for general purpose integration of vector-valued functions

## <span class="title-ref">scipy.interpolate</span> improvements

<span class="title-ref">scipy.interpolate.pade</span> now handles complex input data gracefully

<span class="title-ref">scipy.interpolate.Rbf</span> can now interpolate multi-dimensional functions

## <span class="title-ref">scipy.io</span> improvements

<span class="title-ref">scipy.io.wavfile.read</span> can now read data from a <span class="title-ref">WAV</span> file that has a malformed header, similar to other modern <span class="title-ref">WAV</span> file parsers

<span class="title-ref">scipy.io.FortranFile</span> now has an expanded set of available `Exception` classes for handling poorly-formatted files

## <span class="title-ref">scipy.linalg</span> improvements

The function `scipy.linalg.subspace_angles(A, B)` now gives correct results for complex-valued matrices. Before this, the function only returned correct values for real-valued matrices.

New boolean keyword argument `check_finite` for <span class="title-ref">scipy.linalg.norm</span>; whether to check that the input matrix contains only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.

<span class="title-ref">scipy.linalg.solve\_triangular</span> has improved performance for a C-ordered triangular matrix

`LAPACK` wrappers have been added for `?geequ`, `?geequb`, `?syequb`, and `?heequb`

Some performance improvements may be observed due to an internal optimization in operations involving LAPACK routines via `_compute_lwork`. This is particularly true for operations on small arrays.

Block `QR` wrappers are now available in <span class="title-ref">scipy.linalg.lapack</span>

## <span class="title-ref">scipy.ndimage</span> improvements

## <span class="title-ref">scipy.optimize</span> improvements

It is now possible to use linear and non-linear constraints with <span class="title-ref">scipy.optimize.differential\_evolution</span>.

<span class="title-ref">scipy.optimize.linear\_sum\_assignment</span> has been re-written in C++ to improve performance, and now allows input costs to be infinite.

A `ScalarFunction.fun_and_grad` method was added for convenient simultaneous retrieval of a function and gradient evaluation

<span class="title-ref">scipy.optimize.minimize</span> `BFGS` method has improved performance by avoiding duplicate evaluations in some cases

Better user feedback is provided when an objective function returns an array instead of a scalar.

## <span class="title-ref">scipy.signal</span> improvements

Added a new function to calculate convolution using the overlap-add method, named <span class="title-ref">scipy.signal.oaconvolve</span>. Like <span class="title-ref">scipy.signal.fftconvolve</span>, this function supports specifying dimensions along which to do the convolution.

<span class="title-ref">scipy.signal.cwt</span> now supports complex wavelets.

The implementation of `choose_conv_method` has been updated to reflect the new FFT implementation. In addition, the performance has been significantly improved (with rather drastic improvements in edge cases).

The function `upfirdn` now has a `mode` keyword argument that can be used to select the signal extension mode used at the signal boundaries. These modes are also available for use in `resample_poly` via a newly added `padtype` argument.

<span class="title-ref">scipy.signal.sosfilt</span> now benefits from Cython code for improved performance

<span class="title-ref">scipy.signal.resample</span> should be more efficient by leveraging `rfft` when possible

## <span class="title-ref">scipy.sparse</span> improvements

It is now possible to use the LOBPCG method in <span class="title-ref">scipy.sparse.linalg.svds</span>.

<span class="title-ref">scipy.sparse.linalg.LinearOperator</span> now supports the operation `rmatmat` for adjoint matrix-matrix multiplication, in addition to `rmatvec`.

Multiple stability updates enable float32 support in the LOBPCG eigenvalue solver for symmetric and Hermitian eigenvalues problems in `scipy.sparse.linalg.lobpcg`.

A solver for the maximum flow problem has been added as <span class="title-ref">scipy.sparse.csgraph.maximum\_flow</span>.

<span class="title-ref">scipy.sparse.csgraph.maximum\_bipartite\_matching</span> now allows non-square inputs, no longer requires a perfect matching to exist, and has improved performance.

<span class="title-ref">scipy.sparse.lil\_matrix</span> conversions now perform better in some scenarios

Basic support is available for `pydata/sparse` arrays in <span class="title-ref">scipy.sparse.linalg</span>

<span class="title-ref">scipy.sparse.linalg.spsolve\_triangular</span> now supports the `unit_diagonal` argument to improve call signature similarity with its dense counterpart, <span class="title-ref">scipy.linalg.solve\_triangular</span>

`assertAlmostEqual` may now be used with sparse matrices, which have added support for `__round__`

## <span class="title-ref">scipy.spatial</span> improvements

The bundled Qhull library was upgraded to version 2019.1, fixing several issues. Scipy-specific patches are no longer applied to it.

<span class="title-ref">scipy.spatial.SphericalVoronoi</span> now has linear memory complexity, improved performance, and supports single-hemisphere generators. Support has also been added for handling generators that lie on a great circle arc (geodesic input) and for generators in n-dimensions.

<span class="title-ref">scipy.spatial.transform.Rotation</span> now includes functions for calculation of a mean rotation, generation of the 3D rotation groups, and reduction of rotations with rotational symmetries.

<span class="title-ref">scipy.spatial.transform.Slerp</span> is now callable with a scalar argument

<span class="title-ref">scipy.spatial.voronoi\_plot\_2d</span> now supports furthest site Voronoi diagrams

<span class="title-ref">scipy.spatial.Delaunay</span> and <span class="title-ref">scipy.spatial.Voronoi</span> now have attributes for tracking whether they are furthest site diagrams

## <span class="title-ref">scipy.special</span> improvements

The Voigt profile has been added as <span class="title-ref">scipy.special.voigt\_profile</span>.

A real dispatch has been added for the Wright Omega function (<span class="title-ref">scipy.special.wrightomega</span>).

The analytic continuation of the Riemann zeta function has been added. (The Riemann zeta function is the one-argument variant of <span class="title-ref">scipy.special.zeta</span>.)

The complete elliptic integral of the first kind (<span class="title-ref">scipy.special.ellipk</span>) is now available in <span class="title-ref">scipy.special.cython\_special</span>.

The accuracy of <span class="title-ref">scipy.special.hyp1f1</span> for real arguments has been improved.

The documentation of many functions has been improved.

## <span class="title-ref">scipy.stats</span> improvements

<span class="title-ref">scipy.stats.multiscale\_graphcorr</span> added as an independence test that operates on high dimensional and nonlinear data sets. It has higher statistical power than other <span class="title-ref">scipy.stats</span> tests while being the only one that operates on multivariate data.

The generalized inverse Gaussian distribution (<span class="title-ref">scipy.stats.geninvgauss</span>) has been added.

It is now possible to efficiently reuse <span class="title-ref">scipy.stats.binned\_statistic\_dd</span> with new values by providing the result of a previous call to the function.

<span class="title-ref">scipy.stats.hmean</span> now handles input with zeros more gracefully.

The beta-binomial distribution is now available in <span class="title-ref">scipy.stats.betabinom</span>.

<span class="title-ref">scipy.stats.zscore</span>, <span class="title-ref">scipy.stats.circmean</span>, <span class="title-ref">scipy.stats.circstd</span>, and <span class="title-ref">scipy.stats.circvar</span> now support the `nan_policy` argument for enhanced handling of `NaN` values

<span class="title-ref">scipy.stats.entropy</span> now accepts an `axis` argument

<span class="title-ref">scipy.stats.gaussian\_kde.resample</span> now accepts a `seed` argument to empower reproducibility

<span class="title-ref">scipy.stats.kendalltau</span> performance has improved, especially for large inputs, due to improved cache usage

<span class="title-ref">scipy.stats.truncnorm</span> distribution has been rewritten to support much wider tails

### Deprecated features

## <span class="title-ref">scipy</span> deprecations

Support for NumPy functions exposed via the root SciPy namespace is deprecated and will be removed in 2.0.0. For example, if you use `scipy.rand` or `scipy.diag`, you should change your code to directly use `numpy.random.default_rng` or `numpy.diag`, respectively. They remain available in the currently continuing Scipy 1.x release series.

The exception to this rule is using `scipy.fft` as a function --`scipy.fft` is now meant to be used only as a module, so the ability to call `scipy.fft(...)` will be removed in SciPy 1.5.0.

In <span class="title-ref">scipy.spatial.Rotation</span> methods `from_dcm`, `as_dcm` were renamed to `from_matrix`, `as_matrix` respectively. The old names will be removed in SciPy 1.6.0.

Method `Rotation.match_vectors` was deprecated in favor of `Rotation.align_vectors`, which provides a more logical and general API to the same functionality. The old method will be removed in SciPy 1.6.0.

### Backwards incompatible changes

## <span class="title-ref">scipy.special</span> changes

The deprecated functions `hyp2f0`, `hyp1f2`, and `hyp3f0` have been removed.

The deprecated function `bessel_diff_formula` has been removed.

The function `i0` is no longer registered with `numpy.dual`, so that `numpy.dual.i0` will unconditionally refer to the NumPy version regardless of whether <span class="title-ref">scipy.special</span> is imported.

The function `expn` has been changed to return `nan` outside of its domain of definition (`x, n < 0`) instead of `inf`.

## <span class="title-ref">scipy.sparse</span> changes

Sparse matrix reshape now raises an error if shape is not two-dimensional, rather than guessing what was meant. The behavior is now the same as before SciPy 1.1.0.

`CSR` and `CSC` sparse matrix classes should now return empty matrices of the same type when indexed out of bounds. Previously, for some versions of SciPy, this would raise an `IndexError`. The change is largely motivated by greater consistency with `ndarray` and `numpy.matrix` semantics.

## <span class="title-ref">scipy.signal</span> changes

<span class="title-ref">scipy.signal.resample</span> behavior for length-1 signal inputs has been fixed to output a constant (DC) value rather than an impulse, consistent with the assumption of signal periodicity in the FFT method.

<span class="title-ref">scipy.signal.cwt</span> now performs complex conjugation and time-reversal of wavelet data, which is a backwards-incompatible bugfix for time-asymmetric wavelets.

## <span class="title-ref">scipy.stats</span> changes

<span class="title-ref">scipy.stats.loguniform</span> added with better documentation as (an alias for `scipy.stats.reciprocal`). `loguniform` generates random variables that are equally likely in the log space; e.g., `1`, `10` and `100` are all equally likely if `loguniform(10 ** 0, 10 ** 2).rvs()` is used.

### Other changes

The `LSODA` method of <span class="title-ref">scipy.integrate.solve\_ivp</span> now correctly detects stiff problems.

<span class="title-ref">scipy.spatial.cKDTree</span> now accepts and correctly handles empty input data

<span class="title-ref">scipy.stats.binned\_statistic\_dd</span> now calculates the standard deviation statistic in a numerically stable way.

<span class="title-ref">scipy.stats.binned\_statistic\_dd</span> now throws an error if the input data contains either `np.nan` or `np.inf`. Similarly, in <span class="title-ref">scipy.stats</span> now all continuous distributions' `.fit()` methods throw an error if the input data contain any instance of either `np.nan` or `np.inf`.

### Authors

  - @endolith

  - @wenhui-prudencemed +

  - Abhinav +

  - Anne Archibald

  - ashwinpathak20nov1996 +

  - Danilo Augusto +

  - Nelson Auner +

  - aypiggott +

  - Christoph Baumgarten

  - Peter Bell

  - Sebastian Berg

  - Arman Bilge +

  - Benedikt Boecking +

  - Christoph Boeddeker +

  - Daniel Bunting

  - Evgeni Burovski

  - Angeline Burrell +

  - Angeline G. Burrell +

  - CJ Carey

  - Carlos Ramos Carreño +

  - Mak Sze Chun +

  - Malayaja Chutani +

  - Christian Clauss +

  - Jonathan Conroy +

  - Stephen P Cook +

  - Dylan Cutler +

  - Anirudh Dagar +

  - Aidan Dang +

  - dankleeman +

  - Brandon David +

  - Tyler Dawson +

  - Dieter Werthmüller

  - Joe Driscoll +

  - Jakub Dyczek +

  - Dávid Bodnár

  - Fletcher Easton +

  - Stefan Endres

  - etienne +

  - Johann Faouzi

  - Yu Feng

  - Isuru Fernando +

  - Matthew H Flamm

  - Martin Gauch +

  - Gabriel Gerlero +

  - Ralf Gommers

  - Chris Gorgolewski +

  - Domen Gorjup +

  - Edouard Goudenhoofdt +

  - Jan Gwinner +

  - Maja Gwozdz +

  - Matt Haberland

  - hadshirt +

  - Pierre Haessig +

  - David Hagen

  - Charles Harris

  - Gina Helfrich +

  - Alex Henrie +

  - Francisco J. Hernandez Heras +

  - Andreas Hilboll

  - Lindsey Hiltner

  - Thomas Hisch

  - Min ho Kim +

  - Gert-Ludwig Ingold

  - jakobjakobson13 +

  - Todd Jennings

  - He Jia

  - Muhammad Firmansyah Kasim +

  - Andrew Knyazev +

  - Holger Kohr +

  - Mateusz Konieczny +

  - Krzysztof Pióro +

  - Philipp Lang +

  - Peter Mahler Larsen +

  - Eric Larson

  - Antony Lee

  - Gregory R. Lee

  - Chelsea Liu +

  - Jesse Livezey

  - Peter Lysakovski +

  - Jason Manley +

  - Michael Marien +

  - Nikolay Mayorov

  - 7.  4.  McBain +

  - Sam McCormack +

  - Melissa Weber Mendonça +

  - Kevin Michel +

  - mikeWShef +

  - Sturla Molden

  - Eric Moore

  - Peyton Murray +

  - Andrew Nelson

  - Clement Ng +

  - Juan Nunez-Iglesias

  - Renee Otten +

  - Kellie Ottoboni +

  - Ayappan P

  - Sambit Panda +

  - Tapasweni Pathak +

  - Oleksandr Pavlyk

  - Fabian Pedregosa

  - Petar Mlinarić

  - Matti Picus

  - Marcel Plch +

  - Christoph Pohl +

  - Ilhan Polat

  - Siddhesh Poyarekar +

  - Ioannis Prapas +

  - James Alan Preiss +

  - Yisheng Qiu +

  - Eric Quintero

  - Bharat Raghunathan +

  - Tyler Reddy

  - Joscha Reimer

  - Antonio Horta Ribeiro

  - Lucas Roberts

  - rtshort +

  - Josua Sassen

  - Kevin Sheppard

  - Scott Sievert

  - Leo Singer

  - Kai Striega

  - Søren Fuglede Jørgensen

  - tborisow +

  - Étienne Tremblay +

  - tuxcell +

  - Miguel de Val-Borro

  - Andrew Valentine +

  - Hugo van Kemenade

  - Paul van Mulbregt

  - Sebastiano Vigna

  - Pauli Virtanen

  - Dany Vohl +

  - Ben Walsh +

  - Huize Wang +

  - Warren Weckesser

  - Anreas Weh +

  - Joseph Weston +

  - Adrian Wijaya +

  - Timothy Willard +

  - Josh Wilson

  - Kentaro Yamamoto +

  - Dave Zbarsky +

A total of 142 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.4.0

  - [\#1255](https://github.com/scipy/scipy/issues/1255): maxiter broken for Scipy.sparse.linalg gmres, in addition to...
  - [\#1301](https://github.com/scipy/scipy/issues/1301): consolidate multipack.h from interpolate and integrate packages...
  - [\#1739](https://github.com/scipy/scipy/issues/1739): Single precision FFT insufficiently accurate. (Trac \#1212)
  - [\#1795](https://github.com/scipy/scipy/issues/1795): stats test\_distributions.py: replace old fuzz tests (Trac \#1269)
  - [\#2233](https://github.com/scipy/scipy/issues/2233): fftpack segfault with big arrays (Trac \#1714)
  - [\#2434](https://github.com/scipy/scipy/issues/2434): rmatmat and the sophistication of linear operator objects
  - [\#2477](https://github.com/scipy/scipy/issues/2477): stats.truncnorm.rvs() does not give symmetric results for negative...
  - [\#2629](https://github.com/scipy/scipy/issues/2629): FFTpack is unacceptably slow on non power of 2
  - [\#2883](https://github.com/scipy/scipy/issues/2883): UnboundLocalError in scipy.interpolate.splrep
  - [\#2956](https://github.com/scipy/scipy/issues/2956): Feature Request: axis argument for stats.entropy function
  - [\#3528](https://github.com/scipy/scipy/issues/3528): Segfault on test\_djbfft (possibly MKL-related?)
  - [\#3793](https://github.com/scipy/scipy/issues/3793): cwt should also return complex array
  - [\#4464](https://github.com/scipy/scipy/issues/4464): TST: residue/residuez/invres/invresz don't have any tests
  - [\#4561](https://github.com/scipy/scipy/issues/4561): BUG: tf filter trailing and leading zeros in residuez
  - [\#4669](https://github.com/scipy/scipy/issues/4669): Rewrite sosfilt to make a single loop over the input?
  - [\#5040](https://github.com/scipy/scipy/issues/5040): BUG: Empty data handling of (c)KDTrees
  - [\#5112](https://github.com/scipy/scipy/issues/5112): boxcox transform edge cases could use more care
  - [\#5441](https://github.com/scipy/scipy/issues/5441): scipy.stats.ncx2 fails for nc=0
  - [\#5502](https://github.com/scipy/scipy/issues/5502): args keyword not handled in optimize.curve\_fit
  - [\#6484](https://github.com/scipy/scipy/issues/6484): Qhull segmentation fault
  - [\#6900](https://github.com/scipy/scipy/issues/6900): linear\_sum\_assignment with infinite weights
  - [\#6966](https://github.com/scipy/scipy/issues/6966): Hypergeometric Functions documentation is lacking
  - [\#6999](https://github.com/scipy/scipy/issues/6999): possible false positive corruption check in compressed loadmat()
  - [\#7018](https://github.com/scipy/scipy/issues/7018): ydata that needs broadcasting renders curve\_fit unable to compute...
  - [\#7140](https://github.com/scipy/scipy/issues/7140): trouble with documentation for windows
  - [\#7327](https://github.com/scipy/scipy/issues/7327): interpolate.ndgriddata.griddata causes Python to crash rather...
  - [\#7396](https://github.com/scipy/scipy/issues/7396): MatrixLinearOperator implements \_adjoint(), but not \_transpose()
  - [\#7400](https://github.com/scipy/scipy/issues/7400): BUG(?): special: factorial and factorial2 return a 0-dimensional...
  - [\#7434](https://github.com/scipy/scipy/issues/7434): Testing of scipy.stats continuous distributions misses 25 distributions
  - [\#7491](https://github.com/scipy/scipy/issues/7491): Several scipy.stats distributions (fisk, burr, burr12, f) return...
  - [\#7759](https://github.com/scipy/scipy/issues/7759): Overflow in stats.kruskal for large samples
  - [\#7906](https://github.com/scipy/scipy/issues/7906): Wrong result from scipy.interpolate.UnivariateSpline.integral...
  - [\#8165](https://github.com/scipy/scipy/issues/8165): ENH: match functionality of R for hmean
  - [\#8417](https://github.com/scipy/scipy/issues/8417): optimimze.minimize(method='L-BFGS-B', options={'disp': True})...
  - [\#8535](https://github.com/scipy/scipy/issues/8535): Strictly increasing requirement in UnivariateSpline
  - [\#8815](https://github.com/scipy/scipy/issues/8815): \[BUG\] GMRES: number of iteration is only increased if callback...
  - [\#9207](https://github.com/scipy/scipy/issues/9207): scipy.linalg.solve\_triangular speed after scipy.linalg.lu\_factor
  - [\#9275](https://github.com/scipy/scipy/issues/9275): new feature: adding LOBPCG solver in svds in addition to ARPACK
  - [\#9403](https://github.com/scipy/scipy/issues/9403): range of truncnorm.logpdf could be extended
  - [\#9429](https://github.com/scipy/scipy/issues/9429): gaussian\_kde not working with numpy matrix
  - [\#9515](https://github.com/scipy/scipy/issues/9515): ndimage implementation relies on undefined behavior
  - [\#9643](https://github.com/scipy/scipy/issues/9643): arpack returns singular values in ascending order
  - [\#9669](https://github.com/scipy/scipy/issues/9669): DOC: matthew-brett/build-openblas has been retired
  - [\#9852](https://github.com/scipy/scipy/issues/9852): scipy.spatial.ConvexHull exit with code 134, free(): invalid...
  - [\#9902](https://github.com/scipy/scipy/issues/9902): scipy.stats.truncnorm second moment may be wrong
  - [\#9943](https://github.com/scipy/scipy/issues/9943): Custom sampling methods in shgo do not work
  - [\#9947](https://github.com/scipy/scipy/issues/9947): DOC: Incorrect documentation for \`nan\_policy='propagate\` in...
  - [\#9994](https://github.com/scipy/scipy/issues/9994): BUG: sparse: reshape method allows a shape containing an arbitrary...
  - [\#10036](https://github.com/scipy/scipy/issues/10036): Official Nelder mead tutorial uses xtol instead of xatol, which...
  - [\#10078](https://github.com/scipy/scipy/issues/10078): possible to get a better error message when objective function...
  - [\#10092](https://github.com/scipy/scipy/issues/10092): overflow in truncnorm.rvs
  - [\#10121](https://github.com/scipy/scipy/issues/10121): A little spelling mistake
  - [\#10126](https://github.com/scipy/scipy/issues/10126): inaccurate std implementation in binned\_statistic
  - [\#10161](https://github.com/scipy/scipy/issues/10161): Error in documentation scipy.special.modstruve
  - [\#10195](https://github.com/scipy/scipy/issues/10195): Derivative of spline with 'const' extrapolation is also extrapolted...
  - [\#10206](https://github.com/scipy/scipy/issues/10206): sparse matrices indexing with scipy 1.3
  - [\#10236](https://github.com/scipy/scipy/issues/10236): Non-descriptive error on type mismatch for functions of scipy.optimize...
  - [\#10258](https://github.com/scipy/scipy/issues/10258): LOBPCG convergence failure if guess provided
  - [\#10262](https://github.com/scipy/scipy/issues/10262): distance matrix lacks dtype checks / warnings
  - [\#10271](https://github.com/scipy/scipy/issues/10271): BUG: optimize failure on wheels
  - [\#10277](https://github.com/scipy/scipy/issues/10277): scipy.special.zeta(0) = NAN
  - [\#10292](https://github.com/scipy/scipy/issues/10292): DOC/REL: Some sections of the release notes are not nested correctly.
  - [\#10300](https://github.com/scipy/scipy/issues/10300): scipy.stats.rv\_continuous.fit throws empty RuntimeError when...
  - [\#10319](https://github.com/scipy/scipy/issues/10319): events in scipy.integrate.solve\_ivp: How do I setup an events...
  - [\#10323](https://github.com/scipy/scipy/issues/10323): Adding more low-level LAPACK wrappers
  - [\#10360](https://github.com/scipy/scipy/issues/10360): firwin2 inadvertently modifies input and may result in undefined...
  - [\#10388](https://github.com/scipy/scipy/issues/10388): BLD: TestHerd::test\_hetrd core dumps with Python-dbg
  - [\#10395](https://github.com/scipy/scipy/issues/10395): Remove warning about output shape of zoom
  - [\#10403](https://github.com/scipy/scipy/issues/10403): DOC: scipy.signal.resample ignores t parameter
  - [\#10421](https://github.com/scipy/scipy/issues/10421): Yeo-Johnson power transformation fails with integer input data
  - [\#10422](https://github.com/scipy/scipy/issues/10422): BUG: scipy.fft does not support multiprocessing
  - [\#10427](https://github.com/scipy/scipy/issues/10427): ENH: convolve numbers should be updated
  - [\#10444](https://github.com/scipy/scipy/issues/10444): BUG: scipy.spatial.transform.Rotation.match\_vectors returns improper...
  - [\#10488](https://github.com/scipy/scipy/issues/10488): ENH: DCTs/DSTs for scipy.fft
  - [\#10501](https://github.com/scipy/scipy/issues/10501): BUG: scipy.spatial.HalfspaceIntersection works incorrectly
  - [\#10514](https://github.com/scipy/scipy/issues/10514): BUG: cKDTree GIL handling is incorrect
  - [\#10535](https://github.com/scipy/scipy/issues/10535): TST: master branch CI failures
  - [\#10588](https://github.com/scipy/scipy/issues/10588): scipy.fft and numpy.fft inconsistency when axes=None and shape...
  - [\#10628](https://github.com/scipy/scipy/issues/10628): Scipy python\>3.6 Windows wheels don't ship msvcp\*.dll
  - [\#10733](https://github.com/scipy/scipy/issues/10733): DOC/BUG: min\_only result does not match documentation
  - [\#10774](https://github.com/scipy/scipy/issues/10774): min\_only=true djisktra infinite loop with duplicate indices
  - [\#10775](https://github.com/scipy/scipy/issues/10775): UnboundLocalError in Radau when given a NaN
  - [\#10835](https://github.com/scipy/scipy/issues/10835): io.wavfile.read unnecessarily raises an error for a bad wav header
  - [\#10838](https://github.com/scipy/scipy/issues/10838): Error in documentation for scipy.linalg.lu\_factor
  - [\#10875](https://github.com/scipy/scipy/issues/10875): DOC: Graphical guides (using TikZ)
  - [\#10880](https://github.com/scipy/scipy/issues/10880): setting verbose \> 2 in minimize with trust-constr method leads...
  - [\#10887](https://github.com/scipy/scipy/issues/10887): scipy.signal.signaltools.\_fftconv\_faster has incorrect estimates
  - [\#10948](https://github.com/scipy/scipy/issues/10948): gammainc(0,x) = nan but should be 1, gammaincc(0,x) = nan but...
  - [\#10952](https://github.com/scipy/scipy/issues/10952): TestQRdelete\_F.test\_delete\_last\_p\_col test failure
  - [\#10968](https://github.com/scipy/scipy/issues/10968): API: Change normalized=False to normalize=True in Rotation
  - [\#10987](https://github.com/scipy/scipy/issues/10987): Memory leak in shgo triangulation
  - [\#10991](https://github.com/scipy/scipy/issues/10991): Error running openBlas probably missing a step
  - [\#11033](https://github.com/scipy/scipy/issues/11033): deadlock on osx for python 3.8
  - [\#11041](https://github.com/scipy/scipy/issues/11041): Test failure in wheel builds for TestTf2zpk.test\_simple
  - [\#11089](https://github.com/scipy/scipy/issues/11089): Regression in scipy.stats where distribution will not accept loc and scale parameters
  - [\#11100](https://github.com/scipy/scipy/issues/11100): BUG: multiscale\_graphcorr random state seeding and parallel use
  - [\#11121](https://github.com/scipy/scipy/issues/11121): Calls to <span class="title-ref">scipy.interpolate.splprep</span> increase RAM usage.
  - [\#11125](https://github.com/scipy/scipy/issues/11125): BUG: segfault when slicing a CSR or CSC sparse matrix with slice start index \> stop index
  - [\#11198](https://github.com/scipy/scipy/issues/11198): BUG: sparse eigs (arpack) shift-invert drops the smallest eigenvalue for some k

## Pull requests for 1.4.0

  - [\#4591](https://github.com/scipy/scipy/pull/4591): BUG, TST: Several issues with scipy.signal.residue
  - [\#6629](https://github.com/scipy/scipy/pull/6629): ENH: sparse: canonicalize on initialization
  - [\#7076](https://github.com/scipy/scipy/pull/7076): ENH: add complex wavelet support to scipy.signal.cwt.
  - [\#8681](https://github.com/scipy/scipy/pull/8681): ENH add generalized inverse Gaussian distribution to scipy.stats
  - [\#9064](https://github.com/scipy/scipy/pull/9064): BUG/ENH: Added default \_transpose into LinearOperator. Fixes...
  - [\#9215](https://github.com/scipy/scipy/pull/9215): ENH: Rbf interpolation of large multi-dimensional data
  - [\#9311](https://github.com/scipy/scipy/pull/9311): ENH: Added voigt in scipy.special.
  - [\#9642](https://github.com/scipy/scipy/pull/9642): ENH: integrate: quad() for vector-valued functions
  - [\#9679](https://github.com/scipy/scipy/pull/9679): DOC: expand docstring of exponweib distribution
  - [\#9684](https://github.com/scipy/scipy/pull/9684): TST: add ppc64le ci testing
  - [\#9800](https://github.com/scipy/scipy/pull/9800): WIP : ENH: Refactored \_hungarian.py for speed and added a minimize/maximize…
  - [\#9847](https://github.com/scipy/scipy/pull/9847): DOC: Change integrate tutorial to use solve\_ivp instead of odeint
  - [\#9876](https://github.com/scipy/scipy/pull/9876): ENH: Use rfft when possible in resampling
  - [\#9998](https://github.com/scipy/scipy/pull/9998): BUG: Do not remove 1s when calling sparse: reshape method \#9994
  - [\#10002](https://github.com/scipy/scipy/pull/10002): ENH: adds constraints for differential evolution
  - [\#10098](https://github.com/scipy/scipy/pull/10098): ENH: integrate: add args argument to solve\_ivp.
  - [\#10099](https://github.com/scipy/scipy/pull/10099): DOC: Add missing docs for linprog unknown\_options
  - [\#10104](https://github.com/scipy/scipy/pull/10104): BUG: Rewrite of stats.truncnorm distribution.
  - [\#10105](https://github.com/scipy/scipy/pull/10105): MAINT improve efficiency of rvs\_ratio\_uniforms in scipy.stats
  - [\#10107](https://github.com/scipy/scipy/pull/10107): TST: dual\_annealing set seed
  - [\#10108](https://github.com/scipy/scipy/pull/10108): ENH: stats: improve kendall\_tau cache usage
  - [\#10110](https://github.com/scipy/scipy/pull/10110): MAINT: \_lib: Fix a build warning.
  - [\#10114](https://github.com/scipy/scipy/pull/10114): FIX: only print bounds when supported by minimizer (shgo)
  - [\#10115](https://github.com/scipy/scipy/pull/10115): TST: Add a test with an almost singular design matrix for lsq\_linear
  - [\#10118](https://github.com/scipy/scipy/pull/10118): MAINT: fix rdist methods in scipy.stats
  - [\#10119](https://github.com/scipy/scipy/pull/10119): MAINT: improve rvs of randint in scipy.stats
  - [\#10127](https://github.com/scipy/scipy/pull/10127): Fix typo in record array field name (spatial-ckdtree-sparse\_distance…
  - [\#10130](https://github.com/scipy/scipy/pull/10130): MAINT: ndimage: Fix some compiler warnings.
  - [\#10131](https://github.com/scipy/scipy/pull/10131): DOC: Note the solve\_ivp args enhancement in the 1.4.0 release...
  - [\#10133](https://github.com/scipy/scipy/pull/10133): MAINT: add rvs for semicircular in scipy.stats
  - [\#10138](https://github.com/scipy/scipy/pull/10138): BUG: special: Invalid arguments to ellip\_harm can crash Python.
  - [\#10139](https://github.com/scipy/scipy/pull/10139): MAINT: spatial: Fix some compiler warnings in the file distance\_wrap.c.
  - [\#10140](https://github.com/scipy/scipy/pull/10140): ENH: add handling of NaN in RuntimeWarning except clause
  - [\#10142](https://github.com/scipy/scipy/pull/10142): DOC: return value of scipy.special.comb
  - [\#10143](https://github.com/scipy/scipy/pull/10143): MAINT: Loosen linprog tol
  - [\#10152](https://github.com/scipy/scipy/pull/10152): BUG: Fix custom sampling input for shgo, add unittest
  - [\#10154](https://github.com/scipy/scipy/pull/10154): MAINT: add moments and improve doc of mielke in scipy.stats
  - [\#10158](https://github.com/scipy/scipy/pull/10158): Issue \#6999: read zlib checksum before checking bytes read.
  - [\#10166](https://github.com/scipy/scipy/pull/10166): BUG: Correctly handle broadcasted ydata in curve\_fit pcov computation.
  - [\#10167](https://github.com/scipy/scipy/pull/10167): DOC: special: Add missing factor of \`i\` to \`modstruve\` docstring
  - [\#10168](https://github.com/scipy/scipy/pull/10168): MAINT: stats: Fix an incorrect comment.
  - [\#10169](https://github.com/scipy/scipy/pull/10169): ENH: optimize: Clarify error when objective function returns...
  - [\#10172](https://github.com/scipy/scipy/pull/10172): DEV: Run tests in parallel when --parallel flag is passed to...
  - [\#10173](https://github.com/scipy/scipy/pull/10173): ENH: Implement DOP853 ODE integrator
  - [\#10176](https://github.com/scipy/scipy/pull/10176): Fixed typo
  - [\#10182](https://github.com/scipy/scipy/pull/10182): TST: fix test issue for stats.pearsonr
  - [\#10184](https://github.com/scipy/scipy/pull/10184): MAINT: stats: Simplify zmap and zscore (we can use keepdims now).
  - [\#10191](https://github.com/scipy/scipy/pull/10191): DOC: fix a formatting issue in the scipy.spatial module docstring.
  - [\#10193](https://github.com/scipy/scipy/pull/10193): DOC: Updated docstring for optimize.nnls
  - [\#10198](https://github.com/scipy/scipy/pull/10198): DOC, ENH: special: Make \`hyp2f1\` references more specific
  - [\#10202](https://github.com/scipy/scipy/pull/10202): DOC: Format DST and DCT definitions as latex equations
  - [\#10207](https://github.com/scipy/scipy/pull/10207): BUG: Compressed matrix indexing should return a scalar
  - [\#10210](https://github.com/scipy/scipy/pull/10210): DOC: Update docs for connection='weak' in connected\_components
  - [\#10225](https://github.com/scipy/scipy/pull/10225): DOC: Clarify new interfaces for legacy functions in 'optimize'
  - [\#10231](https://github.com/scipy/scipy/pull/10231): DOC, MAINT: gpg2 updates to release docs / pavement
  - [\#10235](https://github.com/scipy/scipy/pull/10235): LICENSE: split license file in standard BSD 3-clause and bundled.
  - [\#10238](https://github.com/scipy/scipy/pull/10238): ENH: Add new scipy.fft module using pocketfft
  - [\#10243](https://github.com/scipy/scipy/pull/10243): BUG: fix ARFF reader regression with quoted values.
  - [\#10248](https://github.com/scipy/scipy/pull/10248): DOC: update README file
  - [\#10255](https://github.com/scipy/scipy/pull/10255): CI: bump OpenBLAS to match wheels
  - [\#10264](https://github.com/scipy/scipy/pull/10264): TST: add tests for stats.tvar with unflattened arrays
  - [\#10280](https://github.com/scipy/scipy/pull/10280): MAINT: stats: Use a constant value for sqrt(2/PI).
  - [\#10286](https://github.com/scipy/scipy/pull/10286): Development Documentation Overhaul
  - [\#10290](https://github.com/scipy/scipy/pull/10290): MAINT: Deprecate NumPy functions in SciPy root
  - [\#10291](https://github.com/scipy/scipy/pull/10291): FIX: Avoid importing xdist when checking for availability
  - [\#10295](https://github.com/scipy/scipy/pull/10295): Disable deprecated Numpy API in \_\_odrpack.c
  - [\#10296](https://github.com/scipy/scipy/pull/10296): ENH: C++ extension for linear assignment problem
  - [\#10298](https://github.com/scipy/scipy/pull/10298): ENH: Made pade function work with complex inputs
  - [\#10301](https://github.com/scipy/scipy/pull/10301): DOC: Fix critical value significance levels in stats.anderson\_ksamp
  - [\#10307](https://github.com/scipy/scipy/pull/10307): Minkowski Distance Type Fix (issue \#10262)
  - [\#10309](https://github.com/scipy/scipy/pull/10309): BUG: Pass jac=None directly to lsoda
  - [\#10310](https://github.com/scipy/scipy/pull/10310): BUG: interpolate: UnivariateSpline.derivative.ext is 'zeros'...
  - [\#10312](https://github.com/scipy/scipy/pull/10312): FIX: Fixing a typo in a comment
  - [\#10314](https://github.com/scipy/scipy/pull/10314): scipy.spatial enhancement request
  - [\#10315](https://github.com/scipy/scipy/pull/10315): DOC: Update integration tutorial to solve\_ivp
  - [\#10318](https://github.com/scipy/scipy/pull/10318): DOC: update the example for PPoly.solve
  - [\#10333](https://github.com/scipy/scipy/pull/10333): TST: add tests for stats.tvar with unflattened arrays
  - [\#10334](https://github.com/scipy/scipy/pull/10334): MAINT: special: Remove deprecated \`hyp2f0\`, \`hyp1f2\`, and...
  - [\#10336](https://github.com/scipy/scipy/pull/10336): BUG: linalg/interpolative: fix interp\_decomp modifying input
  - [\#10341](https://github.com/scipy/scipy/pull/10341): BUG: sparse.linalg/gmres: deprecate effect of callback on semantics...
  - [\#10344](https://github.com/scipy/scipy/pull/10344): DOC: improve wording of mathematical formulation
  - [\#10345](https://github.com/scipy/scipy/pull/10345): ENH: Tiled QR wrappers for scipy.linalg.lapack
  - [\#10350](https://github.com/scipy/scipy/pull/10350): MAINT: linalg: Use the new fft subpackage in linalg.dft test...
  - [\#10351](https://github.com/scipy/scipy/pull/10351): BUG: Fix unstable standard deviation calculation in histogram
  - [\#10353](https://github.com/scipy/scipy/pull/10353): Bug: interpolate.NearestNDInterpolator (issue \#10352)
  - [\#10357](https://github.com/scipy/scipy/pull/10357): DOC: linalg: Refer to scipy.fft.fft (not fftpack) in the dft...
  - [\#10359](https://github.com/scipy/scipy/pull/10359): DOC: Update roadmap now scipy.fft has been merged
  - [\#10361](https://github.com/scipy/scipy/pull/10361): ENH: Prefer scipy.fft to scipy.fftpack in scipy.signal
  - [\#10371](https://github.com/scipy/scipy/pull/10371): DOC: Tweaks to fft documentation
  - [\#10372](https://github.com/scipy/scipy/pull/10372): DOC: Fix typos
  - [\#10377](https://github.com/scipy/scipy/pull/10377): TST, MAINT: adjustments for pytest 5.0
  - [\#10378](https://github.com/scipy/scipy/pull/10378): ENH: \_lib: allow new np.random.Generator in check\_random\_state
  - [\#10379](https://github.com/scipy/scipy/pull/10379): BUG: sparse: set writeability to be forward-compatible with numpy\>=1.17
  - [\#10381](https://github.com/scipy/scipy/pull/10381): BUG: Fixes gh-7491, pdf at x=0 of fisk/burr/burr12/f distributions.
  - [\#10387](https://github.com/scipy/scipy/pull/10387): ENH: optimize/bfgs: don't evaluate twice at initial point for...
  - [\#10392](https://github.com/scipy/scipy/pull/10392): \[DOC\] Add an example for \_binned\_statistic\_dd
  - [\#10396](https://github.com/scipy/scipy/pull/10396): Remove warning about output shape of zoom
  - [\#10397](https://github.com/scipy/scipy/pull/10397): ENH: Add check\_finite to sp.linalg.norm
  - [\#10399](https://github.com/scipy/scipy/pull/10399): ENH: Add \_\_round\_\_ method to sparse matrix
  - [\#10407](https://github.com/scipy/scipy/pull/10407): MAINT: drop pybind11 from install\_requires, it's only build-time...
  - [\#10408](https://github.com/scipy/scipy/pull/10408): TST: use pytest.raises, not numpy assert\_raises
  - [\#10409](https://github.com/scipy/scipy/pull/10409): CI: uninstall nose on Travis
  - [\#10410](https://github.com/scipy/scipy/pull/10410): \[ENH\] ncx2 dispatch to chi2 when nc=0
  - [\#10411](https://github.com/scipy/scipy/pull/10411): TST: optimize: test should use assert\_allclose for fp comparisons
  - [\#10414](https://github.com/scipy/scipy/pull/10414): DOC: add pybind11 to the other part of quickstart guides
  - [\#10417](https://github.com/scipy/scipy/pull/10417): DOC: special: don't mark non-ufuncs with a \`\[+\]\`
  - [\#10423](https://github.com/scipy/scipy/pull/10423): FIX: Use pybind11::isinstace to check array dtypes
  - [\#10424](https://github.com/scipy/scipy/pull/10424): DOC: add doctest example for binary data for ttest\_ind\_from\_stats
  - [\#10425](https://github.com/scipy/scipy/pull/10425): ENH: Add missing Hermitian transforms to scipy.fft
  - [\#10426](https://github.com/scipy/scipy/pull/10426): MAINT: Fix doc build bugs
  - [\#10431](https://github.com/scipy/scipy/pull/10431): Update numpy version for AIX
  - [\#10433](https://github.com/scipy/scipy/pull/10433): MAINT: Minor fixes for the stats
  - [\#10434](https://github.com/scipy/scipy/pull/10434): BUG: special: make \`ndtri\` return NaN outside domain of definition
  - [\#10435](https://github.com/scipy/scipy/pull/10435): BUG: Allow integer input data in scipy.stats.yeojohnson
  - [\#10438](https://github.com/scipy/scipy/pull/10438): \[DOC\] Add example for kurtosis
  - [\#10440](https://github.com/scipy/scipy/pull/10440): ENH: special: make \`ellipk\` a ufunc
  - [\#10443](https://github.com/scipy/scipy/pull/10443): MAINT: ndimage: malloc fail check
  - [\#10447](https://github.com/scipy/scipy/pull/10447): BLD: Divert output from test compiles into a temporary directory
  - [\#10451](https://github.com/scipy/scipy/pull/10451): MAINT: signal: malloc fail check
  - [\#10455](https://github.com/scipy/scipy/pull/10455): BUG: special: fix values of \`hyperu\` for negative \`x\`
  - [\#10456](https://github.com/scipy/scipy/pull/10456): DOC: Added comment clarifying the call for dcsrch.f in lbfgsb.f
  - [\#10457](https://github.com/scipy/scipy/pull/10457): BUG: Allow ckdtree to accept empty data input
  - [\#10459](https://github.com/scipy/scipy/pull/10459): BUG:TST: Compute lwork safely
  - [\#10460](https://github.com/scipy/scipy/pull/10460): \[DOC\] Add example to entropy
  - [\#10461](https://github.com/scipy/scipy/pull/10461): DOC: Quickstart Guide updates
  - [\#10462](https://github.com/scipy/scipy/pull/10462): TST: special: only show max atol/rtol for test points that failed
  - [\#10465](https://github.com/scipy/scipy/pull/10465): BUG: Correctly align fft inputs
  - [\#10467](https://github.com/scipy/scipy/pull/10467): ENH: lower-memory duplicate generator checking in spatial.SphericalVoronoi
  - [\#10470](https://github.com/scipy/scipy/pull/10470): ENH: Normalise the inverse DCT/DST in scipy.fft
  - [\#10472](https://github.com/scipy/scipy/pull/10472): BENCH: adjust timeout for slow setup\_cache
  - [\#10475](https://github.com/scipy/scipy/pull/10475): CI: include python debug for Travis-ci
  - [\#10476](https://github.com/scipy/scipy/pull/10476): TST: special: use \`\_\_tracebackhide\_\_\` to get better error messages
  - [\#10477](https://github.com/scipy/scipy/pull/10477): ENH: faster region building in spatial.SphericalVoronoi
  - [\#10479](https://github.com/scipy/scipy/pull/10479): BUG: stats: Fix a few issues with the distributions' fit method.
  - [\#10480](https://github.com/scipy/scipy/pull/10480): Add RuntimeError in \_distn\_infrastructure.py in fit() method
  - [\#10481](https://github.com/scipy/scipy/pull/10481): BENCH, MAINT: wheel\_cache\_size has been renamed build\_cache\_size
  - [\#10494](https://github.com/scipy/scipy/pull/10494): ENH: faster circumcenter calculation in spatial.SphericalVoronoi
  - [\#10500](https://github.com/scipy/scipy/pull/10500): Splrep \_curfit\_cache global variable bugfix
  - [\#10503](https://github.com/scipy/scipy/pull/10503): BUG: spatial/qhull: get HalfspaceIntersection.dual\_points from...
  - [\#10506](https://github.com/scipy/scipy/pull/10506): DOC: interp2d, note nearest neighbor extrapolation
  - [\#10507](https://github.com/scipy/scipy/pull/10507): MAINT: Remove fortran fftpack library in favour of pypocketfft
  - [\#10508](https://github.com/scipy/scipy/pull/10508): TST: fix a bug in the circular import test.
  - [\#10509](https://github.com/scipy/scipy/pull/10509): MAINT: Set up \_build\_utils as subpackage
  - [\#10516](https://github.com/scipy/scipy/pull/10516): BUG: Use nogil contexts in cKDTree
  - [\#10517](https://github.com/scipy/scipy/pull/10517): ENH: fftconvolve should not FFT broadcastable axes
  - [\#10518](https://github.com/scipy/scipy/pull/10518): ENH: Speedup fftconvolve
  - [\#10520](https://github.com/scipy/scipy/pull/10520): DOC: Proper .rst formatting for deprecated features and Backwards...
  - [\#10523](https://github.com/scipy/scipy/pull/10523): DOC: Improve scipy.signal.resample documentation
  - [\#10524](https://github.com/scipy/scipy/pull/10524): ENH: Add MGC to scipy.stats
  - [\#10525](https://github.com/scipy/scipy/pull/10525): \[ENH\] ncx2.ppf dispatch to chi2 when nc=0
  - [\#10526](https://github.com/scipy/scipy/pull/10526): DOC: clarify laplacian normalization
  - [\#10528](https://github.com/scipy/scipy/pull/10528): API: Rename scipy.fft DCT/DST shape argument to s
  - [\#10531](https://github.com/scipy/scipy/pull/10531): BUG: fixed improper rotations in spatial.transform.rotation.match\_vectors
  - [\#10533](https://github.com/scipy/scipy/pull/10533): \[DOC\] Add example for winsorize function
  - [\#10539](https://github.com/scipy/scipy/pull/10539): MAINT: special: don't register \`i0\` with \`numpy.dual\`
  - [\#10540](https://github.com/scipy/scipy/pull/10540): MAINT: Fix Travis and Circle
  - [\#10542](https://github.com/scipy/scipy/pull/10542): MAINT: interpolate: use cython\_lapack
  - [\#10547](https://github.com/scipy/scipy/pull/10547): Feature request. Add furthest site Voronoi diagrams to scipy.spatial.plotutils.
  - [\#10549](https://github.com/scipy/scipy/pull/10549): \[BUG\] Fix bug in trimr when inclusive=False
  - [\#10552](https://github.com/scipy/scipy/pull/10552): add scipy.signal.upfirdn signal extension modes
  - [\#10555](https://github.com/scipy/scipy/pull/10555): MAINT: special: move \`c\_misc\` into Cephes
  - [\#10556](https://github.com/scipy/scipy/pull/10556): \[DOC\] Add example for trima
  - [\#10562](https://github.com/scipy/scipy/pull/10562): \[DOC\] Fix triple string fo trimmed so that \_\_doc\_\_ can show...
  - [\#10563](https://github.com/scipy/scipy/pull/10563): improve least\_squares error msg for mismatched shape
  - [\#10564](https://github.com/scipy/scipy/pull/10564): ENH: linalg: memoize get\_lapack/blas\_funcs to speed it up
  - [\#10566](https://github.com/scipy/scipy/pull/10566): ENH: add implementation of solver for the maximum flow problem
  - [\#10567](https://github.com/scipy/scipy/pull/10567): BUG: spatial: use c++11 construct for getting start of vector...
  - [\#10568](https://github.com/scipy/scipy/pull/10568): DOC: special: small tweaks to the \`zetac\` docstring
  - [\#10571](https://github.com/scipy/scipy/pull/10571): \[ENH\] Gaussian\_kde can accept matrix dataset
  - [\#10574](https://github.com/scipy/scipy/pull/10574): ENH: linalg: speed up \_compute\_lwork by avoiding numpy constructs
  - [\#10582](https://github.com/scipy/scipy/pull/10582): Fix typos with typos in bundled libraries reverted
  - [\#10583](https://github.com/scipy/scipy/pull/10583): ENH: special: add the analytic continuation of Riemann zeta
  - [\#10584](https://github.com/scipy/scipy/pull/10584): MAINT: special: clean up \`special.\_\_all\_\_\`
  - [\#10586](https://github.com/scipy/scipy/pull/10586): BUG: multidimensional scipy.fft functions should accept 's' rather...
  - [\#10587](https://github.com/scipy/scipy/pull/10587): BUG: integrate/lsoda: never abort run, set error istate instead
  - [\#10594](https://github.com/scipy/scipy/pull/10594): API: Replicate numpy's fftn behaviour when s is given but not...
  - [\#10599](https://github.com/scipy/scipy/pull/10599): DOC: dev: update documentation vs. github pull request workflow...
  - [\#10603](https://github.com/scipy/scipy/pull/10603): MAINT: installer scripts removed
  - [\#10604](https://github.com/scipy/scipy/pull/10604): MAINT: Change c\*np.ones(...) to np.full(..., c, ...) in many...
  - [\#10608](https://github.com/scipy/scipy/pull/10608): Univariate splines should require x to be strictly increasing...
  - [\#10613](https://github.com/scipy/scipy/pull/10613): ENH: Add seed option for gaussian\_kde.resample
  - [\#10614](https://github.com/scipy/scipy/pull/10614): ENH: Add parallel computation to scipy.fft
  - [\#10615](https://github.com/scipy/scipy/pull/10615): MAINT: interpolate: remove unused header file
  - [\#10616](https://github.com/scipy/scipy/pull/10616): MAINT: Clean up 32-bit platform xfail markers
  - [\#10618](https://github.com/scipy/scipy/pull/10618): BENCH: Added 'trust-constr' to minimize benchmarks
  - [\#10621](https://github.com/scipy/scipy/pull/10621): \[MRG\] multiple stability updates in lobpcg
  - [\#10622](https://github.com/scipy/scipy/pull/10622): MAINT: forward port 1.3.1 release notes
  - [\#10624](https://github.com/scipy/scipy/pull/10624): DOC: stats: Fix spelling of 'support'.
  - [\#10627](https://github.com/scipy/scipy/pull/10627): DOC: stats: Add references for the alpha distribution.
  - [\#10629](https://github.com/scipy/scipy/pull/10629): MAINT: special: avoid overflow longer in \`zeta\` for negative...
  - [\#10630](https://github.com/scipy/scipy/pull/10630): TST: GH10271, relax test assertion, fixes \#10271
  - [\#10631](https://github.com/scipy/scipy/pull/10631): DOC: nelder-mean uses xatol fixes \#10036
  - [\#10633](https://github.com/scipy/scipy/pull/10633): BUG: interpolate: integral(a, b) should be zero when both limits...
  - [\#10635](https://github.com/scipy/scipy/pull/10635): DOC: special: complete hypergeometric functions documentation
  - [\#10636](https://github.com/scipy/scipy/pull/10636): BUG: special: use series for \`hyp1f1\` when it converges rapidly
  - [\#10641](https://github.com/scipy/scipy/pull/10641): ENH: allow matching of general bipartite graphs
  - [\#10643](https://github.com/scipy/scipy/pull/10643): ENH: scipy.sparse.linalg.spsolve triangular unit diagonal
  - [\#10650](https://github.com/scipy/scipy/pull/10650): ENH: Cythonize sosfilt
  - [\#10654](https://github.com/scipy/scipy/pull/10654): DOC: Vertical alignment of table entries
  - [\#10655](https://github.com/scipy/scipy/pull/10655): ENH: Dockerfile for scipy development
  - [\#10660](https://github.com/scipy/scipy/pull/10660): TST: clean up tests for rvs in scipy.stats
  - [\#10664](https://github.com/scipy/scipy/pull/10664): Throw error on non-finite input for binned\_statistic\_dd()
  - [\#10665](https://github.com/scipy/scipy/pull/10665): DOC: special: improve the docstrings for \`gamma\` and \`gammasgn\`
  - [\#10669](https://github.com/scipy/scipy/pull/10669): TST: Update scipy.fft real transform tests
  - [\#10670](https://github.com/scipy/scipy/pull/10670): DOC: Clarify docs and error messages for scipy.signal.butter
  - [\#10672](https://github.com/scipy/scipy/pull/10672): ENH: return solution attribute when using events in solve\_ivp
  - [\#10675](https://github.com/scipy/scipy/pull/10675): MAINT: special: add an explicit NaN check for \`iv\` arguments
  - [\#10679](https://github.com/scipy/scipy/pull/10679): DOC: special: Add documentation for \`beta\` function
  - [\#10681](https://github.com/scipy/scipy/pull/10681): TST: sparse.linalg: fix arnoldi test seed
  - [\#10682](https://github.com/scipy/scipy/pull/10682): DOC: special: Add documentation for \`betainc\` function
  - [\#10684](https://github.com/scipy/scipy/pull/10684): TST: special: require Mpmath 1.1.0 for \`test\_hyperu\_around\_0\`
  - [\#10686](https://github.com/scipy/scipy/pull/10686): FIX: sphinx isattributedescriptor is not available in sphinx...
  - [\#10687](https://github.com/scipy/scipy/pull/10687): DOC: added Docker quickstart guide by @andyfaff
  - [\#10689](https://github.com/scipy/scipy/pull/10689): DOC: special: clarify format of parameters/returns sections for...
  - [\#10690](https://github.com/scipy/scipy/pull/10690): DOC: special: improve docstrings of incomplete gamma functions
  - [\#10692](https://github.com/scipy/scipy/pull/10692): ENH: higher-dimensional input in \`spatial.SphericalVoronoi\`
  - [\#10694](https://github.com/scipy/scipy/pull/10694): ENH: ScalarFunction.fun\_and\_grad
  - [\#10698](https://github.com/scipy/scipy/pull/10698): DOC: special: Add documentation for \`betaincinv\`
  - [\#10699](https://github.com/scipy/scipy/pull/10699): MAINT: remove time print lbfgsb fixes \#8417
  - [\#10701](https://github.com/scipy/scipy/pull/10701): TST, MAINT: bump OpenBLAS to 0.3.7 stable
  - [\#10702](https://github.com/scipy/scipy/pull/10702): DOC: clarify iterations consume multiple function calls
  - [\#10703](https://github.com/scipy/scipy/pull/10703): DOC: iprint doc lbfgsb closes \#5482
  - [\#10708](https://github.com/scipy/scipy/pull/10708): TST: test suggested in gh1758
  - [\#10710](https://github.com/scipy/scipy/pull/10710): ENH: Added nan\_policy to circ functions in \`stats\`
  - [\#10712](https://github.com/scipy/scipy/pull/10712): ENH: add axis parameter to stats.entropy
  - [\#10714](https://github.com/scipy/scipy/pull/10714): DOC: Formatting fix rv\_continuous.expect docs
  - [\#10715](https://github.com/scipy/scipy/pull/10715): DOC: BLD: update doc Makefile for python version; add scipy version...
  - [\#10717](https://github.com/scipy/scipy/pull/10717): MAINT: modernize doc/Makefile
  - [\#10719](https://github.com/scipy/scipy/pull/10719): Enable setting minres initial vector
  - [\#10720](https://github.com/scipy/scipy/pull/10720): DOC: silence random warning in doc build for \`stats.binned\_statistic\_dd\`
  - [\#10724](https://github.com/scipy/scipy/pull/10724): DEV: Add doc option to runtests.py
  - [\#10728](https://github.com/scipy/scipy/pull/10728): MAINT: get rid of gramA, gramB text files that lobpcg tests leave...
  - [\#10732](https://github.com/scipy/scipy/pull/10732): DOC: add min\_only to docstring for Dijkstra's algorithm
  - [\#10734](https://github.com/scipy/scipy/pull/10734): DOC: spell out difference between source and target in shortest...
  - [\#10735](https://github.com/scipy/scipy/pull/10735): Fix for Python 4
  - [\#10739](https://github.com/scipy/scipy/pull/10739): BUG: optimize/slsqp: deal with singular BFGS update
  - [\#10741](https://github.com/scipy/scipy/pull/10741): ENH: LAPACK wrappers for ?geequ, ?geequb, ?syequb, ?heequb
  - [\#10742](https://github.com/scipy/scipy/pull/10742): DOC: special: add to the docstring of \`gammaln\`
  - [\#10743](https://github.com/scipy/scipy/pull/10743): ENH: special: add a real dispatch for \`wrightomega\`
  - [\#10746](https://github.com/scipy/scipy/pull/10746): MAINT: Fix typos in comments, docs and test name
  - [\#10747](https://github.com/scipy/scipy/pull/10747): Remove spurious quotes
  - [\#10750](https://github.com/scipy/scipy/pull/10750): MAINT: make cython code more precise
  - [\#10751](https://github.com/scipy/scipy/pull/10751): MAINT: Check that scipy.linalg.lapack functions are documented
  - [\#10752](https://github.com/scipy/scipy/pull/10752): MAINT: special: use \`sf\_error\` in Cephes
  - [\#10755](https://github.com/scipy/scipy/pull/10755): DOC: cluster: Add 'See Also' and 'Examples' for kmeans2.
  - [\#10763](https://github.com/scipy/scipy/pull/10763): MAINT: list of minimize methods
  - [\#10768](https://github.com/scipy/scipy/pull/10768): BUG: Fix corner case for sos2zpk
  - [\#10773](https://github.com/scipy/scipy/pull/10773): Fix error type for complex input to scipy.fftpack.rfft and irfft
  - [\#10776](https://github.com/scipy/scipy/pull/10776): ENH: handle geodesic input in \`spatial.SphericalVoronoi\`
  - [\#10777](https://github.com/scipy/scipy/pull/10777): MAINT: minimizer--\>custom should handle the kinds of bounds/constrain…...
  - [\#10781](https://github.com/scipy/scipy/pull/10781): ENH: solve\_triangular C order improvement
  - [\#10787](https://github.com/scipy/scipy/pull/10787): Fix behavior of \`exp1\` on branch cut and add docstring
  - [\#10789](https://github.com/scipy/scipy/pull/10789): DOC: special: add parameters/returns doc sections for erfc/erfcx/erfi
  - [\#10790](https://github.com/scipy/scipy/pull/10790): Travis CI: sudo is deprecated and Xenial is default distro
  - [\#10792](https://github.com/scipy/scipy/pull/10792): DOC: special: add full docstring for \`expi\`
  - [\#10799](https://github.com/scipy/scipy/pull/10799): DOC: special: add a complete docstring for \`expn\`
  - [\#10800](https://github.com/scipy/scipy/pull/10800): Docs edits (GSoD)
  - [\#10802](https://github.com/scipy/scipy/pull/10802): BUG: fix UnboundLocalError in Radau (scipy\#10775)
  - [\#10804](https://github.com/scipy/scipy/pull/10804): ENH: Speed up next\_fast\_len with LRU cache
  - [\#10805](https://github.com/scipy/scipy/pull/10805): DOC: Fix unbalanced quotes in signal.place\_poles
  - [\#10809](https://github.com/scipy/scipy/pull/10809): ENH: Speed up next\_fast\_len
  - [\#10810](https://github.com/scipy/scipy/pull/10810): ENH: Raise catchable exceptions for bad Fortran files
  - [\#10811](https://github.com/scipy/scipy/pull/10811): MAINT: optimize: Remove extra variable from \_remove\_redundancy\_dense
  - [\#10813](https://github.com/scipy/scipy/pull/10813): MAINT: special: Remove unused variables from \_kolmogi and \_smirnovi
  - [\#10815](https://github.com/scipy/scipy/pull/10815): DOC, API: scipy.stats.reciprocal is "log-uniform"
  - [\#10816](https://github.com/scipy/scipy/pull/10816): MAINT: special: remove deprecated \`bessel\_diff\_formula\`
  - [\#10817](https://github.com/scipy/scipy/pull/10817): DOC: special: complete the docstring for \`fresnel\`
  - [\#10820](https://github.com/scipy/scipy/pull/10820): Fixed compiler\_helper.py to allow compilation with ICC on Linux
  - [\#10823](https://github.com/scipy/scipy/pull/10823): DOC: updated reference guide text for consistency in writing...
  - [\#10825](https://github.com/scipy/scipy/pull/10825): MAINT: special: change some features of the Voigt function
  - [\#10828](https://github.com/scipy/scipy/pull/10828): MAINT: integrate: Remove unused variable from init\_callback
  - [\#10830](https://github.com/scipy/scipy/pull/10830): Adding LOBPCG solver in svds in addition to ARPACK
  - [\#10837](https://github.com/scipy/scipy/pull/10837): WIP: ENH: reduction function for \`spatial.tranform.Rotation\`...
  - [\#10843](https://github.com/scipy/scipy/pull/10843): ENH: Adding optional parameter to stats.zscores to allow for...
  - [\#10845](https://github.com/scipy/scipy/pull/10845): Rebase kruskal fix
  - [\#10847](https://github.com/scipy/scipy/pull/10847): remove redundant \_\_getitem\_\_ from scipy.sparse.lil
  - [\#10848](https://github.com/scipy/scipy/pull/10848): Better handling of empty (not missing) docstrings
  - [\#10849](https://github.com/scipy/scipy/pull/10849): ENH: implement rmatmat for LinearOperator
  - [\#10850](https://github.com/scipy/scipy/pull/10850): MAINT : Refactoring lil List of Lists
  - [\#10851](https://github.com/scipy/scipy/pull/10851): DOC: add a generative art example to the scipy.spatial tutorial.
  - [\#10852](https://github.com/scipy/scipy/pull/10852): DOC: linalg: fixed gh-10838 unused imports in example deleted
  - [\#10854](https://github.com/scipy/scipy/pull/10854): DOC: special: add a full docstring for \`pdtr\`
  - [\#10861](https://github.com/scipy/scipy/pull/10861): ENH: option to reuse binnumbers in stats.binned\_statistic\_dd
  - [\#10863](https://github.com/scipy/scipy/pull/10863): DOC: partial standardization and validation of scipy.stats reference...
  - [\#10865](https://github.com/scipy/scipy/pull/10865): BUG: special: fix incomplete gamma functions for infinite \`a\`
  - [\#10866](https://github.com/scipy/scipy/pull/10866): ENH: calculation of mean in spatial.transform.Rotation
  - [\#10867](https://github.com/scipy/scipy/pull/10867): MAINT: Also store latex directory
  - [\#10869](https://github.com/scipy/scipy/pull/10869): ENH: Implement overlap-add convolution
  - [\#10870](https://github.com/scipy/scipy/pull/10870): ENH: Do not raise EOF error if wavfile data read
  - [\#10876](https://github.com/scipy/scipy/pull/10876): ENH: Add beta-binomial distribution to scipy.stats
  - [\#10878](https://github.com/scipy/scipy/pull/10878): MAINT: Update R project URL
  - [\#10883](https://github.com/scipy/scipy/pull/10883): MAINT: (ndimage) More robust check for output being a numpy dtype
  - [\#10884](https://github.com/scipy/scipy/pull/10884): DOC: Added instructions on adding a new distribution to scipy.stats.
  - [\#10885](https://github.com/scipy/scipy/pull/10885): \[BUG\] fix lobpcg with maxiter=None results in Exception
  - [\#10899](https://github.com/scipy/scipy/pull/10899): ENH: Match R functionality for hmean
  - [\#10900](https://github.com/scipy/scipy/pull/10900): MAINT: stats: Use keepdims to simplify a few lines in power\_divergence.
  - [\#10901](https://github.com/scipy/scipy/pull/10901): ENH: sparse/linalg: support pydata/sparse matrices
  - [\#10907](https://github.com/scipy/scipy/pull/10907): Check whether \`maxiter\` is integer
  - [\#10912](https://github.com/scipy/scipy/pull/10912): ENH: warn user that quad() ignores \`points=...\` when \`weight=...\`...
  - [\#10918](https://github.com/scipy/scipy/pull/10918): CI: fix Travis CI py3.8 build
  - [\#10920](https://github.com/scipy/scipy/pull/10920): MAINT: Update constants to codata 2018 values (second try)
  - [\#10921](https://github.com/scipy/scipy/pull/10921): ENH: scipy.sparse.lil: tocsr accelerated
  - [\#10924](https://github.com/scipy/scipy/pull/10924): BUG: Forbid passing 'args' as kwarg in scipy.optimize.curve\_fit
  - [\#10928](https://github.com/scipy/scipy/pull/10928): DOC: Add examples to io.wavfile docstrings
  - [\#10934](https://github.com/scipy/scipy/pull/10934): typo fix
  - [\#10935](https://github.com/scipy/scipy/pull/10935): BUG: Avoid undefined behaviour on float to unsigned conversion
  - [\#10936](https://github.com/scipy/scipy/pull/10936): DOC: Added missing example to stats.mstats.variation
  - [\#10939](https://github.com/scipy/scipy/pull/10939): ENH: scipy.sparse.lil: tocsr accelerated depending on density
  - [\#10946](https://github.com/scipy/scipy/pull/10946): BUG: setting verbose \> 2 in minimize with trust-constr method...
  - [\#10947](https://github.com/scipy/scipy/pull/10947): DOC: special: small improvements to the \`poch\` docstring
  - [\#10949](https://github.com/scipy/scipy/pull/10949): BUG: fix return type of erlang\_gen.\_argcheck
  - [\#10951](https://github.com/scipy/scipy/pull/10951): DOC: fixed Ricker wavelet formula
  - [\#10954](https://github.com/scipy/scipy/pull/10954): BUG: special: fix \`factorial\` return type for 0-d inputs
  - [\#10955](https://github.com/scipy/scipy/pull/10955): MAINT: Relax the assert\_unitary atol value
  - [\#10956](https://github.com/scipy/scipy/pull/10956): WIP: make pdtr(int, double) be pdtr(double, double)
  - [\#10957](https://github.com/scipy/scipy/pull/10957): BUG: Ensure full binary compatibility of long double test data
  - [\#10964](https://github.com/scipy/scipy/pull/10964): ENH: Make Slerp callable with a scalar argument
  - [\#10972](https://github.com/scipy/scipy/pull/10972): BUG: Handle complex gains in zpk2sos
  - [\#10975](https://github.com/scipy/scipy/pull/10975): TST: skip test\_kendalltau ppc64le
  - [\#10978](https://github.com/scipy/scipy/pull/10978): BUG: boxcox data dimension and constancy check \#5112
  - [\#10979](https://github.com/scipy/scipy/pull/10979): API: Rename dcm to (rotation) matrix in Rotation class
  - [\#10981](https://github.com/scipy/scipy/pull/10981): MAINT: add support for a==0 and x\>0 edge case to igam and igamc
  - [\#10986](https://github.com/scipy/scipy/pull/10986): MAINT: Remove direct imports from numpy in signaltools.py
  - [\#10988](https://github.com/scipy/scipy/pull/10988): BUG: signal: fixed issue \#10360
  - [\#10989](https://github.com/scipy/scipy/pull/10989): FIX binned\_statistic\_dd Mac wheel test fails
  - [\#10990](https://github.com/scipy/scipy/pull/10990): BUG: Fix memory leak in shgo triangulation
  - [\#10992](https://github.com/scipy/scipy/pull/10992): TST: Relax tolerance in upfirdn test\_modes
  - [\#10993](https://github.com/scipy/scipy/pull/10993): TST: bump tolerance in optimize tests
  - [\#10997](https://github.com/scipy/scipy/pull/10997): MAINT: Rework residue and residuez
  - [\#11001](https://github.com/scipy/scipy/pull/11001): DOC: Updated Windows build tutorial
  - [\#11004](https://github.com/scipy/scipy/pull/11004): BUG: integrate/quad\_vec: fix several bugs in quad\_vec
  - [\#11005](https://github.com/scipy/scipy/pull/11005): TST: add Python 3.8 Win CI
  - [\#11006](https://github.com/scipy/scipy/pull/11006): DOC: special: add a reference for \`kl\_div\`
  - [\#11012](https://github.com/scipy/scipy/pull/11012): MAINT: Rework invres and invresz
  - [\#11015](https://github.com/scipy/scipy/pull/11015): DOC: special: add references for \`rel\_entr\`
  - [\#11017](https://github.com/scipy/scipy/pull/11017): DOC: numpydoc validation of morestats.py
  - [\#11018](https://github.com/scipy/scipy/pull/11018): MAINT: Filter unrelated warning
  - [\#11031](https://github.com/scipy/scipy/pull/11031): MAINT: update choose\_conv\_method for pocketfft implementation
  - [\#11034](https://github.com/scipy/scipy/pull/11034): MAINT: TST: Skip tests with multiprocessing that use "spawn"...
  - [\#11036](https://github.com/scipy/scipy/pull/11036): DOC: update doc/README with some more useful content.
  - [\#11037](https://github.com/scipy/scipy/pull/11037): DOC: special: add a complete docstring for \`rgamma\`
  - [\#11038](https://github.com/scipy/scipy/pull/11038): DOC: special: add a reference for the polygamma function
  - [\#11042](https://github.com/scipy/scipy/pull/11042): TST: fix tf2zpk test failure due to incorrect complex sorting.
  - [\#11044](https://github.com/scipy/scipy/pull/11044): MAINT: choose\_conv\_method can choose fftconvolution for longcomplex
  - [\#11046](https://github.com/scipy/scipy/pull/11046): TST: Reduce tolerance for ppc64le with reference lapack
  - [\#11048](https://github.com/scipy/scipy/pull/11048): DOC: special: add reference for orthogonal polynomial functions
  - [\#11049](https://github.com/scipy/scipy/pull/11049): MAINT: proper random number initialization and readability fix
  - [\#11051](https://github.com/scipy/scipy/pull/11051): MAINT: pep8 cleanup
  - [\#11054](https://github.com/scipy/scipy/pull/11054): TST: bump test precision for dual\_annealing SLSQP test
  - [\#11055](https://github.com/scipy/scipy/pull/11055): DOC: special: add a reference for \`zeta\`
  - [\#11056](https://github.com/scipy/scipy/pull/11056): API: Deprecated normalized keyword in Rotation
  - [\#11065](https://github.com/scipy/scipy/pull/11065): DOC: Ubuntu Development Environment Quickstart should not modify...
  - [\#11066](https://github.com/scipy/scipy/pull/11066): BUG: skip deprecation for numpy top-level types
  - [\#11067](https://github.com/scipy/scipy/pull/11067): DOC: updated documentation for consistency in writing style
  - [\#11070](https://github.com/scipy/scipy/pull/11070): DOC: Amendment to Ubuntu Development Environment Quickstart should...
  - [\#11073](https://github.com/scipy/scipy/pull/11073): DOC: fix 1.4.0 release notes
  - [\#11081](https://github.com/scipy/scipy/pull/11081): API: Replace Rotation.match\_vectors with align\_vectors
  - [\#11083](https://github.com/scipy/scipy/pull/11083): DOC: more 1.4.0 release note fixes
  - [\#11092](https://github.com/scipy/scipy/pull/11092): BUG: stats: fix freezing of some distributions
  - [\#11096](https://github.com/scipy/scipy/pull/11096): BUG: scipy.sparse.csgraph: fixed issue \#10774
  - [\#11124](https://github.com/scipy/scipy/pull/11124): fix Cython warnings related to \_stats.pyx
  - [\#11126](https://github.com/scipy/scipy/pull/11126): BUG: interpolate/fitpack: fix memory leak in splprep
  - [\#11127](https://github.com/scipy/scipy/pull/11127): Avoid potential segfault in CSR and CSC matrix indexing
  - [\#11152](https://github.com/scipy/scipy/pull/11152): BUG: Fix random state bug multiscale\_graphcorr
  - [\#11166](https://github.com/scipy/scipy/pull/11166): BUG: empty sparse slice shapes
  - [\#11167](https://github.com/scipy/scipy/pull/11167): BUG: redundant fft in signal.resample
  - [\#11181](https://github.com/scipy/scipy/pull/11181): TST: Fix tolerance of tests for aarch64
  - [\#11182](https://github.com/scipy/scipy/pull/11182): TST: Bump up tolerance for test\_maxiter\_worsening
  - [\#11199](https://github.com/scipy/scipy/pull/11199): BUG: sparse.linalg: mistake in unsymm. real shift-invert ARPACK eigenvalue selection

---

1.4.1-notes.md

---

# SciPy 1.4.1 Release Notes

<div class="contents">

</div>

SciPy 1.4.1 is a bug-fix release with no new features compared to 1.4.0. Importantly, it aims to fix a problem where an older version of pybind11 may cause a segmentation fault when imported alongside incompatible libraries.

## Authors

  - Ralf Gommers
  - Tyler Reddy

### Issues closed for 1.4.1

  - [\#11237](https://github.com/scipy/scipy/issues/11237): Seg fault when importing torch

### Pull requests for 1.4.1

  - [\#11238](https://github.com/scipy/scipy/pull/11238): BLD: update minimum pybind11 version to 2.4.0.

---

1.5.0-notes.md

---

# SciPy 1.5.0 Release Notes

<div class="contents">

</div>

SciPy 1.5.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.5.x branch, and on adding new features on the master branch.

This release requires Python 3.6+ and NumPy 1.14.5 or greater.

For running on PyPy, PyPy3 6.0+ and NumPy 1.15.0 are required.

## Highlights of this release

  - wrappers for more than a dozen new `LAPACK` routines are now available in <span class="title-ref">scipy.linalg.lapack</span>
  - Improved support for leveraging 64-bit integer size from linear algebra backends
  - addition of the probability distribution for two-sided one-sample Kolmogorov-Smirnov tests

### New features

## <span class="title-ref">scipy.cluster</span> improvements

Initialization of <span class="title-ref">scipy.cluster.vq.kmeans2</span> using `minit="++"` had a quadratic complexity in the number of samples. It has been improved, resulting in a much faster initialization with quasi-linear complexity.

<span class="title-ref">scipy.cluster.hierarchy.dendrogram</span> now respects the `matplotlib` color palette

## <span class="title-ref">scipy.fft</span> improvements

A new keyword-only argument `plan` is added to all FFT functions in this module. It is reserved for passing in a precomputed plan from libraries providing a FFT backend (such as `PyFFTW` and `mkl-fft`), and it is currently not used in SciPy.

## <span class="title-ref">scipy.integrate</span> improvements

## <span class="title-ref">scipy.interpolate</span> improvements

## <span class="title-ref">scipy.io</span> improvements

<span class="title-ref">scipy.io.wavfile</span> error messages are more explicit about what's wrong, and extraneous bytes at the ends of files are ignored instead of raising an error when the data has successfully been read.

<span class="title-ref">scipy.io.loadmat</span> gained a `simplify_cells` parameter, which if set to `True` simplifies the structure of the return value if the `.mat` file contains cell arrays.

`pathlib.Path` objects are now supported in <span class="title-ref">scipy.io</span> Matrix Market I/O functions

## <span class="title-ref">scipy.linalg</span> improvements

<span class="title-ref">scipy.linalg.eigh</span> has been improved. Now various `LAPACK` drivers can be selected at will and also subsets of eigenvalues can be requested via `subset_by_value` keyword. Another keyword `subset_by_index` is introduced. Keywords `turbo` and `eigvals` are deprecated.

Similarly, standard and generalized Hermitian eigenvalue `LAPACK` routines `?<sy/he>evx` are added and existing ones now have full `_lwork` counterparts.

Wrappers for the following `LAPACK` routines have been added to \`scipy.linalg.lapack\`:

  -   - `?getc2`: computes the LU factorization of a general matrix with complete  
        pivoting

  - `?gesc2`: solves a linear system given an LU factorization from `?getc2`

  -   - `?gejsv`: computes the singular value decomposition of a general matrix  
        with higher accuracy calculation of tiny singular values and their corresponding singular vectors

  -   - `?geqrfp`: computes the QR factorization of a general matrix with  
        non-negative elements on the diagonal of R

  - `?gtsvx`: solves a linear system with general tridiagonal matrix

  - `?gttrf`: computes the LU factorization of a tridiagonal matrix

  - `?gttrs`: solves a linear system given an LU factorization from `?gttrf`

  -   - `?ptsvx`: solves a linear system with symmetric positive definite  
        tridiagonal matrix

  -   - `?pttrf`: computes the LU factorization of a symmetric positive definite  
        tridiagonal matrix

  - `?pttrs`: solves a linear system given an LU factorization from `?pttrf`

  -   - `?pteqr`: computes the eigenvectors and eigenvalues of a positive definite  
        tridiagonal matrix

  - `?tbtrs`: solves a linear system with a triangular banded matrix

  -   - `?csd`: computes the Cosine Sine decomposition of an orthogonal/unitary  
        matrix

Generalized QR factorization routines (`?geqrf`) now have full `_lwork` counterparts.

<span class="title-ref">scipy.linalg.cossin</span> Cosine Sine decomposition of unitary matrices has been added.

The function <span class="title-ref">scipy.linalg.khatri\_rao</span>, which computes the Khatri-Rao product, was added.

The new function <span class="title-ref">scipy.linalg.convolution\_matrix</span> constructs the Toeplitz matrix representing one-dimensional convolution.

## <span class="title-ref">scipy.ndimage</span> improvements

## <span class="title-ref">scipy.optimize</span> improvements

The finite difference numerical differentiation used in various `minimize` methods that use gradients has several new features:

  - 2-point, 3-point, or complex step finite differences can be used. Previously only a 2-step finite difference was available.
  - There is now the possibility to use a relative step size, previously only an absolute step size was available.
  - If the `minimize` method uses bounds the numerical differentiation strictly obeys those limits.
  - The numerical differentiation machinery now makes use of a simple cache, which in some cases can reduce the number of function evaluations.
  - `minimize`'s `method= 'powell'` now supports simple bound constraints

There have been several improvements to \`scipy.optimize.linprog\`:

  - The `linprog` benchmark suite has been expanded considerably.
  - `linprog`'s dense pivot-based redundancy removal routine and sparse presolve are faster
  - When `scikit-sparse` is available, solving sparse problems with `method='interior-point'` is faster

The caching of values when optimizing a function returning both value and gradient together has been improved, avoiding repeated function evaluations when using a `HessianApproximation` such as `BFGS`.

`differential_evolution` can now use the modern `np.random.Generator` as well as the legacy `np.random.RandomState` as a seed.

## <span class="title-ref">scipy.signal</span> improvements

A new optional argument `include_nyquist` is added to `freqz` functions in this module. It is used for including the last frequency (Nyquist frequency).

<span class="title-ref">scipy.signal.find\_peaks\_cwt</span> now accepts a `window_size` parameter for the size of the window used to calculate the noise floor.

## <span class="title-ref">scipy.sparse</span> improvements

Outer indexing is now faster when using a 2d column vector to select column indices.

<span class="title-ref">scipy.sparse.lil.tocsr</span> is faster

Fixed/improved comparisons between pydata sparse arrays and sparse matrices

BSR format sparse multiplication performance has been improved.

<span class="title-ref">scipy.sparse.linalg.LinearOperator</span> has gained the new `ndim` class attribute

## <span class="title-ref">scipy.spatial</span> improvements

<span class="title-ref">scipy.spatial.geometric\_slerp</span> has been added to enable geometric spherical linear interpolation on an n-sphere

<span class="title-ref">scipy.spatial.SphericalVoronoi</span> now supports calculation of region areas in 2D and 3D cases

The tree building algorithm used by `cKDTree` has improved from quadratic worst case time complexity to loglinear. Benchmarks are also now available for building and querying of balanced/unbalanced kd-trees.

## <span class="title-ref">scipy.special</span> improvements

The following functions now have Cython interfaces in \`cython\_special\`:

  - <span class="title-ref">scipy.special.erfinv</span>
  - <span class="title-ref">scipy.special.erfcinv</span>
  - <span class="title-ref">scipy.special.spherical\_jn</span>
  - <span class="title-ref">scipy.special.spherical\_yn</span>
  - <span class="title-ref">scipy.special.spherical\_in</span>
  - <span class="title-ref">scipy.special.spherical\_kn</span>

<span class="title-ref">scipy.special.log\_softmax</span> has been added to calculate the logarithm of softmax function. It provides better accuracy than `log(scipy.special.softmax(x))` for inputs that make softmax saturate.

## <span class="title-ref">scipy.stats</span> improvements

The function for generating random samples in <span class="title-ref">scipy.stats.dlaplace</span> has been improved. The new function is approximately twice as fast with a memory footprint reduction between 25 % and 60 % (see gh-11069).

<span class="title-ref">scipy.stats</span> functions that accept a seed for reproducible calculations using random number generation (e.g. random variates from distributions) can now use the modern `np.random.Generator` as well as the legacy `np.random.RandomState` as a seed.

The `axis` parameter was added to <span class="title-ref">scipy.stats.rankdata</span>. This allows slices of an array along the given axis to be ranked independently.

The `axis` parameter was added to <span class="title-ref">scipy.stats.f\_oneway</span>, allowing it to compute multiple one-way ANOVA tests for data stored in n-dimensional arrays. The performance of `f_oneway` was also improved for some cases.

The PDF and CDF methods for `stats.geninvgauss` are now significantly faster as the numerical integration to calculate the CDF uses a Cython based `LowLevelCallable`.

Moments of the normal distribution (<span class="title-ref">scipy.stats.norm</span>) are now calculated using analytical formulas instead of numerical integration for greater speed and accuracy

Moments and entropy trapezoidal distribution (`scipy.stats.trapz`) are now calculated using analytical formulas instead of numerical integration for greater speed and accuracy

Methods of the truncated normal distribution (<span class="title-ref">scipy.stats.truncnorm</span>), especially `_rvs`, are significantly faster after a complete rewrite.

The <span class="title-ref">fit</span> method of the Laplace distribution, <span class="title-ref">scipy.stats.laplace</span>, now uses the analytical formulas for the maximum likelihood estimates of the parameters.

Generation of random variates is now thread safe for all SciPy distributions. 3rd-party distributions may need to modify the signature of the `_rvs()` method to conform to `_rvs(self, ..., size=None, random_state=None)`. (A one-time VisibleDeprecationWarning is emitted when using non-conformant distributions.)

The Kolmogorov-Smirnov two-sided test statistic distribution (<span class="title-ref">scipy.stats.kstwo</span>) was added. Calculates the distribution of the K-S two-sided statistic `D_n` for a sample of size n, using a mixture of exact and asymptotic algorithms.

The new function `median_abs_deviation` replaces the deprecated `median_absolute_deviation`.

The `wilcoxon` function now computes the p-value for Wilcoxon's signed rank test using the exact distribution for inputs up to length 25. The function has a new `mode` parameter to specify how the p-value is to be computed. The default is `"auto"`, which uses the exact distribution for inputs up to length 25 and the normal approximation for larger inputs.

Added a new Cython-based implementation to evaluate gaussian kernel estimates, which should improve the performance of `gaussian_kde`

The `winsorize` function now has a `nan_policy` argument for refined handling of `nan` input values.

The `binned_statistic_dd` function with `statistic="std"` performance was improved by \~4x.

`scipy.stats.kstest(rvs, cdf,...)` now handles both one-sample and two-sample testing. The one-sample variation uses <span class="title-ref">scipy.stats.ksone</span> (or <span class="title-ref">scipy.stats.kstwo</span> with back off to <span class="title-ref">scipy.stats.kstwobign</span>) to calculate the p-value. The two-sample variation, invoked if `cdf` is array\_like, uses an algorithm described by Hodges to compute the probability directly, only backing off to <span class="title-ref">scipy.stats.kstwo</span> in case of overflow. The result in both cases is more accurate p-values, especially for two-sample testing with smaller (or quite different) sizes.

<span class="title-ref">scipy.stats.maxwell</span> performance improvements include a 20 % speed up for `fit()` and 5 % for `pdf()`

<span class="title-ref">scipy.stats.shapiro</span> and <span class="title-ref">scipy.stats.jarque\_bera</span> now return a named tuple for greater consistency with other `stats` functions

### Deprecated features

## <span class="title-ref">scipy</span> deprecations

## <span class="title-ref">scipy.special</span> changes

The `bdtr`, `bdtrc`, and `bdtri` functions are deprecating non-negative non-integral `n` arguments.

## <span class="title-ref">scipy.stats</span> changes

The function `median_absolute_deviation` is deprecated. Use `median_abs_deviation` instead.

The use of the string `"raw"` with the `scale` parameter of `iqr` is deprecated. Use `scale=1` instead.

### Backwards incompatible changes

## <span class="title-ref">scipy.interpolate</span> changes

## <span class="title-ref">scipy.linalg</span> changes

The output signatures of `?syevr`, `?heevr` have been changed from `w, v, info` to `w, v, m, isuppz, info`

The order of output arguments `w`, `v` of `<sy/he>{gv, gvd, gvx}` is swapped.

## <span class="title-ref">scipy.signal</span> changes

The output length of <span class="title-ref">scipy.signal.upfirdn</span> has been corrected, resulting outputs may now be shorter for some combinations of up/down ratios and input signal and filter lengths.

<span class="title-ref">scipy.signal.resample</span> now supports a `domain` keyword argument for specification of time or frequency domain input.

## <span class="title-ref">scipy.stats</span> changes

### Other changes

Improved support for leveraging 64-bit integer size from linear algebra backends in several parts of the SciPy codebase.

Shims designed to ensure the compatibility of SciPy with Python 2.7 have now been removed.

Many warnings due to unused imports and unused assignments have been addressed.

Many usage examples were added to function docstrings, and many input validations and intuitive exception messages have been added throughout the codebase.

Early stage adoption of type annotations in a few parts of the codebase

### Authors

  - @endolith

  - Hameer Abbasi

  - ADmitri +

  - Wesley Alves +

  - Berkay Antmen +

  - Sylwester Arabas +

  - Arne Küderle +

  - Christoph Baumgarten

  - Peter Bell

  - Felix Berkenkamp

  - Jordão Bragantini +

  - Clemens Brunner +

  - Evgeni Burovski

  - Matthias Bussonnier +

  - CJ Carey

  - Derrick Chambers +

  - Leander Claes +

  - Christian Clauss

  - Luigi F. Cruz +

  - dankleeman

  - Andras Deak

  - Milad Sadeghi DM +

  - jeremie du boisberranger +

  - Stefan Endres

  - Malte Esders +

  - Leo Fang +

  - felixhekhorn +

  - Isuru Fernando

  - Andrew Fowlie

  - Lakshay Garg +

  - Gaurav Gijare +

  - Ralf Gommers

  - Emmanuelle Gouillart +

  - Kevin Green +

  - Martin Grignard +

  - Maja Gwozdz

  - Sturla Molden

  - gyu-don +

  - Matt Haberland

  - hakeemo +

  - Charles Harris

  - Alex Henrie

  - Santi Hernandez +

  - William Hickman +

  - Till Hoffmann +

  - Joseph T. Iosue +

  - Anany Shrey Jain

  - Jakob Jakobson

  - Charles Jekel +

  - Julien Jerphanion +

  - Jiacheng-Liu +

  - Christoph Kecht +

  - Paul Kienzle +

  - Reidar Kind +

  - Dmitry E. Kislov +

  - Konrad +

  - Konrad0

  - Takuya KOUMURA +

  - Krzysztof Pióro

  - Peter Mahler Larsen

  - Eric Larson

  - Antony Lee

  - Gregory Lee +

  - Gregory R. Lee

  - Chelsea Liu

  - Cong Ma +

  - Kevin Mader +

  - Maja Gwóźdź +

  - Alex Marvin +

  - Matthias Kümmerer

  - Nikolay Mayorov

  - Mazay0 +

  - 7.  4.  McBain

  - Nicholas McKibben +

  - Sabrina J. Mielke +

  - Sebastian J. Mielke +

  - Miloš Komarčević +

  - Shubham Mishra +

  - Santiago M. Mola +

  - Grzegorz Mrukwa +

  - Peyton Murray

  - Andrew Nelson

  - Nico Schlömer

  - nwjenkins +

  - odidev +

  - Sambit Panda

  - Vikas Pandey +

  - Rick Paris +

  - Harshal Prakash Patankar +

  - Balint Pato +

  - Matti Picus

  - Ilhan Polat

  - poom +

  - Siddhesh Poyarekar

  - Vladyslav Rachek +

  - Bharat Raghunathan

  - Manu Rajput +

  - Tyler Reddy

  - Andrew Reed +

  - Lucas Roberts

  - Ariel Rokem

  - Heshy Roskes

  - Matt Ruffalo

  - Atsushi Sakai +

  - Benjamin Santos +

  - Christoph Schock +

  - Lisa Schwetlick +

  - Chris Simpson +

  - Leo Singer

  - Kai Striega

  - Søren Fuglede Jørgensen

  - Kale-ab Tessera +

  - Seth Troisi +

  - Robert Uhl +

  - Paul van Mulbregt

  - Vasiliy +

  - Isaac Virshup +

  - Pauli Virtanen

  - Shakthi Visagan +

  - Jan Vleeshouwers +

  - Sam Wallan +

  - Lijun Wang +

  - Warren Weckesser

  - Richard Weiss +

  - wenhui-prudencemed +

  - Eric Wieser

  - Josh Wilson

  - James Wright +

  - Ruslan Yevdokymov +

  - Ziyao Zhang +

A total of 129 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.5.0

  - [\#1455](https://github.com/scipy/scipy/issues/1455): ellipord does returns bogus values if gstop or gpass are negative...
  - [\#1968](https://github.com/scipy/scipy/issues/1968): correlate2d's output does not agree with correlate's output in...
  - [\#2744](https://github.com/scipy/scipy/issues/2744): BUG: optimize: '\*\*kw' argument of 'newton\_krylov' is not documented
  - [\#4755](https://github.com/scipy/scipy/issues/4755): TypeError: data type "\<i0" not understood
  - [\#4921](https://github.com/scipy/scipy/issues/4921): scipy.optimize maxiter option not working as expected
  - [\#5144](https://github.com/scipy/scipy/issues/5144): RuntimeWarning on csgraph.shortest\_path when edge lengths are...
  - [\#5309](https://github.com/scipy/scipy/issues/5309): Documentation of 'hybr' and 'lm' inconsistent in optimize.root
  - [\#6026](https://github.com/scipy/scipy/issues/6026): Replace approx\_grad with \_numdiff.approx\_derivative in scipy.optimize
  - [\#6502](https://github.com/scipy/scipy/issues/6502): Computing Eigenvalues in an Interval with LAPACK
  - [\#7058](https://github.com/scipy/scipy/issues/7058): Errors in special.bdtri and special.bdtr for non-integer k values
  - [\#7700](https://github.com/scipy/scipy/issues/7700): SuperLU does not respect perm\_c="NATURAL"
  - [\#7895](https://github.com/scipy/scipy/issues/7895): Improvements to io.loadmat
  - [\#8205](https://github.com/scipy/scipy/issues/8205): ValueError in scipy.linalg.eigvalsh for large matrix
  - [\#8278](https://github.com/scipy/scipy/issues/8278): Memory limit for scipy.sparse.linalg.spsolve with scikit-umfpack
  - [\#8327](https://github.com/scipy/scipy/issues/8327): scipy.stats.mstats.winsorize NaN handling
  - [\#8341](https://github.com/scipy/scipy/issues/8341): scipy.stats.ks\_2samp for masked and unmasked data give different...
  - [\#8748](https://github.com/scipy/scipy/issues/8748): scipy.stats.kstest for same distribution: p-values nonuniform
  - [\#9042](https://github.com/scipy/scipy/issues/9042): optimize: Incorrect statement about \`jac\` in the \`minimize\`...
  - [\#9197](https://github.com/scipy/scipy/issues/9197): problem with scipy.signal.butter with 1000+ points array
  - [\#9212](https://github.com/scipy/scipy/issues/9212): EIGH very very slow --\> suggesting an easy fix
  - [\#9553](https://github.com/scipy/scipy/issues/9553): ndimage routines behave badly when output has memory overlap...
  - [\#9632](https://github.com/scipy/scipy/issues/9632): ndimage.maximum\_filter undocumented behaviour using footprint...
  - [\#9658](https://github.com/scipy/scipy/issues/9658): \`scipy.optimize.minimize(method='COBYLA')\` not threadsafe
  - [\#9710](https://github.com/scipy/scipy/issues/9710): stats.weightedtau(\[1\], \[1.0\]) SEGFAULTs
  - [\#9797](https://github.com/scipy/scipy/issues/9797): Master Tracker for some Kolmogorov-Smirnov test Issues
  - [\#9844](https://github.com/scipy/scipy/issues/9844): scipy.signal.upfirdn gives different length matrix versus MATLAB...
  - [\#9872](https://github.com/scipy/scipy/issues/9872): scipy.signal.convolve is slower when vectorized
  - [\#9913](https://github.com/scipy/scipy/issues/9913): BUG: No dt in StateSpace operations
  - [\#10014](https://github.com/scipy/scipy/issues/10014): Distribution names \`weibull\_min\`and \`weibull\_max\` should...
  - [\#10159](https://github.com/scipy/scipy/issues/10159): BUG: stats: chisquare returns incorrect results for arrays of...
  - [\#10302](https://github.com/scipy/scipy/issues/10302): scipy.fft: Add a \`plan\` argument
  - [\#10332](https://github.com/scipy/scipy/issues/10332): 'Incomplete wav chunk' inconsistent/reason unknown
  - [\#10441](https://github.com/scipy/scipy/issues/10441): Remove uses of \`numpy.dual\`?
  - [\#10558](https://github.com/scipy/scipy/issues/10558): Document implicit sum in csr\_matrix() constructor
  - [\#10788](https://github.com/scipy/scipy/issues/10788): LU with full pivoting
  - [\#10841](https://github.com/scipy/scipy/issues/10841): Unexpected behavior in linalg.blas.dtrmm wrapper
  - [\#10919](https://github.com/scipy/scipy/issues/10919): optimize.\_lbfgsb setulb() function violates parameter bounds
  - [\#10963](https://github.com/scipy/scipy/issues/10963): kstest, ks\_2samp: confusing \`mode\` argument descriptions
  - [\#11022](https://github.com/scipy/scipy/issues/11022): Unexpected Result in factorial function with NaN input
  - [\#11028](https://github.com/scipy/scipy/issues/11028): Documentation error in optimize.minimize
  - [\#11058](https://github.com/scipy/scipy/issues/11058): Adding logsoftmax function
  - [\#11076](https://github.com/scipy/scipy/issues/11076): ValueError: Unknown wave file format
  - [\#11090](https://github.com/scipy/scipy/issues/11090): Misconception of the median absolute deviation in stats?
  - [\#11095](https://github.com/scipy/scipy/issues/11095): BUG: find\_peaks\_cwt test failures in 32-bit Linux wheels
  - [\#11107](https://github.com/scipy/scipy/issues/11107): scipy.io.mmread generated an error "TypeError: startswith first...
  - [\#11123](https://github.com/scipy/scipy/issues/11123): Add wrapper for ?gttrf/?gttrs
  - [\#11128](https://github.com/scipy/scipy/issues/11128): OverflowError in resample\_poly (upfirdn)
  - [\#11132](https://github.com/scipy/scipy/issues/11132): Possible bug: rv\_discret.ppf for percentiles 0 and 100 and loc...
  - [\#11163](https://github.com/scipy/scipy/issues/11163): Comparisons between scipy spmatrix and can sparse.SparseArray...
  - [\#11168](https://github.com/scipy/scipy/issues/11168): Generalized Pareto variance inaccurate for concentrations near...
  - [\#11169](https://github.com/scipy/scipy/issues/11169): Add wrapper for ?geqrfp
  - [\#11184](https://github.com/scipy/scipy/issues/11184): 2-sided Kolmogorov Smirnov returns p-value of 1
  - [\#11185](https://github.com/scipy/scipy/issues/11185): The .roots() or solve() function of scipy.interpolate.CubicHermiteSpline...
  - [\#11190](https://github.com/scipy/scipy/issues/11190): Add wrapper for ?tbtrs
  - [\#11200](https://github.com/scipy/scipy/issues/11200): Can no longer slice csr\_matrix in 1.3.0
  - [\#11207](https://github.com/scipy/scipy/issues/11207): \_minimize\_scalar\_bounded: reference before assignment
  - [\#11216](https://github.com/scipy/scipy/issues/11216): linprog: interior-point: Cholmod reordering can be reused
  - [\#11223](https://github.com/scipy/scipy/issues/11223): Add wrappers for ?pttrf, ?pttrs
  - [\#11224](https://github.com/scipy/scipy/issues/11224): Add wrapperfor ?pteqr
  - [\#11235](https://github.com/scipy/scipy/issues/11235): MAINT: Missleading Error Message for IIR Filter
  - [\#11244](https://github.com/scipy/scipy/issues/11244): Missing reference in \`scipy.optimize.line\_search\`
  - [\#11262](https://github.com/scipy/scipy/issues/11262): Hermitian Eigenvalue Problem eigh() API and wrapper change proposal
  - [\#11266](https://github.com/scipy/scipy/issues/11266): Sparse matrix constructor data type detection changes on Numpy...
  - [\#11270](https://github.com/scipy/scipy/issues/11270): CI failing: Travis CI Py36 refguide and Linux\_Python\_36\_32bit\_full...
  - [\#11279](https://github.com/scipy/scipy/issues/11279): linalg.eigh checks whole array for finite values
  - [\#11295](https://github.com/scipy/scipy/issues/11295): CI: azure does not auto-cancel old jobs on pushes
  - [\#11299](https://github.com/scipy/scipy/issues/11299): stats.truncnorm.rvs 100x slower in v1.4.x than v1.3.3
  - [\#11315](https://github.com/scipy/scipy/issues/11315): BUG: special: rgamma on negative integers smaller -34
  - [\#11319](https://github.com/scipy/scipy/issues/11319): Missing \`int64\_t\` declaration in rectangular\_lsap.cpp
  - [\#11323](https://github.com/scipy/scipy/issues/11323): Compilation failure due to missing symbol pthread\_atfork
  - [\#11332](https://github.com/scipy/scipy/issues/11332): BUG: directed\_hausdorff distance on sets u and v when u is a...
  - [\#11350](https://github.com/scipy/scipy/issues/11350): Khatri-Rao product
  - [\#11354](https://github.com/scipy/scipy/issues/11354): ENH: Add wrapper for ?gejsv
  - [\#11361](https://github.com/scipy/scipy/issues/11361): Dropped NaN in eval\_genlaguerre function
  - [\#11363](https://github.com/scipy/scipy/issues/11363): Dropped NaN in hyperu function
  - [\#11365](https://github.com/scipy/scipy/issues/11365): scipy.stats.binned\_statistic regressed in v1.4.0
  - [\#11369](https://github.com/scipy/scipy/issues/11369): Dropped NaN in eval\_hermite
  - [\#11370](https://github.com/scipy/scipy/issues/11370): Dropped NaN in eval\_gegenbauer
  - [\#11373](https://github.com/scipy/scipy/issues/11373): Add wrapper for ?gtsvx
  - [\#11374](https://github.com/scipy/scipy/issues/11374): Add wrapper for ?ptsvx
  - [\#11391](https://github.com/scipy/scipy/issues/11391): csgraph.minimum\_spanning\_tree loses precision
  - [\#11398](https://github.com/scipy/scipy/issues/11398): Update stats to cope with \`np.random.Generator\` machinery
  - [\#11412](https://github.com/scipy/scipy/issues/11412): Array copying causes unwanted type casting from complex to float...
  - [\#11415](https://github.com/scipy/scipy/issues/11415): Where is the Wiener Filter derived from?
  - [\#11416](https://github.com/scipy/scipy/issues/11416): \_lib.\_util.getargspec\_no\_self is missing KEYWORD\_ONLY support
  - [\#11428](https://github.com/scipy/scipy/issues/11428): Documentation on SHGO inequality constraints appears contradictory
  - [\#11429](https://github.com/scipy/scipy/issues/11429): Add LAPACK's ZUNCSD cosine sine decomposition
  - [\#11438](https://github.com/scipy/scipy/issues/11438): run\_dualannealing passes bounds incorrectly in benchmarks/optimize.py
  - [\#11441](https://github.com/scipy/scipy/issues/11441): Can't run optimize benchmarks
  - [\#11442](https://github.com/scipy/scipy/issues/11442): Chebyshev weights
  - [\#11448](https://github.com/scipy/scipy/issues/11448): Wrongly typed comparison in integrate.quad
  - [\#11458](https://github.com/scipy/scipy/issues/11458): BUG: maximum\_bipartite\_matching produces infeasible solution
  - [\#11460](https://github.com/scipy/scipy/issues/11460): CI failing: 2 Travis CI tests fail with numpy build or version...
  - [\#11462](https://github.com/scipy/scipy/issues/11462): Bug on "++" initialization on "kmeans2"
  - [\#11464](https://github.com/scipy/scipy/issues/11464): Shouldn't data type of KDE evaluation should be like in the input...
  - [\#11468](https://github.com/scipy/scipy/issues/11468): performance of binned\_statistics\_2d 100x slowdown from 1.3.2...
  - [\#11484](https://github.com/scipy/scipy/issues/11484): Callback function doesn't give the same value as the one being...
  - [\#11492](https://github.com/scipy/scipy/issues/11492): Confusing dendrogram labelling
  - [\#11493](https://github.com/scipy/scipy/issues/11493): scipy.optimize.least\_squares fails if the return array of the...
  - [\#11494](https://github.com/scipy/scipy/issues/11494): Error performing kronecker product between large sparse vectors
  - [\#11503](https://github.com/scipy/scipy/issues/11503): medfilt produces 0 on input of length 1
  - [\#11529](https://github.com/scipy/scipy/issues/11529): Pyflakes generates almost 700 warnings.
  - [\#11566](https://github.com/scipy/scipy/issues/11566): irfft/irfft2/irfftn docs are slightly confusing re: input type.
  - [\#11572](https://github.com/scipy/scipy/issues/11572): least\_squares: too small tolerances not catched with method='lm'
  - [\#11581](https://github.com/scipy/scipy/issues/11581): DOC: scipy.interpolate.RectSphereBivariateSpline
  - [\#11586](https://github.com/scipy/scipy/issues/11586): Differential evolution breaks with LinearConstraints with sparse...
  - [\#11595](https://github.com/scipy/scipy/issues/11595): scipy.spatial.cKDTree construction slow for some datasets
  - [\#11598](https://github.com/scipy/scipy/issues/11598): output of special.voigt\_profile when sigma=0
  - [\#11601](https://github.com/scipy/scipy/issues/11601): linalg tests failing in runtests.py
  - [\#11602](https://github.com/scipy/scipy/issues/11602): scipy.optimize.linear\_sum\_assignment returns reverse diagonal...
  - [\#11610](https://github.com/scipy/scipy/issues/11610): Analytic formula for normal moments
  - [\#11611](https://github.com/scipy/scipy/issues/11611): Build failure with gfortran 10
  - [\#11613](https://github.com/scipy/scipy/issues/11613): TST, MAINT: test\_quadpack TestCtypesQuad wasn't fully migrated...
  - [\#11630](https://github.com/scipy/scipy/issues/11630): SmoothBivariateSpline bbox parameter
  - [\#11635](https://github.com/scipy/scipy/issues/11635): typo in docstring of scipy.stats.norminvgauss
  - [\#11637](https://github.com/scipy/scipy/issues/11637): BUG: core dumps when calling scipy.interpolate.interp1d with...
  - [\#11638](https://github.com/scipy/scipy/issues/11638): better documentation for 'return\_all' option in minimize(Nelder...
  - [\#11652](https://github.com/scipy/scipy/issues/11652): TST, MAINT: CI failures for pre-release NumPy wheels
  - [\#11659](https://github.com/scipy/scipy/issues/11659): optimize.fmin\_l\_bfgs\_b needs bound check and appropiate error...
  - [\#11660](https://github.com/scipy/scipy/issues/11660): BUG/ENH: distribution.ncf with nc=0 returns nan
  - [\#11661](https://github.com/scipy/scipy/issues/11661): scipy.ndimage.convolve1d and correlate1d don't behave properly...
  - [\#11669](https://github.com/scipy/scipy/issues/11669): p-value varies with the order of the data
  - [\#11676](https://github.com/scipy/scipy/issues/11676): documentation of scipy.spatial.HalfspaceIntersection: wrong method...
  - [\#11685](https://github.com/scipy/scipy/issues/11685): Rotation cannot be expressed as matrix
  - [\#11686](https://github.com/scipy/scipy/issues/11686): MAINT: mypy imports of Cython "modules"
  - [\#11693](https://github.com/scipy/scipy/issues/11693): TestDifferentialEvolutionSolver::test\_L4 failing in CI
  - [\#11696](https://github.com/scipy/scipy/issues/11696): DOC: incorrect compiler information for macOS in docs
  - [\#11709](https://github.com/scipy/scipy/issues/11709): eigh() tests fail to pass, crash Python with seemingly ramdom...
  - [\#11763](https://github.com/scipy/scipy/issues/11763): Small error in gamma continuous rv fit comments
  - [\#11769](https://github.com/scipy/scipy/issues/11769): truncnorm.rvs Weird Behaviors
  - [\#11770](https://github.com/scipy/scipy/issues/11770): crash in TestEigh::test\_value\_subsets
  - [\#11795](https://github.com/scipy/scipy/issues/11795): trapz distribution mean computed using single precision
  - [\#11800](https://github.com/scipy/scipy/issues/11800): Segmentation fault in scipy.odr for multidimensional independent...
  - [\#11811](https://github.com/scipy/scipy/issues/11811): pyflakes silently failing on travis-ci
  - [\#11826](https://github.com/scipy/scipy/issues/11826): Error with \_fblas
  - [\#11827](https://github.com/scipy/scipy/issues/11827): \`fft.tests.test\_numpy.test\_multiprocess\` hangs on Python3.8...
  - [\#11835](https://github.com/scipy/scipy/issues/11835): tests with \`multiprocessing\` hang on Python 3.8 on macOS
  - [\#11839](https://github.com/scipy/scipy/issues/11839): linalg.expm returns nans with RuntimeWarning: overflow encountered...
  - [\#11856](https://github.com/scipy/scipy/issues/11856): Documentation of fit methods for \`weibull\_min\` and \`exponweib\`...
  - [\#11868](https://github.com/scipy/scipy/issues/11868): Function always evaluated twice when using HessianUpdateStrategy...
  - [\#11875](https://github.com/scipy/scipy/issues/11875): Typo in the docstring of simps()
  - [\#11877](https://github.com/scipy/scipy/issues/11877): kmeans2 '++' method is orders of magnitude slower than sklearn.cluster.KMeans()
  - [\#11884](https://github.com/scipy/scipy/issues/11884): The upper code lines are dead code
  - [\#11886](https://github.com/scipy/scipy/issues/11886): Array shape mismatch in scipy.optimize
  - [\#11892](https://github.com/scipy/scipy/issues/11892): BUG: stats: Incorrect handling of edges cases by ttest\_rel and...
  - [\#11908](https://github.com/scipy/scipy/issues/11908): LinearOperator should have ndim attribute
  - [\#11910](https://github.com/scipy/scipy/issues/11910): Documentation missing for what M is in init argument
  - [\#11922](https://github.com/scipy/scipy/issues/11922): macOS actions CI has started failing in last couple of days.
  - [\#11928](https://github.com/scipy/scipy/issues/11928): DOC: signal: Wrong description for sepfir2d, cspline2d, qspline2d
  - [\#11944](https://github.com/scipy/scipy/issues/11944): curve\_fit documentation unclear on default value of absolute\_sigma
  - [\#11945](https://github.com/scipy/scipy/issues/11945): Add a (potentially temporary) py.typed file?
  - [\#11949](https://github.com/scipy/scipy/issues/11949): ValueError 'k exceeds matrix dimensions' for sparse.diagonal()...
  - [\#11951](https://github.com/scipy/scipy/issues/11951): BUG: asv benchmark failed because of cython version
  - [\#11967](https://github.com/scipy/scipy/issues/11967): BLD: Azure windows runs complain about drives
  - [\#11973](https://github.com/scipy/scipy/issues/11973): oaconvolve(a,b,'same') differs in shape from convolve(a,b,'same')...
  - [\#12002](https://github.com/scipy/scipy/issues/12002): pybind11 license
  - [\#12003](https://github.com/scipy/scipy/issues/12003): MAINT: circular SphericalVoronoi input
  - [\#12015](https://github.com/scipy/scipy/issues/12015): Reordering of CSC matrix breaks when you go above int32 limits
  - [\#12031](https://github.com/scipy/scipy/issues/12031): Documentation Rendering Issues Visible in CircleCI Artifacts
  - [\#12037](https://github.com/scipy/scipy/issues/12037): MAINT, CI: new Cython 3.0a4 issue
  - [\#12087](https://github.com/scipy/scipy/issues/12087): DOC: some odr models are missing docs
  - [\#12119](https://github.com/scipy/scipy/issues/12119): signal.fftconvolve no longer convolves types f8 and numpy.float64
  - [\#12149](https://github.com/scipy/scipy/issues/12149): Documentation of Rosenbrock function
  - [\#12173](https://github.com/scipy/scipy/issues/12173): Large memory usage when indexing sparse matrices with \`[np.ix]()\`
  - [\#12178](https://github.com/scipy/scipy/issues/12178): BUG: stats: Some discrete distributions don't accept lists of...
  - [\#12220](https://github.com/scipy/scipy/issues/12220): BUG, REL: gh\_lists.py compromised scraping
  - [\#12239](https://github.com/scipy/scipy/issues/12239): BUG: median absolute deviation handling of nan
  - [\#12301](https://github.com/scipy/scipy/issues/12301): integer overflow in scipy.sparse.sputils.check\_shape when matrix size \> 2^32
  - [\#12314](https://github.com/scipy/scipy/issues/12314): scipy.spatial.transform.Rotation multiplication does not normalize quaternion

## Pull requests for 1.5.0

  - [\#6510](https://github.com/scipy/scipy/pull/6510): Add Eigenvalue Range Functionality for Symmetric Eigenvalue Problems
  - [\#9525](https://github.com/scipy/scipy/pull/9525): BUG: SuperLU 'NATURAL' order applies a column permutation
  - [\#9634](https://github.com/scipy/scipy/pull/9634): Add the number of Jacobian evaluations to the output of L-BFGS-B.
  - [\#9719](https://github.com/scipy/scipy/pull/9719): ENH: Added kstwo probability distribution for two-sided one-sample...
  - [\#9783](https://github.com/scipy/scipy/pull/9783): WIP: optimize: added (dense) interpolative decomposition redundancy...
  - [\#10053](https://github.com/scipy/scipy/pull/10053): Adding docstring to weibull\_min and weibull\_max based on issue...
  - [\#10136](https://github.com/scipy/scipy/pull/10136): DEP: Add warning to linprog\_verbose\_callback
  - [\#10380](https://github.com/scipy/scipy/pull/10380): ENH: add geometric\_slerp
  - [\#10602](https://github.com/scipy/scipy/pull/10602): MAINT: optimize: refactor common linprog arguments into namedtuple
  - [\#10648](https://github.com/scipy/scipy/pull/10648): Bounds for the Powell minimization method
  - [\#10673](https://github.com/scipy/scipy/pull/10673): ENH: approx\_fprime --\> approx\_derivative
  - [\#10759](https://github.com/scipy/scipy/pull/10759): ENH: calculation of region areas in spatial.SphericalVoronoi
  - [\#10762](https://github.com/scipy/scipy/pull/10762): BENCH: optimize: more comprehensive linprog benchmarking
  - [\#10796](https://github.com/scipy/scipy/pull/10796): ENH exact p-values of wilcoxon test in scipy.stats
  - [\#10797](https://github.com/scipy/scipy/pull/10797): ENH: linalg: LU with full pivoting (wrappers for ?getc2/?gesc2)
  - [\#10824](https://github.com/scipy/scipy/pull/10824): ENH: Fast gaussian kernel estimator
  - [\#10942](https://github.com/scipy/scipy/pull/10942): BUG: prevent bound violation in L-BFGS-B optimize method
  - [\#11003](https://github.com/scipy/scipy/pull/11003): ENH: add scipy.linalg.convolution\_matrix
  - [\#11023](https://github.com/scipy/scipy/pull/11023): improving error message for cubic-interpolate with duplicates
  - [\#11045](https://github.com/scipy/scipy/pull/11045): MAINT: make bdt{r,rc,ri}() functions accept double n,k args +...
  - [\#11063](https://github.com/scipy/scipy/pull/11063): Fix documentation error in optimize.minimize
  - [\#11069](https://github.com/scipy/scipy/pull/11069): ENH: stats.dlaplace.rvs improvements
  - [\#11071](https://github.com/scipy/scipy/pull/11071): DOC: Added examples to maximum\_position in ndimage
  - [\#11075](https://github.com/scipy/scipy/pull/11075): DOC: Update stylistic consistency in multiple files
  - [\#11097](https://github.com/scipy/scipy/pull/11097): BUG: stats: fixing chisquare to return correct results for arrays...
  - [\#11110](https://github.com/scipy/scipy/pull/11110): ENH: special: Cythonise erfinv, erfcinv
  - [\#11112](https://github.com/scipy/scipy/pull/11112): BUG: special: Return NaN outside the domain of \`eval\_hermite\`
  - [\#11114](https://github.com/scipy/scipy/pull/11114): BUG: special: fix \`hyp1f1\` for nonnegative integral \`a\` and...
  - [\#11115](https://github.com/scipy/scipy/pull/11115): DOC: special: add docstrings for \`kei\`, \`ker\`, \`keip\`,...
  - [\#11130](https://github.com/scipy/scipy/pull/11130): ENH: support for circular input
  - [\#11136](https://github.com/scipy/scipy/pull/11136): BUG: expm handling of empty input
  - [\#11138](https://github.com/scipy/scipy/pull/11138): DOC: stylistic consistency, punctuation, etc.
  - [\#11139](https://github.com/scipy/scipy/pull/11139): MAINT: cluster: use cython\_blas, remove handwritten BLAS wrappers
  - [\#11146](https://github.com/scipy/scipy/pull/11146): DOC: update docs on bp parameter for detrend
  - [\#11151](https://github.com/scipy/scipy/pull/11151): DOC: special: add docstrings for \`bei\`, \`ber\`, \`beip\`,...
  - [\#11156](https://github.com/scipy/scipy/pull/11156): ENH: add input validation for ellipord.
  - [\#11157](https://github.com/scipy/scipy/pull/11157): DOC: stylistic revision, punctuation, consistency
  - [\#11160](https://github.com/scipy/scipy/pull/11160): ignore warning on 0 \* inf in basin hopping
  - [\#11162](https://github.com/scipy/scipy/pull/11162): DOC: minor stylistic revision, undo changes
  - [\#11164](https://github.com/scipy/scipy/pull/11164): ENH/ BUG: Pydata sparse equality
  - [\#11171](https://github.com/scipy/scipy/pull/11171): Fix dtype validation of "seuclidean" metric V parameter
  - [\#11177](https://github.com/scipy/scipy/pull/11177): BUG: stats: Improve genpareto stats calculations.
  - [\#11180](https://github.com/scipy/scipy/pull/11180): MAINT: stats: Some clean up in test\_distributions.py.
  - [\#11187](https://github.com/scipy/scipy/pull/11187): ENH: add functionality log\_softmax to SciPy.special.
  - [\#11188](https://github.com/scipy/scipy/pull/11188): MAINT: add rvs method to argus in scipy.stats
  - [\#11196](https://github.com/scipy/scipy/pull/11196): DOC: special: add to docstrings of Kelvin zeros functions
  - [\#11202](https://github.com/scipy/scipy/pull/11202): BUG: fix edge counting in shortest\_path
  - [\#11218](https://github.com/scipy/scipy/pull/11218): BUG: scipy/interpolate: fix PPoly/Cubic\*Spline roots() extrapolation...
  - [\#11225](https://github.com/scipy/scipy/pull/11225): Add a warning to constant input for spearmanr() function
  - [\#11226](https://github.com/scipy/scipy/pull/11226): Speed up of interior-point method for cholesky solver
  - [\#11229](https://github.com/scipy/scipy/pull/11229): BUG: Explicit dtype specification in \_upfirdn.py
  - [\#11230](https://github.com/scipy/scipy/pull/11230): Additional citation for optimize tutorial
  - [\#11231](https://github.com/scipy/scipy/pull/11231): Adds SLSQP test for duplicate f-evals (\#10738)
  - [\#11236](https://github.com/scipy/scipy/pull/11236): MAINT: Improved error message for Wn range in iirfilter.
  - [\#11245](https://github.com/scipy/scipy/pull/11245): ENH: optimize: dense redundancy removal routine optimizations
  - [\#11247](https://github.com/scipy/scipy/pull/11247): MAINT: Remove \_lib/\_numpy\_compat.py
  - [\#11248](https://github.com/scipy/scipy/pull/11248): BUG: rv\_discrete.ppf() to handle loc
  - [\#11251](https://github.com/scipy/scipy/pull/11251): DOC: add reference for linesearch zoom algorithm
  - [\#11253](https://github.com/scipy/scipy/pull/11253): BUG: fix kendalltau issue where p-value becomes \>1
  - [\#11254](https://github.com/scipy/scipy/pull/11254): MAINT: make special.factorial handle nan correctly
  - [\#11256](https://github.com/scipy/scipy/pull/11256): DOC: Updated documentation for scipy.linalg.qr
  - [\#11265](https://github.com/scipy/scipy/pull/11265): Fix: Can no longer slice csr\_matrix in 1.3.0
  - [\#11267](https://github.com/scipy/scipy/pull/11267): BUG: Rework the scaling in the ks\_2samp two-sided exact test.
  - [\#11268](https://github.com/scipy/scipy/pull/11268): DOC: example of NonLinearConstraint
  - [\#11269](https://github.com/scipy/scipy/pull/11269): Fix: Sparse matrix constructor data type detection changes on...
  - [\#11276](https://github.com/scipy/scipy/pull/11276): BLD: update minimum Python, NumPy, Cython, Pybind11 versions
  - [\#11277](https://github.com/scipy/scipy/pull/11277): MAINT: Cleanup conditionals for unsupported numpy verisons
  - [\#11278](https://github.com/scipy/scipy/pull/11278): MAINT: Cleanup stats.iqr workarounds for unsupported NumPy versions
  - [\#11282](https://github.com/scipy/scipy/pull/11282): TST/CI: improve traceback formatting for test failures
  - [\#11284](https://github.com/scipy/scipy/pull/11284): fix docs & behavior for mode sequences in ndimage filters
  - [\#11285](https://github.com/scipy/scipy/pull/11285): DOC: special: complete the docstrings of Chi-square functions
  - [\#11286](https://github.com/scipy/scipy/pull/11286): BUG: make loadmat/savemat file opening close resources correctly
  - [\#11287](https://github.com/scipy/scipy/pull/11287): CI: skip Azure and TravisCI builds on merges and direct pushes...
  - [\#11288](https://github.com/scipy/scipy/pull/11288): DOC: Fix import in scipy.io.wavfile.read sample code
  - [\#11289](https://github.com/scipy/scipy/pull/11289): BUG: Use context manager for open
  - [\#11290](https://github.com/scipy/scipy/pull/11290): MAINT: Remove \_lib.\_version in favour of \_lib.\_pep440
  - [\#11292](https://github.com/scipy/scipy/pull/11292): DOC: special: add docstrings for various convenience functions
  - [\#11293](https://github.com/scipy/scipy/pull/11293): DOC: special: fix typo in \`chdtri\` docstring
  - [\#11296](https://github.com/scipy/scipy/pull/11296): DOC: special: add to docstrings of Bessel zeros and derivatives
  - [\#11297](https://github.com/scipy/scipy/pull/11297): DOC: special: add parameters/returns sections for Bessel integrals
  - [\#11300](https://github.com/scipy/scipy/pull/11300): MAINT: Update vendored uarray version
  - [\#11301](https://github.com/scipy/scipy/pull/11301): CI: azure conditions should require succeeded()
  - [\#11302](https://github.com/scipy/scipy/pull/11302): ENH: build infrastructure for ILP64 BLAS + ARPACK conversion
  - [\#11303](https://github.com/scipy/scipy/pull/11303): DOC: special: fix typo in \`besselpoly\` docstring
  - [\#11304](https://github.com/scipy/scipy/pull/11304): ENH: MAINT: Rewrite of eigh() and relevant wrappers
  - [\#11306](https://github.com/scipy/scipy/pull/11306): TST: skip test\_aligned\_mem linalg test that is crashing on ppcle64
  - [\#11307](https://github.com/scipy/scipy/pull/11307): MAINT: Fix typo 'solutuion' -\> 'solution'
  - [\#11308](https://github.com/scipy/scipy/pull/11308): ENH: do not create 1d array out of a scalar
  - [\#11310](https://github.com/scipy/scipy/pull/11310): MAINT: clean up object array creation, scalar/1d confusion
  - [\#11311](https://github.com/scipy/scipy/pull/11311): DOC: Specify custom callable option for metric in cluster.hierarchy.fclusterdata
  - [\#11316](https://github.com/scipy/scipy/pull/11316): BUG: special: fix behavior for \`rgamma\` zeros
  - [\#11317](https://github.com/scipy/scipy/pull/11317): BUG: fix floating-point literal comparisons under C99
  - [\#11318](https://github.com/scipy/scipy/pull/11318): TST: optimize: mark two linprog tests for skipping
  - [\#11320](https://github.com/scipy/scipy/pull/11320): BUG: Include \`int64\_t\` declaration to \`rectangular\_lsap.cpp\`
  - [\#11330](https://github.com/scipy/scipy/pull/11330): MAINT: Update vendored pypocketfft version
  - [\#11333](https://github.com/scipy/scipy/pull/11333): BUG: directed\_hausdorff subset fix
  - [\#11335](https://github.com/scipy/scipy/pull/11335): \[ENH\] sparse: Loosen check for sparse outer indexing fast path
  - [\#11337](https://github.com/scipy/scipy/pull/11337): Undefined name 'e' in pavement.py
  - [\#11338](https://github.com/scipy/scipy/pull/11338): scipyoptdoc.py: Remove unused variable 'sixu'
  - [\#11340](https://github.com/scipy/scipy/pull/11340): xrange() was removed in Python 3 in favor of range()
  - [\#11342](https://github.com/scipy/scipy/pull/11342): range() was removed in Py3 in \_binned\_statistic.py
  - [\#11343](https://github.com/scipy/scipy/pull/11343): BUG: constants: fix 'exact' values table
  - [\#11347](https://github.com/scipy/scipy/pull/11347): ENH: add input validation function and apply it to needed functions
  - [\#11348](https://github.com/scipy/scipy/pull/11348): MAINT: remove six.string\_types usages
  - [\#11349](https://github.com/scipy/scipy/pull/11349): MAINT: minor doc fix \_minimize\_trustregion\_constr
  - [\#11353](https://github.com/scipy/scipy/pull/11353): MAINT: py3 remove various six usages
  - [\#11358](https://github.com/scipy/scipy/pull/11358): ENH: optimize: Use CSR format instead of LIL for speed
  - [\#11362](https://github.com/scipy/scipy/pull/11362): MAINT: sys.version\_info \>= 3.5
  - [\#11364](https://github.com/scipy/scipy/pull/11364): ENH: cache square of sums for f\_oneway
  - [\#11368](https://github.com/scipy/scipy/pull/11368): ENH: add optional argument, "include\_nyquist", for freqz()
  - [\#11372](https://github.com/scipy/scipy/pull/11372): BENCH: optimize: added linprog presolve benchmarks
  - [\#11376](https://github.com/scipy/scipy/pull/11376): ENH: Add wrapper for ?gttrf/?gttrs
  - [\#11377](https://github.com/scipy/scipy/pull/11377): MAINT: Remove Python 2 code from tools/authors.py
  - [\#11378](https://github.com/scipy/scipy/pull/11378): ENH (WIP): Python wrapper for ?tbtrs
  - [\#11379](https://github.com/scipy/scipy/pull/11379): MAINT: Remove six.with\_metaclass from benchmarks/cython\_special.py
  - [\#11380](https://github.com/scipy/scipy/pull/11380): BUG: sparse/isolve: bicg and qmr don't treat x0 correctly
  - [\#11382](https://github.com/scipy/scipy/pull/11382): MAINT: remove error throw in binned\_statistic\_dd() on non-finite...
  - [\#11383](https://github.com/scipy/scipy/pull/11383): MAINT: \_lib: remove py2 compat shims in getargspec
  - [\#11384](https://github.com/scipy/scipy/pull/11384): MAINT: Use numpy scalar types directly
  - [\#11385](https://github.com/scipy/scipy/pull/11385): ENH: special: add spherical Bessel functions to \`cython\_special\`
  - [\#11389](https://github.com/scipy/scipy/pull/11389): MAINT: line.startswith shouldn't be bytes
  - [\#11393](https://github.com/scipy/scipy/pull/11393): ENH: Speed up truncnorm's ppf()and rvs() methods
  - [\#11394](https://github.com/scipy/scipy/pull/11394): MAINT: Remove self.\_size (and self.\_random\_state) from stats...
  - [\#11395](https://github.com/scipy/scipy/pull/11395): correction in error message (%d-\>%g format)
  - [\#11396](https://github.com/scipy/scipy/pull/11396): DOC: revert gh10540, removing mtrand
  - [\#11397](https://github.com/scipy/scipy/pull/11397): MAINT: differential\_evolution accepts np.random.Generator
  - [\#11402](https://github.com/scipy/scipy/pull/11402): ENH: stats can use np.random.Generator
  - [\#11404](https://github.com/scipy/scipy/pull/11404): ENH: add docstring of butter() for transfer function syntax problem
  - [\#11405](https://github.com/scipy/scipy/pull/11405): DOC: Fix "see also" for SmoothBivariateSpline
  - [\#11408](https://github.com/scipy/scipy/pull/11408): ENH: Add a \`plan\` argument to FFT functions in \`scipy.fft\`
  - [\#11411](https://github.com/scipy/scipy/pull/11411): MAINT: check minimize duplicate evaluations
  - [\#11418](https://github.com/scipy/scipy/pull/11418): ENH: Linalg: Python wrapper for ?geqrfp
  - [\#11419](https://github.com/scipy/scipy/pull/11419): TST: Python 3.7 mac OS gcc multibuild fix
  - [\#11423](https://github.com/scipy/scipy/pull/11423): ENH: Add tool to lint diffs
  - [\#11425](https://github.com/scipy/scipy/pull/11425): FIX: \_array\_newton should preserve complex inputs
  - [\#11426](https://github.com/scipy/scipy/pull/11426): MAINT: licence for global optimization benchmarks
  - [\#11431](https://github.com/scipy/scipy/pull/11431): Make median\_absolute\_deviation scale argument aligned w/iqr
  - [\#11432](https://github.com/scipy/scipy/pull/11432): Fix error message typo
  - [\#11433](https://github.com/scipy/scipy/pull/11433): DOC: Remove L from longs
  - [\#11434](https://github.com/scipy/scipy/pull/11434): MAINT: Python3 improvements to refguide\_check.py
  - [\#11435](https://github.com/scipy/scipy/pull/11435): DOC: Update runtest --parallel help
  - [\#11436](https://github.com/scipy/scipy/pull/11436): MAINT: Remove checks for sys.version \< 3.5
  - [\#11437](https://github.com/scipy/scipy/pull/11437): DOC: Fix documentation issue
  - [\#11439](https://github.com/scipy/scipy/pull/11439): Support path objects (PEP 519) in mmio functions
  - [\#11440](https://github.com/scipy/scipy/pull/11440): correct bounds pass in run\_dualannealing for benchmarks/optimize.py
  - [\#11443](https://github.com/scipy/scipy/pull/11443): BENCH: optimize\_linprog remove ImportError exception
  - [\#11453](https://github.com/scipy/scipy/pull/11453): BUG: sparse: convert csc/csr indices to int64 as needed
  - [\#11454](https://github.com/scipy/scipy/pull/11454): DOC: Remove caveat on \`maximum\_bipartite\_matching\`
  - [\#11455](https://github.com/scipy/scipy/pull/11455): BUG: Fix \_lib.\_util.getargspec\_no\_self lack of KEYWORD\_ONLY support.
  - [\#11456](https://github.com/scipy/scipy/pull/11456): Implementation of khatri\_rao product
  - [\#11459](https://github.com/scipy/scipy/pull/11459): BUG: fix augmentation being broken in maximum\_bipartite\_matching
  - [\#11461](https://github.com/scipy/scipy/pull/11461): MAINT: minor spelling corrections in comments in SciPy.sparse.linalg.arpack
  - [\#11467](https://github.com/scipy/scipy/pull/11467): \[MRG\] Make result data type of KDE evaluation like in the input...
  - [\#11469](https://github.com/scipy/scipy/pull/11469): Update integrate.quad documentation
  - [\#11472](https://github.com/scipy/scipy/pull/11472): Fixed result typo
  - [\#11476](https://github.com/scipy/scipy/pull/11476): DOC: stats: Copy-edit the anderson docstring.
  - [\#11478](https://github.com/scipy/scipy/pull/11478): ENH: avoid unnecessary array copies in matrix product
  - [\#11481](https://github.com/scipy/scipy/pull/11481): BUG: Make special.hyperu return nan if any argument is nan
  - [\#11483](https://github.com/scipy/scipy/pull/11483): BUG: Fixed \`\_kpp\` initialization on \`scipy.cluster.vq\`, closing...
  - [\#11485](https://github.com/scipy/scipy/pull/11485): ENH: Update docstring of class KrylovJacobian to fix \#2744
  - [\#11486](https://github.com/scipy/scipy/pull/11486): BUG: make special.eval\_hermite return nan if second argument...
  - [\#11487](https://github.com/scipy/scipy/pull/11487): ENH: improve docstring of correlate and correlate2d to fix \#1968
  - [\#11488](https://github.com/scipy/scipy/pull/11488): FIX: change "func -\> fun" of scipy.optimize \_root.py to solve...
  - [\#11489](https://github.com/scipy/scipy/pull/11489): BUG: fixes typo introduced in PR \#11253 in stats.mstats.kendalltau()
  - [\#11490](https://github.com/scipy/scipy/pull/11490): DOC: fix typo in scipy/io/matlab/mio4.py
  - [\#11495](https://github.com/scipy/scipy/pull/11495): MAINT: refactor slsqp to fix issue in callback function
  - [\#11498](https://github.com/scipy/scipy/pull/11498): \[DOC\] mention graph cuts in maximum flow docstring
  - [\#11499](https://github.com/scipy/scipy/pull/11499): DOC: Improve documentation of scipy.signal.signaltools.wiener
  - [\#11506](https://github.com/scipy/scipy/pull/11506): DOC: Fix typo in documentation of scipy.stats.morestats
  - [\#11508](https://github.com/scipy/scipy/pull/11508): ENH: avoid copy on sparse \_\_init\_\_ when dtype is given
  - [\#11509](https://github.com/scipy/scipy/pull/11509): ENH: avoid unnecessary array copies in matrix product (again)
  - [\#11510](https://github.com/scipy/scipy/pull/11510): \[DOC\] An ex. for creating arbitrary size tri-diagonal
  - [\#11511](https://github.com/scipy/scipy/pull/11511): TST: pin numba for Travis/sparse
  - [\#11513](https://github.com/scipy/scipy/pull/11513): TST: disable NumPy cache dir ppc64le
  - [\#11514](https://github.com/scipy/scipy/pull/11514): BUG: make special.eval\_genlaguerre return nan if passed nan
  - [\#11517](https://github.com/scipy/scipy/pull/11517): ENH: improve sparse.lil.tocsr performance
  - [\#11519](https://github.com/scipy/scipy/pull/11519): Fix fresnel documentation
  - [\#11520](https://github.com/scipy/scipy/pull/11520): BUG: make special.eval\_gegenbauer return nan if passed nan
  - [\#11524](https://github.com/scipy/scipy/pull/11524): ENH: Cosine Sine Decomposition
  - [\#11526](https://github.com/scipy/scipy/pull/11526): BUG: fix SLSQP max iteration setting to fix \#4921
  - [\#11527](https://github.com/scipy/scipy/pull/11527): ENH: improve docstring of weibull\_min\_gen and weibull\_max\_gen...
  - [\#11530](https://github.com/scipy/scipy/pull/11530): MAINT: Removed 3 unused imports, 3 unused assignments from ndimage.
  - [\#11531](https://github.com/scipy/scipy/pull/11531): DOC: fix typos in bdtr and bdtrc from gh PR 11045
  - [\#11532](https://github.com/scipy/scipy/pull/11532): MAINT: Fixed several unused imports and unused assignments from...
  - [\#11533](https://github.com/scipy/scipy/pull/11533): MAINT: Fixed about 100 unused imports, unused assignment warnings...
  - [\#11534](https://github.com/scipy/scipy/pull/11534): FIX: Allow non-native byte order inputs to scipy.fft
  - [\#11535](https://github.com/scipy/scipy/pull/11535): MAINT: Fixed several unused imports in \_lib.
  - [\#11536](https://github.com/scipy/scipy/pull/11536): MAINT: Fixed several unused imports and unused assignments in...
  - [\#11537](https://github.com/scipy/scipy/pull/11537): MAINT: Removed an unused import in scipy/constants.
  - [\#11538](https://github.com/scipy/scipy/pull/11538): MAINT: Fixed several unused imports in scipy/fft.
  - [\#11539](https://github.com/scipy/scipy/pull/11539): MAINT: Fixed several unused imports and unused assignments in...
  - [\#11540](https://github.com/scipy/scipy/pull/11540): MAINT: Fixed two unused imports in scipy/misc.
  - [\#11541](https://github.com/scipy/scipy/pull/11541): MAINT: Fixed several unused imports and unused assignments in...
  - [\#11542](https://github.com/scipy/scipy/pull/11542): MAINT: Fixed an unused import in scipy/odr.
  - [\#11543](https://github.com/scipy/scipy/pull/11543): MAINT: Fixed several unused imports and unused assignments in...
  - [\#11544](https://github.com/scipy/scipy/pull/11544): MAINT: Fixed unused imports and unused assignments in scipy/integrate.
  - [\#11545](https://github.com/scipy/scipy/pull/11545): MAINT: Removed unused imports and fixed unused assignments in...
  - [\#11546](https://github.com/scipy/scipy/pull/11546): MAINT: Removed unused imports; fixed unused assignments in scipy/signal.
  - [\#11547](https://github.com/scipy/scipy/pull/11547): MAINT: Removed unused imports; fixed unused assignments in scipy/spatial
  - [\#11548](https://github.com/scipy/scipy/pull/11548): MAINT: Removed unused imports; fixed unused assignments in scipy.sparse.
  - [\#11549](https://github.com/scipy/scipy/pull/11549): MAINT: Replace xrange with range
  - [\#11560](https://github.com/scipy/scipy/pull/11560): MAINT: stats: remove an \_argcheck call
  - [\#11573](https://github.com/scipy/scipy/pull/11573): MAINT: Removed unused imports; fixed unused assignments in scipy/stats.
  - [\#11574](https://github.com/scipy/scipy/pull/11574): MAINT: Small change to \`optimize.nnls\` error messages.
  - [\#11575](https://github.com/scipy/scipy/pull/11575): MAINT: Update sytrd/hetrd tests
  - [\#11582](https://github.com/scipy/scipy/pull/11582): MAINT: fix typo in quadpack.py closes \#11448
  - [\#11585](https://github.com/scipy/scipy/pull/11585): TST: add openblas\_support.py
  - [\#11587](https://github.com/scipy/scipy/pull/11587): BUG: Differential evolution with LinearConstraint with sparse...
  - [\#11588](https://github.com/scipy/scipy/pull/11588): MAINT: Fully display problem size in lsmr/lsqr.
  - [\#11589](https://github.com/scipy/scipy/pull/11589): MAINT: Remove Python 2 workarounds
  - [\#11590](https://github.com/scipy/scipy/pull/11590): MAINT: Remove Python2 module init
  - [\#11605](https://github.com/scipy/scipy/pull/11605): Standardization of bounds in \_linprog\_util.py
  - [\#11608](https://github.com/scipy/scipy/pull/11608): BUG: fix use of is in DE callback
  - [\#11614](https://github.com/scipy/scipy/pull/11614): TST, MAINT: TestCtypesQuad skip with pytest
  - [\#11619](https://github.com/scipy/scipy/pull/11619): ENH: add nan\_policy argument and functionality to stats.mstats.winsorize
  - [\#11621](https://github.com/scipy/scipy/pull/11621): MAINT: Cleanup uses of PY\_VERSION\_HEX, NPY\_PY3K in ndimage
  - [\#11622](https://github.com/scipy/scipy/pull/11622): MAINT: Cleanup uses of PY\_VERSION\_HEX, NPY\_PY3K in sparse
  - [\#11623](https://github.com/scipy/scipy/pull/11623): MAINT: Remove unnecessary 'from \_\_future\_\_ import ...' statements
  - [\#11626](https://github.com/scipy/scipy/pull/11626): MAINT: Cleanup uses of PY\_VERSION\_HEX
  - [\#11627](https://github.com/scipy/scipy/pull/11627): ENH: add analytic formula for normal moments
  - [\#11628](https://github.com/scipy/scipy/pull/11628): MAINT, TST: adjust azure for matplotlib release
  - [\#11631](https://github.com/scipy/scipy/pull/11631): Revert to old behaviour for constant cost matrices in \`linear\_sum\_assignment\`
  - [\#11632](https://github.com/scipy/scipy/pull/11632): MAINT: Define ARRAY\_ANYORDER with DEF instead of cdef
  - [\#11639](https://github.com/scipy/scipy/pull/11639): BUG: interpolate/interp1d: fail gracefully on all-nan inputs
  - [\#11640](https://github.com/scipy/scipy/pull/11640): MAINT: Fix BLAS3 trmm wrapper for "side" arg
  - [\#11642](https://github.com/scipy/scipy/pull/11642): TST, MAINT: remove dead code in Travis CI
  - [\#11643](https://github.com/scipy/scipy/pull/11643): MAINT: fix conversion in binom\_test
  - [\#11645](https://github.com/scipy/scipy/pull/11645): MAINT: Assorted clean up.
  - [\#11646](https://github.com/scipy/scipy/pull/11646): MAINT: Remove unnecessary 'from \_\_future\_\_ import ...' statements
  - [\#11647](https://github.com/scipy/scipy/pull/11647): DOC: document return\_all arguments
  - [\#11648](https://github.com/scipy/scipy/pull/11648): Perform geometric slerp in quaternion space
  - [\#11651](https://github.com/scipy/scipy/pull/11651): DOC: Update paper URL in lambertw documentation
  - [\#11653](https://github.com/scipy/scipy/pull/11653): PERF: Switch to C++ STL std::nth\_element
  - [\#11655](https://github.com/scipy/scipy/pull/11655): MAINT: Remove Python2 cStringStream
  - [\#11657](https://github.com/scipy/scipy/pull/11657): ENH: Add wrapper for ?pttrf/?pttrs
  - [\#11664](https://github.com/scipy/scipy/pull/11664): ENH: Add wrapper for ?gejsv
  - [\#11665](https://github.com/scipy/scipy/pull/11665): ENH: Add wrapper for ?pteqr
  - [\#11667](https://github.com/scipy/scipy/pull/11667): BUG: Non-central Fisher distribution (fix nan-values when nc=0)
  - [\#11668](https://github.com/scipy/scipy/pull/11668): ENH: Add wrapper for ?gtsvx
  - [\#11671](https://github.com/scipy/scipy/pull/11671): TST, CI: restore Azure temporarily
  - [\#11672](https://github.com/scipy/scipy/pull/11672): Add warning to medfilt when array size \< kernel\_size
  - [\#11674](https://github.com/scipy/scipy/pull/11674): TST: bump test precision for two np.dot related linalg tests.
  - [\#11675](https://github.com/scipy/scipy/pull/11675): MAINT: pycodestyle clean-up
  - [\#11677](https://github.com/scipy/scipy/pull/11677): ENH: Add wrapper for ?ptsvx
  - [\#11679](https://github.com/scipy/scipy/pull/11679): BENCH: cKDTree benchmarks added: balanced/unbalanced tree (related...
  - [\#11680](https://github.com/scipy/scipy/pull/11680): MAINT: rng\_integers allows RandomState.randint or Generator.integers
  - [\#11683](https://github.com/scipy/scipy/pull/11683): BUG: fix mode='mirror' on length 1 axes
  - [\#11684](https://github.com/scipy/scipy/pull/11684): BUG: fix scipy.special.voigt\_profile
  - [\#11687](https://github.com/scipy/scipy/pull/11687): MAINT: sparse.linalg: avoid importing from \`np.core\`
  - [\#11688](https://github.com/scipy/scipy/pull/11688): ENH: mypy: get specific about ignoring missing imports
  - [\#11690](https://github.com/scipy/scipy/pull/11690): MAINT: mypy: fix errors about incompatible types in lists
  - [\#11692](https://github.com/scipy/scipy/pull/11692): MAINT: mypy: fix remaining type errors
  - [\#11694](https://github.com/scipy/scipy/pull/11694): TST, MAINT: bump to OpenBLAS 0.3.9 stable, raise tol for Win...
  - [\#11697](https://github.com/scipy/scipy/pull/11697): DOC: fix pdf of norminvgauss in scipy.stats
  - [\#11701](https://github.com/scipy/scipy/pull/11701): MAINT: special: add rudimentary types for \`\_ufuncs\` extension...
  - [\#11702](https://github.com/scipy/scipy/pull/11702): BUG: Fixed a post-merge bug for eigh()
  - [\#11703](https://github.com/scipy/scipy/pull/11703): Improves docstring with consistent L2-norm
  - [\#11705](https://github.com/scipy/scipy/pull/11705): DOC: Slerp the SphericalVoronoi docstring
  - [\#11706](https://github.com/scipy/scipy/pull/11706): ENH: mypy: add \`--mypy\` option to \`runtests.py\`
  - [\#11710](https://github.com/scipy/scipy/pull/11710): ENH: Modified stats.kstest() to use the exact stats.kstwo.sf()...
  - [\#11715](https://github.com/scipy/scipy/pull/11715): DOC: add .. versionadded:: to as\_matrix/from\_matrix in spatial/transf…
  - [\#11716](https://github.com/scipy/scipy/pull/11716): BENCH: fix benchmark imports for \`\`optimize\_linprog.py\`\`
  - [\#11721](https://github.com/scipy/scipy/pull/11721): MAINT: io: Remove now-unnecessary \`\# type: ignore\`
  - [\#11722](https://github.com/scipy/scipy/pull/11722): MAINT: mypy: remove mpmath from the ratchet
  - [\#11726](https://github.com/scipy/scipy/pull/11726): Handle constant input for scipy.stats.f\_oneway
  - [\#11729](https://github.com/scipy/scipy/pull/11729): BENCH: optimize: added infeasible benchmarks for linprog
  - [\#11731](https://github.com/scipy/scipy/pull/11731): fix inaccurate information about Mac OS compiler (\#11696)
  - [\#11733](https://github.com/scipy/scipy/pull/11733): Fix inaccurate docstring example of HalfspaceIntersection
  - [\#11734](https://github.com/scipy/scipy/pull/11734): Doc: fix inaccurate docstring of SmoothBivariateSpline.
  - [\#11735](https://github.com/scipy/scipy/pull/11735): Bug: stats: fix wrong shape from median\_absolute\_deviation for...
  - [\#11736](https://github.com/scipy/scipy/pull/11736): ENH: add input validations and its tests for FITPACK in fitpack2.py
  - [\#11737](https://github.com/scipy/scipy/pull/11737): BUG: Prevent crashes due to MKL bug in ?heevr
  - [\#11739](https://github.com/scipy/scipy/pull/11739): MAINT: special: add type stubs for \`\_test\_round.pyx\`
  - [\#11740](https://github.com/scipy/scipy/pull/11740): MAINT: special: remove unused specfun f2py wrappers
  - [\#11741](https://github.com/scipy/scipy/pull/11741): BUG: fix small tolerances handling for minpack and add a test.
  - [\#11743](https://github.com/scipy/scipy/pull/11743): Doc: fix docstring of rfft, rfft2, rfftn, irfft, irfft2, irfftn...
  - [\#11744](https://github.com/scipy/scipy/pull/11744): MAINT: Remove unused py3k.h code
  - [\#11745](https://github.com/scipy/scipy/pull/11745): DOC: stats: Clean up ncf documentation.
  - [\#11748](https://github.com/scipy/scipy/pull/11748): MAINT: special: type \`cython\_special\` as \`Any\`
  - [\#11750](https://github.com/scipy/scipy/pull/11750): MAINT: type hints for \`\_spherical\_voronoi\`
  - [\#11752](https://github.com/scipy/scipy/pull/11752): DOC: fix docstring of scipy.optimize.least\_squares
  - [\#11753](https://github.com/scipy/scipy/pull/11753): ENH: add input validation for dendrogram and a test.
  - [\#11755](https://github.com/scipy/scipy/pull/11755): MAINT: Replace uses of tostring with tobytes
  - [\#11757](https://github.com/scipy/scipy/pull/11757): ENH: improve binned\_statistics\_2d performance.
  - [\#11759](https://github.com/scipy/scipy/pull/11759): ENH: optimize: add HiGHS methods to linprog
  - [\#11760](https://github.com/scipy/scipy/pull/11760): MAINT: Remove FileStream replaced by GenericStream
  - [\#11761](https://github.com/scipy/scipy/pull/11761): MAINT: Replace npy\_3kcompat.h shims
  - [\#11765](https://github.com/scipy/scipy/pull/11765): TST: Speedup test\_pascal which is VERY slow on Azure
  - [\#11766](https://github.com/scipy/scipy/pull/11766): TST: speed up differential\_evolution L8 test
  - [\#11767](https://github.com/scipy/scipy/pull/11767): Change comment in continuous rv gamma fit function
  - [\#11776](https://github.com/scipy/scipy/pull/11776): Add domain option for resample.
  - [\#11784](https://github.com/scipy/scipy/pull/11784): BUG: Fixed calculation of nonzero elements in scipy.sparse.random
  - [\#11786](https://github.com/scipy/scipy/pull/11786): ENH: stats: add axis keyword argument to scipy.stats.rankdata
  - [\#11789](https://github.com/scipy/scipy/pull/11789): Doc: fix docstring of scipy.spatial.chebyshev
  - [\#11792](https://github.com/scipy/scipy/pull/11792): DOC: dev: add guidelines for developing public Cython APIs
  - [\#11794](https://github.com/scipy/scipy/pull/11794): MAINT: add comments explaining a problem in cython\_optimize organization
  - [\#11796](https://github.com/scipy/scipy/pull/11796): DOC: add a note about precision losing in csgraph.minimum\_spanning\_tree...
  - [\#11797](https://github.com/scipy/scipy/pull/11797): ENH: Allow negative \`axis\` in \`interpolate.BSpline\`. Also...
  - [\#11798](https://github.com/scipy/scipy/pull/11798): Add simplify\_cells parameter to scipy.io.loadmat
  - [\#11801](https://github.com/scipy/scipy/pull/11801): MAINT, DOC: minor changes of ratio-of-uniforms in scipy.stats
  - [\#11802](https://github.com/scipy/scipy/pull/11802): BUG: fix scipy.odr to handle multidimensional independent and...
  - [\#11803](https://github.com/scipy/scipy/pull/11803): scipy.stats.trapz: Use analytic formulas for stats and entropy.
  - [\#11808](https://github.com/scipy/scipy/pull/11808): DOC: add Examples in the scipy.interpolate.interpn docstring.
  - [\#11809](https://github.com/scipy/scipy/pull/11809): Duplicate entries are added together in csr\_matrix constructor
  - [\#11813](https://github.com/scipy/scipy/pull/11813): MAINT: bump pyflakes to version 2.1.1
  - [\#11814](https://github.com/scipy/scipy/pull/11814): BUG: scipy.sparse.csr doctest failing with incorrect output value
  - [\#11817](https://github.com/scipy/scipy/pull/11817): DOC: add Examples in the scipy.optimize.leastsq docstring
  - [\#11820](https://github.com/scipy/scipy/pull/11820): ENH: Raise an error on incorrect bounds format in optimize.fmin\_l\_bfgs\_b
  - [\#11822](https://github.com/scipy/scipy/pull/11822): CI: add github actions for macOS
  - [\#11824](https://github.com/scipy/scipy/pull/11824): DOC: add Examples in scipy.optimize.line\_search docstring (line\_search\_wolfe2)
  - [\#11830](https://github.com/scipy/scipy/pull/11830): TST: Always use fork for multiprocessing in fft tests
  - [\#11831](https://github.com/scipy/scipy/pull/11831): DOC: add Examples and Returns in scipy.misc.central\_diff\_weights...
  - [\#11832](https://github.com/scipy/scipy/pull/11832): DOC: stats: Some small corrections to a couple docstrings.
  - [\#11833](https://github.com/scipy/scipy/pull/11833): BUG: Fix compiler\_name when there are paths used in flags
  - [\#11836](https://github.com/scipy/scipy/pull/11836): MAINT: re-introduce multiprocessing tests on Python3.8
  - [\#11837](https://github.com/scipy/scipy/pull/11837): Doc: add Examples in scipy.optimize.fsolve docstring
  - [\#11838](https://github.com/scipy/scipy/pull/11838): Doc: add Examples in scipy.sparse.linalg.minres docstring
  - [\#11840](https://github.com/scipy/scipy/pull/11840): BUG: sparse.linalg: fix overflow in expm intermediate computation
  - [\#11842](https://github.com/scipy/scipy/pull/11842): BLD: fix build with gfortran 10
  - [\#11843](https://github.com/scipy/scipy/pull/11843): MAINT: Simplify floats in constants.py
  - [\#11847](https://github.com/scipy/scipy/pull/11847): DOC: add a tutorial of scipy.optimize.linprog
  - [\#11849](https://github.com/scipy/scipy/pull/11849): ENH: speed up geninvgauss by using cython
  - [\#11852](https://github.com/scipy/scipy/pull/11852): CI: remove osx from travisCI
  - [\#11857](https://github.com/scipy/scipy/pull/11857): BUG: Change parameter fc of gausspulse to float.
  - [\#11861](https://github.com/scipy/scipy/pull/11861): order = degree + 1 for splines
  - [\#11863](https://github.com/scipy/scipy/pull/11863): Make g77 ABI wrapper work with gfortran ABI lapack
  - [\#11866](https://github.com/scipy/scipy/pull/11866): MAINT: add type ignores to sympy and matplotlib imports
  - [\#11867](https://github.com/scipy/scipy/pull/11867): CI: Add arm64 in travis-ci
  - [\#11869](https://github.com/scipy/scipy/pull/11869): DOC: signal: Add an example to the lsim2 docstring.
  - [\#11870](https://github.com/scipy/scipy/pull/11870): DOC: signal: Use impulse instead of impulse2 in the impulse example...
  - [\#11871](https://github.com/scipy/scipy/pull/11871): ENH: type ufuncs in special as ufuncs instead of Any
  - [\#11872](https://github.com/scipy/scipy/pull/11872): BUG: avoid recomputing in scipy.optimize.optimize.MemoizeJac
  - [\#11873](https://github.com/scipy/scipy/pull/11873): DOC: signal: Fix ODE in impulse and impulse2 docstrings.
  - [\#11874](https://github.com/scipy/scipy/pull/11874): DOC: add Examples of docstring for scipy.interpolate.approximate\_taylor\_polynomial
  - [\#11878](https://github.com/scipy/scipy/pull/11878): DOC: fixed a typo under scipy/integrate/quadrature.py
  - [\#11879](https://github.com/scipy/scipy/pull/11879): BUG: Fix index arrays overflow in sparse.kron
  - [\#11880](https://github.com/scipy/scipy/pull/11880): DOC: stats: Add Examples for bartlett, fligner, levene.
  - [\#11881](https://github.com/scipy/scipy/pull/11881): MAINT: normalise numpy--\>np in optimize.py
  - [\#11882](https://github.com/scipy/scipy/pull/11882): DOC: add Examples for scipy.io.readsav docstring.
  - [\#11883](https://github.com/scipy/scipy/pull/11883): DOC: add Returns and Examples for scipy.ndimage.correlate() docstring
  - [\#11885](https://github.com/scipy/scipy/pull/11885): BUG: stats: Handle multidimensional arrays in f\_oneway, and more.
  - [\#11889](https://github.com/scipy/scipy/pull/11889): DOC: signal: Unify lsim and lsim2 examples.
  - [\#11896](https://github.com/scipy/scipy/pull/11896): BUG: stats: Fix handling of size 0 inputs for ttest\_rel and ttest\_ind.
  - [\#11897](https://github.com/scipy/scipy/pull/11897): DOC: Remove misleading default values from fit method
  - [\#11898](https://github.com/scipy/scipy/pull/11898): MAINT: LinearVectorFunction.J is ndarray closes \#11886
  - [\#11902](https://github.com/scipy/scipy/pull/11902): BUG: linalg: test\_heequb failure
  - [\#11904](https://github.com/scipy/scipy/pull/11904): fix real-to-real transforms for complex inputs and overwrite\_x=True
  - [\#11906](https://github.com/scipy/scipy/pull/11906): DOC: stats: fix error caused by trapz docstring
  - [\#11907](https://github.com/scipy/scipy/pull/11907): BUG: stats: fixed SEGFAULT from Issue \#9710
  - [\#11912](https://github.com/scipy/scipy/pull/11912): ENH: Respect matplotlib color palette with hierarchy/dendrogram.
  - [\#11914](https://github.com/scipy/scipy/pull/11914): DOC: refine doc for spatial.distance.squareform
  - [\#11915](https://github.com/scipy/scipy/pull/11915): ENH: Ndim linear operator
  - [\#11919](https://github.com/scipy/scipy/pull/11919): ENH: expose "window\_size" parameter in find\_peaks\_cwt()
  - [\#11920](https://github.com/scipy/scipy/pull/11920): DOC: explain M, diffev
  - [\#11923](https://github.com/scipy/scipy/pull/11923): CI: macOS install swig closes \#11922
  - [\#11924](https://github.com/scipy/scipy/pull/11924): DOC: add Examples for scipy.optimize.bracket() docstring
  - [\#11930](https://github.com/scipy/scipy/pull/11930): DOC: add Examples and clean up for signal.qspline1d and signal.qspline\_eval...
  - [\#11931](https://github.com/scipy/scipy/pull/11931): DOC: add Examples for sparse.linalg.bicg docstring.
  - [\#11933](https://github.com/scipy/scipy/pull/11933): DOC: Add original reference for Yao-Liu objective functions
  - [\#11934](https://github.com/scipy/scipy/pull/11934): DOC, MAINT: mailmap update
  - [\#11935](https://github.com/scipy/scipy/pull/11935): DOC: make scipy.stats.mode documentation reflect that the function...
  - [\#11936](https://github.com/scipy/scipy/pull/11936): ENH: special: add type stubs for \`orthogonal.py\`
  - [\#11937](https://github.com/scipy/scipy/pull/11937): DOC: Add docstring examples to fft2, ifft2, io.savemat
  - [\#11938](https://github.com/scipy/scipy/pull/11938): MAINT: add helper function for deprecating Cython API functions
  - [\#11942](https://github.com/scipy/scipy/pull/11942): MAINT: ignore conditional import in \_lib/\_util
  - [\#11943](https://github.com/scipy/scipy/pull/11943): MAINT: special: add types for geterr/seterr/errstate
  - [\#11946](https://github.com/scipy/scipy/pull/11946): MAINT: add py.typed marker
  - [\#11950](https://github.com/scipy/scipy/pull/11950): TST:MAINT: separated and stabilized heequb tests
  - [\#11952](https://github.com/scipy/scipy/pull/11952): DOC: update toolchain roadmap for py38, C99, C++11/14
  - [\#11957](https://github.com/scipy/scipy/pull/11957): MAINT: Use np.errstate context manager instead of np.seterr.
  - [\#11958](https://github.com/scipy/scipy/pull/11958): MAINT: interpolate: Remove some trailing spaces.
  - [\#11960](https://github.com/scipy/scipy/pull/11960): MAINT: Cleanup Python2 compatibility code
  - [\#11961](https://github.com/scipy/scipy/pull/11961): MAINT: Remove numpy/npy\_3kcompat.h from \_superluobject.c
  - [\#11962](https://github.com/scipy/scipy/pull/11962): DOC: Fix type of \`codes\` in docstring of \`\_vq.\_vq()\`
  - [\#11964](https://github.com/scipy/scipy/pull/11964): MAINT: Cleanup unused IS\_PYPY
  - [\#11969](https://github.com/scipy/scipy/pull/11969): DOC: add Examples and fix docstring for special.airye
  - [\#11970](https://github.com/scipy/scipy/pull/11970): BUG: sparse: 'diagonal' of sparse matrices fixed to match numpy's...
  - [\#11974](https://github.com/scipy/scipy/pull/11974): BUG: Reshape oaconvolve output even when no axes are convolved
  - [\#11976](https://github.com/scipy/scipy/pull/11976): MAINT: add logo for github actions
  - [\#11977](https://github.com/scipy/scipy/pull/11977): CI: test bleeding edge Python
  - [\#11979](https://github.com/scipy/scipy/pull/11979): DOC: add Examples for stats.ranksums() docstring.
  - [\#11982](https://github.com/scipy/scipy/pull/11982): Fix KMeans++ initialisation slowness
  - [\#11983](https://github.com/scipy/scipy/pull/11983): DOC: add Examples for stats.mstats.argstoarray() docstring.
  - [\#11986](https://github.com/scipy/scipy/pull/11986): Avoid bugs in ndimage when the output and input arrays overlap...
  - [\#11988](https://github.com/scipy/scipy/pull/11988): ENH: Override fit method of Laplace distribution with Maximum...
  - [\#11993](https://github.com/scipy/scipy/pull/11993): TST, CI: Azure Windows path fixups
  - [\#11995](https://github.com/scipy/scipy/pull/11995): MAINT, CI: remove custom mingw Azure
  - [\#11996](https://github.com/scipy/scipy/pull/11996): DOC: add Examples and fix pep warning for fft.set\_global\_backend...
  - [\#11997](https://github.com/scipy/scipy/pull/11997): MAINT, CI: Azure OpenBLAS simplify
  - [\#11998](https://github.com/scipy/scipy/pull/11998): BENCH: Run against current HEAD instead of master
  - [\#12001](https://github.com/scipy/scipy/pull/12001): ENH: stats: Implement \_logpdf for the maxwell distribution.
  - [\#12004](https://github.com/scipy/scipy/pull/12004): DOC: add examples for integrate.quad\_vec() and integrate.quad\_explain()
  - [\#12005](https://github.com/scipy/scipy/pull/12005): MAINT: Use helper functions in ?tbtrs tests
  - [\#12007](https://github.com/scipy/scipy/pull/12007): MAINT: updated LICENSES\_bundled for pybind11 and six
  - [\#12008](https://github.com/scipy/scipy/pull/12008): DOC: roadmap update
  - [\#12009](https://github.com/scipy/scipy/pull/12009): ENH: optimize: support 64-bit BLAS in lbfgsb
  - [\#12010](https://github.com/scipy/scipy/pull/12010): ENH: sparse.linalg: support 64-bit BLAS in isolve
  - [\#12012](https://github.com/scipy/scipy/pull/12012): DOC: add Examples for interpolate.barycentric\_interpolate(),...
  - [\#12013](https://github.com/scipy/scipy/pull/12013): MAINT: remove last uses of numpy.dual
  - [\#12014](https://github.com/scipy/scipy/pull/12014): CI: print 10 slowest tests
  - [\#12020](https://github.com/scipy/scipy/pull/12020): MAINT: Removed handling of circular input in SphericalVoronoi
  - [\#12022](https://github.com/scipy/scipy/pull/12022): DOC : added default value of absolute\_sigma to False in scipy.optimize.curve\_fit docs
  - [\#12024](https://github.com/scipy/scipy/pull/12024): DOC: add Examples for io.hb\_read() and io.hb\_write()
  - [\#12025](https://github.com/scipy/scipy/pull/12025): MAINT: Remove numpy/npy\_3kcompat.h from nd\_image
  - [\#12028](https://github.com/scipy/scipy/pull/12028): Spelling correction
  - [\#12030](https://github.com/scipy/scipy/pull/12030): ENH: optimize/\_trlib: support ILP64 blas/lapack
  - [\#12036](https://github.com/scipy/scipy/pull/12036): MAINT: Add some generated C files .gitignore
  - [\#12038](https://github.com/scipy/scipy/pull/12038): MAINT, CI: Travis rackcdn-\>conda.org
  - [\#12039](https://github.com/scipy/scipy/pull/12039): MAINT: signal: Lower the resolution of the plots in the chirp...
  - [\#12040](https://github.com/scipy/scipy/pull/12040): DOC: add Examples for ndimage.spline\_filter1d() and spline\_filter()...
  - [\#12044](https://github.com/scipy/scipy/pull/12044): MAINT: combine apt-get update and apt-get install into one RUN
  - [\#12045](https://github.com/scipy/scipy/pull/12045): TST: Reduce size of test\_diagonal\_types to speed up tests
  - [\#12046](https://github.com/scipy/scipy/pull/12046): MAINT: Remove unused npy\_3kcompat.h
  - [\#12047](https://github.com/scipy/scipy/pull/12047): MAINT: Cython 3.0 compat
  - [\#12050](https://github.com/scipy/scipy/pull/12050): DOC: add download number badges of PyPI and conda-forge in README.rst
  - [\#12052](https://github.com/scipy/scipy/pull/12052): DOC: add Examples odr.models.polynomial() and fix odr.odr docstring...
  - [\#12056](https://github.com/scipy/scipy/pull/12056): ENH: Modifies shapiro to return a named tuple
  - [\#12057](https://github.com/scipy/scipy/pull/12057): Adding my name into THANKS.txt
  - [\#12060](https://github.com/scipy/scipy/pull/12060): TST: Reduce number of test\_diagonal\_types configs
  - [\#12062](https://github.com/scipy/scipy/pull/12062): TST: Change dec.slow to pytest.mark.slow
  - [\#12068](https://github.com/scipy/scipy/pull/12068): ENH: Modifies jarque\_bera to return a named tuple
  - [\#12070](https://github.com/scipy/scipy/pull/12070): MAINT, CI: appveyor rack-\>conda.org
  - [\#12072](https://github.com/scipy/scipy/pull/12072): TST: filter out factorial(float) deprecation warning
  - [\#12078](https://github.com/scipy/scipy/pull/12078): TST: Skip test on colab with large memory alloc
  - [\#12079](https://github.com/scipy/scipy/pull/12079): DOC: Remove Python2 reference from stats tutorial
  - [\#12081](https://github.com/scipy/scipy/pull/12081): DOC: add Examples docstring for optimize.show\_options()
  - [\#12084](https://github.com/scipy/scipy/pull/12084): BUG: interpolate: fix BarycentricInterpolator with integer input...
  - [\#12089](https://github.com/scipy/scipy/pull/12089): ENH: spatial/qhull: support ILP64 Lapack
  - [\#12090](https://github.com/scipy/scipy/pull/12090): ENH: integrate: support ILP64 BLAS in odeint/vode/lsoda
  - [\#12091](https://github.com/scipy/scipy/pull/12091): ENH: integrate: support ILP64 in quadpack
  - [\#12092](https://github.com/scipy/scipy/pull/12092): BUG: Fix dropping dt in signal.StateSpace
  - [\#12093](https://github.com/scipy/scipy/pull/12093): MAINT: Rollback python2.6 workaround
  - [\#12094](https://github.com/scipy/scipy/pull/12094): MAINT: \`openblas\_support\` hash checks
  - [\#12095](https://github.com/scipy/scipy/pull/12095): MAINT: ndimage: change \`shares\_memory\` to \`may\_share\_memory\`
  - [\#12098](https://github.com/scipy/scipy/pull/12098): Doc: change 4 model instances of odr to be instances of \`Model\`...
  - [\#12101](https://github.com/scipy/scipy/pull/12101): Removed more unused imports and assignments.
  - [\#12107](https://github.com/scipy/scipy/pull/12107): ENH: Area calculation for 2D inputs in SphericalVoronoi
  - [\#12108](https://github.com/scipy/scipy/pull/12108): MAINT: ensure attributes have correct data type in \`SphericalVoronoi\`
  - [\#12109](https://github.com/scipy/scipy/pull/12109): degree is not order in splines
  - [\#12110](https://github.com/scipy/scipy/pull/12110): ENH: More helpful/forgiving io.wavfile errors
  - [\#12117](https://github.com/scipy/scipy/pull/12117): BUG: fix newline
  - [\#12123](https://github.com/scipy/scipy/pull/12123): \[MAINT\] Fix error on PyData/Sparse import.
  - [\#12124](https://github.com/scipy/scipy/pull/12124): TST: Always test matmul now that Python3.5+ is required
  - [\#12126](https://github.com/scipy/scipy/pull/12126): TST: Cleanup unused matplotlib code.
  - [\#12127](https://github.com/scipy/scipy/pull/12127): DOC: update docstrings of signal.cspline2d, qspline2d, sepfir2d
  - [\#12130](https://github.com/scipy/scipy/pull/12130): MAINT: Fixing broken links with linkchecker
  - [\#12135](https://github.com/scipy/scipy/pull/12135): ENH: linalg: Add the function convolution\_matrix.
  - [\#12136](https://github.com/scipy/scipy/pull/12136): MAINT: Cleanup np.poly1d hack
  - [\#12137](https://github.com/scipy/scipy/pull/12137): TST, CI: reproduce wheels 32-bit setup
  - [\#12140](https://github.com/scipy/scipy/pull/12140): TST: stats: add kstwo, ksone to slow tests.
  - [\#12141](https://github.com/scipy/scipy/pull/12141): Support 64-bit integer size in Fitpack
  - [\#12151](https://github.com/scipy/scipy/pull/12151): DOC: Correct Rosenbrock function sum
  - [\#12159](https://github.com/scipy/scipy/pull/12159): BUG: Fix length calculation in upfirdn
  - [\#12160](https://github.com/scipy/scipy/pull/12160): BUG: Fix M\_PI
  - [\#12168](https://github.com/scipy/scipy/pull/12168): DOC: add an obsolete version checking javascript to doc release...
  - [\#12171](https://github.com/scipy/scipy/pull/12171): CI, MAINT: Azure OpenBLAS drive flip
  - [\#12172](https://github.com/scipy/scipy/pull/12172): ENH: Bounds for the Powell minimization method
  - [\#12175](https://github.com/scipy/scipy/pull/12175): BLD: support more Fortran compilers for ilp64 and macro expansion...
  - [\#12179](https://github.com/scipy/scipy/pull/12179): BUG: stats: A few distributions didn't accept lists as arguments.
  - [\#12180](https://github.com/scipy/scipy/pull/12180): MAINT: removed redundant import in SphericalVoronoi tests
  - [\#12181](https://github.com/scipy/scipy/pull/12181): DOC: for versionwarning don't use $.getScript
  - [\#12182](https://github.com/scipy/scipy/pull/12182): MAINT: random sampling on the hypersphere in SphericalVoronoi...
  - [\#12194](https://github.com/scipy/scipy/pull/12194): MAINT: Module and example cleanups for doc build
  - [\#12202](https://github.com/scipy/scipy/pull/12202): ENH: tool to DL release wheels from Anaconda
  - [\#12210](https://github.com/scipy/scipy/pull/12210): Remove py.typed marker (at least for the release)
  - [\#12217](https://github.com/scipy/scipy/pull/12217): BUG: stats: Fix handling of edge cases in median\_abs\_deviation.
  - [\#12223](https://github.com/scipy/scipy/pull/12223): BUG: stats: wilcoxon returned p \> 1 for certain inputs.
  - [\#12227](https://github.com/scipy/scipy/pull/12227): BLD: Set macos min version when building rectangular\_lsap
  - [\#12229](https://github.com/scipy/scipy/pull/12229): MAINT: tools/gh\_lists.py: fix http header case sensitivity issue
  - [\#12236](https://github.com/scipy/scipy/pull/12236): DOC: Fix a couple grammatical mistakes in 1.5.0-notes.rst.
  - [\#12276](https://github.com/scipy/scipy/pull/12276): TST: skip <span class="title-ref">test\_heequb</span>, it fails intermittently.
  - [\#12285](https://github.com/scipy/scipy/pull/12285): CI: split travis arm64 run into two
  - [\#12317](https://github.com/scipy/scipy/pull/12317): BUG: prevent error accumulation in <span class="title-ref">Rotation</span> multiplication
  - [\#12318](https://github.com/scipy/scipy/pull/12318): BUG: sparse: avoid np.prod overflow in check\_shape
  - [\#12319](https://github.com/scipy/scipy/pull/12319): BUG: Make cobyla threadsafe
  - [\#12335](https://github.com/scipy/scipy/pull/12335): MAINT: Work around Sphinx bug

---

1.5.1-notes.md

---

# SciPy 1.5.1 Release Notes

<div class="contents">

</div>

SciPy 1.5.1 is a bug-fix release with no new features compared to 1.5.0. In particular, an issue where DLL loading can fail for SciPy wheels on Windows with Python 3.6 has been fixed.

## Authors

  - Peter Bell
  - Loïc Estève
  - Philipp Thölke +
  - Tyler Reddy
  - Paul van Mulbregt
  - Pauli Virtanen
  - Warren Weckesser

A total of 7 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.5.1

  - [\#9108](https://github.com/scipy/scipy/issues/9108): documentation: scipy.spatial.KDTree vs. scipy.spatial.cKDTree
  - [\#12218](https://github.com/scipy/scipy/issues/12218): Type error in stats.ks\_2samp when alternative \!= 'two-sided-
  - [\#12406](https://github.com/scipy/scipy/issues/12406): DOC: Docstring in stats.anderson function not properly formatted
  - [\#12418](https://github.com/scipy/scipy/issues/12418): Regression in hierarchy.dendogram

### Pull requests for 1.5.1

  - [\#12280](https://github.com/scipy/scipy/pull/12280): BUG: Fixes gh-12218, TypeError converting int to float inside...
  - [\#12336](https://github.com/scipy/scipy/pull/12336): BUG: KDTree should reject complex input points
  - [\#12344](https://github.com/scipy/scipy/pull/12344): MAINT: Don't use numpy's aliases of Python builtin objects.
  - [\#12407](https://github.com/scipy/scipy/pull/12407): DOC: Fix docstring for dist param in anderson function
  - [\#12410](https://github.com/scipy/scipy/pull/12410): CI: Run the Azure Windows Python36 32bit tests with mode 'fast'
  - [\#12421](https://github.com/scipy/scipy/pull/12421): Fix regression in scipy 1.5.0 in dendogram when labels is a numpy...
  - [\#12462](https://github.com/scipy/scipy/pull/12462): MAINT: move distributor\_init import after \_\_config\_\_ import

---

1.5.2-notes.md

---

# SciPy 1.5.2 Release Notes

<div class="contents">

</div>

SciPy 1.5.2 is a bug-fix release with no new features compared to 1.5.1.

## Authors

  - Peter Bell
  - Tobias Biester +
  - Evgeni Burovski
  - Thomas A Caswell
  - Ralf Gommers
  - Sturla Molden
  - Andrew Nelson
  - ofirr +
  - Sambit Panda
  - Ilhan Polat
  - Tyler Reddy
  - Atsushi Sakai
  - Pauli Virtanen

A total of 13 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.5.2

  - [\#3847](https://github.com/scipy/scipy/issues/3847): Crash of interpolate.splprep(task=-1)
  - [\#7395](https://github.com/scipy/scipy/issues/7395): splprep segfaults if fixed knots are specified
  - [\#10761](https://github.com/scipy/scipy/issues/10761): scipy.signal.convolve2d produces incorrect values for large arrays
  - [\#11971](https://github.com/scipy/scipy/issues/11971): DOC: search in devdocs returns wrong link
  - [\#12155](https://github.com/scipy/scipy/issues/12155): BUG: Fix permutation of distance matrices in scipy.stats.multiscale\_graphcorr
  - [\#12203](https://github.com/scipy/scipy/issues/12203): Unable to install on PyPy 7.3.1 (Python 3.6.9)
  - [\#12316](https://github.com/scipy/scipy/issues/12316): negative scipy.spatial.distance.correlation
  - [\#12422](https://github.com/scipy/scipy/issues/12422): BUG: slsqp: ValueError: failed to initialize intent(inout) array...
  - [\#12428](https://github.com/scipy/scipy/issues/12428): stats.truncnorm.rvs() never returns a scalar in 1.5
  - [\#12441](https://github.com/scipy/scipy/issues/12441): eigvalsh inconsistent eigvals= subset\_by\_index=
  - [\#12445](https://github.com/scipy/scipy/issues/12445): DOC: scipy.linalg.eigh
  - [\#12449](https://github.com/scipy/scipy/issues/12449): Warnings are not filtered in csr\_matrix.sum()
  - [\#12469](https://github.com/scipy/scipy/issues/12469): SciPy 1.9 exception in LSQSphereBivariateSpline
  - [\#12487](https://github.com/scipy/scipy/issues/12487): BUG: optimize: incorrect result from approx\_fprime
  - [\#12493](https://github.com/scipy/scipy/issues/12493): CI: GitHub Actions for maintenance branches
  - [\#12533](https://github.com/scipy/scipy/issues/12533): eigh gives incorrect results
  - [\#12579](https://github.com/scipy/scipy/issues/12579): BLD, MAINT: distutils issues in wheels repo

### Pull requests for 1.5.2

  - [\#12156](https://github.com/scipy/scipy/pull/12156): BUG: Fix permutation of distance matrices in scipy.stats.multiscale\_graphcorr
  - [\#12238](https://github.com/scipy/scipy/pull/12238): BUG: Use 64-bit indexing in convolve2d to avoid overflow
  - [\#12256](https://github.com/scipy/scipy/pull/12256): BLD: Build lsap as a single extension instead of extension +...
  - [\#12320](https://github.com/scipy/scipy/pull/12320): BUG: spatial: avoid returning negative correlation distance
  - [\#12383](https://github.com/scipy/scipy/pull/12383): ENH: Make cKDTree.tree more efficient
  - [\#12392](https://github.com/scipy/scipy/pull/12392): DOC: update scipy-sphinx-theme
  - [\#12430](https://github.com/scipy/scipy/pull/12430): BUG: truncnorm and geninvgauss never return scalars from rvs
  - [\#12437](https://github.com/scipy/scipy/pull/12437): BUG: optimize: cast bounds to floats in new\_bounds\_to\_old/old\_bounds\_to\_new
  - [\#12442](https://github.com/scipy/scipy/pull/12442): MAINT:linalg: Fix for input args of eigvalsh
  - [\#12461](https://github.com/scipy/scipy/pull/12461): MAINT: sparse: write matrix/asmatrix wrappers without warning...
  - [\#12478](https://github.com/scipy/scipy/pull/12478): BUG: fix array\_like input defects and add tests for all functions...
  - [\#12488](https://github.com/scipy/scipy/pull/12488): BUG: fix approx\_derivative step size. Closes \#12487
  - [\#12500](https://github.com/scipy/scipy/pull/12500): CI: actions branch trigger fix
  - [\#12501](https://github.com/scipy/scipy/pull/12501): CI: actions branch trigger fix
  - [\#12504](https://github.com/scipy/scipy/pull/12504): BUG: cKDTreeNode use after free
  - [\#12529](https://github.com/scipy/scipy/pull/12529): MAINT: allow graceful docs re-upload
  - [\#12538](https://github.com/scipy/scipy/pull/12538): BUG:linalg: eigh type parameter handling corrected
  - [\#12560](https://github.com/scipy/scipy/pull/12560): MAINT: truncnorm.rvs compatibility for \`Generator\`
  - [\#12562](https://github.com/scipy/scipy/pull/12562): redo gh-12188: fix segfaults in splprep with fixed knots
  - [\#12586](https://github.com/scipy/scipy/pull/12586): BLD: Add -std=c99 to sigtools to compile with C99
  - [\#12590](https://github.com/scipy/scipy/pull/12590): CI: Add GCC 4.8 entry to travis build matrix
  - [\#12591](https://github.com/scipy/scipy/pull/12591): BLD: fix cython error on master-branch cython

---

1.5.3-notes.md

---

# SciPy 1.5.3 Release Notes

<div class="contents">

</div>

SciPy 1.5.3 is a bug-fix release with no new features compared to 1.5.2. In particular, Linux ARM64 wheels are now available and a compatibility issue with XCode 12 has been fixed.

## Authors

  - Peter Bell
  - CJ Carey
  - Thomas Duvernay +
  - Gregory Lee
  - Eric Moore
  - odidev
  - Dima Pasechnik
  - Tyler Reddy
  - Simon Segerblom Rex +
  - Daniel B. Smith
  - Will Tirone +
  - Warren Weckesser

A total of 12 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.5.3

  - [\#9611](https://github.com/scipy/scipy/issues/9611): Overflow error with new way of p-value calculation in kendall...
  - [\#10069](https://github.com/scipy/scipy/issues/10069): scipy.ndimage.watershed\_ift regression in 1.0.0
  - [\#11260](https://github.com/scipy/scipy/issues/11260): BUG: DOP853 with complex data computes complex error norm, causing...
  - [\#11479](https://github.com/scipy/scipy/issues/11479): RuntimeError: dictionary changed size during iteration on loading...
  - [\#11972](https://github.com/scipy/scipy/issues/11972): BUG (solved): Error estimation in DOP853 ODE solver fails for...
  - [\#12543](https://github.com/scipy/scipy/issues/12543): BUG: Picture rotated 180 degrees and rotated -180 degrees should...
  - [\#12613](https://github.com/scipy/scipy/issues/12613): Travis X.4 and X.7 failures in master
  - [\#12654](https://github.com/scipy/scipy/issues/12654): scipy.stats.combine\_pvalues produces wrong results with method='mudholkar\_george'
  - [\#12819](https://github.com/scipy/scipy/issues/12819): BUG: Scipy Sparse slice indexing assignment Bug with zeros
  - [\#12834](https://github.com/scipy/scipy/issues/12834): BUG: ValueError upon calling Scipy Interpolator objects
  - [\#12836](https://github.com/scipy/scipy/issues/12836): ndimage.median can return incorrect values for integer inputs
  - [\#12860](https://github.com/scipy/scipy/issues/12860): Build failure with Xcode 12

### Pull requests for 1.5.3

  - [\#12611](https://github.com/scipy/scipy/pull/12611): MAINT: prepare for SciPy 1.5.3
  - [\#12614](https://github.com/scipy/scipy/pull/12614): MAINT: prevent reverse broadcasting
  - [\#12617](https://github.com/scipy/scipy/pull/12617): MAINT: optimize: Handle nonscalar size 1 arrays in fmin\_slsqp...
  - [\#12623](https://github.com/scipy/scipy/pull/12623): MAINT: stats: Loosen some test tolerances.
  - [\#12638](https://github.com/scipy/scipy/pull/12638): CI, MAINT: pin pytest for Azure win
  - [\#12668](https://github.com/scipy/scipy/pull/12668): BUG: Ensure factorial is not too large in mstats.kendalltau
  - [\#12705](https://github.com/scipy/scipy/pull/12705): MAINT: \`openblas\_support\` added sha256 hash
  - [\#12706](https://github.com/scipy/scipy/pull/12706): BUG: fix incorrect 1d case of the fourier\_ellipsoid filter
  - [\#12721](https://github.com/scipy/scipy/pull/12721): BUG: use special.sindg in ndimage.rotate
  - [\#12724](https://github.com/scipy/scipy/pull/12724): BUG: per \#12654 adjusted mudholkar\_george method to combine p...
  - [\#12726](https://github.com/scipy/scipy/pull/12726): BUG: Fix DOP853 error norm for complex problems
  - [\#12730](https://github.com/scipy/scipy/pull/12730): CI: pin xdist for Azure windows
  - [\#12786](https://github.com/scipy/scipy/pull/12786): BUG: stats: Fix formula in the \`stats\` method of the ARGUS...
  - [\#12795](https://github.com/scipy/scipy/pull/12795): CI: Pin setuptools on windows CI
  - [\#12830](https://github.com/scipy/scipy/pull/12830): \[BUG\] sparse: Avoid using size attribute in LIL \_\_setitem\_\_
  - [\#12833](https://github.com/scipy/scipy/pull/12833): BUG: change list of globals items to list of a copy
  - [\#12842](https://github.com/scipy/scipy/pull/12842): BUG: Use uint16 for cost in NI\_WatershedElement
  - [\#12845](https://github.com/scipy/scipy/pull/12845): BUG: avoid boolean or integer addition error in ndimage.measurements.median
  - [\#12864](https://github.com/scipy/scipy/pull/12864): BLD: replace the \#include of libqull\_r.h with with this of qhull\_ra.h...
  - [\#12867](https://github.com/scipy/scipy/pull/12867): BUG: Fixes a ValueError yielded upon calling Scipy Interpolator...
  - [\#12902](https://github.com/scipy/scipy/pull/12902): CI: Remove 'env' from pytest.ini
  - [\#12913](https://github.com/scipy/scipy/pull/12913): MAINT: Ignore pytest's PytestConfigWarning

---

1.5.4-notes.md

---

# SciPy 1.5.4 Release Notes

<div class="contents">

</div>

SciPy 1.5.4 is a bug-fix release with no new features compared to 1.5.3. Importantly, wheels are now available for Python 3.9 and a more complete fix has been applied for issues building with XCode 12.

## Authors

  - Peter Bell
  - CJ Carey
  - Andrew McCluskey +
  - Andrew Nelson
  - Tyler Reddy
  - Eli Rykoff +
  - Ian Thomas +

A total of 7 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.5.4

  - [\#12763](https://github.com/scipy/scipy/issues/12763): ndimage.fourier\_ellipsoid segmentation fault
  - [\#12789](https://github.com/scipy/scipy/issues/12789): TestConvolve2d.test\_large\_array failing on Windows ILP64 CI job
  - [\#12857](https://github.com/scipy/scipy/issues/12857): sparse A\[0,:\] = ndarray is ok, A\[:,0\] = ndarray ValueError from...
  - [\#12860](https://github.com/scipy/scipy/issues/12860): BUG: Build failure with Xcode 12
  - [\#12935](https://github.com/scipy/scipy/issues/12935): Failure to build with Python 3.9.0 on macOS
  - [\#12966](https://github.com/scipy/scipy/issues/12966): MAINT: lint\_diff.py on some backport PRs
  - [\#12988](https://github.com/scipy/scipy/issues/12988): BUG: Highly multi-dimensional \`gaussian\_kde\` giving \`-inf\`...

### Pull requests for 1.5.4

  - [\#12790](https://github.com/scipy/scipy/pull/12790): TST: Skip TestConvolve2d.test\_large\_array if not enough memory
  - [\#12851](https://github.com/scipy/scipy/pull/12851): BUG: sparse: fix inner indexed assignment of a 1d array
  - [\#12875](https://github.com/scipy/scipy/pull/12875): BUG: segfault in ndimage.fourier\_ellipsoid with length-1 dims
  - [\#12937](https://github.com/scipy/scipy/pull/12937): CI: macOS3.9 testing
  - [\#12957](https://github.com/scipy/scipy/pull/12957): MAINT: fixes XCode 12/ python 3.9.0 build for 1.5.x maint branch
  - [\#12959](https://github.com/scipy/scipy/pull/12959): CI: add Windows Python 3.9 to CI
  - [\#12974](https://github.com/scipy/scipy/pull/12974): MAINT: Run lint\_diff.py against the merge target and only for...
  - [\#12978](https://github.com/scipy/scipy/pull/12978): DOC: next\_fast\_len output doesn't match docstring
  - [\#12979](https://github.com/scipy/scipy/pull/12979): BUG: fft.next\_fast\_len should accept keyword arguments
  - [\#12989](https://github.com/scipy/scipy/pull/12989): BUG: improved the stability of kde for highly (1000s) multi-dimension...
  - [\#13017](https://github.com/scipy/scipy/pull/13017): BUG: Add explicit cast to \_tmp sum.
  - [\#13022](https://github.com/scipy/scipy/pull/13022): TST: xfail test\_maxiter\_worsening()

---

1.6.0-notes.md

---

# SciPy 1.6.0 Release Notes

<div class="contents">

</div>

SciPy 1.6.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.6.x branch, and on adding new features on the master branch.

This release requires Python 3.7+ and NumPy 1.16.5 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - <span class="title-ref">scipy.ndimage</span> improvements: Fixes and ehancements to boundary extension modes for interpolation functions. Support for complex-valued inputs in many filtering and interpolation functions. New `grid_mode` option for <span class="title-ref">scipy.ndimage.zoom</span> to enable results consistent with scikit-image's `rescale`.
  - <span class="title-ref">scipy.optimize.linprog</span> has fast, new methods for large, sparse problems from the `HiGHS` library.
  - <span class="title-ref">scipy.stats</span> improvements including new distributions, a new test, and enhancements to existing distributions and tests

### New features

## <span class="title-ref">scipy.special</span> improvements

<span class="title-ref">scipy.special</span> now has improved support for 64-bit `LAPACK` backend

## <span class="title-ref">scipy.odr</span> improvements

<span class="title-ref">scipy.odr</span> now has support for 64-bit integer `BLAS`

<span class="title-ref">scipy.odr.ODR</span> has gained an optional `overwrite` argument so that existing files may be overwritten.

## <span class="title-ref">scipy.integrate</span> improvements

Some renames of functions with poor names were done, with the old names retained without being in the reference guide for backwards compatibility reasons: - `integrate.simps` was renamed to `integrate.simpson` - `integrate.trapz` was renamed to `integrate.trapezoid` - `integrate.cumtrapz` was renamed to `integrate.cumulative_trapezoid`

## <span class="title-ref">scipy.cluster</span> improvements

<span class="title-ref">scipy.cluster.hierarchy.DisjointSet</span> has been added for incremental connectivity queries.

<span class="title-ref">scipy.cluster.hierarchy.dendrogram</span> return value now also includes leaf color information in <span class="title-ref">leaves\_color\_list</span>.

## <span class="title-ref">scipy.interpolate</span> improvements

<span class="title-ref">scipy.interpolate.interp1d</span> has a new method `nearest-up`, similar to the existing method `nearest` but rounds half-integers up instead of down.

## <span class="title-ref">scipy.io</span> improvements

Support has been added for reading arbitrary bit depth integer PCM WAV files from 1- to 32-bit, including the commonly-requested 24-bit depth.

## <span class="title-ref">scipy.linalg</span> improvements

The new function <span class="title-ref">scipy.linalg.matmul\_toeplitz</span> uses the FFT to compute the product of a Toeplitz matrix with another matrix.

<span class="title-ref">scipy.linalg.sqrtm</span> and <span class="title-ref">scipy.linalg.logm</span> have performance improvements thanks to additional Cython code.

Python `LAPACK` wrappers have been added for `pptrf`, `pptrs`, `ppsv`, `pptri`, and `ppcon`.

<span class="title-ref">scipy.linalg.norm</span> and the `svd` family of functions will now use 64-bit integer backends when available.

## <span class="title-ref">scipy.ndimage</span> improvements

<span class="title-ref">scipy.ndimage.convolve</span>, <span class="title-ref">scipy.ndimage.correlate</span> and their 1d counterparts now accept both complex-valued images and/or complex-valued filter kernels. All convolution-based filters also now accept complex-valued inputs (e.g. `gaussian_filter`, `uniform_filter`, etc.).

Multiple fixes and enhancements to boundary handling were introduced to <span class="title-ref">scipy.ndimage</span> interpolation functions (i.e. `affine_transform`, `geometric_transform`, `map_coordinates`, `rotate`, `shift`, `zoom`).

A new boundary mode, `grid-wrap` was added which wraps images periodically, using a period equal to the shape of the input image grid. This is in contrast to the existing `wrap` mode which uses a period that is one sample smaller than the original signal extent along each dimension.

A long-standing bug in the `reflect` boundary condition has been fixed and the mode `grid-mirror` was introduced as a synonym for `reflect`.

A new boundary mode, `grid-constant` is now available. This is similar to the existing ndimage `constant` mode, but interpolation will still performed at coordinate values outside of the original image extent. This `grid-constant` mode is consistent with OpenCV's `BORDER_CONSTANT` mode and scikit-image's `constant` mode.

Spline pre-filtering (used internally by `ndimage` interpolation functions when `order >= 2`), now supports all boundary modes rather than always defaulting to mirror boundary conditions. The standalone functions `spline_filter` and `spline_filter1d` have analytical boundary conditions that match modes `mirror`, `grid-wrap` and `reflect`.

<span class="title-ref">scipy.ndimage</span> interpolation functions now accept complex-valued inputs. In this case, the interpolation is applied independently to the real and imaginary components.

The `ndimage` tutorials (<https://docs.scipy.org/doc/scipy/reference/tutorial/ndimage.html>) have been updated with new figures to better clarify the exact behavior of all of the interpolation boundary modes.

<span class="title-ref">scipy.ndimage.zoom</span> now has a `grid_mode` option that changes the coordinate of the center of the first pixel along an axis from 0 to 0.5. This allows resizing in a manner that is consistent with the behavior of scikit-image's `resize` and `rescale` functions (and OpenCV's `cv2.resize`).

## <span class="title-ref">scipy.optimize</span> improvements

<span class="title-ref">scipy.optimize.linprog</span> has fast, new methods for large, sparse problems from the `HiGHS` C++ library. `method='highs-ds'` uses a high performance dual revised simplex implementation (HSOL), `method='highs-ipm'` uses an interior-point method with crossover, and `method='highs'` chooses between the two automatically. These methods are typically much faster and often exceed the accuracy of other `linprog` methods, so we recommend explicitly specifying one of these three method values when using `linprog`.

<span class="title-ref">scipy.optimize.quadratic\_assignment</span> has been added for approximate solution of the quadratic assignment problem.

<span class="title-ref">scipy.optimize.linear\_sum\_assignment</span> now has a substantially reduced overhead for small cost matrix sizes

<span class="title-ref">scipy.optimize.least\_squares</span> has improved performance when the user provides the jacobian as a sparse jacobian already in `csr_matrix` format

<span class="title-ref">scipy.optimize.linprog</span> now has an `rr_method` argument for specification of the method used for redundancy handling, and a new method for this purpose is available based on the interpolative decomposition approach.

## <span class="title-ref">scipy.signal</span> improvements

<span class="title-ref">scipy.signal.gammatone</span> has been added to design FIR or IIR filters that model the human auditory system.

<span class="title-ref">scipy.signal.iircomb</span> has been added to design IIR peaking/notching comb filters that can boost/attenuate a frequency from a signal.

<span class="title-ref">scipy.signal.sosfilt</span> performance has been improved to avoid some previously-observed slowdowns

<span class="title-ref">scipy.signal.windows.taylor</span> has been added--the Taylor window function is commonly used in radar digital signal processing

<span class="title-ref">scipy.signal.gauss\_spline</span> now supports `list` type input for consistency with other related SciPy functions

<span class="title-ref">scipy.signal.correlation\_lags</span> has been added to allow calculation of the lag/ displacement indices array for 1D cross-correlation.

## <span class="title-ref">scipy.sparse</span> improvements

A solver for the minimum weight full matching problem for bipartite graphs, also known as the linear assignment problem, has been added in <span class="title-ref">scipy.sparse.csgraph.min\_weight\_full\_bipartite\_matching</span>. In particular, this provides functionality analogous to that of <span class="title-ref">scipy.optimize.linear\_sum\_assignment</span>, but with improved performance for sparse inputs, and the ability to handle inputs whose dense representations would not fit in memory.

The time complexity of <span class="title-ref">scipy.sparse.block\_diag</span> has been improved dramatically from quadratic to linear.

## <span class="title-ref">scipy.sparse.linalg</span> improvements

The vendored version of `SuperLU` has been updated

## <span class="title-ref">scipy.fft</span> improvements

The vendored `pocketfft` library now supports compiling with ARM neon vector extensions and has improved thread pool behavior.

## <span class="title-ref">scipy.spatial</span> improvements

The python implementation of `KDTree` has been dropped and `KDTree` is now implemented in terms of `cKDTree`. You can now expect `cKDTree`-like performance by default. This also means `sys.setrecursionlimit` no longer needs to be increased for querying large trees.

`transform.Rotation` has been updated with support for Modified Rodrigues Parameters alongside the existing rotation representations (PR gh-12667).

<span class="title-ref">scipy.spatial.transform.Rotation</span> has been partially cythonized, with some performance improvements observed

<span class="title-ref">scipy.spatial.distance.cdist</span> has improved performance with the `minkowski` metric, especially for p-norm values of 1 or 2.

## <span class="title-ref">scipy.stats</span> improvements

New distributions have been added to \`scipy.stats\`:

  - The asymmetric Laplace continuous distribution has been added as <span class="title-ref">scipy.stats.laplace\_asymmetric</span>.
  - The negative hypergeometric distribution has been added as <span class="title-ref">scipy.stats.nhypergeom</span>.
  - The multivariate t distribution has been added as <span class="title-ref">scipy.stats.multivariate\_t</span>.
  - The multivariate hypergeometric distribution has been added as <span class="title-ref">scipy.stats.multivariate\_hypergeom</span>.

The `fit` method has been overridden for several distributions (`laplace`, `pareto`, `rayleigh`, `invgauss`, `logistic`, `gumbel_l`, `gumbel_r`); they now use analytical, distribution-specific maximum likelihood estimation results for greater speed and accuracy than the generic (numerical optimization) implementation.

The one-sample Cramér-von Mises test has been added as <span class="title-ref">scipy.stats.cramervonmises</span>.

An option to compute one-sided p-values was added to <span class="title-ref">scipy.stats.ttest\_1samp</span>, <span class="title-ref">scipy.stats.ttest\_ind\_from\_stats</span>, <span class="title-ref">scipy.stats.ttest\_ind</span> and <span class="title-ref">scipy.stats.ttest\_rel</span>.

The function <span class="title-ref">scipy.stats.kendalltau</span> now has an option to compute Kendall's tau-c (also known as Stuart's tau-c), and support has been added for exact p-value calculations for sample sizes `> 171`.

<span class="title-ref">stats.trapz</span> was renamed to <span class="title-ref">stats.trapezoid</span>, with the former name retained as an alias for backwards compatibility reasons.

The function <span class="title-ref">scipy.stats.linregress</span> now includes the standard error of the intercept in its return value.

The `_logpdf`, `_sf`, and `_isf` methods have been added to <span class="title-ref">scipy.stats.nakagami</span>; `_sf` and `_isf` methods also added to <span class="title-ref">scipy.stats.gumbel\_r</span>

The `sf` method has been added to <span class="title-ref">scipy.stats.levy</span> and <span class="title-ref">scipy.stats.levy\_l</span> for improved precision.

<span class="title-ref">scipy.stats.binned\_statistic\_dd</span> performance improvements for the following computed statistics: `max`, `min`, `median`, and `std`.

We gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source Software for Science program for supporting many of these improvements to <span class="title-ref">scipy.stats</span>.

### Deprecated features

## <span class="title-ref">scipy.spatial</span> changes

Calling `KDTree.query` with `k=None` to find all neighbours is deprecated. Use `KDTree.query_ball_point` instead.

`distance.wminkowski` was deprecated; use `distance.minkowski` and supply weights with the `w` keyword instead.

### Backwards incompatible changes

## <span class="title-ref">scipy</span> changes

Using <span class="title-ref">scipy.fft</span> as a function aliasing `numpy.fft.fft` was removed after being deprecated in SciPy `1.4.0`. As a result, the <span class="title-ref">scipy.fft</span> submodule must be explicitly imported now, in line with other SciPy subpackages.

## <span class="title-ref">scipy.interpolate</span> changes

## <span class="title-ref">scipy.linalg</span> changes

## <span class="title-ref">scipy.signal</span> changes

The output of `decimate`, `lfilter_zi`, `lfiltic`, `sos2tf`, and `sosfilt_zi` have been changed to match `numpy.result_type` of their inputs.

The window function `slepian` was removed. It had been deprecated since SciPy `1.1`.

## <span class="title-ref">scipy.spatial</span> changes

`cKDTree.query` now returns 64-bit rather than 32-bit integers on Windows, making behaviour consistent between platforms (PR gh-12673).

## <span class="title-ref">scipy.stats</span> changes

The `frechet_l` and `frechet_r` distributions were removed. They were deprecated since SciPy `1.0`.

### Other changes

`setup_requires` was removed from `setup.py`. This means that users invoking `python setup.py install` without having numpy already installed will now get an error, rather than having numpy installed for them via `easy_install`. This install method was always fragile and problematic, users are encouraged to use `pip` when installing from source.

  - Fixed a bug in <span class="title-ref">scipy.optimize.dual\_annealing</span> `accept_reject` calculation that caused uphill jumps to be accepted less frequently.
  - The time required for (un)pickling of <span class="title-ref">scipy.stats.rv\_continuous</span>, <span class="title-ref">scipy.stats.rv\_discrete</span>, and <span class="title-ref">scipy.stats.rv\_frozen</span> has been significantly reduced (gh12550). Inheriting subclasses should note that `__setstate__` no longer calls `__init__` upon unpickling.

### Authors

  - @endolith

  - @vkk800

  - aditya +

  - George Bateman +

  - Christoph Baumgarten

  - Peter Bell

  - Tobias Biester +

  - Keaton J. Burns +

  - Evgeni Burovski

  - Rüdiger Busche +

  - Matthias Bussonnier

  - Dominic C +

  - Corallus Caninus +

  - CJ Carey

  - Thomas A Caswell

  - chapochn +

  - Lucía Cheung

  - Zach Colbert +

  - Coloquinte +

  - Yannick Copin +

  - Devin Crowley +

  - Terry Davis +

  - Michaël Defferrard +

  - devonwp +

  - Didier +

  - divenex +

  - Thomas Duvernay +

  - Eoghan O'Connell +

  - Gökçen Eraslan

  - Kristian Eschenburg +

  - Ralf Gommers

  - Thomas Grainger +

  - GreatV +

  - Gregory Gundersen +

  - h-vetinari +

  - Matt Haberland

  - Mark Harfouche +

  - He He +

  - Alex Henrie

  - Chun-Ming Huang +

  - Martin James McHugh III +

  - Alex Izvorski +

  - Joey +

  - ST John +

  - Jonas Jonker +

  - Julius Bier Kirkegaard

  - Marcin Konowalczyk +

  - Konrad0

  - Sam Van Kooten +

  - Sergey Koposov +

  - Peter Mahler Larsen

  - Eric Larson

  - Antony Lee

  - Gregory R. Lee

  - Loïc Estève

  - Jean-Luc Margot +

  - MarkusKoebis +

  - Nikolay Mayorov

  - 7.  4.  McBain

  - Andrew McCluskey +

  - Nicholas McKibben

  - Sturla Molden

  - Denali Molitor +

  - Eric Moore

  - Shashaank N +

  - Prashanth Nadukandi +

  - nbelakovski +

  - Andrew Nelson

  - Nick +

  - Nikola Forró +

  - odidev

  - ofirr +

  - Sambit Panda

  - Dima Pasechnik

  - Tirth Patel +

  - Matti Picus

  - Paweł Redzyński +

  - Vladimir Philipenko +

  - Philipp Thölke +

  - Ilhan Polat

  - Eugene Prilepin +

  - Vladyslav Rachek

  - Ram Rachum +

  - Tyler Reddy

  - Martin Reinecke +

  - Simon Segerblom Rex +

  - Lucas Roberts

  - Benjamin Rowell +

  - Eli Rykoff +

  - Atsushi Sakai

  - Moritz Schulte +

  - Daniel B. Smith

  - Steve Smith +

  - Jan Soedingrekso +

  - Victor Stinner +

  - Jose Storopoli +

  - Diana Sukhoverkhova +

  - Søren Fuglede Jørgensen

  - taoky +

  - Mike Taves +

  - Ian Thomas +

  - Will Tirone +

  - Frank Torres +

  - Seth Troisi

  - Ronald van Elburg +

  - Hugo van Kemenade

  - Paul van Mulbregt

  - Saul Ivan Rivas Vega +

  - Pauli Virtanen

  - Jan Vleeshouwers

  - Samuel Wallan

  - Warren Weckesser

  - Ben West +

  - Eric Wieser

  - WillTirone +

  - Levi John Wolf +

  - Zhiqing Xiao

  - Rory Yorke +

  - Yun Wang (Maigo) +

  - Egor Zemlyanoy +

  - ZhihuiChen0903 +

  - Jacob Zhong +

A total of 122 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.6.0

  - [\#1323](https://github.com/scipy/scipy/issues/1323): ndimage.shift destroys data from edges (Trac \#796)
  - [\#1892](https://github.com/scipy/scipy/issues/1892): using rptfile= with an existing file causes a Fortran runtime...
  - [\#1903](https://github.com/scipy/scipy/issues/1903): ndimage.rotate misses some values (Trac \#1378)
  - [\#1930](https://github.com/scipy/scipy/issues/1930): scipy.io.wavfile should be able to read 24 bit signed wave (Trac...
  - [\#3158](https://github.com/scipy/scipy/issues/3158): Odd casting behaviour of signal.filtfilt
  - [\#3203](https://github.com/scipy/scipy/issues/3203): interpolation.zoom incorrect output for certain cases
  - [\#3645](https://github.com/scipy/scipy/issues/3645): BUG: stats: mstats.pearsonr calculation is wrong if the masks...
  - [\#3665](https://github.com/scipy/scipy/issues/3665): Return Bunch objects from stats functions
  - [\#4922](https://github.com/scipy/scipy/issues/4922): unexpected zero output values from zoom
  - [\#5202](https://github.com/scipy/scipy/issues/5202): BUG: stats: Spurious warnings from the pdf method of several...
  - [\#5223](https://github.com/scipy/scipy/issues/5223): Zoom does not return the same values when resizing a sub-array...
  - [\#5396](https://github.com/scipy/scipy/issues/5396): scipy.spatial.distance.pdist documention bug
  - [\#5489](https://github.com/scipy/scipy/issues/5489): ValueError: failed to create intent(cacheoptional array--...
  - [\#6096](https://github.com/scipy/scipy/issues/6096): loadmat drops dtype of empty arrays when squeeze\_me=True
  - [\#6713](https://github.com/scipy/scipy/issues/6713): sicpy.ndimage.zoom returns artefacts and boundaries in some cases
  - [\#7125](https://github.com/scipy/scipy/issues/7125): Impossible to know number of dimensions in c function used by...
  - [\#7324](https://github.com/scipy/scipy/issues/7324): scipy.ndimage.zoom bad interpolation when downsampling (zoom...
  - [\#8131](https://github.com/scipy/scipy/issues/8131): BUG: geometric\_transform wrap mode possible bug
  - [\#8163](https://github.com/scipy/scipy/issues/8163): LSMR fails on some random values when providing an x0
  - [\#8210](https://github.com/scipy/scipy/issues/8210): Why should I choose order \> 1 for scipy.ndimage.zoom?
  - [\#8465](https://github.com/scipy/scipy/issues/8465): Unexpected behavior with reflect mode of ndimage.rotate
  - [\#8776](https://github.com/scipy/scipy/issues/8776): cdist behavior with Minkowsky and np.inf
  - [\#9168](https://github.com/scipy/scipy/issues/9168): documentation of pearson3 in scipy.stats unclear
  - [\#9223](https://github.com/scipy/scipy/issues/9223): Faster implementation of scipy.sparse.block\_diag
  - [\#9476](https://github.com/scipy/scipy/issues/9476): Invalid index in signal.medfilt2d's QUICK\_SELECT
  - [\#9857](https://github.com/scipy/scipy/issues/9857): scipy.odr.Output.sd\_beta is not standard error
  - [\#9865](https://github.com/scipy/scipy/issues/9865): Strange behavior of \`ndimage.shift\` and \`ndimage.affine\_transform\`
  - [\#10042](https://github.com/scipy/scipy/issues/10042): Consider support for multivariate student-t distribution?
  - [\#10134](https://github.com/scipy/scipy/issues/10134): gausshyper distribution accepts invalid parameters
  - [\#10179](https://github.com/scipy/scipy/issues/10179): str+bytes concatenation error in test\_lapack.py
  - [\#10216](https://github.com/scipy/scipy/issues/10216): cKDTree.query\_ball\_point speed regression
  - [\#10463](https://github.com/scipy/scipy/issues/10463): ENH: vectorize scipy.fft for more CPU architectures
  - [\#10593](https://github.com/scipy/scipy/issues/10593): Rename \`sum\` ndimage function
  - [\#10595](https://github.com/scipy/scipy/issues/10595): scipy.stats.ttest\_1samp should support alternative hypothesis
  - [\#10610](https://github.com/scipy/scipy/issues/10610): ndimage.interpolation.spline\_filter1d default value of mode
  - [\#10620](https://github.com/scipy/scipy/issues/10620): ndimage.interpolation.zoom() option to work like skimage.transform.resize()
  - [\#10711](https://github.com/scipy/scipy/issues/10711): Array Shapes Not Aligned Bug in scipy.optimize.\_lsq.lsq\_linear.py
  - [\#10782](https://github.com/scipy/scipy/issues/10782): BUG: optimize: methods unknown to \`scipy.optimize.show\_options\`
  - [\#10892](https://github.com/scipy/scipy/issues/10892): Possible typo in an equation of optimize/dual\_annealing
  - [\#11020](https://github.com/scipy/scipy/issues/11020): signal.fftconvolve return a tuple including lag information
  - [\#11093](https://github.com/scipy/scipy/issues/11093): scipy.interpolate.interp1d can not handle datetime64
  - [\#11170](https://github.com/scipy/scipy/issues/11170): Use manylinux2014 to get aarch64/ppc64le support
  - [\#11186](https://github.com/scipy/scipy/issues/11186): BUG: stats: pearson3 CDF and SF functions incorrect when skew...
  - [\#11366](https://github.com/scipy/scipy/issues/11366): DeprecationWarning due to invalid escape sequences
  - [\#11403](https://github.com/scipy/scipy/issues/11403): Optimize raises "ValueError: \`x0\` violates bound constraints"...
  - [\#11558](https://github.com/scipy/scipy/issues/11558): ENH: IIR comb filter
  - [\#11559](https://github.com/scipy/scipy/issues/11559): BUG: iirdesign doesn't fail for frequencies above Nyquist
  - [\#11567](https://github.com/scipy/scipy/issues/11567): scipy.signal.iirdesign doesn't check consistency of wp and ws...
  - [\#11654](https://github.com/scipy/scipy/issues/11654): ENH: Add Negative Hypergeometric Distribution
  - [\#11720](https://github.com/scipy/scipy/issues/11720): BUG: stats: wrong shape from median\_absolute\_deviation for arrays...
  - [\#11746](https://github.com/scipy/scipy/issues/11746): BUG: stats: pearson3 returns size 1 arrays where other distributions...
  - [\#11756](https://github.com/scipy/scipy/issues/11756): Improve and fix \*Spline docstrings and code
  - [\#11758](https://github.com/scipy/scipy/issues/11758): BUG: of scipy.interpolate.CubicSpline when \`bc\_type' is set...
  - [\#11925](https://github.com/scipy/scipy/issues/11925): MAINT: remove character encoding check in CI?
  - [\#11963](https://github.com/scipy/scipy/issues/11963): Test failures - TestLinprogIPSparseCholmod
  - [\#12102](https://github.com/scipy/scipy/issues/12102): incorrect first moment of non central t-distribution
  - [\#12113](https://github.com/scipy/scipy/issues/12113): scipy.stats.poisson docs for rate = 0
  - [\#12152](https://github.com/scipy/scipy/issues/12152): ENH: signal.gauss\_spline should accept a list
  - [\#12157](https://github.com/scipy/scipy/issues/12157): BUG: Iteration index initialisation is wrong in scipy.optimize.linesearch.scalar\_search\_wolfe2
  - [\#12162](https://github.com/scipy/scipy/issues/12162): Storing Rotation object in NumPy array returns an array with...
  - [\#12176](https://github.com/scipy/scipy/issues/12176): cannot modify the slice of an array returned by \`wavfile.read\`
  - [\#12190](https://github.com/scipy/scipy/issues/12190): retrieve leave colors from dendrogram
  - [\#12196](https://github.com/scipy/scipy/issues/12196): PERF: scipy.linalg.pinv is very slow compared to numpy.linalg.pinv
  - [\#12222](https://github.com/scipy/scipy/issues/12222): Interpolating categorical data (interp1d)
  - [\#12231](https://github.com/scipy/scipy/issues/12231): Is the p-value of the Kruskal-Wallis test two-sided?
  - [\#12249](https://github.com/scipy/scipy/issues/12249): ENH: least\_squares: should not re-instanciate csr\_matrix if already...
  - [\#12264](https://github.com/scipy/scipy/issues/12264): DOC: optimize: linprog method-specific function signature
  - [\#12290](https://github.com/scipy/scipy/issues/12290): DOC: Convex Hull areas are actually perimeters for 2-dimensional...
  - [\#12308](https://github.com/scipy/scipy/issues/12308): integrate.solve\_ivp with DOP853 method fails when yDot = 0
  - [\#12326](https://github.com/scipy/scipy/issues/12326): BUG: stats.exponnorm.pdf returns 0 for small K
  - [\#12337](https://github.com/scipy/scipy/issues/12337): scipy.sparse.linalg.eigsh documentation is misleading
  - [\#12339](https://github.com/scipy/scipy/issues/12339): scipy.io.wavfile.write documentation has wrong example
  - [\#12340](https://github.com/scipy/scipy/issues/12340): sparse.lil\_matrix.tocsr() fails silently on matrices with nzn...
  - [\#12350](https://github.com/scipy/scipy/issues/12350): Create a 2-parameter version of the gamma distribution
  - [\#12369](https://github.com/scipy/scipy/issues/12369): scipy.signal.correlate has an error in the documentation, examples...
  - [\#12373](https://github.com/scipy/scipy/issues/12373): interp1d returns incorrect values for step functions
  - [\#12378](https://github.com/scipy/scipy/issues/12378): interpolate.NearestNDInterpolator.\_\_call\_\_ & LinearNDInterpolator.\_\_call\_\_...
  - [\#12411](https://github.com/scipy/scipy/issues/12411): scipy.stats.spearmanr mishandles nan variables with "propogate"
  - [\#12413](https://github.com/scipy/scipy/issues/12413): DOC: Remove the "Basic functions" section from the SciPy tutorial.
  - [\#12415](https://github.com/scipy/scipy/issues/12415): scipy.stats.dirichlet documentation issue
  - [\#12419](https://github.com/scipy/scipy/issues/12419): least\_squares ValueError with 'lm' method - regression from 1.4.1...
  - [\#12431](https://github.com/scipy/scipy/issues/12431): Request for Python wrapper for LAPACK's ?pptrf (Cholesky factorization...
  - [\#12458](https://github.com/scipy/scipy/issues/12458): spearmanr with entire NaN columns produces errors
  - [\#12477](https://github.com/scipy/scipy/issues/12477): WIP: Addition of MLE for stats.invgauss/wald
  - [\#12483](https://github.com/scipy/scipy/issues/12483): reading .wav fails when the file is too big on python 3.6.0
  - [\#12490](https://github.com/scipy/scipy/issues/12490): BUG: stats: logistic and genlogistic logpdf overflow for large...
  - [\#12499](https://github.com/scipy/scipy/issues/12499): LinearNDInterpolator raises ValueError when value array has writeable=False...
  - [\#12523](https://github.com/scipy/scipy/issues/12523): Wrong key in \_\_odrpack.c
  - [\#12547](https://github.com/scipy/scipy/issues/12547): typo in scipy/cluster/\_hierarchy.pyx
  - [\#12549](https://github.com/scipy/scipy/issues/12549): DOC: least\_squares return type is poorly formatted.
  - [\#12578](https://github.com/scipy/scipy/issues/12578): TST: test\_bounds\_infeasible\_2 failing on wheels repo cron jobs
  - [\#12585](https://github.com/scipy/scipy/issues/12585): ENH: Add Multivariate Hypergeometric Distribution
  - [\#12604](https://github.com/scipy/scipy/issues/12604): unintuitive conversion in \`scipy.constants.lambda2nu\`
  - [\#12606](https://github.com/scipy/scipy/issues/12606): DOC: Invalid syntax in example.
  - [\#12665](https://github.com/scipy/scipy/issues/12665): List of possible bugs found by automated code analysis
  - [\#12696](https://github.com/scipy/scipy/issues/12696): scipy.optimize.fminbound, numpy depreciation warning Creating...
  - [\#12699](https://github.com/scipy/scipy/issues/12699): TestProjections.test\_iterative\_refinements\_dense failure
  - [\#12701](https://github.com/scipy/scipy/issues/12701): TestDifferentialEvolutionSolver::test\_L4 failing
  - [\#12719](https://github.com/scipy/scipy/issues/12719): Misleading scipy.signal.get\_window() docstring with 'exponential'...
  - [\#12740](https://github.com/scipy/scipy/issues/12740): circstd doesn't handle R = hypot(S, C) \> 1
  - [\#12749](https://github.com/scipy/scipy/issues/12749): ENH: interp1d Matlab compatibility
  - [\#12773](https://github.com/scipy/scipy/issues/12773): Meta-issue: ndimage spline boundary handling (NumFOCUS proposal)
  - [\#12813](https://github.com/scipy/scipy/issues/12813): optimize.root(method="krylov") fails if options\["tol\_norm"\] expects...
  - [\#12815](https://github.com/scipy/scipy/issues/12815): stats.zscore inconsistent behavior when all values are the same
  - [\#12840](https://github.com/scipy/scipy/issues/12840): scipy.signal.windows.dpss docstring typo
  - [\#12874](https://github.com/scipy/scipy/issues/12874): Rotation.random vs stats.special\_ortho\_group
  - [\#12881](https://github.com/scipy/scipy/issues/12881): FFT - documentation - examples - linspace construction
  - [\#12904](https://github.com/scipy/scipy/issues/12904): BUG: parsing in loadarff()
  - [\#12917](https://github.com/scipy/scipy/issues/12917): GitHub Actions nightly build triggered on forks
  - [\#12919](https://github.com/scipy/scipy/issues/12919): BUG: numerical precision, use gammaln in nct.mean
  - [\#12924](https://github.com/scipy/scipy/issues/12924): Rename Sample Based Integration Methods to Comply with Code of...
  - [\#12940](https://github.com/scipy/scipy/issues/12940): Should the minimum numpy for AIX be bumped to 1.16.5
  - [\#12951](https://github.com/scipy/scipy/issues/12951): A possible typo in scipy.stats.weightedtau
  - [\#12952](https://github.com/scipy/scipy/issues/12952): \[Documentation question\] Would it be more precise to specify...
  - [\#12970](https://github.com/scipy/scipy/issues/12970): Documentation presents second order sections as the correct choice...
  - [\#12982](https://github.com/scipy/scipy/issues/12982): Calculate standard error of the intercept in linregress
  - [\#12985](https://github.com/scipy/scipy/issues/12985): Possible wrong link in scipy.stats.wilcoxon doc
  - [\#12991](https://github.com/scipy/scipy/issues/12991): least\_squares broken with float32
  - [\#13001](https://github.com/scipy/scipy/issues/13001): \`OptimizeResult.message\` from \`L-BFGS-B\` is a bytes, not...
  - [\#13030](https://github.com/scipy/scipy/issues/13030): BUG: lint\_diff.py still fails for backport PRs
  - [\#13077](https://github.com/scipy/scipy/issues/13077): CI: codecov proper patch diffs
  - [\#13085](https://github.com/scipy/scipy/issues/13085): Build failing on main branch after HiGHS solver merge
  - [\#13088](https://github.com/scipy/scipy/issues/13088): BLD, BUG: wheel builds failure with HiGHS/optimize
  - [\#13099](https://github.com/scipy/scipy/issues/13099): Wrong output format for empty sparse results of kron
  - [\#13108](https://github.com/scipy/scipy/issues/13108): TST, CI: GitHub Actions MacOS Failures
  - [\#13111](https://github.com/scipy/scipy/issues/13111): BUG, DOC: refguide check is failing
  - [\#13127](https://github.com/scipy/scipy/issues/13127): ODR output file writing broken in conda env with system compilers
  - [\#13134](https://github.com/scipy/scipy/issues/13134): FromTravis migration tracker
  - [\#13140](https://github.com/scipy/scipy/issues/13140): BUG: signal: \`ss2tf\` incorrectly truncates output to integers.
  - [\#13179](https://github.com/scipy/scipy/issues/13179): CI: lint is failing because of output to stderr
  - [\#13182](https://github.com/scipy/scipy/issues/13182): Key appears twice in \`test\_optimize.test\_show\_options\`
  - [\#13191](https://github.com/scipy/scipy/issues/13191): \`scipy.linalg.lapack.dgesjv\` overwrites original arrays if...
  - [\#13207](https://github.com/scipy/scipy/issues/13207): TST: Erratic test failure in test\_cossin\_separate
  - [\#13221](https://github.com/scipy/scipy/issues/13221): BUG: pavement.py glitch
  - [\#13239](https://github.com/scipy/scipy/issues/13239): Segmentation fault with \`eigh(..., driver="evx")\` for 10x10...
  - [\#13248](https://github.com/scipy/scipy/issues/13248): ndimage: improper cval handling for complex-valued inputs

## Pull requests for 1.6.0

  - [\#8032](https://github.com/scipy/scipy/pull/8032): ENH: Add in taylor window common in Radar processing
  - [\#8779](https://github.com/scipy/scipy/pull/8779): CI: Run benchmarks
  - [\#9361](https://github.com/scipy/scipy/pull/9361): ENH: Add Kendall's tau-a and tau-c variants to scipy.stats.kendalltau()
  - [\#11068](https://github.com/scipy/scipy/pull/11068): ENH: Adds correlation\_lags function to scipy.signal
  - [\#11119](https://github.com/scipy/scipy/pull/11119): ENH: add Cramer-von-Mises (one-sample) test to scipy.stats
  - [\#11249](https://github.com/scipy/scipy/pull/11249): ENH: optimize: interpolative decomposition redundancy removal...
  - [\#11346](https://github.com/scipy/scipy/pull/11346): ENH: add fast toeplitz matrix multiplication using FFT
  - [\#11413](https://github.com/scipy/scipy/pull/11413): ENH: Multivariate t-distribution (stale)
  - [\#11563](https://github.com/scipy/scipy/pull/11563): ENH: exact p-value in stats.kendalltau() for sample sizes \> 171
  - [\#11691](https://github.com/scipy/scipy/pull/11691): ENH: add a stack of reversal functions to linprog
  - [\#12043](https://github.com/scipy/scipy/pull/12043): ENH: optimize: add HiGHS methods to linprog - continued
  - [\#12061](https://github.com/scipy/scipy/pull/12061): Check parameter consistensy in signal.iirdesign
  - [\#12067](https://github.com/scipy/scipy/pull/12067): MAINT: Cleanup OLDAPI in ndimage/src/\_ctest.c
  - [\#12069](https://github.com/scipy/scipy/pull/12069): DOC: Add developer guidelines for implementing the nan\_policy...
  - [\#12077](https://github.com/scipy/scipy/pull/12077): MAINT: malloc return value checks for cython
  - [\#12080](https://github.com/scipy/scipy/pull/12080): MAINT: Remove suppress\_warnings
  - [\#12085](https://github.com/scipy/scipy/pull/12085): ENH: special: support ILP64 Lapack
  - [\#12086](https://github.com/scipy/scipy/pull/12086): MAINT: Cleanup PyMODINIT\_FUNC used during 2to3
  - [\#12097](https://github.com/scipy/scipy/pull/12097): ENH: stats: override stats.rayleigh.fit with analytical MLE
  - [\#12112](https://github.com/scipy/scipy/pull/12112): DOC: Improve integrate.nquad docstring
  - [\#12125](https://github.com/scipy/scipy/pull/12125): TST: Add a test for stats.gmean with negative input
  - [\#12139](https://github.com/scipy/scipy/pull/12139): TST: Reduce flakiness in lsmr test
  - [\#12142](https://github.com/scipy/scipy/pull/12142): DOC: add a note in poisson distribution when mu=0 and k=0 in...
  - [\#12144](https://github.com/scipy/scipy/pull/12144): DOC: Update ndimage.morphology.distance\_transform\*
  - [\#12154](https://github.com/scipy/scipy/pull/12154): ENH: scipy.signal: allow lists in gauss\_spline
  - [\#12170](https://github.com/scipy/scipy/pull/12170): ENH: scipy.stats: add negative hypergeometric distribution
  - [\#12177](https://github.com/scipy/scipy/pull/12177): MAINT: Correctly add input line to ValueError
  - [\#12183](https://github.com/scipy/scipy/pull/12183): ENH: Use fromfile where possible
  - [\#12186](https://github.com/scipy/scipy/pull/12186): MAINT: generalize tests in SphericalVoronoi
  - [\#12198](https://github.com/scipy/scipy/pull/12198): TST: Fix str + bytes error
  - [\#12199](https://github.com/scipy/scipy/pull/12199): ENH: match np.result\_type behaviour in some scipy.signal functions
  - [\#12200](https://github.com/scipy/scipy/pull/12200): ENH: add FIR and IIR gammatone filters to scipy.signal
  - [\#12204](https://github.com/scipy/scipy/pull/12204): ENH: Add overwrite argument for odr.ODR() and its test.
  - [\#12206](https://github.com/scipy/scipy/pull/12206): MAINT:lstsq: Switch to tranposed problem if the array is tall
  - [\#12208](https://github.com/scipy/scipy/pull/12208): wavfile bugfixes and maintenance
  - [\#12214](https://github.com/scipy/scipy/pull/12214): DOC: fix docstring of "sd\_beta" of odr.Output.
  - [\#12234](https://github.com/scipy/scipy/pull/12234): MAINT: prevent divide by zero warnings in scipy.optimize BFGS...
  - [\#12235](https://github.com/scipy/scipy/pull/12235): REL: set version to 1.6.0.dev0
  - [\#12237](https://github.com/scipy/scipy/pull/12237): BUG: Fix exit condition for QUICK\_SELECT pivot
  - [\#12242](https://github.com/scipy/scipy/pull/12242): ENH: Rename ndimage.sum to ndimage.sum\_labels (keep sum as alias)
  - [\#12243](https://github.com/scipy/scipy/pull/12243): EHN: Update SuperLU
  - [\#12244](https://github.com/scipy/scipy/pull/12244): MAINT: stats: avoid spurious warnings in ncx2.pdf
  - [\#12245](https://github.com/scipy/scipy/pull/12245): DOC: Fixed incorrect default for mode in scipy.ndimage.spline\_filter1d
  - [\#12248](https://github.com/scipy/scipy/pull/12248): MAINT: clean up pavement.py
  - [\#12250](https://github.com/scipy/scipy/pull/12250): ENH: Replaced csr\_matrix() by tocsr() and complemented docstring
  - [\#12253](https://github.com/scipy/scipy/pull/12253): TST, CI: turn on codecov patch diffs
  - [\#12259](https://github.com/scipy/scipy/pull/12259): MAINT: Remove duplicated test for import cycles
  - [\#12263](https://github.com/scipy/scipy/pull/12263): ENH: Rename LocalSearchWrapper bounds
  - [\#12265](https://github.com/scipy/scipy/pull/12265): BUG optimize: Accept np.matrix in lsq\_linear
  - [\#12266](https://github.com/scipy/scipy/pull/12266): BUG: Fix paren error in dual annealing accept\_reject calculation
  - [\#12269](https://github.com/scipy/scipy/pull/12269): MAINT: Included mismatched shapes in error messages.
  - [\#12279](https://github.com/scipy/scipy/pull/12279): MAINT: \`\_\_array\_\_\` and array protocols cannot be used in sparse.
  - [\#12281](https://github.com/scipy/scipy/pull/12281): DOC: update wheel DL docs
  - [\#12283](https://github.com/scipy/scipy/pull/12283): ENH: odr: ILP64 Blas support in ODR
  - [\#12284](https://github.com/scipy/scipy/pull/12284): ENH: linalg: support for ILP64 BLAS/LAPACK in f2py wrappers
  - [\#12286](https://github.com/scipy/scipy/pull/12286): ENH: Cythonize scipy.spatial.transform.Rotation
  - [\#12287](https://github.com/scipy/scipy/pull/12287): ENH: Read arbitrary bit depth (including 24-bit) WAVs
  - [\#12292](https://github.com/scipy/scipy/pull/12292): BLD: fix musl compilation
  - [\#12293](https://github.com/scipy/scipy/pull/12293): MAINT: Fix a DeprecationWarning in validate\_runtests\_log.py.
  - [\#12296](https://github.com/scipy/scipy/pull/12296): DOC: Clarify area/volume in scipy.spatial.ConvexHull docstrings
  - [\#12302](https://github.com/scipy/scipy/pull/12302): CI: Run travis builds on master to keep cache up to date
  - [\#12305](https://github.com/scipy/scipy/pull/12305): TST: Cleanup print statements in tests
  - [\#12323](https://github.com/scipy/scipy/pull/12323): ENH: Add a Bunch-like class to use as a backwards compatible...
  - [\#12324](https://github.com/scipy/scipy/pull/12324): BUG: io: Fix an error that occurs when attempting to raise a...
  - [\#12327](https://github.com/scipy/scipy/pull/12327): DOC: clarify docstrings of \`query\_ball\_tree\` and \`query\_pairs\`
  - [\#12334](https://github.com/scipy/scipy/pull/12334): PERF: Improve cKDTree.query\_ball\_point constant time cython overhead
  - [\#12338](https://github.com/scipy/scipy/pull/12338): DOC: improve consistency and clarity of docs in linalg and sparse/linalg
  - [\#12341](https://github.com/scipy/scipy/pull/12341): DOC: add Examples for KDTree query\_ball\_tree and query\_pairs
  - [\#12343](https://github.com/scipy/scipy/pull/12343): DOC: add examples for special.eval\_legendre()
  - [\#12349](https://github.com/scipy/scipy/pull/12349): BUG: avoid overflow in sum() for 32-bit systems
  - [\#12351](https://github.com/scipy/scipy/pull/12351): DOC: Fix example wavfile to be 16bit
  - [\#12352](https://github.com/scipy/scipy/pull/12352): \[BUG\] Consider 0/0 division in DOP853 error estimation
  - [\#12353](https://github.com/scipy/scipy/pull/12353): Fix exception causes in vq.py
  - [\#12354](https://github.com/scipy/scipy/pull/12354): MAINT: Cleanup unneeded void\* cast in setlist.pxd
  - [\#12355](https://github.com/scipy/scipy/pull/12355): TST: Remove hack for old win-amd64 bug
  - [\#12356](https://github.com/scipy/scipy/pull/12356): ENH: Faster implementation of scipy.sparse.block\_diag (\#9411...
  - [\#12357](https://github.com/scipy/scipy/pull/12357): MAINT,TST: update and run scipy/special/utils/convert.py
  - [\#12358](https://github.com/scipy/scipy/pull/12358): TST: Check mstat.skewtest pvalue
  - [\#12359](https://github.com/scipy/scipy/pull/12359): TST: Sparse matrix test with int64 indptr and indices
  - [\#12363](https://github.com/scipy/scipy/pull/12363): DOC: ref. in CloughTocher2DInterpolator
  - [\#12364](https://github.com/scipy/scipy/pull/12364): DOC: \`sparse\_distance\_matrix\` and \`count\_neighbors\` examples
  - [\#12371](https://github.com/scipy/scipy/pull/12371): MAINT, CI: bump to latest stable OpenBLAS
  - [\#12372](https://github.com/scipy/scipy/pull/12372): MAINT: Minor cleanup of (c)KDTree tests
  - [\#12374](https://github.com/scipy/scipy/pull/12374): DEP: Deprecate \`distance.wminkowski\`
  - [\#12375](https://github.com/scipy/scipy/pull/12375): ENH: Add fast path for minkowski distance with p=1,2 and support...
  - [\#12376](https://github.com/scipy/scipy/pull/12376): Fix exception causes in most of the codebase
  - [\#12377](https://github.com/scipy/scipy/pull/12377): DOC: Quick fix - adds newline to correlation\_lags docstring Examples...
  - [\#12381](https://github.com/scipy/scipy/pull/12381): BENCH: remove obsolete goal\_time param
  - [\#12382](https://github.com/scipy/scipy/pull/12382): ENH: Replace KDTree with a thin wrapper over cKDTree
  - [\#12385](https://github.com/scipy/scipy/pull/12385): DOC: improve docstrings of interpolate.NearestNDInterpolator.\_\_call\_\_...
  - [\#12387](https://github.com/scipy/scipy/pull/12387): DOC/STY: add example to scipy.signal.correlate
  - [\#12393](https://github.com/scipy/scipy/pull/12393): CI: Replace the existing check for non-ASCII characters with...
  - [\#12394](https://github.com/scipy/scipy/pull/12394): CI: arm64 numpy now available
  - [\#12395](https://github.com/scipy/scipy/pull/12395): ENH: improve stats.binned\_statistic\_dd performance
  - [\#12396](https://github.com/scipy/scipy/pull/12396): DOC, MAINT: forward port 1.5.0 relnotes
  - [\#12398](https://github.com/scipy/scipy/pull/12398): API: Disable len() and indexing of Rotation instances with single...
  - [\#12399](https://github.com/scipy/scipy/pull/12399): MAINT: Replace some Unicode dash-like chars with an ASCII hyphen.
  - [\#12402](https://github.com/scipy/scipy/pull/12402): update .mailmap
  - [\#12404](https://github.com/scipy/scipy/pull/12404): MAINT: io: Change the encoding comment of test\_mio.py to utf-8.
  - [\#12416](https://github.com/scipy/scipy/pull/12416): CI: cache mingw, azure pipelines
  - [\#12427](https://github.com/scipy/scipy/pull/12427): BUG: logic error in loop unrolling (cKDTree)
  - [\#12432](https://github.com/scipy/scipy/pull/12432): DOC: Remove the "Basic functions" section from the SciPy tutorial.
  - [\#12434](https://github.com/scipy/scipy/pull/12434): ENH:linalg: Add LAPACK wrappers pptrf/pptrs/ppsv/pptri/ppcon
  - [\#12435](https://github.com/scipy/scipy/pull/12435): DOC: fix simplex math for scipy.stats.dirichlet documentation
  - [\#12439](https://github.com/scipy/scipy/pull/12439): DOC: add API methods summary for NdPPoly
  - [\#12443](https://github.com/scipy/scipy/pull/12443): BUG: stats: Improve calculation of exponnorm.pdf
  - [\#12448](https://github.com/scipy/scipy/pull/12448): DOC: stats: Add "Examples" to the ansari docstring.
  - [\#12450](https://github.com/scipy/scipy/pull/12450): ENH: add \`leaves\_color\_list\` for cluster.dendrogram dictionary.
  - [\#12451](https://github.com/scipy/scipy/pull/12451): MAINT: remove "blacklist" terminology from code base
  - [\#12452](https://github.com/scipy/scipy/pull/12452): DOC: clarify the meaning of whitening for cluster.vq.whiten()
  - [\#12455](https://github.com/scipy/scipy/pull/12455): MAINT: clearer error message in setup.py
  - [\#12457](https://github.com/scipy/scipy/pull/12457): ENH: stats: override stats.pareto.fit with analytical MLE
  - [\#12460](https://github.com/scipy/scipy/pull/12460): check if column in spearman rho is entirely NaN or Inf
  - [\#12463](https://github.com/scipy/scipy/pull/12463): DOC: improve and clean up \*Spline docstrings in fitpack2.py
  - [\#12474](https://github.com/scipy/scipy/pull/12474): ENH: linalg: speedup \_sqrtm\_triu by moving tight loop to Cython
  - [\#12476](https://github.com/scipy/scipy/pull/12476): ENH: add IIR comb filter to scipy.signal
  - [\#12484](https://github.com/scipy/scipy/pull/12484): Fix documentation for minimize
  - [\#12486](https://github.com/scipy/scipy/pull/12486): DOC: add a note in poisson distribution when mu=0 and k=0 in...
  - [\#12491](https://github.com/scipy/scipy/pull/12491): MAINT: forward port 1.5.1 release notes
  - [\#12508](https://github.com/scipy/scipy/pull/12508): Fix exception causes all over the codebase
  - [\#12514](https://github.com/scipy/scipy/pull/12514): ENH: stats: override stats.invgauss.fit with analytical MLE
  - [\#12519](https://github.com/scipy/scipy/pull/12519): PERF: Avoid np.zeros when custom initialization is needed anyway
  - [\#12520](https://github.com/scipy/scipy/pull/12520): DOC: Minor RST section renaming.
  - [\#12521](https://github.com/scipy/scipy/pull/12521): MAINT: Remove unused imports
  - [\#12522](https://github.com/scipy/scipy/pull/12522): PERF: Get rid of unnececssary allocation in VarReader5.cread\_fieldnames
  - [\#12524](https://github.com/scipy/scipy/pull/12524): DOC: special: Set Axes3D rect to avoid clipping labels in plot.
  - [\#12525](https://github.com/scipy/scipy/pull/12525): Fix large sparse nnz
  - [\#12526](https://github.com/scipy/scipy/pull/12526): DOC: Remove double section and too long header underline.
  - [\#12527](https://github.com/scipy/scipy/pull/12527): Improve error message for wrong interpolation type
  - [\#12530](https://github.com/scipy/scipy/pull/12530): Move redundant logic outside loop for conditional speedup in...
  - [\#12532](https://github.com/scipy/scipy/pull/12532): ENH: Add norm={"forward", "backward"} to \`scipy.fft\`
  - [\#12535](https://github.com/scipy/scipy/pull/12535): MAINT: Avoid sphinx deprecated aliases for SeeAlso and Only
  - [\#12540](https://github.com/scipy/scipy/pull/12540): BUG: fix odr.output.work\_ind key bug and add its test.
  - [\#12541](https://github.com/scipy/scipy/pull/12541): ENH: add solver for minimum weight full bipartite matching
  - [\#12550](https://github.com/scipy/scipy/pull/12550): PERF: pickling speed of rv\*
  - [\#12551](https://github.com/scipy/scipy/pull/12551): DOC: fix typo in cluster/\_hierarchy.pyx
  - [\#12552](https://github.com/scipy/scipy/pull/12552): CI: Cleanup travis pip installs
  - [\#12556](https://github.com/scipy/scipy/pull/12556): BUG: Fix problem with Scipy.integrate.solve\_bvp for big problems
  - [\#12557](https://github.com/scipy/scipy/pull/12557): MAINT: Use extern templates to improve sparsetools compile time
  - [\#12558](https://github.com/scipy/scipy/pull/12558): MAINT: Remove hack to allow scipy.fft to act like a function
  - [\#12563](https://github.com/scipy/scipy/pull/12563): MAINT: Remove unused mu0 in special/orthogonal.py
  - [\#12564](https://github.com/scipy/scipy/pull/12564): DOC: fix return type docstring for least\_squares
  - [\#12565](https://github.com/scipy/scipy/pull/12565): DOC: stats: respond to query about Kruskal-Wallis test being...
  - [\#12566](https://github.com/scipy/scipy/pull/12566): BUG: Interpolate: use stable sort
  - [\#12568](https://github.com/scipy/scipy/pull/12568): Updated documentation for as\_quat
  - [\#12571](https://github.com/scipy/scipy/pull/12571): DEP: remove deprecated slepian window
  - [\#12573](https://github.com/scipy/scipy/pull/12573): DEP: remove \`frechet\_l\` and \`frechet\_r\`
  - [\#12575](https://github.com/scipy/scipy/pull/12575): BUG: stats: fix multinomial.pmf NaNs when params sum \> 1
  - [\#12576](https://github.com/scipy/scipy/pull/12576): MAINT: remove warning from LSQSphereBivariateSpline
  - [\#12582](https://github.com/scipy/scipy/pull/12582): ENH: Multivariate t-distribution
  - [\#12587](https://github.com/scipy/scipy/pull/12587): ENH: speed up rvs of gengamma in scipy.stats
  - [\#12588](https://github.com/scipy/scipy/pull/12588): DOC: add Examples add see also sections for LinearNDInterpolator,...
  - [\#12597](https://github.com/scipy/scipy/pull/12597): ENH: Add single-sided p-values to t-tests
  - [\#12599](https://github.com/scipy/scipy/pull/12599): Small update to scipy FFT tutorial
  - [\#12600](https://github.com/scipy/scipy/pull/12600): ENH: disjoint set data structure
  - [\#12602](https://github.com/scipy/scipy/pull/12602): BUG: add const for Read-only views in interpnd.pyx
  - [\#12605](https://github.com/scipy/scipy/pull/12605): BUG: correct \`np.asanyarray\` use in \`scipy.constants.lambda2nu\`
  - [\#12610](https://github.com/scipy/scipy/pull/12610): MAINT: forward port 1.5.2 release notes
  - [\#12612](https://github.com/scipy/scipy/pull/12612): MAINT: stats: Use explicit keyword parameters instead of \`\*\*kwds\`.
  - [\#12616](https://github.com/scipy/scipy/pull/12616): DOC: make explicit docstring that interpolate.interp1d only accepts...
  - [\#12618](https://github.com/scipy/scipy/pull/12618): DOC: Minor doc formatting.
  - [\#12640](https://github.com/scipy/scipy/pull/12640): MAINT: stats: fix issues with scipy.stats.pearson3 docs, moment,...
  - [\#12647](https://github.com/scipy/scipy/pull/12647): TST: Add Boost ellipr[\[cdfgj\]]()data test data
  - [\#12648](https://github.com/scipy/scipy/pull/12648): DOC: Update special/utils/README with instructions
  - [\#12649](https://github.com/scipy/scipy/pull/12649): DOC: simplified pip quickstart guide
  - [\#12650](https://github.com/scipy/scipy/pull/12650): DOC: stats: Fix boxcox docstring: lambda can be negative.
  - [\#12655](https://github.com/scipy/scipy/pull/12655): DOC: update Steering Council members listed in governance docs
  - [\#12659](https://github.com/scipy/scipy/pull/12659): rv\_sample expect bug
  - [\#12663](https://github.com/scipy/scipy/pull/12663): DOC: optimize: try to fix linprog method-specific documentation
  - [\#12664](https://github.com/scipy/scipy/pull/12664): BUG: stats: Fix logpdf with large negative values for logistic...
  - [\#12666](https://github.com/scipy/scipy/pull/12666): MAINT: Fixes from static analysis
  - [\#12667](https://github.com/scipy/scipy/pull/12667): ENH: Adding Modified Rodrigues Parameters to the Rotation class
  - [\#12670](https://github.com/scipy/scipy/pull/12670): DOC: Update documentation for Gamma distribution
  - [\#12673](https://github.com/scipy/scipy/pull/12673): API: Unconditionally return np.intp from cKDTree.query
  - [\#12677](https://github.com/scipy/scipy/pull/12677): MAINT: Add Autogenerated notice to ufuncs.pyi
  - [\#12682](https://github.com/scipy/scipy/pull/12682): MAINT: Remove \_util.\_valarray
  - [\#12688](https://github.com/scipy/scipy/pull/12688): MAINT: add f2py-generated scipy.integrate files to .gitignore
  - [\#12689](https://github.com/scipy/scipy/pull/12689): BENCH: simplify benchmark setup, remove benchmarks/run.py
  - [\#12694](https://github.com/scipy/scipy/pull/12694): scipy/stats: Add laplace\_asymmetric continuous distribution
  - [\#12695](https://github.com/scipy/scipy/pull/12695): DOC: update Ubuntu quickstart; conda compilers now work\!
  - [\#12698](https://github.com/scipy/scipy/pull/12698): MAINT: Replace np.max with np.maximum
  - [\#12700](https://github.com/scipy/scipy/pull/12700): TST: bump test precision for constrained trustregion test
  - [\#12702](https://github.com/scipy/scipy/pull/12702): TST: bump test tolerance for \`DifferentialEvolutionSolver.test\_L4\`
  - [\#12703](https://github.com/scipy/scipy/pull/12703): BUG: Improve input validation for sepfir2d
  - [\#12708](https://github.com/scipy/scipy/pull/12708): MAINT: fix a typo in scipy.sparse
  - [\#12709](https://github.com/scipy/scipy/pull/12709): BUG: bvls can fail catastrophically to converge
  - [\#12711](https://github.com/scipy/scipy/pull/12711): MAINT: Use platform.python\_implementation to determine IS\_PYPY
  - [\#12713](https://github.com/scipy/scipy/pull/12713): TST: Fix flaky test\_lgmres
  - [\#12716](https://github.com/scipy/scipy/pull/12716): DOC: add examples and tutorial links for interpolate functions...
  - [\#12717](https://github.com/scipy/scipy/pull/12717): DOC: Fix Issue \#5396
  - [\#12725](https://github.com/scipy/scipy/pull/12725): ENH: Support complex-valued images and kernels for many ndimage...
  - [\#12729](https://github.com/scipy/scipy/pull/12729): DEP: remove setup\_requires
  - [\#12732](https://github.com/scipy/scipy/pull/12732): BENCH: skip benchmarks instead of hiding them when SCIPY\_XSLOW=0
  - [\#12734](https://github.com/scipy/scipy/pull/12734): CI: Don't ignore line-length in the lint\_diff check.
  - [\#12736](https://github.com/scipy/scipy/pull/12736): DOC: Fix signal.windows.get\_window() 'exponential' docstring
  - [\#12737](https://github.com/scipy/scipy/pull/12737): ENH: stats: override stats.gumbel\_r.fit and stats.gumbel\_l.fit...
  - [\#12738](https://github.com/scipy/scipy/pull/12738): ENH: stats: override stats.logistic.fit with system of equations...
  - [\#12743](https://github.com/scipy/scipy/pull/12743): BUG: Avoid negative variances in circular statistics
  - [\#12744](https://github.com/scipy/scipy/pull/12744): Prevent build error on GNU/Hurd
  - [\#12746](https://github.com/scipy/scipy/pull/12746): TST: parameterize the test cases in test\_ndimage.py
  - [\#12752](https://github.com/scipy/scipy/pull/12752): DOC: Add examples for some root finding functions.
  - [\#12754](https://github.com/scipy/scipy/pull/12754): MAINT, CI: Azure windows deps multiline
  - [\#12756](https://github.com/scipy/scipy/pull/12756): ENH: stats: Add an sf method to levy for improved precision in...
  - [\#12757](https://github.com/scipy/scipy/pull/12757): ENH: stats: Add an sf method to levy\_l for improved precision.
  - [\#12765](https://github.com/scipy/scipy/pull/12765): TST, MAINT: infeasible\_2 context
  - [\#12767](https://github.com/scipy/scipy/pull/12767): Fix spline interpolation boundary handling for modes reflect...
  - [\#12769](https://github.com/scipy/scipy/pull/12769): DOC: syntax error in scipy.interpolate.bspl
  - [\#12770](https://github.com/scipy/scipy/pull/12770): ENH: add nearest-up rounding to scipy.interpolate.interp1d
  - [\#12771](https://github.com/scipy/scipy/pull/12771): TST: fix invalid input unit test for scipy.signal.gammatone
  - [\#12775](https://github.com/scipy/scipy/pull/12775): ENH: Adds quadratic\_assignment with two methods
  - [\#12776](https://github.com/scipy/scipy/pull/12776): ENH: add grid-constant boundary handling in ndimage interpolation...
  - [\#12777](https://github.com/scipy/scipy/pull/12777): Add Taylor Window function - Common in Radar DSP
  - [\#12779](https://github.com/scipy/scipy/pull/12779): ENH: Improvements to pocketfft thread pool and ARM neon vectorization
  - [\#12788](https://github.com/scipy/scipy/pull/12788): API: Rename cKDTree n\_jobs argument to workers
  - [\#12792](https://github.com/scipy/scipy/pull/12792): DOC: remove THANKS.txt file in favor of scipy.org
  - [\#12793](https://github.com/scipy/scipy/pull/12793): Add new flag to authors tool
  - [\#12802](https://github.com/scipy/scipy/pull/12802): BENCH: add scipy.ndimage.interpolation benchmarks
  - [\#12803](https://github.com/scipy/scipy/pull/12803): Do not pin the version of numpy in unsupported python versions
  - [\#12810](https://github.com/scipy/scipy/pull/12810): CI: fix 32-bit Linux build failure on Azure CI runs
  - [\#12812](https://github.com/scipy/scipy/pull/12812): ENH: support interpolation of complex-valued images
  - [\#12814](https://github.com/scipy/scipy/pull/12814): BUG: nonlin\_solve shouldn't pass non-vector dx to tol\_norm
  - [\#12818](https://github.com/scipy/scipy/pull/12818): Update ckdtree.pyx
  - [\#12822](https://github.com/scipy/scipy/pull/12822): MAINT: simplify directed\_hausdorff
  - [\#12827](https://github.com/scipy/scipy/pull/12827): DOC: Fix wrong name w being used instead of worN in docs.
  - [\#12831](https://github.com/scipy/scipy/pull/12831): DOC: fix typo in sparse/base.py
  - [\#12835](https://github.com/scipy/scipy/pull/12835): MAINT: stats: Improve vonmises PDF calculation.
  - [\#12839](https://github.com/scipy/scipy/pull/12839): ENH: scipy.stats: add multivariate hypergeometric distribution
  - [\#12843](https://github.com/scipy/scipy/pull/12843): changed M to N in windows.dpss
  - [\#12846](https://github.com/scipy/scipy/pull/12846): MAINT: update minimum NumPy version to 1.16.5
  - [\#12847](https://github.com/scipy/scipy/pull/12847): DOC: Unify the formula in docs of scipy.stats.pearsonr()
  - [\#12849](https://github.com/scipy/scipy/pull/12849): DOC: polish QAP docs for consistency and readability
  - [\#12852](https://github.com/scipy/scipy/pull/12852): ENH, MAINT: Bring KDTree interface to feature-parity with cKDTree
  - [\#12858](https://github.com/scipy/scipy/pull/12858): DOC: use :doi: and :arxiv: directives for references
  - [\#12872](https://github.com/scipy/scipy/pull/12872): lazily import multiprocessing.Pool in MapWrapper
  - [\#12878](https://github.com/scipy/scipy/pull/12878): DOC: document ScalarFunction
  - [\#12882](https://github.com/scipy/scipy/pull/12882): MAINT: stats: Change a test to use \<= instead of strictly less...
  - [\#12885](https://github.com/scipy/scipy/pull/12885): numpy.linspace calls edited to ensure correct spacing.
  - [\#12886](https://github.com/scipy/scipy/pull/12886): DOC: stats: Add 'versionadded' to cramervonmises docstring.
  - [\#12899](https://github.com/scipy/scipy/pull/12899): TST: make a couple of tests expected to fail on 32-bit architectures
  - [\#12903](https://github.com/scipy/scipy/pull/12903): DOC: update Windows build guide and move into contributor guide
  - [\#12907](https://github.com/scipy/scipy/pull/12907): DOC: clarify which array the precenter option applies to
  - [\#12908](https://github.com/scipy/scipy/pull/12908): MAINT: spatial: Remove two occurrences of unused variables in...
  - [\#12909](https://github.com/scipy/scipy/pull/12909): ENH: stats: Add methods gumbel\_r.\_sf and gumbel\_r.\_isf
  - [\#12910](https://github.com/scipy/scipy/pull/12910): CI: travis: Remove some unnecessary code from .travis.yml.
  - [\#12911](https://github.com/scipy/scipy/pull/12911): Minor fixes to dendrogram plotting
  - [\#12921](https://github.com/scipy/scipy/pull/12921): CI: don't run GitHub Actions on fork or in cron job
  - [\#12927](https://github.com/scipy/scipy/pull/12927): MAINT: rename integrate.simps to simpson
  - [\#12934](https://github.com/scipy/scipy/pull/12934): MAINT: rename trapz and cumtrapz to (cumulative\_)trapezoid
  - [\#12936](https://github.com/scipy/scipy/pull/12936): MAINT: fix numerical precision in nct.stats
  - [\#12938](https://github.com/scipy/scipy/pull/12938): MAINT: fix linter on master
  - [\#12941](https://github.com/scipy/scipy/pull/12941): Update minimum AIX pinnings to match non AIX builds
  - [\#12955](https://github.com/scipy/scipy/pull/12955): BUG: Fixed wrong NaNs check in scipy.stats.weightedtau
  - [\#12958](https://github.com/scipy/scipy/pull/12958): ENH: stats: Implement \_logpdf, \_sf and \_isf for nakagami.
  - [\#12962](https://github.com/scipy/scipy/pull/12962): Correcting that p should be in \[0,1\] for a variety of discrete...
  - [\#12964](https://github.com/scipy/scipy/pull/12964): BUG: added line.strip() to split\_data\_line()
  - [\#12968](https://github.com/scipy/scipy/pull/12968): ENH: stats: Use only an analytical formula or scalar root-finding...
  - [\#12971](https://github.com/scipy/scipy/pull/12971): MAINT: Declare support for Python 3.9
  - [\#12972](https://github.com/scipy/scipy/pull/12972): MAINT: Remove redundant Python \< 3.6 code
  - [\#12980](https://github.com/scipy/scipy/pull/12980): DOC: Update documentation on optimize.rosen
  - [\#12983](https://github.com/scipy/scipy/pull/12983): ENH: improvements to stats.linregress
  - [\#12990](https://github.com/scipy/scipy/pull/12990): DOC: Clarify that using sos as output type for iirdesign can...
  - [\#12992](https://github.com/scipy/scipy/pull/12992): DOC: capitalization and formatting in lsmr
  - [\#12995](https://github.com/scipy/scipy/pull/12995): DOC: stats: Several documentation fixes.
  - [\#12996](https://github.com/scipy/scipy/pull/12996): BUG: Improve error messages for \`range\` arg of binned\_statistic\_dd
  - [\#12998](https://github.com/scipy/scipy/pull/12998): MAINT: approx\_derivative with FP32 closes \#12991
  - [\#13004](https://github.com/scipy/scipy/pull/13004): TST: isinstance(OptimizeResult.message, str) closes \#13001
  - [\#13006](https://github.com/scipy/scipy/pull/13006): Keep correct dtype when loading empty mat arrays.
  - [\#13009](https://github.com/scipy/scipy/pull/13009): MAINT: clip SLSQP step within bounds
  - [\#13012](https://github.com/scipy/scipy/pull/13012): DOC: fix bilinear\_zpk example labels
  - [\#13013](https://github.com/scipy/scipy/pull/13013): ENH: Add \`subset\` and \`subsets\` methods to \`DisjointSet\`...
  - [\#13029](https://github.com/scipy/scipy/pull/13029): MAINT: basinhopping callback for initial mininmisation
  - [\#13032](https://github.com/scipy/scipy/pull/13032): DOC: fix docstring errors in in stats.wilcoxon
  - [\#13036](https://github.com/scipy/scipy/pull/13036): BUG: forward port lint\_diff shims
  - [\#13041](https://github.com/scipy/scipy/pull/13041): MAINT: dogbox ensure x is within bounds closes \#11403
  - [\#13042](https://github.com/scipy/scipy/pull/13042): MAINT: forward port 1.5.4 release notes
  - [\#13046](https://github.com/scipy/scipy/pull/13046): DOC: Update optimize.least\_squares doc for all tolerance must...
  - [\#13052](https://github.com/scipy/scipy/pull/13052): Typo fix for cluster documentation
  - [\#13054](https://github.com/scipy/scipy/pull/13054): BUG: fix \`scipy.optimize.show\_options\` for unknown methods....
  - [\#13056](https://github.com/scipy/scipy/pull/13056): MAINT: fft: Fix a C++ compiler warning.
  - [\#13057](https://github.com/scipy/scipy/pull/13057): Minor fixes on doc of function csr\_tocsc
  - [\#13058](https://github.com/scipy/scipy/pull/13058): DOC: stats: Replace np.float with np.float64 in a tutorial file.
  - [\#13059](https://github.com/scipy/scipy/pull/13059): DOC: stats: Update the "Returns" section of the linregress docstring.
  - [\#13060](https://github.com/scipy/scipy/pull/13060): MAINT: clip\_x\_for\_func should be private
  - [\#13061](https://github.com/scipy/scipy/pull/13061): DOC: signal.win -\> signal.windows.win in Examples
  - [\#13063](https://github.com/scipy/scipy/pull/13063): MAINT: Add suite-sparse and sksparse installation check
  - [\#13070](https://github.com/scipy/scipy/pull/13070): MAINT: stats: Remove a couple obsolete comments.
  - [\#13073](https://github.com/scipy/scipy/pull/13073): BUG: Fix scalar\_search\_wolfe2 to resolve \#12157
  - [\#13078](https://github.com/scipy/scipy/pull/13078): CI, MAINT: migrate Lint to Azure
  - [\#13081](https://github.com/scipy/scipy/pull/13081): BLD: drop Python 3.6 support (NEP 29)
  - [\#13082](https://github.com/scipy/scipy/pull/13082): MAINT: update minimum NumPy version to 1.16.5 in a couple more...
  - [\#13083](https://github.com/scipy/scipy/pull/13083): DOC: update toolchain.rst
  - [\#13086](https://github.com/scipy/scipy/pull/13086): DOC: Update the Parameters section of the correlation docstring
  - [\#13087](https://github.com/scipy/scipy/pull/13087): ENH:signal: Speed-up Cython implementation of \_sosfilt
  - [\#13089](https://github.com/scipy/scipy/pull/13089): BLD, BUG: add c99 compiler flag to HiGHS basiclu library
  - [\#13091](https://github.com/scipy/scipy/pull/13091): BUG: Fix GIL handling in \_sosfilt
  - [\#13094](https://github.com/scipy/scipy/pull/13094): DOC: clarify "location" in docstring of cKDTree.query
  - [\#13095](https://github.com/scipy/scipy/pull/13095): Zoom resize update
  - [\#13097](https://github.com/scipy/scipy/pull/13097): BUG: fix CubicSpline(..., bc\_type="periodic") \#11758
  - [\#13100](https://github.com/scipy/scipy/pull/13100): BUG: sparse: Correct output format of kron
  - [\#13107](https://github.com/scipy/scipy/pull/13107): ENH: faster linear\_sum\_assignment for small cost matrices
  - [\#13110](https://github.com/scipy/scipy/pull/13110): CI, MAINT: refguide/asv checks to azure
  - [\#13112](https://github.com/scipy/scipy/pull/13112): CI: fix MacOS CI
  - [\#13113](https://github.com/scipy/scipy/pull/13113): CI: Install word list package for refguide-check
  - [\#13115](https://github.com/scipy/scipy/pull/13115): BUG: add value range check for signal.iirdesign()
  - [\#13116](https://github.com/scipy/scipy/pull/13116): CI: Don't report name errors after an exception in refguide-check
  - [\#13117](https://github.com/scipy/scipy/pull/13117): CI: move sdist/pre-release test Azure
  - [\#13119](https://github.com/scipy/scipy/pull/13119): Improve error message on friedmanchisquare function
  - [\#13121](https://github.com/scipy/scipy/pull/13121): Fix factorial() for NaN on Python 3.10
  - [\#13123](https://github.com/scipy/scipy/pull/13123): BLD: Specify file extension for language standard version tests
  - [\#13128](https://github.com/scipy/scipy/pull/13128): TST: skip Fortran I/O test for ODR
  - [\#13130](https://github.com/scipy/scipy/pull/13130): TST: skip factorial() float tests on Python 3.10
  - [\#13136](https://github.com/scipy/scipy/pull/13136): CI:Add python dbg run to GH Actions
  - [\#13138](https://github.com/scipy/scipy/pull/13138): CI: Port coverage, 64-bit BLAS, GCC 4.8 build to azure
  - [\#13139](https://github.com/scipy/scipy/pull/13139): Fix edge case for mode='nearest' in ndimage.interpolation functions
  - [\#13141](https://github.com/scipy/scipy/pull/13141): BUG: signal: Fix data type of the numerator returned by ss2tf.
  - [\#13144](https://github.com/scipy/scipy/pull/13144): MAINT: stats: restrict gausshyper z \> -1
  - [\#13146](https://github.com/scipy/scipy/pull/13146): typo in csr.py
  - [\#13148](https://github.com/scipy/scipy/pull/13148): BUG: stats: fix typo in stable rvs per gh-12870
  - [\#13149](https://github.com/scipy/scipy/pull/13149): DOC: spatial/stats: cross-ref random rotation matrix functions
  - [\#13151](https://github.com/scipy/scipy/pull/13151): MAINT: stats: Fix a test and a couple PEP-8 issues.
  - [\#13152](https://github.com/scipy/scipy/pull/13152): MAINT: stats: Use np.take\_along\_axis in the private function...
  - [\#13154](https://github.com/scipy/scipy/pull/13154): ENH: stats: Implement defined handling of constant inputs in...
  - [\#13156](https://github.com/scipy/scipy/pull/13156): DOC: maintain equal display range for ndimage.zoom example
  - [\#13159](https://github.com/scipy/scipy/pull/13159): CI: Azure: Don't run tests on merge commits, except for coverage
  - [\#13160](https://github.com/scipy/scipy/pull/13160): DOC: stats: disambiguate location-shifted/noncentral
  - [\#13161](https://github.com/scipy/scipy/pull/13161): BUG: DifferentialEvolutionSolver.\_\_del\_\_ can fail in garbage...
  - [\#13163](https://github.com/scipy/scipy/pull/13163): BUG: stats: fix bug in spearmanr nan propagation
  - [\#13167](https://github.com/scipy/scipy/pull/13167): MAINT: stats: Fix a test.
  - [\#13169](https://github.com/scipy/scipy/pull/13169): BUG: stats: Fix handling of misaligned masks in mstats.pearsonr.
  - [\#13178](https://github.com/scipy/scipy/pull/13178): CI: testing.yml --\> macos.yml
  - [\#13181](https://github.com/scipy/scipy/pull/13181): CI: fix lint
  - [\#13190](https://github.com/scipy/scipy/pull/13190): BUG: optimize: fix a duplicate key bug for \`test\_show\_options\`
  - [\#13192](https://github.com/scipy/scipy/pull/13192): BUG:linalg: Add overwrite option to gejsv wrapper
  - [\#13194](https://github.com/scipy/scipy/pull/13194): BUG: slsqp should be able to use rel\_step
  - [\#13199](https://github.com/scipy/scipy/pull/13199): \[skip travis\] DOC: 1.6.0 release notes
  - [\#13203](https://github.com/scipy/scipy/pull/13203): fix typos
  - [\#13209](https://github.com/scipy/scipy/pull/13209): TST:linalg: set the seed for cossin test
  - [\#13212](https://github.com/scipy/scipy/pull/13212): \[DOC\] Backtick and directive consistency.
  - [\#13217](https://github.com/scipy/scipy/pull/13217): REL: add necessary setuptools and numpy version pins in pyproject.toml...
  - [\#13226](https://github.com/scipy/scipy/pull/13226): BUG: pavement.py file handle fixes
  - [\#13249](https://github.com/scipy/scipy/pull/13249): Handle cval correctly for ndimage functions with complex-valued...
  - [\#13253](https://github.com/scipy/scipy/pull/13253): BUG,MAINT: Ensure all Pool objects are closed
  - [\#13255](https://github.com/scipy/scipy/pull/13255): BUG:linalg: Fix heevx wrappers and add new tests
  - [\#13260](https://github.com/scipy/scipy/pull/13260): CI: fix macOS testing
  - [\#13269](https://github.com/scipy/scipy/pull/13269): CI: github actions: In the linux dbg tests, update apt before...
  - [\#13279](https://github.com/scipy/scipy/pull/13279): MAINT: 1.6.0 rc2 backports

---

1.6.1-notes.md

---

# SciPy 1.6.1 Release Notes

<div class="contents">

</div>

SciPy 1.6.1 is a bug-fix release with no new features compared to 1.6.0.

Please note that for SciPy wheels to correctly install with Pip on macOS 11, Pip \>= 20.3.3 is needed.

## Authors

  - Peter Bell
  - Evgeni Burovski
  - CJ Carey
  - Ralf Gommers
  - Peter Mahler Larsen
  - Cheng H. Lee +
  - Cong Ma
  - Nicholas McKibben
  - Nikola Forró
  - Tyler Reddy
  - Warren Weckesser

A total of 11 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.6.1

  - [\#13072](https://github.com/scipy/scipy/issues/13072): BLD: Quadpack undefined references
  - [\#13241](https://github.com/scipy/scipy/issues/13241): Not enough values to unpack when passing tuple to \`blocksize\`...
  - [\#13329](https://github.com/scipy/scipy/issues/13329): Large sparse matrices of big integers lose information
  - [\#13342](https://github.com/scipy/scipy/issues/13342): fftn crashes if shape arguments are supplied as ndarrays
  - [\#13356](https://github.com/scipy/scipy/issues/13356): LSQBivariateSpline segmentation fault when quitting the Python...
  - [\#13358](https://github.com/scipy/scipy/issues/13358): scipy.spatial.transform.Rotation object can not be deepcopied...
  - [\#13408](https://github.com/scipy/scipy/issues/13408): Type of \`has\_sorted\_indices\` property
  - [\#13412](https://github.com/scipy/scipy/issues/13412): Sorting spherical Voronoi vertices leads to crash in area calculation
  - [\#13421](https://github.com/scipy/scipy/issues/13421): linear\_sum\_assignment - support for matrices with more than 2^31...
  - [\#13428](https://github.com/scipy/scipy/issues/13428): \`stats.exponnorm.cdf\` returns \`nan\` for small values of \`K\`...
  - [\#13465](https://github.com/scipy/scipy/issues/13465): KDTree.count\_neighbors : 0xC0000005 error for tuple of different...
  - [\#13468](https://github.com/scipy/scipy/issues/13468): directed\_hausdorff issue with shuffle
  - [\#13472](https://github.com/scipy/scipy/issues/13472): Failures on FutureWarnings with numpy 1.20.0 for lfilter, sosfilt...
  - [\#13565](https://github.com/scipy/scipy/issues/13565): BUG: 32-bit wheels repo test failure in optimize

### Pull requests for 1.6.1

  - [\#13318](https://github.com/scipy/scipy/pull/13318): REL: prepare for SciPy 1.6.1
  - [\#13344](https://github.com/scipy/scipy/pull/13344): BUG: fftpack doesn't work with ndarray shape argument
  - [\#13345](https://github.com/scipy/scipy/pull/13345): MAINT: Replace scipy.take with numpy.take in FFT function docstrings.
  - [\#13354](https://github.com/scipy/scipy/pull/13354): BUG: optimize: rename private functions to include leading underscore
  - [\#13387](https://github.com/scipy/scipy/pull/13387): BUG: Support big-endian platforms and big-endian WAVs
  - [\#13394](https://github.com/scipy/scipy/pull/13394): BUG: Fix Python crash by allocating larger array in LSQBivariateSpline
  - [\#13400](https://github.com/scipy/scipy/pull/13400): BUG: sparse: Better validation for BSR ctor
  - [\#13403](https://github.com/scipy/scipy/pull/13403): BUG: sparse: Propagate dtype through CSR/CSC constructors
  - [\#13414](https://github.com/scipy/scipy/pull/13414): BUG: maintain dtype of SphericalVoronoi regions
  - [\#13422](https://github.com/scipy/scipy/pull/13422): FIX: optimize: use npy\_intp to store array dims for lsap
  - [\#13425](https://github.com/scipy/scipy/pull/13425): BUG: spatial: make Rotation picklable
  - [\#13426](https://github.com/scipy/scipy/pull/13426): BUG: \`has\_sorted\_indices\` and \`has\_canonical\_format\` should...
  - [\#13430](https://github.com/scipy/scipy/pull/13430): BUG: stats: Fix exponnorm.cdf and exponnorm.sf for small K
  - [\#13470](https://github.com/scipy/scipy/pull/13470): MAINT: silence warning generated by \`spatial.directed\_hausdorff\`
  - [\#13473](https://github.com/scipy/scipy/pull/13473): TST: fix failures due to new FutureWarnings in NumPy 1.21.dev0
  - [\#13479](https://github.com/scipy/scipy/pull/13479): MAINT: update directed\_hausdorff Cython code
  - [\#13485](https://github.com/scipy/scipy/pull/13485): BUG: KDTree weighted count\_neighbors doesn't work between two...
  - [\#13503](https://github.com/scipy/scipy/pull/13503): TST: fix \`test\_fortranfile\_read\_mixed\_record\` on big-endian...
  - [\#13518](https://github.com/scipy/scipy/pull/13518): DOC: document that pip \>= 20.3.3 is needed for macOS 11
  - [\#13520](https://github.com/scipy/scipy/pull/13520): BLD: update reqs based on oldest-supported-numpy in pyproject.toml
  - [\#13567](https://github.com/scipy/scipy/pull/13567): TST, BUG: adjust tol on test\_equivalence

---

1.6.2-notes.md

---

# SciPy 1.6.2 Release Notes

<div class="contents">

</div>

SciPy 1.6.2 is a bug-fix release with no new features compared to 1.6.1. This is also the first SciPy release to place upper bounds on some dependencies to improve the long-term repeatability of source builds.

## Authors

  - Pradipta Ghosh +
  - Tyler Reddy
  - Ralf Gommers
  - Martin K. Scherer +
  - Robert Uhl
  - Warren Weckesser

A total of 6 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.6.2

  - [\#13512](https://github.com/scipy/scipy/issues/13512): \`stats.gaussian\_kde.evaluate\` broken on S390X
  - [\#13584](https://github.com/scipy/scipy/issues/13584): rotation.\_compute\_euler\_from\_matrix() creates an array with negative...
  - [\#13585](https://github.com/scipy/scipy/issues/13585): Behavior change in coo\_matrix when dtype=None
  - [\#13686](https://github.com/scipy/scipy/issues/13686): delta0 argument of scipy.odr.ODR() ignored

### Pull requests for 1.6.2

  - [\#12862](https://github.com/scipy/scipy/pull/12862): REL: put upper bounds on versions of dependencies
  - [\#13575](https://github.com/scipy/scipy/pull/13575): BUG: fix \`gaussian\_kernel\_estimate\` on S390X
  - [\#13586](https://github.com/scipy/scipy/pull/13586): BUG: sparse: Create a utility function \`getdata\`
  - [\#13598](https://github.com/scipy/scipy/pull/13598): MAINT, BUG: enforce contiguous layout for output array in Rotation.as\_euler
  - [\#13687](https://github.com/scipy/scipy/pull/13687): BUG: fix scipy.odr to consider given delta0 argument

---

1.6.3-notes.md

---

# SciPy 1.6.3 Release Notes

<div class="contents">

</div>

SciPy 1.6.3 is a bug-fix release with no new features compared to 1.6.2.

## Authors

  - Peter Bell
  - Ralf Gommers
  - Matt Haberland
  - Peter Mahler Larsen
  - Tirth Patel
  - Tyler Reddy
  - Pamphile ROY +
  - Xingyu Liu +

A total of 8 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.6.3

  - [\#13772](https://github.com/scipy/scipy/issues/13772): Divide by zero in distance.yule
  - [\#13796](https://github.com/scipy/scipy/issues/13796): CI: prerelease\_deps failures
  - [\#13890](https://github.com/scipy/scipy/issues/13890): TST: spatial rotation failure in (1.6.3) wheels repo (ARM64)

### Pull requests for 1.6.3

  - [\#13755](https://github.com/scipy/scipy/pull/13755): CI: fix the matplotlib warning emitted during builing docs
  - [\#13773](https://github.com/scipy/scipy/pull/13773): BUG: Divide by zero in yule dissimilarity of constant vectors
  - [\#13799](https://github.com/scipy/scipy/pull/13799): CI/MAINT: deprecated np.typeDict
  - [\#13819](https://github.com/scipy/scipy/pull/13819): substitute np.math.factorial with math.factorial
  - [\#13895](https://github.com/scipy/scipy/pull/13895): TST: add random seeds in Rotation module

---

1.7.0-notes.md

---

# SciPy 1.7.0 Release Notes

<div class="contents">

</div>

SciPy 1.7.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.7.x branch, and on adding new features on the master branch.

This release requires Python 3.7+ and NumPy 1.16.5 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - A new submodule for quasi-Monte Carlo, <span class="title-ref">scipy.stats.qmc</span>, was added
  - The documentation design was updated to use the same PyData-Sphinx theme as NumPy and other ecosystem libraries.
  - We now vendor and leverage the Boost C++ library to enable numerous improvements for long-standing weaknesses in <span class="title-ref">scipy.stats</span>
  - <span class="title-ref">scipy.stats</span> has six new distributions, eight new (or overhauled) hypothesis tests, a new function for bootstrapping, a class that enables fast random variate sampling and percentile point function evaluation, and many other enhancements.
  - `cdist` and `pdist` distance calculations are faster for several metrics, especially weighted cases, thanks to a rewrite to a new C++ backend framework
  - A new class for radial basis function interpolation, <span class="title-ref">RBFInterpolator</span>, was added to address issues with the <span class="title-ref">Rbf</span> class.

*We gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source Software for Science program for supporting many of the improvements to* <span class="title-ref">scipy.stats</span>.

## New features

### <span class="title-ref">scipy.cluster</span> improvements

An optional argument, `seed`, has been added to `kmeans` and `kmeans2` to set the random generator and random state.

### <span class="title-ref">scipy.interpolate</span> improvements

Improved input validation and error messages for `fitpack.bispev` and `fitpack.parder` for scenarios that previously caused substantial confusion for users.

The class <span class="title-ref">RBFInterpolator</span> was added to supersede the <span class="title-ref">Rbf</span> class. The new class has usage that more closely follows other interpolator classes, corrects sign errors that caused unexpected smoothing behavior, includes polynomial terms in the interpolant (which are necessary for some RBF choices), and supports interpolation using only the k-nearest neighbors for memory efficiency.

### <span class="title-ref">scipy.linalg</span> improvements

An LAPACK wrapper was added for access to the `tgexc` subroutine.

### <span class="title-ref">scipy.ndimage</span> improvements

<span class="title-ref">scipy.ndimage.affine\_transform</span> is now able to infer the `output_shape` from the `out` array.

### <span class="title-ref">scipy.optimize</span> improvements

The optional parameter `bounds` was added to `_minimize_neldermead` to support bounds constraints for the Nelder-Mead solver.

`trustregion` methods `trust-krylov`, `dogleg` and `trust-ncg` can now estimate `hess` by finite difference using one of `["2-point", "3-point", "cs"]`.

`halton` was added as a `sampling_method` in <span class="title-ref">scipy.optimize.shgo</span>. `sobol` was fixed and is now using <span class="title-ref">scipy.stats.qmc.Sobol</span>.

`halton` and `sobol` were added as `init` methods in <span class="title-ref">scipy.optimize.differential\_evolution.</span>

`differential_evolution` now accepts an `x0` parameter to provide an initial guess for the minimization.

`least_squares` has a modest performance improvement when SciPy is built with Pythran transpiler enabled.

When `linprog` is used with `method` `'highs'`, `'highs-ipm'`, or `'highs-ds'`, the result object now reports the marginals (AKA shadow prices, dual values) and residuals associated with each constraint.

### <span class="title-ref">scipy.signal</span> improvements

`get_window` supports `general_cosine` and `general_hamming` window functions.

<span class="title-ref">scipy.signal.medfilt2d</span> now releases the GIL where appropriate to enable performance gains via multithreaded calculations.

### <span class="title-ref">scipy.sparse</span> improvements

Addition of `dia_matrix` sparse matrices is now faster.

### <span class="title-ref">scipy.spatial</span> improvements

`distance.cdist` and `distance.pdist` performance has greatly improved for certain weighted metrics. Namely: `minkowski`, `euclidean`, `chebyshev`, `canberra`, and `cityblock`.

Modest performance improvements for many of the unweighted `cdist` and `pdist` metrics noted above.

The parameter `seed` was added to <span class="title-ref">scipy.spatial.vq.kmeans</span> and <span class="title-ref">scipy.spatial.vq.kmeans2</span>.

The parameters `axis` and `keepdims` where added to <span class="title-ref">scipy.spatial.distance.jensenshannon</span>.

The `rotation` methods `from_rotvec` and `as_rotvec` now accept a `degrees` argument to specify usage of degrees instead of radians.

### <span class="title-ref">scipy.special</span> improvements

Wright's generalized Bessel function for positive arguments was added as <span class="title-ref">scipy.special.wright\_bessel</span>.

An implementation of the inverse of the Log CDF of the Normal Distribution is now available via <span class="title-ref">scipy.special.ndtri\_exp</span>.

### <span class="title-ref">scipy.stats</span> improvements

#### Hypothesis Tests

The Mann-Whitney-Wilcoxon test, `mannwhitneyu`, has been rewritten. It now supports n-dimensional input, an exact test method when there are no ties, and improved documentation. Please see "Other changes" for adjustments to default behavior.

The new function <span class="title-ref">scipy.stats.binomtest</span> replaces <span class="title-ref">scipy.stats.binom\_test</span>. The new function returns an object that calculates a confidence intervals of the proportion parameter. Also, performance was improved from O(n) to O(log(n)) by using binary search.

The two-sample version of the Cramer-von Mises test is implemented in <span class="title-ref">scipy.stats.cramervonmises\_2samp</span>.

The Alexander-Govern test is implemented in the new function <span class="title-ref">scipy.stats.alexandergovern</span>.

The new functions <span class="title-ref">scipy.stats.barnard\_exact</span> and <span class="title-ref">scipy.stats. boschloo\_exact</span> respectively perform Barnard's exact test and Boschloo's exact test for 2x2 contingency tables.

The new function <span class="title-ref">scipy.stats.page\_trend\_test</span> performs Page's test for ordered alternatives.

The new function <span class="title-ref">scipy.stats.somersd</span> performs Somers' D test for ordinal association between two variables.

An option, `permutations`, has been added in <span class="title-ref">scipy.stats.ttest\_ind</span> to perform permutation t-tests. A `trim` option was also added to perform a trimmed (Yuen's) t-test.

The `alternative` parameter was added to the `skewtest`, `kurtosistest`, `ranksums`, `mood`, `ansari`, `linregress`, and `spearmanr` functions to allow one-sided hypothesis testing.

#### Sample statistics

The new function <span class="title-ref">scipy.stats.differential\_entropy</span> estimates the differential entropy of a continuous distribution from a sample.

The `boxcox` and `boxcox_normmax` now allow the user to control the optimizer used to minimize the negative log-likelihood function.

A new function <span class="title-ref">scipy.stats.contingency.relative\_risk</span> calculates the relative risk, or risk ratio, of a 2x2 contingency table. The object returned has a method to compute the confidence interval of the relative risk.

Performance improvements in the `skew` and `kurtosis` functions achieved by removal of repeated/redundant calculations.

Substantial performance improvements in <span class="title-ref">scipy.stats.mstats.hdquantiles\_sd</span>.

The new function <span class="title-ref">scipy.stats.contingency.association</span> computes several measures of association for a contingency table: Pearsons contingency coefficient, Cramer's V, and Tschuprow's T.

The parameter `nan_policy` was added to <span class="title-ref">scipy.stats.zmap</span> to provide options for handling the occurrence of `nan` in the input data.

The parameter `ddof` was added to <span class="title-ref">scipy.stats.variation</span> and <span class="title-ref">scipy.stats.mstats.variation</span>.

The parameter `weights` was added to <span class="title-ref">scipy.stats.gmean</span>.

#### Statistical Distributions

We now vendor and leverage the Boost C++ library to address a number of previously reported issues in `stats`. Notably, `beta`, `binom`, `nbinom` now have Boost backends, and it is straightforward to leverage the backend for additional functions.

The skew Cauchy probability distribution has been implemented as <span class="title-ref">scipy.stats.skewcauchy</span>.

The Zipfian probability distribution has been implemented as <span class="title-ref">scipy.stats.zipfian</span>.

The new distributions `nchypergeom_fisher` and `nchypergeom_wallenius` implement the Fisher and Wallenius versions of the noncentral hypergeometric distribution, respectively.

The generalized hyperbolic distribution was added in <span class="title-ref">scipy.stats.genhyperbolic</span>.

The studentized range distribution was added in <span class="title-ref">scipy.stats.studentized\_range</span>.

<span class="title-ref">scipy.stats.argus</span> now has improved handling for small parameter values.

Better argument handling/preparation has resulted in performance improvements for many distributions.

The `cosine` distribution has added ufuncs for `ppf`, `cdf`, `sf`, and `isf` methods including numerical precision improvements at the edges of the support of the distribution.

An option to fit the distribution to data by the method of moments has been added to the `fit` method of the univariate continuous distributions.

#### Other

<span class="title-ref">scipy.stats.bootstrap</span> has been added to allow estimation of the confidence interval and standard error of a statistic.

The new function <span class="title-ref">scipy.stats.contingency.crosstab</span> computes a contingency table (i.e. a table of counts of unique entries) for the given data.

`scipy.stats.NumericalInverseHermite` enables fast random variate sampling and percentile point function evaluation of an arbitrary univariate statistical distribution.

#### New <span class="title-ref">scipy.stats.qmc</span> module

This new module provides Quasi-Monte Carlo (QMC) generators and associated helper functions.

It provides a generic class <span class="title-ref">scipy.stats.qmc.QMCEngine</span> which defines a QMC engine/sampler. An engine is state aware: it can be continued, advanced and reset. 3 base samplers are available:

  - <span class="title-ref">scipy.stats.qmc.Sobol</span> the well known Sobol low discrepancy sequence. Several warnings have been added to guide the user into properly using this sampler. The sequence is scrambled by default.
  - \`scipy.stats.qmc.Halton\`: Halton low discrepancy sequence. The sequence is scrambled by default.
  - \`scipy.stats.qmc.LatinHypercube\`: plain LHS design.

And 2 special samplers are available:

  - \`scipy.stats.qmc.MultinomialQMC\`: sampling from a multinomial distribution using any of the base <span class="title-ref">scipy.stats.qmc.QMCEngine</span>.
  - \`scipy.stats.qmc.MultivariateNormalQMC\`: sampling from a multivariate Normal using any of the base <span class="title-ref">scipy.stats.qmc.QMCEngine</span>.

The module also provide the following helpers:

  - \`scipy.stats.qmc.discrepancy\`: assess the quality of a set of points in terms of space coverage.
  - \`scipy.stats.qmc.update\_discrepancy\`: can be used in an optimization loop to construct a good set of points.
  - \`scipy.stats.qmc.scale\`: easily scale a set of points from (to) the unit interval to (from) a given range.

## Deprecated features

### <span class="title-ref">scipy.linalg</span> deprecations

  - <span class="title-ref">scipy.linalg.pinv2</span> is deprecated and its functionality is completely subsumed into <span class="title-ref">scipy.linalg.pinv</span>
  - Both `rcond`, `cond` keywords of <span class="title-ref">scipy.linalg.pinv</span> and <span class="title-ref">scipy.linalg.pinvh</span> were not working and now are deprecated. They are now replaced with functioning `atol` and `rtol` keywords with clear usage.

### <span class="title-ref">scipy.spatial</span> deprecations

  - <span class="title-ref">scipy.spatial.distance</span> metrics expect 1d input vectors but will call `np.squeeze` on their inputs to accept any extra length-1 dimensions. That behaviour is now deprecated.

## Backwards incompatible changes

## Other changes

We now accept and leverage performance improvements from the ahead-of-time Python-to-C++ transpiler, Pythran, which can be optionally disabled (via `export SCIPY_USE_PYTHRAN=0`) but is enabled by default at build time.

There are two changes to the default behavior of \`scipy.stats.mannwhitenyu\`:

  - For years, use of the default `alternative=None` was deprecated; explicit `alternative` specification was required. Use of the new default value of `alternative`, "two-sided", is now permitted.
  - Previously, all p-values were based on an asymptotic approximation. Now, for small samples without ties, the p-values returned are exact by default.

Support has been added for PEP 621 (project metadata in `pyproject.toml`)

We now support a Gitpod environment to reduce the barrier to entry for SciPy development; for more details see `quickstart-gitpod`.

## Authors

  - @endolith
  - Jelle Aalbers +
  - Adam +
  - Tania Allard +
  - Sven Baars +
  - Max Balandat +
  - baumgarc +
  - Christoph Baumgarten
  - Peter Bell
  - Lilian Besson
  - Robinson Besson +
  - Max Bolingbroke
  - Blair Bonnett +
  - Jordão Bragantini
  - Harm Buisman +
  - Evgeni Burovski
  - Matthias Bussonnier
  - Dominic C
  - CJ Carey
  - Ramón Casero +
  - Chachay +
  - charlotte12l +
  - Benjamin Curtice Corbett +
  - Falcon Dai +
  - Ian Dall +
  - Terry Davis
  - droussea2001 +
  - DWesl +
  - dwight200 +
  - Thomas J. Fan +
  - Joseph Fox-Rabinovitz
  - Max Frei +
  - Laura Gutierrez Funderburk +
  - gbonomib +
  - Matthias Geier +
  - Pradipta Ghosh +
  - Ralf Gommers
  - Evan H +
  - h-vetinari
  - Matt Haberland
  - Anselm Hahn +
  - Alex Henrie
  - Piet Hessenius +
  - Trever Hines +
  - Elisha Hollander +
  - Stephan Hoyer
  - Tom Hu +
  - Kei Ishikawa +
  - Julien Jerphanion
  - Robert Kern
  - Shashank KS +
  - Peter Mahler Larsen
  - Eric Larson
  - Cheng H. Lee +
  - Gregory R. Lee
  - Jean-Benoist Leger +
  - lgfunderburk +
  - liam-o-marsh +
  - Xingyu Liu +
  - Alex Loftus +
  - Christian Lorentzen +
  - Cong Ma
  - Marc +
  - MarkPundurs +
  - Markus Löning +
  - Liam Marsh +
  - Nicholas McKibben
  - melissawm +
  - Jamie Morton
  - Andrew Nelson
  - Nikola Forró
  - Tor Nordam +
  - Olivier Gauthé +
  - Rohit Pandey +
  - Avanindra Kumar Pandeya +
  - Tirth Patel
  - paugier +
  - Alex H. Wagner, PhD +
  - Jeff Plourde +
  - Ilhan Polat
  - pranavrajpal +
  - Vladyslav Rachek
  - Bharat Raghunathan
  - Recursing +
  - Tyler Reddy
  - Lucas Roberts
  - Gregor Robinson +
  - Pamphile Roy +
  - Atsushi Sakai
  - Benjamin Santos
  - Martin K. Scherer +
  - Thomas Schmelzer +
  - Daniel Scott +
  - Sebastian Wallkötter +
  - serge-sans-paille +
  - Namami Shanker +
  - Masashi Shibata +
  - Alexandre de Siqueira +
  - Albert Steppi +
  - Adam J. Stewart +
  - Kai Striega
  - Diana Sukhoverkhova
  - Søren Fuglede Jørgensen
  - Mike Taves
  - Dan Temkin +
  - Nicolas Tessore +
  - tsubota20 +
  - Robert Uhl
  - christos val +
  - Bas van Beek +
  - Ashutosh Varma +
  - Jose Vazquez +
  - Sebastiano Vigna
  - Aditya Vijaykumar
  - VNMabus
  - Arthur Volant +
  - Samuel Wallan
  - Stefan van der Walt
  - Warren Weckesser
  - Anreas Weh
  - Josh Wilson
  - Rory Yorke
  - Egor Zemlyanoy
  - Marc Zoeller +
  - zoj613 +
  - 秋纫 +

A total of 126 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.7.0

  - [\#636](https://github.com/scipy/scipy/issues/636): Statistics Review: mannwhitneyu (Trac \#109)
  - [\#1346](https://github.com/scipy/scipy/issues/1346): signal.medfilt2d should fall back on signal.medfilt for types...
  - [\#2118](https://github.com/scipy/scipy/issues/2118): Mann-Whitney statistic returns incorrect results (Trac \#1593)
  - [\#2158](https://github.com/scipy/scipy/issues/2158): special.chndtrix (ncx2.ppf) gives wrong results (Trac \#1633)
  - [\#3284](https://github.com/scipy/scipy/issues/3284): build\_sphinx weirdness
  - [\#3352](https://github.com/scipy/scipy/issues/3352): beta distribution sf
  - [\#4067](https://github.com/scipy/scipy/issues/4067): Mannwhitneyu with arrays full of nan still reports significance
  - [\#4080](https://github.com/scipy/scipy/issues/4080): entropy in Scipy
  - [\#4641](https://github.com/scipy/scipy/issues/4641): mstats.mannwhitneyu and stats.mannwhitneyu return inconsistent...
  - [\#5122](https://github.com/scipy/scipy/issues/5122): scipy.stats.binom.ppf Incorrect for p=0
  - [\#5180](https://github.com/scipy/scipy/issues/5180): Rbf interpolation - use only K nearest neighbors
  - [\#5258](https://github.com/scipy/scipy/issues/5258): affine\_transform complains about output\_shape when output array...
  - [\#5562](https://github.com/scipy/scipy/issues/5562): Wishart degrees of freedom should be $v \> p-1$ instead of $v...
  - [\#5933](https://github.com/scipy/scipy/issues/5933): mstats\_basic.py - mannwhitneyu \[scipy/scipy/stats/mstats\_basic.py\]
  - [\#6409](https://github.com/scipy/scipy/issues/6409): \_unequal\_var\_ttest\_denom causes ZeroDivisionError in early samples
  - [\#6682](https://github.com/scipy/scipy/issues/6682): negative binomial survival function is imprecise
  - [\#6897](https://github.com/scipy/scipy/issues/6897): scipy.stats.mannwhitneyu of empty sets gives p=0.0 and does not...
  - [\#7303](https://github.com/scipy/scipy/issues/7303): stats.describe with nan\_policy=omit returns matrix-wide minmax...
  - [\#7406](https://github.com/scipy/scipy/issues/7406): scipy.stats.binom.ppf returns nan for q between 0 and 1 if n...
  - [\#7437](https://github.com/scipy/scipy/issues/7437): ENH: add skewed Cauchy distribution to stats
  - [\#7542](https://github.com/scipy/scipy/issues/7542): DOC: stats tutorials: Questions on arcsine and Student t formulae
  - [\#7593](https://github.com/scipy/scipy/issues/7593): Meaning of \`tol\` argument in \`scipy.optimize.minimize\` is...
  - [\#8565](https://github.com/scipy/scipy/issues/8565): Error in SmoothSphereBivariateSpline(): "ValueError: Error code...
  - [\#8665](https://github.com/scipy/scipy/issues/8665): \`scipy.ncx2.sf\` should be monotone decreasing
  - [\#8836](https://github.com/scipy/scipy/issues/8836): scipy.optimize.linprog(method='simplex') needs to return duals
  - [\#9184](https://github.com/scipy/scipy/issues/9184): Mann-Whitney implementation wrong?
  - [\#9450](https://github.com/scipy/scipy/issues/9450): allow seeding of init methods in vq.kmeans2
  - [\#9704](https://github.com/scipy/scipy/issues/9704): RectSphereBivariateSpline fails for negative longitude
  - [\#9836](https://github.com/scipy/scipy/issues/9836): scipy.stats.rice gives incorrect results when s is very low compared...
  - [\#9904](https://github.com/scipy/scipy/issues/9904): Request/Proposal: Greatly improve scipy.interpolate.Rbf
  - [\#9981](https://github.com/scipy/scipy/issues/9981): stats.kruskal : add a warning for an input with 2 or more columns
  - [\#10358](https://github.com/scipy/scipy/issues/10358): DOC: linprog and linear\_sum\_assignment tutorials needed
  - [\#10908](https://github.com/scipy/scipy/issues/10908): Nakami fitting doesn't converge (scipy.stats)
  - [\#10933](https://github.com/scipy/scipy/issues/10933): Add scaled inverse chi2 distribution
  - [\#11014](https://github.com/scipy/scipy/issues/11014): Barnard's Test for More Powerful Hypothesis Testing of 2x2 Contingency...
  - [\#11050](https://github.com/scipy/scipy/issues/11050): Feature request: Nelder-Mead with bounds
  - [\#11086](https://github.com/scipy/scipy/issues/11086): scipy.stats.skew doesn't work correctly for float point numbers
  - [\#11113](https://github.com/scipy/scipy/issues/11113): inconsistent result from ttest\_ind and mannwhitneyu when used...
  - [\#11134](https://github.com/scipy/scipy/issues/11134): Wrong confidence interval for binomial distribution with p=0
  - [\#11325](https://github.com/scipy/scipy/issues/11325): Add axis parameter for scipy.spatial.distance.jensenshannon
  - [\#11474](https://github.com/scipy/scipy/issues/11474): scipy.stats.skellam.cdf(0) returns 0 for large mu1 = mu2
  - [\#11523](https://github.com/scipy/scipy/issues/11523): scipy.stats.zipf doesn't implement zipf distribution
  - [\#11848](https://github.com/scipy/scipy/issues/11848): How to get Lagrange / lambda multipliers out of 'linprog' optimize...
  - [\#11909](https://github.com/scipy/scipy/issues/11909): Enable bounds for lambda in boxcox
  - [\#12118](https://github.com/scipy/scipy/issues/12118): Docstring missing defaults
  - [\#12132](https://github.com/scipy/scipy/issues/12132): Slow tests to be trimmed or moved to test('full')
  - [\#12230](https://github.com/scipy/scipy/issues/12230): Dendrogram: enable leaves labelling with 'labels' when using...
  - [\#12282](https://github.com/scipy/scipy/issues/12282): scipy.stats.chisquare test does not check that observed and expected...
  - [\#12298](https://github.com/scipy/scipy/issues/12298): BUG: fmin\_powell missing squeeze in 1.5.0rc
  - [\#12403](https://github.com/scipy/scipy/issues/12403): Add nan\_policy to stats.zmap
  - [\#12518](https://github.com/scipy/scipy/issues/12518): Null hypothesis of Kolmogorov Smirnov test is not correctly described
  - [\#12534](https://github.com/scipy/scipy/issues/12534): Feature request: scipy.linalg.norm to deal with 0-size array
  - [\#12622](https://github.com/scipy/scipy/issues/12622): scipy.interpolate.interpn docstring example
  - [\#12635](https://github.com/scipy/scipy/issues/12635): scipy.stats.beta.ppf gives unexpexted results
  - [\#12669](https://github.com/scipy/scipy/issues/12669): Median-averaging of complex CSDs
  - [\#12731](https://github.com/scipy/scipy/issues/12731): stats.ncx2.cdf fails for nc \>\> x \>\> 1
  - [\#12778](https://github.com/scipy/scipy/issues/12778): Confusing documentation of scipy.stats.weightedtau
  - [\#12794](https://github.com/scipy/scipy/issues/12794): \[Bug\] The result of stats.beta.isf is inconsistent with stats.beta.sf
  - [\#12837](https://github.com/scipy/scipy/issues/12837): stats.mannwhitneyu could support arrays
  - [\#12868](https://github.com/scipy/scipy/issues/12868): Vector-valued interpolation in \`interp2d\`
  - [\#12922](https://github.com/scipy/scipy/issues/12922): Minimize with trust-constr method leads to TypeError if option...
  - [\#12929](https://github.com/scipy/scipy/issues/12929): The use of starred expressions to create data detracts from understanding...
  - [\#12965](https://github.com/scipy/scipy/issues/12965): domain of argument of scipy.interpolate.RectSphereBivariateSpline(u,...
  - [\#13025](https://github.com/scipy/scipy/issues/13025): Generalized Hyperbolic Distribution
  - [\#13090](https://github.com/scipy/scipy/issues/13090): Broken link in doc for signal.max\_len\_seq
  - [\#13101](https://github.com/scipy/scipy/issues/13101): MAINT: Upgrade python version in docker file
  - [\#13158](https://github.com/scipy/scipy/issues/13158): \`signal.get\_window()\` has a missing doc link and cannot get...
  - [\#13173](https://github.com/scipy/scipy/issues/13173): Uninformative error message from bisplev function
  - [\#13234](https://github.com/scipy/scipy/issues/13234): BUG: stats: Wrong shape of burr.moment() and fisk.moment() when...
  - [\#13242](https://github.com/scipy/scipy/issues/13242): Does kmeans "drop" clusters?
  - [\#13243](https://github.com/scipy/scipy/issues/13243): tgsen uses an output argument for computing a default argument
  - [\#13245](https://github.com/scipy/scipy/issues/13245): Kurtosis returning 1 for array of same elements
  - [\#13257](https://github.com/scipy/scipy/issues/13257): GitHub Actions test failures for MacOS
  - [\#13272](https://github.com/scipy/scipy/issues/13272): scipy.stats.yeojohnson\_llf doc mistake
  - [\#13280](https://github.com/scipy/scipy/issues/13280): Wrong results with hypergeom cdf
  - [\#13285](https://github.com/scipy/scipy/issues/13285): description correction in scipy.stats.t
  - [\#13287](https://github.com/scipy/scipy/issues/13287): Generate binomial CDF with mu instead of prob
  - [\#13294](https://github.com/scipy/scipy/issues/13294): BUG: stats: wrong bounds returned by 'support' method for distributions...
  - [\#13299](https://github.com/scipy/scipy/issues/13299): Typing for scipy.spatial
  - [\#13300](https://github.com/scipy/scipy/issues/13300): Add a single individual to a latinhypercube initial population...
  - [\#13311](https://github.com/scipy/scipy/issues/13311): MAINT: pavement.py PYVER is outdated
  - [\#13339](https://github.com/scipy/scipy/issues/13339): savemat discards dimension information if any dimension is zero
  - [\#13341](https://github.com/scipy/scipy/issues/13341): add scipy.stats.variation with an ddof parameter
  - [\#13353](https://github.com/scipy/scipy/issues/13353): Documentation: in scipy.stats.johnsonsu, parameter \`a\` can...
  - [\#13405](https://github.com/scipy/scipy/issues/13405): TST: add a few tests for sparse BSR ctor
  - [\#13410](https://github.com/scipy/scipy/issues/13410): BUG: skew for empty array raises
  - [\#13417](https://github.com/scipy/scipy/issues/13417): 10,000 times speedup for generating random numbers from the cosine...
  - [\#13440](https://github.com/scipy/scipy/issues/13440): python runtest.py -t path-to-test.py failed
  - [\#13454](https://github.com/scipy/scipy/issues/13454): Scipy cosine distance can be greater than 2
  - [\#13459](https://github.com/scipy/scipy/issues/13459): Broken link in cramervonmises documentation
  - [\#13494](https://github.com/scipy/scipy/issues/13494): One-word typo in the documentation of optimize.linprog\_simplex
  - [\#13501](https://github.com/scipy/scipy/issues/13501): minimize using Powell methods with Bounds leads to "TypeError:...
  - [\#13509](https://github.com/scipy/scipy/issues/13509): signal.medfilt2d vs ndimage.median\_filter
  - [\#13511](https://github.com/scipy/scipy/issues/13511): DOC: error in description of "direc" parameter of "fmin\_powell"
  - [\#13526](https://github.com/scipy/scipy/issues/13526): TST: stats: intermittent \`test\_ttest\_ind\_randperm\_alternative2...
  - [\#13536](https://github.com/scipy/scipy/issues/13536): \`\_within\_tolerance\` seems an unnecessary repetition of \`numpy.isclose\`
  - [\#13540](https://github.com/scipy/scipy/issues/13540): missing python 3.8 manylinux wheels on scipy-wheels-nightly
  - [\#13559](https://github.com/scipy/scipy/issues/13559): shape error in linprog with revised simplex
  - [\#13587](https://github.com/scipy/scipy/issues/13587): binned\_statistic unreliable with single precision
  - [\#13589](https://github.com/scipy/scipy/issues/13589): Better argument preparation for distributions in stats package.
  - [\#13602](https://github.com/scipy/scipy/issues/13602): The crystallball distribution entropy is sometimes minus infinity
  - [\#13606](https://github.com/scipy/scipy/issues/13606): MAINT: mypy: some typing errors while running mypy + adding mypy...
  - [\#13608](https://github.com/scipy/scipy/issues/13608): Why does stats.binned\_statistic\_2d convert its values argument...
  - [\#13609](https://github.com/scipy/scipy/issues/13609): BUG: SciPy pip install -e gets unusable version spec
  - [\#13610](https://github.com/scipy/scipy/issues/13610): Highs solver did not provide a solution nor did it report a failure
  - [\#13614](https://github.com/scipy/scipy/issues/13614): BUG: invgauss.cdf should return the correct value when \`mu\`...
  - [\#13628](https://github.com/scipy/scipy/issues/13628): 1-letter typo in the definition of scipy.special.spence function...
  - [\#13634](https://github.com/scipy/scipy/issues/13634): mmwrite fails on dense, skew-symmetric array
  - [\#13646](https://github.com/scipy/scipy/issues/13646): Sparse matrix argmax() integer overflow on Windows 10
  - [\#13647](https://github.com/scipy/scipy/issues/13647): \`scipy.stats.qmc.LatinHypercube\` cannot sample single sample...
  - [\#13651](https://github.com/scipy/scipy/issues/13651): Documentation wrong in scipy.linalg.eigvalsh
  - [\#13664](https://github.com/scipy/scipy/issues/13664): BUG: gamma distribution's inverse survival function overflows...
  - [\#13693](https://github.com/scipy/scipy/issues/13693): BUG: sokalmichener appears to incorrectly apply weights
  - [\#13697](https://github.com/scipy/scipy/issues/13697): BUG: stats: Spurious warning generated by arcsine.pdf at the...
  - [\#13704](https://github.com/scipy/scipy/issues/13704): Make it possible to pass a rank cut-off value relatively to the...
  - [\#13707](https://github.com/scipy/scipy/issues/13707): Kullback Leibler Divergence broadcasting no longer works
  - [\#13740](https://github.com/scipy/scipy/issues/13740): Scipy.optimize x0 out of bounds when it is within bounds.
  - [\#13744](https://github.com/scipy/scipy/issues/13744): scipy.interpolate.interp1d has inconsistent behavior for non-unique...
  - [\#13754](https://github.com/scipy/scipy/issues/13754): optimize.minimize 'trust' methods and finite difference Hessian...
  - [\#13762](https://github.com/scipy/scipy/issues/13762): MAINT, TST: aarch64 stats test failures showing up in wheels...
  - [\#13769](https://github.com/scipy/scipy/issues/13769): probplot draws fit line even when fit=False
  - [\#13791](https://github.com/scipy/scipy/issues/13791): BUG: stats: wrapcauchy.cdf does not broadcast the shape parameter...
  - [\#13793](https://github.com/scipy/scipy/issues/13793): CI: CircleCI doc build failure
  - [\#13840](https://github.com/scipy/scipy/issues/13840): manylinux1 builds are failing because of C99 usage in \`special/\_cosine.c\`
  - [\#13850](https://github.com/scipy/scipy/issues/13850): CI: Homebrew is failing due to bintray
  - [\#13875](https://github.com/scipy/scipy/issues/13875): BUG: chi2\_contingency with Yates correction
  - [\#13878](https://github.com/scipy/scipy/issues/13878): BUG: \`signal.get\_window\` argument handling issue
  - [\#13880](https://github.com/scipy/scipy/issues/13880): Remove all usages of numpy.compat
  - [\#13896](https://github.com/scipy/scipy/issues/13896): Boschloo's Test for More Powerful Hypothesis Testing of 2x2 Contingency...
  - [\#13923](https://github.com/scipy/scipy/issues/13923): Inverse of Log CDF of Normal Distribution
  - [\#13933](https://github.com/scipy/scipy/issues/13933): \`signal.get\_window\` does not support \`general\_cosine\` and...
  - [\#13950](https://github.com/scipy/scipy/issues/13950): DOC: scipy.spatial.KDTree.query
  - [\#13969](https://github.com/scipy/scipy/issues/13969): N=4 must not exceed M=3
  - [\#13970](https://github.com/scipy/scipy/issues/13970): Pearson's original paper on chi-square test could be referenced.
  - [\#13984](https://github.com/scipy/scipy/issues/13984): Faster addition of sparse diagonal matrices
  - [\#13988](https://github.com/scipy/scipy/issues/13988): An error occurred when using scipy.io.wavfile of scipy 1.6 version...
  - [\#13997](https://github.com/scipy/scipy/issues/13997): BUG: sparse: Incorrect result from \`dia\_matrix.diagonal()\`
  - [\#14005](https://github.com/scipy/scipy/issues/14005): MAINT: optimize: \`curve\_fit\` input error msg can be improved.
  - [\#14038](https://github.com/scipy/scipy/issues/14038): MAINT: add type annotations for \_sobol.pyx
  - [\#14048](https://github.com/scipy/scipy/issues/14048): DOC: missing git submodule information
  - [\#14055](https://github.com/scipy/scipy/issues/14055): linalg.solve: Unclear error when using assume\_a='her' with real...
  - [\#14093](https://github.com/scipy/scipy/issues/14093): DOC: Inconsistency in the definition of default values in the...
  - [\#14158](https://github.com/scipy/scipy/issues/14158): TST, BUG: test\_rbfinterp.py -- test\_interpolation\_misfit\_1d fails...
  - [\#14170](https://github.com/scipy/scipy/issues/14170): TST: signal submodule test\_filtfilt\_gust failing on 32-bit amd64...
  - [\#14194](https://github.com/scipy/scipy/issues/14194): MAINT: download-wheels.py missing import
  - [\#14199](https://github.com/scipy/scipy/issues/14199): Generated sources for biasedurn extension are broken in 1.7.0rc1

## Pull requests for 1.7.0

  - [\#4824](https://github.com/scipy/scipy/pull/4824): Permutation Ttest (new PR)
  - [\#4933](https://github.com/scipy/scipy/pull/4933): ENH: Update the Mann-Whitney-Wilcoxon test
  - [\#7702](https://github.com/scipy/scipy/pull/7702): ENH: stats: Add Skewed Cauchy Distribution
  - [\#8306](https://github.com/scipy/scipy/pull/8306): Optional Pythran support for scipy.signal.max\_len\_seq\_inner
  - [\#10170](https://github.com/scipy/scipy/pull/10170): MAINT: stats: Implement cdf and ppf as ufuncs for the cosine...
  - [\#10454](https://github.com/scipy/scipy/pull/10454): ENH: Extend find\_peaks\_cwt to take numbers and iterables for...
  - [\#10844](https://github.com/scipy/scipy/pull/10844): ENH: add stats.qmc module with quasi Monte Carlo functionality
  - [\#11313](https://github.com/scipy/scipy/pull/11313): ENH: add Wright's generalized Bessel function
  - [\#11352](https://github.com/scipy/scipy/pull/11352): ENH: stats: Add crosstab function.
  - [\#11477](https://github.com/scipy/scipy/pull/11477): FIX: bounded parameter in cdfchn.f gives bad results
  - [\#11695](https://github.com/scipy/scipy/pull/11695): ENH: stats: add method of moments to \`rv\_continuous.fit\`
  - [\#11911](https://github.com/scipy/scipy/pull/11911): ENH: Added bounds to boxcox and boxcox\_normmax
  - [\#12438](https://github.com/scipy/scipy/pull/12438): BUG: use ellipkm1 in elliptical filter design to prevent numerical...
  - [\#12531](https://github.com/scipy/scipy/pull/12531): ENH: stats: add Page's L test
  - [\#12603](https://github.com/scipy/scipy/pull/12603): ENH: stats: Add \`binomtest\` to replace \`binom\_test\`.
  - [\#12653](https://github.com/scipy/scipy/pull/12653): ENH: stats: add Somers' D test
  - [\#12676](https://github.com/scipy/scipy/pull/12676): BUG: update median averaging in signal.csd
  - [\#12760](https://github.com/scipy/scipy/pull/12760): BUG: special: erfinv(x\<\<1) loses precision
  - [\#12801](https://github.com/scipy/scipy/pull/12801): ENH: Add single-sided p-values to remaining spearmanr and linregress
  - [\#12873](https://github.com/scipy/scipy/pull/12873): ENH: Stats: add Alexander Govern Test
  - [\#13008](https://github.com/scipy/scipy/pull/13008): ENH: Add 'alternative' to functions using normal CDF for p-value
  - [\#13040](https://github.com/scipy/scipy/pull/13040): BUG: Allow RectSphereBivariateSpline to accept negative longitude
  - [\#13048](https://github.com/scipy/scipy/pull/13048): ENH: stats: Add a function that computes the relative risk.
  - [\#13067](https://github.com/scipy/scipy/pull/13067): ENH: Add weights parameter to stats.gmean
  - [\#13084](https://github.com/scipy/scipy/pull/13084): ENH: fast Hankel transform
  - [\#13104](https://github.com/scipy/scipy/pull/13104): MAINT: upgrade python version (drop python 3.6) for docker dev...
  - [\#13153](https://github.com/scipy/scipy/pull/13153): ENH: added association measurements Pearsons Contingency Coefficient,...
  - [\#13166](https://github.com/scipy/scipy/pull/13166): ENH: stats: Add nan\_policy to zmap.
  - [\#13175](https://github.com/scipy/scipy/pull/13175): MAINT: tests for tall cost matrices in \`linear\_sum\_assignment\`
  - [\#13177](https://github.com/scipy/scipy/pull/13177): BUG: raise NotImplementedError in fourier\_ellipsoid when ndim...
  - [\#13184](https://github.com/scipy/scipy/pull/13184): BUG: stats: Fix min and max calculation of mstats.describe with...
  - [\#13188](https://github.com/scipy/scipy/pull/13188): DOC: stats: make null and alternative hypotheses of kstest more...
  - [\#13193](https://github.com/scipy/scipy/pull/13193): MAINT: stats: chisquare check sum of observed/expected frequencies
  - [\#13197](https://github.com/scipy/scipy/pull/13197): ENH/MAINT: HiGHS upstream enhancements and bug fixes
  - [\#13198](https://github.com/scipy/scipy/pull/13198): ENH: allow inference of output\_shape from out array in affine\_transform
  - [\#13204](https://github.com/scipy/scipy/pull/13204): ENH: stats: add Zipfian (different from Zipf/zeta) distribution
  - [\#13208](https://github.com/scipy/scipy/pull/13208): REL: set version to 1.7.0.dev0
  - [\#13216](https://github.com/scipy/scipy/pull/13216): TST: stats: break up and mark slow tests
  - [\#13224](https://github.com/scipy/scipy/pull/13224): Update docs for the weighted τ
  - [\#13230](https://github.com/scipy/scipy/pull/13230): ENH: linalg: Add LAPACK wrapper for tgexc.
  - [\#13232](https://github.com/scipy/scipy/pull/13232): MAINT: stats: raise error when input to kruskal has \>1 dim
  - [\#13233](https://github.com/scipy/scipy/pull/13233): DOC: stats: fix MGF of arcsine and entropy of t in tutorial
  - [\#13236](https://github.com/scipy/scipy/pull/13236): MAINT: reorganize shared linear assignment tests
  - [\#13237](https://github.com/scipy/scipy/pull/13237): BENCH: Refactor stats.Distribution to easily add new distributions
  - [\#13238](https://github.com/scipy/scipy/pull/13238): BUG: stats: fix wrong shape output of burr and fisk distributions
  - [\#13240](https://github.com/scipy/scipy/pull/13240): MAINT: add tests of trivial cost matrices for linear sum assignment
  - [\#13252](https://github.com/scipy/scipy/pull/13252): DOC: optimize: add \`optimize.linear\_sum\_assignment\` tutorial.
  - [\#13254](https://github.com/scipy/scipy/pull/13254): BUG: Fix precision issues for constant input in skew and kurtosis
  - [\#13262](https://github.com/scipy/scipy/pull/13262): BUG: scipy.medfilt and .medfilt2d fixes
  - [\#13263](https://github.com/scipy/scipy/pull/13263): ENH: add Cramer-von Mises test for two samples
  - [\#13264](https://github.com/scipy/scipy/pull/13264): fix a minor typo in \`stats.anderson\` doc
  - [\#13268](https://github.com/scipy/scipy/pull/13268): ENH: stats: Add implementation of \_entropy for the t distr.
  - [\#13273](https://github.com/scipy/scipy/pull/13273): DOC: stats: fix typo in Yeo-Johnson LL function documentation
  - [\#13275](https://github.com/scipy/scipy/pull/13275): MAINT: stats: Correct a comment in the \_fitstart method of gamma.
  - [\#13283](https://github.com/scipy/scipy/pull/13283): BUG: stats: fix the cdf method of rv\_discrete class
  - [\#13286](https://github.com/scipy/scipy/pull/13286): DOC: stats: clairify rv\_continuous/discrete.stats example
  - [\#13288](https://github.com/scipy/scipy/pull/13288): DOC: stats: discrete distribution shape parameter restrictions
  - [\#13289](https://github.com/scipy/scipy/pull/13289): MAINT: fix a build warning in sigtoolsmodule.c
  - [\#13290](https://github.com/scipy/scipy/pull/13290): DOC: Expand the discussion of the nan\_policy API.
  - [\#13291](https://github.com/scipy/scipy/pull/13291): MAINT: signal, stats: Use keepdims where appropriate.
  - [\#13292](https://github.com/scipy/scipy/pull/13292): DOC: stats: note another common parameterization of nbinom
  - [\#13293](https://github.com/scipy/scipy/pull/13293): DOC: Change broken link for default values to archived link
  - [\#13295](https://github.com/scipy/scipy/pull/13295): BUG: stats: fix the support method to return correct bounds
  - [\#13296](https://github.com/scipy/scipy/pull/13296): DOC: stats: Fix latex markup in the kstwo docstring.
  - [\#13297](https://github.com/scipy/scipy/pull/13297): TST: mark kde.logpdf overflow test as xslow
  - [\#13298](https://github.com/scipy/scipy/pull/13298): Generalized Hyperbolic Distribution
  - [\#13301](https://github.com/scipy/scipy/pull/13301): DOC: cluster: Add cluster number note to the docstring of cluster.vq.kmeans
  - [\#13302](https://github.com/scipy/scipy/pull/13302): BUG: Fix ndimage.morphology.distance\_transform\_\* argument handling
  - [\#13303](https://github.com/scipy/scipy/pull/13303): CI: prevent Codecov giving false CI failures and wrong PR annotations
  - [\#13313](https://github.com/scipy/scipy/pull/13313): ENH: static typing for qhull
  - [\#13316](https://github.com/scipy/scipy/pull/13316): Pythran implementation of scipy.signal.\_spectral
  - [\#13317](https://github.com/scipy/scipy/pull/13317): DOC: forward port 1.6.0 relnotes
  - [\#13319](https://github.com/scipy/scipy/pull/13319): ENH: stats: add fast numerical inversion of distribution CDF
  - [\#13320](https://github.com/scipy/scipy/pull/13320): ENH: x0 for differential\_evolution
  - [\#13324](https://github.com/scipy/scipy/pull/13324): DOC correct linprog highs versionadded to 1.6
  - [\#13326](https://github.com/scipy/scipy/pull/13326): MAINT: update numpydoc to v1.1.0
  - [\#13327](https://github.com/scipy/scipy/pull/13327): DOC: interpolate: improved docstring examples of \`interpolate.interpn()\`...
  - [\#13328](https://github.com/scipy/scipy/pull/13328): ENH: Boost stats distributions
  - [\#13330](https://github.com/scipy/scipy/pull/13330): ENH: stats: add noncentral hypergeometric distributions (Fisher's...
  - [\#13331](https://github.com/scipy/scipy/pull/13331): MAINT/ENH: resolve mypy warnings/errors
  - [\#13332](https://github.com/scipy/scipy/pull/13332): DOC: interpolate: improved docstring of \`interpolate.interp2d\`...
  - [\#13333](https://github.com/scipy/scipy/pull/13333): ENH: stats: Some more \_sf and \_isf implementations.
  - [\#13334](https://github.com/scipy/scipy/pull/13334): MAINT: stats: Clean up a few defunct comments in \_continuous\_distns.py
  - [\#13336](https://github.com/scipy/scipy/pull/13336): Pythran version of scipy.optimize.\_group\_columns
  - [\#13337](https://github.com/scipy/scipy/pull/13337): DOC|ENH: type hinting in scipy.integrate.simpson
  - [\#13346](https://github.com/scipy/scipy/pull/13346): ENH: stats: add 'ddof' parameter to the 'variation' function
  - [\#13355](https://github.com/scipy/scipy/pull/13355): ENH: stats: implement \_logpdf, \_sf and \_isf for loggamma.
  - [\#13360](https://github.com/scipy/scipy/pull/13360): ENH|DOC: fix docstring and input validation in interpolate.RectSphereBivariateSpline
  - [\#13366](https://github.com/scipy/scipy/pull/13366): BUG: stats: Don't raise ZeroDivisionError in \_unequal\_var\_ttest\_denom
  - [\#13370](https://github.com/scipy/scipy/pull/13370): ENH: fix ARGUS distribution for small parameters in stats
  - [\#13371](https://github.com/scipy/scipy/pull/13371): ENH: stats: add \`bootstrap\` for estimating confidence interval...
  - [\#13373](https://github.com/scipy/scipy/pull/13373): BUG: io/matlab: preserve dimensions of empty \>=2D arrays
  - [\#13374](https://github.com/scipy/scipy/pull/13374): ENH: stats: add skewed Cauchy distribution
  - [\#13379](https://github.com/scipy/scipy/pull/13379): BUG: sparse: fix verbosity in sparse lsqr
  - [\#13383](https://github.com/scipy/scipy/pull/13383): TST: stats: mark many dimension permutation t-test slow
  - [\#13384](https://github.com/scipy/scipy/pull/13384): MAINT: Make keywords array static
  - [\#13388](https://github.com/scipy/scipy/pull/13388): PERF: Avoid duplicate mean calculations in skew and kurtosis
  - [\#13389](https://github.com/scipy/scipy/pull/13389): DOC: Fix deprecated directive syntax
  - [\#13390](https://github.com/scipy/scipy/pull/13390): DOC: Correct line length for Parameter Section underline
  - [\#13393](https://github.com/scipy/scipy/pull/13393): MAINT: stats: allow wishart dim - 1 \< df \< dim
  - [\#13395](https://github.com/scipy/scipy/pull/13395): DOC: fix typo in setup.py warning message
  - [\#13396](https://github.com/scipy/scipy/pull/13396): BUG: Fix MLE for Nakagami \`nakagami\_gen.fit\`
  - [\#13397](https://github.com/scipy/scipy/pull/13397): MAINT:linalg: Fix tgsen family wrapper and ordqz
  - [\#13406](https://github.com/scipy/scipy/pull/13406): TST: add error handling tests for sparse BSR ctor
  - [\#13413](https://github.com/scipy/scipy/pull/13413): DOC: ultra-quickstart guide
  - [\#13418](https://github.com/scipy/scipy/pull/13418): BUG: Fix moment returning inconsistent types and shapes
  - [\#13423](https://github.com/scipy/scipy/pull/13423): DOC: Update example for leaf\_label\_func/dendrogram
  - [\#13431](https://github.com/scipy/scipy/pull/13431): ENH: stats: override \_rvs for nhypergeom
  - [\#13432](https://github.com/scipy/scipy/pull/13432): Add indicator in NDInterpolator docstring that N must be \> 1
  - [\#13434](https://github.com/scipy/scipy/pull/13434): DOC: stats: note relationship between scaled-inv-chi2 and invgamma
  - [\#13436](https://github.com/scipy/scipy/pull/13436): ENH: interpolate: add input validation to check input x-y is...
  - [\#13441](https://github.com/scipy/scipy/pull/13441): ENH: add functionality \`barnard\_exact\` test to scipy.stats.
  - [\#13443](https://github.com/scipy/scipy/pull/13443): MAINT: stats: Updates for skewcauchy
  - [\#13444](https://github.com/scipy/scipy/pull/13444): DOC: clarify range of \`a\` parameter fpr johnsonsu/johnsonsb
  - [\#13445](https://github.com/scipy/scipy/pull/13445): DOC: fix runtests guidelines.
  - [\#13446](https://github.com/scipy/scipy/pull/13446): MAINT: stats: Add \_fitstart method to wrapcauchy.
  - [\#13447](https://github.com/scipy/scipy/pull/13447): DEV: Update development Docker image
  - [\#13448](https://github.com/scipy/scipy/pull/13448): ENH: Add annotations for \`scipy.spatial.distance\`
  - [\#13451](https://github.com/scipy/scipy/pull/13451): DOC: minor formatting.
  - [\#13458](https://github.com/scipy/scipy/pull/13458): DOC: indent see also.
  - [\#13460](https://github.com/scipy/scipy/pull/13460): DOC: stats: Fix link to Cramer-von Mises wikipedia article.
  - [\#13461](https://github.com/scipy/scipy/pull/13461): DOC: reorganize scipy.stats overview docs page
  - [\#13463](https://github.com/scipy/scipy/pull/13463): DOC: misc formatting fixes
  - [\#13466](https://github.com/scipy/scipy/pull/13466): DOC: Typo in see also s/SmoothUni/SmoothBi/g
  - [\#13467](https://github.com/scipy/scipy/pull/13467): DOC: optimize: add description about \`tol\` argument for \`minimize\`.
  - [\#13469](https://github.com/scipy/scipy/pull/13469): MAINT: Refactor optimization methods to use scipy.stats.qmc
  - [\#13477](https://github.com/scipy/scipy/pull/13477): CI: pin numpy to 1.19.5 for the three macOS CI jobs
  - [\#13478](https://github.com/scipy/scipy/pull/13478): DOC: fix typos where double :: for Sphinx directives were missing
  - [\#13481](https://github.com/scipy/scipy/pull/13481): CI: pin numpy to 1.19.5 in the 4 parallel Windows builds on Azure
  - [\#13482](https://github.com/scipy/scipy/pull/13482): CI: use numpy 1.20.0 again in macOS CI
  - [\#13483](https://github.com/scipy/scipy/pull/13483): DOC: Multiple documentation syntax fixes.
  - [\#13484](https://github.com/scipy/scipy/pull/13484): Move some pythran config from CI to setup
  - [\#13487](https://github.com/scipy/scipy/pull/13487): DOC: add a tutorial about scipy.stats.qmc
  - [\#13492](https://github.com/scipy/scipy/pull/13492): ENH: GH actions should not run on forks
  - [\#13493](https://github.com/scipy/scipy/pull/13493): DEV: Enable gitpod for SciPy
  - [\#13495](https://github.com/scipy/scipy/pull/13495): DOC One-word typo in the documentation of optimize.linprog\_simplex
  - [\#13499](https://github.com/scipy/scipy/pull/13499): DOC: describe LSAP implementation
  - [\#13502](https://github.com/scipy/scipy/pull/13502): BUG: Bounds created with lists weren't working for Powell
  - [\#13507](https://github.com/scipy/scipy/pull/13507): MAINT, TST: stats: centralize invalid parameters list for all...
  - [\#13510](https://github.com/scipy/scipy/pull/13510): DOC: stats: fix small doc errors in 'multivariate\_hypergeom'
  - [\#13513](https://github.com/scipy/scipy/pull/13513): DOC: Added math notation in examples in ltisys.py
  - [\#13514](https://github.com/scipy/scipy/pull/13514): ENH: simplify low\_0\_bit function for Sobol
  - [\#13515](https://github.com/scipy/scipy/pull/13515): ENH: optimize: add bound constraint support for nelder-mead solver
  - [\#13516](https://github.com/scipy/scipy/pull/13516): DOC: reduce LaTeX usage for johnsonb docstring
  - [\#13519](https://github.com/scipy/scipy/pull/13519): BLD: remove build\_sphinx support from setup.py
  - [\#13527](https://github.com/scipy/scipy/pull/13527): TST: stats: xfail ttest\_ind\_randperm\_alternative2 on 32 bit
  - [\#13530](https://github.com/scipy/scipy/pull/13530): DOC: correct comparisons between median filter functions
  - [\#13532](https://github.com/scipy/scipy/pull/13532): ENH: release the GIL inside medfilt2d
  - [\#13538](https://github.com/scipy/scipy/pull/13538): DOC: optimize: fix minor doc error in 'fmin\_powell' (\#13511)
  - [\#13546](https://github.com/scipy/scipy/pull/13546): DOC: fix list of "mode" options for ndimage
  - [\#13549](https://github.com/scipy/scipy/pull/13549): ENH: stats: add 'alternative' keyword to some normality tests.
  - [\#13551](https://github.com/scipy/scipy/pull/13551): MAINT: add git to docker env
  - [\#13552](https://github.com/scipy/scipy/pull/13552): MAINT: stats: remove float\_power shim
  - [\#13553](https://github.com/scipy/scipy/pull/13553): DOC: use support rather than a/b in stats tutorial
  - [\#13560](https://github.com/scipy/scipy/pull/13560): MAINT: optimize: improve linprog error message for sparse input...
  - [\#13562](https://github.com/scipy/scipy/pull/13562): MAINT: optimize: using np.isclose instead of \_within\_tolerance.
  - [\#13566](https://github.com/scipy/scipy/pull/13566): ENH: Speed up hdquantiles\_sd()
  - [\#13569](https://github.com/scipy/scipy/pull/13569): BENCH: optimize: benchmark only HiGHS methods; add bigger linprog...
  - [\#13574](https://github.com/scipy/scipy/pull/13574): DOC: In description of cluster.hierarchy.dendrogram 'level' parameter,...
  - [\#13576](https://github.com/scipy/scipy/pull/13576): ENH: improve discrepancy performance
  - [\#13579](https://github.com/scipy/scipy/pull/13579): TST: Add pybind11 to tox environments
  - [\#13583](https://github.com/scipy/scipy/pull/13583): BUG: Fix Dockerfile apt-get installs
  - [\#13588](https://github.com/scipy/scipy/pull/13588): MAINT: forward port 1.6.1 relnotes.
  - [\#13593](https://github.com/scipy/scipy/pull/13593): BUG: stats: preserve sample dtype for bin edges
  - [\#13595](https://github.com/scipy/scipy/pull/13595): ENH: interpolate: add RBFInterpolator
  - [\#13596](https://github.com/scipy/scipy/pull/13596): DOC: Fix indentation in new\_stats\_distribution.rst.inc
  - [\#13601](https://github.com/scipy/scipy/pull/13601): Add dpss for get\_window function
  - [\#13604](https://github.com/scipy/scipy/pull/13604): DOC: Correct dual annealing visiting param range.
  - [\#13605](https://github.com/scipy/scipy/pull/13605): Add Codecov badge to README
  - [\#13607](https://github.com/scipy/scipy/pull/13607): MAINT: stats: fix crystalball entropy
  - [\#13611](https://github.com/scipy/scipy/pull/13611): Better argument preparation for distributions in stats package.
  - [\#13612](https://github.com/scipy/scipy/pull/13612): Add docker run command for Windows cmd
  - [\#13613](https://github.com/scipy/scipy/pull/13613): MAINT, CI: mypy: fix typing errors + add mypy to CI
  - [\#13616](https://github.com/scipy/scipy/pull/13616): FIX: Return correct output for invgauss.cdf when mu is very small
  - [\#13617](https://github.com/scipy/scipy/pull/13617): MAINT: accept numbers and iterables for width in find\_peaks\_cwt
  - [\#13620](https://github.com/scipy/scipy/pull/13620): CI: disable the mypy CI job (partial revert of gh-13613)
  - [\#13621](https://github.com/scipy/scipy/pull/13621): DOC: signal: use array\_like for input types
  - [\#13622](https://github.com/scipy/scipy/pull/13622): MAINT: clean up some unused files, make \`mypy scipy\` pass
  - [\#13623](https://github.com/scipy/scipy/pull/13623): CI: enable Mypy CI job again
  - [\#13624](https://github.com/scipy/scipy/pull/13624): TST: test more values for \`visiting\_param\` input to \`dual\_annealing\`
  - [\#13625](https://github.com/scipy/scipy/pull/13625): Rename integrate.simps to integrate.simpsons in documentation...
  - [\#13631](https://github.com/scipy/scipy/pull/13631): ENH: add a \`stats.differential\_entropy\` function
  - [\#13633](https://github.com/scipy/scipy/pull/13633): BUG: stats.binned\_statistic\_2d user function expecting arrays
  - [\#13641](https://github.com/scipy/scipy/pull/13641): ENH: Added degrees parameter to rotvec
  - [\#13645](https://github.com/scipy/scipy/pull/13645): MAINT: mypy: don't install numpy-stubs
  - [\#13649](https://github.com/scipy/scipy/pull/13649): BUG: sparse: csc\_matrix.argmax() integer overflow
  - [\#13650](https://github.com/scipy/scipy/pull/13650): ENH: stats: add 'alternative' parameter to ansari
  - [\#13652](https://github.com/scipy/scipy/pull/13652): DOC: fix eigvalsh documentation (\#13651)
  - [\#13654](https://github.com/scipy/scipy/pull/13654): BUG: Fix LatinHypercubes
  - [\#13656](https://github.com/scipy/scipy/pull/13656): DOC: Fix PCHIP references
  - [\#13657](https://github.com/scipy/scipy/pull/13657): TST: remove IPython warning in debug session
  - [\#13658](https://github.com/scipy/scipy/pull/13658): Remove spurious quotes in docstring
  - [\#13661](https://github.com/scipy/scipy/pull/13661): ENH: stats: improve efficiency of / fix bug in exact permutation...
  - [\#13667](https://github.com/scipy/scipy/pull/13667): MAINT: Make latest Docker image default
  - [\#13668](https://github.com/scipy/scipy/pull/13668): MAINT: add .theia/ to .gitignore
  - [\#13669](https://github.com/scipy/scipy/pull/13669): BLD: change SCIPY\_USE\_PYTHRAN default to \`1\`
  - [\#13676](https://github.com/scipy/scipy/pull/13676): ENH Small improvements for LSQR with damp
  - [\#13678](https://github.com/scipy/scipy/pull/13678): MAINT: add Pythran-generated files to .gitignore
  - [\#13679](https://github.com/scipy/scipy/pull/13679): MAINT: move the \`conda develop .\` in the Gitpod config
  - [\#13680](https://github.com/scipy/scipy/pull/13680): DOC: Add cKDTree note comparing it with KDTree
  - [\#13681](https://github.com/scipy/scipy/pull/13681): DOC: build doc updates on Pythran, compiled code, and cleanups
  - [\#13683](https://github.com/scipy/scipy/pull/13683): BUG: mmwrite correctly serializes non skew-symmetric arrays
  - [\#13684](https://github.com/scipy/scipy/pull/13684): FIX: fix numerical overflow in gamma.isf method
  - [\#13685](https://github.com/scipy/scipy/pull/13685): BUG: fix cosine distance range to 0-2
  - [\#13694](https://github.com/scipy/scipy/pull/13694): MAINT: fix warning emitted when NumPy version is incorrect
  - [\#13696](https://github.com/scipy/scipy/pull/13696): ENH: support trimming in ttest\_ind
  - [\#13698](https://github.com/scipy/scipy/pull/13698): BUG: stats: Fix spurious warnings generated by arcsine.pdf
  - [\#13701](https://github.com/scipy/scipy/pull/13701): DEV: scipy.interpolate b-splines (periodic case)
  - [\#13702](https://github.com/scipy/scipy/pull/13702): DEP: Clean up spent deprecations in spatial.distance
  - [\#13703](https://github.com/scipy/scipy/pull/13703): MAINT: fix issues found by static code analysis
  - [\#13706](https://github.com/scipy/scipy/pull/13706): ENH: stats: Implement sf and isf for the laplace distribution.
  - [\#13711](https://github.com/scipy/scipy/pull/13711): MAINT: stats: fix broadcasting for scipy.stats.entropy
  - [\#13712](https://github.com/scipy/scipy/pull/13712): BUG: stats: Override \_fitstart for the invweibull distribution.
  - [\#13713](https://github.com/scipy/scipy/pull/13713): DOC: update toolchain.rst to reflect windows universal C runtime
  - [\#13714](https://github.com/scipy/scipy/pull/13714): MAINT: stats: Remove an unused list from test\_continuous\_basic.py.
  - [\#13715](https://github.com/scipy/scipy/pull/13715): MAINT: stats: No need to suppress frechet deprecation warnings.
  - [\#13716](https://github.com/scipy/scipy/pull/13716): MAINT: use super() as described by PEP 3135
  - [\#13718](https://github.com/scipy/scipy/pull/13718): MAINT: new-style class, removing inheritance to object
  - [\#13721](https://github.com/scipy/scipy/pull/13721): MAINT: add a type-ignore for mpmath (\#13721)
  - [\#13723](https://github.com/scipy/scipy/pull/13723): MAINT: mypy: ignore mpmath imports in mypy.ini
  - [\#13724](https://github.com/scipy/scipy/pull/13724): DOC: pydata sphinx theme
  - [\#13725](https://github.com/scipy/scipy/pull/13725): BENCH: add benchmark for Kendalltau
  - [\#13727](https://github.com/scipy/scipy/pull/13727): CI: simplify Pythran configuration setup for Azure
  - [\#13731](https://github.com/scipy/scipy/pull/13731): MAINT: stats: Some flake8-driven clean up.
  - [\#13732](https://github.com/scipy/scipy/pull/13732): ENH: stats: Studentized Range Distribution
  - [\#13735](https://github.com/scipy/scipy/pull/13735): DOC: correct Voronoi docstring
  - [\#13738](https://github.com/scipy/scipy/pull/13738): DOC: add example to wright\_bessel
  - [\#13739](https://github.com/scipy/scipy/pull/13739): ENH: stats: Implement \_sf and \_isf for the chi distribution.
  - [\#13741](https://github.com/scipy/scipy/pull/13741): MAINT: prevent overwriting of x in minimize
  - [\#13747](https://github.com/scipy/scipy/pull/13747): DOC: Add note for interp1d for non-unique x-values
  - [\#13749](https://github.com/scipy/scipy/pull/13749): MAINT: forward port 1.6.2 relnotes
  - [\#13759](https://github.com/scipy/scipy/pull/13759): MAINT: simpson small performance speedups
  - [\#13765](https://github.com/scipy/scipy/pull/13765): FIX: npymath missing causing npy\_log1p to be unknown
  - [\#13768](https://github.com/scipy/scipy/pull/13768): BENCH: Add missing pythran dependency
  - [\#13770](https://github.com/scipy/scipy/pull/13770): ENH: stats.contingency: Add the sparse option to crosstab.
  - [\#13774](https://github.com/scipy/scipy/pull/13774): DEP: Deprecate squeezing input vectors in spatial.distance
  - [\#13775](https://github.com/scipy/scipy/pull/13775): Enable trust region methods to use a finite difference Hessian...
  - [\#13777](https://github.com/scipy/scipy/pull/13777): DOC: Fix Ubuntu/Debian installation instructions
  - [\#13778](https://github.com/scipy/scipy/pull/13778): DOC: remove references to RandomState
  - [\#13782](https://github.com/scipy/scipy/pull/13782): MAINT: LBFGSB err msg on MAXLS changed closes \#11718
  - [\#13785](https://github.com/scipy/scipy/pull/13785): BENCH: Add benchmark for cdist/pdist with weights
  - [\#13786](https://github.com/scipy/scipy/pull/13786): MAINT: Prepare cdist/pdist for C++ rework
  - [\#13787](https://github.com/scipy/scipy/pull/13787): MAINT: stats: move entropy and differential\_entropy functions...
  - [\#13790](https://github.com/scipy/scipy/pull/13790): DOC: Add some dependencies for Dockerfile doc of scipy development.
  - [\#13792](https://github.com/scipy/scipy/pull/13792): BUG: stats: Fix broadcasting in wrapcauchy.cdf
  - [\#13795](https://github.com/scipy/scipy/pull/13795): MAINT: stats: add hypotests to \_\_all\_\_ in init.py, not stats.py
  - [\#13797](https://github.com/scipy/scipy/pull/13797): MAINT: stats: probplot: don't plot least-squares fit line unless...
  - [\#13798](https://github.com/scipy/scipy/pull/13798): MAINT: fix incorrect code comment in \`hierarchy.to\_tree\`
  - [\#13802](https://github.com/scipy/scipy/pull/13802): DEV: add environment.yml file for development with conda/mamba
  - [\#13803](https://github.com/scipy/scipy/pull/13803): DOC: fix doc build warning about arxiv role already being registered
  - [\#13804](https://github.com/scipy/scipy/pull/13804): DOC+MAINT: optimize: lb and ub in the Bounds constructor are...
  - [\#13807](https://github.com/scipy/scipy/pull/13807): MAINT: Dont use parallel Sphinx
  - [\#13808](https://github.com/scipy/scipy/pull/13808): MAINT: cluster.to\_tree: more idiomatic looping over rows of matrix...
  - [\#13810](https://github.com/scipy/scipy/pull/13810): MAINT: add a CODEOWNERS file
  - [\#13811](https://github.com/scipy/scipy/pull/13811): MAINT: Add ci skip to azp
  - [\#13814](https://github.com/scipy/scipy/pull/13814): ENH/DOC: pydata sphinx theme polishing
  - [\#13817](https://github.com/scipy/scipy/pull/13817): DOC: Misc parameter typo and casing in scipy/linalg/\_decomp\_ldl.py
  - [\#13818](https://github.com/scipy/scipy/pull/13818): MAINT: stats: keep \`entropy\` importable from \`scipy.stats.distributions\`
  - [\#13820](https://github.com/scipy/scipy/pull/13820): BUG: update \_kendall\_p\_exact ValueError to f-string
  - [\#13831](https://github.com/scipy/scipy/pull/13831): FIX:DEP: Allow better tolerance control for pinv and pinvh and...
  - [\#13832](https://github.com/scipy/scipy/pull/13832): BUG: stats: Fix rvs for levy\_stable when alpha=1
  - [\#13833](https://github.com/scipy/scipy/pull/13833): MAINT: Add inline type hintings for stats.qmc
  - [\#13836](https://github.com/scipy/scipy/pull/13836): MAINT: Fix a couple compiler warnings.
  - [\#13838](https://github.com/scipy/scipy/pull/13838): TST: relax test tolerances for BinomTest
  - [\#13841](https://github.com/scipy/scipy/pull/13841): BLD: add \`-std=c99\` flag to scipy.special extensions using...
  - [\#13845](https://github.com/scipy/scipy/pull/13845): ENH: stats: add \`method\` parameter to \`differential\_entropy\`...
  - [\#13847](https://github.com/scipy/scipy/pull/13847): TST: skip on optimize failure on macOS, mark one as xfail
  - [\#13848](https://github.com/scipy/scipy/pull/13848): DOC: optimize: move Nelder Mead doc from Unconstrained minimization...
  - [\#13849](https://github.com/scipy/scipy/pull/13849): DOC: Roadmap update
  - [\#13852](https://github.com/scipy/scipy/pull/13852): CI: fix temporary wrong brew version from GitHub
  - [\#13854](https://github.com/scipy/scipy/pull/13854): ENH: Update Scipy Gitpod
  - [\#13859](https://github.com/scipy/scipy/pull/13859): TST: fix ultra-slow ttest permutations test
  - [\#13860](https://github.com/scipy/scipy/pull/13860): MAINT: clean up LSAP error checking
  - [\#13863](https://github.com/scipy/scipy/pull/13863): DOC: remove seed in examples
  - [\#13865](https://github.com/scipy/scipy/pull/13865): DOC: optimize: The bounds param of differential\_evolution is...
  - [\#13866](https://github.com/scipy/scipy/pull/13866): MAINT: special: Remove an unused variable from \_poly\_approx in...
  - [\#13867](https://github.com/scipy/scipy/pull/13867): DOC: stats: Explain meaning of alternatives for fisher\_exact.
  - [\#13868](https://github.com/scipy/scipy/pull/13868): CI: fix the failing job on linux.
  - [\#13870](https://github.com/scipy/scipy/pull/13870): MAINT: move LSAP rectangular matrix handling into solver code
  - [\#13871](https://github.com/scipy/scipy/pull/13871): DOC: Add Gitpod documentation
  - [\#13876](https://github.com/scipy/scipy/pull/13876): Workflow : Add nightly release of NumPy in linux workflows
  - [\#13877](https://github.com/scipy/scipy/pull/13877): DOC: Conform to numpydoc + uniformity.
  - [\#13879](https://github.com/scipy/scipy/pull/13879): BUG: signal: fix get\_window argument handling and add tests.
  - [\#13881](https://github.com/scipy/scipy/pull/13881): CI: remove .travis.yml, remove codecov from CircleCI
  - [\#13882](https://github.com/scipy/scipy/pull/13882): BLD: ensure incrementing dev version strings
  - [\#13886](https://github.com/scipy/scipy/pull/13886): TST: optimize: skip test\_network\_flow\_limited\_capacity w/ UMFPACK...
  - [\#13888](https://github.com/scipy/scipy/pull/13888): MAINT: Fix issues involving elif conditions
  - [\#13891](https://github.com/scipy/scipy/pull/13891): Rename InivariateSpline to UnivariateSpline
  - [\#13893](https://github.com/scipy/scipy/pull/13893): ENH: linprog HiGHS marginals/sensitivy analysis
  - [\#13894](https://github.com/scipy/scipy/pull/13894): DOC: Add blank line before \`Return\` section.
  - [\#13897](https://github.com/scipy/scipy/pull/13897): DOC: BLD: fix doc build version check, and improve build time
  - [\#13903](https://github.com/scipy/scipy/pull/13903): MAINT: Gitpod fixes
  - [\#13907](https://github.com/scipy/scipy/pull/13907): ENH: Rewrite minkowski metric in C++ with pybind11
  - [\#13909](https://github.com/scipy/scipy/pull/13909): Revert "Workflow : Add nightly release of NumPy in linux workflows"
  - [\#13910](https://github.com/scipy/scipy/pull/13910): DOC: update Readme
  - [\#13911](https://github.com/scipy/scipy/pull/13911): MAINT: use dict built-in rather than OrderedDict
  - [\#13920](https://github.com/scipy/scipy/pull/13920): BUG: Reactivate conda environment in init
  - [\#13925](https://github.com/scipy/scipy/pull/13925): BUG: stats: magnitude of Yates' correction \<= abs(observed-expected)...
  - [\#13926](https://github.com/scipy/scipy/pull/13926): DOC: correct return type in disjoint\_set.subsets docstring
  - [\#13927](https://github.com/scipy/scipy/pull/13927): DOC/MAINT: Add copyright notice to qmc.primes\_from\_2\_to
  - [\#13928](https://github.com/scipy/scipy/pull/13928): BUG: DOC: signal: fix need argument config and add missing doc...
  - [\#13929](https://github.com/scipy/scipy/pull/13929): REL: add PEP 621 (project metadata in pyproject.toml) support
  - [\#13931](https://github.com/scipy/scipy/pull/13931): MAINT: special: get rid of \_logit.c.src
  - [\#13934](https://github.com/scipy/scipy/pull/13934): ENH: signal: make \`get\_window\` supports \`general\_cosine\`...
  - [\#13940](https://github.com/scipy/scipy/pull/13940): MAINT: QMCEngine d input validation
  - [\#13941](https://github.com/scipy/scipy/pull/13941): MAINT: forward port 1.6.3 relnotes
  - [\#13944](https://github.com/scipy/scipy/pull/13944): BUG: spatial: fix weight handling of \`distance.sokalmichener\`.
  - [\#13947](https://github.com/scipy/scipy/pull/13947): MAINT: Remove duplicate calculations in sokalmichener
  - [\#13949](https://github.com/scipy/scipy/pull/13949): DOC: minor grammar fixes in minimize and KDTree.query
  - [\#13951](https://github.com/scipy/scipy/pull/13951): ENH: Add Boschloo exact test to stats
  - [\#13956](https://github.com/scipy/scipy/pull/13956): ENH: spatial: add \`axis\` and \`keepdims\` optional argument...
  - [\#13963](https://github.com/scipy/scipy/pull/13963): MAINT: stats: Fix unused imports and a few other issues related...
  - [\#13971](https://github.com/scipy/scipy/pull/13971): DOC: Add Karl Pearson's reference to chi-square test
  - [\#13972](https://github.com/scipy/scipy/pull/13972): ENH: cluster: add an optional argument \`seed\` for \`kmeans\`...
  - [\#13973](https://github.com/scipy/scipy/pull/13973): BLD: fix build warnings for causal/anticausal pointers in ndimage
  - [\#13975](https://github.com/scipy/scipy/pull/13975): ENH: set empty array norm to zero.
  - [\#13977](https://github.com/scipy/scipy/pull/13977): MAINT: signal: replace distutils templating with tempita
  - [\#13978](https://github.com/scipy/scipy/pull/13978): MAINT: improve validations and keyword only arguments for some...
  - [\#13979](https://github.com/scipy/scipy/pull/13979): ENH: Add Inverse of Log CDF of Normal Distribution
  - [\#13983](https://github.com/scipy/scipy/pull/13983): Fixing \`ndimage.watershed\_ift\` tutorial's documentation
  - [\#13987](https://github.com/scipy/scipy/pull/13987): DOC: Adding examples to docstrings in morphology: white\_tophat,...
  - [\#13989](https://github.com/scipy/scipy/pull/13989): DOC: interpolate: improve examples of \`RegularGridInterpolator\`...
  - [\#13990](https://github.com/scipy/scipy/pull/13990): MAINT, DOC: optimize: Make the input validation explanation clear...
  - [\#13992](https://github.com/scipy/scipy/pull/13992): Workflow : Add nightly release of NumPy in linux workflows
  - [\#13995](https://github.com/scipy/scipy/pull/13995): Doc: Continuous integration information
  - [\#14000](https://github.com/scipy/scipy/pull/14000): BUG: sparse: Fix DIA.diagonal bug and add a regression test
  - [\#14004](https://github.com/scipy/scipy/pull/14004): ENH: Fast addition dia matrix
  - [\#14006](https://github.com/scipy/scipy/pull/14006): MAINT: optimize: add validation to check func parameter number...
  - [\#14008](https://github.com/scipy/scipy/pull/14008): BUG: Raise exception for inconsistent WAV header
  - [\#14009](https://github.com/scipy/scipy/pull/14009): DEP: Remove usage of numpy.compat
  - [\#14010](https://github.com/scipy/scipy/pull/14010): MAINT: add support for wheel DL proxy
  - [\#14012](https://github.com/scipy/scipy/pull/14012): DOC: Broaden Exact Test Reference
  - [\#14015](https://github.com/scipy/scipy/pull/14015): MAINT: remove brew update
  - [\#14017](https://github.com/scipy/scipy/pull/14017): BENCH: Add more formats for sparse arithmetic
  - [\#14018](https://github.com/scipy/scipy/pull/14018): BENCH: add benchmark for f\_oneway
  - [\#14020](https://github.com/scipy/scipy/pull/14020): MAINT: modify np.int\_ to np.int32 to make it the same for 32/64...
  - [\#14023](https://github.com/scipy/scipy/pull/14023): MAINT: Fix clang build and remove some unicode characters
  - [\#14025](https://github.com/scipy/scipy/pull/14025): BUG: sparse: fix DIA.setdiag issue
  - [\#14026](https://github.com/scipy/scipy/pull/14026): TST: optimize: xfail part of test\_powell
  - [\#14029](https://github.com/scipy/scipy/pull/14029): CI: github macos fix
  - [\#14030](https://github.com/scipy/scipy/pull/14030): MAINT: use 'yield from \<expr\>' (PEP 380)
  - [\#14031](https://github.com/scipy/scipy/pull/14031): MAINT: new-style class, removing inheritance to object
  - [\#14032](https://github.com/scipy/scipy/pull/14032): MAINT: CXXFLAGS for Pythran
  - [\#14033](https://github.com/scipy/scipy/pull/14033): ENH: Port sqeuclidean and braycurtis to \_distance\_pybind
  - [\#14034](https://github.com/scipy/scipy/pull/14034): MAINT: Clean-up 'next = \_\_next\_\_'
  - [\#14045](https://github.com/scipy/scipy/pull/14045): MAINT: bump PYVER pavement.py
  - [\#14047](https://github.com/scipy/scipy/pull/14047): DEV: initialize boost submodule in Gitpod Dockerfile
  - [\#14051](https://github.com/scipy/scipy/pull/14051): BLD: if boost submodule content is missing, error out early
  - [\#14052](https://github.com/scipy/scipy/pull/14052): DOC: missing submodule init information
  - [\#14057](https://github.com/scipy/scipy/pull/14057): DOC: special: Add Examples to \`psi\` docstring
  - [\#14058](https://github.com/scipy/scipy/pull/14058): BUG: fixed a dtype bug in linalg.solve.
  - [\#14060](https://github.com/scipy/scipy/pull/14060): Doc: Fix typo in documentation of spence function.
  - [\#14061](https://github.com/scipy/scipy/pull/14061): MAINT:stats: Type annotations for \_sobol.pyx
  - [\#14062](https://github.com/scipy/scipy/pull/14062): DOC: A few small fixes in quickstart\_gitpod.rst
  - [\#14063](https://github.com/scipy/scipy/pull/14063): DOC: signal: add Add Examples to \`cont2discrete\` docstring
  - [\#14064](https://github.com/scipy/scipy/pull/14064): DOC: optimize: Add Examples to fmin\_bfgs docstring
  - [\#14065](https://github.com/scipy/scipy/pull/14065): Add example for scipy stats.trim1 under docstring
  - [\#14066](https://github.com/scipy/scipy/pull/14066): DOC add example to scipy.special.hermite
  - [\#14067](https://github.com/scipy/scipy/pull/14067): DOC add alpha docstring description, add example to docstring
  - [\#14070](https://github.com/scipy/scipy/pull/14070): DOC add parameters, return, and example to docstring
  - [\#14072](https://github.com/scipy/scipy/pull/14072): MAINT/TST: Fix tests failing with the nightly build of numpy.
  - [\#14075](https://github.com/scipy/scipy/pull/14075): DOC Improve the code snippet in signal.hilbert docstring.
  - [\#14076](https://github.com/scipy/scipy/pull/14076): DOC: Document Jensen-Shannon distance being accepted by cdist/pdist
  - [\#14079](https://github.com/scipy/scipy/pull/14079): BLD: Avoid importing scipy.stats during cythonize stage
  - [\#14082](https://github.com/scipy/scipy/pull/14082): MAINT: Remove old, commented extract\_diagonal
  - [\#14083](https://github.com/scipy/scipy/pull/14083): MAINT: sparse: Remove defunct function extract\_diagonal
  - [\#14085](https://github.com/scipy/scipy/pull/14085): ENH: Implement canberra distance in \_distance\_pybind
  - [\#14086](https://github.com/scipy/scipy/pull/14086): MAINT: Clear scipy namespace of entries better imported from...
  - [\#14088](https://github.com/scipy/scipy/pull/14088): Install Pythran from sources for python 3.10
  - [\#14092](https://github.com/scipy/scipy/pull/14092): BUG: Fixes issue with clang.
  - [\#14094](https://github.com/scipy/scipy/pull/14094): DOC: Correct the inconsistence definition of Default in class...
  - [\#14105](https://github.com/scipy/scipy/pull/14105): TST: stats: mannwhitneyu: check that mstats and stats mannwhitneyu...
  - [\#14106](https://github.com/scipy/scipy/pull/14106): DOC: stats.mstats: mannwhitneyu: the returned statistic is the...
  - [\#14107](https://github.com/scipy/scipy/pull/14107): ENH: stats: bootstrap: add \`vectorized\` parameter; automatically...
  - [\#14109](https://github.com/scipy/scipy/pull/14109): BUG: fix two issues in the fblas signature files
  - [\#14110](https://github.com/scipy/scipy/pull/14110): DOC: mailmap update
  - [\#14113](https://github.com/scipy/scipy/pull/14113): ENH: stats: bootstrap: add \`paired\` parameter
  - [\#14116](https://github.com/scipy/scipy/pull/14116): MAINT: fix deprecated Python C API usage in odr
  - [\#14118](https://github.com/scipy/scipy/pull/14118): DOC: 1.7.0 release notes
  - [\#14125](https://github.com/scipy/scipy/pull/14125): DOC: fix typo
  - [\#14126](https://github.com/scipy/scipy/pull/14126): ENH: stats: bootstrap: add \`batch\` parameter to control batch...
  - [\#14127](https://github.com/scipy/scipy/pull/14127): CI: upgrade pip in benchmarks CI run
  - [\#14130](https://github.com/scipy/scipy/pull/14130): BUG: Fix trust-constr report TypeError if verbose is set to 2...
  - [\#14133](https://github.com/scipy/scipy/pull/14133): MAINT: interpolate: raise NotImplementedError not ValueError
  - [\#14139](https://github.com/scipy/scipy/pull/14139): FIX/DOC: lsqr doctests print failure
  - [\#14145](https://github.com/scipy/scipy/pull/14145): MAINT: 1.7.x version pins ("backport")
  - [\#14146](https://github.com/scipy/scipy/pull/14146): MAINT: commit count if no tag
  - [\#14164](https://github.com/scipy/scipy/pull/14164): TST, BUG: fix rbf matrix value
  - [\#14166](https://github.com/scipy/scipy/pull/14166): CI, MAINT: restrictions on pre-release CI
  - [\#14171](https://github.com/scipy/scipy/pull/14171): TST: signal: Bump tolerances for a test of Gustafsson's...
  - [\#14175](https://github.com/scipy/scipy/pull/14175): TST: stats: Loosen tolerance in some binomtest tests.
  - [\#14182](https://github.com/scipy/scipy/pull/14182): MAINT: stats: Update ppcc\_plot and ppcc\_max docstring.
  - [\#14195](https://github.com/scipy/scipy/pull/14195): MAINT: download-wheels missing import
  - [\#14230](https://github.com/scipy/scipy/pull/14230): REL: stop shipping generated Cython sources in sdist

---

1.7.1-notes.md

---

# SciPy 1.7.1 Release Notes

<div class="contents">

</div>

SciPy 1.7.1 is a bug-fix release with no new features compared to 1.7.0.

## Authors

  - Peter Bell
  - Evgeni Burovski
  - Justin Charlong +
  - Ralf Gommers
  - Matti Picus
  - Tyler Reddy
  - Pamphile Roy
  - Sebastian Wallkötter
  - Arthur Volant

A total of 9 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.7.1

  - [\#14074](https://github.com/scipy/scipy/issues/14074): Segmentation fault when building cKDTree with Scipy 1.6.3.
  - [\#14271](https://github.com/scipy/scipy/issues/14271): scipy.io.loadmat failure in 1.7.0
  - [\#14273](https://github.com/scipy/scipy/issues/14273): \`scipy.signal.{medfilt,medfilt2d}\` hit "Windows fatal exception:...
  - [\#14282](https://github.com/scipy/scipy/issues/14282): DOC, CI: stats skewtest refguide failure
  - [\#14363](https://github.com/scipy/scipy/issues/14363): Huge stack allocation in \_sobol.pyx may cause stack overvflow
  - [\#14382](https://github.com/scipy/scipy/issues/14382): Memory leak in \`scipy.spatial.distance\` for \`cdist\`
  - [\#14396](https://github.com/scipy/scipy/issues/14396): BUG: Sphinx 4.1 breaks the banner's logo
  - [\#14444](https://github.com/scipy/scipy/issues/14444): DOC/FEAT Rotation.from\_rotvec documents a degrees argument which...

### Pull requests for 1.7.1

  - [\#14178](https://github.com/scipy/scipy/pull/14178): DEV: Update Boschloo Exact test
  - [\#14264](https://github.com/scipy/scipy/pull/14264): REL: prepare for SciPy 1.7.1
  - [\#14283](https://github.com/scipy/scipy/pull/14283): BUG: fix refguide-check namedtuple handling
  - [\#14303](https://github.com/scipy/scipy/pull/14303): FIX: Check for None before calling str methods
  - [\#14327](https://github.com/scipy/scipy/pull/14327): BUG: medfilt can access beyond the end of an array
  - [\#14355](https://github.com/scipy/scipy/pull/14355): BUG: KDTree balanced\_tree is unbalanced for degenerate data
  - [\#14368](https://github.com/scipy/scipy/pull/14368): BUG: avoid large cython global variable in function
  - [\#14384](https://github.com/scipy/scipy/pull/14384): BUG: Reference count leak in distance\_pybind
  - [\#14397](https://github.com/scipy/scipy/pull/14397): DOC/CI: do not allow sphinx 4.1.
  - [\#14417](https://github.com/scipy/scipy/pull/14417): DOC/CI: pin sphinx to \!=4.1.0
  - [\#14460](https://github.com/scipy/scipy/pull/14460): DOC: add required scipy version to kwarg
  - [\#14466](https://github.com/scipy/scipy/pull/14466): MAINT: 1.7.1 backports (round 1)
  - [\#14508](https://github.com/scipy/scipy/pull/14508): MAINT: bump scipy-mathjax
  - [\#14509](https://github.com/scipy/scipy/pull/14509): MAINT: 1.7.1 backports (round 2)

---

1.7.2-notes.md

---

# SciPy 1.7.2 Release Notes

<div class="contents">

</div>

SciPy 1.7.2 is a bug-fix release with no new features compared to 1.7.1. Notably, the release includes wheels for Python 3.10, and wheels are now built with a newer version of OpenBLAS, 0.3.17. Python 3.10 wheels are provided for MacOS x86\_64 (thin, not universal2 or arm64 at this time), and Windows/Linux 64-bit. Many wheels are now built with newer versions of manylinux, which may require newer versions of pip.

## Authors

  - Peter Bell
  - da-woods +
  - Isuru Fernando
  - Ralf Gommers
  - Matt Haberland
  - Nicholas McKibben
  - Ilhan Polat
  - Judah Rand +
  - Tyler Reddy
  - Pamphile Roy
  - Charles Harris
  - Matti Picus
  - Hugo van Kemenade
  - Jacob Vanderplas

A total of 14 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.7.2

  - [\#6019](https://github.com/scipy/scipy/issues/6019): minimize\_scalar doesn't seem to honor "disp" option
  - [\#14321](https://github.com/scipy/scipy/issues/14321): BUG: Indexing of CSR matrices with many rows is much slower than...
  - [\#14465](https://github.com/scipy/scipy/issues/14465): BUG: n-d interpolation parameter provided to geometric\_slerp
  - [\#14599](https://github.com/scipy/scipy/issues/14599): SciPy 1.7 builds as zipped egg, ruining imports
  - [\#14606](https://github.com/scipy/scipy/issues/14606): BUG: crash / core dump when calling scipy.stats.beta.ppf with...
  - [\#14732](https://github.com/scipy/scipy/issues/14732): CI, TST: pre-release failures for scipy/interpolate/tests/test\_rbfinterp.py
  - [\#14802](https://github.com/scipy/scipy/issues/14802): CI: Azure Main coverage job failure
  - [\#14829](https://github.com/scipy/scipy/issues/14829): macOS CI failing with \`ld: library not found for -lSystem\`
  - [\#14887](https://github.com/scipy/scipy/issues/14887): BUG: scipy.stats.multivariate\_normal.logpdf mutates some inputs

### Pull requests for 1.7.2

  - [\#14207](https://github.com/scipy/scipy/pull/14207): DOC: stats: remove 'Methods' section from \`binomtest\` docstring...
  - [\#14316](https://github.com/scipy/scipy/pull/14316): MAINT: Update \`openblas\_support.py\` to support Apple Silicon
  - [\#14323](https://github.com/scipy/scipy/pull/14323): BUG: Speed up sparse compressed indexing with very many rows
  - [\#14333](https://github.com/scipy/scipy/pull/14333): MAINT: Use /usr/bin/linux32 so that sysconfig.get\_platform()...
  - [\#14478](https://github.com/scipy/scipy/pull/14478): BUG: geometric\_slerp t ndim guard
  - [\#14605](https://github.com/scipy/scipy/pull/14605): MAINT: Skip some interpolative decomposition tests
  - [\#14616](https://github.com/scipy/scipy/pull/14616): REL: update build dependency versions in pyproject.toml for 1.7.2
  - [\#14618](https://github.com/scipy/scipy/pull/14618): FIX: raise RuntimeWarning when Boost evaluation\_error is encountered
  - [\#14672](https://github.com/scipy/scipy/pull/14672): BLD: add \`zip\_safe=False\` to the \`setup()\` call
  - [\#14791](https://github.com/scipy/scipy/pull/14791): MAINT: SciPy 1.7.2 prep/backports
  - [\#14803](https://github.com/scipy/scipy/pull/14803): MAINT: disable include/source coverage warning.
  - [\#14813](https://github.com/scipy/scipy/pull/14813): Added missing np.import\_array()
  - [\#14831](https://github.com/scipy/scipy/pull/14831): CI: Add stdlib to LD\_LIBRARY\_PATH
  - [\#14893](https://github.com/scipy/scipy/pull/14893): BUG: Fix alignment errors due to relaxed stride checking
  - [\#14897](https://github.com/scipy/scipy/pull/14897): BUG: avoid mutating inputs in multivariate distributions
  - [\#14921](https://github.com/scipy/scipy/pull/14921): MAINT: "backport" 3.10 support
  - [\#14937](https://github.com/scipy/scipy/pull/14937): MAINT: backports for 1.7.2, plus update Pythran min version to...
  - [\#14938](https://github.com/scipy/scipy/pull/14938): TST: silence test failures on macOS for \`beta.ppf\` overflow

---

1.7.3-notes.md

---

# SciPy 1.7.3 Release Notes

<div class="contents">

</div>

SciPy 1.7.3 is a bug-fix release that provides binary wheels for MacOS arm64 with Python 3.8, 3.9, and 3.10. The MacOS arm64 wheels are only available for MacOS version 12.0 and greater, as explained in Issue 14688, linked below.

## Authors

  - Anirudh Dagar
  - Ralf Gommers
  - Tyler Reddy
  - Pamphile Roy
  - Olivier Grisel
  - Isuru Fernando

A total of 6 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.7.3

  - [\#13364](https://github.com/scipy/scipy/issues/13364): Segmentation fault on import of scipy.integrate on Apple M1 ARM...
  - [\#14688](https://github.com/scipy/scipy/issues/14688): BUG: ARPACK's eigsh & OpenBLAS from Apple Silicon M1 (arm64)...
  - [\#14991](https://github.com/scipy/scipy/issues/14991): four CI failures on pre-release job
  - [\#15077](https://github.com/scipy/scipy/issues/15077): Remaining test failures for macOS arm64 wheel
  - [\#15081](https://github.com/scipy/scipy/issues/15081): BUG: Segmentation fault caused by scipy.stats.qmc.qmc.update\_discrepancy

### Pull requests for 1.7.3

  - [\#14990](https://github.com/scipy/scipy/pull/14990): BLD: update pyproject.toml for Python 3.10 changes
  - [\#15086](https://github.com/scipy/scipy/pull/15086): BUG: out of bounds indexing in stats.qmc.update\_discrepancy
  - [\#15090](https://github.com/scipy/scipy/pull/15090): MAINT: skip a few failing tests in \`1.7.x\` for macOS arm64

---

1.8.0-notes.md

---

# SciPy 1.8.0 Release Notes

<div class="contents">

</div>

SciPy 1.8.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.8.x branch, and on adding new features on the master branch.

This release requires Python 3.8+ and NumPy 1.17.3 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - A sparse array API has been added for early testing and feedback; this work is ongoing, and users should expect minor API refinements over the next few releases.
  - The sparse SVD library PROPACK is now vendored with SciPy, and an interface is exposed via <span class="title-ref">scipy.sparse.svds</span> with `solver='PROPACK'`. It is currently default-off due to potential issues on Windows that we aim to resolve in the next release, but can be optionally enabled at runtime for friendly testing with an environment variable setting of `USE_PROPACK=1`.
  - A new <span class="title-ref">scipy.stats.sampling</span> submodule that leverages the `UNU.RAN` C library to sample from arbitrary univariate non-uniform continuous and discrete distributions
  - All namespaces that were private but happened to miss underscores in their names have been deprecated.

## New features

### <span class="title-ref">scipy.fft</span> improvements

Added an `orthogonalize=None` parameter to the real transforms in <span class="title-ref">scipy.fft</span> which controls whether the modified definition of DCT/DST is used without changing the overall scaling.

<span class="title-ref">scipy.fft</span> backend registration is now smoother, operating with a single registration call and no longer requiring a context manager.

### <span class="title-ref">scipy.integrate</span> improvements

<span class="title-ref">scipy.integrate.quad\_vec</span> introduces a new optional keyword-only argument, `args`. `args` takes in a tuple of extra arguments if any (default is `args=()`), which is then internally used to pass into the callable function (needing these extra arguments) which we wish to integrate.

### <span class="title-ref">scipy.interpolate</span> improvements

<span class="title-ref">scipy.interpolate.BSpline</span> has a new method, `design_matrix`, which constructs a design matrix of b-splines in the sparse CSR format.

A new method `from_cubic` in `BSpline` class allows to convert a `CubicSpline` object to `BSpline` object.

### <span class="title-ref">scipy.linalg</span> improvements

<span class="title-ref">scipy.linalg</span> gained three new public array structure investigation functions. <span class="title-ref">scipy.linalg.bandwidth</span> returns information about the bandedness of an array and can be used to test for triangular structure discovery, while <span class="title-ref">scipy.linalg.issymmetric</span> and <span class="title-ref">scipy.linalg.ishermitian</span> test the array for exact and approximate symmetric/Hermitian structure.

### <span class="title-ref">scipy.optimize</span> improvements

<span class="title-ref">scipy.optimize.check\_grad</span> introduces two new optional keyword only arguments, `direction` and `seed`. `direction` can take values, `'all'` (default), in which case all the one hot direction vectors will be used for verifying the input analytical gradient function and `'random'`, in which case a random direction vector will be used for the same purpose. `seed` (default is `None`) can be used for reproducing the return value of `check_grad` function. It will be used only when `direction='random'`.

The <span class="title-ref">scipy.optimize.minimize</span> `TNC` method has been rewritten to use Cython bindings. This also fixes an issue with the callback altering the state of the optimization.

Added optional parameters `target_accept_rate` and `stepwise_factor` for adapative step size adjustment in `basinhopping`.

The `epsilon` argument to `approx_fprime` is now optional so that it may have a default value consistent with most other functions in <span class="title-ref">scipy.optimize</span>.

### <span class="title-ref">scipy.signal</span> improvements

Add `analog` argument, default `False`, to `zpk2sos`, and add new pairing option `'minimal'` to construct analog and minimal discrete SOS arrays. `tf2sos` uses zpk2sos; add `analog` argument here as well, and pass it on to `zpk2sos`.

`savgol_coeffs` and `savgol_filter` now work for even window lengths.

Added the Chirp Z-transform and Zoom FFT available as <span class="title-ref">scipy.signal.CZT</span> and <span class="title-ref">scipy.signal.ZoomFFT</span>.

### <span class="title-ref">scipy.sparse</span> improvements

An array API has been added for early testing and feedback; this work is ongoing, and users should expect minor API refinements over the next few releases. Please refer to the <span class="title-ref">scipy.sparse</span> docstring for more information.

`maximum_flow` introduces optional keyword only argument, `method` which accepts either, `'edmonds-karp'` (Edmonds Karp algorithm) or `'dinic'` (Dinic's algorithm). Moreover, `'dinic'` is used as default value for `method` which means that Dinic's algorithm is used for computing maximum flow unless specified. See, the comparison between the supported algorithms in [this comment](https://github.com/scipy/scipy/pull/14358#issue-684212523).

Parameters `atol`, `btol` now default to 1e-6 in <span class="title-ref">scipy.sparse.linalg.lsmr</span> to match with default values in <span class="title-ref">scipy.sparse.linalg.lsqr</span>.

Add the Transpose-Free Quasi-Minimal Residual algorithm (TFQMR) for general nonsingular non-Hermitian linear systems in <span class="title-ref">scipy.sparse.linalg.tfqmr</span>.

The sparse SVD library PROPACK is now vendored with SciPy, and an interface is exposed via <span class="title-ref">scipy.sparse.svds</span> with `solver='PROPACK'`. For some problems, this may be faster and/or more accurate than the default, ARPACK. PROPACK functionality is currently opt-in--you must specify `USE_PROPACK=1` at runtime to use it due to potential issues on Windows that we aim to resolve in the next release.

`sparse.linalg` iterative solvers now have a nonzero initial guess option, which may be specified as `x0 = 'Mb'`.

The `trace` method has been added for sparse matrices.

### <span class="title-ref">scipy.spatial</span> improvements

<span class="title-ref">scipy.spatial.transform.Rotation</span> now supports item assignment and has a new `concatenate` method.

Add <span class="title-ref">scipy.spatial.distance.kulczynski1</span> in favour of `scipy.spatial.distance.kulsinski` which will be deprecated in the next release.

<span class="title-ref">scipy.spatial.distance.minkowski</span> now also supports `0<p<1`.

### <span class="title-ref">scipy.special</span> improvements

The new function <span class="title-ref">scipy.special.log\_expit</span> computes the logarithm of the logistic sigmoid function. The function is formulated to provide accurate results for large positive and negative inputs, so it avoids the problems that would occur in the naive implementation `log(expit(x))`.

A suite of five new functions for elliptic integrals: `scipy.special.ellipr{c,d,f,g,j}`. These are the [Carlson symmetric elliptic integrals](https://dlmf.nist.gov/19.16), which have computational advantages over the classical Legendre integrals. Previous versions included some elliptic integrals from the Cephes library (`scipy.special.ellip{k,km1,kinc,e,einc}`) but was missing the integral of third kind (Legendre's Pi), which can be evaluated using the new Carlson functions. The new Carlson elliptic integral functions can be evaluated in the complex plane, whereas the Cephes library's functions are only defined for real inputs.

Several defects in <span class="title-ref">scipy.special.hyp2f1</span> have been corrected. Approximately correct values are now returned for `z` near `exp(+-i*pi/3)`, fixing [\#8054](https://github.com/scipy/scipy/issues/8054). Evaluation for such `z` is now calculated through a series derived by [López and Temme (2013)](https://arxiv.org/abs/1306.2046) that converges in these regions. In addition, degenerate cases with one or more of `a`, `b`, and/or `c` a non-positive integer are now handled in a manner consistent with [mpmath's hyp2f1 implementation](https://mpmath.org/doc/current/functions/hypergeometric.html), which fixes [\#7340](https://github.com/scipy/scipy/issues/7340). These fixes were made as part of an effort to rewrite the Fortran 77 implementation of hyp2f1 in Cython piece by piece. This rewriting is now roughly 50% complete.

### <span class="title-ref">scipy.stats</span> improvements

<span class="title-ref">scipy.stats.qmc.LatinHypercube</span> introduces two new optional keyword-only arguments, `optimization` and `strength`. `optimization` is either `None` or `random-cd`. In the latter, random permutations are performed to improve the centered discrepancy. `strength` is either 1 or 2. 1 corresponds to the classical LHS while 2 has better sub-projection properties. This construction is referred to as an orthogonal array based LHS of strength 2. In both cases, the output is still a LHS.

<span class="title-ref">scipy.stats.qmc.Halton</span> is faster as the underlying Van der Corput sequence was ported to Cython.

The `alternative` parameter was added to the `kendalltau` and `somersd` functions to allow one-sided hypothesis testing. Similarly, the masked versions of `skewtest`, `kurtosistest`, `ttest_1samp`, `ttest_ind`, and `ttest_rel` now also have an `alternative` parameter.

Add <span class="title-ref">scipy.stats.gzscore</span> to calculate the geometrical z score.

Random variate generators to sample from arbitrary univariate non-uniform continuous and discrete distributions have been added to the new <span class="title-ref">scipy.stats.sampling</span> submodule. Implementations of a C library [UNU.RAN](http://statmath.wu.ac.at/software/unuran/) are used for performance. The generators added are:

  - TransformedDensityRejection
  - DiscreteAliasUrn
  - NumericalInversePolynomial
  - DiscreteGuideTable
  - SimpleRatioUniforms

The `binned_statistic` set of functions now have improved performance for the `std`, `min`, `max`, and `median` statistic calculations.

`somersd` and `_tau_b` now have faster Pythran-based implementations.

Some general efficiency improvements to handling of `nan` values in several `stats` functions.

Added the Tukey-Kramer test as <span class="title-ref">scipy.stats.tukey\_hsd</span>.

Improved performance of <span class="title-ref">scipy.stats.argus</span> `rvs` method.

Added the parameter `keepdims` to <span class="title-ref">scipy.stats.variation</span> and prevent the undesirable return of a masked array from the function in some cases.

`permutation_test` performs an exact or randomized permutation test of a given statistic on provided data.

## Deprecated features

### Clear split between public and private API

SciPy has always documented what its public API consisted of in \[its API reference docs \<scipy-api\>\](\#its-api-reference-docs-\<scipy-api\>), however there never was a clear split between public and private namespaces in the code base. In this release, all namespaces that were private but happened to miss underscores in their names have been deprecated. These include (as examples, there are many more):

  - `scipy.signal.spline`
  - `scipy.ndimage.filters`
  - `scipy.ndimage.fourier`
  - `scipy.ndimage.measurements`
  - `scipy.ndimage.morphology`
  - `scipy.ndimage.interpolation`
  - `scipy.sparse.linalg.solve`
  - `scipy.sparse.linalg.eigen`
  - `scipy.sparse.linalg.isolve`

All functions and other objects in these namespaces that were meant to be public are accessible from their respective public namespace (e.g. <span class="title-ref">scipy.signal</span>). The design principle is that any public object must be accessible from a single namespace only; there are a few exceptions, mostly for historical reasons (e.g., `stats` and `stats.distributions` overlap). For other libraries aiming to provide a SciPy-compatible API, it is now unambiguous what namespace structure to follow. See [gh-14360](https://github.com/scipy/scipy/issues/14360) for more details.

### Other deprecations

`NumericalInverseHermite` has been deprecated from <span class="title-ref">scipy.stats</span> and moved to the <span class="title-ref">scipy.stats.sampling</span> submodule. It now uses the C implementation of the UNU.RAN library so the result of methods like `ppf` may vary slightly. Parameter `tol` has been deprecated and renamed to `u_resolution`. The parameter `max_intervals` has also been deprecated and will be removed in a future release of SciPy.

## Backwards incompatible changes

  - SciPy has raised the minimum compiler versions to GCC 6.3 on linux and VS2019 on windows. In particular, this means that SciPy may now use C99 and C++14 features. For more details see [here](https://docs.scipy.org/doc/scipy/reference/dev/toolchain.html).
  - The result for empty bins for <span class="title-ref">scipy.stats.binned\_statistic</span> with the builtin `'std'` metric is now `nan`, for consistency with `np.std`.
  - The function <span class="title-ref">scipy.spatial.distance.wminkowski</span> has been removed. To achieve the same results as before, please use the `minkowski` distance function with the (optional) `w=` keyword-argument for the given weight.

## Other changes

Some Fortran 77 code was modernized to be compatible with NAG's nagfor Fortran compiler (see, e.g., [PR 13229](https://github.com/scipy/scipy/pull/13229)).

`threadpoolctl` may now be used by our test suite to substantially improve the efficiency of parallel test suite runs.

## Authors

  - @endolith

  - adamadanandy +

  - akeemlh +

  - Anton Akhmerov

  - Marvin Albert +

  - alegresor +

  - Andrew Annex +

  - Pantelis Antonoudiou +

  - Ross Barnowski +

  - Christoph Baumgarten

  - Stephen Becker +

  - Nickolai Belakovski

  - Peter Bell

  - berberto +

  - Georgii Bocharov +

  - Evgeni Burovski

  - Matthias Bussonnier

  - CJ Carey

  - Justin Charlong +

  - Hood Chatham +

  - Dennis Collaris +

  - David Cottrell +

  - cruyffturn +

  - da-woods +

  - Anirudh Dagar

  - Tiger Du +

  - Thomas Duvernay

  - Dani El-Ayyass +

  - Castedo Ellerman +

  - Donnie Erb +

  - Andreas Esders-Kopecky +

  - Livio F +

  - Isuru Fernando

  - Evelyn Fitzgerald +

  - Sara Fridovich-Keil +

  - Mark E Fuller +

  - Ralf Gommers

  - Kevin Richard Green +

  - guiweber +

  - Nitish Gupta +

  - h-vetinari

  - Matt Haberland

  - 10. Hariharan +

  - Charles Harris

  - Jonathan Helgert +

  - Trever Hines

  - Nadav Horesh

  - Ian Hunt-Isaak +

  - ich +

  - Itrimel +

  - Jan-Hendrik Müller +

  - Jebby993 +

  - Yikun Jiang +

  - Evan W Jones +

  - Nathaniel Jones +

  - Jeffrey Kelling +

  - Malik Idrees Hasan Khan +

  - Paul Kienzle

  - Sergey B Kirpichev

  - Kadatatlu Kishore +

  - Andrew Knyazev

  - Ravin Kumar +

  - Peter Mahler Larsen

  - Eric Larson

  - Antony Lee

  - Gregory R. Lee

  - Tim Leslie

  - lezcano +

  - Xingyu Liu

  - Christian Lorentzen

  - Lorenzo +

  - Smit Lunagariya +

  - Lv101Magikarp +

  - Yair M +

  - Cong Ma

  - Lorenzo Maffioli +

  - majiang +

  - Brian McFee +

  - Nicholas McKibben

  - John Speed Meyers +

  - millivolt9 +

  - Jarrod Millman

  - Harsh Mishra +

  - Boaz Mohar +

  - naelsondouglas +

  - Andrew Nelson

  - Nico Schlömer

  - Thomas Nowotny +

  - nullptr +

  - Teddy Ort +

  - Nick Papior

  - ParticularMiner +

  - Dima Pasechnik

  - Tirth Patel

  - Matti Picus

  - Ilhan Polat

  - Adrian Price-Whelan +

  - Quentin Barthélemy +

  - Sundar R +

  - Judah Rand +

  - Tyler Reddy

  - Renal-Of-Loon +

  - Frederic Renner +

  - Pamphile Roy

  - Bharath Saiguhan +

  - Atsushi Sakai

  - Eric Schanet +

  - Sebastian Wallkötter

  - serge-sans-paille

  - Reshama Shaikh +

  - Namami Shanker

  - siddhantwahal +

  - Walter Simson +

  - Gagandeep Singh +

  - Leo C. Stein +

  - Albert Steppi

  - Kai Striega

  - Diana Sukhoverkhova

  - Søren Fuglede Jørgensen

  - Masayuki Takagi +

  - Mike Taves

  - Ben Thompson +

  - Bas van Beek

  - Jacob Vanderplas

  - Dhruv Vats +

  - 8.  Vetinari +

  - Thomas Viehmann +

  - Pauli Virtanen

  - Vlad +

  - Arthur Volant

  - Samuel Wallan

  - Stefan van der Walt

  - Warren Weckesser

  - Josh Wilson

  - Haoyin Xu +

  - Rory Yorke

  - Egor Zemlyanoy

  - Gang Zhao +

  - 赵丰 (Zhao Feng) +

A total of 139 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.8.0

  - [\#592](https://github.com/scipy/scipy/issues/592): Statistics Review: variation (Trac \#65)
  - [\#857](https://github.com/scipy/scipy/issues/857): A Wrapper for PROPACK (Trac \#330)
  - [\#2009](https://github.com/scipy/scipy/issues/2009): "Kulsinski" dissimilarity seems wrong (Trac \#1484)
  - [\#2063](https://github.com/scipy/scipy/issues/2063): callback functions for COBYLA and TNC (Trac \#1538)
  - [\#2358](https://github.com/scipy/scipy/issues/2358): ndimage.center\_of\_mass doesnt return all for all labelled objects...
  - [\#5668](https://github.com/scipy/scipy/issues/5668): Need zpk2sos for analog filters
  - [\#7340](https://github.com/scipy/scipy/issues/7340): SciPy Hypergeometric function hyp2f1 producing infinities
  - [\#8774](https://github.com/scipy/scipy/issues/8774): In \`optimize.basinhopping\`, the target acceptance rate should...
  - [\#10497](https://github.com/scipy/scipy/issues/10497): scipy.sparse.csc\_matrix.toarray docstring is wrong
  - [\#10888](https://github.com/scipy/scipy/issues/10888): Check finite difference gradient approximation in a random direction
  - [\#10974](https://github.com/scipy/scipy/issues/10974): Non explicit error message in lobpcg
  - [\#11452](https://github.com/scipy/scipy/issues/11452): Normalisation requirement for \`Wn\` unclear in \`scipy.signal.butter\`
  - [\#11700](https://github.com/scipy/scipy/issues/11700): solve\_ivp errors out instead of simply quitting after the solve...
  - [\#12006](https://github.com/scipy/scipy/issues/12006): newton: Shouldn't it take a Jacobian for multivariate problems...
  - [\#12100](https://github.com/scipy/scipy/issues/12100): solve\_ivp: custom t\_eval list and the terminating event
  - [\#12106](https://github.com/scipy/scipy/issues/12106): \`axis\` option for \`stats.tmean\` do not appear to be working...
  - [\#12192](https://github.com/scipy/scipy/issues/12192): \`scipy.stats.rv\_continuous.moment\` does not accept array input
  - [\#12502](https://github.com/scipy/scipy/issues/12502): Divide by zero in Jacobian numerical differentiation when equality...
  - [\#12981](https://github.com/scipy/scipy/issues/12981): SLSQP constrained minimization error in 1.5.2
  - [\#12999](https://github.com/scipy/scipy/issues/12999): Bug in scipy.stats.ks\_2samp for two-sided auto and exact modes...
  - [\#13402](https://github.com/scipy/scipy/issues/13402): ENH: Faster Max Flow algorithm in scipy.sparse.csgraph
  - [\#13580](https://github.com/scipy/scipy/issues/13580): truncnorm gives incorrect means and variances
  - [\#13642](https://github.com/scipy/scipy/issues/13642): stats.truncnorm variance works incorrectly when input is an array.
  - [\#13659](https://github.com/scipy/scipy/issues/13659): Orthogonal Array for Latin hypercube in \`scipy.stats.qmc\`
  - [\#13737](https://github.com/scipy/scipy/issues/13737): brentq can overflow / underflow
  - [\#13745](https://github.com/scipy/scipy/issues/13745): different default atol, btol for lsqr, lsmr
  - [\#13898](https://github.com/scipy/scipy/issues/13898): Savitzky-Golay filter for even number data
  - [\#13902](https://github.com/scipy/scipy/issues/13902): Different solvers of \`svds\` return quite different results
  - [\#13922](https://github.com/scipy/scipy/issues/13922): Need Exception / Error for Incorrect and/or misleading analog...
  - [\#14122](https://github.com/scipy/scipy/issues/14122): Item assignement for spatial.transform.Rotation objects
  - [\#14140](https://github.com/scipy/scipy/issues/14140): Likely unnecessary invalid value warning from PchipInterpolator
  - [\#14152](https://github.com/scipy/scipy/issues/14152): zpk2sos not working correctly when butterworth band-pass filter...
  - [\#14165](https://github.com/scipy/scipy/issues/14165): scipy.optimize.minimize method='Nelder-Mead': 'maxfev' is not...
  - [\#14168](https://github.com/scipy/scipy/issues/14168): Missing "inverse" word in the multidimensional Discrete Cosine/Sine...
  - [\#14189](https://github.com/scipy/scipy/issues/14189): Incorrect shape handling in \`scipy.stat.multivariate\_t.rvs\`...
  - [\#14190](https://github.com/scipy/scipy/issues/14190): Links in documentation of Dirichlet distribution are a mess
  - [\#14193](https://github.com/scipy/scipy/issues/14193): Implementation of scrambled Van der Corput sequence differs from...
  - [\#14217](https://github.com/scipy/scipy/issues/14217): Error in documentation for \`scipy.stats.gaussian\_kde.factor\`
  - [\#14235](https://github.com/scipy/scipy/issues/14235): Should this be $y$ only, instead of $m\_y$?
  - [\#14236](https://github.com/scipy/scipy/issues/14236): BUG: discrete isf is wrong at boundary if loc \!= 0
  - [\#14277](https://github.com/scipy/scipy/issues/14277): Broken reference in docstring of scipy.stats.power\_divergence
  - [\#14324](https://github.com/scipy/scipy/issues/14324): BUG: scipy.stats.theilslopes intercept calculation can produce...
  - [\#14332](https://github.com/scipy/scipy/issues/14332): Strange output of \`binned\_statistic\_dd\` with \`statistic=sum\`
  - [\#14340](https://github.com/scipy/scipy/issues/14340): Initialize Rotation using list or array of Rotations
  - [\#14346](https://github.com/scipy/scipy/issues/14346): scipy.stats.rv\_continuous.fit returns wrapper instead of fit...
  - [\#14360](https://github.com/scipy/scipy/issues/14360): Making clearer what namespaces are public by use of underscores
  - [\#14385](https://github.com/scipy/scipy/issues/14385): csgraph.maximum\_flow can cause Python crash for large but very...
  - [\#14409](https://github.com/scipy/scipy/issues/14409): Lagrange polynomials and numpy Polynomials
  - [\#14412](https://github.com/scipy/scipy/issues/14412): Extra function arguments to \`scipy.integrate.quad\_vec\`
  - [\#14416](https://github.com/scipy/scipy/issues/14416): Is the r-value outputted by scipy.stats.linregress always the...
  - [\#14420](https://github.com/scipy/scipy/issues/14420): BUG: RBFInterpolator fails when calling it with a slice of a...
  - [\#14425](https://github.com/scipy/scipy/issues/14425): Running tests in parallel is not any faster than without pytest-xdist...
  - [\#14445](https://github.com/scipy/scipy/issues/14445): BUG: out of bounds indexing issue in \`prini.f\`
  - [\#14482](https://github.com/scipy/scipy/issues/14482): Azure CI jobs do not set exit status for build stage correctly
  - [\#14491](https://github.com/scipy/scipy/issues/14491): MAINT: Replace np.rollaxis with np.moveaxis
  - [\#14501](https://github.com/scipy/scipy/issues/14501): runtests.py overrides \`$PYTHONPATH\`
  - [\#14514](https://github.com/scipy/scipy/issues/14514): linprog kwargs not recognised
  - [\#14529](https://github.com/scipy/scipy/issues/14529): CI: Azure pipelines don't appear to be running
  - [\#14535](https://github.com/scipy/scipy/issues/14535): hess option does not work in minimize function
  - [\#14551](https://github.com/scipy/scipy/issues/14551): Cannot create Compressed sparse column matrix of shape N x N-2
  - [\#14568](https://github.com/scipy/scipy/issues/14568): \`stats.norminvgauss\` incorrect implementation?
  - [\#14585](https://github.com/scipy/scipy/issues/14585): DOC: toolchain updates and max Python
  - [\#14607](https://github.com/scipy/scipy/issues/14607): scipy.sparse.linalg.inv cannot take ndarray as argument despite...
  - [\#14608](https://github.com/scipy/scipy/issues/14608): BUG: scipy.stats.multivariate\_t distribution math documentation
  - [\#14623](https://github.com/scipy/scipy/issues/14623): BUG: Error constructing sparse matrix with indices larger than...
  - [\#14654](https://github.com/scipy/scipy/issues/14654): DOC: Linux Devdocs workflow requires installing packages that...
  - [\#14680](https://github.com/scipy/scipy/issues/14680): BUG: misleading documentation in scipy.stats.entropy
  - [\#14683](https://github.com/scipy/scipy/issues/14683): DOC: OptimizeResult Notes are placed before attribute section,...
  - [\#14733](https://github.com/scipy/scipy/issues/14733): BUG: resample\_poly does not preserve dtype
  - [\#14746](https://github.com/scipy/scipy/issues/14746): site.cfg: \[ALL\] or \[DEFAULT\]?
  - [\#14770](https://github.com/scipy/scipy/issues/14770): BUG: lpmn ref broken link
  - [\#14807](https://github.com/scipy/scipy/issues/14807): BUG: wrong weights of the 7-point gauss rule in QUADPACK: dqk15w.f
  - [\#14830](https://github.com/scipy/scipy/issues/14830): do CDF inversion methods have to be public?
  - [\#14859](https://github.com/scipy/scipy/issues/14859): BUG: constraint function is overwritten when equal bounds are...
  - [\#14873](https://github.com/scipy/scipy/issues/14873): ENH: get the driver used in scipy.linalg.eigh
  - [\#14879](https://github.com/scipy/scipy/issues/14879): BUG: TNC output is different if a callback is used.
  - [\#14891](https://github.com/scipy/scipy/issues/14891): DOC: \`directed\_hausdorff\` expects 2D array despite docs stating...
  - [\#14910](https://github.com/scipy/scipy/issues/14910): \`stats.contingency\` not listed as public API
  - [\#14911](https://github.com/scipy/scipy/issues/14911): MAINT, DOC: CI failure for doc building
  - [\#14942](https://github.com/scipy/scipy/issues/14942): DOC: Ambiguous command instruction for running tests in Mac docs
  - [\#14968](https://github.com/scipy/scipy/issues/14968): Debug build CI job crashes on \`stats.\_unuran\` threading test
  - [\#14984](https://github.com/scipy/scipy/issues/14984): BUG: scipy.sparse.linalg.spsolve: runtime memory error caused...
  - [\#14987](https://github.com/scipy/scipy/issues/14987): ENH: The knot interval lookup for BSpline.design\_matrix is inefficient
  - [\#15025](https://github.com/scipy/scipy/issues/15025): Might be j\<=i+k?
  - [\#15033](https://github.com/scipy/scipy/issues/15033): BUG: scipy.fft.dct type I with norm = "ortho" leads to wrong...
  - [\#15051](https://github.com/scipy/scipy/issues/15051): BUG: test failures on aarch in wheel builder repo
  - [\#15064](https://github.com/scipy/scipy/issues/15064): MAINT: \`interpolation\` keyword is renamed to \`method\` in...
  - [\#15103](https://github.com/scipy/scipy/issues/15103): BUG: scipy.stats.chi.mean returns nan for large df due to use...
  - [\#15186](https://github.com/scipy/scipy/issues/15186): Fix use of \`pytest.warns(None)\` for pytest 7.0.0
  - [\#15206](https://github.com/scipy/scipy/issues/15206): BUG: Minor issue with suggestions in scipy.sparse DeprecationWarnings...
  - [\#15224](https://github.com/scipy/scipy/issues/15224): BUG: 0th power of sparse array/matrix always returns the identity...
  - [\#15228](https://github.com/scipy/scipy/issues/15228): BUG: bounded L-BFGS-B doesn't work with a scalar.
  - [\#15254](https://github.com/scipy/scipy/issues/15254): BUG: \`DeprecationWarning: distutils Version classes are deprecated\`
  - [\#15267](https://github.com/scipy/scipy/issues/15267): Windows CI jobs have a build issue with Pythran 0.11
  - [\#15276](https://github.com/scipy/scipy/issues/15276): Boost and PROPACK git submodules are too easy to commit changes...
  - [\#15316](https://github.com/scipy/scipy/issues/15316): BUG: Failed to install scipy 1.7.x with pypy 3.7 in aarch64
  - [\#15339](https://github.com/scipy/scipy/issues/15339): BUG: \`highs-ds\` returns memoryviews instead of np.arrays for...
  - [\#15375](https://github.com/scipy/scipy/issues/15375): BUG: axis argument to scipy.stats.mode does not accept negative...
  - [\#15517](https://github.com/scipy/scipy/issues/15517): BUG: Link to mailing list seems broken

## Pull requests for 1.8.0

  - [\#4607](https://github.com/scipy/scipy/pull/4607): Add Chirp Z-transform, zoom FFT
  - [\#10504](https://github.com/scipy/scipy/pull/10504): ENH: Carlson symmetric elliptic integrals.
  - [\#11263](https://github.com/scipy/scipy/pull/11263): MAINT:optimize: Comply with user-specified rel\_step
  - [\#11754](https://github.com/scipy/scipy/pull/11754): ENH: stats: Updates to \`variation\`.
  - [\#11954](https://github.com/scipy/scipy/pull/11954): ENH: improve ARGUS rv generation in scipy.stats
  - [\#12143](https://github.com/scipy/scipy/pull/12143): BUG: Correctly use \`axis\` in \`scipy.stats.tmean\`
  - [\#12146](https://github.com/scipy/scipy/pull/12146): DOC: add docs to explain behaviour of newton's mehod on arrays
  - [\#12197](https://github.com/scipy/scipy/pull/12197): BUG: fix moments method to support arrays and list
  - [\#12889](https://github.com/scipy/scipy/pull/12889): MAINT: deal with cases in \`minimize\` for \`(bounds.lb == bounds.ub).any()
  - [\#13002](https://github.com/scipy/scipy/pull/13002): ENH: stats: Tukey's honestly significant difference test
  - [\#13096](https://github.com/scipy/scipy/pull/13096): BUG: optimize: alternative fix for minimize issues with lb==ub
  - [\#13143](https://github.com/scipy/scipy/pull/13143): MAINT: deal with cases in \`minimize\` for \`(bounds.lb == bounds.ub).any()...
  - [\#13229](https://github.com/scipy/scipy/pull/13229): ENH: modernise some Fortran code, needed for nagfor compiler
  - [\#13312](https://github.com/scipy/scipy/pull/13312): ENH: stats: add \`axis\` and \`nan\_policy\` parameters to functions...
  - [\#13347](https://github.com/scipy/scipy/pull/13347): CI: bump gcc from 4.8 to 5.x
  - [\#13392](https://github.com/scipy/scipy/pull/13392): MAINT: streamlined kwargs for minimizer in dual\_annealing
  - [\#13419](https://github.com/scipy/scipy/pull/13419): BUG: Fix group delay singularity check
  - [\#13471](https://github.com/scipy/scipy/pull/13471): ENH: LHS based OptimalDesign (scipy.stats.qmc)
  - [\#13581](https://github.com/scipy/scipy/pull/13581): MAINT: stats: fix truncnorm stats with array shapes
  - [\#13839](https://github.com/scipy/scipy/pull/13839): MAINT: set same tolerance between LSMR and LSQR
  - [\#13864](https://github.com/scipy/scipy/pull/13864): Array scalar conversion deprecation
  - [\#13883](https://github.com/scipy/scipy/pull/13883): MAINT: move LSAP maximization handling into solver code
  - [\#13899](https://github.com/scipy/scipy/pull/13899): ENH: stats: add general permutation hypothesis test
  - [\#13921](https://github.com/scipy/scipy/pull/13921): BUG: optimize: fix max function call validation for \`minimize\`...
  - [\#13958](https://github.com/scipy/scipy/pull/13958): ENH: stats: add \`alternative\` to masked version of T-Tests
  - [\#13960](https://github.com/scipy/scipy/pull/13960): ENH: stats: add \`alternative\` to masked normality tests
  - [\#14007](https://github.com/scipy/scipy/pull/14007): BUG: Fix root bracketing logic in Brent's method (issue \#13737)
  - [\#14024](https://github.com/scipy/scipy/pull/14024): ENH: Add annotations for \`scipy.spatial.cKDTree\`
  - [\#14049](https://github.com/scipy/scipy/pull/14049): MAINT: Change special.orthogonal.orthopoly1d type hints to ArrayLike
  - [\#14132](https://github.com/scipy/scipy/pull/14132): DOC: badge with version of the doc in the navbar
  - [\#14144](https://github.com/scipy/scipy/pull/14144): REL: set version to 1.8.0.dev0
  - [\#14151](https://github.com/scipy/scipy/pull/14151): BLD: update pyproject.toml - add macOS M1, drop py36
  - [\#14153](https://github.com/scipy/scipy/pull/14153): BUG: stats: Implementing boost's hypergeometric distribution...
  - [\#14160](https://github.com/scipy/scipy/pull/14160): ENH: sparse.linalg: Add TFQMR algorithm for non-Hermitian sparse...
  - [\#14163](https://github.com/scipy/scipy/pull/14163): BENCH: add benchmark for energy\_distance and wasserstein\_distance
  - [\#14173](https://github.com/scipy/scipy/pull/14173): BUG: Fixed an issue wherein \`geometric\_slerp\` would return...
  - [\#14174](https://github.com/scipy/scipy/pull/14174): ENH: Add annotations to \`scipy.spatial.geometric\_slerp\`
  - [\#14183](https://github.com/scipy/scipy/pull/14183): DOC: add examples/ update mstats doc of pearsonr in scipy.stats
  - [\#14186](https://github.com/scipy/scipy/pull/14186): TST, MAINT: hausdorff test cleanups
  - [\#14187](https://github.com/scipy/scipy/pull/14187): DOC: interpolate: rbf has kwargs too.
  - [\#14191](https://github.com/scipy/scipy/pull/14191): MAINT:TST:linalg modernize the test assertions
  - [\#14192](https://github.com/scipy/scipy/pull/14192): BUG: stats: fix shape handing in multivariate\_t.rvs
  - [\#14197](https://github.com/scipy/scipy/pull/14197): CI: azure: Fix handling of 'skip azp'.
  - [\#14200](https://github.com/scipy/scipy/pull/14200): DOC: Remove link to alpha in scipy.stats.dirichlet
  - [\#14201](https://github.com/scipy/scipy/pull/14201): TST: cleanup in lsqr and lsmr tests
  - [\#14204](https://github.com/scipy/scipy/pull/14204): Improve error message for index dimension
  - [\#14208](https://github.com/scipy/scipy/pull/14208): MAINT: add invalid='ignore' to np.errstate block in PchipInterpolator
  - [\#14209](https://github.com/scipy/scipy/pull/14209): ENH: stats: kendalltau: add alternative parameter
  - [\#14210](https://github.com/scipy/scipy/pull/14210): BUG: Fix Nelder-Mead logic when using a non-1D x0 and adapative
  - [\#14211](https://github.com/scipy/scipy/pull/14211): Fixed doc for gaussian\_kde (kde.factor description)
  - [\#14213](https://github.com/scipy/scipy/pull/14213): ENH: stats: somersd: add alternative parameter
  - [\#14214](https://github.com/scipy/scipy/pull/14214): ENH: Improve the \`scipy.spatial.qhull\` annotations
  - [\#14215](https://github.com/scipy/scipy/pull/14215): ENH: stats: Integrate library UNU.RAN in \`scipy.stats\` \[GSoC...
  - [\#14218](https://github.com/scipy/scipy/pull/14218): DOC: clarify \`ndimage.center\_of\_mass\` docstring
  - [\#14219](https://github.com/scipy/scipy/pull/14219): ENH: sparse.linalg: Use the faster "sqrt" from "math" and be...
  - [\#14222](https://github.com/scipy/scipy/pull/14222): MAINT: stats: remove unused 'type: ignore' comment
  - [\#14224](https://github.com/scipy/scipy/pull/14224): MAINT: Modify to use new random API in benchmarks
  - [\#14225](https://github.com/scipy/scipy/pull/14225): MAINT: fix missing LowLevelCallable in \`dir(scipy)\`
  - [\#14226](https://github.com/scipy/scipy/pull/14226): BLD: fix warning for missing dependency, and dev version number
  - [\#14227](https://github.com/scipy/scipy/pull/14227): MAINT: fix maybe-uninitialized warnings in lbfgbf.f
  - [\#14228](https://github.com/scipy/scipy/pull/14228): BENCH: add more benchmarks for inferential statistics tests
  - [\#14237](https://github.com/scipy/scipy/pull/14237): Removes unused variable
  - [\#14240](https://github.com/scipy/scipy/pull/14240): ENH: sparse.linalg: Normalize type descriptions
  - [\#14242](https://github.com/scipy/scipy/pull/14242): BUG: stats: fix discrete \`.isf\` to work at boundaries when...
  - [\#14250](https://github.com/scipy/scipy/pull/14250): Error in parameter checking in cdfbin.f
  - [\#14254](https://github.com/scipy/scipy/pull/14254): BUG: Fixed an issue wherein \`SphericalVoronoi\` could raise...
  - [\#14255](https://github.com/scipy/scipy/pull/14255): BUG: Numerical stability for large N BarycentricInterpolator
  - [\#14257](https://github.com/scipy/scipy/pull/14257): MAINT: Fixed deprecated API calls in scipy.optimize
  - [\#14258](https://github.com/scipy/scipy/pull/14258): DOC: fix stats.pearsonr example that was failing in CI
  - [\#14259](https://github.com/scipy/scipy/pull/14259): CI: pin mypy to 0.902 and fix one CI failure
  - [\#14260](https://github.com/scipy/scipy/pull/14260): BLD: optimize: fix some warnings in moduleTNC and minpack.h
  - [\#14261](https://github.com/scipy/scipy/pull/14261): BLD: fix include order and build warnings for \`optimize/\_trlib\`
  - [\#14263](https://github.com/scipy/scipy/pull/14263): DOC: forward port 1.7.0 relnotes
  - [\#14268](https://github.com/scipy/scipy/pull/14268): MAINT: Replaced direct field access in PyArrayObject\* with wrapper...
  - [\#14274](https://github.com/scipy/scipy/pull/14274): MAINT: more scalar array conversion fixes for optimize
  - [\#14275](https://github.com/scipy/scipy/pull/14275): MAINT: Update vendored uarray, required for auto-dispatching
  - [\#14278](https://github.com/scipy/scipy/pull/14278): MAINT: two small fixes for implicit scalar-array-conversions
  - [\#14281](https://github.com/scipy/scipy/pull/14281): ENH: Annotate the array dtypes of \`scipy.spatial.qhull\`
  - [\#14285](https://github.com/scipy/scipy/pull/14285): DEV: remove scikit-umfpack from environment.yml
  - [\#14287](https://github.com/scipy/scipy/pull/14287): TST: Add testing for hyp2f1 for complex values in anticipation...
  - [\#14291](https://github.com/scipy/scipy/pull/14291): TST: split combined LSAP input validation tests up
  - [\#14293](https://github.com/scipy/scipy/pull/14293): MAINT: remove the last deprecated \`[PyEval]()\*\` usages
  - [\#14294](https://github.com/scipy/scipy/pull/14294): ENH: Annotate array dtypes in \`scipy.spatial.ckdtree\` and \`distance\`
  - [\#14295](https://github.com/scipy/scipy/pull/14295): MAINT: move LSAP input validation into lsap\_module
  - [\#14297](https://github.com/scipy/scipy/pull/14297): DOC: Make code block an Item List
  - [\#14301](https://github.com/scipy/scipy/pull/14301): MAINT: fix the last build warning in \`optimize/\_trlib/\`
  - [\#14302](https://github.com/scipy/scipy/pull/14302): BLD: fix build warnings for \`stats/biasedurn\`
  - [\#14305](https://github.com/scipy/scipy/pull/14305): MAINT: silence warning in odepackmodule.c
  - [\#14308](https://github.com/scipy/scipy/pull/14308): ENH: use Pythran to speedup somersd and \_tau\_b
  - [\#14309](https://github.com/scipy/scipy/pull/14309): BLD: fix build warnings for scipy.special
  - [\#14310](https://github.com/scipy/scipy/pull/14310): ENH: make epsilon optional in optimize.approx\_fprime.
  - [\#14311](https://github.com/scipy/scipy/pull/14311): MAINT: Corrected NumPy API usage in scipy.spatial
  - [\#14312](https://github.com/scipy/scipy/pull/14312): ENH: Using random directional derivative to check grad
  - [\#14326](https://github.com/scipy/scipy/pull/14326): MAINT: Removed redifinition of trace1 in spatial/qhull
  - [\#14328](https://github.com/scipy/scipy/pull/14328): MAINT: \_lib: add \_\_dealloc\_\_ to MessageStream
  - [\#14331](https://github.com/scipy/scipy/pull/14331): ENH: Complement \`trace\` method of sparse matrices like \`csr\_matrix/csc\_matrix/coo\_matrix\`
  - [\#14338](https://github.com/scipy/scipy/pull/14338): BUG: fix \`stats.binned\_statistic\_dd\` issue with values close...
  - [\#14339](https://github.com/scipy/scipy/pull/14339): TST: fix \`sparse.linalg.spsolve\` test with singular input
  - [\#14341](https://github.com/scipy/scipy/pull/14341): MAINT: Add missing parenthesis in \_nnls.py
  - [\#14342](https://github.com/scipy/scipy/pull/14342): ENH: make \`savgol\_coeffs\`, \`savgol\_filter\` work for even...
  - [\#14344](https://github.com/scipy/scipy/pull/14344): ENH: scipy.interpolate b-splines (design\_matrix)
  - [\#14350](https://github.com/scipy/scipy/pull/14350): MAINT: make fit method of rv\_continuous pickleable
  - [\#14358](https://github.com/scipy/scipy/pull/14358): ENH: Dinic's algorithm for maximum\_flow
  - [\#14359](https://github.com/scipy/scipy/pull/14359): ENH: Set fft backend with try\_last=True
  - [\#14362](https://github.com/scipy/scipy/pull/14362): Use list comprehension
  - [\#14367](https://github.com/scipy/scipy/pull/14367): BUG: Check for NULL pointer in \`memmove\`
  - [\#14377](https://github.com/scipy/scipy/pull/14377): Fix behavior of binary morphology with output=input when iterations=1
  - [\#14378](https://github.com/scipy/scipy/pull/14378): MAINT: Removing deprecated NumPy C API from \`interpolate\`
  - [\#14380](https://github.com/scipy/scipy/pull/14380): ENH: Fixed intercept computation in theilslopes
  - [\#14381](https://github.com/scipy/scipy/pull/14381): BENCH: add benchmark for somersd
  - [\#14387](https://github.com/scipy/scipy/pull/14387): MAINT: Removed deprecated NumPy C api from \`sparse\`
  - [\#14392](https://github.com/scipy/scipy/pull/14392): BUG/ENH: rework maximum flow preprocessing
  - [\#14393](https://github.com/scipy/scipy/pull/14393): CI: Lint checks failures are reporting success
  - [\#14403](https://github.com/scipy/scipy/pull/14403): Fix off by one error in doc string.
  - [\#14404](https://github.com/scipy/scipy/pull/14404): DOC: docstring fix for default of n param of interpolate.pade
  - [\#14406](https://github.com/scipy/scipy/pull/14406): MAINT: Use numpy\_nodepr\_api in \`spatial\`
  - [\#14411](https://github.com/scipy/scipy/pull/14411): MAINT: minor cleanups in usage of \`compute\_uv\` keyword of \`svd\`
  - [\#14413](https://github.com/scipy/scipy/pull/14413): DOC:interpolate: Fix the docstring example of "lagrange"
  - [\#14419](https://github.com/scipy/scipy/pull/14419): DEP: deprecate private but non-underscored \`signal.spline\`...
  - [\#14422](https://github.com/scipy/scipy/pull/14422): MAINT: csgraph: change Dinic algorithm to iterative implementation
  - [\#14423](https://github.com/scipy/scipy/pull/14423): CI: remove printing of skipped and xfailed tests from Azure test...
  - [\#14426](https://github.com/scipy/scipy/pull/14426): ENH: Add args argument for callable in quad\_vec
  - [\#14427](https://github.com/scipy/scipy/pull/14427): MAINT: extra pythran annotation for i686 support
  - [\#14432](https://github.com/scipy/scipy/pull/14432): BUG/ENH: more stable recursion for 2-sample ks test exact p-values
  - [\#14433](https://github.com/scipy/scipy/pull/14433): ENH: add PROPACK wrapper for improved sparse SVD
  - [\#14440](https://github.com/scipy/scipy/pull/14440): MAINT: stats: silence mypy complaints
  - [\#14441](https://github.com/scipy/scipy/pull/14441): ENH: TST: add a threadpoolctl hook to limit OpenBLAS parallelism
  - [\#14442](https://github.com/scipy/scipy/pull/14442): MAINT: Fix uninitialized warnings in \`sparse/linalg/dsolve\`
  - [\#14447](https://github.com/scipy/scipy/pull/14447): MAINT: rename scipy.ndimage modules
  - [\#14449](https://github.com/scipy/scipy/pull/14449): ENH: Cythonize van der corput
  - [\#14454](https://github.com/scipy/scipy/pull/14454): MAINT: Begin translation of hyp2f1 for complex numbers into Cython
  - [\#14456](https://github.com/scipy/scipy/pull/14456): CI: Lint with flake8 instead of pyflakes + pycodestyle
  - [\#14458](https://github.com/scipy/scipy/pull/14458): DOC: clarify meaning of rvalue in stats.linregress
  - [\#14459](https://github.com/scipy/scipy/pull/14459): MAINT: Fix uninitialized warnings in \`interpolate\` and \`cluster\`
  - [\#14463](https://github.com/scipy/scipy/pull/14463): Fix typo in doc overview: "pandas" to "SciPy"
  - [\#14474](https://github.com/scipy/scipy/pull/14474): DEP: Deprecate private but non-underscored ndimage.\<module\> namespace
  - [\#14477](https://github.com/scipy/scipy/pull/14477): MAINT: Using Tempita file for bspline (signal)
  - [\#14479](https://github.com/scipy/scipy/pull/14479): Added \`Inverse\` word in \`idstn\` and \`idctn\` docstrings
  - [\#14487](https://github.com/scipy/scipy/pull/14487): TST: modify flaky test for constrained minimization
  - [\#14489](https://github.com/scipy/scipy/pull/14489): MAINT: cleanup of some line\_search code
  - [\#14492](https://github.com/scipy/scipy/pull/14492): CI: make sure Azure job step fails when building a SciPy wheel...
  - [\#14496](https://github.com/scipy/scipy/pull/14496): MAINT: switch to using spmatrix.toarray instead of .todense
  - [\#14499](https://github.com/scipy/scipy/pull/14499): DOC: fix toarray/todense docstring
  - [\#14507](https://github.com/scipy/scipy/pull/14507): CI: Add lint\_diff docs & option to run only on specified files/dirs
  - [\#14513](https://github.com/scipy/scipy/pull/14513): DOC: added reference and example in jacobi docstring
  - [\#14520](https://github.com/scipy/scipy/pull/14520): BUG: diffev maxfun can be reached partway through population
  - [\#14524](https://github.com/scipy/scipy/pull/14524): ENH: Rotation.concatenate
  - [\#14532](https://github.com/scipy/scipy/pull/14532): ENH: sparse.linalg: The solution is zero when R.H.S. is zero
  - [\#14538](https://github.com/scipy/scipy/pull/14538): CI: Revert "CI: make sure Azure job step fails when building...
  - [\#14539](https://github.com/scipy/scipy/pull/14539): DOC: added chebyt and chebyu docstring examples in scipy.special
  - [\#14546](https://github.com/scipy/scipy/pull/14546): ENH: Orthogonal Latin Hypercube Sampling to QMC
  - [\#14547](https://github.com/scipy/scipy/pull/14547): ENH: \_\_setitem\_\_ method for Rotation class
  - [\#14549](https://github.com/scipy/scipy/pull/14549): Small test fixes for pypy + win + mmap
  - [\#14554](https://github.com/scipy/scipy/pull/14554): ENH: scipy.interpolate.BSpline from\_power\_basis
  - [\#14555](https://github.com/scipy/scipy/pull/14555): BUG: sparse: fix a DIA.tocsc bug
  - [\#14556](https://github.com/scipy/scipy/pull/14556): Fix the link to details of the strongly connected components...
  - [\#14559](https://github.com/scipy/scipy/pull/14559): WIP: TST: add tests for Pythran somersd
  - [\#14561](https://github.com/scipy/scipy/pull/14561): DOC: added reference and examples in (gen)laguerre docstring...
  - [\#14564](https://github.com/scipy/scipy/pull/14564): ENH: Add threaded Van Der Corput
  - [\#14571](https://github.com/scipy/scipy/pull/14571): Fix repeated word in \_mannwhitneyu.py example
  - [\#14572](https://github.com/scipy/scipy/pull/14572): Set min length of the knot array for BSpline.design\_matrix
  - [\#14578](https://github.com/scipy/scipy/pull/14578): DOC: added examples in spherical Bessel docstrings
  - [\#14581](https://github.com/scipy/scipy/pull/14581): MAINT: Refactor \`linalg.tests.test\_interpolative::TestInterpolativeDecomposition::test\_id\`
  - [\#14588](https://github.com/scipy/scipy/pull/14588): ENH: Added \`\`kulczynski1\`\` to \`\`scipy.spatial.distance\`\`
  - [\#14592](https://github.com/scipy/scipy/pull/14592): DOC: clarify parameters of norminvgauss in scipy.stats
  - [\#14595](https://github.com/scipy/scipy/pull/14595): Removing unused subroutines in \`\`scipy/linalg/src/id\_dist/src/prini.f\`\`
  - [\#14601](https://github.com/scipy/scipy/pull/14601): Fixed inconsistencies between numpy and scipy interp
  - [\#14602](https://github.com/scipy/scipy/pull/14602): MAINT: Fix \`-Wunused-result\` warnings in \`sparse/linalg/dsolve\`
  - [\#14603](https://github.com/scipy/scipy/pull/14603): DEV: initialize all submodules in Gitpod Dockerfile
  - [\#14609](https://github.com/scipy/scipy/pull/14609): MAINT: Fix \`-Wmaybe-uninitialized\` warnings in \`optimize/\_highs\`
  - [\#14610](https://github.com/scipy/scipy/pull/14610): MAINT: Ignored \`\`scipy/signal/bspline\_util.c\`\`
  - [\#14613](https://github.com/scipy/scipy/pull/14613): MAINT: interpolate: Declare type for a Cython indexing variable.
  - [\#14619](https://github.com/scipy/scipy/pull/14619): ENH: stats.unuran: add Polynomial interpolation based numerical...
  - [\#14620](https://github.com/scipy/scipy/pull/14620): CI: fix Azure job which uses pre-release wheels + Python 3.7
  - [\#14625](https://github.com/scipy/scipy/pull/14625): ENH: optimize min max and median scipy.stats.binned\_statistic
  - [\#14626](https://github.com/scipy/scipy/pull/14626): MAINT: fix type-narrowing addition in sparse.construct.bmat
  - [\#14627](https://github.com/scipy/scipy/pull/14627): MAINT: Bumped tolerances to pass \`\`special.tests\`\` on Apple...
  - [\#14628](https://github.com/scipy/scipy/pull/14628): DOC: clarify usage of options param in scipy.optimize.linprog
  - [\#14629](https://github.com/scipy/scipy/pull/14629): ENH: optimize std in scipy.stats.binned\_statistic
  - [\#14630](https://github.com/scipy/scipy/pull/14630): DOC: add citation file
  - [\#14631](https://github.com/scipy/scipy/pull/14631): Fix unuran builds for older compilers
  - [\#14633](https://github.com/scipy/scipy/pull/14633): BUG: scipy.stats.\_unran: send only strings to include\_dirs
  - [\#14634](https://github.com/scipy/scipy/pull/14634): DOC: Fix Wikipedia bootstrap link
  - [\#14635](https://github.com/scipy/scipy/pull/14635): DOC: stats: fix multivariate\_t docs pdf eqn
  - [\#14637](https://github.com/scipy/scipy/pull/14637): MAINT: copy discrete dist dict
  - [\#14643](https://github.com/scipy/scipy/pull/14643): MAINT: address gh6019, disp for minimize\_scalar
  - [\#14644](https://github.com/scipy/scipy/pull/14644): DOC: stats: add UNU.RAN references in the tutorial
  - [\#14649](https://github.com/scipy/scipy/pull/14649): DOC: clarify SciPy compatibility with Python and NumPy.
  - [\#14655](https://github.com/scipy/scipy/pull/14655): MAINT: remove support for Python 3.7 (hence NumPy 1.16)
  - [\#14656](https://github.com/scipy/scipy/pull/14656): MAINT: replacing `assert_` with assert
  - [\#14658](https://github.com/scipy/scipy/pull/14658): DOC: use conda-forge in Ubuntu quickstart
  - [\#14660](https://github.com/scipy/scipy/pull/14660): MAINT: refactor "for ... in range(len(" statements
  - [\#14663](https://github.com/scipy/scipy/pull/14663): MAINT: update leftover Python and NumPy version from pyproject.toml
  - [\#14665](https://github.com/scipy/scipy/pull/14665): BLD: fix confusing "import pip" failure that should be caught
  - [\#14666](https://github.com/scipy/scipy/pull/14666): MAINT: remove unnecessary seeding and update \`check\_random\_state\`
  - [\#14669](https://github.com/scipy/scipy/pull/14669): ENH: Refactor GitHub Issue form templates
  - [\#14673](https://github.com/scipy/scipy/pull/14673): BLD: fix include order, Python.h before standard headers
  - [\#14676](https://github.com/scipy/scipy/pull/14676): BUG: Fixes failing benchmark tests optimize\_qap.QuadraticAssignment.track\_score
  - [\#14677](https://github.com/scipy/scipy/pull/14677): MAINT: github labeler on file paths
  - [\#14682](https://github.com/scipy/scipy/pull/14682): DOC: Fix typo in mannwhitneyu docstring
  - [\#14684](https://github.com/scipy/scipy/pull/14684): DOC: optimize: fix sporadic linprog doctest failure
  - [\#14685](https://github.com/scipy/scipy/pull/14685): MAINT: static typing of entropy
  - [\#14686](https://github.com/scipy/scipy/pull/14686): BUG: fix issue in lsqr.py introduced in a recent commit
  - [\#14689](https://github.com/scipy/scipy/pull/14689): MAINT: replace IOError alias with OSError or other appropriate...
  - [\#14692](https://github.com/scipy/scipy/pull/14692): MAINT: Translation of hyp2f1 for complex numbers into Cython,...
  - [\#14693](https://github.com/scipy/scipy/pull/14693): DOC: update OptimizeResult notes
  - [\#14694](https://github.com/scipy/scipy/pull/14694): Simplify PythranBuildExt usage
  - [\#14695](https://github.com/scipy/scipy/pull/14695): BLD: bump Pythran version to 0.9.12
  - [\#14697](https://github.com/scipy/scipy/pull/14697): CI: add \`cffi\` in the benchmark CI job, and in environment.yml
  - [\#14699](https://github.com/scipy/scipy/pull/14699): BUG: Fix TypeError in \`stats.\_discrete\_distns\`
  - [\#14700](https://github.com/scipy/scipy/pull/14700): DOC: update detailed roadmap
  - [\#14701](https://github.com/scipy/scipy/pull/14701): ENH:linalg: Add Cythonized get\_array\_bandwidth, issymmetric,...
  - [\#14706](https://github.com/scipy/scipy/pull/14706): BUG: Fix hyp2f1 to return correct values in regions near exp(±iπ/3).
  - [\#14707](https://github.com/scipy/scipy/pull/14707): Update constants.py
  - [\#14708](https://github.com/scipy/scipy/pull/14708): BENCH: shorten svds benchmark that is timing out in CI
  - [\#14709](https://github.com/scipy/scipy/pull/14709): CI: remove labeler sync
  - [\#14712](https://github.com/scipy/scipy/pull/14712): MAINT: special: Updates for \_cosine.c.
  - [\#14720](https://github.com/scipy/scipy/pull/14720): DOC: optimize hess and consistency
  - [\#14721](https://github.com/scipy/scipy/pull/14721): MAINT: correct PR template link
  - [\#14723](https://github.com/scipy/scipy/pull/14723): DOC: add note on padding to \`stats.binned\_statistic\_2d\` docs
  - [\#14727](https://github.com/scipy/scipy/pull/14727): ENH: sparse.linalg: Add an useful nonzero initial guess option
  - [\#14729](https://github.com/scipy/scipy/pull/14729): DOC: fix documentation for scipy.optimize.brenth
  - [\#14737](https://github.com/scipy/scipy/pull/14737): BUG:signal: matching window dtype to input
  - [\#14739](https://github.com/scipy/scipy/pull/14739): TST: sparse.linalg: Add test case with 2-D Poisson equations
  - [\#14743](https://github.com/scipy/scipy/pull/14743): TST:sparse.linalg: Use the more convenient "assert\_normclose"...
  - [\#14748](https://github.com/scipy/scipy/pull/14748): DOC: fix matrix representation in scipy.sparse.csgraph
  - [\#14751](https://github.com/scipy/scipy/pull/14751): ENH: numpy masked\_arrays in refguide-check
  - [\#14755](https://github.com/scipy/scipy/pull/14755): BUG: Avoid \`solve\_ivp\` failure when \`ts\` is empty
  - [\#14756](https://github.com/scipy/scipy/pull/14756): MAINT: LinAlgError from public numpy.linalg
  - [\#14759](https://github.com/scipy/scipy/pull/14759): BLD: change section name in site.cfg.example from ALL to DEFAULT
  - [\#14760](https://github.com/scipy/scipy/pull/14760): TST: suppress jinja2 deprecation warning
  - [\#14761](https://github.com/scipy/scipy/pull/14761): CI: remove \`pre\_release\_deps\_source\_dist\` job from Azure CI...
  - [\#14762](https://github.com/scipy/scipy/pull/14762): TST: add a seed to the pickling test of RBFInterpolator
  - [\#14763](https://github.com/scipy/scipy/pull/14763): MAINT: Make solve\_ivp slightly more strict wrt. t\_span.
  - [\#14772](https://github.com/scipy/scipy/pull/14772): DOC:special: Fix broken links to jburkardt
  - [\#14787](https://github.com/scipy/scipy/pull/14787): MAINT: Increase tolerance values to avoid test failures
  - [\#14789](https://github.com/scipy/scipy/pull/14789): MAINT: fix a tiny typo in signal/spectral.py
  - [\#14790](https://github.com/scipy/scipy/pull/14790): \[MRG\] BUG: Avoid lobpcg failure when iterations can't continue
  - [\#14794](https://github.com/scipy/scipy/pull/14794): Fix typos in bspline docs (and comments)
  - [\#14796](https://github.com/scipy/scipy/pull/14796): MAINT: Allow F401 and F403 in module init files
  - [\#14798](https://github.com/scipy/scipy/pull/14798): BUG: correct the test loop in test\_arpack.eval\_evec
  - [\#14801](https://github.com/scipy/scipy/pull/14801): CI, MAINT: pin Cython for azure pre-rel
  - [\#14805](https://github.com/scipy/scipy/pull/14805): BUG: optimize: fix max function call validation for minimize...
  - [\#14808](https://github.com/scipy/scipy/pull/14808): Fix Bug \#14807
  - [\#14814](https://github.com/scipy/scipy/pull/14814): MAINT:integrate: add upstream quadpack changes
  - [\#14817](https://github.com/scipy/scipy/pull/14817): ENH: stats: add geometric zscore
  - [\#14820](https://github.com/scipy/scipy/pull/14820): MAINT: Remove \`np.rollaxis\` usage with \`np.moveaxis\` and...
  - [\#14821](https://github.com/scipy/scipy/pull/14821): DOC: Updated documentation for interp1d
  - [\#14822](https://github.com/scipy/scipy/pull/14822): Add an array API to scipy.sparse
  - [\#14832](https://github.com/scipy/scipy/pull/14832): MAINT: py3.10 in more jobs and bump some 3.8 to 3.9
  - [\#14833](https://github.com/scipy/scipy/pull/14833): FIX: raise Python OverflowError exception on Boost.Math error
  - [\#14836](https://github.com/scipy/scipy/pull/14836): Bug fix: dqc25f.f
  - [\#14837](https://github.com/scipy/scipy/pull/14837): DOC: sparse.linalg: Fixed incorrect comments when the initial...
  - [\#14838](https://github.com/scipy/scipy/pull/14838): TST: seed a stats test
  - [\#14841](https://github.com/scipy/scipy/pull/14841): MAINT: Increase tolerances in tests to avoid Nightly CPython3.10...
  - [\#14844](https://github.com/scipy/scipy/pull/14844): DOC: Add refguide\_check option details to runtests.rst
  - [\#14845](https://github.com/scipy/scipy/pull/14845): DOC: update a type specifier in a docstring in \`radau.py\`
  - [\#14848](https://github.com/scipy/scipy/pull/14848): Typo "copmlex"
  - [\#14852](https://github.com/scipy/scipy/pull/14852): DOC: Fix documentation bugs in \`lstsq\`
  - [\#14860](https://github.com/scipy/scipy/pull/14860): minimize: copy user constraints if parameter is factored out....
  - [\#14865](https://github.com/scipy/scipy/pull/14865): BUG: stats: Fix a crash in stats.skew
  - [\#14868](https://github.com/scipy/scipy/pull/14868): \[MRG\] BUG: Update lobpcg.py to validate the accuracy and issue...
  - [\#14871](https://github.com/scipy/scipy/pull/14871): MAINT: removed a pitfall where a built-in name was being shadowed
  - [\#14872](https://github.com/scipy/scipy/pull/14872): DEP: Deprecate private namespaces in \`scipy.linalg\`
  - [\#14878](https://github.com/scipy/scipy/pull/14878): TST: bump rtol for equal\_bounds
  - [\#14881](https://github.com/scipy/scipy/pull/14881): DEP: Deprecate private namespaces in \`scipy.special\`
  - [\#14882](https://github.com/scipy/scipy/pull/14882): BUG: Convert TNC C module to cython
  - [\#14883](https://github.com/scipy/scipy/pull/14883): DOC:linalg: Clarify driver defaults in eigh
  - [\#14884](https://github.com/scipy/scipy/pull/14884): BUG: optimize: add missing attributes of \`OptimizeResult\` for...
  - [\#14892](https://github.com/scipy/scipy/pull/14892): DOC: Correct docs for Hausdorff distance
  - [\#14898](https://github.com/scipy/scipy/pull/14898): DEP: Deprecate private namespace in \`scipy.stats\`
  - [\#14902](https://github.com/scipy/scipy/pull/14902): MAINT:linalg: Rename func to "bandwidth"
  - [\#14906](https://github.com/scipy/scipy/pull/14906): DEP: Deprecate private namespace in \`scipy.constants\`
  - [\#14913](https://github.com/scipy/scipy/pull/14913): DEP: Deprecate private namespace in \`scipy.fftpack\`
  - [\#14916](https://github.com/scipy/scipy/pull/14916): DEP: Deprecate \`stats.biasedurn\` and make it private
  - [\#14918](https://github.com/scipy/scipy/pull/14918): DEP: Deprecate private namespaces in \`\`scipy.interpolate\`\`
  - [\#14919](https://github.com/scipy/scipy/pull/14919): DEP: Deprecate private namespaces in \`scipy.integrate\`
  - [\#14920](https://github.com/scipy/scipy/pull/14920): Fix for complex Fresnel
  - [\#14923](https://github.com/scipy/scipy/pull/14923): DEP: Deprecate private namespaces in \`\`scipy.spatial\`\`
  - [\#14924](https://github.com/scipy/scipy/pull/14924): Fix extent for scipy.signal.cwt example
  - [\#14925](https://github.com/scipy/scipy/pull/14925): MAINT: Ignore build generated files in \`\`scipy.stats\`\`
  - [\#14927](https://github.com/scipy/scipy/pull/14927): DEP: Deprecate private namespaces in \`scipy.misc\`
  - [\#14928](https://github.com/scipy/scipy/pull/14928): MAINT: fix runtest.py overriding \`$PYTHONPATH\`: prepend instead
  - [\#14934](https://github.com/scipy/scipy/pull/14934): BUG: optimize: add a missing attribute of OptimizeResult in \`basinhopping\`
  - [\#14939](https://github.com/scipy/scipy/pull/14939): DEP: Deprecate private namespaces in \`\`scipy.sparse\`\`
  - [\#14941](https://github.com/scipy/scipy/pull/14941): ENH: optimize: add optional parameters of adaptive step size...
  - [\#14943](https://github.com/scipy/scipy/pull/14943): DOC: clarify mac pytest; add blank line
  - [\#14944](https://github.com/scipy/scipy/pull/14944): BUG: MultivariateNormalQMC with specific QMCEngine remove unneeded...
  - [\#14947](https://github.com/scipy/scipy/pull/14947): DOC: adding example to decimate function
  - [\#14950](https://github.com/scipy/scipy/pull/14950): MAINT: Use matmul binary operator in scipy.sparse.linalg
  - [\#14954](https://github.com/scipy/scipy/pull/14954): DOC: Add missing params to minres docstring.
  - [\#14955](https://github.com/scipy/scipy/pull/14955): BUG: stats: fix broadcasting behavior of argsreduce
  - [\#14960](https://github.com/scipy/scipy/pull/14960): Update links for new site
  - [\#14961](https://github.com/scipy/scipy/pull/14961): CI: use https protocol for git in CircleCI
  - [\#14962](https://github.com/scipy/scipy/pull/14962): DEP: Deprecate private namespaces in \`scipy.signal\`
  - [\#14963](https://github.com/scipy/scipy/pull/14963): MAINT: \`integrate.lsoda\` missing in .gitignore
  - [\#14965](https://github.com/scipy/scipy/pull/14965): DOC: update logo and add favicon.
  - [\#14966](https://github.com/scipy/scipy/pull/14966): DEP: Deprecate private namespaces in \`\`scipy.optimize\`\`
  - [\#14969](https://github.com/scipy/scipy/pull/14969): CI: Fixes pyparsing version in doc build
  - [\#14972](https://github.com/scipy/scipy/pull/14972): Don't put space after directive name.
  - [\#14979](https://github.com/scipy/scipy/pull/14979): BUG: scipy.sparse.linalg.spsolve: fix memory error caused from...
  - [\#14988](https://github.com/scipy/scipy/pull/14988): BLD: update pyproject.toml for Python 3.10
  - [\#14989](https://github.com/scipy/scipy/pull/14989): ENH: Speed up knot interval lookup for BSpline.design\_matrix
  - [\#14992](https://github.com/scipy/scipy/pull/14992): Pythranized version of \_matfuncs\_sqrtm
  - [\#14993](https://github.com/scipy/scipy/pull/14993): MAINT: forward port 1.7.2 relnotes
  - [\#15004](https://github.com/scipy/scipy/pull/15004): ENH: Make \`get\_matfile\_version\` and other \`io.matlab\` objects...
  - [\#15007](https://github.com/scipy/scipy/pull/15007): DOC: add missing "regularized" to \`gammainccinv\` documentation
  - [\#15008](https://github.com/scipy/scipy/pull/15008): MAINT: restore access to deprecated private namespaces
  - [\#15010](https://github.com/scipy/scipy/pull/15010): TST: remove fragile test which checks if g77 is linked
  - [\#15013](https://github.com/scipy/scipy/pull/15013): MAINT: Fix use-after-free bug in Py\_FindObjects
  - [\#15018](https://github.com/scipy/scipy/pull/15018): CI: Work around Sphinx bug
  - [\#15019](https://github.com/scipy/scipy/pull/15019): Finite Difference Hessian in Scipy Optimize Solvers (Newton-CG)
  - [\#15020](https://github.com/scipy/scipy/pull/15020): ENH: sparse.linalg: Fixed the issue that the initial guess "x0"...
  - [\#15022](https://github.com/scipy/scipy/pull/15022): DOC: mitigate newton optimization not converging.
  - [\#15023](https://github.com/scipy/scipy/pull/15023): CI: Unpin Sphinx
  - [\#15027](https://github.com/scipy/scipy/pull/15027): DOC: linalg: Fix a small condition doc error
  - [\#15029](https://github.com/scipy/scipy/pull/15029): DEP: Deprecate private namespaces in \`scipy.sparse.linalg\`
  - [\#15034](https://github.com/scipy/scipy/pull/15034): DOC: use numpydoc format for C function in \`\_superlumodule.c\`
  - [\#15035](https://github.com/scipy/scipy/pull/15035): MAINT: simplify UNU.RAN api in stats
  - [\#15037](https://github.com/scipy/scipy/pull/15037): New example for gaussian\_filter
  - [\#15040](https://github.com/scipy/scipy/pull/15040): MAINT: Add test for public API
  - [\#15041](https://github.com/scipy/scipy/pull/15041): DOC: Add warning to dct documentation about norm='ortho'
  - [\#15045](https://github.com/scipy/scipy/pull/15045): DOC: update toolchain.rst
  - [\#15053](https://github.com/scipy/scipy/pull/15053): TST: Add some test skips to get wheel builder CI green again
  - [\#15054](https://github.com/scipy/scipy/pull/15054): MAINT: Remove wminkowski
  - [\#15055](https://github.com/scipy/scipy/pull/15055): ENH: allow p\>0 for Minkowski distance
  - [\#15061](https://github.com/scipy/scipy/pull/15061): MAINT:sparse: expm() fix redundant imports
  - [\#15062](https://github.com/scipy/scipy/pull/15062): MAINT:BLD: Open file in text mode for tempita
  - [\#15066](https://github.com/scipy/scipy/pull/15066): CI: bump gcc from 4.8 to 6
  - [\#15067](https://github.com/scipy/scipy/pull/15067): DOC: Update broken link to SuperLU library.
  - [\#15078](https://github.com/scipy/scipy/pull/15078): MAINT: update \`stats.iqr\` for deprecated \`np.percentile\`...
  - [\#15083](https://github.com/scipy/scipy/pull/15083): MAINT: stats: separate UNU.RAN functionality to its own submodule
  - [\#15084](https://github.com/scipy/scipy/pull/15084): MAINT: Include \`scipy.io.matlab\` in public API
  - [\#15085](https://github.com/scipy/scipy/pull/15085): ENH: support creation of analog SOS outputs
  - [\#15087](https://github.com/scipy/scipy/pull/15087): TST: Review \`\`\_assert\_within\_tol\`\` positional arguments
  - [\#15095](https://github.com/scipy/scipy/pull/15095): MAINT: update gitignore to ignore private directories
  - [\#15099](https://github.com/scipy/scipy/pull/15099): MAINT: ScalarFunction remember best\_x
  - [\#15100](https://github.com/scipy/scipy/pull/15100): MAINT: Include \`stats.contingency\` in public API
  - [\#15102](https://github.com/scipy/scipy/pull/15102): ENH: Add orthogonalize argument to DCT/DST
  - [\#15105](https://github.com/scipy/scipy/pull/15105): MAINT: Add missing imports in deprecated modules
  - [\#15107](https://github.com/scipy/scipy/pull/15107): BUG: Update chi\_gen to use scipy.special.gammaln
  - [\#15109](https://github.com/scipy/scipy/pull/15109): MAINT: remove NaiveRatioUniforms from scipy.stats
  - [\#15111](https://github.com/scipy/scipy/pull/15111): ENH: Add special.log\_expit and use it in stats.logistic
  - [\#15112](https://github.com/scipy/scipy/pull/15112): DOC: update 'Wn' definition in signal.butter
  - [\#15114](https://github.com/scipy/scipy/pull/15114): DOC: added Fermi-Dirac distribution by name
  - [\#15119](https://github.com/scipy/scipy/pull/15119): DOC: fix symlink to \`logistic.sf\` in \`stats.logistic\`
  - [\#15120](https://github.com/scipy/scipy/pull/15120): MAINT: Install \`sparse.linalg.\_eigen\` tests and fix test failures
  - [\#15123](https://github.com/scipy/scipy/pull/15123): MAINT: interpolate: move the \`sparse\` dependency from cython...
  - [\#15127](https://github.com/scipy/scipy/pull/15127): DOC: update linux build instructions to mention C++
  - [\#15134](https://github.com/scipy/scipy/pull/15134): DOC: Improve Lomb-Scargle example
  - [\#15135](https://github.com/scipy/scipy/pull/15135): ENH: Carlson symmetric elliptic integrals.
  - [\#15137](https://github.com/scipy/scipy/pull/15137): DOC: special: Add 'Examples' to multigammaln and roots\_legendre...
  - [\#15139](https://github.com/scipy/scipy/pull/15139): Use constrained\_layout in Lomb-Scargle example
  - [\#15142](https://github.com/scipy/scipy/pull/15142): ENH: stats.sampling: add SROU method
  - [\#15143](https://github.com/scipy/scipy/pull/15143): MAINT: Remove some unused imports.
  - [\#15144](https://github.com/scipy/scipy/pull/15144): BUG: Add missing import of 'errno' to runtests.py
  - [\#15157](https://github.com/scipy/scipy/pull/15157): ENH: rebased version of gh-14279
  - [\#15159](https://github.com/scipy/scipy/pull/15159): DOC: stats: fix a header in \`stats.sampling\` tutorial
  - [\#15161](https://github.com/scipy/scipy/pull/15161): DOC: 1.8.0 relnotes update
  - [\#15175](https://github.com/scipy/scipy/pull/15175): MAINT: 1.8.0 backports for relnotes and .gitignore
  - [\#15181](https://github.com/scipy/scipy/pull/15181): BUG: The pytest decorator for conditional skipping is 'skipif'
  - [\#15191](https://github.com/scipy/scipy/pull/15191): MAINT: version bounds before 1.8.0rc1
  - [\#15192](https://github.com/scipy/scipy/pull/15192): MAINT: Replace use of \`pytest.warns(None)\` with \`warnings.catch\_warnings\`
  - [\#15194](https://github.com/scipy/scipy/pull/15194): BUG: stats: Fix numerical issues of recipinvgauss
  - [\#15214](https://github.com/scipy/scipy/pull/15214): TST: sparse.linalg: store only PROPACK test matrices; generate...
  - [\#15220](https://github.com/scipy/scipy/pull/15220): BUG: sparse.linalg: Fix deprecation warnings.
  - [\#15225](https://github.com/scipy/scipy/pull/15225): Make 0th power of a sparse array/matrix return the identity with...
  - [\#15229](https://github.com/scipy/scipy/pull/15229): BUG: minimize should work with a scalar closes \#15228
  - [\#15232](https://github.com/scipy/scipy/pull/15232): BUG: Add rmul for sparse arrays
  - [\#15236](https://github.com/scipy/scipy/pull/15236): BLD: update setup.py for Python 3.10
  - [\#15248](https://github.com/scipy/scipy/pull/15248): MAINT: 1.8.0rc2 backports
  - [\#15249](https://github.com/scipy/scipy/pull/15249): FIX: PROPACK MKL compatibility
  - [\#15253](https://github.com/scipy/scipy/pull/15253): BUG: special: fix \`stdtr\` and \`stdtrit\` for infinite df
  - [\#15256](https://github.com/scipy/scipy/pull/15256): MAINT: use PEP440 vs. distutils
  - [\#15268](https://github.com/scipy/scipy/pull/15268): CI: pin setuptools to 59.6.0 and Pythran to 0.10.0 for Windows...
  - [\#15270](https://github.com/scipy/scipy/pull/15270): MAINT: rename \`moduleTNC\` extension back to \`\_moduleTNC\`
  - [\#15271](https://github.com/scipy/scipy/pull/15271): TST: slightly bump test tolerance for a new lobpcg test
  - [\#15275](https://github.com/scipy/scipy/pull/15275): MAINT: Fix imports in \`signal.\_signaltools\`
  - [\#15278](https://github.com/scipy/scipy/pull/15278): MAINT: remove non-default settings (except \`shallow\`) in \`.gitmodules\`
  - [\#15288](https://github.com/scipy/scipy/pull/15288): BLD Respect the --skip-build flag in setup.py
  - [\#15293](https://github.com/scipy/scipy/pull/15293): BUG: fix Hausdorff int overflow
  - [\#15301](https://github.com/scipy/scipy/pull/15301): TST: update \`sparse.linalg\` tests for failures due to tolerances
  - [\#15318](https://github.com/scipy/scipy/pull/15318): BLD: update pyproject.toml to not pin numpy for aarch64 + PyPy
  - [\#15322](https://github.com/scipy/scipy/pull/15322): BLD: update minimum Pythran version to 0.10.0 for SciPy 1.8.0
  - [\#15323](https://github.com/scipy/scipy/pull/15323): MAINT: filter RuntimeWarnings in stats functions
  - [\#15328](https://github.com/scipy/scipy/pull/15328): MAINT: interpolate: csr\_matrix -\> csr\_array
  - [\#15331](https://github.com/scipy/scipy/pull/15331): BUG: stats.\_unuran: fix invalid attribute lookups
  - [\#15332](https://github.com/scipy/scipy/pull/15332): CI: pin numpy to 1.21.5 for the doc build on CircleCI
  - [\#15334](https://github.com/scipy/scipy/pull/15334): BUG: stats.\_unuran: fix remaining attribute lookup errors
  - [\#15335](https://github.com/scipy/scipy/pull/15335): CI: pin numpy to 1.21.5 in the Azure refguide check job
  - [\#15341](https://github.com/scipy/scipy/pull/15341): BUG: \`highs-ds\` returns memoryviews instead of np.arrays for...
  - [\#15397](https://github.com/scipy/scipy/pull/15397): BUG: ensured vendored pep440 is imported
  - [\#15416](https://github.com/scipy/scipy/pull/15416): BUG: Fix PyUFunc for wasm targets
  - [\#15418](https://github.com/scipy/scipy/pull/15418): MAINT: 1.8.0 rc3 backports round 1
  - [\#15421](https://github.com/scipy/scipy/pull/15421): BUG: stats: mode: fix negative axis issue with np.moveaxis instead...
  - [\#15432](https://github.com/scipy/scipy/pull/15432): MAINT: release branch PROPACK switch (default off)
  - [\#15515](https://github.com/scipy/scipy/pull/15515): MAINT: fix broken link and remove CI badges

---

1.8.1-notes.md

---

# SciPy 1.8.1 Release Notes

<div class="contents">

</div>

SciPy 1.8.1 is a bug-fix release with no new features compared to 1.8.0. Notably, usage of Pythran has been restored for Windows builds/binaries.

## Authors

  - Henry Schreiner

  - Maximilian Nöthe

  - Sebastian Berg (1)

  - Sameer Deshmukh (1) +

  - Niels Doucet (1) +

  - DWesl (4)

  - Isuru Fernando (1)

  - Ralf Gommers (4)

  - Matt Haberland (1)

  - Andrew Nelson (1)

  - Dimitri Papadopoulos Orfanos (1) +

  - Tirth Patel (3)

  - Tyler Reddy (46)

  - Pamphile Roy (7)

  - Niyas Sait (1) +

  - 8.  Vetinari (2)

  - Warren Weckesser (1)

A total of 17 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.8.1

  - [\#15258](https://github.com/scipy/scipy/issues/15258): BUG: sparse \`dot\` method should accept scalars
  - [\#15433](https://github.com/scipy/scipy/issues/15433): BUG: optimize: minimize: \`ValueError\` when \`np.all(lb==ub)\`
  - [\#15539](https://github.com/scipy/scipy/issues/15539): BUG: Questionable macOS wheel contents
  - [\#15543](https://github.com/scipy/scipy/issues/15543): REL: list contributors using GitHub handles
  - [\#15552](https://github.com/scipy/scipy/issues/15552): BUG: MacOS universal2 wheels have two gfortran shared libraries,...
  - [\#15636](https://github.com/scipy/scipy/issues/15636): BUG: DOCS incorrect \`source\` link on docs
  - [\#15678](https://github.com/scipy/scipy/issues/15678): BUG: scipy.stats.skew does not work with scipy.stats.bootstrap
  - [\#16174](https://github.com/scipy/scipy/issues/16174): Failure of \`TestCorrelateComplex.test\_rank0\` in CI with NumPy...

### Pull requests for 1.8.1

  - [\#15167](https://github.com/scipy/scipy/pull/15167): CI: make sure CI stays on VS2019 unless changed explicitly
  - [\#15306](https://github.com/scipy/scipy/pull/15306): Revert "BLD Respect the --skip-build flag in setup.py"
  - [\#15504](https://github.com/scipy/scipy/pull/15504): MAINT: np.all(lb == ub) for optimize.minimize
  - [\#15530](https://github.com/scipy/scipy/pull/15530): REL: prep for SciPy 1.8.1
  - [\#15531](https://github.com/scipy/scipy/pull/15531): \[BUG\] Fix importing scipy.lib.\_pep440
  - [\#15558](https://github.com/scipy/scipy/pull/15558): CI: re-enable Pythran in Azure Windows CI jobs
  - [\#15566](https://github.com/scipy/scipy/pull/15566): BUG: fix error message
  - [\#15580](https://github.com/scipy/scipy/pull/15580): BUG: Avoid C Preprocessor symbol in \_hypotests\_pythran.py.
  - [\#15614](https://github.com/scipy/scipy/pull/15614): REL: filter out @ in authors name and add count
  - [\#15637](https://github.com/scipy/scipy/pull/15637): DOC, MAINT: fix links to wrapped functions and SciPy's distributions
  - [\#15669](https://github.com/scipy/scipy/pull/15669): BUG: stats: fix a bug in UNU.RAN error handler
  - [\#15691](https://github.com/scipy/scipy/pull/15691): MAINT: stats: bootstrap: fix bug with \`method="BCa"\` when \`statistic\`...
  - [\#15798](https://github.com/scipy/scipy/pull/15798): MAINT,BUG: stats: update to UNU.RAN 1.9.0
  - [\#15870](https://github.com/scipy/scipy/pull/15870): TST: signal: Convert a test with 'assert\_array\_less' to 'less...
  - [\#15910](https://github.com/scipy/scipy/pull/15910): make sure CI stays on VS2019 unless changed explicitly
  - [\#15926](https://github.com/scipy/scipy/pull/15926): MAINT: 1.8.1 backports/prep
  - [\#16035](https://github.com/scipy/scipy/pull/16035): BUG: allow scalar input to the \`.dot\` method of sparse matrices
  - [\#16041](https://github.com/scipy/scipy/pull/16041): MAINT: add include dir explicitly for PROPACK to build with classic...
  - [\#16139](https://github.com/scipy/scipy/pull/16139): WIP, BLD, MAINT: git security/version shim
  - [\#16152](https://github.com/scipy/scipy/pull/16152): TST: Fortify invalid-value warning filters to small changes in...
  - [\#16155](https://github.com/scipy/scipy/pull/16155): MAINT: correct wrong license of Biasedurn
  - [\#16158](https://github.com/scipy/scipy/pull/16158): MAINT: better UNU.RAN licensing information
  - [\#16163](https://github.com/scipy/scipy/pull/16163): MAINT: update UNU.RAN copyright information
  - [\#16172](https://github.com/scipy/scipy/pull/16172): CI: pin Pip to 22.0.4 to avoid issues with \`--no-build-isolation\`
  - [\#16175](https://github.com/scipy/scipy/pull/16175): TST: fix test failure due to changes in numpy scalar behavior.

---

1.9.0-notes.md

---

# SciPy 1.9.0 Release Notes

<div class="contents">

</div>

SciPy 1.9.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.9.x branch, and on adding new features on the main branch.

This release requires Python 3.8-3.11 and NumPy 1.18.5 or greater.

For running on PyPy, PyPy3 6.0+ is required.

## Highlights of this release

  - We have modernized our build system to use `meson`, substantially improving our build performance, and providing better build-time configuration and cross-compilation support,
  - Added <span class="title-ref">scipy.optimize.milp</span>, new function for mixed-integer linear programming,
  - Added <span class="title-ref">scipy.stats.fit</span> for fitting discrete and continuous distributions to data,
  - Tensor-product spline interpolation modes were added to <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span>,
  - A new global optimizer (DIviding RECTangles algorithm) <span class="title-ref">scipy.optimize.direct</span>.

## New features

### <span class="title-ref">scipy.interpolate</span> improvements

  - Speed up the `RBFInterpolator` evaluation with high dimensional interpolants.
  - Added new spline based interpolation methods for <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span> and its tutorial.
  - <span class="title-ref">scipy.interpolate.RegularGridInterpolator</span> and <span class="title-ref">scipy.interpolate.interpn</span> now accept descending ordered points.
  - `RegularGridInterpolator` now handles length-1 grid axes.
  - The `BivariateSpline` subclasses have a new method `partial_derivative` which constructs a new spline object representing a derivative of an original spline. This mirrors the corresponding functionality for univariate splines, `splder` and `BSpline.derivative`, and can substantially speed up repeated evaluation of derivatives.

### <span class="title-ref">scipy.linalg</span> improvements

  - <span class="title-ref">scipy.linalg.expm</span> now accepts nD arrays. Its speed is also improved.
  - Minimum required LAPACK version is bumped to `3.7.1`.

### <span class="title-ref">scipy.fft</span> improvements

  - Added `uarray` multimethods for <span class="title-ref">scipy.fft.fht</span> and <span class="title-ref">scipy.fft.ifht</span> to allow provision of third party backend implementations such as those recently added to CuPy.

### <span class="title-ref">scipy.optimize</span> improvements

  - A new global optimizer, <span class="title-ref">scipy.optimize.direct</span> (DIviding RECTangles algorithm) was added. For problems with inexpensive function evaluations, like the ones in the SciPy benchmark suite, `direct` is competitive with the best other solvers in SciPy (`dual_annealing` and `differential_evolution`) in terms of execution time. See [gh-14300](https://github.com/scipy/scipy/pull/14300) for more details.
  - Add a `full_output` parameter to <span class="title-ref">scipy.optimize.curve\_fit</span> to output additional solution information.
  - Add a `integrality` parameter to <span class="title-ref">scipy.optimize.differential\_evolution</span>, enabling integer constraints on parameters.
  - Add a `vectorized` parameter to call a vectorized objective function only once per iteration. This can improve minimization speed by reducing interpreter overhead from the multiple objective function calls.
  - The default method of <span class="title-ref">scipy.optimize.linprog</span> is now `'highs'`.
  - Added <span class="title-ref">scipy.optimize.milp</span>, new function for mixed-integer linear programming.
  - Added Newton-TFQMR method to `newton_krylov`.
  - Added support for the `Bounds` class in `shgo` and `dual_annealing` for a more uniform API across <span class="title-ref">scipy.optimize</span>.
  - Added the `vectorized` keyword to `differential_evolution`.
  - `approx_fprime` now works with vector-valued functions.

### <span class="title-ref">scipy.signal</span> improvements

  - The new window function <span class="title-ref">scipy.signal.windows.kaiser\_bessel\_derived</span> was added to compute the Kaiser-Bessel derived window.
  - Single-precision `hilbert` operations are now faster as a result of more consistent `dtype` handling.

### <span class="title-ref">scipy.sparse</span> improvements

  - Add a `copy` parameter to <span class="title-ref">scipy.sparse.csgraph.laplacian</span>. Using inplace computation with `copy=False` reduces the memory footprint.
  - Add a `dtype` parameter to <span class="title-ref">scipy.sparse.csgraph.laplacian</span> for type casting.
  - Add a `symmetrized` parameter to <span class="title-ref">scipy.sparse.csgraph.laplacian</span> to produce symmetric Laplacian for directed graphs.
  - Add a `form` parameter to <span class="title-ref">scipy.sparse.csgraph.laplacian</span> taking one of the three values: `array`, or `function`, or `lo` determining the format of the output Laplacian:
      - `array` is a numpy array (backward compatible default);
    \* `function` is a pointer to a lambda-function evaluating the Laplacian-vector or Laplacian-matrix product;
      - `lo` results in the format of the `LinearOperator`.

### <span class="title-ref">scipy.sparse.linalg</span> improvements

  - `lobpcg` performance improvements for small input cases.

### <span class="title-ref">scipy.spatial</span> improvements

  - Add an `order` parameter to <span class="title-ref">scipy.spatial.transform.Rotation.from\_quat</span> and <span class="title-ref">scipy.spatial.transform.Rotation.as\_quat</span> to specify quaternion format.

### <span class="title-ref">scipy.stats</span> improvements

  - <span class="title-ref">scipy.stats.monte\_carlo\_test</span> performs one-sample Monte Carlo hypothesis tests to assess whether a sample was drawn from a given distribution. Besides reproducing the results of hypothesis tests like <span class="title-ref">scipy.stats.ks\_1samp</span>, <span class="title-ref">scipy.stats.normaltest</span>, and <span class="title-ref">scipy.stats.cramervonmises</span> without small sample size limitations, it makes it possible to perform similar tests using arbitrary statistics and distributions.
  - Several <span class="title-ref">scipy.stats</span> functions support new `axis` (integer or tuple of integers) and `nan_policy` ('raise', 'omit', or 'propagate'), and `keepdims` arguments. These functions also support masked arrays as inputs, even if they do not have a <span class="title-ref">scipy.stats.mstats</span> counterpart. Edge cases for multidimensional arrays, such as when axis-slices have no unmasked elements or entire inputs are of size zero, are handled consistently.
  - Add a `weights` parameter to <span class="title-ref">scipy.stats.hmean</span>.
  - Several improvements have been made to <span class="title-ref">scipy.stats.levy\_stable</span>. Substantial improvement has been made for numerical evaluation of the pdf and cdf, resolving \[\#12658\](<https://github.com/scipy/scipy/issues/12658>) and \[\#14944\](<https://github.com/scipy/scipy/issues/14994>). The improvement is particularly dramatic for stability parameter `alpha` close to or equal to 1 and for `alpha` below but approaching its maximum value of 2. The alternative fast Fourier transform based method for pdf calculation has also been updated to use the approach of Wang and Zhang from their 2008 conference paper *Simpson’s rule based FFT method to compute densities of stable distribution*, making this method more competitive with the default method. In addition, users now have the option to change the parametrization of the Levy Stable distribution to Nolan's "S0" parametrization which is used internally by SciPy's pdf and cdf implementations. The "S0" parametrization is described in Nolan's paper \[*Numerical calculation of stable densities and distribution functions*\](<https://doi.org/10.1080/15326349708807450>) upon which SciPy's implementation is based. "S0" has the advantage that `delta` and `gamma` are proper location and scale parameters. With `delta` and `gamma` fixed, the location and scale of the resulting distribution remain unchanged as `alpha` and `beta` change. This is not the case for the default "S1" parametrization. Finally, more options have been exposed to allow users to trade off between runtime and accuracy for both the default and FFT methods of pdf and cdf calculation. More information can be found in the documentation here (to be linked).
  - Added <span class="title-ref">scipy.stats.fit</span> for fitting discrete and continuous distributions to data.
  - The methods `"pearson"` and `"tippet"` from <span class="title-ref">scipy.stats.combine\_pvalues</span> have been fixed to return the correct p-values, resolving \[\#15373\](<https://github.com/scipy/scipy/issues/15373>). In addition, the documentation for <span class="title-ref">scipy.stats.combine\_pvalues</span> has been expanded and improved.
  - Unlike other reduction functions, `stats.mode` didn't consume the axis being operated on and failed for negative axis inputs. Both the bugs have been fixed. Note that `stats.mode` will now consume the input axis and return an ndarray with the `axis` dimension removed.
  - Replaced implementation of <span class="title-ref">scipy.stats.ncf</span> with the implementation from Boost for improved reliability.
  - Add a <span class="title-ref">bits</span> parameter to <span class="title-ref">scipy.stats.qmc.Sobol</span>. It allows to use from 0 to 64 bits to compute the sequence. Default is `None` which corresponds to 30 for backward compatibility. Using a higher value allow to sample more points. Note: `bits` does not affect the output dtype.
  - Add a <span class="title-ref">integers</span> method to <span class="title-ref">scipy.stats.qmc.QMCEngine</span>. It allows sampling integers using any QMC sampler.
  - Improved the fit speed and accuracy of `stats.pareto`.
  - Added `qrvs` method to `NumericalInversePolynomial` to match the situation for `NumericalInverseHermite`.
  - Faster random variate generation for `gennorm` and `nakagami`.
  - `lloyd_centroidal_voronoi_tessellation` has been added to allow improved sample distributions via iterative application of Voronoi diagrams and centering operations
  - Add <span class="title-ref">scipy.stats.qmc.PoissonDisk</span> to sample using the Poisson disk sampling method. It guarantees that samples are separated from each other by a given `radius`.
  - Add <span class="title-ref">scipy.stats.pmean</span> to calculate the weighted power mean also called generalized mean.

## Deprecated features

  - Due to collision with the shape parameter `n` of several distributions, use of the distribution `moment` method with keyword argument `n` is deprecated. Keyword `n` is replaced with keyword `order`.
  - Similarly, use of the distribution `interval` method with keyword arguments `alpha` is deprecated. Keyword `alpha` is replaced with keyword `confidence`.
  - The `'simplex'`, `'revised simplex'`, and `'interior-point'` methods of <span class="title-ref">scipy.optimize.linprog</span> are deprecated. Methods `highs`, `highs-ds`, or `highs-ipm` should be used in new code.
  - Support for non-numeric arrays has been deprecated from `stats.mode`. `pandas.DataFrame.mode` can be used instead.
  - The function <span class="title-ref">spatial.distance.kulsinski</span> has been deprecated in favor of <span class="title-ref">spatial.distance.kulczynski1</span>.
  - The `maxiter` keyword of the truncated Newton (TNC) algorithm has been deprecated in favour of `maxfun`.
  - The `vertices` keyword of `Delauney.qhull` now raises a DeprecationWarning, after having been deprecated in documentation only for a long time.
  - The `extradoc` keyword of `rv_continuous`, `rv_discrete` and `rv_sample` now raises a DeprecationWarning, after having been deprecated in documentation only for a long time.

## Expired Deprecations

There is an ongoing effort to follow through on long-standing deprecations. The following previously deprecated features are affected:

  - Object arrays in sparse matrices now raise an error.
  - Inexact indices into sparse matrices now raise an error.
  - Passing `radius=None` to <span class="title-ref">scipy.spatial.SphericalVoronoi</span> now raises an error (not adding `radius` defaults to 1, as before).
  - Several BSpline methods now raise an error if inputs have `ndim > 1`.
  - The `_rvs` method of statistical distributions now requires a `size` parameter.
  - Passing a `fillvalue` that cannot be cast to the output type in <span class="title-ref">scipy.signal.convolve2d</span> now raises an error.
  - <span class="title-ref">scipy.spatial.distance</span> now enforces that the input vectors are one-dimensional.
  - Removed `stats.itemfreq`.
  - Removed `stats.median_absolute_deviation`.
  - Removed `n_jobs` keyword argument and use of `k=None` from `kdtree.query`.
  - Removed `right` keyword from `interpolate.PPoly.extend`.
  - Removed `debug` keyword from `scipy.linalg.solve_*`.
  - Removed class `_ppform` `scipy.interpolate`.
  - Removed BSR methods `matvec` and `matmat`.
  - Removed `mlab` truncation mode from `cluster.dendrogram`.
  - Removed `cluster.vq.py_vq2`.
  - Removed keyword arguments `ftol` and `xtol` from `optimize.minimize(method='Nelder-Mead')`.
  - Removed `signal.windows.hanning`.
  - Removed LAPACK `gegv` functions from `linalg`; this raises the minimally required LAPACK version to 3.7.1.
  - Removed `spatial.distance.matching`.
  - Removed the alias `scipy.random` for `numpy.random`.
  - Removed docstring related functions from `scipy.misc` (`docformat`, `inherit_docstring_from`, `extend_notes_in_docstring`, `replace_notes_in_docstring`, `indentcount_lines`, `filldoc`, `unindent_dict`, `unindent_string`).
  - Removed `linalg.pinv2`.

## Backwards incompatible changes

  - Several <span class="title-ref">scipy.stats</span> functions now convert `np.matrix` to `np.ndarray`s before the calculation is performed. In this case, the output will be a scalar or `np.ndarray` of appropriate shape rather than a 2D `np.matrix`. Similarly, while masked elements of masked arrays are still ignored, the output will be a scalar or `np.ndarray` rather than a masked array with `mask=False`.
  - The default method of <span class="title-ref">scipy.optimize.linprog</span> is now `'highs'`, not `'interior-point'` (which is now deprecated), so callback functions and some options are no longer supported with the default method. With the default method, the `x` attribute of the returned `OptimizeResult` is now `None` (instead of a non-optimal array) when an optimal solution cannot be found (e.g. infeasible problem).
  - For <span class="title-ref">scipy.stats.combine\_pvalues</span>, the sign of the test statistic returned for the method `"pearson"` has been flipped so that higher values of the statistic now correspond to lower p-values, making the statistic more consistent with those of the other methods and with the majority of the literature.
  - <span class="title-ref">scipy.linalg.expm</span> due to historical reasons was using the sparse implementation and thus was accepting sparse arrays. Now it only works with nDarrays. For sparse usage, <span class="title-ref">scipy.sparse.linalg.expm</span> needs to be used explicitly.
  - The definition of <span class="title-ref">scipy.stats.circvar</span> has reverted to the one that is standard in the literature; note that this is not the same as the square of <span class="title-ref">scipy.stats.circstd</span>.
  - Remove inheritance to <span class="title-ref">QMCEngine</span> in <span class="title-ref">MultinomialQMC</span> and <span class="title-ref">MultivariateNormalQMC</span>. It removes the methods <span class="title-ref">fast\_forward</span> and <span class="title-ref">reset</span>.
  - Init of <span class="title-ref">MultinomialQMC</span> now require the number of trials with <span class="title-ref">n\_trials</span>. Hence, <span class="title-ref">MultinomialQMC.random</span> output has now the correct shape `(n, pvals)`.
  - Several function-specific warnings (`F_onewayConstantInputWarning`, `F_onewayBadInputSizesWarning`, `PearsonRConstantInputWarning`, `PearsonRNearConstantInputWarning`, `SpearmanRConstantInputWarning`, and `BootstrapDegenerateDistributionWarning`) have been replaced with more general warnings.

## Other changes

  - A draft developer CLI is available for SciPy, leveraging the `doit`, `click` and `rich-click` tools. For more details, see \[gh-15959\](<https://github.com/scipy/scipy/pull/15959>).
  - The SciPy contributor guide has been reorganized and updated (see \[\#15947\](<https://github.com/scipy/scipy/pull/15947>) for details).
  - QUADPACK Fortran routines in <span class="title-ref">scipy.integrate</span>, which power <span class="title-ref">scipy.integrate.quad</span>, have been marked as <span class="title-ref">recursive</span>. This should fix rare issues in multivariate integration (<span class="title-ref">nquad</span> and friends) and obviate the need for compiler-specific compile flags (<span class="title-ref">/recursive</span> for ifort etc). Please file an issue if this change turns out problematic for you. This is also true for `FITPACK` routines in <span class="title-ref">scipy.interpolate</span>, which power `splrep`, `splev` etc., and `*UnivariateSpline` and `*BivariateSpline` classes.
  - the `USE_PROPACK` environment variable has been renamed to `SCIPY_USE_PROPACK`; setting to a non-zero value will enable the usage of the `PROPACK` library as before
  - Building SciPy on windows with MSVC now requires at least the vc142 toolset (available in Visual Studio 2019 and higher).

### Lazy access to subpackages

Before this release, all subpackages of SciPy (<span class="title-ref">cluster</span>, <span class="title-ref">fft</span>, <span class="title-ref">ndimage</span>, etc.) had to be explicitly imported. Now, these subpackages are lazily loaded as soon as they are accessed, so that the following is possible (if desired for interactive use, it's not actually recommended for code, see \[scipy-api\](\#scipy-api)): `import scipy as sp; sp.fft.dct([1, 2, 3])`. Advantages include: making it easier to navigate SciPy in interactive terminals, reducing subpackage import conflicts (which before required `import networkx.linalg as nla; import scipy.linalg as sla`), and avoiding repeatedly having to update imports during teaching & experimentation. Also see \[the related community specification document\](<https://scientific-python.org/specs/spec-0001/>).

### SciPy switched to Meson as its build system

This is the first release that ships with \[Meson\](<https://mesonbuild.com>) as the build system. When installing with `pip` or `pypa/build`, Meson will be used (invoked via the `meson-python` build hook). This change brings significant benefits - most importantly much faster build times, but also better support for cross-compilation and cleaner build logs.

\> **Note** \> This release still ships with support for `numpy.distutils`-based builds as well. Those can be invoked through the `setup.py` command-line interface (e.g., `python setup.py install`). It is planned to remove `numpy.distutils` support before the 1.10.0 release.

When building from source, a number of things have changed compared to building with `numpy.distutils`:

  - New build dependencies: `meson`, `ninja`, and `pkg-config`. `setuptools` and `wheel` are no longer needed.
  - BLAS and LAPACK libraries that are supported haven't changed, however the discovery mechanism has: that is now using `pkg-config` instead of hardcoded paths or a `site.cfg` file.
  - The build defaults to using OpenBLAS. See \[blas-lapack-selection\](\#blas-lapack-selection) for details.

The two CLIs that can be used to build wheels are `pip` and `build`. In addition, the SciPy repo contains a `python dev.py` CLI for any kind of development task (see its `--help` for details). For a comparison between old (`distutils`) and new (`meson`) build commands, see \[distutils-meson-equivalents\](\#distutils-meson-equivalents).

For more information on the introduction of Meson support in SciPy, see [gh-13615](https://github.com/scipy/scipy/issues/13615) and [this blog post](https://labs.quansight.org/blog/2021/07/moving-scipy-to-meson/).

## Authors

  - endolith (12)

  - h-vetinari (11)

  - Caio Agiani (2) +

  - Emmy Albert (1) +

  - Joseph Albert (1)

  - Tania Allard (3)

  - Carsten Allefeld (1) +

  - Kartik Anand (1) +

  - Virgile Andreani (2) +

  - Weh Andreas (1) +

  - Francesco Andreuzzi (5) +

  - Kian-Meng Ang (2) +

  - Gerrit Ansmann (1)

  - Ar-Kareem (1) +

  - Shehan Atukorala (1) +

  - avishai231 (1) +

  - Blair Azzopardi (1)

  - Sayantika Banik (2) +

  - Ross Barnowski (9)

  - Christoph Baumgarten (3)

  - Nickolai Belakovski (1)

  - Peter Bell (9)

  - Sebastian Berg (3)

  - Bharath (1) +

  - bobcatCA (2) +

  - boussoffara (2) +

  - Islem BOUZENIA (1) +

  - Jake Bowhay (41) +

  - Matthew Brett (11)

  - Dietrich Brunn (2) +

  - Michael Burkhart (2) +

  - Evgeni Burovski (96)

  - Matthias Bussonnier (20)

  - Dominic C (1)

  - Cameron (1) +

  - CJ Carey (3)

  - Thomas A Caswell (2)

  - Ali Cetin (2) +

  - Hood Chatham (5) +

  - Klesk Chonkin (1)

  - Craig Citro (1) +

  - Dan Cogswell (1) +

  - Luigi Cruz (1) +

  - Anirudh Dagar (5)

  - Brandon David (1)

  - deepakdinesh1123 (1) +

  - Denton DeLoss (1) +

  - derbuihan (2) +

  - Sameer Deshmukh (13) +

  - Niels Doucet (1) +

  - DWesl (8)

  - eytanadler (30) +

  - Thomas J. Fan (5)

  - Isuru Fernando (3)

  - Joseph Fox-Rabinovitz (1)

  - Ryan Gibson (4) +

  - Ralf Gommers (327)

  - Srinivas Gorur-Shandilya (1) +

  - Alex Griffing (2)

  - Matt Haberland (461)

  - Tristan Hearn (1) +

  - Jonathan Helgert (1) +

  - Samuel Hinton (1) +

  - Jake (1) +

  - Stewart Jamieson (1) +

  - Jan-Hendrik Müller (1)

  - Yikun Jiang (1) +

  - JuliaMelle01 (1) +

  - jyuv (12) +

  - Toshiki Kataoka (1)

  - Chris Keefe (1) +

  - Robert Kern (4)

  - Andrew Knyazev (11)

  - Matthias Koeppe (4) +

  - Sergey Koposov (1)

  - Volodymyr Kozachynskyi (1) +

  - Yotaro Kubo (2) +

  - Jacob Lapenna (1) +

  - Peter Mahler Larsen (8)

  - Eric Larson (4)

  - Laurynas Mikšys (1) +

  - Antony Lee (1)

  - Gregory R. Lee (2)

  - lerichi (1) +

  - Tim Leslie (2)

  - 16. 12. Lim (1)

  - Smit Lunagariya (43)

  - lutefiskhotdish (1) +

  - Cong Ma (12)

  - Syrtis Major (1)

  - Nicholas McKibben (18)

  - Melissa Weber Mendonça (10)

  - Mark Mikofski (1)

  - Jarrod Millman (13)

  - Harsh Mishra (6)

  - ML-Nielsen (3) +

  - Matthew Murray (1) +

  - Andrew Nelson (50)

  - Dimitri Papadopoulos Orfanos (1) +

  - Evgueni Ovtchinnikov (2) +

  - Sambit Panda (1)

  - Nick Papior (2)

  - Tirth Patel (43)

  - Petar Mlinarić (1)

  - petroselo (1) +

  - Ilhan Polat (64)

  - Anthony Polloreno (1)

  - Amit Portnoy (1) +

  - Quentin Barthélemy (9)

  - Patrick N. Raanes (1) +

  - Tyler Reddy (185)

  - Pamphile Roy (199)

  - Vivek Roy (2) +

  - sabonerune (1) +

  - Niyas Sait (2) +

  - Atsushi Sakai (25)

  - Mazen Sayed (1) +

  - Eduardo Schettino (5) +

  - Daniel Schmitz (6) +

  - Eli Schwartz (4) +

  - SELEE (2) +

  - Namami Shanker (4)

  - siddhantwahal (1) +

  - Gagandeep Singh (8)

  - Soph (1) +

  - Shivnaren Srinivasan (1) +

  - Scott Staniewicz (1) +

  - Leo C. Stein (4)

  - Albert Steppi (7)

  - Christopher Strickland (1) +

  - Kai Striega (4)

  - Søren Fuglede Jørgensen (1)

  - Aleksandr Tagilov (1) +

  - Masayuki Takagi (1) +

  - Sai Teja (1) +

  - Ewout ter Hoeven (2) +

  - Will Tirone (2)

  - Bas van Beek (7)

  - Dhruv Vats (1)

  - Arthur Volant (1)

  - Samuel Wallan (5)

  - Stefan van der Walt (8)

  - Warren Weckesser (84)

  - Anreas Weh (1)

  - Nils Werner (1)

  - Aviv Yaish (1) +

  - Dowon Yi (1)

  - Rory Yorke (1)

  - Yosshi999 (1) +

  - yuanx749 (2) +

  - Gang Zhao (23)

  - ZhihuiChen0903 (1)

  - Pavel Zun (1) +

  - David Zwicker (1) +

A total of 154 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

## Issues closed for 1.9.0

  - [\#1884](https://github.com/scipy/scipy/issues/1884): stats distributions fit problems (Trac \#1359)
  - [\#2047](https://github.com/scipy/scipy/issues/2047): derivatives() method is missing in BivariateSpline (Trac \#1522)
  - [\#2071](https://github.com/scipy/scipy/issues/2071): TST: stats: \`check\_sample\_var\` should be two-sided (Trac \#1546)
  - [\#2414](https://github.com/scipy/scipy/issues/2414): stats binom at non-integer n (Trac \#1895)
  - [\#2623](https://github.com/scipy/scipy/issues/2623): stats.distributions statistical power of test suite
  - [\#2625](https://github.com/scipy/scipy/issues/2625): wilcoxon() function does not return z-statistic
  - [\#2650](https://github.com/scipy/scipy/issues/2650): (2D) Interpolation functions should work with complex numbers
  - [\#2834](https://github.com/scipy/scipy/issues/2834): ksone fitting
  - [\#2868](https://github.com/scipy/scipy/issues/2868): nan and stats.percentileofscore
  - [\#2877](https://github.com/scipy/scipy/issues/2877): distributions.ncf numerical issues
  - [\#2993](https://github.com/scipy/scipy/issues/2993): optimize.approx\_fprime & jacobians
  - [\#3214](https://github.com/scipy/scipy/issues/3214): stats distributions ppf-cdf roundtrip
  - [\#3758](https://github.com/scipy/scipy/issues/3758): discrete distribution defined by \`values\` with non-integer...
  - [\#4130](https://github.com/scipy/scipy/issues/4130): BUG: stats: fisher\_exact returns incorrect p-value
  - [\#4897](https://github.com/scipy/scipy/issues/4897): expm is 10x as slow as matlab according to <http://stackoverflow.com/questions/30048315>
  - [\#5103](https://github.com/scipy/scipy/issues/5103): Docs suggest scipy.sparse.linalg.expm\_multiply supports LinearOperator...
  - [\#5266](https://github.com/scipy/scipy/issues/5266): Deprecated routines in Netlib LAPACK \>3.5.0
  - [\#5890](https://github.com/scipy/scipy/issues/5890): Undefined behavior when using scipy.interpolate.RegularGridInterpolator...
  - [\#5982](https://github.com/scipy/scipy/issues/5982): Keyword collision in scipy.stats.levy\_stable.interval
  - [\#6472](https://github.com/scipy/scipy/issues/6472): scipy.stats.invwishart does not check if scale matrix is symmetric
  - [\#6551](https://github.com/scipy/scipy/issues/6551): BUG: stats: inconsistency in docs and behavior of gmean and hmean
  - [\#6624](https://github.com/scipy/scipy/issues/6624): incorrect handling of nan by RegularGridInterpolator
  - [\#6882](https://github.com/scipy/scipy/issues/6882): Certain recursive scipy.integrate.quad (e.g. dblquad and nquad)...
  - [\#7469](https://github.com/scipy/scipy/issues/7469): Misleading interp2d documentation
  - [\#7560](https://github.com/scipy/scipy/issues/7560): Should RegularGridInterpolator support length 1 dimensions?
  - [\#8850](https://github.com/scipy/scipy/issues/8850): Scipy.interpolate.griddata Error : Exception ignored in: 'scipy.spatial.qhull.\_Qhull.\_\_dealloc\_\_'
  - [\#8928](https://github.com/scipy/scipy/issues/8928): BUG: scipy.stats.norm wrong expected value of function when loc...
  - [\#9213](https://github.com/scipy/scipy/issues/9213): \_\_STDC\_VERSION\_\_ check in C++ code
  - [\#9231](https://github.com/scipy/scipy/issues/9231): infinite loop in stats.fisher\_exact
  - [\#9313](https://github.com/scipy/scipy/issues/9313): geometric distribution stats.geom returns negative values if...
  - [\#9524](https://github.com/scipy/scipy/issues/9524): interpn returns nan with perfectly valid data
  - [\#9591](https://github.com/scipy/scipy/issues/9591): scipy.interpolate.interp1d with kind=“previous” doesn't extrapolate...
  - [\#9815](https://github.com/scipy/scipy/issues/9815): stats.mode's nan\_policy 'propagate' not working?
  - [\#9944](https://github.com/scipy/scipy/issues/9944): documentation for \`scipy.interpolate.RectBivariateSpline\` is...
  - [\#9999](https://github.com/scipy/scipy/issues/9999): BUG: malloc() calls in Cython and C that are not checked for...
  - [\#10096](https://github.com/scipy/scipy/issues/10096): Add literature reference for circstd (and circvar?)
  - [\#10446](https://github.com/scipy/scipy/issues/10446): RuntimeWarning: invalid value encountered in stats.genextreme
  - [\#10577](https://github.com/scipy/scipy/issues/10577): Additional discussion for scipy.stats roadmap
  - [\#10821](https://github.com/scipy/scipy/issues/10821): Errors with the Yeo-Johnson Transform that also Appear in Scikit-Learn
  - [\#10983](https://github.com/scipy/scipy/issues/10983): LOBPCG inefficinet when computing \> 20% of eigenvalues
  - [\#11145](https://github.com/scipy/scipy/issues/11145): unexpected SparseEfficiencyWarning at scipy.sparse.linalg.splu
  - [\#11406](https://github.com/scipy/scipy/issues/11406): scipy.sparse.linalg.svds (v1.4.1) on singular matrix does not...
  - [\#11447](https://github.com/scipy/scipy/issues/11447): scipy.interpolate.interpn: Handle ValueError('The points in dimension...
  - [\#11673](https://github.com/scipy/scipy/issues/11673): intlinprog: integer linear program solver
  - [\#11742](https://github.com/scipy/scipy/issues/11742): MAINT: stats: getting skewness alone takes 34000x longer than...
  - [\#11806](https://github.com/scipy/scipy/issues/11806): Unexpectedly poor results when distribution fitting with \`weibull\_min\`...
  - [\#11828](https://github.com/scipy/scipy/issues/11828): UnivariateSpline gives varying results when multithreaded on...
  - [\#11948](https://github.com/scipy/scipy/issues/11948): fitting discrete distributions
  - [\#12073](https://github.com/scipy/scipy/issues/12073): Add note in documentation
  - [\#12370](https://github.com/scipy/scipy/issues/12370): truncnorm.rvs is painfully slow on version 1.5.0rc2
  - [\#12456](https://github.com/scipy/scipy/issues/12456): Add generalized mean calculation
  - [\#12480](https://github.com/scipy/scipy/issues/12480): RectBivariateSpline derivative evaluator is slow
  - [\#12485](https://github.com/scipy/scipy/issues/12485): linprog returns an incorrect message
  - [\#12506](https://github.com/scipy/scipy/issues/12506): ENH: stats: one-sided p-values for statistical tests
  - [\#12545](https://github.com/scipy/scipy/issues/12545): stats.pareto.fit raises RuntimeWarning
  - [\#12548](https://github.com/scipy/scipy/issues/12548): scipy.stats.skew returning MaskedArray
  - [\#12633](https://github.com/scipy/scipy/issues/12633): Offer simpler development workflow?
  - [\#12658](https://github.com/scipy/scipy/issues/12658): scipy.stats.levy\_stable.pdf can be inaccurate and return nan
  - [\#12733](https://github.com/scipy/scipy/issues/12733): scipy.stats.truncnorm.cdf slow
  - [\#12838](https://github.com/scipy/scipy/issues/12838): Accept multiple matrices in \`scipy.linalg.expm\`
  - [\#12848](https://github.com/scipy/scipy/issues/12848): DOC: stats: multivariate distribution documentation issues
  - [\#12870](https://github.com/scipy/scipy/issues/12870): Levy Stable Random Variates Code has a typo
  - [\#12871](https://github.com/scipy/scipy/issues/12871): Levy Stable distribution uses parameterisation that is not location...
  - [\#13200](https://github.com/scipy/scipy/issues/13200): Errors made by scipy.optimize.linprog
  - [\#13462](https://github.com/scipy/scipy/issues/13462): Too many warnings and results objects in public API for scipy.stats
  - [\#13582](https://github.com/scipy/scipy/issues/13582): ENH: stats: \`rv\_continuous.stats\` with array shapes: use \`\_stats\`...
  - [\#13615](https://github.com/scipy/scipy/issues/13615): RFC: switch to Meson as a build system
  - [\#13632](https://github.com/scipy/scipy/issues/13632): stats.rv\_discrete is not checking that xk values are integers
  - [\#13655](https://github.com/scipy/scipy/issues/13655): MAINT: stats.rv\_generic: \`moment\` method falls back to \`\_munp\`...
  - [\#13689](https://github.com/scipy/scipy/issues/13689): Wilcoxon does not appropriately detect ties when mode=exact.
  - [\#13835](https://github.com/scipy/scipy/issues/13835): Change name of \`alpha\` parameter in \`interval()\` method
  - [\#13872](https://github.com/scipy/scipy/issues/13872): Add method details or reference to \`scipy.integrate.dblquad\`
  - [\#13912](https://github.com/scipy/scipy/issues/13912): Adding Poisson Disc sampling to QMC
  - [\#13996](https://github.com/scipy/scipy/issues/13996): Fisk distribution documentation typo
  - [\#14035](https://github.com/scipy/scipy/issues/14035): \`roots\_jacobi\` support for large parameter values
  - [\#14081](https://github.com/scipy/scipy/issues/14081): \`scipy.optimize.\_linprog\_simplex.\_apply\_pivot\` relies on asymmetric...
  - [\#14095](https://github.com/scipy/scipy/issues/14095): scipy.stats.norm.pdf takes too much time and memory
  - [\#14162](https://github.com/scipy/scipy/issues/14162): Thread safety RectBivariateSpline
  - [\#14267](https://github.com/scipy/scipy/issues/14267): BUG: online doc returns 404 - wrong \`reference\` in url
  - [\#14313](https://github.com/scipy/scipy/issues/14313): ks\_2samp: example description does not match example output
  - [\#14418](https://github.com/scipy/scipy/issues/14418): \`ttest\_ind\` for two sampled distributions with the same single...
  - [\#14455](https://github.com/scipy/scipy/issues/14455): Adds Mixed Integer Linear Programming from highs
  - [\#14462](https://github.com/scipy/scipy/issues/14462): Shapiro test returning negative p-value
  - [\#14471](https://github.com/scipy/scipy/issues/14471): methods 'revised simplex' and 'interior-point' are extremely...
  - [\#14505](https://github.com/scipy/scipy/issues/14505): \`Optimization converged to parameters that are outside the range\`...
  - [\#14527](https://github.com/scipy/scipy/issues/14527): Segmentation fault with KDTree
  - [\#14548](https://github.com/scipy/scipy/issues/14548): Add convention flag to quanternion in \`Scipy.spatial.transform.rotation.Rotation\`
  - [\#14565](https://github.com/scipy/scipy/issues/14565): optimize.minimize: Presence of callback causes method TNC to...
  - [\#14622](https://github.com/scipy/scipy/issues/14622): BUG: (sort of) mannwhitneyu hits max recursion limit with imbalanced...
  - [\#14645](https://github.com/scipy/scipy/issues/14645): ENH: MemoryError when trying to bootstrap with large amounts...
  - [\#14716](https://github.com/scipy/scipy/issues/14716): BUG: stats: The \`loguniform\` distribution is overparametrized.
  - [\#14731](https://github.com/scipy/scipy/issues/14731): BUG: Incorrect residual graph in scipy.sparse.csgraph.maximum\_flow
  - [\#14745](https://github.com/scipy/scipy/issues/14745): BUG: scipy.ndimage.convolve documentation is incorrect
  - [\#14750](https://github.com/scipy/scipy/issues/14750): ENH: Add one more derivative-free optimization method
  - [\#14753](https://github.com/scipy/scipy/issues/14753): Offer to collaborate on truncated normal estimation by minimax...
  - [\#14777](https://github.com/scipy/scipy/issues/14777): BUG: Wrong limit and no warning in stats.t for df=np.inf
  - [\#14793](https://github.com/scipy/scipy/issues/14793): BUG: Missing pairs in cKDTree.query\_pairs when coordinates contain...
  - [\#14861](https://github.com/scipy/scipy/issues/14861): BUG: unclear error message when all bounds are all equal for...
  - [\#14889](https://github.com/scipy/scipy/issues/14889): BUG: NumPy's \`random\` module should not be in the \`scipy\`...
  - [\#14914](https://github.com/scipy/scipy/issues/14914): CI job with code coverage is failing (yet again)
  - [\#14926](https://github.com/scipy/scipy/issues/14926): RegularGridInterpolator should be called RectilinearGridInterpolator
  - [\#14986](https://github.com/scipy/scipy/issues/14986): Prevent new Python versions from trying to install older releases...
  - [\#14994](https://github.com/scipy/scipy/issues/14994): BUG: Levy stable
  - [\#15009](https://github.com/scipy/scipy/issues/15009): BUG: scipy.stats.multiscale\_graphcorr p-values are computed differently...
  - [\#15059](https://github.com/scipy/scipy/issues/15059): BUG: documentation inconsistent with code for find\_peaks\_cwt
  - [\#15082](https://github.com/scipy/scipy/issues/15082): DOC: Sampling from the truncated normal
  - [\#15110](https://github.com/scipy/scipy/issues/15110): BUG: truncnorm.cdf returns incorrect values at tail
  - [\#15125](https://github.com/scipy/scipy/issues/15125): Deprecate \`scipy.spatial.distance.kulsinski\`
  - [\#15133](https://github.com/scipy/scipy/issues/15133): BUG: Log\_norm description is incorrect and produces incorrect...
  - [\#15150](https://github.com/scipy/scipy/issues/15150): BUG: RBFInterpolator is much slower than Rbf for vector data
  - [\#15172](https://github.com/scipy/scipy/issues/15172): BUG: special: High relative error in \`log\_ndtr\`
  - [\#15195](https://github.com/scipy/scipy/issues/15195): BUGS: stats: Tracking issue for distributions that warn and/or...
  - [\#15199](https://github.com/scipy/scipy/issues/15199): BUG: Error occured \`spsolve\_triangular\`
  - [\#15210](https://github.com/scipy/scipy/issues/15210): BUG: A sparse matrix raises a ValueError when \`\_\_rmul\_\_\` with...
  - [\#15245](https://github.com/scipy/scipy/issues/15245): MAINT: scipy.stats.\_levy\_stable should be treated as subpackage...
  - [\#15252](https://github.com/scipy/scipy/issues/15252): DOC: Multivariate normal CDF docstring typo
  - [\#15296](https://github.com/scipy/scipy/issues/15296): BUG: SciPy 1.7.x build failure on Cygwin
  - [\#15308](https://github.com/scipy/scipy/issues/15308): BUG: OpenBLAS 0.3.18 support
  - [\#15338](https://github.com/scipy/scipy/issues/15338): DOC: Rename \`\*args\` param in \`f\_oneway\` to \`\*samples\`
  - [\#15345](https://github.com/scipy/scipy/issues/15345): BUG: boschloo\_exact gives pvalue \> 1 (and sometimes nan)
  - [\#15368](https://github.com/scipy/scipy/issues/15368): build warnings for \`unuran\_wrapper.pyx\`
  - [\#15373](https://github.com/scipy/scipy/issues/15373): BUG: Tippett’s and Pearson’s method for combine\_pvalues are not...
  - [\#15415](https://github.com/scipy/scipy/issues/15415): \`integrate.quad\_vec\` missing documentation for \`limit\` parameter
  - [\#15456](https://github.com/scipy/scipy/issues/15456): Segfault in HiGHS code when building with Mingw-w64 on Windows
  - [\#15458](https://github.com/scipy/scipy/issues/15458): DOC: Documentation inaccuracy of scipy.interpolate.bisplev
  - [\#15488](https://github.com/scipy/scipy/issues/15488): ENH: missing examples for scipy.optimize in docs
  - [\#15507](https://github.com/scipy/scipy/issues/15507): BUG: scipy.optimize.linprog: the algorithm determines the problem...
  - [\#15508](https://github.com/scipy/scipy/issues/15508): BUG: Incorrect error message in multivariate\_normal
  - [\#15541](https://github.com/scipy/scipy/issues/15541): BUG: scipy.stats.powerlaw, why should x ∈ (0,1)? x can exceed...
  - [\#15551](https://github.com/scipy/scipy/issues/15551): MAINT: stats: deprecating non-numeric array support in \`stats.mode\`
  - [\#15568](https://github.com/scipy/scipy/issues/15568): BENCH/CI: Benchmark timeout
  - [\#15572](https://github.com/scipy/scipy/issues/15572): BUG: \`scipy.spatial.transform.rotation\`, wrong deprecation...
  - [\#15575](https://github.com/scipy/scipy/issues/15575): BUG: Tests failing for initial build \[arm64 machine\]
  - [\#15589](https://github.com/scipy/scipy/issues/15589): BUG: scipy.special.factorialk docstring inconsistent with behaviour
  - [\#15601](https://github.com/scipy/scipy/issues/15601): BUG: Scalefactors for \`signal.csd\` with \`average=='median'\`...
  - [\#15617](https://github.com/scipy/scipy/issues/15617): ENH: stats: all multivariate distributions should be freezable
  - [\#15631](https://github.com/scipy/scipy/issues/15631): BUG: stats.fit: intermittent failure in doctest
  - [\#15635](https://github.com/scipy/scipy/issues/15635): CI:ASK: Remove LaTeX doc builds?
  - [\#15638](https://github.com/scipy/scipy/issues/15638): DEV: \`dev.py\` missing PYTHONPATH when building doc
  - [\#15644](https://github.com/scipy/scipy/issues/15644): DOC: stats.ks\_1samp: incorrect commentary in examples
  - [\#15666](https://github.com/scipy/scipy/issues/15666): CI: CircleCI build\_docs failure on main
  - [\#15670](https://github.com/scipy/scipy/issues/15670): BUG: AssertionError in test\_\_dual\_annealing.py in test\_bounds\_class
  - [\#15689](https://github.com/scipy/scipy/issues/15689): BUG: default value of shape parameter in fit method of rv\_continuous...
  - [\#15692](https://github.com/scipy/scipy/issues/15692): CI: scipy.scipy (Main refguide\_asv\_check) failure in main
  - [\#15696](https://github.com/scipy/scipy/issues/15696): DOC: False information in docs - scipy.stats.ttest\_1samp
  - [\#15700](https://github.com/scipy/scipy/issues/15700): BUG: AssertionError in test\_propack.py
  - [\#15730](https://github.com/scipy/scipy/issues/15730): BUG: "terminate called after throwing an instance of 'std::out\_of\_range'"...
  - [\#15732](https://github.com/scipy/scipy/issues/15732): DEP: execute deprecation of inexact indices into sparse matrices
  - [\#15734](https://github.com/scipy/scipy/issues/15734): DEP: deal with deprecation of ndim \>1 in bspline
  - [\#15735](https://github.com/scipy/scipy/issues/15735): DEP: add actual DeprecationWarning for sym\_pos-keyword of scipy.linalg.solve
  - [\#15736](https://github.com/scipy/scipy/issues/15736): DEP: Remove \`debug\` keyword from \`[scipy.linalg.solve]()\*\`
  - [\#15737](https://github.com/scipy/scipy/issues/15737): DEP: Execute deprecation of pinv2
  - [\#15739](https://github.com/scipy/scipy/issues/15739): DEP: sharpen deprecation for \>1-dim inputs in optimize.minimize
  - [\#15740](https://github.com/scipy/scipy/issues/15740): DEP: Execute deprecation for squeezing input vectors in spatial.distance
  - [\#15741](https://github.com/scipy/scipy/issues/15741): DEP: remove spatial.distance.matching
  - [\#15742](https://github.com/scipy/scipy/issues/15742): DEP: raise if fillvalue cannot be cast to output type in \`signal.convolve2d\`
  - [\#15743](https://github.com/scipy/scipy/issues/15743): DEP: enforce radius for \`spatial.SphericalVoronoi\`
  - [\#15744](https://github.com/scipy/scipy/issues/15744): DEP: sharpen deprecation of dual\_annealing argument 'local\_search\_options'
  - [\#15745](https://github.com/scipy/scipy/issues/15745): DEP: remove signal.windows.hanning
  - [\#15746](https://github.com/scipy/scipy/issues/15746): DEP: remove k=None from KDTree.query
  - [\#15747](https://github.com/scipy/scipy/issues/15747): DEP: stats: remove support for \`\_rvs\` without \`size\` parameter
  - [\#15750](https://github.com/scipy/scipy/issues/15750): DEP: remove \`n\_jobs\` from kdtree
  - [\#15751](https://github.com/scipy/scipy/issues/15751): DEP: remove ftol/xtol from neldermead
  - [\#15752](https://github.com/scipy/scipy/issues/15752): DEP: remove right keyword from interpolate.PPoly.extend
  - [\#15753](https://github.com/scipy/scipy/issues/15753): DEP: remove \`\_ppform\`
  - [\#15754](https://github.com/scipy/scipy/issues/15754): DEP: Remove mlab mode from dendrogram
  - [\#15757](https://github.com/scipy/scipy/issues/15757): DEP: docstring-related deprecations
  - [\#15758](https://github.com/scipy/scipy/issues/15758): DEP: remove LAPACK \*gegv functions
  - [\#15759](https://github.com/scipy/scipy/issues/15759): DEP: remove old BSR methods
  - [\#15760](https://github.com/scipy/scipy/issues/15760): DEP: remove py\_vq2
  - [\#15761](https://github.com/scipy/scipy/issues/15761): DEP: remove stats.itemfreq
  - [\#15762](https://github.com/scipy/scipy/issues/15762): DEP: remove stats.median\_absolute\_deviation
  - [\#15773](https://github.com/scipy/scipy/issues/15773): BUG: iirfilter allows Wn\[1\] \< Wn\[0\] for band-pass and band-stop...
  - [\#15780](https://github.com/scipy/scipy/issues/15780): BUG: CI on Azure broken with PyTest 7.1
  - [\#15843](https://github.com/scipy/scipy/issues/15843): BUG: scipy.stats.brunnermunzel incorrectly returns nan for undocumented...
  - [\#15854](https://github.com/scipy/scipy/issues/15854): CI: Windows Meson job failing sometimes on OpenBLAS binary download
  - [\#15866](https://github.com/scipy/scipy/issues/15866): BUG/CI: Wrong python version used for tests labeled "Linux Tests...
  - [\#15871](https://github.com/scipy/scipy/issues/15871): BUG: stats: Test failure of \`TestTruncnorm.test\_moments\` on...
  - [\#15899](https://github.com/scipy/scipy/issues/15899): BUG: \_calc\_uniform\_order\_statistic\_medians documentation example...
  - [\#15927](https://github.com/scipy/scipy/issues/15927): BUG: Inconsistent handling of INF and NAN in signal.convolve
  - [\#15931](https://github.com/scipy/scipy/issues/15931): BUG: scipy/io/arff/tests/test\_arffread.py::TestNoData::test\_nodata...
  - [\#15960](https://github.com/scipy/scipy/issues/15960): BUG: Documentation Error in scipy.signal.lfilter
  - [\#15961](https://github.com/scipy/scipy/issues/15961): BUG: scipy.stats.beta and bernoulli fails with float32 inputs
  - [\#15962](https://github.com/scipy/scipy/issues/15962): Race condition in macOS Meson build between \`\_matfuncs\_expm\`...
  - [\#15987](https://github.com/scipy/scipy/issues/15987): CI: \`np.matrix\` deprecation warning
  - [\#16007](https://github.com/scipy/scipy/issues/16007): BUG: Confusing documentation in \`ttest\_ind\_from\_stats\`
  - [\#16011](https://github.com/scipy/scipy/issues/16011): BUG: typo in documentation for scipy.optimize.basinhopping
  - [\#16020](https://github.com/scipy/scipy/issues/16020): BUG: dev.py FileNotFoundError
  - [\#16027](https://github.com/scipy/scipy/issues/16027): jc should be (n-1)/2
  - [\#16031](https://github.com/scipy/scipy/issues/16031): BUG: scipy.sparse.linalg.norm does not work on sparse arrays
  - [\#16036](https://github.com/scipy/scipy/issues/16036): Missing \`f\` prefix on f-strings
  - [\#16054](https://github.com/scipy/scipy/issues/16054): Bug: Meson build with dev.py fails to detect SciPy with debian...
  - [\#16065](https://github.com/scipy/scipy/issues/16065): BUG: Gitpod build with \`python runtests.py\` fails; move to...
  - [\#16074](https://github.com/scipy/scipy/issues/16074): BUG: refguide check fails with \`numpydoc==1.3\`
  - [\#16081](https://github.com/scipy/scipy/issues/16081): CI, MAINT: minor refguide failure with stats.describe
  - [\#16121](https://github.com/scipy/scipy/issues/16121): DOC: scipy.interpolate.RegularGridInterpolator and interpn works...
  - [\#16162](https://github.com/scipy/scipy/issues/16162): BUG: curve\_fit gives wrong results with Pandas float32
  - [\#16171](https://github.com/scipy/scipy/issues/16171): BUG: scipy.stats.multivariate\_hypergeom.rvs raises ValueError...
  - [\#16219](https://github.com/scipy/scipy/issues/16219): \`TestSobol.test\_0dim\` failure on 32-bit Linux job
  - [\#16233](https://github.com/scipy/scipy/issues/16233): BUG: Memory leak in function \`sf\_error\` due to new reference...
  - [\#16254](https://github.com/scipy/scipy/issues/16254): DEP: add deprecation warning to \`maxiter\` kwarg in \`\_minimize\_tnc\`
  - [\#16292](https://github.com/scipy/scipy/issues/16292): BUG: compilation error: no matching constructor for initialization...
  - [\#16300](https://github.com/scipy/scipy/issues/16300): BLD: pip install build issue with meson in Ubuntu virtualenv
  - [\#16337](https://github.com/scipy/scipy/issues/16337): TST: stats/tests/test\_axis\_nan\_policy.py::test\_axis\_nan\_policy\_full...
  - [\#16347](https://github.com/scipy/scipy/issues/16347): TST, MAINT: 32-bit Linux test failures in wheels repo
  - [\#16358](https://github.com/scipy/scipy/issues/16358): TST, MAINT: test\_theilslopes\_warnings fails on 32-bit Windows
  - [\#16378](https://github.com/scipy/scipy/issues/16378): DOC: pydata-sphinx-theme v0.9 defaults to darkmode depending...
  - [\#16381](https://github.com/scipy/scipy/issues/16381): BUG: bootstrap get ValueError for paired statistic
  - [\#16382](https://github.com/scipy/scipy/issues/16382): BUG: truncnorm.fit does not fit correctly
  - [\#16403](https://github.com/scipy/scipy/issues/16403): MAINT: NumPy main will require a few updates due to new floating...
  - [\#16409](https://github.com/scipy/scipy/issues/16409): BUG: SIGSEGV in qhull when array type is wrong
  - [\#16418](https://github.com/scipy/scipy/issues/16418): BUG: breaking change: scipy.stats.mode returned value has changed...
  - [\#16419](https://github.com/scipy/scipy/issues/16419): BUG: scipy.stats.nbinom.logcdf returns wrong results when some...
  - [\#16426](https://github.com/scipy/scipy/issues/16426): BUG: stats.shapiro inplace modification of user array
  - [\#16446](https://github.com/scipy/scipy/issues/16446): BUG: Issue with stripping on macOS Monterey + xcode 13.2
  - [\#16465](https://github.com/scipy/scipy/issues/16465): BLD: new sdist has some metadata issues
  - [\#16466](https://github.com/scipy/scipy/issues/16466): BUG: linprog failure - OptimizeResult.x returns NoneType
  - [\#16495](https://github.com/scipy/scipy/issues/16495): HiGHS does not compile on windows (on conda-forge infra)
  - [\#16523](https://github.com/scipy/scipy/issues/16523): BUG: test failure in pre-release job: \`TestFactorized.test\_singular\_with\_umfpack\`
  - [\#16540](https://github.com/scipy/scipy/issues/16540): BLD: meson 0.63.0 and new CI testing failures on Linux
  - [\#16555](https://github.com/scipy/scipy/issues/16555): Building 1.9.x branch from source requires fix in meson-python...
  - [\#16609](https://github.com/scipy/scipy/issues/16609): BUG: \`scipy.optimize.linprog\` reports optimal for trivially...
  - [\#16681](https://github.com/scipy/scipy/issues/16681): BUG: linprog integrality only accepts list, not array
  - [\#16718](https://github.com/scipy/scipy/issues/16718): BUG: memoryview error with Cython 0.29.31

## Pull requests for 1.9.0

  - [\#9523](https://github.com/scipy/scipy/pull/9523): ENH: improvements to the Stable distribution
  - [\#11829](https://github.com/scipy/scipy/pull/11829): Fixes safe handling of small singular values in svds.
  - [\#13490](https://github.com/scipy/scipy/pull/13490): DEV: stats: check for distribution/method keyword name collisions
  - [\#13572](https://github.com/scipy/scipy/pull/13572): ENH: n-D and nan\_policy support for scipy.stats.percentileofscore
  - [\#13918](https://github.com/scipy/scipy/pull/13918): ENH: Poisson Disk sampling for QMC
  - [\#13955](https://github.com/scipy/scipy/pull/13955): DOC: SciPy extensions for code style and docstring guidelines.
  - [\#14003](https://github.com/scipy/scipy/pull/14003): DOC: clarify the definition of the pdf of \`stats.fisk\`
  - [\#14036](https://github.com/scipy/scipy/pull/14036): ENH: fix numerical issues in roots\_jacobi and related special...
  - [\#14087](https://github.com/scipy/scipy/pull/14087): DOC: explain null hypotheses in ttest functions
  - [\#14142](https://github.com/scipy/scipy/pull/14142): DOC: Add better error message for unpacking issue
  - [\#14143](https://github.com/scipy/scipy/pull/14143): Support LinearOperator in expm\_multiply
  - [\#14300](https://github.com/scipy/scipy/pull/14300): ENH: Adding DIRECT algorithm to \`\`scipy.optimize\`\`
  - [\#14576](https://github.com/scipy/scipy/pull/14576): ENH: stats: add one-sample Monte Carlo hypothesis test
  - [\#14642](https://github.com/scipy/scipy/pull/14642): ENH: add Lloyd's algorithm to \`scipy.spatial\` to improve a...
  - [\#14718](https://github.com/scipy/scipy/pull/14718): DOC: stats: adjust bootstrap doc to emphasize that batch controls...
  - [\#14781](https://github.com/scipy/scipy/pull/14781): BUG: stats: handle infinite \`df\` in \`t\` distribution
  - [\#14847](https://github.com/scipy/scipy/pull/14847): ENH: BLD: enable building SciPy with Meson
  - [\#14877](https://github.com/scipy/scipy/pull/14877): DOC: ndimage convolve origin documentation (\#14745)
  - [\#15001](https://github.com/scipy/scipy/pull/15001): ENH: sparse.linalg: More comprehensive tests (Not only for 1-D...
  - [\#15026](https://github.com/scipy/scipy/pull/15026): ENH: allow approx\_fprime to work with vector-valued func
  - [\#15079](https://github.com/scipy/scipy/pull/15079): ENH:linalg: expm overhaul and ndarray processing
  - [\#15140](https://github.com/scipy/scipy/pull/15140): ENH: Make \`stats.kappa3\` work with array inputs
  - [\#15154](https://github.com/scipy/scipy/pull/15154): DOC: a small bug in docstring example of \`lobpcg\`
  - [\#15165](https://github.com/scipy/scipy/pull/15165): MAINT: Avoid using del to remove numpy symbols in scipy.\_\_init\_\_.py
  - [\#15168](https://github.com/scipy/scipy/pull/15168): REL: set version to 1.9.0.dev0
  - [\#15169](https://github.com/scipy/scipy/pull/15169): DOC: fix formatting of Methods in multivariate distributions
  - [\#15171](https://github.com/scipy/scipy/pull/15171): \`AttrDict\` raises \`AttributeError\` on missing attributes,...
  - [\#15176](https://github.com/scipy/scipy/pull/15176): BUG: special: Clean up some private namespaces and fix \`special.\_\_all\_\_\`
  - [\#15182](https://github.com/scipy/scipy/pull/15182): MAINT: fix typos principle -\> principal
  - [\#15184](https://github.com/scipy/scipy/pull/15184): MAINT: CI: Rename 'Nightly CPython' job to 'NumPy main'
  - [\#15187](https://github.com/scipy/scipy/pull/15187): BUG: special: Fix numerical precision issue of log\_ndtr
  - [\#15188](https://github.com/scipy/scipy/pull/15188): MAINT: sparse.linalg: Using more concise and user-friendly f-string...
  - [\#15190](https://github.com/scipy/scipy/pull/15190): MAINT: interpolate: speed up the RBFInterpolator evaluation with...
  - [\#15196](https://github.com/scipy/scipy/pull/15196): BUG: stats: Fix handling of support endpoints in two distributions.
  - [\#15197](https://github.com/scipy/scipy/pull/15197): MAINT: build dependency updates
  - [\#15202](https://github.com/scipy/scipy/pull/15202): MAINT: special: Don't use macro for 'extern "C"' in strictly...
  - [\#15205](https://github.com/scipy/scipy/pull/15205): BUG: stats: Fix spurious warnings generated by several distributions.
  - [\#15207](https://github.com/scipy/scipy/pull/15207): MAINT: sparse.linalg: Using the interface with the trace of sparse...
  - [\#15219](https://github.com/scipy/scipy/pull/15219): DOC: Corrected docstring of ndimage.sum\_labels
  - [\#15223](https://github.com/scipy/scipy/pull/15223): DOC: x0-\>x for finite\_diff\_rel\_step docstring closes \#15208
  - [\#15230](https://github.com/scipy/scipy/pull/15230): ENH: expose submodules via \`\_\_getattr\_\_\` to allow lazy access
  - [\#15234](https://github.com/scipy/scipy/pull/15234): TST: stats: mark very slow tests as \`xslow\`
  - [\#15235](https://github.com/scipy/scipy/pull/15235): BUG: Fix rmul dispatch of spmatrix
  - [\#15243](https://github.com/scipy/scipy/pull/15243): DOC: stats: add reference for gstd
  - [\#15244](https://github.com/scipy/scipy/pull/15244): Added example for morphology: binary\_dilation and erosion
  - [\#15250](https://github.com/scipy/scipy/pull/15250): ENH: Make \`stats.kappa4\` work with array
  - [\#15251](https://github.com/scipy/scipy/pull/15251): \[MRG\] ENH: Update \`laplacian\` function introducing the new...
  - [\#15255](https://github.com/scipy/scipy/pull/15255): MAINT: Remove \`distutils\` usage in \`runtests.py\` to fix deprecation...
  - [\#15259](https://github.com/scipy/scipy/pull/15259): MAINT: optimize, special, signal: Use custom warnings instead...
  - [\#15261](https://github.com/scipy/scipy/pull/15261): DOC: Add inline comment in Hausdorff distance calculation
  - [\#15265](https://github.com/scipy/scipy/pull/15265): DOC: update .mailmap
  - [\#15266](https://github.com/scipy/scipy/pull/15266): CI: remove coverage usage from Windows jobs
  - [\#15269](https://github.com/scipy/scipy/pull/15269): BLD: add setup.py for \`stats/\_levy\_stable\`
  - [\#15272](https://github.com/scipy/scipy/pull/15272): BUG: Fix owens\_t function when a tends to infinity
  - [\#15274](https://github.com/scipy/scipy/pull/15274): DOC: fix docstring in \_cdf() function of \_multivariate.py
  - [\#15284](https://github.com/scipy/scipy/pull/15284): TST: silence RuntimeWarning from \`np.det\` in \`signal.place\_poles\`...
  - [\#15285](https://github.com/scipy/scipy/pull/15285): CI: simplify 32-bit Linux testing
  - [\#15286](https://github.com/scipy/scipy/pull/15286): MAINT: Highs submodule CI issue - use shallow cloning
  - [\#15289](https://github.com/scipy/scipy/pull/15289): DOC: Misc numpydoc formatting.
  - [\#15291](https://github.com/scipy/scipy/pull/15291): DOC: some more docstring/numpydoc formatting.
  - [\#15294](https://github.com/scipy/scipy/pull/15294): ENH: add integrality constraints for linprog
  - [\#15300](https://github.com/scipy/scipy/pull/15300): DOC: Misc manual docs updates.
  - [\#15302](https://github.com/scipy/scipy/pull/15302): DOC: More docstring reformatting.
  - [\#15304](https://github.com/scipy/scipy/pull/15304): CI: fix Gitpod build by adding HiGHS submodule checkout
  - [\#15305](https://github.com/scipy/scipy/pull/15305): BLD: update NumPy to \>=1.18.5, setuptools to \<60.0
  - [\#15309](https://github.com/scipy/scipy/pull/15309): CI: update OpenBLAS to 0.3.18 in Azure jobs
  - [\#15310](https://github.com/scipy/scipy/pull/15310): ENH: signal: Add Kaiser-Bessel derived window function
  - [\#15312](https://github.com/scipy/scipy/pull/15312): BUG: special: Fix loss of precision in pseudo\_huber when r/delta...
  - [\#15314](https://github.com/scipy/scipy/pull/15314): MAINT: changed needed after renaming \`master\` branch to \`main\`
  - [\#15315](https://github.com/scipy/scipy/pull/15315): MAINT: account for NumPy master -\> main renaming
  - [\#15325](https://github.com/scipy/scipy/pull/15325): CI: reshuffle two Windows Azure CI jobs, and don't run 'full'...
  - [\#15330](https://github.com/scipy/scipy/pull/15330): ENH: optimize: support undocumented option \`full\_output\` for...
  - [\#15336](https://github.com/scipy/scipy/pull/15336): DOC: update detailed roadmap
  - [\#15344](https://github.com/scipy/scipy/pull/15344): MAINT:stats: Renamed \`\*args\` param to \`\*samples\`
  - [\#15347](https://github.com/scipy/scipy/pull/15347): ENH: stats: add weights in harmonic mean
  - [\#15352](https://github.com/scipy/scipy/pull/15352): BLD: put upper bound \`setuptools\<60.0\` in conda environment...
  - [\#15357](https://github.com/scipy/scipy/pull/15357): ENH: interpolate: add new methods for RegularGridInterpolator.
  - [\#15360](https://github.com/scipy/scipy/pull/15360): MAINT: speed up rvs of nakagami in scipy.stats
  - [\#15361](https://github.com/scipy/scipy/pull/15361): MAINT: sparse.linalg: Remove unnecessary operations
  - [\#15366](https://github.com/scipy/scipy/pull/15366): Make signal functions respect input dtype.
  - [\#15370](https://github.com/scipy/scipy/pull/15370): DOC: governance members moved to scipy.org
  - [\#15371](https://github.com/scipy/scipy/pull/15371): MAINT: stats: fix unuran compile-time warnings
  - [\#15378](https://github.com/scipy/scipy/pull/15378): MAINT: remove version pinning on gmpy2
  - [\#15380](https://github.com/scipy/scipy/pull/15380): ENH/MAINT: Version switcher from the sphinx theme
  - [\#15385](https://github.com/scipy/scipy/pull/15385): DOC: fix typo
  - [\#15387](https://github.com/scipy/scipy/pull/15387): MAINT: Fix a couple build warnings.
  - [\#15388](https://github.com/scipy/scipy/pull/15388): DOC: interpolate: improve \`RectBivariateSpline\` doc
  - [\#15391](https://github.com/scipy/scipy/pull/15391): ENH: graph Laplacian as LinearOperator, add dtype and symmetrized...
  - [\#15392](https://github.com/scipy/scipy/pull/15392): ENH: integrality constraints for differential\_evolution
  - [\#15394](https://github.com/scipy/scipy/pull/15394): ENH: optimize: improvements to \`LinearConstraint\` class
  - [\#15396](https://github.com/scipy/scipy/pull/15396): DOC: <Git://> protocol on github pending removal.
  - [\#15399](https://github.com/scipy/scipy/pull/15399): ENH: stats: add \`axis\` tuple and \`nan\_policy\` to \`hmean\`
  - [\#15400](https://github.com/scipy/scipy/pull/15400): MAINT: sparse.linalg: Move the test function of GMRES to the...
  - [\#15401](https://github.com/scipy/scipy/pull/15401): MAINT: DOC: analytics from analytics.scientific-python
  - [\#15402](https://github.com/scipy/scipy/pull/15402): DOC: update pip\_quickstart (submodules)
  - [\#15406](https://github.com/scipy/scipy/pull/15406): MAINT: use \`Rotation.Random\` instead of manual generation
  - [\#15407](https://github.com/scipy/scipy/pull/15407): BLD: meson: split pyx-\>c and Python extension build
  - [\#15408](https://github.com/scipy/scipy/pull/15408): MAINT: check for negative weights in \`Rotation.align\_vectors\`
  - [\#15410](https://github.com/scipy/scipy/pull/15410): ENH: add \`order\` parameter to specify quaternion format
  - [\#15413](https://github.com/scipy/scipy/pull/15413): ENH: stats: add \`rvs\` method for \`gennorm\`
  - [\#15424](https://github.com/scipy/scipy/pull/15424): ENH: bypass LinearOperator in lobpcg for small-size cases
  - [\#15427](https://github.com/scipy/scipy/pull/15427): MAINT: Manage imports in \`sparse.linalg\`
  - [\#15431](https://github.com/scipy/scipy/pull/15431): Revert "ENH: add \`order\` parameter to specify quaternion format"
  - [\#15436](https://github.com/scipy/scipy/pull/15436): ENH: stats: fit: function for fitting discrete and continuous...
  - [\#15439](https://github.com/scipy/scipy/pull/15439): ENH: differential\_evolution vectorized kwd
  - [\#15440](https://github.com/scipy/scipy/pull/15440): MAINT: Try to detect scipy path in \`runtests.py\` while not...
  - [\#15442](https://github.com/scipy/scipy/pull/15442): MAINT: Fix meson build warnings on windows
  - [\#15443](https://github.com/scipy/scipy/pull/15443): DOC, BUG: Fix error in heading remapping for custom \`scipy.optimize:function\` domain directive
  - [\#15445](https://github.com/scipy/scipy/pull/15445): ENH: stats: add \`nnlf\` method for discrete distributions
  - [\#15451](https://github.com/scipy/scipy/pull/15451): BLD: further refinement of Cython dependencies
  - [\#15452](https://github.com/scipy/scipy/pull/15452): BUG/DOC/TST: combine\_pvalues: fix Tippett and Pearson
  - [\#15453](https://github.com/scipy/scipy/pull/15453): ENH: Make dual\_annealing work with Bounds class
  - [\#15454](https://github.com/scipy/scipy/pull/15454): BLD: remove dependency on libnpymath from \`spatial.\_distance\_wrap\`
  - [\#15455](https://github.com/scipy/scipy/pull/15455): ENH: Support Bounds class in shgo
  - [\#15459](https://github.com/scipy/scipy/pull/15459): DOC: documents parameter \`limit\` for function \`integrate.quad\_vec\`.
  - [\#15460](https://github.com/scipy/scipy/pull/15460): ENH: optimize: milp: mixed integer linear programming
  - [\#15462](https://github.com/scipy/scipy/pull/15462): CI: switch one macOS CI job from distutils to meson
  - [\#15464](https://github.com/scipy/scipy/pull/15464): ENH: Performance improvements for \`linear\_sum\_assignment\`
  - [\#15465](https://github.com/scipy/scipy/pull/15465): DOC: stats: add weights in formulas and examples for gmean and...
  - [\#15466](https://github.com/scipy/scipy/pull/15466): MAINT: fix compile errors with CPython 3.11
  - [\#15469](https://github.com/scipy/scipy/pull/15469): MAINT: Remove \`distutils\` usage
  - [\#15470](https://github.com/scipy/scipy/pull/15470): ENH: \`stats.qmc\`: faster hypercube point comparison and scrambling...
  - [\#15472](https://github.com/scipy/scipy/pull/15472): ENH: stats: add \`axis\` tuple and \`nan\_policy\` to \`skew\`
  - [\#15485](https://github.com/scipy/scipy/pull/15485): BLD: updates to Meson build files for more correct linking and...
  - [\#15487](https://github.com/scipy/scipy/pull/15487): MAINT: typo in bsplines.py
  - [\#15496](https://github.com/scipy/scipy/pull/15496): DOC: signal: fixed parameter 'order' for butter bandpass
  - [\#15497](https://github.com/scipy/scipy/pull/15497): MAINT: update vendored uarray
  - [\#15499](https://github.com/scipy/scipy/pull/15499): CI: remove matplotlib from 32-bit linux job, it fails to build
  - [\#15501](https://github.com/scipy/scipy/pull/15501): MAINT: Remove unused variable warnings
  - [\#15502](https://github.com/scipy/scipy/pull/15502): DEV: meson: allow specifying build directory and install prefix
  - [\#15512](https://github.com/scipy/scipy/pull/15512): MAINT: optimize.linprog: make HiGHS default and deprecate old...
  - [\#15523](https://github.com/scipy/scipy/pull/15523): DOC: fixed the link for fluiddyn's transonic vision in dev/roadmap.html.
  - [\#15526](https://github.com/scipy/scipy/pull/15526): MAINT: add qrvs method to NumericalInversePolynomial in scipy.stats
  - [\#15529](https://github.com/scipy/scipy/pull/15529): DOC: forward port 1.8.0 relnotes
  - [\#15532](https://github.com/scipy/scipy/pull/15532): TST: parametrize test\_ldl\_type\_size\_combinations
  - [\#15546](https://github.com/scipy/scipy/pull/15546): DOC: missing section for metrics
  - [\#15555](https://github.com/scipy/scipy/pull/15555): MAINT: make unuran clone shallow
  - [\#15557](https://github.com/scipy/scipy/pull/15557): DOC: fixes inaccuracy in bisplev documentation
  - [\#15559](https://github.com/scipy/scipy/pull/15559): BENCH: selection of linalg solvers to facilitate expansion
  - [\#15560](https://github.com/scipy/scipy/pull/15560): DOC: types and return values for Bessel Functions
  - [\#15561](https://github.com/scipy/scipy/pull/15561): MAINT: update HiGHS submodule to include fix for Windows segfault
  - [\#15563](https://github.com/scipy/scipy/pull/15563): CI: add a Windows CI job on GitHub Actions using Meson
  - [\#15564](https://github.com/scipy/scipy/pull/15564): DOC: stray backticks
  - [\#15565](https://github.com/scipy/scipy/pull/15565): DOC: incorrect underline lenght in section.
  - [\#15567](https://github.com/scipy/scipy/pull/15567): ENH: stats.pareto fit improvement for parameter combinations
  - [\#15569](https://github.com/scipy/scipy/pull/15569): DOC: pip quickstart: setup.py -\> meson
  - [\#15570](https://github.com/scipy/scipy/pull/15570): MAINT: bump test tolerance in test\_linprog
  - [\#15571](https://github.com/scipy/scipy/pull/15571): DOC: Wrong underline length
  - [\#15578](https://github.com/scipy/scipy/pull/15578): Make Windows Python setup more standard
  - [\#15581](https://github.com/scipy/scipy/pull/15581): MAINT: clarify deprecation warning spatial.transform.rotation
  - [\#15583](https://github.com/scipy/scipy/pull/15583): DOC: clarify O(N) SO(N) in random rotations
  - [\#15586](https://github.com/scipy/scipy/pull/15586): ENH: stats: Add 'alternative' and confidence interval to pearsonr
  - [\#15590](https://github.com/scipy/scipy/pull/15590): DOC: factorialk docstring inconsistent with code
  - [\#15597](https://github.com/scipy/scipy/pull/15597): DOC: update \`hyp2f1\` docstring example based on doctest
  - [\#15598](https://github.com/scipy/scipy/pull/15598): BUG/ENH: \`lsq\_linear\`: fixed incorrect \`lsmr\_tol\` in first...
  - [\#15603](https://github.com/scipy/scipy/pull/15603): BENCH: optimize: milp: add MILP benchmarks
  - [\#15606](https://github.com/scipy/scipy/pull/15606): MAINT: allow multiplication sign \`×\`
  - [\#15611](https://github.com/scipy/scipy/pull/15611): BUG:signal: Fix median bias in csd(..., average="median")
  - [\#15616](https://github.com/scipy/scipy/pull/15616): CI: pin asv to avoid slowdowns in 0.5/0.5.1
  - [\#15619](https://github.com/scipy/scipy/pull/15619): DOC: stats: update interval and moment method signatures
  - [\#15625](https://github.com/scipy/scipy/pull/15625): MAINT: Clean up \`type: ignore\` comments related to third-party...
  - [\#15626](https://github.com/scipy/scipy/pull/15626): TST, MAINT: ignore np distutils dep
  - [\#15629](https://github.com/scipy/scipy/pull/15629): MAINT: stats: fix \`trim1\` \`axis\` behavior
  - [\#15632](https://github.com/scipy/scipy/pull/15632): ENH: stats.wilcoxon: return z-statistic (as requested)
  - [\#15634](https://github.com/scipy/scipy/pull/15634): CI: Improve concurrency to cancel running jobs on PR update
  - [\#15645](https://github.com/scipy/scipy/pull/15645): DOC: Add code example to the documentation of \`sparse.linalg.cg\`.
  - [\#15646](https://github.com/scipy/scipy/pull/15646): DOC: stats.ks\_1samp: correct examples
  - [\#15647](https://github.com/scipy/scipy/pull/15647): ENH: add variable bits to \`stats.qmc.Sobol\`
  - [\#15648](https://github.com/scipy/scipy/pull/15648): DOC: Add examples to documentation for \`scipy.special.ellipr{c,d,f,g,j}\`
  - [\#15649](https://github.com/scipy/scipy/pull/15649): DEV/DOC: remove latex/pdf documentation
  - [\#15651](https://github.com/scipy/scipy/pull/15651): DOC: stats.ks\_2samp/stats.kstest: correct examples
  - [\#15652](https://github.com/scipy/scipy/pull/15652): DOC: stats.circstd: add reference, notes, comments
  - [\#15655](https://github.com/scipy/scipy/pull/15655): REL: fix small issue in pavement.py for release note writing
  - [\#15656](https://github.com/scipy/scipy/pull/15656): DOC: Fix example for subset\_by\_index in eigh doc
  - [\#15661](https://github.com/scipy/scipy/pull/15661): DOC: Additional examples for optimize user guide
  - [\#15662](https://github.com/scipy/scipy/pull/15662): DOC: stats.fit: fix intermittent failure in doctest
  - [\#15663](https://github.com/scipy/scipy/pull/15663): DOC: stats.burr12: fix typo
  - [\#15664](https://github.com/scipy/scipy/pull/15664): BENCH: Add benchmarks for special.factorial/factorial2/factorialk
  - [\#15673](https://github.com/scipy/scipy/pull/15673): DOC: fix intersphinx links
  - [\#15682](https://github.com/scipy/scipy/pull/15682): MAINT: sparse.linalg: Clear up unnecessary modules imported in...
  - [\#15684](https://github.com/scipy/scipy/pull/15684): DOC: add formula and documentation improvements for scipy.special.chndtr...
  - [\#15690](https://github.com/scipy/scipy/pull/15690): ENH: add uarray multimethods for fast Hankel transforms
  - [\#15694](https://github.com/scipy/scipy/pull/15694): MAINT,CI: signal: fix failing refguide check
  - [\#15699](https://github.com/scipy/scipy/pull/15699): DOC: stats.ttest\_1samp: update example
  - [\#15701](https://github.com/scipy/scipy/pull/15701): BUG: Fix dual\_annealing bounds test
  - [\#15703](https://github.com/scipy/scipy/pull/15703): BUG: fix test fail in test\_propack.py (loosen atol)
  - [\#15710](https://github.com/scipy/scipy/pull/15710): MAINT: sparse.linalg: \`bnorm\` only calculate once
  - [\#15712](https://github.com/scipy/scipy/pull/15712): ENH: \`scipy.stats.qmc.Sobol\`: allow 32 or 64 bit computation
  - [\#15715](https://github.com/scipy/scipy/pull/15715): ENH: stats: add \_axis\_nan\_policy\_factory to moment
  - [\#15718](https://github.com/scipy/scipy/pull/15718): ENH: Migration of \`write\_release\_and\_log\` into standalone script
  - [\#15723](https://github.com/scipy/scipy/pull/15723): TST: stats: make \`check\_sample\_var\` two-sided
  - [\#15724](https://github.com/scipy/scipy/pull/15724): TST: stats: simplify \`check\_sample\_mean\`
  - [\#15725](https://github.com/scipy/scipy/pull/15725): DEV: Try to detect scipy from dev installed path
  - [\#15728](https://github.com/scipy/scipy/pull/15728): ENH: changed vague exception messages to a more descriptive ones...
  - [\#15729](https://github.com/scipy/scipy/pull/15729): ENH: stats: add weighted power mean
  - [\#15763](https://github.com/scipy/scipy/pull/15763): ENH: stats: replace ncf with Boost non\_central\_f distribution
  - [\#15766](https://github.com/scipy/scipy/pull/15766): BUG: improve exceptions for private attributes in refactored...
  - [\#15768](https://github.com/scipy/scipy/pull/15768): \[DOC\] fix typo in cython optimize help example
  - [\#15769](https://github.com/scipy/scipy/pull/15769): MAINT: stats: check integrality in \`\_argcheck\` as needed
  - [\#15771](https://github.com/scipy/scipy/pull/15771): MAINT: stats: resolve discrete rvs dtype platform dependency
  - [\#15774](https://github.com/scipy/scipy/pull/15774): MAINT: stats: remove deprecated \`median\_absolute\_deviation\`
  - [\#15775](https://github.com/scipy/scipy/pull/15775): DOC: stats.lognorm: rephrase note about parameterization
  - [\#15776](https://github.com/scipy/scipy/pull/15776): DOC: stats.powerlaw: more explicit explanation of support
  - [\#15777](https://github.com/scipy/scipy/pull/15777): MAINT: stats.shapiro: subtract median from shapiro input
  - [\#15778](https://github.com/scipy/scipy/pull/15778): MAINT: stats: more specific error type from \`rv\_continuous.fit\`
  - [\#15779](https://github.com/scipy/scipy/pull/15779): CI: don't run meson tests on forks and remove skip flags
  - [\#15782](https://github.com/scipy/scipy/pull/15782): DEPR: remove k=None in KDTree.query
  - [\#15783](https://github.com/scipy/scipy/pull/15783): CI:Pin pytest version to 7.0.1 on Azure
  - [\#15785](https://github.com/scipy/scipy/pull/15785): MAINT: stats: remove deprecated itemfreq
  - [\#15786](https://github.com/scipy/scipy/pull/15786): DOC: Add examples of integrals to integrate.quadpack
  - [\#15788](https://github.com/scipy/scipy/pull/15788): DOC: update macOS and Linux contributor docs to use Python 3.9
  - [\#15789](https://github.com/scipy/scipy/pull/15789): DOC, MAINT: Remove numpydoc submodule
  - [\#15791](https://github.com/scipy/scipy/pull/15791): MAINT: add ShapeInfo to continuous distributions in scipy.stats
  - [\#15795](https://github.com/scipy/scipy/pull/15795): DEP: remove n\_jobs from cKDTree
  - [\#15797](https://github.com/scipy/scipy/pull/15797): scipy/\_lib/boost: Update to d8626c9d2d937abf6a38a844522714ad72e63281
  - [\#15799](https://github.com/scipy/scipy/pull/15799): DEP: add warning for documented-as-deprecated extradoc
  - [\#15802](https://github.com/scipy/scipy/pull/15802): DOC: Import Error in examples
  - [\#15803](https://github.com/scipy/scipy/pull/15803): DOC: error in TransferFunctionDiscrete example
  - [\#15804](https://github.com/scipy/scipy/pull/15804): DEP: sharpen warning message on \>1-dim for optimize.minimize
  - [\#15805](https://github.com/scipy/scipy/pull/15805): DEP: specify version to remove dual\_annealing argument 'local\_search\_options'
  - [\#15809](https://github.com/scipy/scipy/pull/15809): DOC,MAINT: remove \`quad\_explain\` that has become irrelevant.
  - [\#15810](https://github.com/scipy/scipy/pull/15810): DOC: stats.mood: validity only when observations are unique
  - [\#15811](https://github.com/scipy/scipy/pull/15811): DOC: fix evaluate\_all\_bspl example.
  - [\#15812](https://github.com/scipy/scipy/pull/15812): DOC: Couple of single to double backticks
  - [\#15813](https://github.com/scipy/scipy/pull/15813): DOC: information about skip on CircleCI
  - [\#15817](https://github.com/scipy/scipy/pull/15817): MAINT: stats.fisher\_exact: improve docs and fix bugs
  - [\#15819](https://github.com/scipy/scipy/pull/15819): DEP: docstring-related deprecations (\#15757)
  - [\#15821](https://github.com/scipy/scipy/pull/15821): DEP: add actual DeprecationWarning for sym\_pos-keyword of scipy.linalg.solve
  - [\#15822](https://github.com/scipy/scipy/pull/15822): DEP: remove \`right\` from interpolate.PPoly.extend
  - [\#15823](https://github.com/scipy/scipy/pull/15823): DOC: Interpolative tutorial - wrong matrix fill var
  - [\#15824](https://github.com/scipy/scipy/pull/15824): BUG: Handle base case for scipy.integrate.simpson when span along...
  - [\#15825](https://github.com/scipy/scipy/pull/15825): TST: stats: xfail\_on\_32bit studentized\_range moment test
  - [\#15827](https://github.com/scipy/scipy/pull/15827): DOC: change docs that specify the SNR ratio definition for find\_peaks\_cwt().
  - [\#15828](https://github.com/scipy/scipy/pull/15828): DEP: raise value error for object arrays
  - [\#15830](https://github.com/scipy/scipy/pull/15830): MAINT: stats: collocate bootstrap/permutation\_test/monte\_carlo\_test
  - [\#15831](https://github.com/scipy/scipy/pull/15831): MAINT: stats.rv\_generic: fix unnecessary call to \`\_munp\` in...
  - [\#15835](https://github.com/scipy/scipy/pull/15835): FIX: Incorect boschloo pvalue
  - [\#15837](https://github.com/scipy/scipy/pull/15837): DOC: Simplify conda command
  - [\#15840](https://github.com/scipy/scipy/pull/15840): DOC: special: Add 'Examples' for wrightomega.
  - [\#15842](https://github.com/scipy/scipy/pull/15842): DOC: Add examples for \`CGS\`, \`GCROTMK\` and \`BiCGSTAB\` iterative...
  - [\#15846](https://github.com/scipy/scipy/pull/15846): DOC: Add efficiency condition for CSC sparse matrix and remove...
  - [\#15847](https://github.com/scipy/scipy/pull/15847): BUG: adds warning to scipy.stats.brunnermunzel
  - [\#15848](https://github.com/scipy/scipy/pull/15848): DOC: fix interp2d docs showing wrong Z array ordering.
  - [\#15850](https://github.com/scipy/scipy/pull/15850): MAINT: sparse.linalg: Missing tfqmr in the re-entrancy test
  - [\#15853](https://github.com/scipy/scipy/pull/15853): DEP: remove the keyword debug from linalg.solve
  - [\#15855](https://github.com/scipy/scipy/pull/15855): ENH: stats.rv\_continuous.expect: split interval to improve reliability
  - [\#15867](https://github.com/scipy/scipy/pull/15867): CI: fix python version matrix in linux workflow
  - [\#15868](https://github.com/scipy/scipy/pull/15868): CI: fix Azure workflows
  - [\#15872](https://github.com/scipy/scipy/pull/15872): DEP: remove mlab from dendrogram
  - [\#15874](https://github.com/scipy/scipy/pull/15874): DEP: remove py\_vq2
  - [\#15875](https://github.com/scipy/scipy/pull/15875): DEP: remove old BSR methods
  - [\#15876](https://github.com/scipy/scipy/pull/15876): DEP: remove \_ppform
  - [\#15881](https://github.com/scipy/scipy/pull/15881): DEP: remove signal.windows.hanning
  - [\#15882](https://github.com/scipy/scipy/pull/15882): DEP: enforced radius in spherical voronoi
  - [\#15885](https://github.com/scipy/scipy/pull/15885): DOC: stats: clarify truncnorm shape parameter definition
  - [\#15886](https://github.com/scipy/scipy/pull/15886): BUG: check that iirfilter argument Wn satisfies Wn\[0\] \< Wn\[1\]
  - [\#15887](https://github.com/scipy/scipy/pull/15887): DEP: remove ftol/xtol from neldermead
  - [\#15894](https://github.com/scipy/scipy/pull/15894): \[BUG\] make p-values consistent with the literature
  - [\#15895](https://github.com/scipy/scipy/pull/15895): CI: remove pin on Jinja2
  - [\#15898](https://github.com/scipy/scipy/pull/15898): DOC: stats: correct documentation of \`wilcoxon\`'s behavior...
  - [\#15900](https://github.com/scipy/scipy/pull/15900): DOC: fix import in example in \_morestats
  - [\#15905](https://github.com/scipy/scipy/pull/15905): MAINT: stats.\_moment: warn when catastrophic cancellation occurs
  - [\#15909](https://github.com/scipy/scipy/pull/15909): DEP: deal with deprecation of ndim \>1 in bspline
  - [\#15911](https://github.com/scipy/scipy/pull/15911): MAINT: stats: fix \`gibrat\` name
  - [\#15914](https://github.com/scipy/scipy/pull/15914): MAINT: special: Clean up C style in ndtr.c
  - [\#15916](https://github.com/scipy/scipy/pull/15916): MAINT: stats: adjust tolerance of failing TestTruncnorm
  - [\#15917](https://github.com/scipy/scipy/pull/15917): MAINT: stats: remove support for \`\_rvs\` without \`size\` parameter
  - [\#15920](https://github.com/scipy/scipy/pull/15920): ENH: stats.mannwhitneyu: add iterative implementation
  - [\#15923](https://github.com/scipy/scipy/pull/15923): MAINT: stats: attempt to consolidate warnings and errors
  - [\#15932](https://github.com/scipy/scipy/pull/15932): MAINT: stats: fix and thoroughly test \`rv\_sample\` at non-integer...
  - [\#15933](https://github.com/scipy/scipy/pull/15933): TST: test\_nodata respect endianness
  - [\#15938](https://github.com/scipy/scipy/pull/15938): DOC: sparse.linalg: add citations for COLAMD
  - [\#15939](https://github.com/scipy/scipy/pull/15939): Update \_dual\_annealing.py
  - [\#15945](https://github.com/scipy/scipy/pull/15945): BUG/ENH: \`MultinomialQMC.random\` shape to (n, pvals)
  - [\#15946](https://github.com/scipy/scipy/pull/15946): DEP: remove inheritance to \`QMCEngine\` in \`MultinomialQMC\`...
  - [\#15947](https://github.com/scipy/scipy/pull/15947): DOC: Revamp contributor setup guides
  - [\#15953](https://github.com/scipy/scipy/pull/15953): DOC: Add meson docs to use gcc, clang build in parallel and optimization...
  - [\#15955](https://github.com/scipy/scipy/pull/15955): BUG Fix signature of D\_IIR\_forback(1,2)
  - [\#15959](https://github.com/scipy/scipy/pull/15959): ENH: Developer CLI for SciPy
  - [\#15965](https://github.com/scipy/scipy/pull/15965): MAINT: stats: ensure that \`rv\_continuous.\_fitstart\` shapes...
  - [\#15968](https://github.com/scipy/scipy/pull/15968): BUG: Fix debug and coverage arguments with dev.py
  - [\#15970](https://github.com/scipy/scipy/pull/15970): BLD: specify \`cython\_lapack\` dependency for \`matfuncs\_expm\`
  - [\#15973](https://github.com/scipy/scipy/pull/15973): DOC: Add formula renderings to integrate.nquad.
  - [\#15981](https://github.com/scipy/scipy/pull/15981): ENH: optimize: Add Newton-TFQMR method and some tests for Newton-Krylov
  - [\#15982](https://github.com/scipy/scipy/pull/15982): BENCH: stats: Distribution memory and CDF/PPF round trip benchmarks
  - [\#15983](https://github.com/scipy/scipy/pull/15983): TST: sparse.linalg: Add tests for the parameter \`show\`
  - [\#15991](https://github.com/scipy/scipy/pull/15991): TST: fix for np.kron matrix issue.
  - [\#15992](https://github.com/scipy/scipy/pull/15992): DOC: Fixed \`degrees\` parameter in return section
  - [\#15997](https://github.com/scipy/scipy/pull/15997): MAINT: integrate: add \`recursive\` to QUADPACK Fortran sources
  - [\#15998](https://github.com/scipy/scipy/pull/15998): BUG: Fix yeojohnson when transformed data has zero variance
  - [\#15999](https://github.com/scipy/scipy/pull/15999): MAINT: Adds doit.db.db to gitignore
  - [\#16004](https://github.com/scipy/scipy/pull/16004): MAINT: rename MaximumFlowResult.residual to flow
  - [\#16005](https://github.com/scipy/scipy/pull/16005): DOC: sparse.linalg: Fixed the description of input matrix of...
  - [\#16010](https://github.com/scipy/scipy/pull/16010): MAINT: Add a check to verify all \`.pyi\` files are installed...
  - [\#16012](https://github.com/scipy/scipy/pull/16012): DOC: Fix broken link and add python headers to contributing guide
  - [\#16015](https://github.com/scipy/scipy/pull/16015): DEP: bump version for deprecating residual to flow.
  - [\#16018](https://github.com/scipy/scipy/pull/16018): Doc: fix arch linux building from source local dependencies instructions
  - [\#16019](https://github.com/scipy/scipy/pull/16019): DOC: fix conda env name in quickstart guide \[skip ci\]
  - [\#16021](https://github.com/scipy/scipy/pull/16021): DOC: typos in basinhopping documentation
  - [\#16024](https://github.com/scipy/scipy/pull/16024): CI: unpin pytest and pytest-xdist
  - [\#16026](https://github.com/scipy/scipy/pull/16026): BUG: Allow \`spsolve\_triangular\` to work with matrices with...
  - [\#16029](https://github.com/scipy/scipy/pull/16029): BUG: Fix meson-info file errors and add more informative exception
  - [\#16030](https://github.com/scipy/scipy/pull/16030): MAINT: stats: more accurate error message for \`multivariate\_normal\`
  - [\#16032](https://github.com/scipy/scipy/pull/16032): FIX: show warning when passing NAN into input of convolve method
  - [\#16037](https://github.com/scipy/scipy/pull/16037): MAINT: fix missing \`f\` prefix on f-strings
  - [\#16042](https://github.com/scipy/scipy/pull/16042): MAINT: stats.dirichlet: fix interface inconsistency
  - [\#16044](https://github.com/scipy/scipy/pull/16044): DEV: do.py, adoption of pkg pydevtool (removed non SciPy specific...
  - [\#16045](https://github.com/scipy/scipy/pull/16045): ENH: Use circleci-artifacts-redirector-action
  - [\#16051](https://github.com/scipy/scipy/pull/16051): MAINT: Miscellaneous small changes to filter\_design
  - [\#16053](https://github.com/scipy/scipy/pull/16053): Mark fitpack sources as \`recursive\`
  - [\#16055](https://github.com/scipy/scipy/pull/16055): MAINT: stats: replace \`np.var\` with \`\_moment(..., 2)\` to...
  - [\#16058](https://github.com/scipy/scipy/pull/16058): DEV: Fix meson debian python build
  - [\#16060](https://github.com/scipy/scipy/pull/16060): MAINT: Allow all Latin-1 Unicode letters in the source code.
  - [\#16062](https://github.com/scipy/scipy/pull/16062): DOC: Document QUADPACK routines used in \`\*quad\`
  - [\#16067](https://github.com/scipy/scipy/pull/16067): DEP: remove spatial.distance.matching
  - [\#16070](https://github.com/scipy/scipy/pull/16070): ENH: interpolate: handle length-1 grid axes in RegularGridInterpolator
  - [\#16073](https://github.com/scipy/scipy/pull/16073): DOC: expand RegularGridInterpolator docstring
  - [\#16075](https://github.com/scipy/scipy/pull/16075): CI: Fix refguidecheck failures; unpin Sphinx
  - [\#16077](https://github.com/scipy/scipy/pull/16077): BUG: interpolate: RGI(nan) is nan
  - [\#16078](https://github.com/scipy/scipy/pull/16078): DEV,BLD: Use Meson in Gitpod builds
  - [\#16082](https://github.com/scipy/scipy/pull/16082): BUG: refguide-check: allow multiline namedtuples
  - [\#16083](https://github.com/scipy/scipy/pull/16083): DOC: fixing a sign issue in FFTlog function documentation
  - [\#16092](https://github.com/scipy/scipy/pull/16092): ENH: interpolate: Add functionality to accept descending points...
  - [\#16095](https://github.com/scipy/scipy/pull/16095): MAINT: Remove old filtered warnings
  - [\#16100](https://github.com/scipy/scipy/pull/16100): MAINT: Fix a couple compiler warnings.
  - [\#16104](https://github.com/scipy/scipy/pull/16104): DOC: stats: symmetry not checked for (inv)wishart distributions
  - [\#16111](https://github.com/scipy/scipy/pull/16111): BUG: Fix norm for sparse arrays
  - [\#16115](https://github.com/scipy/scipy/pull/16115): MAINT: merge \`environment.yml\` and \`environment\_meson.yml\`
  - [\#16117](https://github.com/scipy/scipy/pull/16117): MAINT: stats.wilcoxon: return \`zstatistic\` only when \`method='approx'\`
  - [\#16118](https://github.com/scipy/scipy/pull/16118): Download openblas binary from GH repo
  - [\#16122](https://github.com/scipy/scipy/pull/16122): CI: Speed up ci build that keeps timing out
  - [\#16125](https://github.com/scipy/scipy/pull/16125): DOC: interpolate: fix typos "the the" -\> "the"
  - [\#16126](https://github.com/scipy/scipy/pull/16126): DOC: interpolate: details rectilinear grids in docstrings
  - [\#16128](https://github.com/scipy/scipy/pull/16128): BUG: interpolate: fix extrapolation behaviors of \`previous\`...
  - [\#16130](https://github.com/scipy/scipy/pull/16130): Increase time to timeout on azure
  - [\#16134](https://github.com/scipy/scipy/pull/16134): BUG: signal: Fix calculation of extended image indices in convolve2d.
  - [\#16135](https://github.com/scipy/scipy/pull/16135): MAINT: sparse.linalg: A minor improvement with zero initial guess
  - [\#16137](https://github.com/scipy/scipy/pull/16137): Clean up fitpack smoke tests
  - [\#16138](https://github.com/scipy/scipy/pull/16138): TST: interpolate: mark rbf chunking tests as slow
  - [\#16141](https://github.com/scipy/scipy/pull/16141): DOC: Plot poles as x and zeros as o in signal
  - [\#16144](https://github.com/scipy/scipy/pull/16144): DEP: Execute deprecation for squeezing input vectors in spatial.distance
  - [\#16145](https://github.com/scipy/scipy/pull/16145): ENH: Fix signal.iircomb w0 bugs, add support for both frequency...
  - [\#16150](https://github.com/scipy/scipy/pull/16150): Add typing info for Rotation.concatenate
  - [\#16165](https://github.com/scipy/scipy/pull/16165): BUG: fix extension module initialization, needs use of \`PyMODINIT\_FUNC\`
  - [\#16166](https://github.com/scipy/scipy/pull/16166): MAINT:linalg: Expose Cython functions for generic use
  - [\#16167](https://github.com/scipy/scipy/pull/16167): ENH: Tweak theilslopes and siegelslopes to return a tuple\_bunch
  - [\#16168](https://github.com/scipy/scipy/pull/16168): BUG: special: Fix the test 'test\_d' that is run when SCIPY\_XSLOW...
  - [\#16173](https://github.com/scipy/scipy/pull/16173): Adds note to the curve\_fit() docstring to use float64.
  - [\#16176](https://github.com/scipy/scipy/pull/16176): MAINT: remove questionable uses of \`Py\_FatalError\` in module...
  - [\#16177](https://github.com/scipy/scipy/pull/16177): MAINT: Cleanup unused code in meson-files
  - [\#16180](https://github.com/scipy/scipy/pull/16180): DEV: do.py build. On setup checks if intro-buildoptions.json...
  - [\#16181](https://github.com/scipy/scipy/pull/16181): BUG: stats: fix multivariate\_hypergeom.rvs method
  - [\#16183](https://github.com/scipy/scipy/pull/16183): ENH: Simplify return names in stats.theil/siegelslopes (and fix...
  - [\#16184](https://github.com/scipy/scipy/pull/16184): DEP: raise if fillvalue cannot be cast to output type in signal.convolve2d
  - [\#16185](https://github.com/scipy/scipy/pull/16185): BUG: stats: Fix handling of float32 inputs for the boost-based...
  - [\#16187](https://github.com/scipy/scipy/pull/16187): BLD: default to Meson in pyproject.toml
  - [\#16194](https://github.com/scipy/scipy/pull/16194): BLD: add a build option to force use of the g77 ABI with Meson
  - [\#16198](https://github.com/scipy/scipy/pull/16198): DEP: sharpen deprecation in NumericalInverseHermite
  - [\#16206](https://github.com/scipy/scipy/pull/16206): CI: Test NumPy main branch also with Python 3.11
  - [\#16220](https://github.com/scipy/scipy/pull/16220): Create a new spline from a partial derivative of a bivariate...
  - [\#16223](https://github.com/scipy/scipy/pull/16223): MAINT: interpolate: move RGI to a separate file
  - [\#16228](https://github.com/scipy/scipy/pull/16228): TST: interpolate: move test\_spalde\_scalar to other fitpack tests
  - [\#16229](https://github.com/scipy/scipy/pull/16229): REL: DOC: fix documentation URLs
  - [\#16230](https://github.com/scipy/scipy/pull/16230): BUG: fix extension module initialization, needs use of PyMODINIT\_FUNC,...
  - [\#16239](https://github.com/scipy/scipy/pull/16239): MAINT: tools: Add more output to a refguide-check error message.
  - [\#16241](https://github.com/scipy/scipy/pull/16241): DOC: stats: update roadmap
  - [\#16242](https://github.com/scipy/scipy/pull/16242): BUG: Make KDTree more robust against nans.
  - [\#16245](https://github.com/scipy/scipy/pull/16245): DEP: Execute deprecation of pinv2
  - [\#16247](https://github.com/scipy/scipy/pull/16247): DOC:linalg: Remove references to removed pinv2 function
  - [\#16248](https://github.com/scipy/scipy/pull/16248): DOC: prep 1.9.0 release notes
  - [\#16249](https://github.com/scipy/scipy/pull/16249): Refguide check verbosity abs names
  - [\#16257](https://github.com/scipy/scipy/pull/16257): DEP: Deprecation follow-ups
  - [\#16259](https://github.com/scipy/scipy/pull/16259): Revert "CI: pin Pip to 22.0.4 to avoid issues with \`--no-build-isolation\`"
  - [\#16261](https://github.com/scipy/scipy/pull/16261): DEP: add deprecation warning to maxiter kwarg in \_minimize\_tnc
  - [\#16264](https://github.com/scipy/scipy/pull/16264): DOC: update the RegularGridInterpolator docstring
  - [\#16265](https://github.com/scipy/scipy/pull/16265): DEP: deprecate spatial.distance.kulsinski
  - [\#16267](https://github.com/scipy/scipy/pull/16267): DOC: broken donation link on GitHub
  - [\#16273](https://github.com/scipy/scipy/pull/16273): DOC: remove deprecated functions from refguide
  - [\#16276](https://github.com/scipy/scipy/pull/16276): MAINT: sparse.linalg: Update some docstrings.
  - [\#16279](https://github.com/scipy/scipy/pull/16279): MAINT: stats: override \`loguniform.fit\` to resolve overparameterization
  - [\#16282](https://github.com/scipy/scipy/pull/16282): BUG: special: DECREF scipy\_special object before exiting sf\_error().
  - [\#16283](https://github.com/scipy/scipy/pull/16283): Corrections To Docs
  - [\#16287](https://github.com/scipy/scipy/pull/16287): BLD: sync pyproject.toml changes from oldest-supported-numpy
  - [\#16289](https://github.com/scipy/scipy/pull/16289): MAINT: stats: remove function-specific warning messages
  - [\#16290](https://github.com/scipy/scipy/pull/16290): BLD: fix issue with \`python setup.py install\` and \`\_directmodule\`
  - [\#16295](https://github.com/scipy/scipy/pull/16295): MAINT: move \`import\_array\` before module creation in module...
  - [\#16296](https://github.com/scipy/scipy/pull/16296): DOC: REL: fix \`make dist\` issue with missing dependencies
  - [\#16303](https://github.com/scipy/scipy/pull/16303): MAINT: revert addition of multivariate\_beta
  - [\#16304](https://github.com/scipy/scipy/pull/16304): MAINT: add a more informative error message for broken installs
  - [\#16309](https://github.com/scipy/scipy/pull/16309): BLD: CI: fix issue in wheel metadata, and add basic "build in...
  - [\#16316](https://github.com/scipy/scipy/pull/16316): REL: update version switcher for 1.8.1
  - [\#16321](https://github.com/scipy/scipy/pull/16321): DOC: fix incorrect formatting of deprecation tags
  - [\#16326](https://github.com/scipy/scipy/pull/16326): REL: update version switcher for 1.9
  - [\#16329](https://github.com/scipy/scipy/pull/16329): MAINT: git security shim for 1.9.x
  - [\#16339](https://github.com/scipy/scipy/pull/16339): MAINT, TST: bump tol for \_axis\_nan\_policy\_test
  - [\#16341](https://github.com/scipy/scipy/pull/16341): BLD: update Pythran requirement to 0.11.0, to support Clang \>=13
  - [\#16353](https://github.com/scipy/scipy/pull/16353): MAINT: version bounds 1.9.0rc1
  - [\#16360](https://github.com/scipy/scipy/pull/16360): MAINT, TST: sup warning for theilslopes
  - [\#16361](https://github.com/scipy/scipy/pull/16361): MAINT: SCIPY\_USE\_PROPACK
  - [\#16370](https://github.com/scipy/scipy/pull/16370): MAINT: update Boost submodule to include Cygwin fix
  - [\#16374](https://github.com/scipy/scipy/pull/16374): MAINT: update pydata-sphinx-theme
  - [\#16379](https://github.com/scipy/scipy/pull/16379): DOC: dark theme css adjustments
  - [\#16390](https://github.com/scipy/scipy/pull/16390): TST, MAINT: adjust 32-bit xfails for HiGHS
  - [\#16393](https://github.com/scipy/scipy/pull/16393): MAINT: use correct type for element wise comparison
  - [\#16414](https://github.com/scipy/scipy/pull/16414): BUG: spatial: Handle integer arrays in HalfspaceIntersection.
  - [\#16420](https://github.com/scipy/scipy/pull/16420): MAINT: next round of 1.9.0 backports
  - [\#16422](https://github.com/scipy/scipy/pull/16422): TST: fix test issues with casting-related warnings with numpy...
  - [\#16427](https://github.com/scipy/scipy/pull/16427): MAINT: stats.shapiro: don't modify input in place
  - [\#16429](https://github.com/scipy/scipy/pull/16429): MAINT: stats.mode: revert gh-15423
  - [\#16436](https://github.com/scipy/scipy/pull/16436): DOC: optimize: Mark deprecated linprog methods explicitly
  - [\#16444](https://github.com/scipy/scipy/pull/16444): BUG: fix fail to open tempfile in messagestream.pyx (\#8850)
  - [\#16451](https://github.com/scipy/scipy/pull/16451): MAINT: few more 1.9.0 backports
  - [\#16453](https://github.com/scipy/scipy/pull/16453): DOC: Copy-edit 1.9.0-notes.rst
  - [\#16457](https://github.com/scipy/scipy/pull/16457): TST: skip 32-bit test\_pdist\_correlation\_iris\_nonC
  - [\#16458](https://github.com/scipy/scipy/pull/16458): MAINT: 1.9.0 backports
  - [\#16473](https://github.com/scipy/scipy/pull/16473): REL: update 1.9.0 release notes
  - [\#16482](https://github.com/scipy/scipy/pull/16482): DOC: Update Returns section of optimize.linprog.
  - [\#16484](https://github.com/scipy/scipy/pull/16484): MAINT: remove raw html from README.rst
  - [\#16485](https://github.com/scipy/scipy/pull/16485): BLD: fix warnings from f2py templating parsing
  - [\#16493](https://github.com/scipy/scipy/pull/16493): BLD: clean up unwanted files in sdist, via \`.gitattributes\`
  - [\#16507](https://github.com/scipy/scipy/pull/16507): REL: more tweaks to sdist contents
  - [\#16512](https://github.com/scipy/scipy/pull/16512): \[1.9\] MAINT: skip complex128 propack tests on windows
  - [\#16514](https://github.com/scipy/scipy/pull/16514): DOC: reflect correctly where windows wheels are built
  - [\#16526](https://github.com/scipy/scipy/pull/16526): MAINT: 1.9.0rc2 backports
  - [\#16530](https://github.com/scipy/scipy/pull/16530): MAINT: fix umfpack test failure with numpy 1.23
  - [\#16539](https://github.com/scipy/scipy/pull/16539): MAINT: more 1.9.0rc2 backports
  - [\#16541](https://github.com/scipy/scipy/pull/16541): BLD: fix regression in building \_lsap with symbol visibility
  - [\#16549](https://github.com/scipy/scipy/pull/16549): BLD: fix an outdated requirement for macOS arm64 in pyproject.toml
  - [\#16551](https://github.com/scipy/scipy/pull/16551): BLD: fix \`\_\_STDC\_VERSION\_\_\` check in \`special/\_round.h\`
  - [\#16553](https://github.com/scipy/scipy/pull/16553): BLD: raise an error with clear message for too-new Python version
  - [\#16556](https://github.com/scipy/scipy/pull/16556): DOC: small tweaks to 1.9.0 release notes
  - [\#16563](https://github.com/scipy/scipy/pull/16563): DOC: Reflect MSVC minimum toolchain requirement
  - [\#16570](https://github.com/scipy/scipy/pull/16570): MAINT: backports before 1.9.0rc3
  - [\#16572](https://github.com/scipy/scipy/pull/16572): MAINT: update bundled licenses for removal of scipy-sphinx-theme
  - [\#16581](https://github.com/scipy/scipy/pull/16581): MAINT: stats: fix skew/kurtosis empty 1d input
  - [\#16586](https://github.com/scipy/scipy/pull/16586): MAINT: stats.truncnorm: improve CDF accuracy/speed
  - [\#16593](https://github.com/scipy/scipy/pull/16593): TST: stats: replace TestTruncnorm::test\_moments
  - [\#16599](https://github.com/scipy/scipy/pull/16599): MAINT: stats.truncnorm.rvs: improve performance
  - [\#16605](https://github.com/scipy/scipy/pull/16605): MAINT: stats.truncnorm: simplify remaining methods
  - [\#16622](https://github.com/scipy/scipy/pull/16622): ENH: FIX: update HiGHS submodule to resolve MIP infeasibility...
  - [\#16638](https://github.com/scipy/scipy/pull/16638): DOC: update docs on building with Meson
  - [\#16664](https://github.com/scipy/scipy/pull/16664): MAINT: stats.\_axis\_nan\_policy: preserve dtype of masked arrays...
  - [\#16671](https://github.com/scipy/scipy/pull/16671): BLD: update \`meson\` and \`meson-python\` versions for 1.9.0...
  - [\#16684](https://github.com/scipy/scipy/pull/16684): MAINT: optimize.linprog: ensure integrality can be an array
  - [\#16688](https://github.com/scipy/scipy/pull/16688): DOC: a few mailmap updates
  - [\#16719](https://github.com/scipy/scipy/pull/16719): MAINT: stats: Work around Cython bug.
  - [\#16721](https://github.com/scipy/scipy/pull/16721): MAINT: stats.monte\_carlo\_test: used biased estimate of p-value

---

1.9.1-notes.md

---

# SciPy 1.9.1 Release Notes

<div class="contents">

</div>

SciPy 1.9.1 is a bug-fix release with no new features compared to 1.9.0. Notably, some important meson build fixes are included.

## Authors

  - Anirudh Dagar (1)
  - Ralf Gommers (12)
  - Matt Haberland (2)
  - Andrew Nelson (1)
  - Tyler Reddy (14)
  - Atsushi Sakai (1)
  - Eli Schwartz (1)
  - Warren Weckesser (2)

A total of 8 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.9.1

  - [\#14517](https://github.com/scipy/scipy/issues/14517): scipy/linalg/tests/test\_decomp.py::TestSchur::test\_sort test...
  - [\#16765](https://github.com/scipy/scipy/issues/16765): DOC: \`scipy.stats.skew\` no longer returns 0 on constant input
  - [\#16787](https://github.com/scipy/scipy/issues/16787): BUG: Can't build 1.10 with mingw-w64 toolchain and numpy 1.21.6...
  - [\#16813](https://github.com/scipy/scipy/issues/16813): BUG: scipy.interpolate interp1d extrapolate behaviour change...
  - [\#16878](https://github.com/scipy/scipy/issues/16878): BUG: optimize.milp fails to execute when given exactly 3 constraints

### Pull requests for 1.9.1

  - [\#16709](https://github.com/scipy/scipy/pull/16709): BLD: make the way we count commits for version numbering more...
  - [\#16736](https://github.com/scipy/scipy/pull/16736): REL: prep for SciPy 1.9.1
  - [\#16749](https://github.com/scipy/scipy/pull/16749): BLD: install missing \`.pxd\` files, and update TODOs/FIXMEs...
  - [\#16750](https://github.com/scipy/scipy/pull/16750): BLD: make OpenBLAS detection work with CMake
  - [\#16755](https://github.com/scipy/scipy/pull/16755): TST: sparse.linalg: Loosen tolerance for the lobpcg test 'test\_tolerance\_float32'
  - [\#16760](https://github.com/scipy/scipy/pull/16760): BLD: use a bit more idiomatic approach to constructing paths...
  - [\#16768](https://github.com/scipy/scipy/pull/16768): DOC: stats.skew/kurtosis: returns NaN when input has only one...
  - [\#16794](https://github.com/scipy/scipy/pull/16794): BLD/REL: on Windows use numpy 1.22.3 as the version to build...
  - [\#16822](https://github.com/scipy/scipy/pull/16822): BUG/TST: linalg: Check the results of 'schur' more carefully.
  - [\#16825](https://github.com/scipy/scipy/pull/16825): BUG: interpolate: fix "previous" and "next" extrapolate logic...
  - [\#16862](https://github.com/scipy/scipy/pull/16862): BUG, DOC: Fix sphinx autosummary generation for \`odr\` and \`czt\`
  - [\#16881](https://github.com/scipy/scipy/pull/16881): MAINT: optimize.milp: fix input validation when three constraints...
  - [\#16901](https://github.com/scipy/scipy/pull/16901): MAINT: 1.9.1 backports
  - [\#16904](https://github.com/scipy/scipy/pull/16904): BLD: update dependency ranges for meson-python and pybind11 for...

---

1.9.2-notes.md

---

# SciPy 1.9.2 Release Notes

<div class="contents">

</div>

SciPy 1.9.2 is a bug-fix release with no new features compared to 1.9.1. It also provides wheel for Python 3.11 on several platforms.

## Authors

  - Hood Chatham (1)
  - Thomas J. Fan (1)
  - Ralf Gommers (22)
  - Matt Haberland (5)
  - Julien Jerphanion (1)
  - Loïc Estève (1)
  - Nicholas McKibben (2)
  - Naoto Mizuno (1)
  - Andrew Nelson (3)
  - Tyler Reddy (28)
  - Pamphile Roy (1)
  - Ewout ter Hoeven (2)
  - Warren Weckesser (1)
  - Meekail Zain (1) +

A total of 14 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.9.2

  - [\#16545](https://github.com/scipy/scipy/issues/16545): BUG: 1.9.0rc1: \`OptimizeResult\` not populated when \`optimize.milp\`...
  - [\#16569](https://github.com/scipy/scipy/issues/16569): BUG: \`sparse.hstack\` returns incorrect result when the stack...
  - [\#16898](https://github.com/scipy/scipy/issues/16898): BUG: optimize.minimize backwards compatability in scipy 1.9
  - [\#16935](https://github.com/scipy/scipy/issues/16935): BUG: using msvc + meson to build scipy --\> cl cannot be used...
  - [\#16952](https://github.com/scipy/scipy/issues/16952): BUG: error from \`scipy.stats.mode\` with \`NaN\`s, \`axis \!=...
  - [\#16964](https://github.com/scipy/scipy/issues/16964): BUG: scipy 1.7.3 wheels on PyPI require numpy\<1.23 in contradiction...
  - [\#17026](https://github.com/scipy/scipy/issues/17026): BUG: ncf\_gen::ppf(..) causes segfault
  - [\#17050](https://github.com/scipy/scipy/issues/17050): Pearson3 PPF does not function properly with negative skew.
  - [\#17124](https://github.com/scipy/scipy/issues/17124): BUG: OSX-64 Test failure test\_ppf\_against\_tables getting NaN

### Pull requests for 1.9.2

  - [\#16628](https://github.com/scipy/scipy/pull/16628): FIX: Updated dtype resolution in \`\_stack\_along\_minor\_axis\`
  - [\#16814](https://github.com/scipy/scipy/pull/16814): FIX: milp: return feasible solutions if available on time out
  - [\#16842](https://github.com/scipy/scipy/pull/16842): ENH: cibuildwheel infrastructure
  - [\#16909](https://github.com/scipy/scipy/pull/16909): MAINT: minimize, restore squeezed ((1.0)) addresses \#16898
  - [\#16911](https://github.com/scipy/scipy/pull/16911): REL: prep for SciPy 1.9.2
  - [\#16922](https://github.com/scipy/scipy/pull/16922): DOC: update version switcher for 1.9.1 and pin theme to 0.9
  - [\#16934](https://github.com/scipy/scipy/pull/16934): MAINT: cast \`linear\_sum\_assignment\` to PyCFunction
  - [\#16943](https://github.com/scipy/scipy/pull/16943): BLD: use compiler flags in a more portable way
  - [\#16954](https://github.com/scipy/scipy/pull/16954): MAINT: stats.mode: fix bug with \`axis\!=1\`, \`nan\_policy='omit'\`,...
  - [\#16966](https://github.com/scipy/scipy/pull/16966): MAINT: fix NumPy upper bound
  - [\#16969](https://github.com/scipy/scipy/pull/16969): BLD: fix usage of \`get\_install\_data\`, which defaults to purelib
  - [\#16975](https://github.com/scipy/scipy/pull/16975): DOC: Update numpy supported versions for 1.9.2
  - [\#16991](https://github.com/scipy/scipy/pull/16991): BLD: fixes for building with MSVC and Intel Fortran
  - [\#17011](https://github.com/scipy/scipy/pull/17011): Rudimentary test for manylinux\_aarch64 with cibuildwheel
  - [\#17013](https://github.com/scipy/scipy/pull/17013): BLD: make MKL detection a little more robust, add notes on TODOs
  - [\#17046](https://github.com/scipy/scipy/pull/17046): CI: Update cibuildwheel to 2.10.1
  - [\#17055](https://github.com/scipy/scipy/pull/17055): MAINT: stats.pearson3: fix ppf for negative skew
  - [\#17064](https://github.com/scipy/scipy/pull/17064): BUG: Fix numerical precision error of \`truncnorm.logcdf\` when...
  - [\#17096](https://github.com/scipy/scipy/pull/17096): FIX: ensure a hold on GIL before raising warnings/errors
  - [\#17127](https://github.com/scipy/scipy/pull/17127): TST: stats.studentized\_range: fix incorrect test
  - [\#17131](https://github.com/scipy/scipy/pull/17131): MAINT: pyproject.toml: Update build system requirements
  - [\#17132](https://github.com/scipy/scipy/pull/17132): MAINT: 1.9.2 backports

---

1.9.3-notes.md

---

# SciPy 1.9.3 Release Notes

<div class="contents">

</div>

SciPy 1.9.3 is a bug-fix release with no new features compared to 1.9.2.

## Authors

  - Jelle Aalbers (1)
  - Peter Bell (1)
  - Jake Bowhay (3)
  - Matthew Brett (3)
  - Evgeni Burovski (5)
  - drpeteb (1) +
  - Sebastian Ehlert (1) +
  - GavinZhang (1) +
  - Ralf Gommers (2)
  - Matt Haberland (15)
  - Lakshaya Inani (1) +
  - Joseph T. Iosue (1)
  - Nathan Jacobi (1) +
  - jmkuebler (1) +
  - Nikita Karetnikov (1) +
  - Lechnio (1) +
  - Nicholas McKibben (1)
  - Andrew Nelson (1)
  - o-alexandre-felipe (1) +
  - Tirth Patel (1)
  - Tyler Reddy (51)
  - Martin Reinecke (1)
  - Marie Roald (1) +
  - Pamphile Roy (2)
  - Eli Schwartz (1)
  - serge-sans-paille (1)
  - ehsan shirvanian (1) +
  - Mamoru TASAKA (1) +
  - Samuel Wallan (1)
  - Warren Weckesser (7)
  - Gavin Zhang (1) +

A total of 31 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.

### Issues closed for 1.9.3

  - [\#3691](https://github.com/scipy/scipy/issues/3691): scipy.interpolate.UnivariateSpline segfault
  - [\#5286](https://github.com/scipy/scipy/issues/5286): BUG: multivariate\_normal returns a pdf for values outside its...
  - [\#6551](https://github.com/scipy/scipy/issues/6551): BUG: stats: inconsistency in docs and behavior of gmean and hmean
  - [\#9245](https://github.com/scipy/scipy/issues/9245): running scipy.interpolate.tests.test\_fitpack::test\_bisplev\_integer\_overflow...
  - [\#12471](https://github.com/scipy/scipy/issues/12471): test\_bisplev\_integer\_overflow: Segmentation fault (core dumped)
  - [\#13321](https://github.com/scipy/scipy/issues/13321): Bug: setting iprint=0 hides all output from fmin\_l\_bfgs\_b, but...
  - [\#13730](https://github.com/scipy/scipy/issues/13730): \`scipy.stats.mood\` does not correct for ties
  - [\#14019](https://github.com/scipy/scipy/issues/14019): ks\_2samp throws \`RuntimeWarning: overflow encountered in double\_scalars\`
  - [\#14589](https://github.com/scipy/scipy/issues/14589): \`shgo\` error since scipy 1.8.0.dev0+1529.803e52d
  - [\#14591](https://github.com/scipy/scipy/issues/14591): Input data validation for RectSphereBivariateSpline
  - [\#15101](https://github.com/scipy/scipy/issues/15101): BUG: binom.pmf - RuntimeWarning: divide by zero
  - [\#15342](https://github.com/scipy/scipy/issues/15342): BUG: scipy.optimize.minimize: Powell's method function evaluated...
  - [\#15964](https://github.com/scipy/scipy/issues/15964): BUG: lombscargle fails if argument is a view
  - [\#16211](https://github.com/scipy/scipy/issues/16211): BUG: Possible bug when using winsorize on pandas data instead...
  - [\#16459](https://github.com/scipy/scipy/issues/16459): BUG: stats.ttest\_ind returns wrong p-values with permutations
  - [\#16500](https://github.com/scipy/scipy/issues/16500): odr.Model default meta value fails with \_\_getattr\_\_
  - [\#16519](https://github.com/scipy/scipy/issues/16519): BUG: Error in error message for incorrect sample dimension in...
  - [\#16527](https://github.com/scipy/scipy/issues/16527): BUG: dimension of isuppz in syevr is mistranslated
  - [\#16600](https://github.com/scipy/scipy/issues/16600): BUG: \`KDTree\`'s optional argument \`eps\` seems to have no...
  - [\#16656](https://github.com/scipy/scipy/issues/16656): dtype not preserved with operations on sparse arrays
  - [\#16751](https://github.com/scipy/scipy/issues/16751): BUG: \`stats.fit\` on \`boltzmann\` expects \`bound\` for \`lambda\`,...
  - [\#17012](https://github.com/scipy/scipy/issues/17012): BUG: Small oversight in sparse.linalg.lsmr?
  - [\#17020](https://github.com/scipy/scipy/issues/17020): BUG: Build failure due to problems with shebang line in cythoner.py
  - [\#17088](https://github.com/scipy/scipy/issues/17088): BUG: stats.rayleigh.fit: returns \`loc\` that is inconsistent...
  - [\#17104](https://github.com/scipy/scipy/issues/17104): BUG? Incorrect branch in \`LAMV\` / \`\_specfunc.lamv\`
  - [\#17196](https://github.com/scipy/scipy/issues/17196): DOC: keepdims in stats.mode is incorrectly documented

### Pull requests for 1.9.3

  - [\#5288](https://github.com/scipy/scipy/pull/5288): BUG: multivariate\_normal returns a pdf for values outside its...
  - [\#13322](https://github.com/scipy/scipy/pull/13322): Bug: setting iprint=0 hides all output from fmin\_l\_bfgs\_b, but...
  - [\#13349](https://github.com/scipy/scipy/pull/13349): BUG: stats: Reformulate loggamma.\_rvs to handle c \<\< 1.
  - [\#13411](https://github.com/scipy/scipy/pull/13411): BUG: fix out-of-bound evaluations in optimize.minimize, powell...
  - [\#15363](https://github.com/scipy/scipy/pull/15363): BUG: fix powell evaluated outside limits
  - [\#15381](https://github.com/scipy/scipy/pull/15381): BUG: fix stats.rv\_histogram for non-uniform bins
  - [\#16212](https://github.com/scipy/scipy/pull/16212): stats.mood: correct for when ties are present
  - [\#16288](https://github.com/scipy/scipy/pull/16288): BUG: fix a crash in \`fpknot\`
  - [\#16318](https://github.com/scipy/scipy/pull/16318): MAINT: stats: fix \_contains\_nan on Pandas Series
  - [\#16460](https://github.com/scipy/scipy/pull/16460): Fix ttest permutations
  - [\#16506](https://github.com/scipy/scipy/pull/16506): MAINT: fix SHGO extra arguments
  - [\#16521](https://github.com/scipy/scipy/pull/16521): BUG: Fix error in error message for incorrect sample dimension...
  - [\#16525](https://github.com/scipy/scipy/pull/16525): MAINT: stats.ks\_2samp: always emit warning when exact method...
  - [\#16528](https://github.com/scipy/scipy/pull/16528): BUG: fix syevr series segfault by explicitly specifying operator...
  - [\#16562](https://github.com/scipy/scipy/pull/16562): BUG: optimize: Fix differential\_evolution error message.
  - [\#16573](https://github.com/scipy/scipy/pull/16573): FIX: \`odr.Model\` error with default \`meta\` value
  - [\#16588](https://github.com/scipy/scipy/pull/16588): FIX: stats: ignore divide-by-zero warnings from Boost binom impl
  - [\#16590](https://github.com/scipy/scipy/pull/16590): MAINT: stats.vonmises: wrap rvs to -pi, pi interval
  - [\#16630](https://github.com/scipy/scipy/pull/16630): BUG: eps param no effect fixed
  - [\#16645](https://github.com/scipy/scipy/pull/16645): MAINT: Ensure Pythran input for lombscargle are contiguous
  - [\#16649](https://github.com/scipy/scipy/pull/16649): Detect integer overflow in bivariate splines in fitpackmodule.c,...
  - [\#16657](https://github.com/scipy/scipy/pull/16657): BUG: sparse: Fix indexing sparse matrix with empty index arguments.
  - [\#16669](https://github.com/scipy/scipy/pull/16669): FIX: spurious divide error with \`gmean\`
  - [\#16701](https://github.com/scipy/scipy/pull/16701): BUG: fix mutable data types as default arguments in \`ord.{Data,RealData}\`
  - [\#16752](https://github.com/scipy/scipy/pull/16752): MAINT: stats.boltzmann: correct \_shape\_info typo
  - [\#16780](https://github.com/scipy/scipy/pull/16780): BUG: interpolate: sanity check x and y in make\_interp\_spline(x,...
  - [\#16836](https://github.com/scipy/scipy/pull/16836): MAINT: avoid \`func\_data\`, it conflicts with system header on...
  - [\#16872](https://github.com/scipy/scipy/pull/16872): BUG: interpolate: work array sizes for RectSphereBivariateSpline
  - [\#16965](https://github.com/scipy/scipy/pull/16965): BUG: linalg: Fix the XSLOW test test\_sgesdd\_lwork\_bug\_workaround()
  - [\#17043](https://github.com/scipy/scipy/pull/17043): MAINT: fix small LSMR problem
  - [\#17090](https://github.com/scipy/scipy/pull/17090): MAINT: stats.rayleigh: enforce constraint on location
  - [\#17105](https://github.com/scipy/scipy/pull/17105): FIX: special: use intended branching for \`lamv\` implementation
  - [\#17166](https://github.com/scipy/scipy/pull/17166): MAINT: stats.rv\_discrete.pmf: should be zero at non-integer argument
  - [\#17176](https://github.com/scipy/scipy/pull/17176): REL: Prep for SciPy 1.9.3
  - [\#17190](https://github.com/scipy/scipy/pull/17190): BUG: special: Fix two XSLOW test failures.
  - [\#17193](https://github.com/scipy/scipy/pull/17193): MAINT: update meson.build to make it work on IBM i system
  - [\#17200](https://github.com/scipy/scipy/pull/17200): BLD: fix issue with incomplete threads dependency handling
  - [\#17204](https://github.com/scipy/scipy/pull/17204): Keepdims incorrectly documneted fix
  - [\#17209](https://github.com/scipy/scipy/pull/17209): MAINT: Handle numpy's deprecation of accepting out-of-bound integers.
  - [\#17210](https://github.com/scipy/scipy/pull/17210): BLD: fix invalid shebang for build helper script

---

release.md

---

# Release Notes

This is the list of changes to SciPy between each release. For full details,-notes see the [commit logs](https://github.com/scipy/scipy/commits/).

<div class="toctree" data-maxdepth="1">

release/1.15.0-notes release/1.14.1-notes release/1.14.0-notes release/1.13.1-notes release/1.13.0-notes release/1.12.0-notes release/1.11.4-notes release/1.11.3-notes release/1.11.2-notes release/1.11.1-notes release/1.11.0-notes release/1.10.1-notes release/1.10.0-notes release/1.9.3-notes release/1.9.2-notes release/1.9.1-notes release/1.9.0-notes release/1.8.1-notes release/1.8.0-notes release/1.7.3-notes release/1.7.2-notes release/1.7.1-notes release/1.7.0-notes release/1.6.3-notes release/1.6.2-notes release/1.6.1-notes release/1.6.0-notes release/1.5.4-notes release/1.5.3-notes release/1.5.2-notes release/1.5.1-notes release/1.5.0-notes release/1.4.1-notes release/1.4.0-notes release/1.3.3-notes release/1.3.2-notes release/1.3.1-notes release/1.3.0-notes release/1.2.3-notes release/1.2.2-notes release/1.2.1-notes release/1.2.0-notes release/1.1.0-notes release/1.0.1-notes release/1.0.0-notes release/0.19.1-notes release/0.19.0-notes release/0.18.1-notes release/0.18.0-notes release/0.17.1-notes release/0.17.0-notes release/0.16.1-notes release/0.16.0-notes release/0.15.1-notes release/0.15.0-notes release/0.14.1-notes release/0.14.0-notes release/0.13.2-notes release/0.13.1-notes release/0.13.0-notes release/0.12.1-notes release/0.12.0-notes release/0.11.0-notes release/0.10.1-notes release/0.10.0-notes release/0.9.0-notes release/0.8.0-notes release/0.7.2-notes release/0.7.1-notes release/0.7.0-notes

</div>

---

arpack.md

---

# Sparse eigenvalue problems with ARPACK

<div class="sectionauthor">

Jake Vanderplas \<<vanderplas@astro.washington.edu>\>

</div>

<div class="sectionauthor">

Matteo Ravasi \<<matteoravasi@gmail.com>\>

</div>

<div class="currentmodule">

scipy.sparse.linalg

</div>

## Introduction

ARPACK\[1\] is a Fortran package which provides routines for quickly finding a few eigenvalues/eigenvectors of large sparse matrices. In order to find these solutions, it requires only left-multiplication by the matrix in question. This operation is performed through a *reverse-communication* interface. The result of this structure is that ARPACK is able to find eigenvalues and eigenvectors of any linear function mapping a vector to a vector.

All of the functionality provided in ARPACK is contained within the two high-level interfaces <span class="title-ref">scipy.sparse.linalg.eigs</span> and <span class="title-ref">scipy.sparse.linalg.eigsh</span>. <span class="title-ref">eigs</span> provides interfaces for finding the eigenvalues/vectors of real or complex nonsymmetric square matrices, while <span class="title-ref">eigsh</span> provides interfaces for real-symmetric or complex-hermitian matrices.

## Basic functionality

ARPACK can solve either standard eigenvalue problems of the form

\[A \mathbf{x} = \lambda \mathbf{x}\]

or general eigenvalue problems of the form

\[A \mathbf{x} = \lambda M \mathbf{x}.\]

The power of ARPACK is that it can compute only a specified subset of eigenvalue/eigenvector pairs. This is accomplished through the keyword `which`. The following values of `which` are available:

  - `which = 'LM'` : Eigenvalues with largest magnitude (`eigs`, `eigsh`), that is, largest eigenvalues in the euclidean norm of complex numbers.
  - `which = 'SM'` : Eigenvalues with smallest magnitude (`eigs`, `eigsh`), that is, smallest eigenvalues in the euclidean norm of complex numbers.
  - `which = 'LR'` : Eigenvalues with largest real part (`eigs`).
  - `which = 'SR'` : Eigenvalues with smallest real part (`eigs`).
  - `which = 'LI'` : Eigenvalues with largest imaginary part (`eigs`).
  - `which = 'SI'` : Eigenvalues with smallest imaginary part (`eigs`).
  - `which = 'LA'` : Eigenvalues with largest algebraic value (`eigsh`), that is, largest eigenvalues inclusive of any negative sign.
  - `which = 'SA'` : Eigenvalues with smallest algebraic value (`eigsh`), that is, smallest eigenvalues inclusive of any negative sign.
  - `which = 'BE'` : Eigenvalues from both ends of the spectrum (`eigsh`).

Note that ARPACK is generally better at finding extremal eigenvalues, that is, eigenvalues with large magnitudes. In particular, using `which = 'SM'` may lead to slow execution time and/or anomalous results. A better approach is to use *shift-invert mode*.

## Shift-invert mode

Shift-invert mode relies on the following observation. For the generalized eigenvalue problem

\[A \mathbf{x} = \lambda M \mathbf{x},\]

it can be shown that

\[(A - \sigma M)^{-1} M \mathbf{x} = \nu \mathbf{x},\]

where

\[\nu = \frac{1}{\lambda - \sigma}.\]

## Examples

Imagine you'd like to find the smallest and largest eigenvalues and the corresponding eigenvectors for a large matrix. ARPACK can handle many forms of input: dense matrices ,such as <span class="title-ref">numpy.ndarray</span> instances, sparse matrices, such as <span class="title-ref">scipy.sparse.csr\_matrix</span>, or a general linear operator derived from <span class="title-ref">scipy.sparse.linalg.LinearOperator</span>. For this example, for simplicity, we'll construct a symmetric, positive-definite matrix.

> \>\>\> import numpy as np \>\>\> from scipy.linalg import eig, eigh \>\>\> from scipy.sparse.linalg import eigs, eigsh \>\>\> np.set\_printoptions(suppress=True) \>\>\> rng = np.random.default\_rng() \>\>\> \>\>\> X = rng.random((100, 100)) - 0.5 \>\>\> X = np.dot(X, X.T) \# create a symmetric matrix

We now have a symmetric matrix `X`, with which to test the routines. First, compute a standard eigenvalue decomposition using `eigh`:

> \>\>\> evals\_all, evecs\_all = eigh(X)

As the dimension of `X` grows, this routine becomes very slow. Especially, if only a few eigenvectors and eigenvalues are needed, `ARPACK` can be a better option. First let's compute the largest eigenvalues (`which = 'LM'`) of `X` and compare them to the known results:

> \>\>\> evals\_large, evecs\_large = eigsh(X, 3, which='LM') \>\>\> print(evals\_all\[-3:\]) \[29.22435321 30.05590784 30.58591252\] \>\>\> print(evals\_large) \[29.22435321 30.05590784 30.58591252\] \>\>\> print(np.dot(evecs\_large.T, evecs\_all\[:,-3:\])) array(\[\[-1. 0. 0.\], \# may vary (signs) \[ 0. 1. 0.\], \[-0. 0. -1.\]\])

The results are as expected. ARPACK recovers the desired eigenvalues and they match the previously known results. Furthermore, the eigenvectors are orthogonal, as we'd expect. Now, let's attempt to solve for the eigenvalues with smallest magnitude:

> \>\>\> evals\_small, evecs\_small = eigsh(X, 3, which='SM') Traceback (most recent call last): \# may vary (convergence) ... scipy.sparse.linalg.\_eigen.arpack.arpack.ArpackNoConvergence: ARPACK error -1: No convergence (1001 iterations, 0/3 eigenvectors converged)

Oops. We see that, as mentioned above, `ARPACK` is not quite as adept at finding small eigenvalues. There are a few ways this problem can be addressed. We could increase the tolerance (`tol`) to lead to faster convergence:

> \>\>\> evals\_small, evecs\_small = eigsh(X, 3, which='SM', tol=1E-2) \>\>\> evals\_all\[:3\] array(\[0.00053181, 0.00298319, 0.01387821\]) \>\>\> evals\_small array(\[0.00053181, 0.00298319, 0.01387821\]) \>\>\> np.dot(evecs\_small.T, evecs\_all\[:,:3\]) array(\[\[ 0.99999999 0.00000024 -0.00000049\], \# may vary (signs) \[-0.00000023 0.99999999 0.00000056\], \[ 0.00000031 -0.00000037 0.99999852\]\])

This works, but we lose the precision in the results. Another option is to increase the maximum number of iterations (`maxiter`) from 1000 to 5000:

> \>\>\> evals\_small, evecs\_small = eigsh(X, 3, which='SM', maxiter=5000) \>\>\> evals\_all\[:3\] array(\[0.00053181, 0.00298319, 0.01387821\]) \>\>\> evals\_small array(\[0.00053181, 0.00298319, 0.01387821\]) \>\>\> np.dot(evecs\_small.T, evecs\_all\[:,:3\]) array(\[\[ 1. 0. 0.\], \# may vary (signs) \[-0. 1. 0.\], \[ 0. 0. -1.\]\])

We get the results we'd hoped for, but the computation time is much longer. Fortunately, `ARPACK` contains a mode that allows a quick determination of non-external eigenvalues: *shift-invert mode*. As mentioned above, this mode involves transforming the eigenvalue problem to an equivalent problem with different eigenvalues. In this case, we hope to find eigenvalues near zero, so we'll choose `sigma = 0`. The transformed eigenvalues will then satisfy \(\nu = 1/(\lambda - \sigma) = 1/\lambda\), so our small eigenvalues \(\lambda\) become large eigenvalues \(\nu\).

> \>\>\> evals\_small, evecs\_small = eigsh(X, 3, sigma=0, which='LM') \>\>\> evals\_all\[:3\] array(\[0.00053181, 0.00298319, 0.01387821\]) \>\>\> evals\_small array(\[0.00053181, 0.00298319, 0.01387821\]) \>\>\> np.dot(evecs\_small.T, evecs\_all\[:,:3\]) array(\[\[ 1. 0. 0.\], \# may vary (signs) \[ 0. -1. -0.\], \[-0. -0. 1.\]\])

We get the results we were hoping for, with much less computational time. Note that the transformation from \(\nu \to \lambda\) takes place entirely in the background. The user need not worry about the details.

The shift-invert mode provides more than just a fast way to obtain a few small eigenvalues. Say, you desire to find internal eigenvalues and eigenvectors, e.g., those nearest to \(\lambda = 1\). Simply set `sigma = 1` and ARPACK will take care of the rest:

> \>\>\> evals\_mid, evecs\_mid = eigsh(X, 3, sigma=1, which='LM') \>\>\> i\_sort = np.argsort(abs(1. / (1 - evals\_all)))\[-3:\] \>\>\> evals\_all\[i\_sort\] array(\[0.94164107, 1.05464515, 0.99090277\]) \>\>\> evals\_mid array(\[0.94164107, 0.99090277, 1.05464515\]) \>\>\> print(np.dot(evecs\_mid.T, evecs\_all\[:,i\_sort\])) array(\[\[-0. 1. 0.\], \# may vary (signs) \[-0. -0. 1.\], \[ 1. 0. 0.\]\]

The eigenvalues come out in a different order, but they're all there. Note that the shift-invert mode requires the internal solution of a matrix inverse. This is taken care of automatically by `eigsh` and <span class="title-ref">eigs</span>, but the operation can also be specified by the user. See the docstring of <span class="title-ref">scipy.sparse.linalg.eigsh</span> and <span class="title-ref">scipy.sparse.linalg.eigs</span> for details.

## Use of LinearOperator

We consider now the case where you'd like to avoid creating a dense matrix and use <span class="title-ref">scipy.sparse.linalg.LinearOperator</span> instead. Our first linear operator applies element-wise multiplication between the input vector and a vector \(\mathbf{d}\) provided by the user to the operator itself. This operator mimics a diagonal matrix with the elements of \(\mathbf{d}\) along the main diagonal and it has the main benefit that the forward and adjoint operations are simple element-wise multiplications other than matrix-vector multiplications. For a diagonal matrix, we expect the eigenvalues to be equal to the elements along the main diagonal, in this case \(\mathbf{d}\). The eigenvalues and eigenvectors obtained with `eigsh` are compared to those obtained by using `eigh` when applied to the dense matrix:

> \>\>\> from scipy.sparse.linalg import LinearOperator \>\>\> class Diagonal(LinearOperator): ... def \_\_init\_\_(self, diag, dtype='float32'): ... self.diag = diag ... self.shape = (len(self.diag), len(self.diag)) ... self.dtype = np.dtype(dtype) ... def \_matvec(self, x): ... return self.diag\*x ... def \_rmatvec(self, x): ... return self.diag\*x
> 
> \>\>\> N = 100 \>\>\> rng = np.random.default\_rng() \>\>\> d = rng.normal(0, 1, N).astype(np.float64) \>\>\> D = np.diag(d) \>\>\> Dop = Diagonal(d, dtype=np.float64)
> 
> \>\>\> evals\_all, evecs\_all = eigh(D) \>\>\> evals\_large, evecs\_large = eigsh(Dop, 3, which='LA', maxiter=1e3) \>\>\> evals\_all\[-3:\] array(\[1.53092498, 1.77243671, 2.00582508\]) \>\>\> evals\_large array(\[1.53092498, 1.77243671, 2.00582508\]) \>\>\> print(np.dot(evecs\_large.T, evecs\_all\[:,-3:\])) array(\[\[-1. 0. 0.\], \# may vary (signs) \[-0. -1. 0.\], \[ 0. 0. -1.\]\]

In this case, we have created a quick and easy `Diagonal` operator. The external library [PyLops](https://pylops.readthedocs.io) provides similar capabilities in the [Diagonal \<https://pylops.readthedocs.io/en/ latest/api/generated/pylops.Diagonal.html\#pylops.Diagonal\>]() operator, as well as several other operators.

Finally, we consider a linear operator that mimics the application of a first-derivative stencil. In this case, the operator is equivalent to a real nonsymmetric matrix. Once again, we compare the estimated eigenvalues and eigenvectors with those from a dense matrix that applies the same first derivative to an input signal:

> \>\>\> class FirstDerivative(LinearOperator): ... def \_\_init\_\_(self, N, dtype='float32'): ... self.N = N ... self.shape = (self.N, self.N) ... self.dtype = np.dtype(dtype) ... def \_matvec(self, x): ... y = np.zeros(self.N, self.dtype) ... y\[1:-1\] = (0.5\*x\[2:\]-0.5\*x\[0:-2\]) ... return y ... def \_rmatvec(self, x): ... y = np.zeros(self.N, self.dtype) ... y\[0:-2\] = y\[0:-2\] - (0.5\*x\[1:-1\]) ... y\[2:\] = y\[2:\] + (0.5\*x\[1:-1\]) ... return y
> 
> \>\>\> N = 21 \>\>\> D = np.diag(0.5\*np.ones(N-1), k=1) - np.diag(0.5\*np.ones(N-1), k=-1) \>\>\> D\[0\] = D\[-1\] = 0 \# take away edge effects \>\>\> Dop = FirstDerivative(N, dtype=np.float64)
> 
> \>\>\> evals\_all, evecs\_all = eig(D) \>\>\> evals\_large, evecs\_large = eigs(Dop, 4, which='LI') \>\>\> evals\_all\_imag = evals\_all.imag \>\>\> isort\_imag = np.argsort(np.abs(evals\_all\_imag)) \>\>\> evals\_all\_imag = evals\_all\_imag\[isort\_imag\] \>\>\> evals\_large\_imag = evals\_large.imag \>\>\> isort\_imag = np.argsort(np.abs(evals\_large\_imag)) \>\>\> evals\_large\_imag = evals\_large\_imag\[isort\_imag\] \>\>\> evals\_all\_imag\[-4:\] array(\[-0.95105652, 0.95105652, -0.98768834, 0.98768834\]) \>\>\> evals\_large\_imag array(\[0.95105652, -0.95105652, 0.98768834, -0.98768834\]) \# may vary

Note that the eigenvalues of this operator are all imaginary. Moreover, the keyword `which='LI'` of <span class="title-ref">scipy.sparse.linalg.eigs</span> produces the eigenvalues with largest absolute imaginary part (both positive and negative). Again, a more advanced implementation of the first-derivative operator is available in the [PyLops](https://pylops.readthedocs.io) library under the name of [FirstDerivative \<https://pylops. readthedocs.io/en/latest/api/generated/pylops.FirstDerivative.html\>]() operator.

## References

1.  <https://github.com/opencollab/arpack-ng>

---

csgraph.md

---

# Compressed Sparse Graph Routines (<span class="title-ref">scipy.sparse.csgraph</span>)

<div class="sectionauthor">

Jake Vanderplas \<<vanderplas@astro.washington.edu>\>

</div>

<div class="currentmodule">

scipy.sparse.csgraph

</div>

## Example: Word Ladders

A [Word Ladder](https://en.wikipedia.org/wiki/Word_ladder) is a word game invented by Lewis Carroll, in which players find paths between words by switching one letter at a time. For example, one can link "ape" and "man" in the following way:

\[{\rm ape \to apt \to ait \to bit \to big \to bag \to mag \to man}\]

Note that each step involves changing just one letter of the word. This is just one possible path from "ape" to "man", but is it the shortest possible path? If we desire to find the shortest word-ladder path between two given words, the sparse graph submodule can help.

First, we need a list of valid words. Many operating systems have such a list built in. For example, on linux, a word list can often be found at one of the following locations:

    /usr/share/dict
    /var/lib/dict

Another easy source for words are the Scrabble word lists available at various sites around the internet (search with your favorite search engine). We'll first create this list. The system word lists consist of a file with one word per line. The following should be modified to use the particular word list you have available:

    >>> with open('/usr/share/dict/words') as f:
    ...    word_list = f.readlines()
    >>> word_list = map(str.strip, word_list)

We want to look at words of length 3, so let's select just those words of the correct length. We'll also eliminate words which start with upper-case (proper nouns) or contain non-alphanumeric characters, like apostrophes and hyphens. Finally, we'll make sure everything is lower-case for comparison later:

    >>> word_list = [word for word in word_list if len(word) == 3]
    >>> word_list = [word for word in word_list if word[0].islower()]
    >>> word_list = [word for word in word_list if word.isalpha()]
    >>> word_list = list(map(str.lower, word_list))
    >>> len(word_list)
    586    # may vary

Now we have a list of 586 valid three-letter words (the exact number may change depending on the particular list used). Each of these words will become a node in our graph, and we will create edges connecting the nodes associated with each pair of words which differs by only one letter.

There are efficient ways to do this, and inefficient ways to do this. To do this as efficiently as possible, we're going to use some sophisticated numpy array manipulation:

> \>\>\> import numpy as np \>\>\> word\_list = np.asarray(word\_list) \>\>\> word\_list.dtype \# these are unicode characters in Python 3 dtype('\<U3') \>\>\> word\_list.sort() \# sort for quick searching later

We have an array where each entry is three unicode characters long. We'd like to find all pairs where exactly one character is different. We'll start by converting each word to a 3-D vector:

> \>\>\> word\_bytes = np.ndarray((word\_list.size, word\_list.itemsize), ... dtype='uint8', ... buffer=word\_list.data) \>\>\> \# each unicode character is four bytes long. We only need first byte \>\>\> \# we know that there are three characters in each word \>\>\> word\_bytes = word\_bytes\[:, ::word\_list.itemsize//3\] \>\>\> word\_bytes.shape (586, 3) \# may vary

Now, we'll use the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between each point to determine which pairs of words are connected. The Hamming distance measures the fraction of entries between two vectors which differ: any two words with a Hamming distance equal to \(1/N\), where \(N\) is the number of letters, are connected in the word ladder:

    >>> from scipy.spatial.distance import pdist, squareform
    >>> from scipy.sparse import csr_matrix
    >>> hamming_dist = pdist(word_bytes, metric='hamming')
    >>> # there are three characters in each word
    >>> graph = csr_matrix(squareform(hamming_dist < 1.5 / 3))

When comparing the distances, we don't use an equality because this can be unstable for floating point values. The inequality produces the desired result, as long as no two entries of the word list are identical. Now, that our graph is set up, we'll use a shortest path search to find the path between any two words in the graph:

    >>> i1 = word_list.searchsorted('ape')
    >>> i2 = word_list.searchsorted('man')
    >>> word_list[i1]
    'ape'
    >>> word_list[i2]
    'man'

We need to check that these match, because if the words are not in the list, that will not be the case. Now, all we need is to find the shortest path between these two indices in the graph. We'll use [Dijkstra's algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm), because it allows us to find the path for just one node:

    >>> from scipy.sparse.csgraph import dijkstra
    >>> distances, predecessors = dijkstra(graph, indices=i1,
    ...                                    return_predecessors=True)
    >>> print(distances[i2])
    5.0    # may vary

So we see that the shortest path between "ape" and "man" contains only five steps. We can use the predecessors returned by the algorithm to reconstruct this path:

    >>> path = []
    >>> i = i2
    >>> while i != i1:
    ...     path.append(word_list[i])
    ...     i = predecessors[i]
    >>> path.append(word_list[i1])
    >>> print(path[::-1])
    ['ape', 'apt', 'opt', 'oat', 'mat', 'man']    # may vary

This is three fewer links than our initial example: the path from "ape" to "man" is only five steps.

Using other tools in the module, we can answer other questions. For example, are there three-letter words which are not linked in a word ladder? This is a question of connected components in the graph:

    >>> from scipy.sparse.csgraph import connected_components
    >>> N_components, component_list = connected_components(graph)
    >>> print(N_components)
    15    # may vary

In this particular sample of three-letter words, there are 15 connected components: that is, 15 distinct sets of words with no paths between the sets. How many words are there in each of these sets? We can learn this from the list of components:

    >>> [np.sum(component_list == i) for i in range(N_components)]
    [571, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]    # may vary

There is one large connected set and 14 smaller ones. Let's look at the words in the smaller ones:

    >>> [list(word_list[np.nonzero(component_list == i)]) for i in range(1, N_components)]
    [['aha'],    # may vary
     ['chi'],
     ['ebb'],
     ['ems', 'emu'],
     ['gnu'],
     ['ism'],
     ['khz'],
     ['nth'],
     ['ova'],
     ['qua'],
     ['ugh'],
     ['ups'],
     ['urn'],
     ['use']]

These are all the three-letter words which do not connect to others via a word ladder.

We might also be curious about which words are maximally separated. Which two words take the most links to connect? We can determine this by computing the matrix of all shortest paths. Note that, by convention, the distance between two non-connected points is reported to be infinity, so we'll need to remove these before finding the maximum:

    >>> distances, predecessors = dijkstra(graph, return_predecessors=True)
    >>> max_distance = np.max(distances[~np.isinf(distances)])
    >>> print(max_distance)
    13.0    # may vary

So, there is at least one pair of words which takes 13 steps to get from one to the other\! Let's determine which these are:

    >>> i1, i2 = np.nonzero(distances == max_distance)
    >>> list(zip(word_list[i1], word_list[i2]))
    [('imp', 'ohm'),    # may vary
     ('imp', 'ohs'),
     ('ohm', 'imp'),
     ('ohm', 'ump'),
     ('ohs', 'imp'),
     ('ohs', 'ump'),
     ('ump', 'ohm'),
     ('ump', 'ohs')]

We see that there are two pairs of words which are maximally separated from each other: 'imp' and 'ump' on the one hand, and 'ohm' and 'ohs' on the other. We can find the connecting list in the same way as above:

    >>> path = []
    >>> i = i2[0]
    >>> while i != i1[0]:
    ...     path.append(word_list[i])
    ...     i = predecessors[i1[0], i]
    >>> path.append(word_list[i1[0]])
    >>> print(path[::-1])
    ['imp', 'amp', 'asp', 'ass', 'ads', 'add', 'aid', 'mid', 'mod', 'moo', 'too', 'tho', 'oho', 'ohm']    # may vary

This gives us the path we desired to see.

Word ladders are just one potential application of scipy's fast graph algorithms for sparse matrices. Graph theory makes appearances in many areas of mathematics, data analysis, and machine learning. The sparse graph tools are flexible enough to handle many of these situations.

---

fft.md

---

# Fourier Transforms (`scipy.fft`)

<div class="sectionauthor">

SciPy Developers

</div>

<div class="currentmodule">

scipy.fft

</div>

<div class="contents">

</div>

Fourier analysis is a method for expressing a function as a sum of periodic components, and for recovering the signal from those components. When both the function and its Fourier transform are replaced with discretized counterparts, it is called the discrete Fourier transform (DFT). The DFT has become a mainstay of numerical computing in part because of a very fast algorithm for computing it, called the Fast Fourier Transform (FFT), which was known to Gauss (1805) and was brought to light in its current form by Cooley and Tukey [\[CT65\]](#CT65). Press et al. [\[NR07\]](#NR07) provide an accessible introduction to Fourier analysis and its applications.

## Fast Fourier transforms

### 1-D discrete Fourier transforms

The FFT `y[k]` of length \(N\) of the length-\(N\) sequence `x[n]` is defined as

\[y[k] = \sum_{n=0}^{N-1} e^{-2 \pi j \frac{k n}{N} } x[n] \, ,\]

and the inverse transform is defined as follows

\[x[n] = \frac{1}{N} \sum_{k=0}^{N-1} e^{2 \pi j \frac{k n}{N} } y[k] \, .\]

These transforms can be calculated by means of <span class="title-ref">fft</span> and <span class="title-ref">ifft</span>, respectively, as shown in the following example.

\>\>\> from scipy.fft import fft, ifft \>\>\> import numpy as np \>\>\> x = np.array(\[1.0, 2.0, 1.0, -1.0, 1.5\]) \>\>\> y = fft(x) \>\>\> y array(\[ 4.5 +0.j , 2.08155948-1.65109876j, -1.83155948+1.60822041j, -1.83155948-1.60822041j, 2.08155948+1.65109876j\]) \>\>\> yinv = ifft(y) \>\>\> yinv array(\[ 1.0+0.j, 2.0+0.j, 1.0+0.j, -1.0+0.j, 1.5+0.j\])

From the definition of the FFT it can be seen that

\[y[0] = \sum_{n=0}^{N-1} x[n] \, .\]

In the example

\>\>\> np.sum(x) 4.5

which corresponds to \(y[0]\). For N even, the elements \(y[1]...y[N/2-1]\) contain the positive-frequency terms, and the elements \(y[N/2]...y[N-1]\) contain the negative-frequency terms, in order of decreasingly negative frequency. For N odd, the elements \(y[1]...y[(N-1)/2]\) contain the positive-frequency terms, and the elements \(y[(N+1)/2]...y[N-1]\) contain the negative-frequency terms, in order of decreasingly negative frequency.

In case the sequence x is real-valued, the values of \(y[n]\) for positive frequencies is the conjugate of the values \(y[n]\) for negative frequencies (because the spectrum is symmetric). Typically, only the FFT corresponding to positive frequencies is plotted.

The example plots the FFT of the sum of two sines.

<div class="plot" alt="&quot;This code generates an X-Y plot showing amplitude on the Y axis vs frequency on the X axis. A single blue trace has an amplitude of zero all the way across with the exception of two peaks. The taller first peak is at 50 Hz with a second peak at 80 Hz.&quot;">

\>\>\> from scipy.fft import fft, fftfreq \>\>\> import numpy as np \>\>\> \# Number of sample points \>\>\> N = 600 \>\>\> \# sample spacing \>\>\> T = 1.0 / 800.0 \>\>\> x = np.linspace(0.0, N\*T, N, endpoint=False) \>\>\> y = np.sin(50.0 \* 2.0\*np.pi\*x) + 0.5\*np.sin(80.0 \* 2.0\*np.pi\*x) \>\>\> yf = fft(y) \>\>\> xf = fftfreq(N, T)\[:N//2\] \>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(xf, 2.0/N \* np.abs(yf\[0:N//2\])) \>\>\> plt.grid() \>\>\> plt.show()

</div>

The FFT input signal is inherently truncated. This truncation can be modeled as multiplication of an infinite signal with a rectangular window function. In the spectral domain this multiplication becomes convolution of the signal spectrum with the window function spectrum, being of form \(\sin(x)/x\). This convolution is the cause of an effect called spectral leakage (see [\[WPW\]](#WPW)). Windowing the signal with a dedicated window function helps mitigate spectral leakage. The example below uses a Blackman window from scipy.signal and shows the effect of windowing (the zero component of the FFT has been truncated for illustrative purposes).

<div class="plot" alt="&quot;This code generates an X-Y log-linear plot with amplitude on the Y axis vs frequency on the X axis. The first trace is the FFT with two peaks at 50 and 80 Hz and a noise floor around an amplitude of 1e-2. The second trace is the windowed FFT and has the same two peaks but the noise floor is much lower around an amplitude of 1e-7 due to the window function.&quot;">

\>\>\> from scipy.fft import fft, fftfreq \>\>\> import numpy as np \>\>\> \# Number of sample points \>\>\> N = 600 \>\>\> \# sample spacing \>\>\> T = 1.0 / 800.0 \>\>\> x = np.linspace(0.0, N\*T, N, endpoint=False) \>\>\> y = np.sin(50.0 \* 2.0\*np.pi\*x) + 0.5\*np.sin(80.0 \* 2.0\*np.pi\*x) \>\>\> yf = fft(y) \>\>\> from scipy.signal.windows import blackman \>\>\> w = blackman(N) \>\>\> ywf = fft(y\*w) \>\>\> xf = fftfreq(N, T)\[:N//2\] \>\>\> import matplotlib.pyplot as plt \>\>\> plt.semilogy(xf\[1:N//2\], 2.0/N \* np.abs(yf\[1:N//2\]), '-b') \>\>\> plt.semilogy(xf\[1:N//2\], 2.0/N \* np.abs(ywf\[1:N//2\]), '-r') \>\>\> plt.legend(\['FFT', 'FFT w. window'\]) \>\>\> plt.grid() \>\>\> plt.show()

</div>

In case the sequence x is complex-valued, the spectrum is no longer symmetric. To simplify working with the FFT functions, scipy provides the following two helper functions.

The function <span class="title-ref">fftfreq</span> returns the FFT sample frequency points.

\>\>\> from scipy.fft import fftfreq \>\>\> freq = fftfreq(8, 0.125) \>\>\> freq array(\[ 0., 1., 2., 3., -4., -3., -2., -1.\])

In a similar spirit, the function <span class="title-ref">fftshift</span> allows swapping the lower and upper halves of a vector, so that it becomes suitable for display.

\>\>\> from scipy.fft import fftshift \>\>\> x = np.arange(8) \>\>\> fftshift(x) array(\[4, 5, 6, 7, 0, 1, 2, 3\])

The example below plots the FFT of two complex exponentials; note the asymmetric spectrum.

<div class="plot" alt="&quot;This code generates an X-Y plot with amplitude on the Y axis vs frequency on the X axis. The trace is zero-valued across the plot except for two sharp peaks at -80 and 50 Hz. The 50 Hz peak on the right is twice as tall.&quot;">

\>\>\> from scipy.fft import fft, fftfreq, fftshift \>\>\> import numpy as np \>\>\> \# number of signal points \>\>\> N = 400 \>\>\> \# sample spacing \>\>\> T = 1.0 / 800.0 \>\>\> x = np.linspace(0.0, N\*T, N, endpoint=False) \>\>\> y = np.exp(50.0 \* 1.j \* 2.0\*np.pi\*x) + 0.5\*np.exp(-80.0 \* 1.j \* 2.0\*np.pi\*x) \>\>\> yf = fft(y) \>\>\> xf = fftfreq(N, T) \>\>\> xf = fftshift(xf) \>\>\> yplot = fftshift(yf) \>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(xf, 1.0/N \* np.abs(yplot)) \>\>\> plt.grid() \>\>\> plt.show()

</div>

The function <span class="title-ref">rfft</span> calculates the FFT of a real sequence and outputs the complex FFT coefficients \(y[n]\) for only half of the frequency range. The remaining negative frequency components are implied by the Hermitian symmetry of the FFT for a real input (`y[n] = conj(y[-n])`). In case of N being even: \([Re(y[0]) + 0j, y[1], ..., Re(y[N/2]) + 0j]\); in case of N being odd \([Re(y[0]) + 0j, y[1], ..., y[N/2]\). The terms shown explicitly as \(Re(y[k]) + 0j\) are restricted to be purely real since, by the hermitian property, they are their own complex conjugate.

The corresponding function <span class="title-ref">irfft</span> calculates the IFFT of the FFT coefficients with this special ordering.

\>\>\> from scipy.fft import fft, rfft, irfft \>\>\> x = np.array(\[1.0, 2.0, 1.0, -1.0, 1.5, 1.0\]) \>\>\> fft(x) array(\[ 5.5 +0.j , 2.25-0.4330127j , -2.75-1.29903811j, 1.5 +0.j , -2.75+1.29903811j, 2.25+0.4330127j \]) \>\>\> yr = rfft(x) \>\>\> yr array(\[ 5.5 +0.j , 2.25-0.4330127j , -2.75-1.29903811j, 1.5 +0.j \]) \>\>\> irfft(yr) array(\[ 1. , 2. , 1. , -1. , 1.5, 1. \]) \>\>\> x = np.array(\[1.0, 2.0, 1.0, -1.0, 1.5\]) \>\>\> fft(x) array(\[ 4.5 +0.j , 2.08155948-1.65109876j, -1.83155948+1.60822041j, -1.83155948-1.60822041j, 2.08155948+1.65109876j\]) \>\>\> yr = rfft(x) \>\>\> yr array(\[ 4.5 +0.j , 2.08155948-1.65109876j, -1.83155948+1.60822041j\])

Notice that the <span class="title-ref">rfft</span> of odd and even length signals are of the same shape. By default, <span class="title-ref">irfft</span> assumes the output signal should be of even length. And so, for odd signals, it will give the wrong result:

\>\>\> irfft(yr) array(\[ 1.70788987, 2.40843925, -0.37366961, 0.75734049\])

To recover the original odd-length signal, we **must** pass the output shape by the <span class="title-ref">n</span> parameter.

\>\>\> irfft(yr, n=len(x)) array(\[ 1. , 2. , 1. , -1. , 1.5\])

### 2- and N-D discrete Fourier transforms

The functions <span class="title-ref">fft2</span> and <span class="title-ref">ifft2</span> provide 2-D FFT and IFFT, respectively. Similarly, <span class="title-ref">fftn</span> and <span class="title-ref">ifftn</span> provide N-D FFT, and IFFT, respectively.

For real-input signals, similarly to <span class="title-ref">rfft</span>, we have the functions <span class="title-ref">rfft2</span> and <span class="title-ref">irfft2</span> for 2-D real transforms; <span class="title-ref">rfftn</span> and <span class="title-ref">irfftn</span> for N-D real transforms.

The example below demonstrates a 2-D IFFT and plots the resulting (2-D) time-domain signals.

<div class="plot" alt="&quot;This code generates six heatmaps arranged in a 2x3 grid. The top row shows mostly blank canvases with the exception of two tiny red peaks on each image. The bottom row shows the real-part of the inverse FFT of each image above it. The first column has two dots arranged horizontally in the top image and in the bottom image a smooth grayscale plot of 5 black vertical stripes representing the 2-D time domain signal. The second column has two dots arranged vertically in the top image and in the bottom image a smooth grayscale plot of 5 horizontal black stripes representing the 2-D time domain signal. In the last column the top image has two dots diagonally located; the corresponding image below has perhaps 20 black stripes at a 60 degree angle.&quot;">

\>\>\> from scipy.fft import ifftn \>\>\> import matplotlib.pyplot as plt \>\>\> import matplotlib.cm as cm \>\>\> import numpy as np \>\>\> N = 30 \>\>\> f, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2, 3, sharex='col', sharey='row') \>\>\> xf = np.zeros((N,N)) \>\>\> xf\[0, 5\] = 1 \>\>\> xf\[0, N-5\] = 1 \>\>\> Z = ifftn(xf) \>\>\> ax1.imshow(xf, cmap=cm.Reds) \>\>\> ax4.imshow(np.real(Z), cmap=cm.gray) \>\>\> xf = np.zeros((N, N)) \>\>\> xf\[5, 0\] = 1 \>\>\> xf\[N-5, 0\] = 1 \>\>\> Z = ifftn(xf) \>\>\> ax2.imshow(xf, cmap=cm.Reds) \>\>\> ax5.imshow(np.real(Z), cmap=cm.gray) \>\>\> xf = np.zeros((N, N)) \>\>\> xf\[5, 10\] = 1 \>\>\> xf\[N-5, N-10\] = 1 \>\>\> Z = ifftn(xf) \>\>\> ax3.imshow(xf, cmap=cm.Reds) \>\>\> ax6.imshow(np.real(Z), cmap=cm.gray) \>\>\> plt.show()

</div>

## Discrete Cosine Transforms

SciPy provides a DCT with the function <span class="title-ref">dct</span> and a corresponding IDCT with the function <span class="title-ref">idct</span>. There are 8 types of the DCT [\[WPC\]](#WPC), [\[Mak\]](#Mak); however, only the first 4 types are implemented in scipy. "The" DCT generally refers to DCT type 2, and "the" Inverse DCT generally refers to DCT type 3. In addition, the DCT coefficients can be normalized differently (for most types, scipy provides `None` and `ortho`). Two parameters of the dct/idct function calls allow setting the DCT type and coefficient normalization.

For a single dimension array x, dct(x, norm='ortho') is equal to MATLAB dct(x).

### Type I DCT

SciPy uses the following definition of the unnormalized DCT-I (`norm=None`):

\[y[k] = x_0 + (-1)^k x_{N-1} + 2\sum_{n=1}^{N-2} x[n]
\cos\left(\frac{\pi nk}{N-1}\right),
\qquad 0 \le k < N.\]

Note that the DCT-I is only supported for input size \> 1.

### Type II DCT

SciPy uses the following definition of the unnormalized DCT-II (`norm=None`):

\[y[k] = 2 \sum_{n=0}^{N-1} x[n] \cos \left({\pi(2n+1)k \over 2N} \right)
\qquad 0 \le k < N.\]

In case of the normalized DCT (`norm='ortho'`), the DCT coefficients \(y[k]\) are multiplied by a scaling factor \`f\`:

\[\begin{aligned}
f = \begin{cases} \sqrt{1/(4N)}, & \text{if $k = 0$} \\    \sqrt{1/(2N)},
& \text{otherwise} \end{cases} \, .
\end{aligned}\]

In this case, the DCT "base functions" \(\phi_k[n] = 2 f \cos
\left({\pi(2n+1)k \over 2N} \right)\) become orthonormal:

\[\sum_{n=0}^{N-1} \phi_k[n] \phi_l[n] = \delta_{lk}.\]

### Type III DCT

SciPy uses the following definition of the unnormalized DCT-III (`norm=None`):

\[y[k] = x_0 + 2 \sum_{n=1}^{N-1} x[n] \cos\left({\pi n(2k+1) \over 2N}\right)
\qquad 0 \le k < N,\]

or, for `norm='ortho'`:

\[y[k] = {x_0\over\sqrt{N}} + {2\over\sqrt{N}} \sum_{n=1}^{N-1} x[n]
\cos\left({\pi n(2k+1) \over 2N}\right) \qquad 0 \le k < N.\]

### Type IV DCT

SciPy uses the following definition of the unnormalized DCT-IV (`norm=None`):

\[y[k] = 2 \sum_{n=0}^{N-1} x[n] \cos\left({\pi (2n+1)(2k+1) \over 4N}\right)
\qquad 0 \le k < N,\]

or, for `norm='ortho'`:

\[y[k] = \sqrt{2\over N}\sum_{n=0}^{N-1} x[n] \cos\left({\pi (2n+1)(2k+1) \over 4N}\right)
\qquad 0 \le k < N\]

### DCT and IDCT

The (unnormalized) DCT-III is the inverse of the (unnormalized) DCT-II, up to a factor of `2N`. The orthonormalized DCT-III is exactly the inverse of the orthonormalized DCT- II. The function <span class="title-ref">idct</span> performs the mappings between the DCT and IDCT types, as well as the correct normalization.

The following example shows the relation between DCT and IDCT for different types and normalizations.

\>\>\> from scipy.fft import dct, idct \>\>\> x = np.array(\[1.0, 2.0, 1.0, -1.0, 1.5\])

The DCT-II and DCT-III are each other's inverses, so for an orthonormal transform we return back to the original signal.

\>\>\> dct(dct(x, type=2, norm='ortho'), type=3, norm='ortho') array(\[ 1. , 2. , 1. , -1. , 1.5\])

Doing the same under default normalization, however, we pick up an extra scaling factor of \(2N=10\) since the forward transform is unnormalized.

\>\>\> dct(dct(x, type=2), type=3) array(\[ 10., 20., 10., -10., 15.\])

For this reason, we should use the function <span class="title-ref">idct</span> using the same type for both, giving a correctly normalized result.

\>\>\> \# Normalized inverse: no scaling factor \>\>\> idct(dct(x, type=2), type=2) array(\[ 1. , 2. , 1. , -1. , 1.5\])

Analogous results can be seen for the DCT-I, which is its own inverse up to a factor of \(2(N-1)\).

\>\>\> dct(dct(x, type=1, norm='ortho'), type=1, norm='ortho') array(\[ 1. , 2. , 1. , -1. , 1.5\]) \>\>\> \# Unnormalized round-trip via DCT-I: scaling factor 2\*(N-1) = 8 \>\>\> dct(dct(x, type=1), type=1) array(\[ 8. , 16., 8. , -8. , 12.\]) \>\>\> \# Normalized inverse: no scaling factor \>\>\> idct(dct(x, type=1), type=1) array(\[ 1. , 2. , 1. , -1. , 1.5\])

And for the DCT-IV, which is also its own inverse up to a factor of \(2N\).

\>\>\> dct(dct(x, type=4, norm='ortho'), type=4, norm='ortho') array(\[ 1. , 2. , 1. , -1. , 1.5\]) \>\>\> \# Unnormalized round-trip via DCT-IV: scaling factor 2\*N = 10 \>\>\> dct(dct(x, type=4), type=4) array(\[ 10., 20., 10., -10., 15.\]) \>\>\> \# Normalized inverse: no scaling factor \>\>\> idct(dct(x, type=4), type=4) array(\[ 1. , 2. , 1. , -1. , 1.5\])

### Example

The DCT exhibits the "energy compaction property", meaning that for many signals only the first few DCT coefficients have significant magnitude. Zeroing out the other coefficients leads to a small reconstruction error, a fact which is exploited in lossy signal compression (e.g. JPEG compression).

The example below shows a signal x and two reconstructions (\(x_{20}\) and \(x_{15}\)) from the signal's DCT coefficients. The signal \(x_{20}\) is reconstructed from the first 20 DCT coefficients, \(x_{15}\) is reconstructed from the first 15 DCT coefficients. It can be seen that the relative error of using 20 coefficients is still very small (\~0.1%), but provides a five-fold compression rate.

<div class="plot" alt="&quot;This code generates an X-Y plot showing amplitude on the Y axis and time on the X axis. The first blue trace is the original signal and starts at amplitude 1 and oscillates down to 0 amplitude over the duration of the plot resembling a frequency chirp. The second red trace is the x_20 reconstruction using the DCT and closely follows the original signal in the high amplitude region but it is unclear to the right side of the plot. The third green trace is the x_15 reconstruction using the DCT and is less precise than the x_20 reconstruction but still similar to x.&quot;">

\>\>\> from scipy.fft import dct, idct \>\>\> import matplotlib.pyplot as plt \>\>\> N = 100 \>\>\> t = np.linspace(0,20,N, endpoint=False) \>\>\> x = np.exp(-t/3)*np.cos(2*t) \>\>\> y = dct(x, norm='ortho') \>\>\> window = np.zeros(N) \>\>\> window\[:20\] = 1 \>\>\> yr = idct(y\*window, norm='ortho') \>\>\> sum(abs(x-yr)**2) / sum(abs(x)**2) 0.0009872817275276098 \>\>\> plt.plot(t, x, '-bx') \>\>\> plt.plot(t, yr, 'ro') \>\>\> window = np.zeros(N) \>\>\> window\[:15\] = 1 \>\>\> yr = idct(y\*window, norm='ortho') \>\>\> sum(abs(x-yr)**2) / sum(abs(x)**2) 0.06196643004256714 \>\>\> plt.plot(t, yr, 'g+') \>\>\> plt.legend(\['x', '$[x](){20}$', '$[x](){15}$'\]) \>\>\> plt.grid() \>\>\> plt.show()

</div>

## Discrete Sine Transforms

SciPy provides a DST [\[Mak\]](#Mak) with the function <span class="title-ref">dst</span> and a corresponding IDST with the function <span class="title-ref">idst</span>.

There are, theoretically, 8 types of the DST for different combinations of even/odd boundary conditions and boundary offsets [\[WPS\]](#WPS), only the first 4 types are implemented in scipy.

### Type I DST

DST-I assumes the input is odd around n=-1 and n=N. SciPy uses the following definition of the unnormalized DST-I (`norm=None`):

\[y[k] = 2\sum_{n=0}^{N-1} x[n]  \sin\left( \pi {(n+1) (k+1)}\over{N+1}
\right), \qquad 0 \le k < N.\]

Note also that the DST-I is only supported for input size \> 1. The (unnormalized) DST-I is its own inverse, up to a factor of `2(N+1)`.

### Type II DST

DST-II assumes the input is odd around n=-1/2 and even around n=N. SciPy uses the following definition of the unnormalized DST-II (`norm=None`):

\[y[k] = 2 \sum_{n=0}^{N-1} x[n]  \sin\left( {\pi (n+1/2)(k+1)} \over N
\right), \qquad 0 \le k < N.\]

### Type III DST

DST-III assumes the input is odd around n=-1 and even around n=N-1. SciPy uses the following definition of the unnormalized DST-III (`norm=None`):

\[y[k] = (-1)^k x[N-1] + 2 \sum_{n=0}^{N-2} x[n] \sin \left( {\pi
(n+1)(k+1/2)} \over N \right), \qquad 0 \le k < N.\]

### Type IV DST

SciPy uses the following definition of the unnormalized DST-IV (`norm=None`):

\[y[k] = 2 \sum_{n=0}^{N-1} x[n] \sin\left({\pi (2n+1)(2k+1) \over 4N}\right)
\qquad 0 \le k < N,\]

or, for `norm='ortho'`:

\[y[k] = \sqrt{2\over N}\sum_{n=0}^{N-1} x[n] \sin\left({\pi (2n+1)(2k+1) \over 4N}\right)
\qquad 0 \le k < N,\]

### DST and IDST

The following example shows the relation between DST and IDST for different types and normalizations.

\>\>\> from scipy.fft import dst, idst \>\>\> x = np.array(\[1.0, 2.0, 1.0, -1.0, 1.5\])

The DST-II and DST-III are each other's inverses, so for an orthonormal transform we return back to the original signal.

\>\>\> dst(dst(x, type=2, norm='ortho'), type=3, norm='ortho') array(\[ 1. , 2. , 1. , -1. , 1.5\])

Doing the same under default normalization, however, we pick up an extra scaling factor of \(2N=10\) since the forward transform is unnormalized.

\>\>\> dst(dst(x, type=2), type=3) array(\[ 10., 20., 10., -10., 15.\])

For this reason, we should use the function <span class="title-ref">idst</span> using the same type for both, giving a correctly normalized result.

\>\>\> idst(dst(x, type=2), type=2) array(\[ 1. , 2. , 1. , -1. , 1.5\])

Analogous results can be seen for the DST-I, which is its own inverse up to a factor of \(2(N-1)\).

\>\>\> dst(dst(x, type=1, norm='ortho'), type=1, norm='ortho') array(\[ 1. , 2. , 1. , -1. , 1.5\]) \>\>\> \# scaling factor 2\*(N+1) = 12 \>\>\> dst(dst(x, type=1), type=1) array(\[ 12., 24., 12., -12., 18.\]) \>\>\> \# no scaling factor \>\>\> idst(dst(x, type=1), type=1) array(\[ 1. , 2. , 1. , -1. , 1.5\])

And for the DST-IV, which is also its own inverse up to a factor of \(2N\).

\>\>\> dst(dst(x, type=4, norm='ortho'), type=4, norm='ortho') array(\[ 1. , 2. , 1. , -1. , 1.5\]) \>\>\> \# scaling factor 2\*N = 10 \>\>\> dst(dst(x, type=4), type=4) array(\[ 10., 20., 10., -10., 15.\]) \>\>\> \# no scaling factor \>\>\> idst(dst(x, type=4), type=4) array(\[ 1. , 2. , 1. , -1. , 1.5\])

## Fast Hankel Transform

SciPy provides the functions `fht` and `ifht` to perform the Fast Hankel Transform (FHT) and its inverse (IFHT) on logarithmically-spaced input arrays.

The FHT is the discretised version of the continuous Hankel transform defined by [\[Ham00\]](#Ham00)

\[A(k) = \int_{0}^{\infty} \! a(r) \, J_{\mu}(kr) \, k \, dr \;,\]

with \(J_{\mu}\) the Bessel function of order \(\mu\). Under a change of variables \(r \to \log r\), \(k \to \log k\), this becomes

\[A(e^{\log k})
= \int_{0}^{\infty} \! a(e^{\log r}) \, J_{\mu}(e^{\log k + \log r})
                                    \, e^{\log k + \log r} \, d{\log r}\]

which is a convolution in logarithmic space. The FHT algorithm uses the FFT to perform this convolution on discrete input data.

Care must be taken to minimise numerical ringing due to the circular nature of FFT convolution. To ensure that the low-ringing condition [\[Ham00\]](#Ham00) holds, the output array can be slightly shifted by an offset computed using the `fhtoffset` function.

## References

<div id="citations">

  - <span id="CT65" class="citation-label">CT65</span>  
    Cooley, James W., and John W. Tukey, 1965, "An algorithm for the machine calculation of complex Fourier series," *Math. Comput.* 19: 297-301.

  - <span id="Ham00" class="citation-label">Ham00</span>  
    A. J. S. Hamilton, 2000, "Uncorrelated modes of the non-linear power spectrum", *MNRAS*, 312, 257. `10.1046/j.1365-8711.2000.03071.x`

  - <span id="Mak" class="citation-label">Mak</span>  
    J. Makhoul, 1980, 'A Fast Cosine Transform in One and Two Dimensions', <span class="title-ref">IEEE Transactions on acoustics, speech and signal processing</span> vol. 28(1), pp. 27-34, `10.1109/TASSP.1980.1163351`

  - <span id="NR07" class="citation-label">NR07</span>  
    Press, W., Teukolsky, S., Vetterline, W.T., and Flannery, B.P., 2007, *Numerical Recipes: The Art of Scientific Computing*, ch. 12-13. Cambridge Univ. Press, Cambridge, UK.

  - <span id="WPC" class="citation-label">WPC</span>  
    <https://en.wikipedia.org/wiki/Discrete_cosine_transform>

  - <span id="WPS" class="citation-label">WPS</span>  
    <https://en.wikipedia.org/wiki/Discrete_sine_transform>

  - <span id="WPW" class="citation-label">WPW</span>  
    <https://en.wikipedia.org/wiki/Window_function>

</div>

---

index.md

---

# SciPy User Guide

<div class="currentmodule">

scipy

</div>

<div class="sectionauthor">

Travis E. Oliphant

</div>

SciPy is a collection of mathematical algorithms and convenience functions built on [NumPy](https://numpy.org) . It adds significant power to Python by providing the user with high-level commands and classes for manipulating and visualizing data.

## Subpackages and User Guides

SciPy is organized into subpackages covering different scientific computing domains. These are summarized in the following table, with their API reference linked in the Subpackage column, and user guide (if available) linked in the Description column:

| Subpackage                                   | Description and User Guide               |
| -------------------------------------------- | ---------------------------------------- |
| <span class="title-ref">cluster</span>       | Clustering algorithms                    |
| <span class="title-ref">constants</span>     | Physical and mathematical constants      |
| <span class="title-ref">differentiate</span> | Finite difference differentiation tools  |
| <span class="title-ref">fft</span>           | \[./fft\](./fft.md)                      |
| <span class="title-ref">fftpack</span>       | Fast Fourier Transform routines (legacy) |
| <span class="title-ref">integrate</span>     | \[./integrate\](./integrate.md)          |
| <span class="title-ref">interpolate</span>   | \[./interpolate\](./interpolate.md)      |
| <span class="title-ref">io</span>            | \[./io\](./io.md)                        |
| <span class="title-ref">linalg</span>        | \[./linalg\](./linalg.md)                |
| <span class="title-ref">ndimage</span>       | \[./ndimage\](./ndimage.md)              |
| <span class="title-ref">odr</span>           | Orthogonal distance regression           |
| <span class="title-ref">optimize</span>      | \[./optimize\](./optimize.md)            |
| <span class="title-ref">signal</span>        | \[./signal\](./signal.md)                |
| <span class="title-ref">sparse</span>        | \[./sparse\](./sparse.md)                |
| <span class="title-ref">spatial</span>       | \[./spatial\](./spatial.md)              |
| <span class="title-ref">special</span>       | \[./special\](./special.md)              |
| <span class="title-ref">stats</span>         | \[./stats\](./stats.md)                  |

There are also additional user guides for these topics:

  - \[./arpack\](./arpack.md) - Eigenvalue problem solver using iterative methods
  - \[./csgraph\](./csgraph.md) - Compressed Sparse Graph Routines

For guidance on organizing and importing functions from SciPy subpackages, refer to the [Guidelines for Importing Functions from SciPy](https://scipy.github.io/devdocs/reference/index.html#guidelines-for-importing-functions-from-scipy).

<div class="toctree" data-caption="User guide" data-maxdepth="1" hidden="">

fft integrate interpolate io linalg ndimage optimize signal sparse spatial special stats arpack csgraph

</div>

---

integrate.md

---

# Integration (`scipy.integrate`)

<div class="sectionauthor">

Travis E. Oliphant

</div>

<div class="currentmodule">

scipy.integrate

</div>

The `scipy.integrate` sub-package provides several integration techniques including an ordinary differential equation integrator. An overview of the module is provided by the help command:

<div class="literalinclude">

examples/4-1

</div>

## General integration (<span class="title-ref">quad</span>)

The function `quad` is provided to integrate a function of one variable between two points. The points can be \(\pm\infty\) (\(\pm\) `inf`) to indicate infinite limits. For example, suppose you wish to integrate a bessel function `jv(2.5, x)` along the interval \([0, 4.5].\)

\[I=\int_{0}^{4.5}J_{2.5}\left(x\right)\, dx.\]

This could be computed using `quad`:

> \>\>\> import scipy.integrate as integrate \>\>\> import scipy.special as special \>\>\> result = integrate.quad(lambda x: special.jv(2.5,x), 0, 4.5) \>\>\> result (1.1178179380783249, 7.8663172481899801e-09)
> 
> \>\>\> from numpy import sqrt, sin, cos, pi \>\>\> I = sqrt(2/pi)*(18.0/27*sqrt(2)*cos(4.5) - 4.0/27*sqrt(2)*sin(4.5) + ... sqrt(2*pi) \* special.fresnel(3/sqrt(pi))\[0\]) \>\>\> I 1.117817938088701
> 
> \>\>\> print(abs(result\[0\]-I)) 1.03761443881e-11

The first argument to quad is a "callable" Python object (i.e., a function, method, or class instance). Notice the use of a lambda-function in this case as the argument. The next two arguments are the limits of integration. The return value is a tuple, with the first element holding the estimated value of the integral and the second element holding an estimate of the absolute integration error. Notice, that in this case, the true value of this integral is

\[I=\sqrt{\frac{2}{\pi}}\left(\frac{18}{27}\sqrt{2}\cos\left(4.5\right)-\frac{4}{27}\sqrt{2}\sin\left(4.5\right)+\sqrt{2\pi}\textrm{Si}\left(\frac{3}{\sqrt{\pi}}\right)\right),\]

where

\[\textrm{Si}\left(x\right)=\int_{0}^{x}\sin\left(\frac{\pi}{2}t^{2}\right)\, dt.\]

is the Fresnel sine integral. Note that the numerically-computed integral is within \(1.04\times10^{-11}\) of the exact result --- well below the reported error estimate.

If the function to integrate takes additional parameters, they can be provided in the <span class="title-ref">args</span> argument. Suppose that the following integral shall be calculated:

\[I(a,b)=\int_{0}^{1} ax^2+b \, dx.\]

This integral can be evaluated by using the following code:

\>\>\> from scipy.integrate import quad \>\>\> def integrand(x, a, b): ... return a\*x\*\*2 + b ... \>\>\> a = 2 \>\>\> b = 1 \>\>\> I = quad(integrand, 0, 1, args=(a,b)) \>\>\> I (1.6666666666666667, 1.8503717077085944e-14)

Infinite inputs are also allowed in `quad` by using \(\pm\) `inf` as one of the arguments. For example, suppose that a numerical value for the exponential integral:

\[E_{n}\left(x\right)=\int_{1}^{\infty}\frac{e^{-xt}}{t^{n}}\, dt.\]

is desired (and the fact that this integral can be computed as `special.expn(n,x)` is forgotten). The functionality of the function `special.expn <scipy.special.expn>` can be replicated by defining a new function `vec_expint` based on the routine `quad`:

> \>\>\> from scipy.integrate import quad \>\>\> import numpy as np \>\>\> def integrand(t, n, x): ... return np.exp(-x\*t) / t\*\*n ...
> 
> \>\>\> def expint(n, x): ... return quad(integrand, 1, np.inf, args=(n, x))\[0\] ...
> 
> \>\>\> vec\_expint = np.vectorize(expint)
> 
> \>\>\> vec\_expint(3, np.arange(1.0, 4.0, 0.5)) array(\[ 0.1097, 0.0567, 0.0301, 0.0163, 0.0089, 0.0049\]) \>\>\> import scipy.special as special \>\>\> special.expn(3, np.arange(1.0,4.0,0.5)) array(\[ 0.1097, 0.0567, 0.0301, 0.0163, 0.0089, 0.0049\])

The function which is integrated can even use the quad argument (though the error bound may underestimate the error due to possible numerical error in the integrand from the use of `quad` ). The integral in this case is

\[I_{n}=\int_{0}^{\infty}\int_{1}^{\infty}\frac{e^{-xt}}{t^{n}}\, dt\, dx=\frac{1}{n}.\]

\>\>\> result = quad(lambda x: expint(3, x), 0, np.inf) \>\>\> print(result) (0.33333333324560266, 2.8548934485373678e-09)

\>\>\> I3 = 1.0/3.0 \>\>\> print(I3) 0.333333333333

\>\>\> print(I3 - result\[0\]) 8.77306560731e-11

This last example shows that multiple integration can be handled using repeated calls to <span class="title-ref">quad</span>.

\> **Warning** \> Numerical integration algorithms sample the integrand at a finite number of points. Consequently, they cannot guarantee accurate results (or accuracy estimates) for arbitrary integrands and limits of integration. Consider the Gaussian integral, for example:

> \>\>\> def gaussian(x): ... return np.exp(-x\*\*2) \>\>\> res = integrate.quad(gaussian, -np.inf, np.inf) \>\>\> res (1.7724538509055159, 1.4202636756659625e-08) \>\>\> np.allclose(res\[0\], np.sqrt(np.pi)) \# compare against theoretical result True
> 
> Since the integrand is nearly zero except near the origin, we would expect large but finite limits of integration to yield the same result. However:
> 
> \>\>\> integrate.quad(gaussian, -10000, 10000) (1.975190562208035e-203, 0.0)
> 
> This happens because the adaptive quadrature routine implemented in <span class="title-ref">quad</span>, while working as designed, does not notice the small, important part of the function within such a large, finite interval. For best results, consider using integration limits that tightly surround the important part of the integrand.
> 
> \>\>\> integrate.quad(gaussian, -15, 15) (1.772453850905516, 8.476526631214648e-11)
> 
> Integrands with several important regions can be broken into pieces as necessary.

## General multiple integration (<span class="title-ref">dblquad</span>, <span class="title-ref">tplquad</span>, <span class="title-ref">nquad</span>)

The mechanics for double and triple integration have been wrapped up into the functions `dblquad` and `tplquad`. These functions take the function to integrate and four, or six arguments, respectively. The limits of all inner integrals need to be defined as functions.

An example of using double integration to compute several values of \(I_{n}\) is shown below:

> \>\>\> from scipy.integrate import quad, dblquad \>\>\> def I(n): ... return dblquad(lambda t, x: np.exp(-x\*t)/t\*\*n, 0, np.inf, lambda x: 1, lambda x: np.inf) ...
> 
> \>\>\> print(I(4)) (0.2500000000043577, 1.29830334693681e-08) \>\>\> print(I(3)) (0.33333333325010883, 1.3888461883425516e-08) \>\>\> print(I(2)) (0.4999999999985751, 1.3894083651858995e-08)

As example for non-constant limits consider the integral

\[I=\int_{y=0}^{1/2}\int_{x=0}^{1-2y} x y \, dx\, dy=\frac{1}{96}.\]

This integral can be evaluated using the expression below (Note the use of the non-constant lambda functions for the upper limit of the inner integral):

\>\>\> from scipy.integrate import dblquad \>\>\> area = dblquad(lambda x, y: x\*y, 0, 0.5, lambda x: 0, lambda x: 1-2\*x) \>\>\> area (0.010416666666666668, 1.1564823173178715e-16)

For n-fold integration, scipy provides the function `nquad`. The integration bounds are an iterable object: either a list of constant bounds, or a list of functions for the non-constant integration bounds. The order of integration (and therefore the bounds) is from the innermost integral to the outermost one.

The integral from above

\[I_{n}=\int_{0}^{\infty}\int_{1}^{\infty}\frac{e^{-xt}}{t^{n}}\, dt\, dx=\frac{1}{n}\]

can be calculated as

\>\>\> from scipy import integrate \>\>\> N = 5 \>\>\> def f(t, x): ... return np.exp(-x\*t) / t\*\*N ... \>\>\> integrate.nquad(f, \[\[1, np.inf\],\[0, np.inf\]\]) (0.20000000000002294, 1.2239614263187945e-08)

Note that the order of arguments for <span class="title-ref">f</span> must match the order of the integration bounds; i.e., the inner integral with respect to \(t\) is on the interval \([1, \infty]\) and the outer integral with respect to \(x\) is on the interval \([0, \infty]\).

Non-constant integration bounds can be treated in a similar manner; the example from above

\[I=\int_{y=0}^{1/2}\int_{x=0}^{1-2y} x y \, dx\, dy=\frac{1}{96}.\]

can be evaluated by means of

\>\>\> from scipy import integrate \>\>\> def f(x, y): ... return x\*y ... \>\>\> def bounds\_y(): ... return \[0, 0.5\] ... \>\>\> def bounds\_x(y): ... return \[0, 1-2\*y\] ... \>\>\> integrate.nquad(f, \[bounds\_x, bounds\_y\]) (0.010416666666666668, 4.101620128472366e-16)

which is the same result as before.

## Gaussian quadrature

`fixed_quad` performs fixed-order Gaussian quadrature over a fixed interval. This function uses the collection of orthogonal polynomials provided by `scipy.special`, which can calculate the roots and quadrature weights of a large variety of orthogonal polynomials (the polynomials themselves are available as special functions returning instances of the polynomial class --- e.g., `special.legendre <scipy.special.legendre>`).

## Integrating using Samples

If the samples are equally-spaced and the number of samples available is \(2^{k}+1\) for some integer \(k\), then Romberg `romb` integration can be used to obtain high-precision estimates of the integral using the available samples. Romberg integration uses the trapezoid rule at step-sizes related by a power of two and then performs Richardson extrapolation on these estimates to approximate the integral with a higher degree of accuracy.

In case of arbitrary spaced samples, the two functions `trapezoid` and `simpson` are available. They are using Newton-Coates formulas of order 1 and 2 respectively to perform integration. The trapezoidal rule approximates the function as a straight line between adjacent points, while Simpson's rule approximates the function between three adjacent points as a parabola.

For an odd number of samples that are equally spaced Simpson's rule is exact if the function is a polynomial of order 3 or less. If the samples are not equally spaced, then the result is exact only if the function is a polynomial of order 2 or less.

\>\>\> import numpy as np \>\>\> def f1(x): ... return x\**2 ... \>\>\> def f2(x): ... return x*\*3 ... \>\>\> x = np.array(\[1,3,4\]) \>\>\> y1 = f1(x) \>\>\> from scipy import integrate \>\>\> I1 = integrate.simpson(y1, x=x) \>\>\> print(I1) 21.0

This corresponds exactly to

\[\int_{1}^{4} x^2 \, dx = 21,\]

whereas integrating the second function

\>\>\> y2 = f2(x) \>\>\> I2 = integrate.simpson(y2, x=x) \>\>\> print(I2) 61.5

does not correspond to

\[\int_{1}^{4} x^3 \, dx = 63.75\]

because the order of the polynomial in f2 is larger than two.

## Faster integration using low-level callback functions

A user desiring reduced integration times may pass a C function pointer through <span class="title-ref">scipy.LowLevelCallable</span> to <span class="title-ref">quad</span>, <span class="title-ref">dblquad</span>, <span class="title-ref">tplquad</span> or <span class="title-ref">nquad</span> and it will be integrated and return a result in Python. The performance increase here arises from two factors. The primary improvement is faster function evaluation, which is provided by compilation of the function itself. Additionally we have a speedup provided by the removal of function calls between C and Python in `quad`. This method may provide a speed improvements of \~2x for trivial functions such as sine but can produce a much more noticeable improvements (10x+) for more complex functions. This feature then, is geared towards a user with numerically intensive integrations willing to write a little C to reduce computation time significantly.

The approach can be used, for example, via <span class="title-ref">ctypes</span> in a few simple steps:

1.) Write an integrand function in C with the function signature `double f(int n, double *x, void *user_data)`, where `x` is an array containing the point the function f is evaluated at, and `user_data` to arbitrary additional data you want to provide.

`` `c    /* testlib.c */    double f(int n, double *x, void *user_data) {        double c = *(double *)user_data;        return c + x[0] - x[1] * x[2]; /* corresponds to c + x - y * z */    }  2.) Now compile this file to a shared/dynamic library (a quick search will help ``\` with this as it is OS-dependent). The user must link any math libraries, etc., used. On linux this looks like:

    $ gcc -shared -fPIC -o testlib.so testlib.c

The output library will be referred to as `testlib.so`, but it may have a different file extension. A library has now been created that can be loaded into Python with <span class="title-ref">ctypes</span>.

3.) Load shared library into Python using <span class="title-ref">ctypes</span> and set `restypes` and `argtypes` - this allows SciPy to interpret the function correctly:

``` python
import os, ctypes
from scipy import integrate, LowLevelCallable

lib = ctypes.CDLL(os.path.abspath('testlib.so'))
lib.f.restype = ctypes.c_double
lib.f.argtypes = (ctypes.c_int, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p)

c = ctypes.c_double(1.0)
user_data = ctypes.cast(ctypes.pointer(c), ctypes.c_void_p)

func = LowLevelCallable(lib.f, user_data)
```

The last `void *user_data` in the function is optional and can be omitted (both in the C function and ctypes argtypes) if not needed. Note that the coordinates are passed in as an array of doubles rather than a separate argument.

4.) Now integrate the library function as normally, here using \`nquad\`:

\>\>\> integrate.nquad(func, \[\[0, 10\], \[-10, 0\], \[-1, 1\]\]) (1200.0, 1.1102230246251565e-11)

The Python tuple is returned as expected in a reduced amount of time. All optional parameters can be used with this method including specifying singularities, infinite bounds, etc.

## Ordinary differential equations (<span class="title-ref">solve\_ivp</span>)

Integrating a set of ordinary differential equations (ODEs) given initial conditions is another useful example. The function `solve_ivp` is available in SciPy for integrating a first-order vector differential equation:

\[\frac{d\mathbf{y}}{dt}=\mathbf{f}\left(\mathbf{y},t\right),\]

given initial conditions \(\mathbf{y}\left(0\right)=y_{0}\), where \(\mathbf{y}\) is a length \(N\) vector and \(\mathbf{f}\) is a mapping from \(\mathcal{R}^{N}\) to \(\mathcal{R}^{N}.\) A higher-order ordinary differential equation can always be reduced to a differential equation of this type by introducing intermediate derivatives into the \(\mathbf{y}\) vector.

For example, suppose it is desired to find the solution to the following second-order differential equation:

\[\frac{d^{2}w}{dz^{2}}-zw(z)=0\]

with initial conditions \(w\left(0\right)=\frac{1}{\sqrt[3]{3^{2}}\Gamma\left(\frac{2}{3}\right)}\) and \(\left.\frac{dw}{dz}\right|_{z=0}=-\frac{1}{\sqrt[3]{3}\Gamma\left(\frac{1}{3}\right)}.\) It is known that the solution to this differential equation with these boundary conditions is the Airy function

\[w=\textrm{Ai}\left(z\right),\]

which gives a means to check the integrator using <span class="title-ref">special.airy \<scipy.special.airy\></span>.

First, convert this ODE into standard form by setting \(\mathbf{y}=\left[\frac{dw}{dz},w\right]\) and \(t=z\). Thus, the differential equation becomes

\[\begin{aligned}
\frac{d\mathbf{y}}{dt}=\left[\begin{array}{c} ty_{1}\\ y_{0}\end{array}\right]=\left[\begin{array}{cc} 0 & t\\ 1 & 0\end{array}\right]\left[\begin{array}{c} y_{0}\\ y_{1}\end{array}\right]=\left[\begin{array}{cc} 0 & t\\ 1 & 0\end{array}\right]\mathbf{y}.
\end{aligned}\]

In other words,

\[\mathbf{f}\left(\mathbf{y},t\right)=\mathbf{A}\left(t\right)\mathbf{y}.\]

As an interesting reminder, if \(\mathbf{A}\left(t\right)\) commutes with \(\int_{0}^{t}\mathbf{A}\left(\tau\right)\, d\tau\) under matrix multiplication, then this linear differential equation has an exact solution using the matrix exponential:

\[\mathbf{y}\left(t\right)=\exp\left(\int_{0}^{t}\mathbf{A}\left(\tau\right)d\tau\right)\mathbf{y}\left(0\right),\]

However, in this case, \(\mathbf{A}\left(t\right)\) and its integral do not commute.

This differential equation can be solved using the function `solve_ivp`. It requires the derivative, *fprime*, the time span `[t_start, t_end]` and the initial conditions vector, *y0*, as input arguments and returns an object whose *y* field is an array with consecutive solution values as columns. The initial conditions are therefore given in the first output column.

\>\>\> from scipy.integrate import solve\_ivp \>\>\> from scipy.special import gamma, airy \>\>\> y1\_0 = +1 / 3\**(2/3) / gamma(2/3) \>\>\> y0\_0 = -1 / 3(1/3) / gamma(1/3) \>\>\> y0 = \[y0\_0, y1\_0\] \>\>\> def func(t, y): ... return \[t*y\[1\],y\[0\]\] ... \>\>\> t\_span = \[0, 4\] \>\>\> sol1 = solve\_ivp(func, t\_span, y0) \>\>\> print("sol1.t: {}".format(sol1.t)) sol1.t: \[0. 0.10097672 1.04643602 1.91060117 2.49872472 3.08684827 3.62692846 4. \]

As it can be seen <span class="title-ref">solve\_ivp</span> determines its time steps automatically if not specified otherwise. To compare the solution of <span class="title-ref">solve\_ivp</span> with the <span class="title-ref">airy</span> function the time vector created by <span class="title-ref">solve\_ivp</span> is passed to the <span class="title-ref">airy</span> function.

\>\>\> print("sol1.y\[1\]: {}".format(sol1.y\[1\])) sol1.y\[1\]: \[0.35502805 0.328952 0.12801343 0.04008508 0.01601291 0.00623879 0.00356316 0.00405982\] \>\>\> print("airy(sol.t)\[0\]: {}".format(airy(sol1.t)\[0\])) airy(sol.t)\[0\]: \[0.35502805 0.328952 0.12804768 0.03995804 0.01575943 0.00562799 0.00201689 0.00095156\]

The solution of <span class="title-ref">solve\_ivp</span> with its standard parameters shows a big deviation to the airy function. To minimize this deviation, relative and absolute tolerances can be used.

\>\>\> rtol, atol = (1e-8, 1e-8) \>\>\> sol2 = solve\_ivp(func, t\_span, y0, rtol=rtol, atol=atol) \>\>\> print("sol2.y\[1\]\[::6\]: {}".format(sol2.y\[1\]\[0::6\])) sol2.y\[1\]\[::6\]: \[0.35502805 0.19145234 0.06368989 0.0205917 0.00554734 0.00106409\] \>\>\> print("airy(sol2.t)\[0\]\[::6\]: {}".format(airy(sol2.t)\[0\]\[::6\])) airy(sol2.t)\[0\]\[::6\]: \[0.35502805 0.19145234 0.06368989 0.0205917 0.00554733 0.00106406\]

To specify user defined time points for the solution of <span class="title-ref">solve\_ivp</span>, <span class="title-ref">solve\_ivp</span> offers two possibilities that can also be used complementarily. By passing the <span class="title-ref">t\_eval</span> option to the function call <span class="title-ref">solve\_ivp</span> returns the solutions of these time points of <span class="title-ref">t\_eval</span> in its output.

\>\>\> import numpy as np \>\>\> t = np.linspace(0, 4, 100) \>\>\> sol3 = solve\_ivp(func, t\_span, y0, t\_eval=t)

If the jacobian matrix of function is known, it can be passed to the <span class="title-ref">solve\_ivp</span> to achieve better results. Please be aware however that the default integration method <span class="title-ref">RK45</span> does not support jacobian matrices and thereby another integration method has to be chosen. One of the integration methods that support a jacobian matrix is the for example the <span class="title-ref">Radau</span> method of following example.

\>\>\> def gradient(t, y): ... return \[\[0,t\], \[1,0\]\] \>\>\> sol4 = solve\_ivp(func, t\_span, y0, method='Radau', jac=gradient)

### Solving a system with a banded Jacobian matrix

<span class="title-ref">odeint</span> can be told that the Jacobian is *banded*. For a large system of differential equations that are known to be stiff, this can improve performance significantly.

As an example, we'll solve the 1-D Gray-Scott partial differential equations using the method of lines [\[MOL\]](#MOL). The Gray-Scott equations for the functions \(u(x, t)\) and \(v(x, t)\) on the interval \(x \in [0, L]\) are

\[\begin{aligned}
\begin{split}
\frac{\partial u}{\partial t} = D_u \frac{\partial^2 u}{\partial x^2} - uv^2 + f(1-u) \\
\frac{\partial v}{\partial t} = D_v \frac{\partial^2 v}{\partial x^2} + uv^2 - (f + k)v \\
\end{split}
\end{aligned}\]

where \(D_u\) and \(D_v\) are the diffusion coefficients of the components \(u\) and \(v\), respectively, and \(f\) and \(k\) are constants. (For more information about the system, see <http://groups.csail.mit.edu/mac/projects/amorphous/GrayScott/>)

We'll assume Neumann (i.e., "no flux") boundary conditions:

\[\frac{\partial u}{\partial x}(0,t) = 0, \quad
\frac{\partial v}{\partial x}(0,t) = 0, \quad
\frac{\partial u}{\partial x}(L,t) = 0, \quad
\frac{\partial v}{\partial x}(L,t) = 0\]

To apply the method of lines, we discretize the \(x\) variable by defining the uniformly spaced grid of \(N\) points \(\left\{x_0, x_1, \ldots, x_{N-1}\right\}\), with \(x_0 = 0\) and \(x_{N-1} = L\). We define \(u_j(t) \equiv u(x_k, t)\) and \(v_j(t) \equiv v(x_k, t)\), and replace the \(x\) derivatives with finite differences. That is,

\[\frac{\partial^2 u}{\partial x^2}(x_j, t) \rightarrow
    \frac{u_{j-1}(t) - 2 u_{j}(t) + u_{j+1}(t)}{(\Delta x)^2}\]

We then have a system of \(2N\) ordinary differential equations:

\[\begin{aligned}
\begin{split}
\frac{du_j}{dt} = \frac{D_u}{(\Delta x)^2} \left(u_{j-1} - 2 u_{j} + u_{j+1}\right)
      -u_jv_j^2 + f(1 - u_j) \\
\frac{dv_j}{dt} = \frac{D_v}{(\Delta x)^2} \left(v_{j-1} - 2 v_{j} + v_{j+1}\right)
      + u_jv_j^2 - (f + k)v_j
\end{split}
\end{aligned}\]

For convenience, the \((t)\) arguments have been dropped.

To enforce the boundary conditions, we introduce "ghost" points \(x_{-1}\) and \(x_N\), and define \(u_{-1}(t) \equiv u_1(t)\), \(u_N(t) \equiv u_{N-2}(t)\); \(v_{-1}(t)\) and \(v_N(t)\) are defined analogously.

Then

\[\begin{aligned}
\begin{split}
\frac{du_0}{dt} = \frac{D_u}{(\Delta x)^2} \left(2u_{1} - 2 u_{0}\right)
      -u_0v_0^2 + f(1 - u_0) \\
\frac{dv_0}{dt} = \frac{D_v}{(\Delta x)^2} \left(2v_{1} - 2 v_{0}\right)
      + u_0v_0^2 - (f + k)v_0
\end{split}
\end{aligned}\]

and

\[\begin{aligned}
\begin{split}
\frac{du_{N-1}}{dt} = \frac{D_u}{(\Delta x)^2} \left(2u_{N-2} - 2 u_{N-1}\right)
      -u_{N-1}v_{N-1}^2 + f(1 - u_{N-1}) \\
\frac{dv_{N-1}}{dt} = \frac{D_v}{(\Delta x)^2} \left(2v_{N-2} - 2 v_{N-1}\right)
      + u_{N-1}v_{N-1}^2 - (f + k)v_{N-1}
\end{split}
\end{aligned}\]

Our complete system of \(2N\) ordinary differential equations is `interior` for \(k = 1, 2, \ldots, N-2\), along with `boundary0` and `boundaryL`.

We can now starting implementing this system in code. We must combine \(\{u_k\}\) and \(\{v_k\}\) into a single vector of length \(2N\). The two obvious choices are \(\{u_0, u_1, \ldots, u_{N-1}, v_0, v_1, \ldots, v_{N-1}\}\) and \(\{u_0, v_0, u_1, v_1, \ldots, u_{N-1}, v_{N-1}\}\). Mathematically, it does not matter, but the choice affects how efficiently <span class="title-ref">odeint</span> can solve the system. The reason is in how the order affects the pattern of the nonzero elements of the Jacobian matrix.

When the variables are ordered as \(\{u_0, u_1, \ldots, u_{N-1}, v_0, v_1, \ldots, v_{N-1}\}\), the pattern of nonzero elements of the Jacobian matrix is

\[\begin{aligned}
\begin{smallmatrix}
   * & * & 0 & 0 & 0 & 0 & 0  &  * & 0 & 0 & 0 & 0 & 0 & 0 \\
   * & * & * & 0 & 0 & 0 & 0  &  0 & * & 0 & 0 & 0 & 0 & 0 \\
   0 & * & * & * & 0 & 0 & 0  &  0 & 0 & * & 0 & 0 & 0 & 0 \\
   0 & 0 & * & * & * & 0 & 0  &  0 & 0 & 0 & * & 0 & 0 & 0 \\
   0 & 0 & 0 & * & * & * & 0  &  0 & 0 & 0 & 0 & * & 0 & 0 \\
   0 & 0 & 0 & 0 & * & * & *  &  0 & 0 & 0 & 0 & 0 & * & 0 \\
   0 & 0 & 0 & 0 & 0 & * & *  &  0 & 0 & 0 & 0 & 0 & 0 & * \\
   * & 0 & 0 & 0 & 0 & 0 & 0  &  * & * & 0 & 0 & 0 & 0 & 0 \\
   0 & * & 0 & 0 & 0 & 0 & 0  &  * & * & * & 0 & 0 & 0 & 0 \\
   0 & 0 & * & 0 & 0 & 0 & 0  &  0 & * & * & * & 0 & 0 & 0 \\
   0 & 0 & 0 & * & 0 & 0 & 0  &  0 & 0 & * & * & * & 0 & 0 \\
   0 & 0 & 0 & 0 & * & 0 & 0  &  0 & 0 & 0 & * & * & * & 0 \\
   0 & 0 & 0 & 0 & 0 & * & 0  &  0 & 0 & 0 & 0 & * & * & * \\
   0 & 0 & 0 & 0 & 0 & 0 & *  &  0 & 0 & 0 & 0 & ) & * & * \\
\end{smallmatrix}
\end{aligned}\]

The Jacobian pattern with variables interleaved as \(\{u_0, v_0, u_1, v_1, \ldots, u_{N-1}, v_{N-1}\}\) is

\[\begin{aligned}
\begin{smallmatrix}
* & * & * & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
* & * & 0 & * & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
* & 0 & * & * & * & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & * & * & * & 0 & * & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & * & 0 & * & * & * & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & * & * & * & 0 & * & 0 & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & * & 0 & * & * & * & 0 & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & * & * & * & 0 & * & 0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & * & 0 & * & * & * & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & * & * & * & 0 & * & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * & 0 & * & * & * & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * & * & * & 0 & * \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * & 0 & * & * \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & * & * & * \\
\end{smallmatrix}
\end{aligned}\]

In both cases, there are just five nontrivial diagonals, but when the variables are interleaved, the bandwidth is much smaller. That is, the main diagonal and the two diagonals immediately above and the two immediately below the main diagonal are the nonzero diagonals. This is important, because the inputs `mu` and `ml` of <span class="title-ref">odeint</span> are the upper and lower bandwidths of the Jacobian matrix. When the variables are interleaved, `mu` and `ml` are 2. When the variables are stacked with \(\{v_k\}\) following \(\{u_k\}\), the upper and lower bandwidths are \(N\).

With that decision made, we can write the function that implements the system of differential equations.

First, we define the functions for the source and reaction terms of the system:

    def G(u, v, f, k):
        return f * (1 - u) - u*v**2
    
    def H(u, v, f, k):
        return -(f + k) * v + u*v**2

Next, we define the function that computes the right-hand side of the system of differential equations:

    def grayscott1d(y, t, f, k, Du, Dv, dx):
        """
        Differential equations for the 1-D Gray-Scott equations.
    
        The ODEs are derived using the method of lines.
        """
        # The vectors u and v are interleaved in y.  We define
        # views of u and v by slicing y.
        u = y[::2]
        v = y[1::2]
    
        # dydt is the return value of this function.
        dydt = np.empty_like(y)
    
        # Just like u and v are views of the interleaved vectors
        # in y, dudt and dvdt are views of the interleaved output
        # vectors in dydt.
        dudt = dydt[::2]
        dvdt = dydt[1::2]
    
        # Compute du/dt and dv/dt.  The end points and the interior points
        # are handled separately.
        dudt[0]    = G(u[0],    v[0],    f, k) + Du * (-2.0*u[0] + 2.0*u[1]) / dx**2
        dudt[1:-1] = G(u[1:-1], v[1:-1], f, k) + Du * np.diff(u,2) / dx**2
        dudt[-1]   = G(u[-1],   v[-1],   f, k) + Du * (- 2.0*u[-1] + 2.0*u[-2]) / dx**2
        dvdt[0]    = H(u[0],    v[0],    f, k) + Dv * (-2.0*v[0] + 2.0*v[1]) / dx**2
        dvdt[1:-1] = H(u[1:-1], v[1:-1], f, k) + Dv * np.diff(v,2) / dx**2
        dvdt[-1]   = H(u[-1],   v[-1],   f, k) + Dv * (-2.0*v[-1] + 2.0*v[-2]) / dx**2
    
        return dydt

We won't implement a function to compute the Jacobian, but we will tell <span class="title-ref">odeint</span> that the Jacobian matrix is banded. This allows the underlying solver (LSODA) to avoid computing values that it knows are zero. For a large system, this improves the performance significantly, as demonstrated in the following ipython session.

First, we define the required inputs:

    In [30]: rng = np.random.default_rng()
    
    In [31]: y0 = rng.standard_normal(5000)
    
    In [32]: t = np.linspace(0, 50, 11)
    
    In [33]: f = 0.024
    
    In [34]: k = 0.055
    
    In [35]: Du = 0.01
    
    In [36]: Dv = 0.005
    
    In [37]: dx = 0.025

Time the computation without taking advantage of the banded structure of the Jacobian matrix:

    In [38]: %timeit sola = odeint(grayscott1d, y0, t, args=(f, k, Du, Dv, dx))
    1 loop, best of 3: 25.2 s per loop

Now set `ml=2` and `mu=2`, so <span class="title-ref">odeint</span> knows that the Jacobian matrix is banded:

    In [39]: %timeit solb = odeint(grayscott1d, y0, t, args=(f, k, Du, Dv, dx), ml=2, mu=2)
    10 loops, best of 3: 191 ms per loop

That is quite a bit faster\!

Let's ensure that they have computed the same result:

    In [41]: np.allclose(sola, solb)
    Out[41]: True

### References

<div id="citations">

  - <span id="MOL" class="citation-label">MOL</span>  
    <https://en.wikipedia.org/wiki/Method_of_lines>

</div>

---

1D.md

---

<div id="tutorial-interpolate_1Dsection">

<div class="currentmodule">

scipy.interpolate

</div>

</div>

# 1-D interpolation

## Piecewise linear interpolation

If all you need is a linear (a.k.a. broken line) interpolation, you can use the <span class="title-ref">numpy.interp</span> routine. It takes two arrays of data to interpolate, `x`, and `y`, and a third array, `xnew`, of points to evaluate the interpolation on:

<div class="plot">

\>\>\> import numpy as np \>\>\> x = np.linspace(0, 10, num=11) \>\>\> y = np.cos(-x\*\*2 / 9.0)

Construct the interpolation

\>\>\> xnew = np.linspace(0, 10, num=1001) \>\>\> ynew = np.interp(xnew, x, y)

And plot it

\>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(xnew, ynew, '-', label='linear interp') \>\>\> plt.plot(x, y, 'o', label='data') \>\>\> plt.legend(loc='best') \>\>\> plt.show()

</div>

One limitation of <span class="title-ref">numpy.interp</span> is that it does not allow controlling the extrapolation. See the \[interpolation with B-Splines section \<tutorial-interpolate\_bsplines\>\](\#interpolation-with-b-splines-section-\<tutorial-interpolate\_bsplines\>) section for alternative routines which provide this kind of functionality.

## Cubic splines

Of course, piecewise linear interpolation produces corners at data points, where linear pieces join. To produce a smoother curve, you can use cubic splines, where the interpolating curve is made of cubic pieces with matching first and second derivatives. In code, these objects are represented via the `CubicSpline` class instances. An instance is constructed with the `x` and `y` arrays of data, and then it can be evaluated using the target `xnew` values:

> \>\>\> from scipy.interpolate import CubicSpline \>\>\> spl = CubicSpline(\[1, 2, 3, 4, 5, 6\], \[1, 4, 8, 16, 25, 36\]) \>\>\> spl(2.5) 5.57

A <span class="title-ref">CubicSpline</span> object's `__call__` method accepts both scalar values and arrays. It also accepts a second argument, `nu`, to evaluate the derivative of order `nu`. As an example, we plot the derivatives of a spline:

<div class="plot">

\>\>\> from scipy.interpolate import CubicSpline \>\>\> x = np.linspace(0, 10, num=11) \>\>\> y = np.cos(-x\*\*2 / 9.) \>\>\> spl = CubicSpline(x, y)

\>\>\> import matplotlib.pyplot as plt \>\>\> fig, ax = plt.subplots(4, 1, figsize=(5, 7)) \>\>\> xnew = np.linspace(0, 10, num=1001) \>\>\> ax\[0\].plot(xnew, spl(xnew)) \>\>\> ax\[0\].plot(x, y, 'o', label='data') \>\>\> ax\[1\].plot(xnew, spl(xnew, nu=1), '--', label='1st derivative') \>\>\> ax\[2\].plot(xnew, spl(xnew, nu=2), '--', label='2nd derivative') \>\>\> ax\[3\].plot(xnew, spl(xnew, nu=3), '--', label='3rd derivative') \>\>\> for j in range(4): ... ax\[j\].legend(loc='best') \>\>\> plt.tight\_layout() \>\>\> plt.show()

</div>

Note that the first and second derivatives are continuous by construction, and the third derivative jumps at data points.

## Monotone interpolants

Cubic splines are by construction twice continuously differentiable. This may lead to the spline function oscillating and ''overshooting'' in between the data points. In these situations, an alternative is to use the so-called *monotone* cubic interpolants: these are constructed to be only once continuously differentiable, and attempt to preserve the local shape implied by the data. <span class="title-ref">scipy.interpolate</span> provides two objects of this kind: <span class="title-ref">PchipInterpolator</span> and <span class="title-ref">Akima1DInterpolator</span> . To illustrate, let's consider data with an outlier:

<div class="plot">

\>\>\> from scipy.interpolate import CubicSpline, PchipInterpolator, Akima1DInterpolator \>\>\> x = np.array(\[1., 2., 3., 4., 4.5, 5., 6., 7., 8\]) \>\>\> y = x\*\*2 \>\>\> y\[4\] += 101

\>\>\> import matplotlib.pyplot as plt \>\>\> xx = np.linspace(1, 8, 51) \>\>\> plt.plot(xx, CubicSpline(x, y)(xx), '--', label='spline') \>\>\> plt.plot(xx, Akima1DInterpolator(x, y)(xx), '-', label='Akima1D') \>\>\> plt.plot(xx, PchipInterpolator(x, y)(xx), '-', label='pchip') \>\>\> plt.plot(x, y, 'o') \>\>\> plt.legend() \>\>\> plt.show()

</div>

## Interpolation with B-splines

B-splines form an alternative (if formally equivalent) representation of piecewise polynomials. This basis is generally more computationally stable than the power basis and is useful for a variety of applications which include interpolation, regression and curve representation. Details are given in the \[piecewise polynomials section \<tutorial-interpolate\_ppoly\>\](\#piecewise-polynomials-section-\<tutorial-interpolate\_ppoly\>), and here we illustrate their usage by constructing the interpolation of a sine function:

<div class="plot">

\>\>\> x = np.linspace(0, 3/2, 7) \>\>\> y = np.sin(np.pi\*x)

To construct the interpolating objects given data arrays, `x` and `y`, we use the <span class="title-ref">make\_interp\_spline</span> function:

\>\>\> from scipy.interpolate import make\_interp\_spline \>\>\> bspl = make\_interp\_spline(x, y, k=3)

This function returns an object which has an interface similar to that of the <span class="title-ref">CubicSpline</span> objects. In particular, it can be evaluated at a data point and differentiated:

\>\>\> der = bspl.derivative() \# a BSpline representing the derivative \>\>\> import matplotlib.pyplot as plt \>\>\> xx = np.linspace(0, 3/2, 51) \>\>\> plt.plot(xx, bspl(xx), '--', label=r'$sin(pi x)$ approx') \>\>\> plt.plot(x, y, 'o', label='data') \>\>\> plt.plot(xx, der(xx)/np.pi, '--', label=r'$d sin(pi x)/dx / pi$ approx') \>\>\> plt.legend() \>\>\> plt.show()

</div>

Note that by specifying `k=3` in the <span class="title-ref">make\_interp\_spline</span> call, we requested a cubic spline (this is the default, so `k=3` could have been omitted); the derivative of a cubic is a quadratic:

> \>\>\> bspl.k, der.k (3, 2)

By default, the result of `make_interp_spline(x, y)` is equivalent to `CubicSpline(x, y)`. The difference is that the former allows several optional capabilities: it can construct splines of various degrees (via the optional argument `k`) and predefined knots (via the optional argument `t`).

Boundary conditions for the spline interpolation can be controlled by the `bc_type` argument to <span class="title-ref">make\_interp\_spline</span> function and <span class="title-ref">CubicSpline</span> constructor. By default, both use the 'not-a-knot' boundary condition.

### Non-cubic splines

One use of `make_interp_spline` is constructing a linear interpolant with linear extrapolation since `make_interp_spline` extrapolates by default. Consider

> \>\>\> from scipy.interpolate import make\_interp\_spline \>\>\> x = np.linspace(0, 5, 11) \>\>\> y = 2\*x \>\>\> spl = make\_interp\_spline(x, y, k=1) \# k=1: linear \>\>\> spl(\[-1, 6\]) \[-2., 12.\] \>\>\> np.interp(\[-1, 6\], x, y) \[0., 10.\]

See \[the extrapolation section \<tutorial-extrapolation\>\](\#the-extrapolation-section-\<tutorial-extrapolation\>) for more details and discussion.

## Parametric spline curves

So far we considered spline *functions*, where the data, `y`, is expected to depend explicitly on the independent variable `x`---so that the interpolating function satisfies \(f(x_j) = y_j\). Spline *curves* treat the `x` and `y` arrays as coordinates of points, \(\mathbf{p}_j\) on a plane, and an interpolating curve which passes through these points is parameterized by some additional parameter (typically called `u`). Note that this construction readily generalizes to higher dimensions where \(\mathbf{p}_j\) are points in an N-dimensional space.

Spline curves can be easily constructed using the fact that interpolation functions handle multidimensional data arrays. The values of the parameter `u`, corresponding to the data points, need to be separately supplied by the user.

The choice of parametrization is problem-dependent and different parametrizations may produce vastly different curves. As an example, we consider three parametrizations of (a somewhat difficult) dataset, which we take from Chapter 6 of Ref \[1\] listed in the <span class="title-ref">BSpline</span> docstring:

<div class="plot">

\>\>\> x = \[0, 1, 2, 3, 4, 5, 6\] \>\>\> y = \[0, 0, 0, 9, 0, 0, 0\] \>\>\> p = np.stack((x, y)) \>\>\> p array(\[\[0, 1, 2, 3, 4, 5, 6\], \[0, 0, 0, 9, 0, 0, 0\]\])

We take elements of the `p` array as coordinates of seven points on the plane, where `p[:, j]` gives the coordinates of the point \(\mathbf{p}_j\).

First, consider the *uniform* parametrization, \(u_j = j\):

\>\>\> u\_unif = x

Second, we consider the so-called *cord length* parametrization, which is nothing but a cumulative length of straight line segments connecting the data points:

\[u_j = u_{j-1} + |\mathbf{p}_j - \mathbf{p}_{j-1}|\]

for \(j=1, 2, \dots\) and \(u_0 = 0\). Here \(| \cdots |\) is the length between the consecutive points \(p_j\) on the plane.

\>\>\> dp = p\[:, 1:\] - p\[:, :-1\] \# 2-vector distances between points \>\>\> l = (dp\*\*2).sum(axis=0) \# squares of lengths of 2-vectors between points \>\>\> u\_cord = np.sqrt(l).cumsum() \# cumulative sums of 2-norms \>\>\> u\_cord = [np.r]()\[0, u\_cord\] \# the first point is parameterized at zero

Finally, we consider what is sometimes called the *centripetal* parametrization: \(u_j = u_{j-1} + |\mathbf{p}_j - \mathbf{p}_{j-1}|^{1/2}\). Due to the extra square root, the difference between consecutive values \(u_j - u_{j-1}\) will be smaller than for the cord length parametrization:

\>\>\> u\_c = [np.r]()\[0, np.cumsum((dp\**2).sum(axis=0)*\*0.25)\]

Now plot the resulting curves:

\>\>\> from scipy.interpolate import make\_interp\_spline \>\>\> import matplotlib.pyplot as plt \>\>\> fig, ax = plt.subplots(1, 3, figsize=(8, 3)) \>\>\> parametrizations = \['uniform', 'cord length', 'centripetal'\] \>\>\> \>\>\> for j, u in enumerate(\[u\_unif, u\_cord, u\_c\]): ... spl = make\_interp\_spline(u, p, axis=1) \# note p is a 2D array ... ... uu = np.linspace(u\[0\], u\[-1\], 51) ... xx, yy = spl(uu) ... ... ax\[j\].plot(xx, yy, '--') ... ax\[j\].plot(p\[0, :\], p\[1, :\], 'o') ... ax\[j\].set\_title(parametrizations\[j\]) \>\>\> plt.show()

</div>

## Legacy interface for 1-D interpolation (<span class="title-ref">interp1d</span>)

<div class="note">

<div class="title">

Note

</div>

<span class="title-ref">interp1d</span> is considered legacy API and is not recommended for use in new code. Consider using \[more specific interpolators instead \<tutorial-interpolate\_interp1d\_replacements\>\](\#more-specific-interpolators-instead-\<tutorial-interpolate\_interp1d\_replacements\>).

</div>

The <span class="title-ref">interp1d</span> class in <span class="title-ref">scipy.interpolate</span> is a convenient method to create a function based on fixed data points, which can be evaluated anywhere within the domain defined by the given data using linear interpolation. An instance of this class is created by passing the 1-D vectors comprising the data. The instance of this class defines a `__call__` method and can therefore be treated like a function which interpolates between known data values to obtain unknown values. Behavior at the boundary can be specified at instantiation time. The following example demonstrates its use, for linear and cubic spline interpolation:

<div class="plot" alt="&quot;This code generates an X-Y plot of a time-series with amplitude on the Y axis and time on the X axis. The original time-series is shown as a series of blue markers roughly defining some kind of oscillation. An orange trace showing the linear interpolation is drawn atop the data forming a jagged representation of the original signal. A dotted green cubic interpolation is also drawn that appears to smoothly represent the source data.&quot;">

\>\>\> from scipy.interpolate import interp1d

\>\>\> x = np.linspace(0, 10, num=11, endpoint=True) \>\>\> y = np.cos(-x\*\*2/9.0) \>\>\> f = interp1d(x, y) \>\>\> f2 = interp1d(x, y, kind='cubic')

\>\>\> xnew = np.linspace(0, 10, num=41, endpoint=True) \>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(x, y, 'o', xnew, f(xnew), '-', xnew, f2(xnew), '--') \>\>\> plt.legend(\['data', 'linear', 'cubic'\], loc='best') \>\>\> plt.show()

</div>

The 'cubic' kind of <span class="title-ref">interp1d</span> is equivalent to <span class="title-ref">make\_interp\_spline</span>, and the 'linear' kind is equivalent to <span class="title-ref">numpy.interp</span> while also allowing N-dimensional `y` arrays.

Another set of interpolations in <span class="title-ref">interp1d</span> is <span class="title-ref">nearest</span>, <span class="title-ref">previous</span>, and <span class="title-ref">next</span>, where they return the nearest, previous, or next point along the x-axis. Nearest and next can be thought of as a special case of a causal interpolating filter. The following example demonstrates their use, using the same data as in the previous example:

<div class="plot" alt="&quot;This code generates an X-Y plot of a time-series with amplitude on the Y axis and time on the X axis. The original time-series is shown as a series of blue markers roughly defining some kind of oscillation. An orange trace showing the nearest neighbor interpolation is drawn atop the original with a stair-like appearance where the original data is right in the middle of each stair step. A green trace showing the previous neighbor interpolation looks similar to the orange trace but the original data is at the back of each stair step. Similarly a dotted red trace showing the next neighbor interpolation goes through each of the previous points, but it is centered at the front edge of each stair.&quot;">

\>\>\> from scipy.interpolate import interp1d

\>\>\> x = np.linspace(0, 10, num=11, endpoint=True) \>\>\> y = np.cos(-x\*\*2/9.0) \>\>\> f1 = interp1d(x, y, kind='nearest') \>\>\> f2 = interp1d(x, y, kind='previous') \>\>\> f3 = interp1d(x, y, kind='next')

\>\>\> xnew = np.linspace(0, 10, num=1001, endpoint=True) \>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(x, y, 'o') \>\>\> plt.plot(xnew, f1(xnew), '-', xnew, f2(xnew), '--', xnew, f3(xnew), ':') \>\>\> plt.legend(\['data', 'nearest', 'previous', 'next'\], loc='best') \>\>\> plt.show()

</div>

### Recommended replacements for <span class="title-ref">interp1d</span> modes

As mentioned, <span class="title-ref">interp1d</span> class is *legacy*: we have no plans to remove it; we are going to keep supporting its existing usages; however we believe there are better alternatives which we recommend using in new code.

Here we list specific recommendations, depending on the interpolation `kind`.

**Linear interpolation,** `kind="linear"`

The default recommendation is to use <span class="title-ref">numpy.interp</span> function. Alternatively, you can use linear splines, `make_interp_spline(x, y, k=1)`, see \[this section for a discussion\<tutorial-interpolate\_linear\_spline\>\](\#this-section-for-a-discussion\<tutorial-interpolate\_linear\_spline\>).

**Spline interpolators,** `kind="quadratic"` or `"cubic"`

Under the hood, <span class="title-ref">interp1d</span> delegates to <span class="title-ref">make\_interp\_spline</span>, so we recommend using the latter directly.

**Piecewise constant modes,** `kind="nearest", "previous", "next"`

First, we note that `interp1d(x, y, kind='previous')` is equivalent to `make_interp_spline(x, y, k=0)`.

More generally however, all these piecewise constant interpolation modes are based on <span class="title-ref">numpy.searchsorted</span>. For example, the `"nearest"` mode is nothing but

> \>\>\> x = np.arange(8) \>\>\> y = x\*\*2 \>\>\> x\_new = np.linspace(0, 7, 101) \# input points \>\>\> x\_bds = x\[:-1\] / 2.0 + x\[1:\] / 2.0 \# halfway points \>\>\> idx = np.searchsorted(x\_bds, x\_new, side='left') \>\>\> idx = np.clip(idx, 0, len(x) - 1) \# clip the indices so that they are within the range of x indices. \>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(x, y, 'o') \>\>\> plt.plot(x\_new, y\[idx\], '--') \>\>\> plt.show()

Other variants are similar, see the `interp1d` [source code](https://github.com/scipy/scipy/blob/v1.14.1/scipy/interpolate/_interpolate.py#L486) for details.

## Missing data

We note that <span class="title-ref">scipy.interpolate</span> does *not* support interpolation with missing data. Two popular ways of representing missing data are using masked arrays of the <span class="title-ref">numpy.ma</span> library, and encoding missing values as not-a-number, `NaN`.

Neither of these two approaches is directly supported in <span class="title-ref">scipy.interpolate</span>. Individual routines may offer partial support, and/or workarounds, but in general, the library firmly adheres to the IEEE 754 semantics where a `NaN` means *not-a-number*, i.e. a result of an illegal mathematical operation (think a division by zero), not *missing*.

---

ND_regular_grid.md

---

<div id="tutorial-interpolate_regular_grid_interpolator">

<div class="currentmodule">

scipy.interpolate

</div>

</div>

# Multivariate data interpolation on a regular grid (<span class="title-ref">RegularGridInterpolator</span>)

Suppose you have N-dimensional data on a regular grid, and you want to interpolate it. In such a case, <span class="title-ref">RegularGridInterpolator</span> can be useful. Several interpolation strategies are supported: nearest-neighbor, linear, and tensor product splines of odd degree.

Strictly speaking, this class efficiently handles data given on *rectilinear* grids: hypercubic lattices with possibly unequal spacing between points. The number of points per dimension can be different for different dimensions.

The following example demonstrates its use, and compares the interpolation results using each method.

<div class="plot">

\>\>\> import numpy as np \>\>\> import matplotlib.pyplot as plt \>\>\> from scipy.interpolate import RegularGridInterpolator

Suppose we want to interpolate this 2-D function.

\>\>\> def F(u, v): ... return u \* np.cos(u \* v) + v \* np.sin(u \* v)

Suppose we only know some data on a regular grid.

\>\>\> fit\_points = \[np.linspace(0, 3, 8), np.linspace(0, 3, 11)\] \>\>\> values = F(*np.meshgrid(*fit\_points, indexing='ij'))

Creating test points and true values for evaluations.

\>\>\> ut, vt = np.meshgrid(np.linspace(0, 3, 80), np.linspace(0, 3, 80), indexing='ij') \>\>\> true\_values = F(ut, vt) \>\>\> test\_points = np.array(\[ut.ravel(), vt.ravel()\]).T

We can create the interpolator and interpolate test points using each method.

\>\>\> interp = RegularGridInterpolator(fit\_points, values) \>\>\> fig, axes = plt.subplots(2, 3, figsize=(10, 6)) \>\>\> axes = axes.ravel() \>\>\> fig\_index = 0 \>\>\> for method in \['linear', 'nearest', 'slinear', 'cubic', 'quintic'\]: ... im = interp(test\_points, method=method).reshape(80, 80) ... axes\[fig\_index\].imshow(im) ... axes\[fig\_index\].set\_title(method) ... axes\[fig\_index\].axis("off") ... fig\_index += 1 \>\>\> axes\[fig\_index\].imshow(true\_values) \>\>\> axes\[fig\_index\].set\_title("True values") \>\>\> fig.tight\_layout() \>\>\> fig.show()

As expected, the higher degree spline interpolations are closest to the true values, though are more expensive to compute than with <span class="title-ref">linear</span> or <span class="title-ref">nearest</span>. The <span class="title-ref">slinear</span> interpolation also matches the <span class="title-ref">linear</span> interpolation.

</div>

If your data is such that spline methods produce ringing, you may consider using `method="pchip"`, which uses the tensor product of PCHIP interpolators, a <span class="title-ref">PchipInterpolator</span> per dimension.

If you prefer a functional interface opposed to explicitly creating a class instance, the <span class="title-ref">interpn</span> convenience function offers the equivalent functionality.

Specifically, these two forms give identical results:

> \>\>\> from scipy.interpolate import interpn \>\>\> rgi = RegularGridInterpolator(fit\_points, values) \>\>\> result\_rgi = rgi(test\_points)

and

> \>\>\> result\_interpn = interpn(fit\_points, values, test\_points) \>\>\> np.allclose(result\_rgi, result\_interpn, atol=1e-15) True

For data confined to an (N-1)-dimensional subspace of N-dimensional space, i.e. when one of the grid axes has length 1, the extrapolation along this axis is controlled by the `fill_value` keyword parameter:

> \>\>\> x = np.array(\[0, 5, 10\]) \>\>\> y = np.array(\[0\]) \>\>\> data = np.array(\[\[0\], \[5\], \[10\]\]) \>\>\> rgi = RegularGridInterpolator((x, y), data, ... bounds\_error=False, fill\_value=None) \>\>\> rgi(\[(2, 0), (2, 1), (2, -1)\]) \# extrapolates the value on the axis array(\[2., 2., 2.\]) \>\>\> rgi.fill\_value = -101 \>\>\> rgi(\[(2, 0), (2, 1), (2, -1)\]) array(\[2., -101., -101.\])

\> **Note** \> If the input data is such that input dimensions have incommensurate units and differ by many orders of magnitude, the interpolant may have numerical artifacts. Consider rescaling the data before interpolating.

## Uniformly spaced data

If you are dealing with data on Cartesian grids with integer coordinates, e.g. resampling image data, these routines may not be the optimal choice. Consider using <span class="title-ref">scipy.ndimage.map\_coordinates</span> instead.

For floating-point data on grids with equal spacing, `map_coordinates` can be easily wrapped into a <span class="title-ref">RegularGridInterpolator</span> look-alike. The following is a bare-bones example originating from [the Johanness Buchner's 'regulargrid' package](https://github.com/JohannesBuchner/regulargrid/):

    class CartesianGridInterpolator:
        def __init__(self, points, values, method='linear'):
            self.limits = np.array([[min(x), max(x)] for x in points])
            self.values = np.asarray(values, dtype=float)
            self.order = {'linear': 1, 'cubic': 3, 'quintic': 5}[method]
    
        def __call__(self, xi):
            """
            `xi` here is an array-like (an array or a list) of points.
    
            Each "point" is an ndim-dimensional array_like, representing
            the coordinates of a point in ndim-dimensional space.
            """
            # transpose the xi array into the ``map_coordinates`` convention
            # which takes coordinates of a point along columns of a 2D array.
            xi = np.asarray(xi).T
    
            # convert from data coordinates to pixel coordinates
            ns = self.values.shape
            coords = [(n-1)*(val - lo) / (hi - lo)
                      for val, n, (lo, hi) in zip(xi, ns, self.limits)]
    
            # interpolate
            return map_coordinates(self.values, coords, 
                                   order=self.order,
                                   cval=np.nan)  # fill_value

This wrapper can be used as a(n almost) drop-in replacement for the \`RegularGridInterpolator\`:

> \>\>\> x, y = np.arange(5), np.arange(6) \>\>\> xx, yy = np.meshgrid(x, y, indexing='ij') \>\>\> values = xx\**3 + yy*\*3 \>\>\> rgi = RegularGridInterpolator((x, y), values, method='linear') \>\>\> rgi(\[\[1.5, 1.5\], \[3.5, 2.6\]\]) array(\[ 9. , 64.9\]) \>\>\> cgi = CartesianGridInterpolator((x, y), values, method='linear') \>\>\> cgi(\[\[1.5, 1.5\], \[3.5, 2.6\]\]) array(\[ 9. , 64.9\])

Note that the example above uses the `map_coordinates` boundary conditions. Thus, results of the `cubic` and `quintic` interpolations may differ from those of the `RegularGridInterpolator`. Refer to <span class="title-ref">scipy.ndimage.map\_coordinates</span> documentation for more details on boundary conditions and other additional arguments. Finally, we note that this simplified example assumes that the input data is given in the ascending order.

---

ND_unstructured.md

---

<div id="tutorial-interpolate_NDunstructured">

<div class="currentmodule">

scipy.interpolate

</div>

</div>

# Scattered data interpolation (<span class="title-ref">griddata</span>)

Suppose you have multidimensional data, for instance, for an underlying function \(f(x, y)\) you only know the values at points `(x[i], y[i])` that do not form a regular grid.

<div class="plot" alt="&quot; &quot;">

Suppose we want to interpolate the 2-D function

\>\>\> import numpy as np \>\>\> def func(x, y): ... return x\*(1-x)*np.cos(4*np.pi\*x) \* np.sin(4\*np.pi\*y\**2)*\*2

on a grid in \[0, 1\]x\[0, 1\]

\>\>\> grid\_x, grid\_y = np.meshgrid(np.linspace(0, 1, 100), ... np.linspace(0, 1, 200), indexing='ij')

but we only know its values at 1000 data points:

\>\>\> rng = np.random.default\_rng() \>\>\> points = rng.random((1000, 2)) \>\>\> values = func(points\[:,0\], points\[:,1\])

This can be done with <span class="title-ref">griddata</span> -- below, we try out all of the interpolation methods:

\>\>\> from scipy.interpolate import griddata \>\>\> grid\_z0 = griddata(points, values, (grid\_x, grid\_y), method='nearest') \>\>\> grid\_z1 = griddata(points, values, (grid\_x, grid\_y), method='linear') \>\>\> grid\_z2 = griddata(points, values, (grid\_x, grid\_y), method='cubic')

One can see that the exact result is reproduced by all of the methods to some degree, but for this smooth function the piecewise cubic interpolant gives the best results (black dots show the data being interpolated):

\>\>\> import matplotlib.pyplot as plt \>\>\> plt.subplot(221) \>\>\> plt.imshow(func(grid\_x, grid\_y).T, extent=(0, 1, 0, 1), origin='lower') \>\>\> plt.plot(points\[:, 0\], points\[:, 1\], 'k.', ms=1) \# data \>\>\> plt.title('Original') \>\>\> plt.subplot(222) \>\>\> plt.imshow(grid\_z0.T, extent=(0, 1, 0, 1), origin='lower') \>\>\> plt.title('Nearest') \>\>\> plt.subplot(223) \>\>\> plt.imshow(grid\_z1.T, extent=(0, 1, 0, 1), origin='lower') \>\>\> plt.title('Linear') \>\>\> plt.subplot(224) \>\>\> plt.imshow(grid\_z2.T, extent=(0, 1, 0, 1), origin='lower') \>\>\> plt.title('Cubic') \>\>\> plt.gcf().set\_size\_inches(6, 6) \>\>\> plt.show()

</div>

For each interpolation method, this function delegates to a corresponding class object --- these classes can be used directly as well ---<span class="title-ref">NearestNDInterpolator</span>, <span class="title-ref">LinearNDInterpolator</span> and <span class="title-ref">CloughTocher2DInterpolator</span> for piecewise cubic interpolation in 2D.

All these interpolation methods rely on triangulation of the data using the `QHull` library wrapped in <span class="title-ref">scipy.spatial</span>.

\> **Note** \> <span class="title-ref">griddata</span> is based on triangulation, hence is appropriate for unstructured, scattered data. If your data is on a full grid, the <span class="title-ref">griddata</span> function --- despite its name --- is not the right tool. Use <span class="title-ref">RegularGridInterpolator</span> instead.

<div class="note">

<div class="title">

Note

</div>

If the input data is such that input dimensions have incommensurate units and differ by many orders of magnitude, the interpolant may have numerical artifacts. Consider rescaling the data before interpolating or use the `rescale=True` keyword argument to <span class="title-ref">griddata</span>.

</div>

# Using radial basis functions for smoothing/interpolation

Radial basis functions can be used for smoothing/interpolating scattered data in N dimensions, but should be used with caution for extrapolation outside of the observed data range.

## 1-D Example

This example compares the usage of the <span class="title-ref">RBFInterpolator</span> and <span class="title-ref">UnivariateSpline</span> classes from the <span class="title-ref">scipy.interpolate</span> module.

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> from scipy.interpolate import RBFInterpolator, InterpolatedUnivariateSpline \>\>\> import matplotlib.pyplot as plt

\>\>\> \# setup data \>\>\> x = np.linspace(0, 10, 9).reshape(-1, 1) \>\>\> y = np.sin(x) \>\>\> xi = np.linspace(0, 10, 101).reshape(-1, 1)

\>\>\> \# use fitpack2 method \>\>\> ius = InterpolatedUnivariateSpline(x, y) \>\>\> yi = ius(xi)

\>\>\> fix, (ax1, ax2) = plt.subplots(2, 1) \>\>\> ax1.plot(x, y, 'bo') \>\>\> ax1.plot(xi, yi, 'g') \>\>\> ax1.plot(xi, np.sin(xi), 'r') \>\>\> ax1.set\_title('Interpolation using univariate spline')

\>\>\> \# use RBF method \>\>\> rbf = RBFInterpolator(x, y) \>\>\> fi = rbf(xi)

\>\>\> ax2.plot(x, y, 'bo') \>\>\> ax2.plot(xi, fi, 'g') \>\>\> ax2.plot(xi, np.sin(xi), 'r') \>\>\> ax2.set\_title('Interpolation using RBF - multiquadrics') \>\>\> plt.tight\_layout() \>\>\> plt.show()

</div>

## 2-D Example

This example shows how to interpolate scattered 2-D data:

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> from scipy.interpolate import RBFInterpolator \>\>\> import matplotlib.pyplot as plt

\>\>\> \# 2-d tests - setup scattered data \>\>\> rng = np.random.default\_rng() \>\>\> xy = rng.random((100, 2))*4.0-2.0 \>\>\> z = xy\[:, 0\]*np.exp(-xy\[:, 0\]**2-xy\[:, 1\]**2) \>\>\> edges = np.linspace(-2.0, 2.0, 101) \>\>\> centers = edges\[:-1\] + np.diff(edges\[:2\])\[0\] / 2. \>\>\> x\_i, y\_i = np.meshgrid(centers, centers) \>\>\> x\_i = x\_i.reshape(-1, 1) \>\>\> y\_i = y\_i.reshape(-1, 1) \>\>\> xy\_i = np.concatenate(\[x\_i, y\_i\], axis=1)

\>\>\> \# use RBF \>\>\> rbf = RBFInterpolator(xy, z, epsilon=2) \>\>\> z\_i = rbf(xy\_i)

\>\>\> \# plot the result \>\>\> fig, ax = plt.subplots() \>\>\> X\_edges, Y\_edges = np.meshgrid(edges, edges) \>\>\> lims = dict(cmap='RdBu\_r', vmin=-0.4, vmax=0.4) \>\>\> mapping = ax.pcolormesh( ... X\_edges, Y\_edges, z\_i.reshape(100, 100), ... shading='flat', **lims ... ) \>\>\> ax.scatter(xy\[:, 0\], xy\[:, 1\], 100, z, edgecolor='w', lw=0.1,**lims) \>\>\> ax.set( ... title='RBF interpolation - multiquadrics', ... xlim=(-2, 2), ... ylim=(-2, 2), ... ) \>\>\> fig.colorbar(mapping)

</div>

---

extrapolation_examples.md

---

<div class="currentmodule">

scipy.interpolate

</div>

# Extrapolation tips and tricks

Handling of extrapolation---evaluation of the interpolators on query points outside of the domain of interpolated data---is not fully consistent among different routines in <span class="title-ref">scipy.interpolate</span>. Different interpolators use different sets of keyword arguments to control the behavior outside of the data domain: some use `extrapolate=True/False/None`, some allow the `fill_value` keyword. Refer to the API documentation for details for each specific interpolation routine.

Depending on a particular problem, the available keywords may or may not be sufficient. Special attention needs to be paid to extrapolation of non-linear interpolants. Very often the extrapolated results make less sense with increasing distance from the data domain. This is of course to be expected: an interpolant only knows the data within the data domain.

When the default extrapolated results are not adequate, users need to implement the desired extrapolation mode themselves.

In this tutorial, we consider several worked examples where we demonstrate both the use of available keywords and manual implementation of desired extrapolation modes. These examples may or may not be applicable to your particular problem; they are not necessarily best practices; and they are deliberately pared down to bare essentials needed to demonstrate the main ideas, in a hope that they serve as an inspiration for your handling of your particular problem.

## <span class="title-ref">interp1d</span> : replicate <span class="title-ref">numpy.interp</span> left and right fill values

TL;DR: Use `fill_value=(left, right)`

<span class="title-ref">numpy.interp</span> uses constant extrapolation, and defaults to extending the first and last values of the `y` array in the interpolation interval: the output of `np.interp(xnew, x, y)` is `y[0]` for `xnew < x[0]` and `y[-1]` for `xnew > x[-1]`.

By default, <span class="title-ref">interp1d</span> refuses to extrapolate, and raises a `ValueError` when evaluated on a data point outside of the interpolation range. This can be switched off by the `bounds_error=False` argument: then `interp1d` sets the out-of-range values with the `fill_value`, which is `nan` by default.

To mimic the behavior of <span class="title-ref">numpy.interp</span> with <span class="title-ref">interp1d</span>, you can use the fact that it supports a 2-tuple as the `fill_value`. The tuple elements are then used to fill for `xnew < min(x)` and `x > max(x)`, respectively. For multidimensional `y`, these elements must have the same shape as `y` or be broadcastable to it.

To illustrate:

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import interp1d

x = np.linspace(0, 1.5\*np.pi, 11) y = np.column\_stack((np.cos(x), np.sin(x))) \# y.shape is (11, 2)

  - func = interp1d(x, y,  
    axis=0, \# interpolate along columns bounds\_error=False, kind='linear', fill\_value=(y\[0\], y\[-1\]))

xnew = np.linspace(-np.pi, 2.5\*np.pi, 51) ynew = func(xnew)

fix, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4)) ax1.plot(xnew, ynew\[:, 0\]) ax1.plot(x, y\[:, 0\], 'o')

ax2.plot(xnew, ynew\[:, 1\]) ax2.plot(x, y\[:, 1\], 'o') plt.tight\_layout()

</div>

## CubicSpline extend the boundary conditions

<span class="title-ref">CubicSpline</span> needs two extra boundary conditions, which are controlled by the `bc_type` parameter. This parameter can either list explicit values of derivatives at the edges, or use helpful aliases. For instance, `bc_type="clamped"` sets the first derivatives to zero, `bc_type="natural"` sets the second derivatives to zero (two other recognized string values are "periodic" and "not-a-knot")

While the extrapolation is controlled by the boundary condition, the relation is not very intuitive. For instance, one can expect that for `bc_type="natural"`, the extrapolation is linear. This expectation is too strong: each boundary condition sets the derivatives at a single point, *at the boundary* only. Extrapolation is done from the first and last polynomial pieces, which — for a natural spline — is a cubic with a zero second derivative at a given point.

One other way of seeing why this expectation is too strong is to consider a dataset with only three data points, where the spline has two polynomial pieces. To extrapolate linearly, this expectation implies that both of these pieces are linear. But then, two linear pieces cannot match at a middle point with a continuous 2nd derivative\! (Unless of course, if all three data points actually lie on a single straight line).

To illustrate the behavior we consider a synthetic dataset and compare several boundary conditions:

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import CubicSpline

xs = \[1, 2, 3, 4, 5, 6, 7, 8\] ys = \[4.5, 3.6, 1.6, 0.0, -3.3, -3.1, -1.8, -1.7\]

notaknot = CubicSpline(xs, ys, bc\_type='not-a-knot') natural = CubicSpline(xs, ys, bc\_type='natural') clamped = CubicSpline(xs, ys, bc\_type='clamped') xnew = np.linspace(min(xs) - 4, max(xs) + 4, 101)

splines = \[notaknot, natural, clamped\] titles = \['not-a-knot', 'natural', 'clamped'\]

fig, axs = plt.subplots(3, 3, figsize=(12, 12)) for i in \[0, 1, 2\]: for j, spline, title in zip(range(3), splines, titles): axs\[i, j\].plot(xs, spline(xs, nu=i),'o') axs\[i, j\].plot(xnew, spline(xnew, nu=i),'-') axs\[i, j\].set\_title(f'{title}, deriv={i}')

plt.tight\_layout() plt.show()

</div>

It is clearly seen that the natural spline does have the zero second derivative at the boundaries, but extrapolation is non-linear. `bc_type="clamped"` shows a similar behavior: first derivatives are only equal to zero exactly at the boundary. In all cases, extrapolation is done by extending the first and last polynomial pieces of the spline, whatever they happen to be.

One possible way to force the extrapolation is to extend the interpolation domain to add first and last polynomial pieces which have desired properties.

Here we use `extend` method of the <span class="title-ref">CubicSpline</span> superclass, <span class="title-ref">PPoly</span>, to add two extra breakpoints and to make sure that the additional polynomial pieces maintain the values of the derivatives. Then the extrapolation proceeds using these two additional intervals.

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import CubicSpline

  - def add\_boundary\_knots(spline):  
    """ Add knots infinitesimally to the left and right.
    
    Additional intervals are added to have zero 2nd and 3rd derivatives, and to maintain the first derivative from whatever boundary condition was selected. The spline is modified in place. """ \# determine the slope at the left edge leftx = spline.x\[0\] lefty = spline(leftx) leftslope = spline(leftx, nu=1)
    
    \# add a new breakpoint just to the left and use the \# known slope to construct the PPoly coefficients. leftxnext = np.nextafter(leftx, leftx - 1) leftynext = lefty + leftslope\*(leftxnext - leftx) leftcoeffs = np.array(\[0, 0, leftslope, leftynext\]) spline.extend(leftcoeffs\[..., None\], [np.r]()\[leftxnext\])
    
    \# repeat with additional knots to the right rightx = spline.x\[-1\] righty = spline(rightx) rightslope = spline(rightx,nu=1) rightxnext = np.nextafter(rightx, rightx + 1) rightynext = righty + rightslope \* (rightxnext - rightx) rightcoeffs = np.array(\[0, 0, rightslope, rightynext\]) spline.extend(rightcoeffs\[..., None\], [np.r]()\[rightxnext\])

xs = \[1, 2, 3, 4, 5, 6, 7, 8\] ys = \[4.5, 3.6, 1.6, 0.0, -3.3, -3.1, -1.8, -1.7\]

notaknot = CubicSpline(xs,ys, bc\_type='not-a-knot') \# not-a-knot does not require additional intervals

natural = CubicSpline(xs,ys, bc\_type='natural') \# extend the natural natural spline with linear extrapolating knots add\_boundary\_knots(natural)

clamped = CubicSpline(xs,ys, bc\_type='clamped') \# extend the clamped spline with constant extrapolating knots add\_boundary\_knots(clamped)

xnew = np.linspace(min(xs) - 5, max(xs) + 5, 201)

fig, axs = plt.subplots(3, 3,figsize=(12,12))

splines = \[notaknot, natural, clamped\] titles = \['not-a-knot', 'natural', 'clamped'\]

  - for i in \[0, 1, 2\]:
    
      - for j, spline, title in zip(range(3), splines, titles):  
        axs\[i, j\].plot(xs, spline(xs, nu=i),'o') axs\[i, j\].plot(xnew, spline(xnew, nu=i),'-') axs\[i, j\].set\_title(f'{title}, deriv={i}')

plt.tight\_layout() plt.show()

</div>

## Manually implement the asymptotics

The previous trick of extending the interpolation domain relies on the <span class="title-ref">CubicSpline.extend</span> method. A somewhat more general alternative is to implement a wrapper which handles the out-of-bounds behavior explicitly. Let us consider a worked example.

### The setup

Suppose we want to solve at a given value of \(a\) the equation

\[a x = 1/\tan{x}\;.\]

(One application where these kinds of equations appear is solving for energy levels of a quantum particle). For simplicity, let’s only consider \(x\in (0, \pi/2)\).

Solving this equation *once* is straightforward:

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.optimize import brentq

  - def f(x, a):  
    return a\*x - 1/np.tan(x)

a = 3 x0 = brentq(f, 1e-16, np.pi/2, args=(a,)) \# here we shift the left edge \# by a machine epsilon to avoid \# a division by zero at x=0 xx = np.linspace(0.2, np.pi/2, 101) plt.plot(xx, a\*xx, '--') plt.plot(xx, 1/np.tan(xx), '--') plt.plot(x0, a\*x0, 'o', ms=12) plt.text(0.1, 0.9, fr'$x\_0 = {x0:.3f}$', transform=plt.gca().transAxes, fontsize=16) plt.show()

</div>

However, if we need to solve it multiple times (e.g. to find *a series* of roots due to periodicity of the `tan` function), repeated calls to <span class="title-ref">scipy.optimize.brentq</span> become prohibitively expensive.

To circumvent this difficulty, we tabulate \(y = ax - 1/\tan{x}\) and interpolate it on the tabulated grid. In fact, we will use the *inverse* interpolation: we interpolate the values of \(x\) versus \(у\). This way, solving the original equation becomes simply an evaluation of the interpolated function at zero \(y\) argument.

To improve the interpolation accuracy we will use the knowledge of the derivatives of the tabulated function. We will use <span class="title-ref">BPoly.from\_derivatives</span> to construct a cubic interpolant (equivalently, we could have used <span class="title-ref">CubicHermiteSpline</span>)

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import BPoly

  - def f(x, a):  
    return a\*x - 1/np.tan(x)

xleft, xright = 0.2, np.pi/2 x = np.linspace(xleft, xright, 11)

fig, ax = plt.subplots(1, 2, figsize=(12, 4))

  - for j, a in enumerate(\[3, 93\]):  
    y = f(x, a) dydx = a + 1./np.sin(x)\*\*2 \# d(ax - 1/tan(x)) / dx dxdy = 1 / dydx \# dx/dy = 1 / (dy/dx)
    
    xdx = [np.c]()\[x, dxdy\] spl = BPoly.from\_derivatives(y, xdx) \# inverse interpolation
    
    yy = np.linspace(f(xleft, a), f(xright, a), 51) ax\[j\].plot(yy, spl(yy), '--') ax\[j\].plot(y, x, 'o') ax\[j\].set\_xlabel(r'$y$') ax\[j\].set\_ylabel(r'$x$') ax\[j\].set\_title(rf'$a = {a}$')
    
    ax\[j\].plot(0, spl(0), 'o', ms=12) ax\[j\].text(0.1, 0.85, fr'$x\_0 = {spl(0):.3f}$', transform=ax\[j\].transAxes, fontsize=18) ax\[j\].grid(True)

plt.tight\_layout() plt.show()

</div>

Note that for \(a=3\), `spl(0)` agrees with the `brentq` call above, while for \(a = 93\), the difference is substantial. The reason the procedure starts failing for large \(a\) is that the straight line \(y = ax\) tends towards the vertical axis, and the root of the original equation tends towards \(x=0\). Since we tabulated the original function at a finite grid, `spl(0)` involves extrapolation for too-large values of \(a\). Relying on extrapolation is prone to losing accuracy and is best avoided.

### Use the known asymptotics

Looking at the original equation, we note that for \(x\to 0\), \(\tan(x) = x + O(x^3)\), and the original equation becomes

\[ax = 1/x  \;,\]

so that \(x_0 \approx 1/\sqrt{a}\) for \(a \gg 1\).

We will use this to cook up a class which switches from interpolation to using this known asymptotic behavior for out-of-range data. A bare-bones implementation may look like this

``` python
class RootWithAsymptotics:
   def __init__(self, a):

       # construct the interpolant
       xleft, xright = 0.2, np.pi/2
       x = np.linspace(xleft, xright, 11)

       y = f(x, a)
       dydx = a + 1./np.sin(x)**2    # d(ax - 1/tan(x)) / dx
       dxdy = 1 / dydx               # dx/dy = 1 / (dy/dx)

       # inverse interpolation
       self.spl = BPoly.from_derivatives(y, np.c_[x, dxdy])
       self.a = a

   def root(self):
       out = self.spl(0)
       asympt = 1./np.sqrt(self.a)
       return np.where(spl.x.min() < asympt, out, asympt)
```

And then

> \>\>\> r = RootWithAsymptotics(93) \>\>\> r.root() array(0.10369517)

which differs from the extrapolated result and agrees with the `brentq` call.

Note that this implementation is intentionally pared down. From the API perspective, you may want to instead implement the `__call__` method so that the full dependence of `x` on `y` is available. From the numerical perspective, more work is needed to make sure that the switch between interpolation and asymptotics occurs deep enough into the asymptotic regime, so that the resulting function is smooth enough at the switch-over point.

Also in this example we artificially limited the problem to only consider a single periodicity interval of the `tan` function, and only dealt with \(a > 0\). For negative values of \(a\), we would need to implement the other asymptotics, for \(x\to \pi\).

However the basic idea is the same.

## Extrapolation in `D > 1`

The basic idea of implementing extrapolation manually in a wrapper class or function can be easily generalized to higher dimensions. As an example, we consider a C1-smooth interpolation problem of 2D data using <span class="title-ref">CloughTocher2DInterpolator</span>. By default, it fills the out of bounds values with `nan`s, and we want to instead use for each query point the value of its nearest neighbor.

Since <span class="title-ref">CloughTocher2DInterpolator</span> accepts either 2D data or a Delaunay triangulation of the data points, the efficient way of finding nearest neighbors of query points would be to construct the triangulation (using <span class="title-ref">scipy.spatial</span> tools) and use it to find nearest neighbors on the convex hull of the data.

We will instead use a simpler, naive method and rely on looping over the whole dataset using NumPy broadcasting.

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import CloughTocher2DInterpolator as CT

  - def my\_CT(xy, z):  
    """CT interpolator + nearest-neighbor extrapolation.
    
    #### Parameters
    
      - xy : ndarray, shape (npoints, ndim)  
        Coordinates of data points
    
      - z : ndarray, shape (npoints)  
        Values at data points
    
    #### Returns
    
      - func : callable  
        A callable object which mirrors the CT behavior, with an additional neareast-neighbor extrapolation outside of the data range.
    
    """ x = xy\[:, 0\] y = xy\[:, 1\] f = CT(xy, z)
    
    \# this inner function will be returned to a user def new\_f(xx, yy): \# evaluate the CT interpolator. Out-of-bounds values are nan. zz = f(xx, yy) nans = np.isnan(zz)
    
    >   - if nans.any():  
    >     \# for each nan point, find its nearest neighbor inds = np.argmin( (x\[:, None\] - xx\[nans\])**2 + (y\[:, None\] - yy\[nans\])**2 , axis=0) \# ... and use its value zz\[nans\] = z\[inds\]
    > 
    > return zz
    
    return new\_f

\# Now illustrate the difference between the original `CT` interpolant \# and `my_CT` on a small example:

x = np.array(\[1, 1, 1, 2, 2, 2, 4, 4, 4\]) y = np.array(\[1, 2, 3, 1, 2, 3, 1, 2, 3\]) z = np.array(\[0, 7, 8, 3, 4, 7, 1, 3, 4\])

xy = [np.c]()\[x, y\] lut = CT(xy, z) lut2 = my\_CT(xy, z)

X = np.linspace(min(x) - 0.5, max(x) + 0.5, 71) Y = np.linspace(min(y) - 0.5, max(y) + 0.5, 71) X, Y = np.meshgrid(X, Y)

fig = plt.figure() ax = fig.add\_subplot(projection='3d')

ax.plot\_wireframe(X, Y, lut(X, Y), label='CT') ax.plot\_wireframe(X, Y, lut2(X, Y), color='m', cstride=10, rstride=10, alpha=0.7, label='CT + n.n.')

ax.scatter(x, y, z, 'o', color='k', s=48, label='data') ax.legend() plt.tight\_layout()

</div>

---

smoothing_splines.md

---

<div id="tutorial-interpolate_fitpack">

<div class="currentmodule">

scipy.interpolate

</div>

</div>

# Smoothing splines

## Spline smoothing in 1D

For the interpolation problem, the task is to construct a curve which passes through a given set of data points. This may be not appropriate if the data is noisy: we then want to construct a smooth curve, \(g(x)\), which *approximates* input data without passing through each point exactly.

To this end, <span class="title-ref">scipy.interpolate</span> allows constructing *smoothing splines* which balance how close the resulting curve, \(g(x)\), is to the data, and the smoothness of \(g(x)\). Mathematically, the task is to solve a penalized least-squares problem, where the penalty controls the smoothness of \(g(x)\).

We provide two approaches to constructing smoothing splines, which differ in (1) the form of the penalty term, and (2) the basis in which the smoothing curve is constructed. Below we consider these two approaches.

The former variant is performed by the <span class="title-ref">make\_smoothing\_spline</span> function, which is a clean-room reimplementation of the classic `gcvspl` Fortran package by H. Woltring. The latter variant is implemented by the <span class="title-ref">make\_splrep</span> function, which is a reimplementation of the Fortran FITPACK library by P. Dierckx. \[A legacy interface to the FITPACK library \<tutorial-fitpack-legacy\>\](\#a-legacy-interface-to-the-fitpack-library-\<tutorial-fitpack-legacy\>) is also available.

### "Classic" smoothing splines and generalized cross-validation (GCV) criterion

Given the data arrays `x` and `y` and the array of non-negative *weights*, `w`, we look for a cubic spline function `g(x)` which minimizes

\[\sum\limits_{j=1}^n w_j \left\lvert y_j - g(x_j) \right\rvert^2 +
\lambda\int\limits_{x_1}^{x_n} \left( g^{(2)}(u) \right)^2 d u\]

where \(\lambda \geqslant 0\) is a non-negative penalty parameter, and \(g^{(2)}(x)\) is the second derivative of \(g(x)\). The summation in the first term runs over the data points, \((x_j, y_j)\), and the integral in the second term is over the whole interval \(x \in [x_1, x_n]\).

Here the first term penalizes the deviation of the spline function from the data, and the second term penalizes large values of the second derivative---which is taken as the criterion for the smoothness of a curve.

The target function, \(g(x)\), is taken to be a natural cubic spline *with knots at the data points*, \(x_j\), and the minimization is carried over the spline coefficients at a given value of \(\lambda\).

Clearly, \(\lambda = 0\) corresponds to the interpolation problem---the result is a *natural interpolating spline*; in the opposite limit, \(\lambda \gg 1\), the result \(g(x)\) approaches a straight line (since the minimization effectively zeros out the second derivative of \(g(x)\)).

The smoothing function strongly depends on \(\lambda\), and multiple strategies are possible for selecting an "optimal" value of the penalty. One popular strategy is the so-called *generalized cross-validation* (GCV): conceptually, this is equivalent to comparing the spline functions constructed on reduced sets of data where we leave out one data point. Direct application of this leave-one-out cross-validation procedure is very costly, and we use a more efficient GCV algorithm.

To construct the smoothing spline given data and the penalty parameter, we use the function <span class="title-ref">make\_smoothing\_spline</span>. Its interface is similar to the constructor of interpolating splines, \`make\_interp\_spline\`: it accepts data arrays and returns a callable <span class="title-ref">BSpline</span> instance.

Additionally, it accepts an optional `lam` keyword argument to specify the penalty parameter \(\lambda\). If omitted or set to `None`, \(\lambda\) is computed via the GCV procedure.

To illustrate the effect of the penalty parameter, consider a toy example of a sine curve with some noise:

<div class="plot">

\>\>\> import numpy as np \>\>\> from scipy.interpolate import make\_smoothing\_spline

Generate some noisy data:

\>\>\> x = np.arange(0, 2\*np.pi+np.pi/4, 2\*np.pi/16) \>\>\> rng = np.random.default\_rng() \>\>\> y = np.sin(x) + 0.4\*rng.standard\_normal(size=len(x))

Construct and plot smoothing splines for a series of values of the penalty parameter:

\>\>\> import matplotlib.pyplot as plt \>\>\> xnew = np.arange(0, 9/4, 1/50) \* np.pi \>\>\> for lam in \[0, 0.02, 10, None\]: ... spl = make\_smoothing\_spline(x, y, lam=lam) ... plt.plot(xnew, spl(xnew), '-.', label=fr'$lambda=${lam}') \>\>\> plt.plot(x, y, 'o') \>\>\> plt.legend() \>\>\> plt.show()

</div>

We clearly see that `lam=0` constructs the interpolating spline; large values of `lam` flatten out the resulting curve towards a straight line; and the GCV result, `lam=None`, is close to the underlying sine curve.

### Smoothing splines with automatic knot selection

As an addition to <span class="title-ref">make\_smoothing\_spline</span>, SciPy provides an alternative, in the form of <span class="title-ref">make\_splrep</span> and <span class="title-ref">make\_splprep</span> routines. The former constructs spline functions and the latter is for parametric spline curves in \(d > 1\) dimensions.

While having a similar API (receive the data arrays, return a <span class="title-ref">BSpline</span> instance), these differ from <span class="title-ref">make\_smoothing\_spline</span> in several ways:

  - the functional form of the penalty term is different: these routines use *jumps* of the \(k\)-th derivative instead of the integral of the \((k-1)\)-th derivative;
  - instead of the penalty parameter \(\lambda\), a smoothness parameter \(s\) is used;
  - these routines automatically construct the knot vector; depending on inputs, resulting splines may have much fewer knots than data points.
  - by default boundary conditions differ: while <span class="title-ref">make\_smoothing\_spline</span> constructs natural cubic splines, these routines use the not-a-knot boundary conditions by default.

Let us consider the algorithm in more detail. First, **the smoothing criterion**. Given a cubic spline function, \(g(x)\), defined by the knots, \(t_j\), and coefficients, \(c_j\), consider the jumps of the third derivative at internal knots,

\[D_j = g^{(3)}(t_j + 0) - g^{(3)}(t_j - 0) .\]

(For degree-\(k\) splines, we would have used jumps of the \(k\)-th derivative.)

If all \(D_j = 0\), then \(g(x)\) is a single polynomial on the whole domain spanned by the knots. We thus consider \(g(x)\) to be a piecewise \(C^2\)-differentiable spline function and use as the smoothing criterion the sum of jumps,

\[\sum_j \left| D_j \right|^2 \to \mathrm{min} ,\]

where the minimization performed is over the spline coefficients, and, potentially, the spline knots.

To make sure \(g(x)\) approximates the input data, \(x_j\) and \(y_j\), we introduce the *smoothness parameter* \(s \geqslant 0\) and add a constraint that

\[\sum_{j=1}^m \left[w_j \times \left(g(x_j) - y_j\right) \right]^2 \leqslant s .\]

In this formulation, the smoothness parameter \(s\) is a user input, much like the penalty parameter \(\lambda\) is for the classic smoothing splines.

Note that the limit `s = 0` corresponds to the interpolation problem where \(g(x_j) = y_j\). Increasing `s` leads to smoother fits, and in the limit of a very large `s`, \(g(x)\) degenerates into a single best-fit polynomial.

For a fixed knot vector and a given value of \(s\), the minimization problem is linear. If we also minimize with respect to the knots, the problem becomes non-linear. We thus need to specify an iterative minimization process to **construct the knot vector** along with the spline coefficients.

We therefore use the following procedure:

  - we start with a spline with no internal knots, and check the smoothness condition for the user-provided value of \(s\). If it is satisfied, we are done. Otherwise,
  - iterate, where on each iteration we
      - add new knots by splitting the interval with the maximum deviation between the spline function \(g(x_j)\) and the data \(y_j\).
      - construct the next approximation for \(g(x)\) and check the smoothness criterion.

The iterations stop if either the smoothness condition is satisfied, or the maximum allowed number of knots is reached. The latter can be either specified by a user, or is taken as the default value `len(x) + k + 1` which corresponds to the interpolation of the data array `x` with splines of degree `k`.

Rephrasing and glossing over details, the procedure is to iterate over the knot vectors generated by <span class="title-ref">generate\_knots</span>, applying <span class="title-ref">make\_lsq\_spline</span> on each step. In pseudocode:

    for t in generate_knots(x, y, s=s):
        g = make_lsq_spline(x, y, t=t)     # construct
        if ((y - g(x))**2).sum() < s:      # check smoothness
            break

\> **Note** \> For `s=0`, we take a short-cut and construct the interpolating spline with the not-a-knot boundary condition instead of iterating.

The iterative procedure of constructing a knot vector is available through the generator function <span class="title-ref">generate\_knots</span>. To illustrate:

\>\>\> import numpy as np \>\>\> from scipy.interpolate import generate\_knots \>\>\> x = np.arange(7) \>\>\> y = x\*\*4 \>\>\> list(generate\_knots(x, y, s=1)) \# default is cubic splines, k=3 \[array(\[0., 0., 0., 0., 6., 6., 6., 6.\]), array(\[0., 0., 0., 0., 3., 6., 6., 6., 6.\]), array(\[0., 0., 0., 0., 3., 5., 6., 6., 6., 6.\]), array(\[0., 0., 0., 0., 2., 3., 4., 6., 6., 6., 6.\])\]

For `s=0`, the generator cuts short:

\>\>\> list(generate\_knots(x, y, s=0)) \[array(\[0, 0, 0, 0, 2, 3, 4, 6, 6, 6, 6\])\]

\> **Note** \> In general, knots are placed at data sites. The exception is even-order splines, where the knots can be placed away from data. This happens when `s=0` (interpolation), or when `s` is small enough so that the maximum number of knots is reached, and the routine switches to the `s=0` knot vector (sometimes known as Greville abscissae).

\>\>\> list(generate\_knots(x, y, s=1, k=2)) \# k=2, quadratic spline \[array(\[0., 0., 0., 6., 6., 6.\]), array(\[0., 0., 0., 3., 6., 6., 6.\]), array(\[0., 0., 0., 3., 5., 6., 6., 6.\]), array(\[0., 0., 0., 2., 3., 5., 6., 6., 6.\]), array(\[0. , 0. , 0. , 1.5, 2.5, 3.5, 4.5, 6. , 6. , 6. \])\] \# Greville sites

\> **Note** \> The heuristics for constructing the knot vector follows the algorithm used by the FITPACK Fortran library. The algorithm is the same, and small differences are possible due to floating-point rounding.

We now illustrate <span class="title-ref">make\_splrep</span> results, using the same toy dataset as in the previous section

<div class="plot">

\>\>\> import numpy as np \>\>\> from scipy.interpolate import make\_splrep

Generate some noisy data

\>\>\> x = np.arange(0, 2\*np.pi+np.pi/4, 2\*np.pi/16) \>\>\> rng = np.random.default\_rng() \>\>\> y = np.sin(x) + 0.4\*rng.standard\_normal(size=len(x))

Construct and plot smoothing splines for a series of values of the `s` parameter:

\>\>\> import matplotlib.pyplot as plt \>\>\> xnew = np.arange(0, 9/4, 1/50) \* np.pi

\>\>\> plt.plot(xnew, np.sin(xnew), '-.', label='sin(x)') \>\>\> plt.plot(xnew, make\_splrep(x, y, s=0)(xnew), '-', label='s=0') \>\>\> plt.plot(xnew, make\_splrep(x, y, s=len(x))(xnew), '-', label=f's={len(x)}') \>\>\> plt.plot(x, y, 'o') \>\>\> plt.legend() \>\>\> plt.show()

</div>

We see that the \(s=0\) curve follows the (random) fluctuations of the data points, while the \(s > 0\) curve is close to the underlying sine function. Also note that the extrapolated values vary wildly depending on the value of \(s\).

Finding a good value of \(s\) is a trial-and-error process. If the weights correspond to the inverse of standard deviations of the input data, a "good" value of \(s\) is expected to be somewhere between \(m - \sqrt{2m}\) and \(m + \sqrt{2m}\), where \(m\) is the number of data points. If all weights equal unity, a reasonable choice might be around \(s \sim m\,\sigma^2\), where \(\sigma\) is an estimate for the standard deviation of the data.

\> **Note** \> The number of knots a very strongly dependent on `s`. It is possible that small variations of `s` lead to drastic changes in the knot number.

<div class="note">

<div class="title">

Note

</div>

Both <span class="title-ref">make\_smoothing\_spline</span> and <span class="title-ref">make\_splrep</span> allow for weighted fits, where the user provides an array of weights, `w`. Note that the definition differs somewhat: <span class="title-ref">make\_smoothing\_spline</span> squares the weights to be consistent with `gcvspl`, while <span class="title-ref">make\_splrep</span> does not---to be consistent with `FITPACK`.

</div>

### Smoothing spline curves in \(d>1\)

So far we considered constructing smoothing spline functions, \(g(x)\) given data arrays `x` and `y`. We now consider a related problem of constructing a smoothing spline *curve*, where we consider the data as points on a plane, \(\mathbf{p}_j = (x_j, y_j)\), and we want to construct a parametric function \(\mathbf{g}(\mathbf{p}) = (g_x(u), g_y(u))\), where the values of the parameter \(u_j\) correspond to \(x_j\) and \(y_j\).

Note that this problem readily generalizes to higher dimensions, \(d > 2\): we simply have \(d\) data arrays and construct a parametric function with \(d\) components.

Also note that the choice of parametrization cannot be automated, and different parameterizations can lead to very different curves for the same data, even for \[interpolating curves\<tutorial-interpolate\_parametric\>\](\#interpolating-curves\<tutorial-interpolate\_parametric\>).

Once a specific form of parametrization is chosen, the problem of constructing a smoothing curve is conceptually very similar to constructing a smoothing spline function. In a nutshell,

  - spline knots are added from the values of the parameter \(u\), and
  - both the cost function to minimize and the constraint we considered for \[spline functions \<tutorial\_make\_splrep\>\](\#spline-functions-\<tutorial\_make\_splrep\>) simply get an extra summation over the \(d\) components.

The "parametric" generalization of the <span class="title-ref">make\_splrep</span> function is <span class="title-ref">make\_splprep</span>, and its docstring spells out the precise mathematical formulation of the minimization problem it solves.

The main user-visible difference of the parametric case is the user interface:

  - instead of two data arrays, `x` and `y`, <span class="title-ref">make\_splprep</span> receives a single two-dimensional array, where the second dimension has size \(d\) and each data array is stored along the first dimension (alternatively, you can supply a list of 1D arrays).
  - the return value is pair: a <span class="title-ref">BSpline</span> instance and the array of parameter values, `u`, which corresponds to the input data arrays.

By default, <span class="title-ref">make\_splprep</span> constructs and returns the cord length parametrization of input data (see the \[Parametric spline curves \<tutorial-interpolate\_parametric\>\](\#parametric-spline-curves-\<tutorial-interpolate\_parametric\>) section for details). Alternatively, you can provide your own array of parameter values, `u`.

To illustrate the API, consider a toy problem: we have some data sampled from a folium of Descartes *plus* some noise.

<div class="plot">

\>\>\> import numpy as np \>\>\> from scipy.interpolate import make\_splprep \>\>\> th = np.linspace(-0.2, np.pi/2 + 0.2, 21) \>\>\> r = 3 \* np.sin(th) \* np.cos(th) / (np.sin(th)**3 + np.cos(th)**3) \>\>\> x, y = r \* np.cos(th), r \* np.sin(th)

Add some noise and construct the interpolators

\>\>\> rng = np.random.default\_rng() \>\>\> xn = x + 0.1\*rng.uniform(-1, 1, size=len(x)) \>\>\> yn = y + 0.1\*rng.uniform(-1, 1, size=len(x)) \>\>\> spl, u = make\_splprep(\[xn, yn\], s=0) \# note the \[xn, yn\] argument \>\>\> spl\_n, u\_n = make\_splprep(\[xn, yn\], s=0.1)

And plot the results (the result of `spl(u)` is a 2D array, so we unpack it into a pair of `x` and `y` arrays for plotting).

\>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(xn, yn, 'o') \>\>\> plt.plot(*spl(u), '--') \>\>\> plt.plot(*spl\_n(u\_n), '-') \>\>\> plt.show()

</div>

### Legacy routines for spline smoothing in 1-D

In addition to smoothing splines constructors we discussed in the previous sections, <span class="title-ref">scipy.interpolate</span> provides direct interfaces for routines from the venerable FITPACK Fortran library authored by P. Dierckx.

\> **Note** \> These interfaces should be considered *legacy*---while we do not plan to deprecate or remove them, we recommend that new code uses more modern alternatives, <span class="title-ref">make\_smoothing\_spline</span>, <span class="title-ref">make\_splrep</span> or <span class="title-ref">make\_splprep</span>, instead.

For historical reasons, <span class="title-ref">scipy.interpolate</span> provides two equivalent interfaces for FITPACK, a interface and an object-oriented interface. While equivalent, these interfaces have different defaults. Below we discuss them in turn, starting from the functional interface.

#### Procedural (<span class="title-ref">splrep</span>)

Spline interpolation requires two essential steps: (1) a spline representation of the curve is computed, and (2) the spline is evaluated at the desired points. In order to find the spline representation, there are two different ways to represent a curve and obtain (smoothing) spline coefficients: directly and parametrically. The direct method finds the spline representation of a curve in a 2-D plane using the function `splrep`. The first two arguments are the only ones required, and these provide the \(x\) and \(y\) components of the curve. The normal output is a 3-tuple, \(\left(t,c,k\right)\) , containing the knot-points, \(t\) , the coefficients \(c\) and the order \(k\) of the spline. The default spline order is cubic, but this can be changed with the input keyword, *k.*

The knot array defines the interpolation interval to be `t[k:-k]`, so that the first \(k+1\) and last \(k+1\) entries of the `t` array define *boundary knots*. The coefficients are a 1D array of length at least `len(t) - k - 1`. Some routines pad this array to have `len(c) == len(t)`---these additional coefficients are ignored for the spline evaluation.

The `tck`-tuple format is compatible with \[interpolating b-splines \<tutorial-interpolate\_bspl\_basis\>\](\#interpolating-b-splines-\<tutorial-interpolate\_bspl\_basis\>): the output of <span class="title-ref">splrep</span> can be wrapped into a <span class="title-ref">BSpline</span> object, e.g. `BSpline(*tck)`, and the evaluation/integration/root-finding routines described below can use `tck`-tuples and <span class="title-ref">BSpline</span> objects interchangeably.

For curves in N-D space the function `splprep` allows defining the curve parametrically. For this function only 1 input argument is required. This input is a list of \(N\) arrays representing the curve in N-D space. The length of each array is the number of curve points, and each array provides one component of the N-D data point. The parameter variable is given with the keyword argument, `u`, which defaults to an equally-spaced monotonic sequence between \(0\) and \(1\) (i.e., the \[uniform parametrization \<tutorial-interpolate\_parametric\>\](\#uniform parametrization-\<tutorial-interpolate\_parametric\>)).

The output consists of two objects: a 3-tuple, \(\left(t,c,k\right)\) , containing the spline representation and the parameter variable \(u.\)

The coefficients are a list of \(N\) arrays, where each array corresponds to a dimension of the input data. Note that the knots, `t` correspond to the parametrization of the curve `u`.

The keyword argument, `s` , is used to specify the amount of smoothing to perform during the spline fit. The default value of \(s\) is \(s=m-\sqrt{2m}\) where \(m\) is the number of data points being fit. Therefore, **if no smoothing is desired a value of** \(\mathbf{s}=0\) **should be passed to the routines.**

Once the spline representation of the data has been determined, it can be evaluated either using the <span class="title-ref">splev</span> function or by wrapping the <span class="title-ref">tck</span> tuple into a <span class="title-ref">BSpline</span> object, as demonstrated below.

We start by illustrating the effect of the `s` parameter on smoothing some synthetic noisy data

<div class="plot">

\>\>\> import numpy as np \>\>\> from scipy.interpolate import splrep, BSpline

Generate some noisy data

\>\>\> x = np.arange(0, 2\*np.pi+np.pi/4, 2\*np.pi/16) \>\>\> rng = np.random.default\_rng() \>\>\> y = np.sin(x) + 0.4\*rng.standard\_normal(size=len(x))

Construct two splines with different values of `s`.

\>\>\> tck = splrep(x, y, s=0) \>\>\> tck\_s = splrep(x, y, s=len(x))

And plot them

\>\>\> import matplotlib.pyplot as plt \>\>\> xnew = np.arange(0, 9/4, 1/50) \* np.pi \>\>\> plt.plot(xnew, np.sin(xnew), '-.', label='sin(x)') \>\>\> plt.plot(xnew, BSpline(*tck)(xnew), '-', label='s=0') \>\>\> plt.plot(xnew, BSpline(*tck\_s)(xnew), '-', label=f's={len(x)}') \>\>\> plt.plot(x, y, 'o') \>\>\> plt.legend() \>\>\> plt.show()

</div>

We see that the `s=0` curve follows the (random) fluctuations of the data points, while the `s > 0` curve is close to the underlying sine function. Also note that the extrapolated values vary wildly depending on the value of `s`.

The default value of `s` depends on whether the weights are supplied or not, and also differs for <span class="title-ref">splrep</span> and <span class="title-ref">splprep</span>. Therefore, we recommend always providing the value of `s` explicitly.

#### Manipulating spline objects: procedural (`splXXX`)

Once the spline representation of the data has been determined, functions are available for evaluating the spline (<span class="title-ref">splev</span>) and its derivatives (<span class="title-ref">splev</span>, <span class="title-ref">spalde</span>) at any point and the integral of the spline between any two points ( <span class="title-ref">splint</span>). In addition, for cubic splines ( \(k=3\) ) with 8 or more knots, the roots of the spline can be estimated ( <span class="title-ref">sproot</span>). These functions are demonstrated in the example that follows.

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> import matplotlib.pyplot as plt \>\>\> from scipy import interpolate

Cubic spline

\>\>\> x = np.arange(0, 2\*np.pi+np.pi/4, 2\*np.pi/8) \>\>\> y = np.sin(x) \>\>\> tck = interpolate.splrep(x, y, s=0) \>\>\> xnew = np.arange(0, 2\*np.pi, np.pi/50) \>\>\> ynew = interpolate.splev(xnew, tck, der=0)

Note that the last line is equivalent to `BSpline(*tck)(xnew)`.

\>\>\> plt.figure() \>\>\> plt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b') \>\>\> plt.legend(\['Linear', 'Cubic Spline', 'True'\]) \>\>\> plt.axis(\[-0.05, 6.33, -1.05, 1.05\]) \>\>\> plt.title('Cubic-spline interpolation') \>\>\> plt.show()

Derivative of spline

\>\>\> yder = interpolate.splev(xnew, tck, der=1) \# or BSpline(\*tck)(xnew, 1) \>\>\> plt.figure() \>\>\> plt.plot(xnew, yder, xnew, np.cos(xnew),'--') \>\>\> plt.legend(\['Cubic Spline', 'True'\]) \>\>\> plt.axis(\[-0.05, 6.33, -1.05, 1.05\]) \>\>\> plt.title('Derivative estimation from spline') \>\>\> plt.show()

All derivatives of spline

\>\>\> yders = interpolate.spalde(xnew, tck) \>\>\> plt.figure() \>\>\> for i in range(len(yders\[0\])): ... plt.plot(xnew, \[d\[i\] for d in yders\], '--', label=f"{i} derivative") \>\>\> plt.legend() \>\>\> plt.axis(\[-0.05, 6.33, -1.05, 1.05\]) \>\>\> plt.title('All derivatives of a B-spline') \>\>\> plt.show()

Integral of spline

\>\>\> def integ(x, tck, constant=-1): ... x = np.atleast\_1d(x) ... out = np.zeros(x.shape, dtype=x.dtype) ... for n in range(len(out)): ... out\[n\] = interpolate.splint(0, x\[n\], tck) ... out += constant ... return out

\>\>\> yint = integ(xnew, tck) \>\>\> plt.figure() \>\>\> plt.plot(xnew, yint, xnew, -np.cos(xnew), '--') \>\>\> plt.legend(\['Cubic Spline', 'True'\]) \>\>\> plt.axis(\[-0.05, 6.33, -1.05, 1.05\]) \>\>\> plt.title('Integral estimation from spline') \>\>\> plt.show()

Roots of spline

\>\>\> interpolate.sproot(tck) array(\[3.1416\]) \# may vary

Notice that <span class="title-ref">sproot</span> may fail to find an obvious solution at the edge of the approximation interval, \(x = 0\). If we define the spline on a slightly larger interval, we recover both roots \(x = 0\) and \(x = \pi\):

\>\>\> x = np.linspace(-np.pi/4, np.pi + np.pi/4, 51) \>\>\> y = np.sin(x) \>\>\> tck = interpolate.splrep(x, y, s=0) \>\>\> interpolate.sproot(tck) array(\[0., 3.1416\])

Parametric spline

\>\>\> t = np.arange(0, 1.1, .1) \>\>\> x = np.sin(2\*np.pi\*t) \>\>\> y = np.cos(2\*np.pi\*t) \>\>\> tck, u = interpolate.splprep(\[x, y\], s=0) \>\>\> unew = np.arange(0, 1.01, 0.01) \>\>\> out = interpolate.splev(unew, tck) \>\>\> plt.figure() \>\>\> plt.plot(x, y, 'x', out\[0\], out\[1\], np.sin(2\*np.pi\*unew), np.cos(2\*np.pi\*unew), x, y, 'b') \>\>\> plt.legend(\['Linear', 'Cubic Spline', 'True'\]) \>\>\> plt.axis(\[-1.05, 1.05, -1.05, 1.05\]) \>\>\> plt.title('Spline of parametrically-defined curve') \>\>\> plt.show()

</div>

Note that in the last example, <span class="title-ref">splprep</span> returns the spline coefficients as a list of arrays, where each array corresponds to a dimension of the input data. Thus to wrap its output to a <span class="title-ref">BSpline</span>, we need to transpose the coefficients (or use `BSpline(..., axis=1)`):

> \>\>\> tt, cc, k = tck \>\>\> cc = np.array(cc) \>\>\> bspl = BSpline(tt, cc.T, k) \# note the transpose \>\>\> xy = bspl(u) \>\>\> xx, yy = xy.T \# transpose to unpack into a pair of arrays \>\>\> np.allclose(x, xx) True \>\>\> np.allclose(y, yy) True

##### Object-oriented (<span class="title-ref">UnivariateSpline</span>)

The spline-fitting capabilities described above are also available via an objected-oriented interface. The 1-D splines are objects of the <span class="title-ref">UnivariateSpline</span> class, and are created with the \(x\) and \(y\) components of the curve provided as arguments to the constructor. The class defines <span class="title-ref">\_\_call\_\_ \<UnivariateSpline.\_\_call\_\_\></span>, allowing the object to be called with the x-axis values, at which the spline should be evaluated, returning the interpolated y-values. This is shown in the example below for the subclass <span class="title-ref">InterpolatedUnivariateSpline</span>. The <span class="title-ref">integral \<UnivariateSpline.integral\></span>, <span class="title-ref">derivatives \<UnivariateSpline.derivatives\></span>, and <span class="title-ref">roots \<UnivariateSpline.roots\></span> methods are also available on <span class="title-ref">UnivariateSpline</span> objects, allowing definite integrals, derivatives, and roots to be computed for the spline.

The UnivariateSpline class can also be used to smooth data by providing a non-zero value of the smoothing parameter <span class="title-ref">s</span>, with the same meaning as the <span class="title-ref">s</span> keyword of the `splrep` function described above. This results in a spline that has fewer knots than the number of data points, and hence is no longer strictly an interpolating spline, but rather a smoothing spline. If this is not desired, the <span class="title-ref">InterpolatedUnivariateSpline</span> class is available. It is a subclass of <span class="title-ref">UnivariateSpline</span> that always passes through all points (equivalent to forcing the smoothing parameter to 0). This class is demonstrated in the example below.

The <span class="title-ref">LSQUnivariateSpline</span> class is the other subclass of <span class="title-ref">UnivariateSpline</span>. It allows the user to specify the number and location of internal knots explicitly with the parameter <span class="title-ref">t</span>. This allows for the creation of customized splines with non-linear spacing, to interpolate in some domains and smooth in others, or change the character of the spline.

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> import matplotlib.pyplot as plt \>\>\> from scipy import interpolate

InterpolatedUnivariateSpline

\>\>\> x = np.arange(0, 2\*np.pi+np.pi/4, 2\*np.pi/8) \>\>\> y = np.sin(x) \>\>\> s = interpolate.InterpolatedUnivariateSpline(x, y) \>\>\> xnew = np.arange(0, 2\*np.pi, np.pi/50) \>\>\> ynew = s(xnew)

\>\>\> plt.figure() \>\>\> plt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b') \>\>\> plt.legend(\['Linear', 'InterpolatedUnivariateSpline', 'True'\]) \>\>\> plt.axis(\[-0.05, 6.33, -1.05, 1.05\]) \>\>\> plt.title('InterpolatedUnivariateSpline') \>\>\> plt.show()

LSQUnivarateSpline with non-uniform knots

\>\>\> t = \[np.pi/2-.1, np.pi/2+.1, 3\*np.pi/2-.1, 3\*np.pi/2+.1\] \>\>\> s = interpolate.LSQUnivariateSpline(x, y, t, k=2) \>\>\> ynew = s(xnew)

\>\>\> plt.figure() \>\>\> plt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b') \>\>\> plt.legend(\['Linear', 'LSQUnivariateSpline', 'True'\]) \>\>\> plt.axis(\[-0.05, 6.33, -1.05, 1.05\]) \>\>\> plt.title('Spline with Specified Interior Knots') \>\>\> plt.show()

</div>

## 2-D smoothing splines

In addition to smoothing 1-D splines, the FITPACK library provides the means of fitting 2-D *surfaces* to two-dimensional data. The surfaces can be thought of as functions of two arguments, \(z = g(x, y)\), constructed as tensor products of 1-D splines.

Assuming that the data is held in three arrays, `x`, `y` and `z`, there are two ways these data arrays can be interpreted. First---the *scattered* interpolation problem---the data is assumed to be paired, i.e. the pairs of values `x[i]` and `y[i]` represent the coordinates of the point `i`, which corresponds to `z[i]`.

The surface \(g(x, y)\) is constructed to satisfy

\[\sum_i \left[ w_i (g(x_i, y_i) - z_i)\right]^2 \leqslant s\]

where \(w_i\) are non-negative weights, and `s` is the input parameter, known as the *smoothing factor*, which controls the interplay between smoothness of the resulting function `g(x, y)` and the quality of the approximation of the data (i.e., the differences between \(g(x_i, y_i)\) and \(z_i\)). The limit of \(s = 0\) formally corresponds to interpolation, where the surface passes through the input data, \(g(x_i, y_i) = z_i\). See the note below however.

The second case---the *rectangular grid* interpolation problem---is where the data points are assumed to be on a rectangular grid defined by all pairs of the elements of the `x` and `y` arrays. For this problem, the `z` array is assumed to be two-dimensional, and `z[i, j]` corresponds to `(x[i], y[j])`. The bivariate spline function \(g(x, y)\) is constructed to satisfy

\[\sum_i \sum_j \left[ (g(x_i, y_j) - z_{i,j})\right]^2 \leqslant s\]

where `s` is the smoothing factor. Here the limit of \(s=0\) also formally corresponds to interpolation, \(g(x_i, y_j) = z_{i, j}\).

<div class="note">

<div class="title">

Note

</div>

Internally, the smoothing surface \(g(x, y)\) is constructed by placing spline knots into the bounding box defined by the data arrays. The knots are placed automatically via the FITPACK algorithm until the desired smoothness is reached.

*The knots may be placed away from the data points.*

While \(s=0\) formally corresponds to a bivariate spline interpolation, the FITPACK algorithm is not meant for interpolation, and may lead to unexpected results.

For scattered data interpolation, prefer <span class="title-ref">griddata</span>; for data on a regular grid, prefer <span class="title-ref">RegularGridInterpolator</span>.

</div>

\> **Note** \> If the input data, `x` and `y`, is such that input dimensions have incommensurate units and differ by many orders of magnitude, the interpolant \(g(x, y)\) may have numerical artifacts. Consider rescaling the data before interpolation.

We now consider the two spline fitting problems in turn.

### Bivariate spline fitting of scattered data

There are two interfaces for the underlying FITPACK library, a procedural one and an object-oriented interface.

**Procedural interface (\`bisplrep\`)**

For (smooth) spline fitting to a 2-D surface, the function <span class="title-ref">bisplrep</span> is available. This function takes as required inputs the **1-D** arrays `x`, `y`, and `z`, which represent points on the surface \(z=f(x, y).\) The spline orders in `x` and `y` directions can be specified via the optional parameters `kx` and `ky`. The default is a bicubic spline, `kx=ky=3`.

The output of <span class="title-ref">bisplrep</span> is a list `[tx ,ty, c, kx, ky]` whose entries represent respectively, the components of the knot positions, the coefficients of the spline, and the order of the spline in each coordinate. It is convenient to hold this list in a single object, `tck`, so that it can be passed easily to the function `bisplev`. The keyword, `s` , can be used to change the amount of smoothing performed on the data while determining the appropriate spline. The recommended values for \(s\) depend on the weights \(w_i\). If these are taken as \(1/d_i\), with \(d_i\) an estimate of the standard deviation of \(z_i\), a good value of \(s\) should be found in the range \(m- \sqrt{2m}, m + 
\sqrt{2m}\), where where \(m\) is the number of data points in the `x`, `y`, and `z` vectors.

The default value is \(s=m-\sqrt{2m}\). As a result, **if no smoothing is desired, then \`\`s=0\`\` should be passed to \`bisplrep\`**. (See however the note above).

To evaluate the 2-D spline and its partial derivatives (up to the order of the spline), the function `bisplev` is required. This function takes as the first two arguments **two 1-D arrays** whose cross-product specifies the domain over which to evaluate the spline. The third argument is the `tck` list returned from `bisplrep`. If desired, the fourth and fifth arguments provide the orders of the partial derivative in the \(x\) and \(y\) direction, respectively.

<div class="note">

<div class="title">

Note

</div>

It is important to note that 2-D interpolation should not be used to find the spline representation of images. The algorithm used is not amenable to large numbers of input points. <span class="title-ref">scipy.signal</span> and <span class="title-ref">scipy.ndimage</span> contain more appropriate algorithms for finding the spline representation of an image.

</div>

The 2-D interpolation commands are intended for use when interpolating a 2-D function as shown in the example that follows. This example uses the `mgrid <numpy.mgrid>` command in NumPy which is useful for defining a "mesh-grid" in many dimensions. (See also the `ogrid <numpy.ogrid>` command if the full-mesh is not needed). The number of output arguments and the number of dimensions of each argument is determined by the number of indexing objects passed in `mgrid <numpy.mgrid>`.

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> from scipy import interpolate \>\>\> import matplotlib.pyplot as plt

Define function over a sparse 20x20 grid

\>\>\> x\_edges, y\_edges = np.mgrid\[-1:1:21j, -1:1:21j\] \>\>\> x = x\_edges\[:-1, :-1\] + np.diff(x\_edges\[:2, 0\])\[0\] / 2. \>\>\> y = y\_edges\[:-1, :-1\] + np.diff(y\_edges\[0, :2\])\[0\] / 2. \>\>\> z = (x+y) \* np.exp(-6.0\*(x\*x+y\*y))

\>\>\> plt.figure() \>\>\> lims = dict(cmap='RdBu\_r', vmin=-0.25, vmax=0.25) \>\>\> plt.pcolormesh(x\_edges, y\_edges, z, shading='flat', \*\*lims) \>\>\> plt.colorbar() \>\>\> plt.title("Sparsely sampled function.") \>\>\> plt.show()

Interpolate function over a new 70x70 grid

\>\>\> xnew\_edges, ynew\_edges = np.mgrid\[-1:1:71j, -1:1:71j\] \>\>\> xnew = xnew\_edges\[:-1, :-1\] + np.diff(xnew\_edges\[:2, 0\])\[0\] / 2. \>\>\> ynew = ynew\_edges\[:-1, :-1\] + np.diff(ynew\_edges\[0, :2\])\[0\] / 2. \>\>\> tck = interpolate.bisplrep(x, y, z, s=0) \>\>\> znew = interpolate.bisplev(xnew\[:,0\], ynew\[0,:\], tck)

\>\>\> plt.figure() \>\>\> plt.pcolormesh(xnew\_edges, ynew\_edges, znew, shading='flat', \*\*lims) \>\>\> plt.colorbar() \>\>\> plt.title("Interpolated function.") \>\>\> plt.show()

</div>

**Object-oriented interface (\`SmoothBivariateSpline\`)**

The object-oriented interface for bivariate spline smoothing of scattered data, <span class="title-ref">SmoothBivariateSpline</span> class, implements a subset of the functionality of the <span class="title-ref">bisplrep</span> / <span class="title-ref">bisplev</span> pair, and has different defaults.

It takes the elements of the weights array equal unity, \(w_i = 1\) and constructs the knot vectors automatically given the input value of the smoothing factor <span class="title-ref">s</span>--- the default value is \(m\), the number of data points.

The spline orders in the `x` and `y` directions are controlled by the optional parameters `kx` and `ky`, with the default of `kx=ky=3`.

We illustrate the effect of the smoothing factor using the following example:

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import SmoothBivariateSpline

import warnings warnings.simplefilter('ignore')

train\_x, train\_y = np.meshgrid(np.arange(-5, 5, 0.5), np.arange(-5, 5, 0.5)) train\_x = train\_x.flatten() train\_y = train\_y.flatten()

  - def z\_func(x, y):  
    return np.cos(x) + np.sin(y) \*\* 2 + 0.05 \* x + 0.1 \* y

train\_z = z\_func(train\_x, train\_y) interp\_func = SmoothBivariateSpline(train\_x, train\_y, train\_z, s=0.0) smth\_func = SmoothBivariateSpline(train\_x, train\_y, train\_z)

test\_x = np.arange(-9, 9, 0.01) test\_y = np.arange(-9, 9, 0.01) grid\_x, grid\_y = np.meshgrid(test\_x, test\_y)

interp\_result = interp\_func(test\_x, test\_y).T smth\_result = smth\_func(test\_x, test\_y).T perfect\_result = z\_func(grid\_x, grid\_y)

fig, axes = plt.subplots(1, 3, figsize=(16, 8)) extent = \[test\_x\[0\], test\_x\[-1\], test\_y\[0\], test\_y\[-1\]\] opts = dict(aspect='equal', cmap='nipy\_spectral', extent=extent, vmin=-1.5, vmax=2.5)

im = axes\[0\].imshow(perfect\_result, \*\*opts) fig.colorbar(im, ax=axes\[0\], orientation='horizontal') axes\[0\].plot(train\_x, train\_y, 'w.') axes\[0\].set\_title('Perfect result, sampled function', fontsize=21)

im = axes\[1\].imshow(smth\_result, \*\*opts) axes\[1\].plot(train\_x, train\_y, 'w.') fig.colorbar(im, ax=axes\[1\], orientation='horizontal') axes\[1\].set\_title('s=default', fontsize=21)

im = axes\[2\].imshow(interp\_result, \*\*opts) fig.colorbar(im, ax=axes\[2\], orientation='horizontal') axes\[2\].plot(train\_x, train\_y, 'w.') axes\[2\].set\_title('s=0', fontsize=21)

plt.tight\_layout() plt.show()

</div>

Here we take a known function (displayed at the leftmost panel), sample it on a mesh of points (shown by white dots), and construct the spline fit using the default smoothing (center panel) and forcing the interpolation (rightmost panel).

Several features are clearly visible. First, the default value of `s` provides too much smoothing for this data; forcing the interpolation condition, `s = 0`, allows to restore the underlying function to a reasonable accuracy. Second, outside of the interpolation range (i.e., the area covered by white dots) the result is extrapolated using a nearest-neighbor constant. Finally, we had to silence the warnings (which is a bad form, yes\!).

The warning here is emitted in the `s=0` case, and signals an internal difficulty FITPACK encountered when we forced the interpolation condition. If you see this warning in your code, consider switching to <span class="title-ref">bisplrep</span> and increase its `nxest`, `nyest` parameters (see the <span class="title-ref">bisplrep</span> docstring for more details).

### Bivariate spline fitting of data on a grid

For gridded 2D data, fitting a smoothing tensor product spline can be done using the <span class="title-ref">RectBivariateSpline</span> class. It has the interface similar to that of <span class="title-ref">SmoothBivariateSpline</span>, the main difference is that the 1D input arrays `x` and `y` are understood as defining a 2D grid (as their outer product), and the `z` array is 2D with the shape of `len(x)` by `len(y)`.

The spline orders in the `x` and `y` directions are controlled by the optional parameters `kx` and `ky`, with the default of `kx=ky=3`, i.e. a bicubic spline.

The default value of the smoothing factor is `s=0`. We nevertheless recommend to always specify `s` explicitly.

<div class="plot">

import numpy as np import matplotlib.pyplot as plt from scipy.interpolate import RectBivariateSpline

x = np.arange(-5.01, 5.01, 0.25) \# the grid is an outer product y = np.arange(-5.01, 7.51, 0.25) \# of x and y arrays

xx, yy = np.meshgrid(x, y, indexing='ij') z = np.sin(xx\**2 + 2.*yy\*\*2) \# z array needs to be 2-D

func = RectBivariateSpline(x, y, z, s=0)

xnew = np.arange(-5.01, 5.01, 1e-2) ynew = np.arange(-5.01, 7.51, 1e-2) znew = func(xnew, ynew)

plt.imshow(znew) plt.colorbar() plt.show()

</div>

### Bivariate spline fitting of data in spherical coordinates

If your data is given in spherical coordinates, \(r = r(\theta, \phi)\), <span class="title-ref">SmoothSphereBivariateSpline</span> and <span class="title-ref">RectSphereBivariateSpline</span> provide convenient analogs of <span class="title-ref">SmoothBivariateSpline</span> and <span class="title-ref">RectBivariateSpline</span>, respectively.

These classes ensure the periodicity of the spline fits for \(\theta \in [0, \pi]\) and \(\phi \in [0, 2\pi]\), and offer some control over the continuity at the poles. Refer to the docstrings of these classes for details.

---

splines_and_polynomials.md

---

<div id="tutorial-interpolate_splines_and_poly">

<div class="currentmodule">

scipy.interpolate

</div>

</div>

# Piecewise polynomials and splines

1D interpolation routines \[discussed in the previous section \<tutorial-interpolate\_1Dsection\>\](\#discussed-in-the-previous-section \<tutorial-interpolate\_1dsection\>), work by constructing certain *piecewise polynomials*: the interpolation range is split into intervals by the so-called *breakpoints*, and there is a certain polynomial on each interval. These polynomial pieces then match at the breakpoints with a predefined smoothness: the second derivatives for cubic splines, the first derivatives for monotone interpolants and so on.

A polynomial of degree \(k\) can be thought of as a linear combination of \(k+1\) monomial basis elements, \(1, x, x^2, \cdots, x^k\). In some applications, it is useful to consider alternative (if formally equivalent) bases. Two popular bases, implemented in <span class="title-ref">scipy.interpolate</span> are B-splines (<span class="title-ref">BSpline</span>) and Bernstein polynomials (<span class="title-ref">BPoly</span>). B-splines are often used for, for example, non-parametric regression problems, and Bernstein polynomials are used for constructing Bezier curves.

<span class="title-ref">PPoly</span> objects represent piecewise polynomials in the 'usual' power basis. This is the case for <span class="title-ref">CubicSpline</span> instances and monotone interpolants. In general, <span class="title-ref">PPoly</span> objects can represent polynomials of arbitrary orders, not only cubics. For the data array `x`, breakpoints are at the data points, and the array of coefficients, `c` , define polynomials of degree \(k\), such that `c[i, j]` is a coefficient for `(x - x[j])**(k-i)` on the segment between `x[j]` and `x[j+1]` .

<span class="title-ref">BSpline</span> objects represent B-spline functions --- linear combinations of \[b-spline basis elements \<tutorial-interpolate\_bspl\_basis\>\](\#b-spline-basis-elements-\<tutorial-interpolate\_bspl\_basis\>). These objects can be instantiated directly or constructed from data with the <span class="title-ref">make\_interp\_spline</span> factory function.

Finally, Bernstein polynomials are represented as instances of the <span class="title-ref">BPoly</span> class.

All these classes implement a (mostly) similar interface, <span class="title-ref">PPoly</span> being the most feature-complete. We next consider the main features of this interface and discuss some details of the alternative bases for piecewise polynomials.

## Manipulating <span class="title-ref">PPoly</span> objects

<span class="title-ref">PPoly</span> objects have convenient methods for constructing derivatives and antiderivatives, computing integrals and root-finding. For example, we tabulate the sine function and find the roots of its derivative.

> \>\>\> import numpy as np \>\>\> from scipy.interpolate import CubicSpline \>\>\> x = np.linspace(0, 10, 71) \>\>\> y = np.sin(x) \>\>\> spl = CubicSpline(x, y)

Now, differentiate the spline:

> \>\>\> dspl = spl.derivative()

Here `dspl` is a <span class="title-ref">PPoly</span> instance which represents a polynomial approximation to the derivative of the original object, `spl` . Evaluating `dspl` at a fixed argument is equivalent to evaluating the original spline with the `nu=1` argument:

> \>\>\> dspl(1.1), spl(1.1, nu=1) (0.45361436, 0.45361436)

Note that the second form above evaluates the derivative in place, while with the `dspl` object, we can find the zeros of the derivative of `spl`:

> \>\>\> dspl.roots() / np.pi array(\[-0.45480801, 0.50000034, 1.50000099, 2.5000016 , 3.46249993\])

This agrees well with roots \(\pi/2 + \pi\,n\) of \(\cos(x) = \sin'(x)\). Note that by default it computed the roots *extrapolated* to the outside of the interpolation interval \(0 \leqslant x \leqslant 10\), and that the extrapolated results (the first and last values) are much less accurate. We can switch off the extrapolation and limit the root-finding to the interpolation interval:

> \>\>\> dspl.roots(extrapolate=False) / np.pi array(\[0.50000034, 1.50000099, 2.5000016\])

In fact, the `root` method is a special case of a more general `solve` method which finds for a given constant \(y\) the solutions of the equation \(f(x) = y\) , where \(f(x)\) is the piecewise polynomial:

> \>\>\> dspl.solve(0.5, extrapolate=False) / np.pi array(\[0.33332755, 1.66667195, 2.3333271\])

which agrees well with the expected values of \(\pm\arccos(1/2) + 2\pi\,n\).

Integrals of piecewise polynomials can be computed using the `.integrate` method which accepts the lower and the upper limits of integration. As an example, we compute an approximation to the complete elliptic integral \(K(m) = \int_0^{\pi/2} [1 - m\sin^2 x]^{-1/2} dx\):

> \>\>\> from scipy.special import ellipk \>\>\> m = 0.5 \>\>\> ellipk(m) 1.8540746773013719

To this end, we tabulate the integrand and interpolate it using the monotone PCHIP interpolant (we could as well used a <span class="title-ref">CubicSpline</span>):

> \>\>\> from scipy.interpolate import PchipInterpolator \>\>\> x = np.linspace(0, np.pi/2, 70) \>\>\> y = (1 - m\*np.sin(x)**2)**(-1/2) \>\>\> spl = PchipInterpolator(x, y)

and integrate

> \>\>\> spl.integrate(0, np.pi/2) 1.854074674965991

which is indeed close to the value computed by <span class="title-ref">scipy.special.ellipk</span>.

All piecewise polynomials can be constructed with N-dimensional `y` values. If `y.ndim > 1`, it is understood as a stack of 1D `y` values, which are arranged along the interpolation axis (with the default value of 0). The latter is specified via the `axis` argument, and the invariant is that `len(x) == y.shape[axis]`. As an example, we extend the elliptic integral example above to compute the approximation for a range of `m` values, using the NumPy broadcasting:

<div class="plot">

\>\>\> from scipy.interpolate import PchipInterpolator \>\>\> m = np.linspace(0, 0.9, 11) \>\>\> x = np.linspace(0, np.pi/2, 70) \>\>\> y = 1 / np.sqrt(1 - m\[:, None\]*np.sin(x)*\*2)

Now the `y` array has the shape `(11, 70)`, so that the values of `y` for fixed value of `m` are along the second axis of the `y` array.

\>\>\> spl = PchipInterpolator(x, y, axis=1) \# the default is axis=0 \>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(m, spl.integrate(0, np.pi/2), '--')

\>\>\> from scipy.special import ellipk \>\>\> plt.plot(m, ellipk(m), 'o') \>\>\> plt.legend(\['<span class="title-ref">ellipk</span>', 'integrated piecewise polynomial'\]) \>\>\> plt.show()

</div>

## B-splines: knots and coefficients

A b-spline function --- for instance, constructed from data via a <span class="title-ref">make\_interp\_spline</span> call --- is defined by the so-called *knots* and coefficients.

As an illustration, let us again construct the interpolation of a sine function. The knots are available as the `t` attribute of a <span class="title-ref">BSpline</span> instance:

> \>\>\> x = np.linspace(0, 3/2, 7) \>\>\> y = np.sin(np.pi\*x) \>\>\> from scipy.interpolate import make\_interp\_spline \>\>\> bspl = make\_interp\_spline(x, y, k=3) \>\>\> print(bspl.t) \[0. 0. 0. 0. 0.5 0.75 1. 1.5 1.5 1.5 1.5 \] \>\>\> print(x) \[ 0. 0.25 0.5 0.75 1. 1.25 1.5 \]

We see that the knot vector by default is constructed from the input array `x`: first, it is made \((k+1)\) -regular (it has `k` repeated knots appended and prepended); then, the second and second-to-last points of the input array are removed---this is the so-called *not-a-knot* boundary condition.

In general, an interpolating spline of degree `k` needs `len(t) - len(x) - k - 1` boundary conditions. For cubic splines with `(k+1)`-regular knot arrays this means two boundary conditions---or removing two values from the `x` array. Various boundary conditions can be requested using the optional `bc_type` argument of <span class="title-ref">make\_interp\_spline</span>.

The b-spline coefficients are accessed via the `c` attribute of a <span class="title-ref">BSpline</span> object:

> \>\>\> len(bspl.c) 7

The convention is that for `len(t)` knots there are `len(t) - k - 1` coefficients. Some routines (see the \[Smoothing splines section \<tutorial-interpolate\_fitpack\>\](\#smoothing-splines-section \<tutorial-interpolate\_fitpack\>)) zero-pad the `c` arrays so that `len(c) == len(t)`. These additional coefficients are ignored for evaluation.

We stress that the coefficients are given in the \[b-spline basis \<tutorial-interpolate\_bspl\_basis\>\](\#b-spline-basis-\<tutorial-interpolate\_bspl\_basis\>), not the power basis of \(1, x, \cdots, x^k\).

### B-spline basis elements

B-splines are piecewise polynomials, represented as linear combinations of *b-spline basis elements* --- which themselves are certain linear combinations of usual monomials, \(x^m\) with \(m=0, 1, \dots, k\).

The b-spline basis is generally more computationally stable than the power basis and is useful for a variety of applications which include interpolation, regression and curve representation. The main feature is that these basis elements are *localized* and equal to zero outside of an interval defined by the *knot array*.

Specifically, a b-spline basis element of degree `k` (e.g. `k=3` for cubics) is defined by \(k+2\) knots and is zero outside of these knots. To illustrate, plot a collection of non-zero basis elements on a certain interval:

<div class="plot">

\>\>\> k = 3 \# cubic splines \>\>\> t = \[0., 1.4, 2., 3.1, 5.\] \# internal knots \>\>\> t = [np.r]()\[\[0\]*k, t, \[5\]*k\] \# add boundary knots

\>\>\> from scipy.interpolate import BSpline \>\>\> import matplotlib.pyplot as plt \>\>\> for j in \[-2, -1, 0, 1, 2\]: ... a, b = t\[k+j\], t\[-k+j-1\] ... xx = np.linspace(a, b, 101) ... bspl = BSpline.basis\_element(t\[k+j:-k+j\]) ... plt.plot(xx, bspl(xx), label=f'j = {j}') \>\>\> plt.legend(loc='best') \>\>\> plt.show()

</div>

Here <span class="title-ref">BSpline.basis\_element</span> is essentially a shorthand for constructing a spline with only a single non-zero coefficient. For instance, the `j=2` element in the above example is equivalent to

> \>\>\> c = np.zeros(t.size - k - 1) \>\>\> c\[-2\] = 1 \>\>\> b = BSpline(t, c, k) \>\>\> np.allclose(b(xx), bspl(xx)) True

If desired, a b-spline can be converted into a <span class="title-ref">PPoly</span> object using <span class="title-ref">PPoly.from\_spline</span> method which accepts a <span class="title-ref">BSpline</span> instance and returns a <span class="title-ref">PPoly</span> instance. The reverse conversion is performed by the <span class="title-ref">BSpline.from\_power\_basis</span> method. However, conversions between bases is best avoided because it accumulates rounding errors.

### Design matrices in the B-spline basis

One common application of b-splines is in non-parametric regression. The reason is that the localized nature of the b-spline basis elements makes linear algebra banded. This is because at most \(k+1\) basis elements are non-zero at a given evaluation point, thus a design matrix built on b-splines has at most \(k+1\) diagonals.

As an illustration, we consider a toy example. Suppose our data are one-dimensional and are confined to an interval \([0, 6]\). We construct a 4-regular knot vector which corresponds to 7 data points and cubic, `k=3`, splines:

\>\>\> t = \[0., 0., 0., 0., 2., 3., 4., 6., 6., 6., 6.\]

Next, take 'observations' to be

\>\>\> xnew = \[1, 2, 3\]

and construct the design matrix in the sparse CSR format

\>\>\> from scipy.interpolate import BSpline \>\>\> mat = BSpline.design\_matrix(xnew, t, k=3) \>\>\> mat \<Compressed Sparse Row sparse array of dtype 'float64' with 12 stored elements and shape (3, 7)\>

Here each row of the design matrix corresponds to a value in the `xnew` array, and a row has no more than `k+1 = 4` non-zero elements; row `j` contains basis elements evaluated at `xnew[j]`:

\>\>\> with np.printoptions(precision=3): ... print(mat.toarray()) \[\[0.125 0.514 0.319 0.042 0. 0. 0. \] \[0. 0.111 0.556 0.333 0. 0. 0. \] \[0. 0. 0.125 0.75 0.125 0. 0. \]\]

---

interpolate.md

---

# Interpolation (`scipy.interpolate`)

<div class="sectionauthor">

Travis E. Oliphant

</div>

<div class="sectionauthor">

Pauli Virtanen

</div>

<div class="sectionauthor">

Evgeni Burovski

</div>

<div class="currentmodule">

scipy.interpolate

</div>

There are several general facilities available in SciPy for interpolation and smoothing for data in 1, 2, and higher dimensions. The choice of a specific interpolation routine depends on the data: whether it is one-dimensional, is given on a structured grid, or is unstructured. One other factor is the desired smoothness of the interpolator. In short, routines recommended *for interpolation* can be summarized as follows:

\+------------------+-------------------------+------------------------------+------------------------+---------------------------------------+ | | **kind** | **routine** | **continuity** | **comment** | +==================+=========================+==============================+========================+=======================================+ | | linear | <span class="title-ref">numpy.interp</span> | piecewise continuous | Alternatively, | | | | | | `make_interp_spline(..., k=1)` | + +-------------------------+------------------------------+------------------------+---------------------------------------+ | | cubic spline | <span class="title-ref">CubicSpline</span> | 2nd derivative | | + +-------------------------+------------------------------+------------------------+---------------------------------------+ | 1D | monotone cubic spline | <span class="title-ref">PchipInterpolator</span> | 1st derivative | non-overshooting | + +-------------------------+------------------------------+------------------------+---------------------------------------+ | | non-cubic spline | <span class="title-ref">make\_interp\_spline</span> | (k-1)th derivative | `k=3` is equivalent to <span class="title-ref">CubicSpline</span>| + +-------------------------+------------------------------+------------------------+---------------------------------------+ | | nearest | <span class="title-ref">interp1d</span> | | kind='nearest', 'previous', 'next' | +------------------+-------------------------+------------------------------+------------------------+---------------------------------------+ | N-D curve | nearest, linear, spline | <span class="title-ref">make\_interp\_spline</span> | (k-1)th derivative | use N-dim <span class="title-ref">y</span> array | +------------------+-------------------------+------------------------------+------------------------+---------------------------------------+ | | nearest | | | method='nearest' | + +-------------------------+ + +---------------------------------------+ | N-D regular | linear | <span class="title-ref">RegularGridInterpolator</span> | | method='linear' | + (*rectilinear*) +-------------------------+ +------------------------+---------------------------------------+ | grid | splines | | 2nd derivatives | method='cubic', 'quintic' | + +-------------------------+ +------------------------+---------------------------------------+ | | monotone splines | | 1st derivatives | method='pchip' | +------------------+-------------------------+------------------------------+------------------------+---------------------------------------+ | | nearest | <span class="title-ref">NearestNDInterpolator</span> | | | + +-------------------------+------------------------------+ + + | N-D scattered | linear | <span class="title-ref">LinearNDInterpolator</span> | | alias: <span class="title-ref">griddata</span> | + +-------------------------+------------------------------+------------------------+ + | | cubic (2D only) | <span class="title-ref">CloughTocher2DInterpolator</span> | 1st derivatives | | + +-------------------------+------------------------------+------------------------+---------------------------------------+ | | radial basis function | <span class="title-ref">RBFInterpolator</span> | | | +------------------+-------------------------+------------------------------+------------------------+---------------------------------------+

## Smoothing and approximation of data

<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 28%" />
<col style="width: 35%" />
</colgroup>
<tbody>
<tr class="odd">
<td>1D spline functions +</td>
<td><blockquote>
<p><span class="title-ref">make_smoothing_spline</span></p>
</blockquote>
<dl>
<dt>-------------------------+</dt>
<dd><p><span class="title-ref">make_splrep</span></p>
</dd>
</dl></td>
<td><blockquote>
<p>classic smoothing splines, GVC penalty</p>
</blockquote>
<dl>
<dt>-------------------------------+</dt>
<dd><p>automated/semi-automated knot selection</p>
</dd>
</dl></td>
</tr>
<tr class="even">
<td>spine curves in N-D</td>
<td><span class="title-ref">make_splprep</span></td>
<td></td>
</tr>
<tr class="odd">
<td>unconstrained least squares spline fit</td>
<td><span class="title-ref">make_lsq_spline</span></td>
<td></td>
</tr>
<tr class="even">
<td>2D smoothing surfaces</td>
<td><span class="title-ref">bisplrep</span></td>
<td>scattered data</td>
</tr>
<tr class="odd">
<td></td>
<td><span class="title-ref">RectBivariateSpline</span></td>
<td>gridded data</td>
</tr>
<tr class="even">
<td>Radial basis functions in N-D</td>
<td><span class="title-ref">RBFInterpolator</span></td>
<td></td>
</tr>
</tbody>
</table>

**Further details are given in the links below**

<div class="toctree" data-maxdepth="3">

interpolate/1D interpolate/splines\_and\_polynomials interpolate/smoothing\_splines interpolate/ND\_regular\_grid interpolate/ND\_unstructured interpolate/extrapolation\_examples interpolate/interp\_transition\_guide.md

</div>

---

io.md

---

# File IO (`scipy.io`)

<div class="sectionauthor">

Matthew Brett

</div>

<div class="currentmodule">

scipy.io

</div>

<div class="seealso">

[NumPy IO routines](https://www.numpy.org/devdocs/reference/routines.io.html)

</div>

## MATLAB files

<div class="autosummary">

loadmat savemat whosmat

</div>

### The basic functions

We'll start by importing `scipy.io` and calling it `sio` for convenience:

> \>\>\> import scipy.io as sio

If you are using IPython, try tab-completing on `sio`. Among the many options, you will find:

    sio.loadmat
    sio.savemat
    sio.whosmat

These are the high-level functions you will most likely use when working with MATLAB files. You'll also find:

    sio.matlab

This is the package from which `loadmat`, `savemat`, and `whosmat` are imported. Within `sio.matlab`, you will find the `mio` module This module contains the machinery that `loadmat` and `savemat` use. From time to time you may find yourself re-using this machinery.

### How do I start?

You may have a `.mat` file that you want to read into SciPy. Or, you want to pass some variables from SciPy / NumPy into MATLAB.

To save us using a MATLAB license, let's start in [Octave](https://www.gnu.org/software/octave). Octave has MATLAB-compatible save and load functions. Start Octave (`octave` at the command line for me):

``` octave
octave:1> a = 1:12
a =

   1   2   3   4   5   6   7   8   9  10  11  12

octave:2> a = reshape(a, [1 3 4])
a =

ans(:,:,1) =

   1   2   3

ans(:,:,2) =

   4   5   6

ans(:,:,3) =

   7   8   9

ans(:,:,4) =

   10   11   12

octave:3> save -6 octave_a.mat a % MATLAB 6 compatible
octave:4> ls octave_a.mat
octave_a.mat
```

Now, to Python:

> \>\>\> mat\_contents = sio.loadmat('octave\_a.mat') \>\>\> mat\_contents {'\_\_header\_\_': b'MATLAB 5.0 MAT-file, written by Octave 3.2.3, 2010-05-30 02:13:40 UTC', '\_\_version\_\_': '1.0', '\_\_globals\_\_': \[\], 'a': array(\[\[\[ 1., 4., 7., 10.\], \[ 2., 5., 8., 11.\], \[ 3., 6., 9., 12.\]\]\])} \>\>\> oct\_a = mat\_contents\['a'\] \>\>\> oct\_a array(\[\[\[ 1., 4., 7., 10.\], \[ 2., 5., 8., 11.\], \[ 3., 6., 9., 12.\]\]\]) \>\>\> oct\_a.shape (1, 3, 4)

Now let's try the other way round:

> \>\>\> import numpy as np \>\>\> vect = np.arange(10) \>\>\> vect.shape (10,) \>\>\> sio.savemat('np\_vector.mat', {'vect':vect})

Then back to Octave:

``` octave
octave:8> load np_vector.mat
octave:9> vect
vect =

  0  1  2  3  4  5  6  7  8  9

octave:10> size(vect)
ans =

    1   10
```

If you want to inspect the contents of a MATLAB file without reading the data into memory, use the `whosmat` command:

> \>\>\> sio.whosmat('octave\_a.mat') \[('a', (1, 3, 4), 'double')\]

`whosmat` returns a list of tuples, one for each array (or other object) in the file. Each tuple contains the name, shape and data type of the array.

### MATLAB structs

MATLAB structs are a little bit like Python dicts, except the field names must be strings. Any MATLAB object can be a value of a field. As for all objects in MATLAB, structs are, in fact, arrays of structs, where a single struct is an array of shape (1, 1).

``` octave
octave:11> my_struct = struct('field1', 1, 'field2', 2)
my_struct =
{
  field1 =  1
  field2 =  2
}

octave:12> save -6 octave_struct.mat my_struct
```

We can load this in Python:

> \>\>\> mat\_contents = sio.loadmat('octave\_struct.mat') \>\>\> mat\_contents {'\_\_header\_\_': b'MATLAB 5.0 MAT-file, written by Octave 3.2.3, 2010-05-30 02:00:26 UTC', '\_\_version\_\_': '1.0', '\_\_globals\_\_': \[\], 'my\_struct': array(\[\[(array(\[\[1.\]\]), array(\[\[2.\]\]))\]\], dtype=\[('field1', 'O'), ('field2', 'O')\]) }
> 
> \>\>\> oct\_struct = mat\_contents\['my\_struct'\] \>\>\> oct\_struct.shape (1, 1) \>\>\> val = oct\_struct\[0, 0\] \>\>\> val np.void((array(\[\[1.\]\]), array(\[\[2.\]\])), dtype=\[('field1', 'O'), ('field2', 'O')\]) \>\>\> val\['field1'\] array(\[\[ 1.\]\]) \>\>\> val\['field2'\] array(\[\[ 2.\]\]) \>\>\> val.dtype dtype(\[('field1', 'O'), ('field2', 'O')\])

In the SciPy versions from 0.12.0, MATLAB structs come back as NumPy structured arrays, with fields named for the struct fields. You can see the field names in the `dtype` output above. Note also:

> \>\>\> val = oct\_struct\[0, 0\]

and:

``` octave
octave:13> size(my_struct)
ans =

   1   1
```

So, in MATLAB, the struct array must be at least 2-D, and we replicate that when we read into SciPy. If you want all length 1 dimensions squeezed out, try this:

> \>\>\> mat\_contents = sio.loadmat('octave\_struct.mat', squeeze\_me=True) \>\>\> oct\_struct = mat\_contents\['my\_struct'\] \>\>\> oct\_struct.shape ()

Sometimes, it's more convenient to load the MATLAB structs as Python objects rather than NumPy structured arrays - it can make the access syntax in Python a bit more similar to that in MATLAB. In order to do this, use the `struct_as_record=False` parameter setting to `loadmat`.

> \>\>\> mat\_contents = sio.loadmat('octave\_struct.mat', struct\_as\_record=False) \>\>\> oct\_struct = mat\_contents\['my\_struct'\] \>\>\> oct\_struct\[0,0\].field1 array(\[\[ 1.\]\])

`struct_as_record=False` works nicely with `squeeze_me`:

> \>\>\> mat\_contents = sio.loadmat('octave\_struct.mat', struct\_as\_record=False, squeeze\_me=True) \>\>\> oct\_struct = mat\_contents\['my\_struct'\] \>\>\> oct\_struct.shape \# but no - it's a scalar Traceback (most recent call last): File "\<stdin\>", line 1, in \<module\> AttributeError: 'mat\_struct' object has no attribute 'shape' \>\>\> type(oct\_struct) \<class 'scipy.io.matlab.\_mio5\_params.mat\_struct'\> \>\>\> oct\_struct.field1 1.0

Saving struct arrays can be done in various ways. One simple method is to use dicts:

> \>\>\> a\_dict = {'field1': 0.5, 'field2': 'a string'} \>\>\> sio.savemat('saved\_struct.mat', {'a\_dict': a\_dict})

loaded as:

``` octave
octave:21> load saved_struct
octave:22> a_dict
a_dict =

  scalar structure containing the fields:

    field2 = a string
    field1 =  0.50000
```

You can also save structs back again to MATLAB (or Octave in our case) like this:

> \>\>\> dt = \[('f1', 'f8'), ('f2', 'S10')\] \>\>\> arr = np.zeros((2,), dtype=dt) \>\>\> arr array(\[(0.0, ''), (0.0, '')\], dtype=\[('f1', '\<f8'), ('f2', 'S10')\]) \>\>\> arr\[0\]\['f1'\] = 0.5 \>\>\> arr\[0\]\['f2'\] = 'python' \>\>\> arr\[1\]\['f1'\] = 99 \>\>\> arr\[1\]\['f2'\] = 'not perl' \>\>\> sio.savemat('np\_struct\_arr.mat', {'arr': arr})

### MATLAB cell arrays

Cell arrays in MATLAB are rather like Python lists, in the sense that the elements in the arrays can contain any type of MATLAB object. In fact, they are most similar to NumPy object arrays, and that is how we load them into NumPy.

``` octave
octave:14> my_cells = {1, [2, 3]}
my_cells =
{
  [1,1] =  1
  [1,2] =

     2   3

}

octave:15> save -6 octave_cells.mat my_cells
```

Back to Python:

> \>\>\> mat\_contents = sio.loadmat('octave\_cells.mat') \>\>\> oct\_cells = mat\_contents\['my\_cells'\] \>\>\> print(oct\_cells.dtype) object \>\>\> val = oct\_cells\[0,0\] \>\>\> val array(\[\[ 1.\]\]) \>\>\> print(val.dtype) float64

Saving to a MATLAB cell array just involves making a NumPy object array:

> \>\>\> obj\_arr = np.zeros((2,), dtype=object) \>\>\> obj\_arr\[0\] = 1 \>\>\> obj\_arr\[1\] = 'a string' \>\>\> obj\_arr array(\[1, 'a string'\], dtype=object) \>\>\> sio.savemat('np\_cells.mat', {'obj\_arr': obj\_arr})

``` octave
octave:16> load np_cells.mat
octave:17> obj_arr
obj_arr =
{
  [1,1] = 1
  [2,1] = a string
}
```

## IDL files

<div class="autosummary">

readsav

</div>

## Matrix Market files

<div class="autosummary">

mminfo mmread mmwrite

</div>

## Wav sound files (`scipy.io.wavfile`)

<div class="currentmodule">

scipy.io.wavfile

</div>

<div class="autosummary">

read write

</div>

## Arff files (`scipy.io.arff`)

<div class="currentmodule">

scipy.io.arff

</div>

<div class="autosummary">

loadarff

</div>

## Netcdf

<div class="currentmodule">

scipy.io

</div>

<div class="autosummary">

netcdf\_file

</div>

Allows reading of NetCDF files (version of [pupynere](https://pypi.org/project/pupynere/) package)

---

linalg.md

---

# Linear Algebra (<span class="title-ref">scipy.linalg</span>)

<div class="sectionauthor">

Travis E. Oliphant

</div>

<div class="currentmodule">

scipy

</div>

When SciPy is built using the optimized ATLAS LAPACK and BLAS libraries, it has very fast linear algebra capabilities. If you dig deep enough, all of the raw LAPACK and BLAS libraries are available for your use for even more speed. In this section, some easier-to-use interfaces to these routines are described.

All of these linear algebra routines expect an object that can be converted into a 2-D array. The output of these routines is also a 2-D array.

## scipy.linalg vs numpy.linalg

`scipy.linalg` contains all the functions in [numpy.linalg](https://www.numpy.org/devdocs/reference/routines.linalg.html). plus some other more advanced ones not contained in `numpy.linalg`.

Another advantage of using `scipy.linalg` over `numpy.linalg` is that it is always compiled with BLAS/LAPACK support, while for NumPy this is optional. Therefore, the SciPy version might be faster depending on how NumPy was installed.

Therefore, unless you don't want to add `scipy` as a dependency to your `numpy` program, use `scipy.linalg` instead of `numpy.linalg`.

## numpy.matrix vs 2-D numpy.ndarray

The classes that represent matrices, and basic operations, such as matrix multiplications and transpose are a part of `numpy`. For convenience, we summarize the differences between <span class="title-ref">numpy.matrix</span> and <span class="title-ref">numpy.ndarray</span> here.

`numpy.matrix` is matrix class that has a more convenient interface than `numpy.ndarray` for matrix operations. This class supports, for example, MATLAB-like creation syntax via the semicolon, has matrix multiplication as default for the `*` operator, and contains `I` and `T` members that serve as shortcuts for inverse and transpose:

> \>\>\> import numpy as np \>\>\> A = np.asmatrix('\[1 2;3 4\]') \>\>\> A matrix(\[\[1, 2\], \[3, 4\]\]) \>\>\> A.I matrix(\[\[-2. , 1. \], \[ 1.5, -0.5\]\]) \>\>\> b = np.asmatrix('\[5 6\]') \>\>\> b matrix(\[\[5, 6\]\]) \>\>\> b.T matrix(\[\[5\], \[6\]\]) \>\>\> A\*b.T matrix(\[\[17\], \[39\]\])

Despite its convenience, the use of the `numpy.matrix` class is discouraged, since it adds nothing that cannot be accomplished with 2-D `numpy.ndarray` objects, and may lead to a confusion of which class is being used. For example, the above code can be rewritten as:

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A = np.array(\[\[1,2\],\[3,4\]\]) \>\>\> A array(\[\[1, 2\], \[3, 4\]\]) \>\>\> linalg.inv(A) array(\[\[-2. , 1. \], \[ 1.5, -0.5\]\]) \>\>\> b = np.array(\[\[5,6\]\]) \#2D array \>\>\> b array(\[\[5, 6\]\]) \>\>\> b.T array(\[\[5\], \[6\]\]) \>\>\> A\*b \#not matrix multiplication\! array(\[\[ 5, 12\], \[15, 24\]\]) \>\>\> A.dot(b.T) \#matrix multiplication array(\[\[17\], \[39\]\]) \>\>\> b = np.array(\[5,6\]) \#1D array \>\>\> b array(\[5, 6\]) \>\>\> b.T \#not matrix transpose\! array(\[5, 6\]) \>\>\> A.dot(b) \#does not matter for multiplication array(\[17, 39\])

`scipy.linalg` operations can be applied equally to `numpy.matrix` or to 2D `numpy.ndarray` objects.

## Basic routines

### Finding the inverse

The inverse of a matrix \(\mathbf{A}\) is the matrix \(\mathbf{B}\), such that \(\mathbf{AB}=\mathbf{I}\), where \(\mathbf{I}\) is the identity matrix consisting of ones down the main diagonal. Usually, \(\mathbf{B}\) is denoted \(\mathbf{B}=\mathbf{A}^{-1}\) . In SciPy, the matrix inverse of the NumPy array, A, is obtained using `linalg.inv` `(A)`, or using `A.I` if `A` is a Matrix. For example, let

\[\begin{aligned}
\mathbf{A} = \left[\begin{array}{ccc} 1 & 3 & 5\\ 2 & 5 & 1\\ 2 & 3 & 8\end{array}\right],
\end{aligned}\]

then

\[\begin{aligned}
\mathbf{A^{-1}} = \frac{1}{25}
    \left[\begin{array}{ccc} -37 & 9 & 22 \\
                              14 & 2 & -9 \\
                              4 & -3 & 1
          \end{array}\right] = %
     \left[\begin{array}{ccc} -1.48 & 0.36 & 0.88  \\
                               0.56 & 0.08 & -0.36 \\
                               0.16 & -0.12 & 0.04
           \end{array}\right].
\end{aligned}\]

The following example demonstrates this computation in SciPy

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A = np.array(\[\[1,3,5\],\[2,5,1\],\[2,3,8\]\]) \>\>\> A array(\[\[1, 3, 5\], \[2, 5, 1\], \[2, 3, 8\]\]) \>\>\> linalg.inv(A) array(\[\[-1.48, 0.36, 0.88\], \[ 0.56, 0.08, -0.36\], \[ 0.16, -0.12, 0.04\]\]) \>\>\> A.dot(linalg.inv(A)) \#double check array(\[\[ 1.00000000e+00, -1.11022302e-16, -5.55111512e-17\], \[ 3.05311332e-16, 1.00000000e+00, 1.87350135e-16\], \[ 2.22044605e-16, -1.11022302e-16, 1.00000000e+00\]\])

### Solving a linear system

Solving linear systems of equations is straightforward using the scipy command `linalg.solve`. This command expects an input matrix and a right-hand side vector. The solution vector is then computed. An option for entering a symmetric matrix is offered, which can speed up the processing when applicable. As an example, suppose it is desired to solve the following simultaneous equations:

\[\begin{aligned}
\begin{eqnarray*} x + 3y + 5z & = & 10 \\
                  2x + 5y + z & = & 8  \\
                  2x + 3y + 8z & = & 3
\end{eqnarray*}
\end{aligned}\]

We could find the solution vector using a matrix inverse:

\[\begin{aligned}
\left[\begin{array}{c} x\\ y\\ z\end{array}\right]=\left[\begin{array}{ccc} 1 & 3 & 5\\ 2 & 5 & 1\\ 2 & 3 & 8\end{array}\right]^{-1}\left[\begin{array}{c} 10\\ 8\\ 3\end{array}\right]=\frac{1}{25}\left[\begin{array}{c} -232\\ 129\\ 19\end{array}\right]=\left[\begin{array}{c} -9.28\\ 5.16\\ 0.76\end{array}\right].
\end{aligned}\]

However, it is better to use the linalg.solve command, which can be faster and more numerically stable. In this case, it, however, gives the same answer as shown in the following example:

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A = np.array(\[\[1, 2\], \[3, 4\]\]) \>\>\> A array(\[\[1, 2\], \[3, 4\]\]) \>\>\> b = np.array(\[\[5\], \[6\]\]) \>\>\> b array(\[\[5\], \[6\]\]) \>\>\> linalg.inv(A).dot(b) \# slow array(\[\[-4. \], \[ 4.5\]\]) \>\>\> A.dot(linalg.inv(A).dot(b)) - b \# check array(\[\[ 8.88178420e-16\], \[ 2.66453526e-15\]\]) \>\>\> np.linalg.solve(A, b) \# fast array(\[\[-4. \], \[ 4.5\]\]) \>\>\> A.dot(np.linalg.solve(A, b)) - b \# check array(\[\[ 0.\], \[ 0.\]\])

### Finding the determinant

The determinant of a square matrix \(\mathbf{A}\) is often denoted \(\left|\mathbf{A}\right|\) and is a quantity often used in linear algebra. Suppose \(a_{ij}\) are the elements of the matrix \(\mathbf{A}\) and let \(M_{ij}=\left|\mathbf{A}_{ij}\right|\) be the determinant of the matrix left by removing the \(i^{\textrm{th}}\) row and \(j^{\textrm{th}}\) column from \(\mathbf{A}\) . Then, for any row \(i,\)

\[\left|\mathbf{A}\right|=\sum_{j}\left(-1\right)^{i+j}a_{ij}M_{ij}.\]

This is a recursive way to define the determinant, where the base case is defined by accepting that the determinant of a \(1\times1\) matrix is the only matrix element. In SciPy the determinant can be calculated with `linalg.det`. For example, the determinant of

\[\begin{aligned}
\mathbf{A=}\left[\begin{array}{ccc} 1 & 3 & 5\\ 2 & 5 & 1\\ 2 & 3 & 8\end{array}\right]
\end{aligned}\]

is

\[\begin{aligned}
\begin{eqnarray*} \left|\mathbf{A}\right| & = & 1\left|\begin{array}{cc} 5 & 1\\ 3 & 8\end{array}\right|-3\left|\begin{array}{cc} 2 & 1\\ 2 & 8\end{array}\right|+5\left|\begin{array}{cc} 2 & 5\\ 2 & 3\end{array}\right|\\  & = & 1\left(5\cdot8-3\cdot1\right)-3\left(2\cdot8-2\cdot1\right)+5\left(2\cdot3-2\cdot5\right)=-25.\end{eqnarray*}.
\end{aligned}\]

In SciPy, this is computed as shown in this example:

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A = np.array(\[\[1,2\],\[3,4\]\]) \>\>\> A array(\[\[1, 2\], \[3, 4\]\]) \>\>\> linalg.det(A) -2.0

### Computing norms

Matrix and vector norms can also be computed with SciPy. A wide range of norm definitions are available using different parameters to the order argument of `linalg.norm`. This function takes a rank-1 (vectors) or a rank-2 (matrices) array and an optional order argument (default is 2). Based on these inputs, a vector or matrix norm of the requested order is computed.

For vector *x*, the order parameter can be any real number including `inf` or `-inf`. The computed norm is

\[\begin{aligned}
\left\Vert \mathbf{x}\right\Vert =\left\{ \begin{array}{cc} \max\left|x_{i}\right| & \textrm{ord}=\textrm{inf}\\ \min\left|x_{i}\right| & \textrm{ord}=-\textrm{inf}\\ \left(\sum_{i}\left|x_{i}\right|^{\textrm{ord}}\right)^{1/\textrm{ord}} & \left|\textrm{ord}\right|<\infty.\end{array}\right.
\end{aligned}\]

For matrix \(\mathbf{A}\), the only valid values for norm are \(\pm2,\pm1,\) \(\pm\) inf, and 'fro' (or 'f') Thus,

\[\begin{aligned}
\left\Vert \mathbf{A}\right\Vert =\left\{ \begin{array}{cc} \max_{i}\sum_{j}\left|a_{ij}\right| & \textrm{ord}=\textrm{inf}\\ \min_{i}\sum_{j}\left|a_{ij}\right| & \textrm{ord}=-\textrm{inf}\\ \max_{j}\sum_{i}\left|a_{ij}\right| & \textrm{ord}=1\\ \min_{j}\sum_{i}\left|a_{ij}\right| & \textrm{ord}=-1\\ \max\sigma_{i} & \textrm{ord}=2\\ \min\sigma_{i} & \textrm{ord}=-2\\ \sqrt{\textrm{trace}\left(\mathbf{A}^{H}\mathbf{A}\right)} & \textrm{ord}=\textrm{'fro'}\end{array}\right.
\end{aligned}\]

where \(\sigma_{i}\) are the singular values of \(\mathbf{A}\).

Examples:

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A=np.array(\[\[1, 2\], \[3, 4\]\]) \>\>\> A array(\[\[1, 2\], \[3, 4\]\]) \>\>\> linalg.norm(A) 5.4772255750516612 \>\>\> linalg.norm(A, 'fro') \# frobenius norm is the default 5.4772255750516612 \>\>\> linalg.norm(A, 1) \# L1 norm (max column sum) 6.0 \>\>\> linalg.norm(A, -1) 4.0 \>\>\> linalg.norm(A, np.inf) \# L inf norm (max row sum) 7.0

### Solving linear least-squares problems and pseudo-inverses

Linear least-squares problems occur in many branches of applied mathematics. In this problem, a set of linear scaling coefficients is sought that allows a model to fit the data. In particular, it is assumed that data \(y_{i}\) is related to data \(\mathbf{x}_{i}\) through a set of coefficients \(c_{j}\) and model functions \(f_{j}\left(\mathbf{x}_{i}\right)\) via the model

\[y_{i}=\sum_{j}c_{j}f_{j}\left(\mathbf{x}_{i}\right)+\epsilon_{i},\]

where \(\epsilon_{i}\) represents uncertainty in the data. The strategy of least squares is to pick the coefficients \(c_{j}\) to minimize

\[J\left(\mathbf{c}\right)=\sum_{i}\left|y_{i}-\sum_{j}c_{j}f_{j}\left(x_{i}\right)\right|^{2}.\]

Theoretically, a global minimum will occur when

\[\frac{\partial J}{\partial c_{n}^{*}}=0=\sum_{i}\left(y_{i}-\sum_{j}c_{j}f_{j}\left(x_{i}\right)\right)\left(-f_{n}^{*}\left(x_{i}\right)\right)\]

or

\[\begin{aligned}
\begin{eqnarray*} \sum_{j}c_{j}\sum_{i}f_{j}\left(x_{i}\right)f_{n}^{*}\left(x_{i}\right) & = & \sum_{i}y_{i}f_{n}^{*}\left(x_{i}\right)\\ \mathbf{A}^{H}\mathbf{Ac} & = & \mathbf{A}^{H}\mathbf{y}\end{eqnarray*},
\end{aligned}\]

where

\[\left\{ \mathbf{A}\right\} _{ij}=f_{j}\left(x_{i}\right).\]

When \(\mathbf{A^{H}A}\) is invertible, then

\[\mathbf{c}=\left(\mathbf{A}^{H}\mathbf{A}\right)^{-1}\mathbf{A}^{H}\mathbf{y}=\mathbf{A}^{\dagger}\mathbf{y},\]

where \(\mathbf{A}^{\dagger}\) is called the pseudo-inverse of \(\mathbf{A}.\) Notice that using this definition of \(\mathbf{A}\) the model can be written

\[\mathbf{y}=\mathbf{Ac}+\boldsymbol{\epsilon}.\]

The command `linalg.lstsq` will solve the linear least-squares problem for \(\mathbf{c}\) given \(\mathbf{A}\) and \(\mathbf{y}\) . In addition, `linalg.pinv` will find \(\mathbf{A}^{\dagger}\) given \(\mathbf{A}.\)

The following example and figure demonstrate the use of `linalg.lstsq` and `linalg.pinv` for solving a data-fitting problem. The data shown below were generated using the model:

\[y_{i}=c_{1}e^{-x_{i}}+c_{2}x_{i},\]

where \(x_{i}=0.1i\) for \(i=1\ldots10\) , \(c_{1}=5\), and \(c_{2}=4.\) Noise is added to \(y_{i}\) and the coefficients \(c_{1}\) and \(c_{2}\) are estimated using linear least squares.

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> import matplotlib.pyplot as plt \>\>\> rng = np.random.default\_rng()

\>\>\> c1, c2 = 5.0, 2.0 \>\>\> i = [np.r]()\[1:11\] \>\>\> xi = 0.1\*i \>\>\> yi = c1\*np.exp(-xi) + c2\*xi \>\>\> zi = yi + 0.05 \* np.max(yi) \* rng.standard\_normal(len(yi))

\>\>\> A = [np.c]()\[np.exp(-xi)\[:, np.newaxis\], xi\[:, np.newaxis\]\] \>\>\> c, resid, rank, sigma = linalg.lstsq(A, zi)

\>\>\> xi2 = [np.r]()\[0.1:1.0:100j\] \>\>\> yi2 = c\[0\]*np.exp(-xi2) + c\[1\]*xi2

\>\>\> plt.plot(xi,zi,'x',xi2,yi2) \>\>\> plt.axis(\[0,1.1,3.0,5.5\]) \>\>\> plt.xlabel('$x\_i$') \>\>\> plt.title('Data fitting with linalg.lstsq') \>\>\> plt.show()

</div>

### Generalized inverse

The generalized inverse is calculated using the command `linalg.pinv`. Let \(\mathbf{A}\) be an \(M\times N\) matrix, then if \(M>N\), the generalized inverse is

\[\mathbf{A}^{\dagger}=\left(\mathbf{A}^{H}\mathbf{A}\right)^{-1}\mathbf{A}^{H},\]

while if \(M<N\) matrix, the generalized inverse is

\[\mathbf{A}^{\#}=\mathbf{A}^{H}\left(\mathbf{A}\mathbf{A}^{H}\right)^{-1}.\]

In the case that \(M=N\), then

\[\mathbf{A}^{\dagger}=\mathbf{A}^{\#}=\mathbf{A}^{-1},\]

as long as \(\mathbf{A}\) is invertible.

## Decompositions

In many applications, it is useful to decompose a matrix using other representations. There are several decompositions supported by SciPy.

### Eigenvalues and eigenvectors

The eigenvalue-eigenvector problem is one of the most commonly employed linear algebra operations. In one popular form, the eigenvalue-eigenvector problem is to find for some square matrix \(\mathbf{A}\) scalars \(\lambda\) and corresponding vectors \(\mathbf{v}\), such that

\[\mathbf{Av}=\lambda\mathbf{v}.\]

For an \(N\times N\) matrix, there are \(N\) (not necessarily distinct) eigenvalues --- roots of the (characteristic) polynomial

\[\left|\mathbf{A}-\lambda\mathbf{I}\right|=0.\]

The eigenvectors, \(\mathbf{v}\), are also sometimes called right eigenvectors to distinguish them from another set of left eigenvectors that satisfy

\[\mathbf{v}_{L}^{H}\mathbf{A}=\lambda\mathbf{v}_{L}^{H}\]

or

\[\mathbf{A}^{H}\mathbf{v}_{L}=\lambda^{*}\mathbf{v}_{L}.\]

With its default optional arguments, the command `linalg.eig` returns \(\lambda\) and \(\mathbf{v}.\) However, it can also return \(\mathbf{v}_{L}\) and just \(\lambda\) by itself ( `linalg.eigvals` returns just \(\lambda\) as well).

In addition, `linalg.eig` can also solve the more general eigenvalue problem

\[\begin{aligned}
\begin{eqnarray*} \mathbf{Av} & = & \lambda\mathbf{Bv}\\ \mathbf{A}^{H}\mathbf{v}_{L} & = & \lambda^{*}\mathbf{B}^{H}\mathbf{v}_{L}\end{eqnarray*}
\end{aligned}\]

for square matrices \(\mathbf{A}\) and \(\mathbf{B}.\) The standard eigenvalue problem is an example of the general eigenvalue problem for \(\mathbf{B}=\mathbf{I}.\) When a generalized eigenvalue problem can be solved, it provides a decomposition of \(\mathbf{A}\) as

\[\mathbf{A}=\mathbf{BV}\boldsymbol{\Lambda}\mathbf{V}^{-1},\]

where \(\mathbf{V}\) is the collection of eigenvectors into columns and \(\boldsymbol{\Lambda}\) is a diagonal matrix of eigenvalues.

By definition, eigenvectors are only defined up to a constant scale factor. In SciPy, the scaling factor for the eigenvectors is chosen so that \(\left\Vert \mathbf{v}\right\Vert
^{2}=\sum_{i}v_{i}^{2}=1.\)

As an example, consider finding the eigenvalues and eigenvectors of the matrix

\[\begin{aligned}
\mathbf{A}=\left[\begin{array}{ccc} 1 & 5 & 2\\ 2 & 4 & 1\\ 3 & 6 & 2\end{array}\right].
\end{aligned}\]

The characteristic polynomial is

\[\begin{aligned}
\begin{eqnarray*} \left|\mathbf{A}-\lambda\mathbf{I}\right| & = & \left(1-\lambda\right)\left[\left(4-\lambda\right)\left(2-\lambda\right)-6\right]-\\  &  & 5\left[2\left(2-\lambda\right)-3\right]+2\left[12-3\left(4-\lambda\right)\right]\\  & = & -\lambda^{3}+7\lambda^{2}+8\lambda-3.\end{eqnarray*}
\end{aligned}\]

The roots of this polynomial are the eigenvalues of \(\mathbf{A}\):

\[\begin{aligned}
\begin{eqnarray*} \lambda_{1} & = & 7.9579\\ \lambda_{2} & = & -1.2577\\ \lambda_{3} & = & 0.2997.\end{eqnarray*}
\end{aligned}\]

The eigenvectors corresponding to each eigenvalue can be found using the original equation. The eigenvectors associated with these eigenvalues can then be found.

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A = np.array(\[\[1, 2\], \[3, 4\]\]) \>\>\> la, v = linalg.eig(A) \>\>\> l1, l2 = la \>\>\> print(l1, l2) \# eigenvalues (-0.3722813232690143+0j) (5.372281323269014+0j) \>\>\> print(v\[:, 0\]) \# first eigenvector \[-0.82456484 0.56576746\] \>\>\> print(v\[:, 1\]) \# second eigenvector \[-0.41597356 -0.90937671\] \>\>\> print(np.sum(abs(v\**2), axis=0)) \# eigenvectors are unitary \[1. 1.\] \>\>\> v1 = np.array(v\[:, 0\]).T \>\>\> print(linalg.norm(A.dot(v1) - l1*v1)) \# check the computation 3.23682852457e-16

### Singular value decomposition

Singular value decomposition (SVD) can be thought of as an extension of the eigenvalue problem to matrices that are not square. Let \(\mathbf{A}\) be an \(M\times N\) matrix with \(M\) and \(N\) arbitrary. The matrices \(\mathbf{A}^{H}\mathbf{A}\) and \(\mathbf{A}\mathbf{A}^{H}\) are square hermitian matrices\[1\] of size \(N\times N\) and \(M\times M\), respectively. It is known that the eigenvalues of square hermitian matrices are real and non-negative. In addition, there are at most \(\min\left(M,N\right)\) identical non-zero eigenvalues of \(\mathbf{A}^{H}\mathbf{A}\) and \(\mathbf{A}\mathbf{A}^{H}.\) Define these positive eigenvalues as \(\sigma_{i}^{2}.\) The square-root of these are called singular values of \(\mathbf{A}.\) The eigenvectors of \(\mathbf{A}^{H}\mathbf{A}\) are collected by columns into an \(N\times N\) unitary\[2\] matrix \(\mathbf{V}\), while the eigenvectors of \(\mathbf{A}\mathbf{A}^{H}\) are collected by columns in the unitary matrix \(\mathbf{U}\), the singular values are collected in an \(M\times N\) zero matrix \(\mathbf{\boldsymbol{\Sigma}}\) with main diagonal entries set to the singular values. Then

\[\mathbf{A=U}\boldsymbol{\Sigma}\mathbf{V}^{H}\]

is the singular value decomposition of \(\mathbf{A}.\) Every matrix has a singular value decomposition. Sometimes, the singular values are called the spectrum of \(\mathbf{A}.\) The command `linalg.svd` will return \(\mathbf{U}\) , \(\mathbf{V}^{H}\), and \(\sigma_{i}\) as an array of the singular values. To obtain the matrix \(\boldsymbol{\Sigma}\), use `linalg.diagsvd`. The following example illustrates the use of `linalg.svd`:

> \>\>\> import numpy as np \>\>\> from scipy import linalg \>\>\> A = np.array(\[\[1,2,3\],\[4,5,6\]\]) \>\>\> A array(\[\[1, 2, 3\], \[4, 5, 6\]\]) \>\>\> M,N = A.shape \>\>\> U,s,Vh = linalg.svd(A) \>\>\> Sig = linalg.diagsvd(s,M,N) \>\>\> U, Vh = U, Vh \>\>\> U array(\[\[-0.3863177 , -0.92236578\], \[-0.92236578, 0.3863177 \]\]) \>\>\> Sig array(\[\[ 9.508032 , 0. , 0. \], \[ 0. , 0.77286964, 0. \]\]) \>\>\> Vh array(\[\[-0.42866713, -0.56630692, -0.7039467 \], \[ 0.80596391, 0.11238241, -0.58119908\], \[ 0.40824829, -0.81649658, 0.40824829\]\]) \>\>\> U.dot(Sig.dot(Vh)) \#check computation array(\[\[ 1., 2., 3.\], \[ 4., 5., 6.\]\])

### LU decomposition

The LU decomposition finds a representation for the \(M\times N\) matrix \(\mathbf{A}\) as

\[\mathbf{A}=\mathbf{P}\,\mathbf{L}\,\mathbf{U},\]

where \(\mathbf{P}\) is an \(M\times M\) permutation matrix (a permutation of the rows of the identity matrix), \(\mathbf{L}\) is in \(M\times K\) lower triangular or trapezoidal matrix ( \(K=\min\left(M,N\right)\)) with unit-diagonal, and \(\mathbf{U}\) is an upper triangular or trapezoidal matrix. The SciPy command for this decomposition is `linalg.lu`.

Such a decomposition is often useful for solving many simultaneous equations where the left-hand side does not change but the right-hand side does. For example, suppose we are going to solve

\[\mathbf{A}\mathbf{x}_{i}=\mathbf{b}_{i}\]

for many different \(\mathbf{b}_{i}\). The LU decomposition allows this to be written as

\[\mathbf{PLUx}_{i}=\mathbf{b}_{i}.\]

Because \(\mathbf{L}\) is lower-triangular, the equation can be solved for \(\mathbf{U}\mathbf{x}_{i}\) and, finally, \(\mathbf{x}_{i}\) very rapidly using forward- and back-substitution. An initial time spent factoring \(\mathbf{A}\) allows for very rapid solution of similar systems of equations in the future. If the intent for performing LU decomposition is for solving linear systems, then the command `linalg.lu_factor` should be used followed by repeated applications of the command `linalg.lu_solve` to solve the system for each new right-hand side.

### Cholesky decomposition

Cholesky decomposition is a special case of LU decomposition applicable to Hermitian positive definite matrices. When \(\mathbf{A}=\mathbf{A}^{H}\) and \(\mathbf{x}^{H}\mathbf{Ax}\geq0\) for all \(\mathbf{x}\), then decompositions of \(\mathbf{A}\) can be found so that

\[\begin{aligned}
\begin{eqnarray*} \mathbf{A} & = & \mathbf{U}^{H}\mathbf{U}\\ \mathbf{A} & = & \mathbf{L}\mathbf{L}^{H}\end{eqnarray*},
\end{aligned}\]

where \(\mathbf{L}\) is lower triangular and \(\mathbf{U}\) is upper triangular. Notice that \(\mathbf{L}=\mathbf{U}^{H}.\) The command `linalg.cholesky` computes the Cholesky factorization. For using the Cholesky factorization to solve systems of equations, there are also `linalg.cho_factor` and `linalg.cho_solve` routines that work similarly to their LU decomposition counterparts.

### QR decomposition

The QR decomposition (sometimes called a polar decomposition) works for any \(M\times N\) array and finds an \(M\times M\) unitary matrix \(\mathbf{Q}\) and an \(M\times N\) upper-trapezoidal matrix \(\mathbf{R}\), such that

\[\mathbf{A=QR}.\]

Notice that if the SVD of \(\mathbf{A}\) is known, then the QR decomposition can be found.

\[\mathbf{A}=\mathbf{U}\boldsymbol{\Sigma}\mathbf{V}^{H}=\mathbf{QR}\]

implies that \(\mathbf{Q}=\mathbf{U}\) and \(\mathbf{R}=\boldsymbol{\Sigma}\mathbf{V}^{H}.\) Note, however, that in SciPy independent algorithms are used to find QR and SVD decompositions. The command for QR decomposition is `linalg.qr`.

### Schur decomposition

For a square \(N\times N\) matrix, \(\mathbf{A}\), the Schur decomposition finds (not necessarily unique) matrices \(\mathbf{T}\) and \(\mathbf{Z}\), such that

\[\mathbf{A}=\mathbf{ZT}\mathbf{Z}^{H},\]

where \(\mathbf{Z}\) is a unitary matrix and \(\mathbf{T}\) is either upper triangular or quasi upper triangular, depending on whether or not a real Schur form or complex Schur form is requested. For a real Schur form both \(\mathbf{T}\) and \(\mathbf{Z}\) are real-valued when \(\mathbf{A}\) is real-valued. When \(\mathbf{A}\) is a real-valued matrix, the real Schur form is only quasi upper triangular because \(2\times2\) blocks extrude from the main diagonal corresponding to any complex-valued eigenvalues. The command `linalg.schur` finds the Schur decomposition, while the command `linalg.rsf2csf` converts \(\mathbf{T}\) and \(\mathbf{Z}\) from a real Schur form to a complex Schur form. The Schur form is especially useful in calculating functions of matrices.

The following example illustrates the Schur decomposition:

> \>\>\> from scipy import linalg \>\>\> A = np.asmatrix('\[1 3 2; 1 4 5; 2 3 6\]') \>\>\> T, Z = linalg.schur(A) \>\>\> T1, Z1 = linalg.schur(A, 'complex') \>\>\> T2, Z2 = linalg.rsf2csf(T, Z) \>\>\> T array(\[\[ 9.90012467, 1.78947961, -0.65498528\], \[ 0. , 0.54993766, -1.57754789\], \[ 0. , 0.51260928, 0.54993766\]\]) \>\>\> T2 array(\[\[ 9.90012467+0.00000000e+00j, -0.32436598+1.55463542e+00j, -0.88619748+5.69027615e-01j\], \[ 0. +0.00000000e+00j, 0.54993766+8.99258408e-01j, 1.06493862+3.05311332e-16j\], \[ 0. +0.00000000e+00j, 0. +0.00000000e+00j, 0.54993766-8.99258408e-01j\]\]) \>\>\> abs(T1 - T2) \# different array(\[\[ 1.06604538e-14, 2.06969555e+00, 1.69375747e+00\], \# may vary \[ 0.00000000e+00, 1.33688556e-15, 4.74146496e-01\], \[ 0.00000000e+00, 0.00000000e+00, 1.13220977e-15\]\]) \>\>\> abs(Z1 - Z2) \# different array(\[\[ 0.06833781, 0.88091091, 0.79568503\], \# may vary \[ 0.11857169, 0.44491892, 0.99594171\], \[ 0.12624999, 0.60264117, 0.77257633\]\]) \>\>\> T, Z, T1, Z1, T2, Z2 = map(np.asmatrix,(T,Z,T1,Z1,T2,Z2)) \>\>\> abs(A - Z\*T\*Z.H) \# same matrix(\[\[ 5.55111512e-16, 1.77635684e-15, 2.22044605e-15\], \[ 0.00000000e+00, 3.99680289e-15, 8.88178420e-16\], \[ 1.11022302e-15, 4.44089210e-16, 3.55271368e-15\]\]) \>\>\> abs(A - Z1\*T1\*Z1.H) \# same matrix(\[\[ 4.26993904e-15, 6.21793362e-15, 8.00007092e-15\], \[ 5.77945386e-15, 6.21798014e-15, 1.06653681e-14\], \[ 7.16681444e-15, 8.90271058e-15, 1.77635764e-14\]\]) \>\>\> abs(A - Z2\*T2\*Z2.H) \# same matrix(\[\[ 6.02594127e-16, 1.77648931e-15, 2.22506907e-15\], \[ 2.46275555e-16, 3.99684548e-15, 8.91642616e-16\], \[ 8.88225111e-16, 8.88312432e-16, 4.44104848e-15\]\])

### Interpolative decomposition

`scipy.linalg.interpolative` contains routines for computing the interpolative decomposition (ID) of a matrix. For a matrix \(A
\in \mathbb{C}^{m \times n}\) of rank \(k \leq \min \{ m, n \}\) this is a factorization

\[A \Pi =
\begin{bmatrix}
 A \Pi_{1} & A \Pi_{2}
\end{bmatrix} =
A \Pi_{1}
\begin{bmatrix}
 I & T
\end{bmatrix},\]

where \(\Pi = [\Pi_{1}, \Pi_{2}]\) is a permutation matrix with \(\Pi_{1} \in \{ 0, 1 \}^{n \times k}\), i.e., \(A \Pi_{2} =
A \Pi_{1} T\). This can equivalently be written as \(A = BP\), where \(B = A \Pi_{1}\) and \(P = [I, T] \Pi^{\mathsf{T}}\) are the *skeleton* and *interpolation matrices*, respectively.

<div class="seealso">

<span class="title-ref">scipy.linalg.interpolative</span> --- for more information.

</div>

## Matrix functions

Consider the function \(f\left(x\right)\) with Taylor series expansion

\[f\left(x\right)=\sum_{k=0}^{\infty}\frac{f^{\left(k\right)}\left(0\right)}{k!}x^{k}.\]

A matrix function can be defined using this Taylor series for the square matrix \(\mathbf{A}\) as

\[f\left(\mathbf{A}\right)=\sum_{k=0}^{\infty}\frac{f^{\left(k\right)}\left(0\right)}{k!}\mathbf{A}^{k}.\]

\> **Note** \> While this serves as a useful representation of a matrix function, it is rarely the best way to calculate a matrix function. In particular, if the matrix is not diagonalizable, results may be inaccurate.

### Exponential and logarithm functions

The matrix exponential is one of the more common matrix functions. The preferred method for implementing the matrix exponential is to use scaling and a Padé approximation for \(e^{x}\). This algorithm is implemented as `linalg.expm`.

The inverse of the matrix exponential is the matrix logarithm defined as the inverse of the matrix exponential:

\[\mathbf{A}\equiv\exp\left(\log\left(\mathbf{A}\right)\right).\]

The matrix logarithm can be obtained with `linalg.logm`.

### Trigonometric functions

The trigonometric functions, \(\sin\), \(\cos\), and \(\tan\), are implemented for matrices in <span class="title-ref">linalg.sinm</span>, <span class="title-ref">linalg.cosm</span>, and `linalg.tanm`, respectively. The matrix sine and cosine can be defined using Euler's identity as

\[\begin{aligned}
\begin{eqnarray*} \sin\left(\mathbf{A}\right) & = & \frac{e^{j\mathbf{A}}-e^{-j\mathbf{A}}}{2j}\\ \cos\left(\mathbf{A}\right) & = & \frac{e^{j\mathbf{A}}+e^{-j\mathbf{A}}}{2}.\end{eqnarray*}
\end{aligned}\]

The tangent is

\[\tan\left(x\right)=\frac{\sin\left(x\right)}{\cos\left(x\right)}=\left[\cos\left(x\right)\right]^{-1}\sin\left(x\right)\]

and so the matrix tangent is defined as

\[\left[\cos\left(\mathbf{A}\right)\right]^{-1}\sin\left(\mathbf{A}\right).\]

### Hyperbolic trigonometric functions

The hyperbolic trigonometric functions, \(\sinh\), \(\cosh\), and \(\tanh\), can also be defined for matrices using the familiar definitions:

\[\begin{aligned}
\begin{eqnarray*} \sinh\left(\mathbf{A}\right) & = & \frac{e^{\mathbf{A}}-e^{-\mathbf{A}}}{2}\\ \cosh\left(\mathbf{A}\right) & = & \frac{e^{\mathbf{A}}+e^{-\mathbf{A}}}{2}\\ \tanh\left(\mathbf{A}\right) & = & \left[\cosh\left(\mathbf{A}\right)\right]^{-1}\sinh\left(\mathbf{A}\right).\end{eqnarray*}
\end{aligned}\]

These matrix functions can be found using `linalg.sinhm`, `linalg.coshm`, and `linalg.tanhm`.

### Arbitrary function

Finally, any arbitrary function that takes one complex number and returns a complex number can be called as a matrix function using the command `linalg.funm`. This command takes the matrix and an arbitrary Python function. It then implements an algorithm from Golub and Van Loan's book "Matrix Computations" to compute the function applied to the matrix using a Schur decomposition. Note that *the function needs to accept complex numbers* as input in order to work with this algorithm. For example, the following code computes the zeroth-order Bessel function applied to a matrix.

> \>\>\> from scipy import special, linalg \>\>\> rng = np.random.default\_rng() \>\>\> A = rng.random((3, 3)) \>\>\> B = linalg.funm(A, lambda x: special.jv(0, x)) \>\>\> A array(\[\[0.06369197, 0.90647174, 0.98024544\], \[0.68752227, 0.5604377 , 0.49142032\], \[0.86754578, 0.9746787 , 0.37932682\]\]) \>\>\> B array(\[\[ 0.6929219 , -0.29728805, -0.15930896\], \[-0.16226043, 0.71967826, -0.22709386\], \[-0.19945564, -0.33379957, 0.70259022\]\]) \>\>\> linalg.eigvals(A) array(\[ 1.94835336+0.j, -0.72219681+0.j, -0.22270006+0.j\]) \>\>\> special.jv(0, linalg.eigvals(A)) array(\[0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j\]) \>\>\> linalg.eigvals(B) array(\[0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j\])

Note how, by virtue of how matrix analytic functions are defined, the Bessel function has acted on the matrix eigenvalues.

## Special matrices

SciPy and NumPy provide several functions for creating special matrices that are frequently used in engineering and science.

| Type                  | Function                                                        | Description                                                |
| --------------------- | --------------------------------------------------------------- | ---------------------------------------------------------- |
| block diagonal        | <span class="title-ref">scipy.linalg.block\_diag</span>         | Create a block diagonal matrix from the provided arrays.   |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| circulant             | <span class="title-ref">scipy.linalg.circulant</span>           | Create a circulant matrix.                                 |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| companion             | <span class="title-ref">scipy.linalg.companion</span>           | Create a companion matrix.                                 |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| convolution           | <span class="title-ref">scipy.linalg.convolution\_matrix</span> | Create a convolution matrix.                               |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Discrete Fourier      | <span class="title-ref">scipy.linalg.dft</span>                 | Create a discrete Fourier transform matrix.                |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Fiedler               | <span class="title-ref">scipy.linalg.fiedler</span>             | Create a symmetric Fiedler matrix.                         |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Fiedler Companion     | <span class="title-ref">scipy.linalg.fiedler\_companion</span>  | Create a Fiedler companion matrix.                         |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Hadamard              | <span class="title-ref">scipy.linalg.hadamard</span>            | Create an Hadamard matrix.                                 |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Hankel                | <span class="title-ref">scipy.linalg.hankel</span>              | Create a Hankel matrix.                                    |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Helmert               | <span class="title-ref">scipy.linalg.helmert</span>             | Create a Helmert matrix.                                   |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Hilbert               | <span class="title-ref">scipy.linalg.hilbert</span>             | Create a Hilbert matrix.                                   |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Inverse Hilbert       | <span class="title-ref">scipy.linalg.invhilbert</span>          | Create the inverse of a Hilbert matrix.                    |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Leslie                | <span class="title-ref">scipy.linalg.leslie</span>              | Create a Leslie matrix.                                    |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Pascal                | <span class="title-ref">scipy.linalg.pascal</span>              | Create a Pascal matrix.                                    |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Inverse Pascal        | <span class="title-ref">scipy.linalg.invpascal</span>           | Create the inverse of a Pascal matrix.                     |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Toeplitz              | <span class="title-ref">scipy.linalg.toeplitz</span>            | Create a Toeplitz matrix.                                  |
| \-------------------- | \---------------------------------                              | \--------------------------------------------------------- |
| Van der Monde         | <span class="title-ref">numpy.vander</span>                     | Create a Van der Monde matrix.                             |

For examples of the use of these functions, see their respective docstrings.

1.  A hermitian matrix \(\mathbf{D}\) satisfies \(\mathbf{D}^{H}=\mathbf{D}.\)

2.  A unitary matrix \(\mathbf{D}\) satisfies \(\mathbf{D}^{H}\mathbf{D}=\mathbf{I}=\mathbf{D}\mathbf{D}^{H}\) so that \(\mathbf{D}^{-1}=\mathbf{D}^{H}.\)

---

ndimage.md

---

# Multidimensional Image Processing (<span class="title-ref">scipy.ndimage</span>)

<div class="moduleauthor">

Peter Verveer \<<verveer@users.sourceforge.net>\>

</div>

<div class="currentmodule">

scipy.ndimage

</div>

## Introduction

Image processing and analysis are generally seen as operations on 2-D arrays of values. There are, however, a number of fields where images of higher dimensionality must be analyzed. Good examples of these are medical imaging and biological imaging. `numpy` is suited very well for this type of applications due to its inherent multidimensional nature. The `scipy.ndimage` packages provides a number of general image processing and analysis functions that are designed to operate with arrays of arbitrary dimensionality. The packages currently includes: functions for linear and non-linear filtering, binary morphology, B-spline interpolation, and object measurements.

## Properties shared by all functions

All functions share some common properties. Notably, all functions allow the specification of an output array with the *output* argument. With this argument, you can specify an array that will be changed in-place with the result with the operation. In this case, the result is not returned. Usually, using the *output* argument is more efficient, since an existing array is used to store the result.

The type of arrays returned is dependent on the type of operation, but it is, in most cases, equal to the type of the input. If, however, the *output* argument is used, the type of the result is equal to the type of the specified output argument. If no output argument is given, it is still possible to specify what the result of the output should be. This is done by simply assigning the desired <span class="title-ref">numpy</span> type object to the output argument. For example:

``` python
>>> from scipy.ndimage import correlate
>>> import numpy as np
>>> correlate(np.arange(10), [1, 2.5])
array([ 0,  2,  6,  9, 13, 16, 20, 23, 27, 30])
>>> correlate(np.arange(10), [1, 2.5], output=np.float64)
array([  0. ,   2.5,   6. ,   9.5,  13. ,  16.5,  20. ,  23.5,  27. ,  30.5])
```

## Filter functions

The functions described in this section all perform some type of spatial filtering of the input array: the elements in the output are some function of the values in the neighborhood of the corresponding input element. We refer to this neighborhood of elements as the filter kernel, which is often rectangular in shape but may also have an arbitrary footprint. Many of the functions described below allow you to define the footprint of the kernel by passing a mask through the *footprint* parameter. For example, a cross-shaped kernel can be defined as follows:

``` python
>>> footprint = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
>>> footprint
array([[0, 1, 0],
       [1, 1, 1],
       [0, 1, 0]])
```

Usually, the origin of the kernel is at the center calculated by dividing the dimensions of the kernel shape by two. For instance, the origin of a 1-D kernel of length three is at the second element. Take, for example, the correlation of a 1-D array with a filter of length 3 consisting of ones:

``` python
>>> from scipy.ndimage import correlate1d
>>> a = [0, 0, 0, 1, 0, 0, 0]
>>> correlate1d(a, [1, 1, 1])
array([0, 0, 1, 1, 1, 0, 0])
```

Sometimes, it is convenient to choose a different origin for the kernel. For this reason, most functions support the *origin* parameter, which gives the origin of the filter relative to its center. For example:

``` python
>>> a = [0, 0, 0, 1, 0, 0, 0]
>>> correlate1d(a, [1, 1, 1], origin = -1)
array([0, 1, 1, 1, 0, 0, 0])
```

The effect is a shift of the result towards the left. This feature will not be needed very often, but it may be useful, especially for filters that have an even size. A good example is the calculation of backward and forward differences:

``` python
>>> a = [0, 0, 1, 1, 1, 0, 0]
>>> correlate1d(a, [-1, 1])               # backward difference
array([ 0,  0,  1,  0,  0, -1,  0])
>>> correlate1d(a, [-1, 1], origin = -1)  # forward difference
array([ 0,  1,  0,  0, -1,  0,  0])
```

We could also have calculated the forward difference as follows:

``` python
>>> correlate1d(a, [0, -1, 1])
array([ 0,  1,  0,  0, -1,  0,  0])
```

However, using the origin parameter instead of a larger kernel is more efficient. For multidimensional kernels, *origin* can be a number, in which case the origin is assumed to be equal along all axes, or a sequence giving the origin along each axis.

Since the output elements are a function of elements in the neighborhood of the input elements, the borders of the array need to be dealt with appropriately by providing the values outside the borders. This is done by assuming that the arrays are extended beyond their boundaries according to certain boundary conditions. In the functions described below, the boundary conditions can be selected using the *mode* parameter, which must be a string with the name of the boundary condition. The following boundary conditions are currently supported:

> 
> 
> | **mode**   | **description**                      | **example**               |
> | ---------- | ------------------------------------ | ------------------------- |
> | "nearest"  | use the value at the boundary        | \[1 2 3\]-\>\[1 1 2 3 3\] |
> | "wrap"     | periodically replicate the array     | \[1 2 3\]-\>\[3 1 2 3 1\] |
> | "reflect"  | reflect the array at the boundary    | \[1 2 3\]-\>\[1 1 2 3 3\] |
> | "mirror"   | mirror the array at the boundary     | \[1 2 3\]-\>\[2 1 2 3 2\] |
> | "constant" | use a constant value, default is 0.0 | \[1 2 3\]-\>\[0 1 2 3 0\] |
> 

The following synonyms are also supported for consistency with the interpolation routines:

> 
> 
> | **mode**        | **description**            |
> | --------------- | -------------------------- |
> | "grid-constant" | equivalent to "constant"\* |
> | "grid-mirror"   | equivalent to "reflect"    |
> | "grid-wrap"     | equivalent to "wrap"       |
> 

\* "grid-constant" and "constant" are equivalent for filtering operations, but have different behavior in interpolation functions. For API consistency, the filtering functions accept either name.

The "constant" mode is special since it needs an additional parameter to specify the constant value that should be used.

Note that modes mirror and reflect differ only in whether the sample at the boundary is repeated upon reflection. For mode mirror, the point of symmetry is exactly at the final sample, so that value is not repeated. This mode is also known as whole-sample symmetric since the point of symmetry falls on the final sample. Similarly, reflect is often referred to as half-sample symmetric as the point of symmetry is half a sample beyond the array boundary.

\> **Note** \> The easiest way to implement such boundary conditions would be to copy the data to a larger array and extend the data at the borders according to the boundary conditions. For large arrays and large filter kernels, this would be very memory consuming, and the functions described below, therefore, use a different approach that does not require allocating large temporary buffers.

### Correlation and convolution

  - The <span class="title-ref">correlate1d</span> function calculates a 1-D correlation along the given axis. The lines of the array along the given axis are correlated with the given *weights*. The *weights* parameter must be a 1-D sequence of numbers.
  - The function <span class="title-ref">correlate</span> implements multidimensional correlation of the input array with a given kernel.
  - The <span class="title-ref">convolve1d</span> function calculates a 1-D convolution along the given axis. The lines of the array along the given axis are convoluted with the given *weights*. The *weights* parameter must be a 1-D sequence of numbers.

<!-- end list -->

  - \- The function <span class="title-ref">convolve</span> implements multidimensional  
    convolution of the input array with a given kernel.
    
    \> **Note**

  - \>  
    A convolution is essentially a correlation after mirroring the kernel. As a result, the *origin* parameter behaves differently than in the case of a correlation: the results is shifted in the opposite direction.

### Smoothing filters

  - The <span class="title-ref">gaussian\_filter1d</span> function implements a 1-D Gaussian filter. The standard deviation of the Gaussian filter is passed through the parameter *sigma*. Setting *order* = 0 corresponds to convolution with a Gaussian kernel. An order of 1, 2, or 3 corresponds to convolution with the first, second, or third derivatives of a Gaussian. Higher-order derivatives are not implemented.

<!-- end list -->

  - \- The <span class="title-ref">gaussian\_filter</span> function implements a multidimensional  
    Gaussian filter. The standard deviations of the Gaussian filter along each axis are passed through the parameter *sigma* as a sequence or numbers. If *sigma* is not a sequence but a single number, the standard deviation of the filter is equal along all directions. The order of the filter can be specified separately for each axis. An order of 0 corresponds to convolution with a Gaussian kernel. An order of 1, 2, or 3 corresponds to convolution with the first, second, or third derivatives of a Gaussian. Higher-order derivatives are not implemented. The *order* parameter must be a number, to specify the same order for all axes, or a sequence of numbers to specify a different order for each axis. The example below shows the filter applied on test data with different values of *sigma*. The *order* parameter is kept at 0.
    
    <div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">
    
    tutorial/examples/gaussian\_filter\_plot1.py
    
    </div>
    
    \> **Note**

  - \>  
    The multidimensional filter is implemented as a sequence of 1-D Gaussian filters. The intermediate arrays are stored in the same data type as the output. Therefore, for output types with a lower precision, the results may be imprecise because intermediate results may be stored with insufficient precision. This can be prevented by specifying a more precise output type.

  - \- The <span class="title-ref">uniform\_filter1d</span> function calculates a 1-D  
    uniform filter of the given *size* along the given axis.

  - \- The <span class="title-ref">uniform\_filter</span> implements a multidimensional uniform  
    filter. The sizes of the uniform filter are given for each axis as a sequence of integers by the *size* parameter. If *size* is not a sequence, but a single number, the sizes along all axes are assumed to be equal.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    The multidimensional filter is implemented as a sequence of 1-D uniform filters. The intermediate arrays are stored in the same data type as the output. Therefore, for output types with a lower precision, the results may be imprecise because intermediate results may be stored with insufficient precision. This can be prevented by specifying a more precise output type.
    
    </div>

### Filters based on order statistics

  - The <span class="title-ref">minimum\_filter1d</span> function calculates a 1-D minimum filter of the given *size* along the given axis.
  - The <span class="title-ref">maximum\_filter1d</span> function calculates a 1-D maximum filter of the given *size* along the given axis.
  - The <span class="title-ref">minimum\_filter</span> function calculates a multidimensional minimum filter. Either the sizes of a rectangular kernel or the footprint of the kernel must be provided. The *size* parameter, if provided, must be a sequence of sizes or a single number, in which case the size of the filter is assumed to be equal along each axis. The *footprint*, if provided, must be an array that defines the shape of the kernel by its non-zero elements.
  - The <span class="title-ref">maximum\_filter</span> function calculates a multidimensional maximum filter. Either the sizes of a rectangular kernel or the footprint of the kernel must be provided. The *size* parameter, if provided, must be a sequence of sizes or a single number, in which case the size of the filter is assumed to be equal along each axis. The *footprint*, if provided, must be an array that defines the shape of the kernel by its non-zero elements.
  - The <span class="title-ref">rank\_filter</span> function calculates a multidimensional rank filter. The *rank* may be less than zero, i.e., *rank* = -1 indicates the largest element. Either the sizes of a rectangular kernel or the footprint of the kernel must be provided. The *size* parameter, if provided, must be a sequence of sizes or a single number, in which case the size of the filter is assumed to be equal along each axis. The *footprint*, if provided, must be an array that defines the shape of the kernel by its non-zero elements.
  - The <span class="title-ref">percentile\_filter</span> function calculates a multidimensional percentile filter. The *percentile* may be less than zero, i.e., *percentile* = -20 equals *percentile* = 80. Either the sizes of a rectangular kernel or the footprint of the kernel must be provided. The *size* parameter, if provided, must be a sequence of sizes or a single number, in which case the size of the filter is assumed to be equal along each axis. The *footprint*, if provided, must be an array that defines the shape of the kernel by its non-zero elements.
  - The <span class="title-ref">median\_filter</span> function calculates a multidimensional median filter. Either the sizes of a rectangular kernel or the footprint of the kernel must be provided. The *size* parameter, if provided, must be a sequence of sizes or a single number, in which case the size of the filter is assumed to be equal along each axis. The *footprint* if provided, must be an array that defines the shape of the kernel by its non-zero elements.

### Derivatives

Derivative filters can be constructed in several ways. The function <span class="title-ref">gaussian\_filter1d</span>, described in \[ndimage-filter-functions-smoothing\](\#ndimage-filter-functions-smoothing), can be used to calculate derivatives along a given axis using the *order* parameter. Other derivative filters are the Prewitt and Sobel filters:

  - The <span class="title-ref">prewitt</span> function calculates a derivative along the given axis.
  - The <span class="title-ref">sobel</span> function calculates a derivative along the given axis.

The Laplace filter is calculated by the sum of the second derivatives along all axes. Thus, different Laplace filters can be constructed using different second-derivative functions. Therefore, we provide a general function that takes a function argument to calculate the second derivative along a given direction.

  - The function <span class="title-ref">generic\_laplace</span> calculates a Laplace filter using the function passed through `derivative2` to calculate second derivatives. The function `derivative2` should have the following signature
    
    ``` python
    derivative2(input, axis, output, mode, cval, *extra_arguments, **extra_keywords)
    ```
    
    It should calculate the second derivative along the dimension *axis*. If *output* is not `None`, it should use that for the output and return `None`, otherwise it should return the result. *mode*, *cval* have the usual meaning.
    
    The *extra\_arguments* and *extra\_keywords* arguments can be used to pass a tuple of extra arguments and a dictionary of named arguments that are passed to `derivative2` at each call.
    
    For example
    
    ``` python
    >>> def d2(input, axis, output, mode, cval):
    ...     return correlate1d(input, [1, -2, 1], axis, output, mode, cval, 0)
    ...
    >>> a = np.zeros((5, 5))
    >>> a[2, 2] = 1
    >>> from scipy.ndimage import generic_laplace
    >>> generic_laplace(a, d2)
    array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1., -4.,  1.,  0.],
           [ 0.,  0.,  1.,  0.,  0.],
           [ 0.,  0.,  0.,  0.,  0.]])
    ```
    
    To demonstrate the use of the *extra\_arguments* argument, we could do
    
    ``` python
    >>> def d2(input, axis, output, mode, cval, weights):
    ...     return correlate1d(input, weights, axis, output, mode, cval, 0,)
    ...
    >>> a = np.zeros((5, 5))
    >>> a[2, 2] = 1
    >>> generic_laplace(a, d2, extra_arguments = ([1, -2, 1],))
    array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
           [ 0.,  1., -4.,  1.,  0.],
           [ 0.,  0.,  1.,  0.,  0.],
           [ 0.,  0.,  0.,  0.,  0.]])
    ```
    
    or
    
    ``` python
    >>> generic_laplace(a, d2, extra_keywords = {'weights': [1, -2, 1]})
    array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1., -4.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
    ```

The following two functions are implemented using <span class="title-ref">generic\_laplace</span> by providing appropriate functions for the second-derivative function:

  - The function <span class="title-ref">laplace</span> calculates the Laplace using discrete differentiation for the second derivative (i.e., convolution with `[1, -2, 1]`).
  - The function <span class="title-ref">gaussian\_laplace</span> calculates the Laplace filter using <span class="title-ref">gaussian\_filter</span> to calculate the second derivatives. The standard deviations of the Gaussian filter along each axis are passed through the parameter *sigma* as a sequence or numbers. If *sigma* is not a sequence but a single number, the standard deviation of the filter is equal along all directions.

The gradient magnitude is defined as the square root of the sum of the squares of the gradients in all directions. Similar to the generic Laplace function, there is a <span class="title-ref">generic\_gradient\_magnitude</span> function that calculates the gradient magnitude of an array.

  - The function <span class="title-ref">generic\_gradient\_magnitude</span> calculates a gradient magnitude using the function passed through `derivative` to calculate first derivatives. The function `derivative` should have the following signature
    
    ``` python
    derivative(input, axis, output, mode, cval, *extra_arguments, **extra_keywords)
    ```
    
    It should calculate the derivative along the dimension *axis*. If *output* is not `None`, it should use that for the output and return `None`, otherwise it should return the result. *mode*, *cval* have the usual meaning.
    
    The *extra\_arguments* and *extra\_keywords* arguments can be used to pass a tuple of extra arguments and a dictionary of named arguments that are passed to *derivative* at each call.
    
    For example, the <span class="title-ref">sobel</span> function fits the required signature
    
    ``` python
    >>> a = np.zeros((5, 5))
    >>> a[2, 2] = 1
    >>> from scipy.ndimage import sobel, generic_gradient_magnitude
    >>> generic_gradient_magnitude(a, sobel)
    array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  1.41421356,  2.        ,  1.41421356,  0.        ],
           [ 0.        ,  2.        ,  0.        ,  2.        ,  0.        ],
           [ 0.        ,  1.41421356,  2.        ,  1.41421356,  0.        ],
           [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])
    ```
    
    See the documentation of <span class="title-ref">generic\_laplace</span> for examples of using the *extra\_arguments* and *extra\_keywords* arguments.

The <span class="title-ref">sobel</span> and <span class="title-ref">prewitt</span> functions fit the required signature and can, therefore, be used directly with <span class="title-ref">generic\_gradient\_magnitude</span>.

  - The function <span class="title-ref">gaussian\_gradient\_magnitude</span> calculates the gradient magnitude using <span class="title-ref">gaussian\_filter</span> to calculate the first derivatives. The standard deviations of the Gaussian filter along each axis are passed through the parameter *sigma* as a sequence or numbers. If *sigma* is not a sequence but a single number, the standard deviation of the filter is equal along all directions.

### Generic filter functions

To implement filter functions, generic functions can be used that accept a callable object that implements the filtering operation. The iteration over the input and output arrays is handled by these generic functions, along with such details as the implementation of the boundary conditions. Only a callable object implementing a callback function that does the actual filtering work must be provided. The callback function can also be written in C and passed using a :c`PyCapsule` (see \[ndimage-ccallbacks\](\#ndimage-ccallbacks) for more information).

  - The <span class="title-ref">generic\_filter1d</span> function implements a generic 1-D filter function, where the actual filtering operation must be supplied as a python function (or other callable object). The <span class="title-ref">generic\_filter1d</span> function iterates over the lines of an array and calls `function` at each line. The arguments that are passed to `function` are 1-D arrays of the `numpy.float64` type. The first contains the values of the current line. It is extended at the beginning and the end, according to the *filter\_size* and *origin* arguments. The second array should be modified in-place to provide the output values of the line. For example, consider a correlation along one dimension:
    
    ``` python
    >>> a = np.arange(12).reshape(3,4)
    >>> correlate1d(a, [1, 2, 3])
    array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
           [51, 56, 62, 65]])
    ```
    
    The same operation can be implemented using <span class="title-ref">generic\_filter1d</span>, as follows:
    
    ``` python
    >>> def fnc(iline, oline):
    ...     oline[...] = iline[:-2] + 2 * iline[1:-1] + 3 * iline[2:]
    ...
    >>> from scipy.ndimage import generic_filter1d
    >>> generic_filter1d(a, fnc, 3)
    array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
           [51, 56, 62, 65]])
    ```
    
    Here, the origin of the kernel was (by default) assumed to be in the middle of the filter of length 3. Therefore, each input line had been extended by one value at the beginning and at the end, before the function was called.
    
    Optionally, extra arguments can be defined and passed to the filter function. The *extra\_arguments* and *extra\_keywords* arguments can be used to pass a tuple of extra arguments and/or a dictionary of named arguments that are passed to derivative at each call. For example, we can pass the parameters of our filter as an argument
    
    ``` python
    >>> def fnc(iline, oline, a, b):
    ...     oline[...] = iline[:-2] + a * iline[1:-1] + b * iline[2:]
    ...
    >>> generic_filter1d(a, fnc, 3, extra_arguments = (2, 3))
    array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
           [51, 56, 62, 65]])
    ```
    
    or
    
    ``` python
    >>> generic_filter1d(a, fnc, 3, extra_keywords = {'a':2, 'b':3})
    array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
           [51, 56, 62, 65]])
    ```

  - The <span class="title-ref">generic\_filter</span> function implements a generic filter function, where the actual filtering operation must be supplied as a python function (or other callable object). The <span class="title-ref">generic\_filter</span> function iterates over the array and calls `function` at each element. The argument of `function` is a 1-D array of the `numpy.float64` type that contains the values around the current element that are within the footprint of the filter. The function should return a single value that can be converted to a double precision number. For example, consider a correlation:
    
    ``` python
    >>> a = np.arange(12).reshape(3,4)
    >>> correlate(a, [[1, 0], [0, 3]])
    array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
           [28, 31, 35, 39]])
    ```
    
    The same operation can be implemented using *generic\_filter*, as follows:
    
    ``` python
    >>> def fnc(buffer):
    ...     return (buffer * np.array([1, 3])).sum()
    ...
    >>> from scipy.ndimage import generic_filter
    >>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]])
    array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
           [28, 31, 35, 39]])
    ```
    
    Here, a kernel footprint was specified that contains only two elements. Therefore, the filter function receives a buffer of length equal to two, which was multiplied with the proper weights and the result summed.
    
    When calling <span class="title-ref">generic\_filter</span>, either the sizes of a rectangular kernel or the footprint of the kernel must be provided. The *size* parameter, if provided, must be a sequence of sizes or a single number, in which case the size of the filter is assumed to be equal along each axis. The *footprint*, if provided, must be an array that defines the shape of the kernel by its non-zero elements.
    
    Optionally, extra arguments can be defined and passed to the filter function. The *extra\_arguments* and *extra\_keywords* arguments can be used to pass a tuple of extra arguments and/or a dictionary of named arguments that are passed to derivative at each call. For example, we can pass the parameters of our filter as an argument
    
    ``` python
    >>> def fnc(buffer, weights):
    ...     weights = np.asarray(weights)
    ...     return (buffer * weights).sum()
    ...
    >>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]], extra_arguments = ([1, 3],))
    array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
           [28, 31, 35, 39]])
    ```
    
    or
    
    ``` python
    >>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]], extra_keywords= {'weights': [1, 3]})
    array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
       [28, 31, 35, 39]])
    ```

These functions iterate over the lines or elements starting at the last axis, i.e., the last index changes the fastest. This order of iteration is guaranteed for the case that it is important to adapt the filter depending on spatial location. Here is an example of using a class that implements the filter and keeps track of the current coordinates while iterating. It performs the same filter operation as described above for <span class="title-ref">generic\_filter</span>, but additionally prints the current coordinates:

``` python
>>> a = np.arange(12).reshape(3,4)
>>>
>>> class fnc_class:
...     def __init__(self, shape):
...         # store the shape:
...         self.shape = shape
...         # initialize the coordinates:
...         self.coordinates = [0] * len(shape)
...
...     def filter(self, buffer):
...         result = (buffer * np.array([1, 3])).sum()
...         print(self.coordinates)
...         # calculate the next coordinates:
...         axes = list(range(len(self.shape)))
...         axes.reverse()
...         for jj in axes:
...             if self.coordinates[jj] < self.shape[jj] - 1:
...                 self.coordinates[jj] += 1
...                 break
...             else:
...                 self.coordinates[jj] = 0
...         return result
...
>>> fnc = fnc_class(shape = (3,4))
>>> generic_filter(a, fnc.filter, footprint = [[1, 0], [0, 1]])
[0, 0]
[0, 1]
[0, 2]
[0, 3]
[1, 0]
[1, 1]
[1, 2]
[1, 3]
[2, 0]
[2, 1]
[2, 2]
[2, 3]
array([[ 0,  3,  7, 11],
   [12, 15, 19, 23],
   [28, 31, 35, 39]])
```

For the <span class="title-ref">generic\_filter1d</span> function, the same approach works, except that this function does not iterate over the axis that is being filtered. The example for <span class="title-ref">generic\_filter1d</span> then becomes this:

``` python
>>> a = np.arange(12).reshape(3,4)
>>>
>>> class fnc1d_class:
...     def __init__(self, shape, axis = -1):
...         # store the filter axis:
...         self.axis = axis
...         # store the shape:
...         self.shape = shape
...         # initialize the coordinates:
...         self.coordinates = [0] * len(shape)
...
...     def filter(self, iline, oline):
...         oline[...] = iline[:-2] + 2 * iline[1:-1] + 3 * iline[2:]
...         print(self.coordinates)
...         # calculate the next coordinates:
...         axes = list(range(len(self.shape)))
...         # skip the filter axis:
...         del axes[self.axis]
...         axes.reverse()
...         for jj in axes:
...             if self.coordinates[jj] < self.shape[jj] - 1:
...                 self.coordinates[jj] += 1
...                 break
...             else:
...                 self.coordinates[jj] = 0
...
>>> fnc = fnc1d_class(shape = (3,4))
>>> generic_filter1d(a, fnc.filter, 3)
[0, 0]
[1, 0]
[2, 0]
array([[ 3,  8, 14, 17],
   [27, 32, 38, 41],
       [51, 56, 62, 65]])
```

### Fourier domain filters

The functions described in this section perform filtering operations in the Fourier domain. Thus, the input array of such a function should be compatible with an inverse Fourier transform function, such as the functions from the `numpy.fft` module. We, therefore, have to deal with arrays that may be the result of a real or a complex Fourier transform. In the case of a real Fourier transform, only half of the of the symmetric complex transform is stored. Additionally, it needs to be known what the length of the axis was that was transformed by the real fft. The functions described here provide a parameter *n* that, in the case of a real transform, must be equal to the length of the real transform axis before transformation. If this parameter is less than zero, it is assumed that the input array was the result of a complex Fourier transform. The parameter *axis* can be used to indicate along which axis the real transform was executed.

  - The <span class="title-ref">fourier\_shift</span> function multiplies the input array with the multidimensional Fourier transform of a shift operation for the given shift. The *shift* parameter is a sequence of shifts for each dimension or a single value for all dimensions.
  - The <span class="title-ref">fourier\_gaussian</span> function multiplies the input array with the multidimensional Fourier transform of a Gaussian filter with given standard deviations *sigma*. The *sigma* parameter is a sequence of values for each dimension or a single value for all dimensions.
  - The <span class="title-ref">fourier\_uniform</span> function multiplies the input array with the multidimensional Fourier transform of a uniform filter with given sizes *size*. The *size* parameter is a sequence of values for each dimension or a single value for all dimensions.
  - The <span class="title-ref">fourier\_ellipsoid</span> function multiplies the input array with the multidimensional Fourier transform of an elliptically-shaped filter with given sizes *size*. The *size* parameter is a sequence of values for each dimension or a single value for all dimensions. This function is only implemented for dimensions 1, 2, and 3.

## Interpolation functions

This section describes various interpolation functions that are based on B-spline theory. A good introduction to B-splines can be found in\[1\] with detailed algorithms for image interpolation given in\[2\].

### Spline pre-filters

Interpolation using splines of an order larger than 1 requires a pre-filtering step. The interpolation functions described in section \[ndimage-interpolation\](\#ndimage-interpolation) apply pre-filtering by calling <span class="title-ref">spline\_filter</span>, but they can be instructed not to do this by setting the *prefilter* keyword equal to False. This is useful if more than one interpolation operation is done on the same array. In this case, it is more efficient to do the pre-filtering only once and use a pre-filtered array as the input of the interpolation functions. The following two functions implement the pre-filtering:

  - The <span class="title-ref">spline\_filter1d</span> function calculates a 1-D spline filter along the given axis. An output array can optionally be provided. The order of the spline must be larger than 1 and less than 6.

<!-- end list -->

  - \- The <span class="title-ref">spline\_filter</span> function calculates a multidimensional  
    spline filter.
    
    \> **Note**

  - \>  
    The multidimensional filter is implemented as a sequence of 1-D spline filters. The intermediate arrays are stored in the same data type as the output. Therefore, if an output with a limited precision is requested, the results may be imprecise because intermediate results may be stored with insufficient precision. This can be prevented by specifying a output type of high precision.

### Interpolation boundary handling

The interpolation functions all employ spline interpolation to effect some type of geometric transformation of the input array. This requires a mapping of the output coordinates to the input coordinates, and therefore, the possibility arises that input values outside the boundaries may be needed. This problem is solved in the same way as described in \[ndimage-filter-functions\](\#ndimage-filter-functions) for the multidimensional filter functions. Therefore, these functions all support a *mode* parameter that determines how the boundaries are handled, and a *cval* parameter that gives a constant value in case that the 'constant' mode is used. The behavior of all modes, including at non-integer locations is illustrated below. Note the boundaries are not handled the same for all modes; <span class="title-ref">reflect</span> (aka `grid-mirror`) and `grid-wrap` involve symmetry or repetition about a point that is half way between image samples (dashed vertical lines) while modes <span class="title-ref">mirror</span> and <span class="title-ref">wrap</span> treat the image as if it's extent ends exactly at the first and last sample point rather than 0.5 samples past it.

<div class="plot" alt="&quot; &quot;" data-include-source="False">

tutorial/examples/plot\_boundary\_modes.py

</div>

The coordinates of image samples fall on integer sampling locations in the range from 0 to `shape[i] - 1` along each axis, `i`. The figure below illustrates the interpolation of a point at location `(3.7, 3.3)` within an image of shape `(7, 7)`. For an interpolation of order `n`, `n + 1` samples are involved along each axis. The filled circles illustrate the sampling locations involved in the interpolation of the value at the location of the red x.

<div class="plot" alt="&quot; &quot;" data-include-source="False">

tutorial/examples/plot\_interp\_grid.py

</div>

### Interpolation functions

  - \- The <span class="title-ref">geometric\_transform</span> function applies an arbitrary  
    geometric transform to the input. The given *mapping* function is called at each point in the output to find the corresponding coordinates in the input. *mapping* must be a callable object that accepts a tuple of length equal to the output array rank and returns the corresponding input coordinates as a tuple of length equal to the input array rank. The output shape and output type can optionally be provided. If not given, they are equal to the input shape and type.
    
    For example:
    
    ``` python
    >>> a = np.arange(12).reshape(4,3).astype(np.float64)
    >>> def shift_func(output_coordinates):
    ...     return (output_coordinates[0] - 0.5, output_coordinates[1] - 0.5)
    ...
    >>> from scipy.ndimage import geometric_transform
    >>> geometric_transform(a, shift_func)
    array([[ 0.    ,  0.    ,  0.    ],
       [ 0.    ,  1.3625,  2.7375],
           [ 0.    ,  4.8125,  6.1875],
           [ 0.    ,  8.2625,  9.6375]])
    ```
    
    Optionally, extra arguments can be defined and passed to the filter function. The *extra\_arguments* and *extra\_keywords* arguments can be used to pass a tuple of extra arguments and/or a dictionary of named arguments that are passed to derivative at each call. For example, we can pass the shifts in our example as arguments
    
    ``` python
    >>> def shift_func(output_coordinates, s0, s1):
    ...     return (output_coordinates[0] - s0, output_coordinates[1] - s1)
    ...
    >>> geometric_transform(a, shift_func, extra_arguments = (0.5, 0.5))
    array([[ 0.    ,  0.    ,  0.    ],
       [ 0.    ,  1.3625,  2.7375],
           [ 0.    ,  4.8125,  6.1875],
           [ 0.    ,  8.2625,  9.6375]])
    ```
    
    or
    
    ``` python
    >>> geometric_transform(a, shift_func, extra_keywords = {'s0': 0.5, 's1': 0.5})
    array([[ 0.    ,  0.    ,  0.    ],
       [ 0.    ,  1.3625,  2.7375],
       [ 0.    ,  4.8125,  6.1875],
       [ 0.    ,  8.2625,  9.6375]])
    ```
    
    \> **Note**

  - \>  
    The mapping function can also be written in C and passed using a <span class="title-ref">scipy.LowLevelCallable</span>. See \[ndimage-ccallbacks\](\#ndimage-ccallbacks) for more information.

  - \- The function <span class="title-ref">map\_coordinates</span> applies an arbitrary coordinate  
    transformation using the given array of coordinates. The shape of the output is derived from that of the coordinate array by dropping the first axis. The parameter *coordinates* is used to find for each point in the output the corresponding coordinates in the input. The values of *coordinates* along the first axis are the coordinates in the input array at which the output value is found. (See also the numarray <span class="title-ref">coordinates</span> function.) Since the coordinates may be non-integer coordinates, the value of the input at these coordinates is determined by spline interpolation of the requested order.
    
    Here is an example that interpolates a 2D array at `(0.5, 0.5)` and `(1, 2)`:
    
    ``` python
    >>> a = np.arange(12).reshape(4,3).astype(np.float64)
    >>> a
    array([[  0.,   1.,   2.],
       [  3.,   4.,   5.],
       [  6.,   7.,   8.],
       [  9.,  10.,  11.]])
    >>> from scipy.ndimage import map_coordinates
    >>> map_coordinates(a, [[0.5, 2], [0.5, 1]])
    array([ 1.3625,  7.])
    ```

  - \- The <span class="title-ref">affine\_transform</span> function applies an affine  
    transformation to the input array. The given transformation *matrix* and *offset* are used to find for each point in the output the corresponding coordinates in the input. The value of the input at the calculated coordinates is determined by spline interpolation of the requested order. The transformation *matrix* must be 2-D or can also be given as a 1-D sequence or array. In the latter case, it is assumed that the matrix is diagonal. A more efficient interpolation algorithm is then applied that exploits the separability of the problem. The output shape and output type can optionally be provided. If not given, they are equal to the input shape and type.

  - \- The <span class="title-ref">shift</span> function returns a shifted version of the input,  
    using spline interpolation of the requested *order*.

  - \- The <span class="title-ref">zoom</span> function returns a rescaled version of the input,  
    using spline interpolation of the requested *order*.

  - \- The <span class="title-ref">rotate</span> function returns the input array rotated in the  
    plane defined by the two axes given by the parameter *axes*, using spline interpolation of the requested *order*. The angle must be given in degrees. If *reshape* is true, then the size of the output array is adapted to contain the rotated input.

## Morphology

### Binary morphology

  - The <span class="title-ref">generate\_binary\_structure</span> functions generates a binary structuring element for use in binary morphology operations. The *rank* of the structure must be provided. The size of the structure that is returned is equal to three in each direction. The value of each element is equal to one if the square of the Euclidean distance from the element to the center is less than or equal to *connectivity*. For instance, 2-D 4-connected and 8-connected structures are generated as follows:
    
    ``` python
    >>> from scipy.ndimage import generate_binary_structure
    >>> generate_binary_structure(2, 1)
    array([[False,  True, False],
       [ True,  True,  True],
           [False,  True, False]], dtype=bool)
    >>> generate_binary_structure(2, 2)
    array([[ True,  True,  True],
       [ True,  True,  True],
           [ True,  True,  True]], dtype=bool)
    ```

This is a visual presentation of <span class="title-ref">generate\_binary\_structure</span> in 3D:

> 
> 
> <div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">
> 
> tutorial/examples/ndimage/3D\_binary\_structure.py
> 
> </div>

Most binary morphology functions can be expressed in terms of the basic operations erosion and dilation, which can be seen here:

> 
> 
> <div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">
> 
> tutorial/examples/morphology\_binary\_dilation\_erosion.py
> 
> </div>

  - The <span class="title-ref">binary\_erosion</span> function implements binary erosion of arrays of arbitrary rank with the given structuring element. The origin parameter controls the placement of the structuring element, as described in \[ndimage-filter-functions\](\#ndimage-filter-functions). If no structuring element is provided, an element with connectivity equal to one is generated using <span class="title-ref">generate\_binary\_structure</span>. The *border\_value* parameter gives the value of the array outside boundaries. The erosion is repeated *iterations* times. If *iterations* is less than one, the erosion is repeated until the result does not change anymore. If a *mask* array is given, only those elements with a true value at the corresponding mask element are modified at each iteration.
  - The <span class="title-ref">binary\_dilation</span> function implements binary dilation of arrays of arbitrary rank with the given structuring element. The origin parameter controls the placement of the structuring element, as described in \[ndimage-filter-functions\](\#ndimage-filter-functions). If no structuring element is provided, an element with connectivity equal to one is generated using <span class="title-ref">generate\_binary\_structure</span>. The *border\_value* parameter gives the value of the array outside boundaries. The dilation is repeated *iterations* times. If *iterations* is less than one, the dilation is repeated until the result does not change anymore. If a *mask* array is given, only those elements with a true value at the corresponding mask element are modified at each iteration.

Here is an example of using <span class="title-ref">binary\_dilation</span> to find all elements that touch the border, by repeatedly dilating an empty array from the border using the data array as the mask:

``` python
>>> struct = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
>>> a = np.array([[1,0,0,0,0], [1,1,0,1,0], [0,0,1,1,0], [0,0,0,0,0]])
>>> a
array([[1, 0, 0, 0, 0],
   [1, 1, 0, 1, 0],
       [0, 0, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> from scipy.ndimage import binary_dilation
>>> binary_dilation(np.zeros(a.shape), struct, -1, a, border_value=1)
array([[ True, False, False, False, False],
   [ True,  True, False, False, False],
       [False, False, False, False, False],
       [False, False, False, False, False]], dtype=bool)
```

The <span class="title-ref">binary\_erosion</span> and <span class="title-ref">binary\_dilation</span> functions both have an *iterations* parameter, which allows the erosion or dilation to be repeated a number of times. Repeating an erosion or a dilation with a given structure *n* times is equivalent to an erosion or a dilation with a structure that is *n-1* times dilated with itself. A function is provided that allows the calculation of a structure that is dilated a number of times with itself:

  - The <span class="title-ref">iterate\_structure</span> function returns a structure by dilation of the input structure *iteration* - 1 times with itself.
    
    For instance:
    
    ``` python
    >>> struct = generate_binary_structure(2, 1)
    >>> struct
    array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
    >>> from scipy.ndimage import iterate_structure
    >>> iterate_structure(struct, 2)
    array([[False, False,  True, False, False],
       [False,  True,  True,  True, False],
       [ True,  True,  True,  True,  True],
       [False,  True,  True,  True, False],
           [False, False,  True, False, False]], dtype=bool)
    
    If the origin of the original structure is equal to 0, then it is
    also equal to 0 for the iterated structure. If not, the origin
    must also be adapted if the equivalent of the *iterations*
    erosions or dilations must be achieved with the iterated
    structure. The adapted origin is simply obtained by multiplying
    with the number of iterations. For convenience, the
    `iterate_structure` also returns the adapted origin if the
    *origin* parameter is not ``None``:
    
    .. code:: python
    
    >>> iterate_structure(struct, 2, -1)
    (array([[False, False,  True, False, False],
           [False,  True,  True,  True, False],
       [ True,  True,  True,  True,  True],
       [False,  True,  True,  True, False],
       [False, False,  True, False, False]], dtype=bool), [-2, -2])
    ```

Other morphology operations can be defined in terms of erosion and dilation. The following functions provide a few of these operations for convenience:

  - The <span class="title-ref">binary\_opening</span> function implements binary opening of arrays of arbitrary rank with the given structuring element. Binary opening is equivalent to a binary erosion followed by a binary dilation with the same structuring element. The origin parameter controls the placement of the structuring element, as described in \[ndimage-filter-functions\](\#ndimage-filter-functions). If no structuring element is provided, an element with connectivity equal to one is generated using <span class="title-ref">generate\_binary\_structure</span>. The *iterations* parameter gives the number of erosions that is performed followed by the same number of dilations.
  - The <span class="title-ref">binary\_closing</span> function implements binary closing of arrays of arbitrary rank with the given structuring element. Binary closing is equivalent to a binary dilation followed by a binary erosion with the same structuring element. The origin parameter controls the placement of the structuring element, as described in \[ndimage-filter-functions\](\#ndimage-filter-functions). If no structuring element is provided, an element with connectivity equal to one is generated using <span class="title-ref">generate\_binary\_structure</span>. The *iterations* parameter gives the number of dilations that is performed followed by the same number of erosions.
  - The <span class="title-ref">binary\_fill\_holes</span> function is used to close holes in objects in a binary image, where the structure defines the connectivity of the holes. The origin parameter controls the placement of the structuring element, as described in \[ndimage-filter-functions\](\#ndimage-filter-functions). If no structuring element is provided, an element with connectivity equal to one is generated using <span class="title-ref">generate\_binary\_structure</span>.
  - The <span class="title-ref">binary\_hit\_or\_miss</span> function implements a binary hit-or-miss transform of arrays of arbitrary rank with the given structuring elements. The hit-or-miss transform is calculated by erosion of the input with the first structure, erosion of the logical *not* of the input with the second structure, followed by the logical *and* of these two erosions. The origin parameters control the placement of the structuring elements, as described in \[ndimage-filter-functions\](\#ndimage-filter-functions). If *origin2* equals `None`, it is set equal to the *origin1* parameter. If the first structuring element is not provided, a structuring element with connectivity equal to one is generated using <span class="title-ref">generate\_binary\_structure</span>. If *structure2* is not provided, it is set equal to the logical *not* of *structure1*.

### Grey-scale morphology

Grey-scale morphology operations are the equivalents of binary morphology operations that operate on arrays with arbitrary values. Below, we describe the grey-scale equivalents of erosion, dilation, opening and closing. These operations are implemented in a similar fashion as the filters described in \[ndimage-filter-functions\](\#ndimage-filter-functions), and we refer to this section for the description of filter kernels and footprints, and the handling of array borders. The grey-scale morphology operations optionally take a *structure* parameter that gives the values of the structuring element. If this parameter is not given, the structuring element is assumed to be flat with a value equal to zero. The shape of the structure can optionally be defined by the *footprint* parameter. If this parameter is not given, the structure is assumed to be rectangular, with sizes equal to the dimensions of the *structure* array, or by the *size* parameter if *structure* is not given. The *size* parameter is only used if both *structure* and *footprint* are not given, in which case the structuring element is assumed to be rectangular and flat with the dimensions given by *size*. The *size* parameter, if provided, must be a sequence of sizes or a single number in which case the size of the filter is assumed to be equal along each axis. The *footprint* parameter, if provided, must be an array that defines the shape of the kernel by its non-zero elements.

Similarly to binary erosion and dilation, there are operations for grey-scale erosion and dilation:

  - The <span class="title-ref">grey\_erosion</span> function calculates a multidimensional grey-scale erosion.
  - The <span class="title-ref">grey\_dilation</span> function calculates a multidimensional grey-scale dilation.

Grey-scale opening and closing operations can be defined similarly to their binary counterparts:

  - The <span class="title-ref">grey\_opening</span> function implements grey-scale opening of arrays of arbitrary rank. Grey-scale opening is equivalent to a grey-scale erosion followed by a grey-scale dilation.
  - The <span class="title-ref">grey\_closing</span> function implements grey-scale closing of arrays of arbitrary rank. Grey-scale opening is equivalent to a grey-scale dilation followed by a grey-scale erosion.
  - The <span class="title-ref">morphological\_gradient</span> function implements a grey-scale morphological gradient of arrays of arbitrary rank. The grey-scale morphological gradient is equal to the difference of a grey-scale dilation and a grey-scale erosion.
  - The <span class="title-ref">morphological\_laplace</span> function implements a grey-scale morphological laplace of arrays of arbitrary rank. The grey-scale morphological laplace is equal to the sum of a grey-scale dilation and a grey-scale erosion minus twice the input.
  - The <span class="title-ref">white\_tophat</span> function implements a white top-hat filter of arrays of arbitrary rank. The white top-hat is equal to the difference of the input and a grey-scale opening.
  - The <span class="title-ref">black\_tophat</span> function implements a black top-hat filter of arrays of arbitrary rank. The black top-hat is equal to the difference of a grey-scale closing and the input.

## Distance transforms

Distance transforms are used to calculate the minimum distance from each element of an object to the background. The following functions implement distance transforms for three different distance metrics: Euclidean, city block, and chessboard distances.

  - The function <span class="title-ref">distance\_transform\_cdt</span> uses a chamfer type algorithm to calculate the distance transform of the input, by replacing each object element (defined by values larger than zero) with the shortest distance to the background (all non-object elements). The structure determines the type of chamfering that is done. If the structure is equal to 'cityblock', a structure is generated using <span class="title-ref">generate\_binary\_structure</span> with a squared distance equal to 1. If the structure is equal to 'chessboard', a structure is generated using <span class="title-ref">generate\_binary\_structure</span> with a squared distance equal to the rank of the array. These choices correspond to the common interpretations of the city block and the chessboard distance metrics in two dimensions.
    
    In addition to the distance transform, the feature transform can be calculated. In this case, the index of the closest background element is returned along the first axis of the result. The *return\_distances*, and *return\_indices* flags can be used to indicate if the distance transform, the feature transform, or both must be returned.
    
    The *distances* and *indices* arguments can be used to give optional output arrays that must be of the correct size and type (both `numpy.int32`). The basics of the algorithm used to implement this function are described in\[3\].

  - The function <span class="title-ref">distance\_transform\_edt</span> calculates the exact Euclidean distance transform of the input, by replacing each object element (defined by values larger than zero) with the shortest Euclidean distance to the background (all non-object elements).
    
    In addition to the distance transform, the feature transform can be calculated. In this case, the index of the closest background element is returned along the first axis of the result. The *return\_distances* and *return\_indices* flags can be used to indicate if the distance transform, the feature transform, or both must be returned.
    
    Optionally, the sampling along each axis can be given by the *sampling* parameter, which should be a sequence of length equal to the input rank, or a single number in which the sampling is assumed to be equal along all axes.
    
    The *distances* and *indices* arguments can be used to give optional output arrays that must be of the correct size and type (`numpy.float64` and `numpy.int32`).The algorithm used to implement this function is described in\[4\].

<!-- end list -->

  - \- The function <span class="title-ref">distance\_transform\_bf</span> uses a brute-force  
    algorithm to calculate the distance transform of the input, by replacing each object element (defined by values larger than zero) with the shortest distance to the background (all non-object elements). The metric must be one of "euclidean", "cityblock", or "chessboard".
    
    In addition to the distance transform, the feature transform can be calculated. In this case, the index of the closest background element is returned along the first axis of the result. The *return\_distances* and *return\_indices* flags can be used to indicate if the distance transform, the feature transform, or both must be returned.
    
    Optionally, the sampling along each axis can be given by the *sampling* parameter, which should be a sequence of length equal to the input rank, or a single number in which the sampling is assumed to be equal along all axes. This parameter is only used in the case of the Euclidean distance transform.
    
    The *distances* and *indices* arguments can be used to give optional output arrays that must be of the correct size and type (`numpy.float64` and `numpy.int32`).
    
    \> **Note**

  - \>  
    This function uses a slow brute-force algorithm, the function <span class="title-ref">distance\_transform\_cdt</span> can be used to more efficiently calculate city block and chessboard distance transforms. The function <span class="title-ref">distance\_transform\_edt</span> can be used to more efficiently calculate the exact Euclidean distance transform.

## Segmentation and labeling

Segmentation is the process of separating objects of interest from the background. The most simple approach is, probably, intensity thresholding, which is easily done with `numpy` functions:

``` python
>>> a = np.array([[1,2,2,1,1,0],
...               [0,2,3,1,2,0],
...               [1,1,1,3,3,2],
...               [1,1,1,1,2,1]])
>>> np.where(a > 1, 1, 0)
array([[0, 1, 1, 0, 0, 0],
   [0, 1, 1, 0, 1, 0],
   [0, 0, 0, 1, 1, 1],
   [0, 0, 0, 0, 1, 0]])
```

The result is a binary image, in which the individual objects still need to be identified and labeled. The function <span class="title-ref">label</span> generates an array where each object is assigned a unique number:

  - \- The <span class="title-ref">label</span> function generates an array where the objects in  
    the input are labeled with an integer index. It returns a tuple consisting of the array of object labels and the number of objects found, unless the *output* parameter is given, in which case only the number of objects is returned. The connectivity of the objects is defined by a structuring element. For instance, in 2D using a 4-connected structuring element gives:
    
    ``` python
    >>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
    >>> s = [[0, 1, 0], [1,1,1], [0,1,0]]
    >>> from scipy.ndimage import label
    >>> label(a, s)
    (array([[0, 1, 1, 0, 0, 0],
            [0, 1, 1, 0, 2, 0],
            [0, 0, 0, 2, 2, 2],
            [0, 0, 0, 0, 2, 0]], dtype=int32), 2)
    ```
    
    These two objects are not connected because there is no way in which we can place the structuring element, such that it overlaps with both objects. However, an 8-connected structuring element results in only a single object:
    
    ``` python
    >>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
    >>> s = [[1,1,1], [1,1,1], [1,1,1]]
    >>> label(a, s)[0]
    array([[0, 1, 1, 0, 0, 0],
           [0, 1, 1, 0, 1, 0],
           [0, 0, 0, 1, 1, 1],
           [0, 0, 0, 0, 1, 0]], dtype=int32)
    ```
    
    If no structuring element is provided, one is generated by calling <span class="title-ref">generate\_binary\_structure</span> (see \[ndimage-binary-morphology\](\#ndimage-binary-morphology)) using a connectivity of one (which in 2D is the 4-connected structure of the first example). The input can be of any type, any value not equal to zero is taken to be part of an object. This is useful if you need to 're-label' an array of object indices, for instance, after removing unwanted objects. Just apply the label function again to the index array. For instance:
    
    ``` python
    >>> l, n = label([1, 0, 1, 0, 1])
    >>> l
    array([1, 0, 2, 0, 3], dtype=int32)
    >>> l = np.where(l != 2, l, 0)
    >>> l
    array([1, 0, 0, 0, 3], dtype=int32)
    >>> label(l)[0]
    array([1, 0, 0, 0, 2], dtype=int32)
    ```
    
    \> **Note**

  - \>  
    The structuring element used by <span class="title-ref">label</span> is assumed to be symmetric.

There is a large number of other approaches for segmentation, for instance, from an estimation of the borders of the objects that can be obtained by derivative filters. One such approach is watershed segmentation. The function <span class="title-ref">watershed\_ift</span> generates an array where each object is assigned a unique label, from an array that localizes the object borders, generated, for instance, by a gradient magnitude filter. It uses an array containing initial markers for the objects:

  - The <span class="title-ref">watershed\_ift</span> function applies a watershed from markers algorithm, using Image Foresting Transform, as described in \[5\].

<!-- end list -->

  - \- The inputs of this function are the array to which the transform is  
    applied, and an array of markers that designate the objects by a unique label, where any non-zero value is a marker. For instance:
    
    ``` python
    >>> input = np.array([[0, 0, 0, 0, 0, 0, 0],
    ...                   [0, 1, 1, 1, 1, 1, 0],
    ...                   [0, 1, 0, 0, 0, 1, 0],
    ...                   [0, 1, 0, 0, 0, 1, 0],
    ...                   [0, 1, 0, 0, 0, 1, 0],
    ...                   [0, 1, 1, 1, 1, 1, 0],
    ...                   [0, 0, 0, 0, 0, 0, 0]], np.uint8)
    >>> markers = np.array([[1, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 2, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0]], np.int8)
    >>> from scipy.ndimage import watershed_ift
    >>> watershed_ift(input, markers)
    array([[1, 1, 1, 1, 1, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
           [1, 2, 2, 2, 2, 2, 1],
           [1, 2, 2, 2, 2, 2, 1],
           [1, 2, 2, 2, 2, 2, 1],
           [1, 1, 2, 2, 2, 1, 1],
           [1, 1, 1, 1, 1, 1, 1]], dtype=int8)
    ```
    
    Here, two markers were used to designate an object (*marker* = 2) and the background (*marker* = 1). The order in which these are processed is arbitrary: moving the marker for the background to the lower-right corner of the array yields a different result:
    
    ``` python
    >>> markers = np.array([[0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 2, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 1]], np.int8)
    >>> watershed_ift(input, markers)
    array([[1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
           [1, 1, 2, 2, 2, 1, 1],
           [1, 1, 1, 1, 1, 1, 1],
           [1, 1, 1, 1, 1, 1, 1]], dtype=int8)
    ```
    
    The result is that the object (*marker* = 2) is smaller because the second marker was processed earlier. This may not be the desired effect if the first marker was supposed to designate a background object. Therefore, <span class="title-ref">watershed\_ift</span> treats markers with a negative value explicitly as background markers and processes them after the normal markers. For instance, replacing the first marker by a negative marker gives a result similar to the first example:
    
    ``` python
    >>> markers = np.array([[0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 2, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, 0],
    ...                     [0, 0, 0, 0, 0, 0, -1]], np.int8)
    >>> watershed_ift(input, markers)
    array([[-1, -1, -1, -1, -1, -1, -1],
       [-1, -1,  2,  2,  2, -1, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
           [-1,  2,  2,  2,  2,  2, -1],
           [-1, -1,  2,  2,  2, -1, -1],
           [-1, -1, -1, -1, -1, -1, -1]], dtype=int8)
    ```
    
    The connectivity of the objects is defined by a structuring element. If no structuring element is provided, one is generated by calling <span class="title-ref">generate\_binary\_structure</span> (see \[ndimage-binary-morphology\](\#ndimage-binary-morphology)) using a connectivity of one (which in 2D is a 4-connected structure.) For example, using an 8-connected structure with the last example yields a different object:
    
    ``` python
    >>> watershed_ift(input, markers,
    ...               structure = [[1,1,1], [1,1,1], [1,1,1]])
    array([[-1, -1, -1, -1, -1, -1, -1],
       [-1,  2,  2,  2,  2,  2, -1],
           [-1,  2,  2,  2,  2,  2, -1],
           [-1,  2,  2,  2,  2,  2, -1],
           [-1,  2,  2,  2,  2,  2, -1],
           [-1,  2,  2,  2,  2,  2, -1],
           [-1, -1, -1, -1, -1, -1, -1]], dtype=int8)
    ```
    
    \> **Note**

  - \>  
    The implementation of <span class="title-ref">watershed\_ift</span> limits the data types of the input to `numpy.uint8` and `numpy.uint16`.

## Object measurements

Given an array of labeled objects, the properties of the individual objects can be measured. The <span class="title-ref">find\_objects</span> function can be used to generate a list of slices that for each object, give the smallest sub-array that fully contains the object:

  - The <span class="title-ref">find\_objects</span> function finds all objects in a labeled array and returns a list of slices that correspond to the smallest regions in the array that contains the object.
    
    For instance:
    
    ``` python
    >>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
    >>> l, n = label(a)
    >>> from scipy.ndimage import find_objects
    >>> f = find_objects(l)
    >>> a[f[0]]
    array([[1, 1],
       [1, 1]])
    >>> a[f[1]]
    array([[0, 1, 0],
       [1, 1, 1],
       [0, 1, 0]])
    ```
    
    The function <span class="title-ref">find\_objects</span> returns slices for all objects, unless the *max\_label* parameter is larger then zero, in which case only the first *max\_label* objects are returned. If an index is missing in the *label* array, `None` is return instead of a slice. For example:
    
    ``` python
    >>> from scipy.ndimage import find_objects
    >>> find_objects([1, 0, 3, 4], max_label = 3)
    [(slice(0, 1, None),), None, (slice(2, 3, None),)]
    ```

The list of slices generated by <span class="title-ref">find\_objects</span> is useful to find the position and dimensions of the objects in the array, but can also be used to perform measurements on the individual objects. Say, we want to find the sum of the intensities of an object in image:

``` python
>>> image = np.arange(4 * 6).reshape(4, 6)
>>> mask = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
>>> labels = label(mask)[0]
>>> slices = find_objects(labels)
```

Then we can calculate the sum of the elements in the second object:

``` python
>>> np.where(labels[slices[1]] == 2, image[slices[1]], 0).sum()
80
```

That is, however, not particularly efficient and may also be more complicated for other types of measurements. Therefore, a few measurements functions are defined that accept the array of object labels and the index of the object to be measured. For instance, calculating the sum of the intensities can be done by:

``` python
>>> from scipy.ndimage import sum as ndi_sum
>>> ndi_sum(image, labels, 2)
80
```

For large arrays and small objects, it is more efficient to call the measurement functions after slicing the array:

``` python
>>> ndi_sum(image[slices[1]], labels[slices[1]], 2)
80
```

Alternatively, we can do the measurements for a number of labels with a single function call, returning a list of results. For instance, to measure the sum of the values of the background and the second object in our example, we give a list of labels:

``` python
>>> ndi_sum(image, labels, [0, 2])
array([178.0, 80.0])
```

The measurement functions described below all support the *index* parameter to indicate which object(s) should be measured. The default value of *index* is `None`. This indicates that all elements where the label is larger than zero should be treated as a single object and measured. Thus, in this case the *labels* array is treated as a mask defined by the elements that are larger than zero. If *index* is a number or a sequence of numbers it gives the labels of the objects that are measured. If *index* is a sequence, a list of the results is returned. Functions that return more than one result return their result as a tuple if *index* is a single number, or as a tuple of lists if *index* is a sequence.

  - The <span class="title-ref">sum</span> function calculates the sum of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">mean</span> function calculates the mean of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">variance</span> function calculates the variance of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">standard\_deviation</span> function calculates the standard deviation of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">minimum</span> function calculates the minimum of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">maximum</span> function calculates the maximum of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">minimum\_position</span> function calculates the position of the minimum of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">maximum\_position</span> function calculates the position of the maximum of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">extrema</span> function calculates the minimum, the maximum, and their positions, of the elements of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation. The result is a tuple giving the minimum, the maximum, the position of the minimum, and the position of the maximum. The result is the same as a tuple formed by the results of the functions *minimum*, *maximum*, *minimum\_position*, and *maximum\_position* that are described above.
  - The <span class="title-ref">center\_of\_mass</span> function calculates the center of mass of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation.
  - The <span class="title-ref">histogram</span> function calculates a histogram of the object with label(s) given by *index*, using the *labels* array for the object labels. If *index* is `None`, all elements with a non-zero label value are treated as a single object. If *label* is `None`, all elements of *input* are used in the calculation. Histograms are defined by their minimum (*min*), maximum (*max*), and the number of bins (*bins*). They are returned as 1-D arrays of type `numpy.int32`.

## Extending `scipy.ndimage` in C

A few functions in `scipy.ndimage` take a callback argument. This can be either a python function or a <span class="title-ref">scipy.LowLevelCallable</span> containing a pointer to a C function. Using a C function will generally be more efficient, since it avoids the overhead of calling a python function on many elements of an array. To use a C function, you must write a C extension that contains the callback function and a Python function that returns a <span class="title-ref">scipy.LowLevelCallable</span> containing a pointer to the callback.

An example of a function that supports callbacks is <span class="title-ref">geometric\_transform</span>, which accepts a callback function that defines a mapping from all output coordinates to corresponding coordinates in the input array. Consider the following python example, which uses <span class="title-ref">geometric\_transform</span> to implement a shift function.

``` python
from scipy import ndimage

def transform(output_coordinates, shift):
    input_coordinates = output_coordinates[0] - shift, output_coordinates[1] - shift
    return input_coordinates

im = np.arange(12).reshape(4, 3).astype(np.float64)
shift = 0.5
print(ndimage.geometric_transform(im, transform, extra_arguments=(shift,)))
```

We can also implement the callback function with the following C code:

``` c
/* example.c */

#include <Python.h>
#include <numpy/npy_common.h>

static int
_transform(npy_intp *output_coordinates, double *input_coordinates,
           int output_rank, int input_rank, void *user_data)
{
    npy_intp i;
    double shift = *(double *)user_data;

    for (i = 0; i < input_rank; i++) {
        input_coordinates[i] = output_coordinates[i] - shift;
    }
    return 1;
}

static char *transform_signature = "int (npy_intp *, double *, int, int, void *)";

static PyObject *
py_get_transform(PyObject *obj, PyObject *args)
{
    if (!PyArg_ParseTuple(args, "")) return NULL;
    return PyCapsule_New(_transform, transform_signature, NULL);
}

static PyMethodDef ExampleMethods[] = {
    {"get_transform", (PyCFunction)py_get_transform, METH_VARARGS, ""},
    {NULL, NULL, 0, NULL}
};

/* Initialize the module */
static struct PyModuleDef example = {
    PyModuleDef_HEAD_INIT,
    "example",
    NULL,
    -1,
    ExampleMethods,
    NULL,
    NULL,
    NULL,
    NULL
};

PyMODINIT_FUNC
PyInit_example(void)
{
    return PyModule_Create(&example);
}
```

More information on writing Python extension modules can be found [here](https://docs.python.org/3/extending/index.html). If the C code is in the file `example.c`, then it can be compiled after adding it to `meson.build` (see examples inside `meson.build` files) and follow what's there. After that is done, running the script:

``` python
import ctypes
import numpy as np
from scipy import ndimage, LowLevelCallable

from example import get_transform

shift = 0.5

user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)
callback = LowLevelCallable(get_transform(), ptr)
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
```

produces the same result as the original python script.

In the C version, `_transform` is the callback function and the parameters `output_coordinates` and `input_coordinates` play the same role as they do in the python version, while `output_rank` and `input_rank` provide the equivalents of `len(output_coordinates)` and `len(input_coordinates)`. The variable `shift` is passed through `user_data` instead of `extra_arguments`. Finally, the C callback function returns an integer status, which is one upon success and zero otherwise.

The function `py_transform` wraps the callback function in a :c`PyCapsule`. The main steps are:

  - Initialize a :c`PyCapsule`. The first argument is a pointer to the callback function.

  - The second argument is the function signature, which must match exactly the one expected by `~scipy.ndimage`.

  - Above, we used <span class="title-ref">scipy.LowLevelCallable</span> to specify `user_data` that we generated with <span class="title-ref">ctypes</span>.
    
    A different approach would be to supply the data in the capsule context, that can be set by <span class="title-ref">PyCapsule\_SetContext</span> and omit specifying `user_data` in <span class="title-ref">scipy.LowLevelCallable</span>. However, in this approach we would need to deal with allocation/freeing of the data --- freeing the data after the capsule has been destroyed can be done by specifying a non-NULL callback function in the third argument of <span class="title-ref">PyCapsule\_New</span>.

C callback functions for `~scipy.ndimage` all follow this scheme. The next section lists the `~scipy.ndimage` functions that accept a C callback function and gives the prototype of the function.

<div class="seealso">

The functions that support low-level callback arguments are:

<span class="title-ref">generic\_filter</span>, <span class="title-ref">generic\_filter1d</span>, <span class="title-ref">geometric\_transform</span>

</div>

Below, we show alternative ways to write the code, using [Numba](https://numba.pydata.org/), [Cython](https://cython.org/), [ctypes](https://docs.python.org/3/library/ctypes.html), or [cffi](https://cffi.readthedocs.io/) instead of writing wrapper code in C.

**Numba**

[Numba](https://numba.pydata.org/) provides a way to write low-level functions easily in Python. We can write the above using Numba as:

``` python
# example.py
import numpy as np
import ctypes
from scipy import ndimage, LowLevelCallable
from numba import cfunc, types, carray

@cfunc(types.intc(types.CPointer(types.intp),
                  types.CPointer(types.double),
                  types.intc,
                  types.intc,
                  types.voidptr))
def transform(output_coordinates_ptr, input_coordinates_ptr,
              output_rank, input_rank, user_data):
    input_coordinates = carray(input_coordinates_ptr, (input_rank,))
    output_coordinates = carray(output_coordinates_ptr, (output_rank,))
    shift = carray(user_data, (1,), types.double)[0]

    for i in range(input_rank):
        input_coordinates[i] = output_coordinates[i] - shift

    return 1

shift = 0.5

# Then call the function
user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)
callback = LowLevelCallable(transform.ctypes, ptr)

im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
```

**Cython**

Functionally the same code as above can be written in Cython with somewhat less boilerplate as follows:

``` cython
# example.pyx

from numpy cimport npy_intp as intp

cdef api int transform(intp *output_coordinates, double *input_coordinates,
                       int output_rank, int input_rank, void *user_data):
    cdef intp i
    cdef double shift = (<double *>user_data)[0]

    for i in range(input_rank):
        input_coordinates[i] = output_coordinates[i] - shift
    return 1
```

``` python
# script.py

import ctypes
import numpy as np
from scipy import ndimage, LowLevelCallable

import example

shift = 0.5

user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)
callback = LowLevelCallable.from_cython(example, "transform", ptr)
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
```

**cffi**

With [cffi](https://cffi.readthedocs.io/), you can interface with a C function residing in a shared library (DLL). First, we need to write the shared library, which we do in C --- this example is for Linux/OSX:

``` c
/*
  example.c
  Needs to be compiled with "gcc -std=c99 -shared -fPIC -o example.so example.c"
  or similar
 */

#include <stdint.h>

int
_transform(intptr_t *output_coordinates, double *input_coordinates,
           int output_rank, int input_rank, void *user_data)
{
    int i;
    double shift = *(double *)user_data;

    for (i = 0; i < input_rank; i++) {
        input_coordinates[i] = output_coordinates[i] - shift;
    }
    return 1;
}
```

The Python code calling the library is:

``` python
import os
import numpy as np
from scipy import ndimage, LowLevelCallable
import cffi

# Construct the FFI object, and copypaste the function declaration
ffi = cffi.FFI()
ffi.cdef("""
int _transform(intptr_t *output_coordinates, double *input_coordinates,
               int output_rank, int input_rank, void *user_data);
""")

# Open library
lib = ffi.dlopen(os.path.abspath("example.so"))

# Do the function call
user_data = ffi.new('double *', 0.5)
callback = LowLevelCallable(lib._transform, user_data)
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
```

You can find more information in the [cffi](https://cffi.readthedocs.io/) documentation.

**ctypes**

With *ctypes*, the C code and the compilation of the so/DLL is as for cffi above. The Python code is different:

``` python
# script.py

import os
import ctypes
import numpy as np
from scipy import ndimage, LowLevelCallable

lib = ctypes.CDLL(os.path.abspath('example.so'))

shift = 0.5

user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)

# Ctypes has no built-in intptr type, so override the signature
# instead of trying to get it via ctypes
callback = LowLevelCallable(lib._transform, ptr,
    "int _transform(intptr_t *, double *, int, int, void *)")

# Perform the call
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
```

You can find more information in the [ctypes](https://docs.python.org/3/library/ctypes.html) documentation.

## References

1.  M. Unser, "Splines: A Perfect Fit for Signal and Image Processing," IEEE Signal Processing Magazine, vol. 16, no. 6, pp. 22-38, November 1999.

2.  T. Briand and P. Monasse, "Theory and Practice of Image B-Spline Interpolation", Image Processing On Line, 8, pp. 99–141, 2018. <https://doi.org/10.5201/ipol.2018.221>

3.  G. Borgefors, "Distance transformations in arbitrary dimensions.", Computer Vision, Graphics, and Image Processing, 27:321-345, 1984.

4.  C. R. Maurer, Jr., R. Qi, and V. Raghavan, "A linear time algorithm for computing exact euclidean distance transforms of binary images in arbitrary dimensions." IEEE Trans. PAMI 25, 265-270, 2003.

5.  A. X. Falcão, J. Stolfi, and R. A. Lotufo. "The image foresting transform: Theory, algorithms, and applications." IEEE Trans. PAMI 26, 19-29. 2004.

---

optimize.md

---

# Optimization (`scipy.optimize`)

<div class="sectionauthor">

Travis E. Oliphant

</div>

<div class="sectionauthor">

Pauli Virtanen

</div>

<div class="sectionauthor">

Denis Laxalde

</div>

<div class="currentmodule">

scipy.optimize

</div>

<div class="contents">

</div>

The `scipy.optimize` package provides several commonly used optimization algorithms. A detailed listing is available: `scipy.optimize` (can also be found by `help(scipy.optimize)`).

## Local minimization of multivariate scalar functions (<span class="title-ref">minimize</span>)

The <span class="title-ref">minimize</span> function provides a common interface to unconstrained and constrained minimization algorithms for multivariate scalar functions in <span class="title-ref">scipy.optimize</span>. To demonstrate the minimization function, consider the problem of minimizing the Rosenbrock function of \(N\) variables:

\[f\left(\mathbf{x}\right)=\sum_{i=1}^{N-1}100\left(x_{i+1}-x_{i}^{2}\right)^{2}+\left(1-x_{i}\right)^{2}.\]

The minimum value of this function is 0 which is achieved when \(x_{i}=1.\)

Note that the Rosenbrock function and its derivatives are included in <span class="title-ref">scipy.optimize</span>. The implementations shown in the following sections provide examples of how to define an objective function as well as its jacobian and hessian functions. Objective functions in <span class="title-ref">scipy.optimize</span> expect a numpy array as their first parameter which is to be optimized and must return a float value. The exact calling signature must be `f(x, *args)` where `x` represents a numpy array and `args` a tuple of additional arguments supplied to the objective function.

### Unconstrained minimization

#### Nelder-Mead Simplex algorithm (`method='Nelder-Mead'`)

In the example below, the <span class="title-ref">minimize</span> routine is used with the *Nelder-Mead* simplex algorithm (selected through the `method` parameter):

> \>\>\> import numpy as np \>\>\> from scipy.optimize import minimize
> 
> \>\>\> def rosen(x): ... """The Rosenbrock function""" ... return sum(100.0\*(x\[1:\]-x\[:-1\]**2.0)**2.0 + (1-x\[:-1\])\*\*2.0)
> 
> \>\>\> x0 = np.array(\[1.3, 0.7, 0.8, 1.9, 1.2\]) \>\>\> res = minimize(rosen, x0, method='nelder-mead', ... options={'xatol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 339 Function evaluations: 571
> 
> \>\>\> print(res.x) \[1. 1. 1. 1. 1.\]

The simplex algorithm is probably the simplest way to minimize a fairly well-behaved function. It requires only function evaluations and is a good choice for simple minimization problems. However, because it does not use any gradient evaluations, it may take longer to find the minimum.

Another optimization algorithm that needs only function calls to find the minimum is *Powell*'s method available by setting `method='powell'` in <span class="title-ref">minimize</span>.

To demonstrate how to supply additional arguments to an objective function, let us minimize the Rosenbrock function with an additional scaling factor <span class="title-ref">a</span> and an offset \`b\`:

\[f\left(\mathbf{x}, a, b\right)=\sum_{i=1}^{N-1}a\left(x_{i+1}-x_{i}^{2}\right)^{2}+\left(1-x_{i}\right)^{2} + b.\]

Again using the <span class="title-ref">minimize</span> routine this can be solved by the following code block for the example parameters `a=0.5` and `b=1`.

> \>\>\> def rosen\_with\_args(x, a, b): ... """The Rosenbrock function with additional arguments""" ... return sum(a\*(x\[1:\]-x\[:-1\]**2.0)**2.0 + (1-x\[:-1\])\*\*2.0) + b
> 
> \>\>\> x0 = np.array(\[1.3, 0.7, 0.8, 1.9, 1.2\]) \>\>\> res = minimize(rosen\_with\_args, x0, method='nelder-mead', ... args=(0.5, 1.), options={'xatol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 1.000000 Iterations: 319 \# may vary Function evaluations: 525 \# may vary
> 
> \>\>\> print(res.x) \[1. 1. 1. 1. 0.99999999\]

As an alternative to using the `args` parameter of <span class="title-ref">minimize</span>, simply wrap the objective function in a new function that accepts only `x`. This approach is also useful when it is necessary to pass additional parameters to the objective function as keyword arguments.

> \>\>\> def rosen\_with\_args(x, a, *, b): \# b is a keyword-only argument ... return sum(a*(x\[1:\]-x\[:-1\]**2.0)**2.0 + (1-x\[:-1\])\*\*2.0) + b \>\>\> def wrapped\_rosen\_without\_args(x): ... return rosen\_with\_args(x, 0.5, b=1.) \# pass in <span class="title-ref">a</span> and <span class="title-ref">b</span> \>\>\> x0 = np.array(\[1.3, 0.7, 0.8, 1.9, 1.2\]) \>\>\> res = minimize(wrapped\_rosen\_without\_args, x0, method='nelder-mead', ... options={'xatol': 1e-8,}) \>\>\> print(res.x) \[1. 1. 1. 1. 0.99999999\]

Another alternative is to use :py\`functools.partial\`.

> \>\>\> from functools import partial \>\>\> partial\_rosen = partial(rosen\_with\_args, a=0.5, b=1.) \>\>\> res = minimize(partial\_rosen, x0, method='nelder-mead', ... options={'xatol': 1e-8,}) \>\>\> print(res.x) \[1. 1. 1. 1. 0.99999999\]

#### Broyden-Fletcher-Goldfarb-Shanno algorithm (`method='BFGS'`)

In order to converge more quickly to the solution, this routine uses the gradient of the objective function. If the gradient is not given by the user, then it is estimated using first-differences. The Broyden-Fletcher-Goldfarb-Shanno (BFGS) method typically requires fewer function calls than the simplex algorithm even when the gradient must be estimated.

To demonstrate this algorithm, the Rosenbrock function is again used. The gradient of the Rosenbrock function is the vector:

\[\begin{aligned}
\begin{eqnarray*} \frac{\partial f}{\partial x_{j}} & = & \sum_{i=1}^{N}200\left(x_{i}-x_{i-1}^{2}\right)\left(\delta_{i,j}-2x_{i-1}\delta_{i-1,j}\right)-2\left(1-x_{i-1}\right)\delta_{i-1,j}.\\  & = & 200\left(x_{j}-x_{j-1}^{2}\right)-400x_{j}\left(x_{j+1}-x_{j}^{2}\right)-2\left(1-x_{j}\right).\end{eqnarray*}
\end{aligned}\]

This expression is valid for the interior derivatives. Special cases are

\[\begin{aligned}
\begin{eqnarray*} \frac{\partial f}{\partial x_{0}} & = & -400x_{0}\left(x_{1}-x_{0}^{2}\right)-2\left(1-x_{0}\right),\\ \frac{\partial f}{\partial x_{N-1}} & = & 200\left(x_{N-1}-x_{N-2}^{2}\right).\end{eqnarray*}
\end{aligned}\]

A Python function which computes this gradient is constructed by the code-segment:

> \>\>\> def rosen\_der(x): ... xm = x\[1:-1\] ... xm\_m1 = x\[:-2\] ... xm\_p1 = x\[2:\] ... der = np.zeros\_like(x) ... der\[1:-1\] = 200\*(xm-xm\_m1\**2) - 400*(xm\_p1 - xm\**2)*xm - 2\*(1-xm) ... der\[0\] = -400\*x\[0\]*(x\[1\]-x\[0\]2) - 2*(1-x\[0\]) ... der\[-1\] = 200\*(x\[-1\]-x\[-2\]\*\*2) ... return der

This gradient information is specified in the <span class="title-ref">minimize</span> function through the `jac` parameter as illustrated below.

> \>\>\> res = minimize(rosen, x0, method='BFGS', jac=rosen\_der, ... options={'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 25 \# may vary Function evaluations: 30 Gradient evaluations: 30 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

**Avoiding Redundant Calculation**

It is common for the objective function and its gradient to share parts of the calculation. For instance, consider the following problem.

> \>\>\> def f(x): ... return -expensive(x\[0\])\**2 \>\>\> \>\>\> def df(x): ... return -2* expensive(x\[0\]) \* dexpensive(x\[0\]) \>\>\> \>\>\> def expensive(x): ... \# this function is computationally expensive\! ... expensive.count += 1 \# let's keep track of how many times it runs ... return np.sin(x) \>\>\> expensive.count = 0 \>\>\> \>\>\> def dexpensive(x): ... return np.cos(x) \>\>\> \>\>\> res = minimize(f, 0.5, jac=df) \>\>\> res.fun -0.9999999999999174 \>\>\> res.nfev, res.njev 6, 6 \>\>\> expensive.count 12

Here, `expensive` is called 12 times: six times in the objective function and six times from the gradient. One way of reducing redundant calculations is to create a single function that returns both the objective function and the gradient.

> \>\>\> def f\_and\_df(x): ... expensive\_value = expensive(x\[0\]) ... return (-expensive\_value\**2, \# objective function ... -2*expensive\_value\*dexpensive(x\[0\])) \# gradient \>\>\> \>\>\> expensive.count = 0 \# reset the counter \>\>\> res = minimize(f\_and\_df, 0.5, jac=True) \>\>\> res.fun -0.9999999999999174 \>\>\> expensive.count 6

When we call minimize, we specify `jac==True` to indicate that the provided function returns both the objective function and its gradient. While convenient, not all `scipy.optimize` functions support this feature, and moreover, it is only for sharing calculations between the function and its gradient, whereas in some problems we will want to share calculations with the Hessian (second derivative of the objective function) and constraints. A more general approach is to memoize the expensive parts of the calculation. In simple situations, this can be accomplished with the <span class="title-ref">functools.lru\_cache</span> wrapper.

> \>\>\> from functools import lru\_cache \>\>\> expensive.count = 0 \# reset the counter \>\>\> expensive = lru\_cache(expensive) \>\>\> res = minimize(f, 0.5, jac=df) \>\>\> res.fun -0.9999999999999174 \>\>\> expensive.count 6

#### Newton-Conjugate-Gradient algorithm (`method='Newton-CG'`)

Newton-Conjugate Gradient algorithm is a modified Newton's method and uses a conjugate gradient algorithm to (approximately) invert the local Hessian [\[NW\]](#NW). Newton's method is based on fitting the function locally to a quadratic form:

\[f\left(\mathbf{x}\right)\approx f\left(\mathbf{x}_{0}\right)+\nabla f\left(\mathbf{x}_{0}\right)\cdot\left(\mathbf{x}-\mathbf{x}_{0}\right)+\frac{1}{2}\left(\mathbf{x}-\mathbf{x}_{0}\right)^{T}\mathbf{H}\left(\mathbf{x}_{0}\right)\left(\mathbf{x}-\mathbf{x}_{0}\right).\]

where \(\mathbf{H}\left(\mathbf{x}_{0}\right)\) is a matrix of second-derivatives (the Hessian). If the Hessian is positive definite then the local minimum of this function can be found by setting the gradient of the quadratic form to zero, resulting in

\[\mathbf{x}_{\textrm{opt}}=\mathbf{x}_{0}-\mathbf{H}^{-1}\nabla f.\]

The inverse of the Hessian is evaluated using the conjugate-gradient method. An example of employing this method to minimizing the Rosenbrock function is given below. To take full advantage of the Newton-CG method, a function which computes the Hessian must be provided. The Hessian matrix itself does not need to be constructed, only a vector which is the product of the Hessian with an arbitrary vector needs to be available to the minimization routine. As a result, the user can provide either a function to compute the Hessian matrix, or a function to compute the product of the Hessian with an arbitrary vector.

**Full Hessian example**

The Hessian of the Rosenbrock function is

\[\begin{aligned}
\begin{eqnarray*} H_{ij}=\frac{\partial^{2}f}{\partial x_{i}\partial x_{j}} & = & 200\left(\delta_{i,j}-2x_{i-1}\delta_{i-1,j}\right)-400x_{i}\left(\delta_{i+1,j}-2x_{i}\delta_{i,j}\right)-400\delta_{i,j}\left(x_{i+1}-x_{i}^{2}\right)+2\delta_{i,j},\\  & = & \left(202+1200x_{i}^{2}-400x_{i+1}\right)\delta_{i,j}-400x_{i}\delta_{i+1,j}-400x_{i-1}\delta_{i-1,j},\end{eqnarray*}
\end{aligned}\]

if \(i,j\in\left[1,N-2\right]\) with \(i,j\in\left[0,N-1\right]\) defining the \(N\times N\) matrix. Other non-zero entries of the matrix are

\[\begin{aligned}
\begin{eqnarray*} \frac{\partial^{2}f}{\partial x_{0}^{2}} & = & 1200x_{0}^{2}-400x_{1}+2,\\ \frac{\partial^{2}f}{\partial x_{0}\partial x_{1}}=\frac{\partial^{2}f}{\partial x_{1}\partial x_{0}} & = & -400x_{0},\\ \frac{\partial^{2}f}{\partial x_{N-1}\partial x_{N-2}}=\frac{\partial^{2}f}{\partial x_{N-2}\partial x_{N-1}} & = & -400x_{N-2},\\ \frac{\partial^{2}f}{\partial x_{N-1}^{2}} & = & 200.\end{eqnarray*}
\end{aligned}\]

For example, the Hessian when \(N=5\) is

\[\begin{aligned}
\mathbf{H}=\begin{bmatrix} 1200x_{0}^{2}+2\mkern-2em\\&1200x_{1}^{2}+202\mkern-2em\\&&1200x_{1}^{2}+202\mkern-2em\\&&&1200x_{3}^{2}+202\mkern-1em\\&&&&200\end{bmatrix}-400\begin{bmatrix} x_1 & x_0 \\ x_0 & x_2 & x_1 \\ & x_1 & x_3 & x_2\\ & & x_2 & x_4 & x_3 \\ & & & x_3 & 0\end{bmatrix}.
\end{aligned}\]

The code which computes this Hessian along with the code to minimize the function using Newton-CG method is shown in the following example:

> \>\>\> def rosen\_hess(x): ... x = np.asarray(x) ... H = np.diag(-400\*x\[:-1\],1) - np.diag(400\*x\[:-1\],-1) ... diagonal = np.zeros\_like(x) ... diagonal\[0\] = 1200\*x\[0\]**2-400\*x\[1\]+2 ... diagonal\[-1\] = 200 ... diagonal\[1:-1\] = 202 + 1200\*x\[1:-1\]**2 - 400\*x\[2:\] ... H = H + np.diag(diagonal) ... return H
> 
> \>\>\> res = minimize(rosen, x0, method='Newton-CG', ... jac=rosen\_der, hess=rosen\_hess, ... options={'xtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 19 \# may vary Function evaluations: 22 Gradient evaluations: 19 Hessian evaluations: 19 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

**Hessian product example**

For larger minimization problems, storing the entire Hessian matrix can consume considerable time and memory. The Newton-CG algorithm only needs the product of the Hessian times an arbitrary vector. As a result, the user can supply code to compute this product rather than the full Hessian by giving a `hess` function which take the minimization vector as the first argument and the arbitrary vector as the second argument (along with extra arguments passed to the function to be minimized). If possible, using Newton-CG with the Hessian product option is probably the fastest way to minimize the function.

In this case, the product of the Rosenbrock Hessian with an arbitrary vector is not difficult to compute. If \(\mathbf{p}\) is the arbitrary vector, then \(\mathbf{H}\left(\mathbf{x}\right)\mathbf{p}\) has elements:

\[\begin{aligned}
\mathbf{H}\left(\mathbf{x}\right)\mathbf{p}=\begin{bmatrix} \left(1200x_{0}^{2}-400x_{1}+2\right)p_{0}-400x_{0}p_{1}\\ \vdots\\ -400x_{i-1}p_{i-1}+\left(202+1200x_{i}^{2}-400x_{i+1}\right)p_{i}-400x_{i}p_{i+1}\\ \vdots\\ -400x_{N-2}p_{N-2}+200p_{N-1}\end{bmatrix}.
\end{aligned}\]

Code which makes use of this Hessian product to minimize the Rosenbrock function using <span class="title-ref">minimize</span> follows:

> \>\>\> def rosen\_hess\_p(x, p): ... x = np.asarray(x) ... Hp = np.zeros\_like(x) ... Hp\[0\] = (1200\*x\[0\]**2 - 400\*x\[1\] + 2)\*p\[0\] - 400\*x\[0\]\*p\[1\] ... Hp\[1:-1\] = -400\*x\[:-2\]\*p\[:-2\]+(202+1200\*x\[1:-1\]**2-400\*x\[2:\])*p\[1:-1\] ... -400*x\[1:-1\]*p\[2:\] ... Hp\[-1\] = -400*x\[-2\]*p\[-2\] + 200*p\[-1\] ... return Hp
> 
> \>\>\> res = minimize(rosen, x0, method='Newton-CG', ... jac=rosen\_der, hessp=rosen\_hess\_p, ... options={'xtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 20 \# may vary Function evaluations: 23 Gradient evaluations: 20 Hessian evaluations: 44 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

According to [\[NW\]](#NW) p. 170 the `Newton-CG` algorithm can be inefficient when the Hessian is ill-conditioned because of the poor quality search directions provided by the method in those situations. The method `trust-ncg`, according to the authors, deals more effectively with this problematic situation and will be described next.

#### Trust-Region Newton-Conjugate-Gradient Algorithm (`method='trust-ncg'`)

The `Newton-CG` method is a line search method: it finds a direction of search minimizing a quadratic approximation of the function and then uses a line search algorithm to find the (nearly) optimal step size in that direction. An alternative approach is to, first, fix the step size limit \(\Delta\) and then find the optimal step \(\mathbf{p}\) inside the given trust-radius by solving the following quadratic subproblem:

\[\begin{aligned}
\begin{eqnarray*}
   \min_{\mathbf{p}} f\left(\mathbf{x}_{k}\right)+\nabla f\left(\mathbf{x}_{k}\right)\cdot\mathbf{p}+\frac{1}{2}\mathbf{p}^{T}\mathbf{H}\left(\mathbf{x}_{k}\right)\mathbf{p};&\\
   \text{subject to: } \|\mathbf{p}\|\le \Delta.&
 \end{eqnarray*}
\end{aligned}\]

The solution is then updated \(\mathbf{x}_{k+1} = \mathbf{x}_{k} + \mathbf{p}\) and the trust-radius \(\Delta\) is adjusted according to the degree of agreement of the quadratic model with the real function. This family of methods is known as trust-region methods. The `trust-ncg` algorithm is a trust-region method that uses a conjugate gradient algorithm to solve the trust-region subproblem [\[NW\]](#NW).

**Full Hessian example**

> \>\>\> res = minimize(rosen, x0, method='trust-ncg', ... jac=rosen\_der, hess=rosen\_hess, ... options={'gtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 20 \# may vary Function evaluations: 21 Gradient evaluations: 20 Hessian evaluations: 19 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

**Hessian product example**

> \>\>\> res = minimize(rosen, x0, method='trust-ncg', ... jac=rosen\_der, hessp=rosen\_hess\_p, ... options={'gtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 20 \# may vary Function evaluations: 21 Gradient evaluations: 20 Hessian evaluations: 0 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

#### Trust-Region Truncated Generalized Lanczos / Conjugate Gradient Algorithm (`method='trust-krylov'`)

Similar to the `trust-ncg` method, the `trust-krylov` method is a method suitable for large-scale problems as it uses the hessian only as linear operator by means of matrix-vector products. It solves the quadratic subproblem more accurately than the `trust-ncg` method.

\[\begin{aligned}
\begin{eqnarray*}
   \min_{\mathbf{p}} f\left(\mathbf{x}_{k}\right)+\nabla f\left(\mathbf{x}_{k}\right)\cdot\mathbf{p}+\frac{1}{2}\mathbf{p}^{T}\mathbf{H}\left(\mathbf{x}_{k}\right)\mathbf{p};&\\
   \text{subject to: } \|\mathbf{p}\|\le \Delta.&
 \end{eqnarray*}
\end{aligned}\]

This method wraps the [\[TRLIB\]](#TRLIB) implementation of the [\[GLTR\]](#GLTR) method solving exactly a trust-region subproblem restricted to a truncated Krylov subspace. For indefinite problems it is usually better to use this method as it reduces the number of nonlinear iterations at the expense of few more matrix-vector products per subproblem solve in comparison to the `trust-ncg` method.

**Full Hessian example**

> \>\>\> res = minimize(rosen, x0, method='trust-krylov', ... jac=rosen\_der, hess=rosen\_hess, ... options={'gtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 19 \# may vary Function evaluations: 20 Gradient evaluations: 20 Hessian evaluations: 18 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

**Hessian product example**

> \>\>\> res = minimize(rosen, x0, method='trust-krylov', ... jac=rosen\_der, hessp=rosen\_hess\_p, ... options={'gtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 19 \# may vary Function evaluations: 20 Gradient evaluations: 20 Hessian evaluations: 0 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

#### Trust-Region Nearly Exact Algorithm (`method='trust-exact'`)

All methods `Newton-CG`, `trust-ncg` and `trust-krylov` are suitable for dealing with large-scale problems (problems with thousands of variables). That is because the conjugate gradient algorithm approximately solve the trust-region subproblem (or invert the Hessian) by iterations without the explicit Hessian factorization. Since only the product of the Hessian with an arbitrary vector is needed, the algorithm is specially suited for dealing with sparse Hessians, allowing low storage requirements and significant time savings for those sparse problems.

For medium-size problems, for which the storage and factorization cost of the Hessian are not critical, it is possible to obtain a solution within fewer iteration by solving the trust-region subproblems almost exactly. To achieve that, a certain nonlinear equations is solved iteratively for each quadratic subproblem [\[CGT\]](#CGT). This solution requires usually 3 or 4 Cholesky factorizations of the Hessian matrix. As the result, the method converges in fewer number of iterations and takes fewer evaluations of the objective function than the other implemented trust-region methods. The Hessian product option is not supported by this algorithm. An example using the Rosenbrock function follows:

> \>\>\> res = minimize(rosen, x0, method='trust-exact', ... jac=rosen\_der, hess=rosen\_hess, ... options={'gtol': 1e-8, 'disp': True}) Optimization terminated successfully. Current function value: 0.000000 Iterations: 13 \# may vary Function evaluations: 14 Gradient evaluations: 13 Hessian evaluations: 14 \>\>\> res.x array(\[1., 1., 1., 1., 1.\])

### Constrained minimization

The <span class="title-ref">minimize</span> function provides several algorithms for constrained minimization, namely `'trust-constr'` , `'SLSQP'`, `'COBYLA'`, and `'COBYQA'`. They require the constraints to be defined using slightly different structures. The methods `'trust-constr'` and `'COBYQA'` require the constraints to be defined as a sequence of objects <span class="title-ref">LinearConstraint</span> and <span class="title-ref">NonlinearConstraint</span>. Methods `'SLSQP'` and `'COBYLA'`, on the other hand, require constraints to be defined as a sequence of dictionaries, with keys `type`, `fun` and `jac`.

As an example let us consider the constrained minimization of the Rosenbrock function:

\[\begin{aligned}
\begin{eqnarray*} \min_{x_0, x_1} & ~~100\left(x_{1}-x_{0}^{2}\right)^{2}+\left(1-x_{0}\right)^{2} &\\
                \text{subject to: } & x_0 + 2 x_1 \leq 1 & \\
                            & x_0^2 + x_1 \leq 1  & \\
                            & x_0^2 - x_1 \leq 1  & \\
                & 2 x_0 + x_1 = 1 & \\
                & 0 \leq  x_0  \leq 1 & \\
                & -0.5 \leq  x_1  \leq 2.0. & \end{eqnarray*}
\end{aligned}\]

This optimization problem has the unique solution \([x_0, x_1] = [0.4149,~ 0.1701]\), for which only the first and fourth constraints are active.

#### Trust-Region Constrained Algorithm (`method='trust-constr'`)

The trust-region constrained method deals with constrained minimization problems of the form:

\[\begin{aligned}
\begin{eqnarray*} \min_x & f(x) & \\
     \text{subject to: } & ~~~ c^l  \leq c(x) \leq c^u, &\\
      &  x^l  \leq x \leq x^u. & \end{eqnarray*}
\end{aligned}\]

When \(c^l_j = c^u_j\) the method reads the \(j\)-th constraint as an equality constraint and deals with it accordingly. Besides that, one-sided constraint can be specified by setting the upper or lower bound to `np.inf` with the appropriate sign.

The implementation is based on [\[EQSQP\]](#EQSQP) for equality-constraint problems and on [\[TRIP\]](#TRIP) for problems with inequality constraints. Both are trust-region type algorithms suitable for large-scale problems.

**Defining Bounds Constraints**

The bound constraints \(0 \leq  x_0  \leq 1\) and \(-0.5 \leq  x_1  \leq 2.0\) are defined using a <span class="title-ref">Bounds</span> object.

> \>\>\> from scipy.optimize import Bounds \>\>\> bounds = Bounds(\[0, -0.5\], \[1.0, 2.0\])

**Defining Linear Constraints**

The constraints \(x_0 + 2 x_1 \leq 1\) and \(2 x_0 + x_1 = 1\) can be written in the linear constraint standard format:

\[\begin{aligned}
\begin{equation*} \begin{bmatrix}-\infty \\1\end{bmatrix} \leq
 \begin{bmatrix} 1& 2 \\ 2& 1\end{bmatrix}
  \begin{bmatrix} x_0 \\x_1\end{bmatrix} \leq
   \begin{bmatrix} 1 \\ 1\end{bmatrix},\end{equation*}
\end{aligned}\]

and defined using a <span class="title-ref">LinearConstraint</span> object.

> \>\>\> from scipy.optimize import LinearConstraint \>\>\> linear\_constraint = LinearConstraint(\[\[1, 2\], \[2, 1\]\], \[-np.inf, 1\], \[1, 1\])

**Defining Nonlinear Constraints** The nonlinear constraint:

\[\begin{aligned}
\begin{equation*} c(x) =
\begin{bmatrix} x_0^2 + x_1 \\ x_0^2 - x_1\end{bmatrix}
 \leq
 \begin{bmatrix} 1 \\ 1\end{bmatrix}, \end{equation*}
\end{aligned}\]

with Jacobian matrix:

\[\begin{aligned}
\begin{equation*} J(x) =
\begin{bmatrix} 2x_0 & 1 \\ 2x_0 & -1\end{bmatrix},\end{equation*}
\end{aligned}\]

and linear combination of the Hessians:

\[\begin{aligned}
\begin{equation*} H(x, v) = \sum_{i=0}^1 v_i \nabla^2 c_i(x) =
v_0\begin{bmatrix} 2 & 0 \\ 0 & 0\end{bmatrix} +
v_1\begin{bmatrix} 2 & 0 \\ 0 & 0\end{bmatrix},
\end{equation*}
\end{aligned}\]

is defined using a <span class="title-ref">NonlinearConstraint</span> object.

> \>\>\> def cons\_f(x): ... return \[x\[0\]**2 + x\[1\], x\[0\]**2 - x\[1\]\] \>\>\> def cons\_J(x): ... return \[\[2\*x\[0\], 1\], \[2\*x\[0\], -1\]\] \>\>\> def cons\_H(x, v): ... return v\[0\]*np.array(\[\[2, 0\], \[0, 0\]\]) + v\[1\]*np.array(\[\[2, 0\], \[0, 0\]\]) \>\>\> from scipy.optimize import NonlinearConstraint \>\>\> nonlinear\_constraint = NonlinearConstraint(cons\_f, -np.inf, 1, jac=cons\_J, hess=cons\_H)

Alternatively, it is also possible to define the Hessian \(H(x, v)\) as a sparse matrix,

> \>\>\> from scipy.sparse import csc\_matrix \>\>\> def cons\_H\_sparse(x, v): ... return v\[0\]*csc\_matrix(\[\[2, 0\], \[0, 0\]\]) + v\[1\]*csc\_matrix(\[\[2, 0\], \[0, 0\]\]) \>\>\> nonlinear\_constraint = NonlinearConstraint(cons\_f, -np.inf, 1, ... jac=cons\_J, hess=cons\_H\_sparse)

or as a `~scipy.sparse.linalg.LinearOperator` object.

> \>\>\> from scipy.sparse.linalg import LinearOperator \>\>\> def cons\_H\_linear\_operator(x, v): ... def matvec(p): ... return np.array(\[p\[0\]*2*(v\[0\]+v\[1\]), 0\]) ... return LinearOperator((2, 2), matvec=matvec) \>\>\> nonlinear\_constraint = NonlinearConstraint(cons\_f, -np.inf, 1, ... jac=cons\_J, hess=cons\_H\_linear\_operator)

When the evaluation of the Hessian \(H(x, v)\) is difficult to implement or computationally infeasible, one may use <span class="title-ref">HessianUpdateStrategy</span>. Currently available strategies are <span class="title-ref">BFGS</span> and <span class="title-ref">SR1</span>.

> \>\>\> from scipy.optimize import BFGS \>\>\> nonlinear\_constraint = NonlinearConstraint(cons\_f, -np.inf, 1, jac=cons\_J, hess=BFGS())

Alternatively, the Hessian may be approximated using finite differences.

> \>\>\> nonlinear\_constraint = NonlinearConstraint(cons\_f, -np.inf, 1, jac=cons\_J, hess='2-point')

The Jacobian of the constraints can be approximated by finite differences as well. In this case, however, the Hessian cannot be computed with finite differences and needs to be provided by the user or defined using <span class="title-ref">HessianUpdateStrategy</span>.

> \>\>\> nonlinear\_constraint = NonlinearConstraint(cons\_f, -np.inf, 1, jac='2-point', hess=BFGS())

**Solving the Optimization Problem** The optimization problem is solved using:

> \>\>\> x0 = np.array(\[0.5, 0\]) \>\>\> res = minimize(rosen, x0, method='trust-constr', jac=rosen\_der, hess=rosen\_hess, ... constraints=\[linear\_constraint, nonlinear\_constraint\], ... options={'verbose': 1}, bounds=bounds) \# may vary <span class="title-ref">gtol</span> termination condition is satisfied. Number of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.016 s. \>\>\> print(res.x) \[0.41494531 0.17010937\]

When needed, the objective function Hessian can be defined using a `~scipy.sparse.linalg.LinearOperator` object,

> \>\>\> def rosen\_hess\_linop(x): ... def matvec(p): ... return rosen\_hess\_p(x, p) ... return LinearOperator((2, 2), matvec=matvec) \>\>\> res = minimize(rosen, x0, method='trust-constr', jac=rosen\_der, hess=rosen\_hess\_linop, ... constraints=\[linear\_constraint, nonlinear\_constraint\], ... options={'verbose': 1}, bounds=bounds) \# may vary <span class="title-ref">gtol</span> termination condition is satisfied. Number of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.018 s. \>\>\> print(res.x) \[0.41494531 0.17010937\]

or a Hessian-vector product through the parameter `hessp`.

> \>\>\> res = minimize(rosen, x0, method='trust-constr', jac=rosen\_der, hessp=rosen\_hess\_p, ... constraints=\[linear\_constraint, nonlinear\_constraint\], ... options={'verbose': 1}, bounds=bounds) \# may vary <span class="title-ref">gtol</span> termination condition is satisfied. Number of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.018 s. \>\>\> print(res.x) \[0.41494531 0.17010937\]

Alternatively, the first and second derivatives of the objective function can be approximated. For instance, the Hessian can be approximated with <span class="title-ref">SR1</span> quasi-Newton approximation and the gradient with finite differences.

> \>\>\> from scipy.optimize import SR1 \>\>\> res = minimize(rosen, x0, method='trust-constr', jac="2-point", hess=SR1(), ... constraints=\[linear\_constraint, nonlinear\_constraint\], ... options={'verbose': 1}, bounds=bounds) \# may vary <span class="title-ref">gtol</span> termination condition is satisfied. Number of iterations: 12, function evaluations: 24, CG iterations: 7, optimality: 4.48e-09, constraint violation: 0.00e+00, execution time: 0.016 s. \>\>\> print(res.x) \[0.41494531 0.17010937\]

#### Sequential Least SQuares Programming (SLSQP) Algorithm (`method='SLSQP'`)

The SLSQP method deals with constrained minimization problems of the form:

\[\begin{aligned}
\begin{eqnarray*} \min_x & f(x) \\
     \text{subject to: } & c_j(x) =  0  ,  &j \in \mathcal{E}\\
       & c_j(x) \geq 0  ,  &j \in \mathcal{I}\\
      &  \text{lb}_i  \leq x_i \leq \text{ub}_i , &i = 1,...,N. \end{eqnarray*}
\end{aligned}\]

Where \(\mathcal{E}\) or \(\mathcal{I}\) are sets of indices containing equality and inequality constraints.

Both linear and nonlinear constraints are defined as dictionaries with keys `type`, `fun` and `jac`.

> \>\>\> ineq\_cons = {'type': 'ineq', ... 'fun' : lambda x: np.array(\[1 - x\[0\] - 2\*x\[1\], ... 1 - x\[0\]**2 - x\[1\], ... 1 - x\[0\]**2 + x\[1\]\]), ... 'jac' : lambda x: np.array(\[\[-1.0, -2.0\], ... \[-2\*x\[0\], -1.0\], ... \[-2\*x\[0\], 1.0\]\])} \>\>\> eq\_cons = {'type': 'eq', ... 'fun' : lambda x: np.array(\[2\*x\[0\] + x\[1\] - 1\]), ... 'jac' : lambda x: np.array(\[2.0, 1.0\])}

And the optimization problem is solved with:

> \>\>\> x0 = np.array(\[0.5, 0\]) \>\>\> res = minimize(rosen, x0, method='SLSQP', jac=rosen\_der, ... constraints=\[eq\_cons, ineq\_cons\], options={'ftol': 1e-9, 'disp': True}, ... bounds=bounds) \# may vary Optimization terminated successfully. (Exit mode 0) Current function value: 0.342717574857755 Iterations: 5 Function evaluations: 6 Gradient evaluations: 5 \>\>\> print(res.x) \[0.41494475 0.1701105 \]

Most of the options available for the method `'trust-constr'` are not available for `'SLSQP'`.

### Local minimization solver comparison

Find a solver that meets your requirements using the table below. If there are multiple candidates, try several and see which ones best meet your needs (e.g. execution time, objective function value).

| Solver       | Bounds Constraints | Nonlinear Constraints | Uses Gradient | Uses Hessian | Utilizes Sparsity |
| ------------ | ------------------ | --------------------- | ------------- | ------------ | ----------------- |
| CG           |                    |                       | ✓             |              |                   |
| BFGS         |                    |                       | ✓             |              |                   |
| dogleg       |                    |                       | ✓             | ✓            |                   |
| trust-ncg    |                    |                       | ✓             | ✓            |                   |
| trust-krylov |                    |                       | ✓             | ✓            |                   |
| trust-exact  |                    |                       | ✓             | ✓            |                   |
| Newton-CG    |                    |                       | ✓             | ✓            | ✓                 |
| Nelder-Mead  | ✓                  |                       |               |              |                   |
| Powell       | ✓                  |                       |               |              |                   |
| L-BFGS-B     | ✓                  |                       | ✓             |              |                   |
| TNC          | ✓                  |                       | ✓             |              |                   |
| COBYLA       | ✓                  | ✓                     |               |              |                   |
| SLSQP        | ✓                  | ✓                     | ✓             |              |                   |
| trust-constr | ✓                  | ✓                     | ✓             | ✓            | ✓                 |

## Global optimization

Global optimization aims to find the global minimum of a function within given bounds, in the presence of potentially many local minima. Typically, global minimizers efficiently search the parameter space, while using a local minimizer (e.g., <span class="title-ref">minimize</span>) under the hood. SciPy contains a number of good global optimizers. Here, we'll use those on the same objective function, namely the (aptly named) `eggholder` function:

    >>> def eggholder(x):
    ...     return (-(x[1] + 47) * np.sin(np.sqrt(abs(x[0]/2 + (x[1]  + 47))))
    ...             -x[0] * np.sin(np.sqrt(abs(x[0] - (x[1]  + 47)))))
    
    >>> bounds = [(-512, 512), (-512, 512)]

This function looks like an egg carton:

    >>> import matplotlib.pyplot as plt
    >>> from mpl_toolkits.mplot3d import Axes3D
    
    >>> x = np.arange(-512, 513)
    >>> y = np.arange(-512, 513)
    >>> xgrid, ygrid = np.meshgrid(x, y)
    >>> xy = np.stack([xgrid, ygrid])
    
    >>> fig = plt.figure()
    >>> ax = fig.add_subplot(111, projection='3d')
    >>> ax.view_init(45, -45)
    >>> ax.plot_surface(xgrid, ygrid, eggholder(xy), cmap='terrain')
    >>> ax.set_xlabel('x')
    >>> ax.set_ylabel('y')
    >>> ax.set_zlabel('eggholder(x, y)')
    >>> plt.show()

<div class="plot" alt="&quot;A 3-D plot shown from a three-quarter view. The function is very noisy with dozens of valleys and peaks. There is no clear min or max discernible from this view and it&#39;s not possible to see all the local peaks and valleys from this view.&quot;" data-align="center" data-include-source="0">

tutorial/examples/optimize\_global\_2.py

</div>

We now use the global optimizers to obtain the minimum and the function value at the minimum. We'll store the results in a dictionary so we can compare different optimization results later.

> \>\>\> from scipy import optimize \>\>\> results = dict() \>\>\> results\['shgo'\] = optimize.shgo(eggholder, bounds) \>\>\> results\['shgo'\] fun: -935.3379515604197 \# may vary funl: array(\[-935.33795156\]) message: 'Optimization terminated successfully.' nfev: 42 nit: 2 nlfev: 37 nlhev: 0 nljev: 9 success: True x: array(\[439.48096952, 453.97740589\]) xl: array(\[\[439.48096952, 453.97740589\]\])
> 
> \>\>\> results\['DA'\] = optimize.dual\_annealing(eggholder, bounds) \>\>\> results\['DA'\] fun: -956.9182316237413 \# may vary message: \['Maximum number of iteration reached'\] nfev: 4091 nhev: 0 nit: 1000 njev: 0 x: array(\[482.35324114, 432.87892901\])

All optimizers return an `OptimizeResult`, which in addition to the solution contains information on the number of function evaluations, whether the optimization was successful, and more. For brevity, we won't show the full output of the other optimizers:

    >>> results['DE'] = optimize.differential_evolution(eggholder, bounds)

<span class="title-ref">shgo</span> has a second method, which returns all local minima rather than only what it thinks is the global minimum:

    >>> results['shgo_sobol'] = optimize.shgo(eggholder, bounds, n=200, iters=5,
    ...                                       sampling_method='sobol')

We'll now plot all found minima on a heatmap of the function:

    >>> fig = plt.figure()
    >>> ax = fig.add_subplot(111)
    >>> im = ax.imshow(eggholder(xy), interpolation='bilinear', origin='lower',
    ...                cmap='gray')
    >>> ax.set_xlabel('x')
    >>> ax.set_ylabel('y')
    >>>
    >>> def plot_point(res, marker='o', color=None):
    ...     ax.plot(512+res.x[0], 512+res.x[1], marker=marker, color=color, ms=10)
    
    >>> plot_point(results['DE'], color='c')  # differential_evolution - cyan
    >>> plot_point(results['DA'], color='w')  # dual_annealing.        - white
    
    >>> # SHGO produces multiple minima, plot them all (with a smaller marker size)
    >>> plot_point(results['shgo'], color='r', marker='+')
    >>> plot_point(results['shgo_sobol'], color='r', marker='x')
    >>> for i in range(results['shgo_sobol'].xl.shape[0]):
    ...     ax.plot(512 + results['shgo_sobol'].xl[i, 0],
    ...             512 + results['shgo_sobol'].xl[i, 1],
    ...             'ro', ms=2)
    
    >>> ax.set_xlim([-4, 514*2])
    >>> ax.set_ylim([-4, 514*2])
    >>> plt.show()

<div class="plot" data-align="center" alt="&quot;This X-Y plot is a heatmap with the Z value denoted with the lowest points as black and the highest values as white. The image resembles a chess board rotated 45 degrees but heavily smoothed. A red dot is located at many of the minima on the grid resulting from the SHGO optimizer. SHGO shows the global minima as a red X in the top right. A local minima found with dual annealing is a white circle marker in the top left. A different local minima found with basinhopping is a yellow marker in the top center. The code is plotting the differential evolution result as a cyan circle, but it is not visible on the plot. At a glance it&#39;s not clear which of these valleys is the true global minima.&quot;" data-include-source="0">

tutorial/examples/optimize\_global\_1.py

</div>

### Comparison of Global Optimizers

Find a solver that meets your requirements using the table below. If there are multiple candidates, try several and see which ones best meet your needs (e.g. execution time, objective function value).

| Solver                  | Bounds Constraints | Nonlinear Constraints | Uses Gradient | Uses Hessian |
| ----------------------- | ------------------ | --------------------- | ------------- | ------------ |
| basinhopping            |                    |                       | (✓)           | (✓)          |
| direct                  | ✓                  |                       |               |              |
| dual\_annealing         | ✓                  |                       | (✓)           | (✓)          |
| differential\_evolution | ✓                  | ✓                     |               |              |
| shgo                    | ✓                  | ✓                     | (✓)           | (✓)          |

(✓) = Depending on the chosen local minimizer

## Least-squares minimization (<span class="title-ref">least\_squares</span>)

SciPy is capable of solving robustified bound-constrained nonlinear least-squares problems:

\[\begin{aligned}
\begin{align}
&\min_\mathbf{x} \frac{1}{2} \sum_{i = 1}^m \rho\left(f_i(\mathbf{x})^2\right) \\
&\text{subject to }\mathbf{lb} \leq \mathbf{x} \leq \mathbf{ub}
\end{align}
\end{aligned}\]

Here \(f_i(\mathbf{x})\) are smooth functions from \(\mathbb{R}^n\) to \(\mathbb{R}\), we refer to them as residuals. The purpose of a scalar-valued function \(\rho(\cdot)\) is to reduce the influence of outlier residuals and contribute to robustness of the solution, we refer to it as a loss function. A linear loss function gives a standard least-squares problem. Additionally, constraints in a form of lower and upper bounds on some of \(x_j\) are allowed.

All methods specific to least-squares minimization utilize a \(m \times n\) matrix of partial derivatives called Jacobian and defined as \(J_{ij} = \partial f_i / \partial x_j\). It is highly recommended to compute this matrix analytically and pass it to <span class="title-ref">least\_squares</span>, otherwise, it will be estimated by finite differences, which takes a lot of additional time and can be very inaccurate in hard cases.

Function <span class="title-ref">least\_squares</span> can be used for fitting a function \(\varphi(t; \mathbf{x})\) to empirical data \(\{(t_i, y_i), i = 0, \ldots, m-1\}\). To do this, one should simply precompute residuals as \(f_i(\mathbf{x}) = w_i (\varphi(t_i; \mathbf{x}) - y_i)\), where \(w_i\) are weights assigned to each observation.

### Example of solving a fitting problem

Here we consider an enzymatic reaction\[1\]. There are 11 residuals defined as

\[f_i(x) = \frac{x_0 (u_i^2 + u_i x_1)}{u_i^2 + u_i x_2 + x_3} - y_i, \quad i = 0, \ldots, 10,\]

where \(y_i\) are measurement values and \(u_i\) are values of the independent variable. The unknown vector of parameters is \(\mathbf{x} = (x_0, x_1, x_2, x_3)^T\). As was said previously, it is recommended to compute Jacobian matrix in a closed form:

\[\begin{aligned}
\begin{align}
&J_{i0} = \frac{\partial f_i}{\partial x_0} = \frac{u_i^2 + u_i x_1}{u_i^2 + u_i x_2 + x_3} \\
&J_{i1} = \frac{\partial f_i}{\partial x_1} = \frac{u_i x_0}{u_i^2 + u_i x_2 + x_3} \\
&J_{i2} = \frac{\partial f_i}{\partial x_2} = -\frac{x_0 (u_i^2 + u_i x_1) u_i}{(u_i^2 + u_i x_2 + x_3)^2} \\
&J_{i3} = \frac{\partial f_i}{\partial x_3} = -\frac{x_0 (u_i^2 + u_i x_1)}{(u_i^2 + u_i x_2 + x_3)^2}
\end{align}
\end{aligned}\]

We are going to use the "hard" starting point defined in\[2\]. To find a physically meaningful solution, avoid potential division by zero and assure convergence to the global minimum we impose constraints \(0 \leq x_j \leq 100, j = 0, 1, 2, 3\).

The code below implements least-squares estimation of \(\mathbf{x}\) and finally plots the original data and the fitted model function:

<div class="plot" alt="&quot;This code plots an X-Y time-series. The series starts in the lower left at (0, 0) and rapidly trends up to the maximum of 0.2 then flattens out. The fitted model is shown as a smooth orange trace and is well fit to the data.&quot;">

\>\>\> from scipy.optimize import least\_squares

\>\>\> def model(x, u): ... return x\[0\] \* (u \*\* 2 + x\[1\] \* u) / (u \*\* 2 + x\[2\] \* u + x\[3\])

\>\>\> def fun(x, u, y): ... return model(x, u) - y

\>\>\> def jac(x, u, y): ... J = np.empty((u.size, x.size)) ... den = u \*\* 2 + x\[2\] \* u + x\[3\] ... num = u \*\* 2 + x\[1\] \* u ... J\[:, 0\] = num / den ... J\[:, 1\] = x\[0\] \* u / den ... J\[:, 2\] = -x\[0\] \* num \* u / den \*\* 2 ... J\[:, 3\] = -x\[0\] \* num / den \*\* 2 ... return J

\>\>\> u = np.array(\[4.0, 2.0, 1.0, 5.0e-1, 2.5e-1, 1.67e-1, 1.25e-1, 1.0e-1, ... 8.33e-2, 7.14e-2, 6.25e-2\]) \>\>\> y = np.array(\[1.957e-1, 1.947e-1, 1.735e-1, 1.6e-1, 8.44e-2, 6.27e-2, ... 4.56e-2, 3.42e-2, 3.23e-2, 2.35e-2, 2.46e-2\]) \>\>\> x0 = np.array(\[2.5, 3.9, 4.15, 3.9\]) \>\>\> res = least\_squares(fun, x0, jac=jac, bounds=(0, 100), args=(u, y), verbose=1) \# may vary <span class="title-ref">ftol</span> termination condition is satisfied. Function evaluations 130, initial cost 4.4383e+00, final cost 1.5375e-04, first-order optimality 4.92e-08. \>\>\> res.x array(\[ 0.19280596, 0.19130423, 0.12306063, 0.13607247\])

\>\>\> import matplotlib.pyplot as plt \>\>\> u\_test = np.linspace(0, 5) \>\>\> y\_test = model(res.x, u\_test) \>\>\> plt.plot(u, y, 'o', markersize=4, label='data') \>\>\> plt.plot(u\_test, y\_test, label='fitted model') \>\>\> plt.xlabel("u") \>\>\> plt.ylabel("y") \>\>\> plt.legend(loc='lower right') \>\>\> plt.show()

</div>

### Further examples

Three interactive examples below illustrate usage of <span class="title-ref">least\_squares</span> in greater detail.

1.  [Large-scale bundle adjustment in scipy](https://scipy-cookbook.readthedocs.io/items/bundle_adjustment.html) demonstrates large-scale capabilities of <span class="title-ref">least\_squares</span> and how to efficiently compute finite difference approximation of sparse Jacobian.
2.  [Robust nonlinear regression in scipy](https://scipy-cookbook.readthedocs.io/items/robust_regression.html) shows how to handle outliers with a robust loss function in a nonlinear regression.
3.  [Solving a discrete boundary-value problem in scipy](https://scipy-cookbook.readthedocs.io/items/discrete_bvp.html) examines how to solve a large system of equations and use bounds to achieve desired properties of the solution.

For the details about mathematical algorithms behind the implementation refer to documentation of <span class="title-ref">least\_squares</span>.

## Univariate function minimizers (<span class="title-ref">minimize\_scalar</span>)

Often only the minimum of an univariate function (i.e., a function that takes a scalar as input) is needed. In these circumstances, other optimization techniques have been developed that can work faster. These are accessible from the <span class="title-ref">minimize\_scalar</span> function, which proposes several algorithms.

### Unconstrained minimization (`method='brent'`)

There are, actually, two methods that can be used to minimize an univariate function: <span class="title-ref">brent</span> and <span class="title-ref">golden</span>, but <span class="title-ref">golden</span> is included only for academic purposes and should rarely be used. These can be respectively selected through the <span class="title-ref">method</span> parameter in <span class="title-ref">minimize\_scalar</span>. The <span class="title-ref">brent</span> method uses Brent's algorithm for locating a minimum. Optimally, a bracket (the <span class="title-ref">bracket</span> parameter) should be given which contains the minimum desired. A bracket is a triple \(\left( a, b, c \right)\) such that \(f
\left( a \right) > f \left( b \right) < f \left( c \right)\) and \(a <
b < c\) . If this is not given, then alternatively two starting points can be chosen and a bracket will be found from these points using a simple marching algorithm. If these two starting points are not provided, <span class="title-ref">0</span> and <span class="title-ref">1</span> will be used (this may not be the right choice for your function and result in an unexpected minimum being returned).

Here is an example:

> \>\>\> from scipy.optimize import minimize\_scalar \>\>\> f = lambda x: (x - 2) \* (x + 1)\*\*2 \>\>\> res = minimize\_scalar(f, method='brent') \>\>\> print(res.x) 1.0

### Bounded minimization (`method='bounded'`)

Very often, there are constraints that can be placed on the solution space before minimization occurs. The <span class="title-ref">bounded</span> method in <span class="title-ref">minimize\_scalar</span> is an example of a constrained minimization procedure that provides a rudimentary interval constraint for scalar functions. The interval constraint allows the minimization to occur only between two fixed endpoints, specified using the mandatory <span class="title-ref">bounds</span> parameter.

For example, to find the minimum of \(J_{1}\left( x \right)\) near \(x=5\) , <span class="title-ref">minimize\_scalar</span> can be called using the interval \(\left[ 4, 7 \right]\) as a constraint. The result is \(x_{\textrm{min}}=5.3314\) :

> \>\>\> from scipy.special import j1 \>\>\> res = minimize\_scalar(j1, bounds=(4, 7), method='bounded') \>\>\> res.x 5.33144184241

## Custom minimizers

Sometimes, it may be useful to use a custom method as a (multivariate or univariate) minimizer, for example, when using some library wrappers of <span class="title-ref">minimize</span> (e.g., <span class="title-ref">basinhopping</span>).

We can achieve that by, instead of passing a method name, passing a callable (either a function or an object implementing a <span class="title-ref">\_\_call\_\_</span> method) as the <span class="title-ref">method</span> parameter.

Let us consider an (admittedly rather virtual) need to use a trivial custom multivariate minimization method that will just search the neighborhood in each dimension independently with a fixed step size:

    >>> from scipy.optimize import OptimizeResult
    >>> def custmin(fun, x0, args=(), maxfev=None, stepsize=0.1,
    ...         maxiter=100, callback=None, **options):
    ...     bestx = x0
    ...     besty = fun(x0)
    ...     funcalls = 1
    ...     niter = 0
    ...     improved = True
    ...     stop = False
    ...
    ...     while improved and not stop and niter < maxiter:
    ...         improved = False
    ...         niter += 1
    ...         for dim in range(np.size(x0)):
    ...             for s in [bestx[dim] - stepsize, bestx[dim] + stepsize]:
    ...                 testx = np.copy(bestx)
    ...                 testx[dim] = s
    ...                 testy = fun(testx, *args)
    ...                 funcalls += 1
    ...                 if testy < besty:
    ...                     besty = testy
    ...                     bestx = testx
    ...                     improved = True
    ...             if callback is not None:
    ...                 callback(bestx)
    ...             if maxfev is not None and funcalls >= maxfev:
    ...                 stop = True
    ...                 break
    ...
    ...     return OptimizeResult(fun=besty, x=bestx, nit=niter,
    ...                           nfev=funcalls, success=(niter > 1))
    >>> x0 = [1.35, 0.9, 0.8, 1.1, 1.2]
    >>> res = minimize(rosen, x0, method=custmin, options=dict(stepsize=0.05))
    >>> res.x
    array([1., 1., 1., 1., 1.])

This will work just as well in case of univariate optimization:

    >>> def custmin(fun, bracket, args=(), maxfev=None, stepsize=0.1,
    ...         maxiter=100, callback=None, **options):
    ...     bestx = (bracket[1] + bracket[0]) / 2.0
    ...     besty = fun(bestx)
    ...     funcalls = 1
    ...     niter = 0
    ...     improved = True
    ...     stop = False
    ...
    ...     while improved and not stop and niter < maxiter:
    ...         improved = False
    ...         niter += 1
    ...         for testx in [bestx - stepsize, bestx + stepsize]:
    ...             testy = fun(testx, *args)
    ...             funcalls += 1
    ...             if testy < besty:
    ...                 besty = testy
    ...                 bestx = testx
    ...                 improved = True
    ...         if callback is not None:
    ...             callback(bestx)
    ...         if maxfev is not None and funcalls >= maxfev:
    ...             stop = True
    ...             break
    ...
    ...     return OptimizeResult(fun=besty, x=bestx, nit=niter,
    ...                           nfev=funcalls, success=(niter > 1))
    >>> def f(x):
    ...    return (x - 2)**2 * (x + 2)**2
    >>> res = minimize_scalar(f, bracket=(-3.5, 0), method=custmin,
    ...                       options=dict(stepsize = 0.05))
    >>> res.x
    -2.0

## Root finding

### Scalar functions

If one has a single-variable equation, there are multiple different root finding algorithms that can be tried. Most of these algorithms require the endpoints of an interval in which a root is expected (because the function changes signs). In general, `brentq` is the best choice, but the other methods may be useful in certain circumstances or for academic purposes. When a bracket is not available, but one or more derivatives are available, then `newton` (or `halley`, `secant`) may be applicable. This is especially the case if the function is defined on a subset of the complex plane, and the bracketing methods cannot be used.

### Fixed-point solving

A problem closely related to finding the zeros of a function is the problem of finding a fixed point of a function. A fixed point of a function is the point at which evaluation of the function returns the point: \(g\left(x\right)=x.\) Clearly, the fixed point of \(g\) is the root of \(f\left(x\right)=g\left(x\right)-x.\) Equivalently, the root of \(f\) is the fixed point of \(g\left(x\right)=f\left(x\right)+x.\) The routine `fixed_point` provides a simple iterative method using Aitkens sequence acceleration to estimate the fixed point of \(g\) given a starting point.

### Sets of equations

Finding a root of a set of non-linear equations can be achieved using the <span class="title-ref">root</span> function. Several methods are available, amongst which `hybr` (the default) and `lm`, which, respectively, use the hybrid method of Powell and the Levenberg-Marquardt method from MINPACK.

The following example considers the single-variable transcendental equation

\[x+2\cos\left(x\right)=0,\]

a root of which can be found as follows:

    >>> import numpy as np
    >>> from scipy.optimize import root
    >>> def func(x):
    ...     return x + 2 * np.cos(x)
    >>> sol = root(func, 0.3)
    >>> sol.x
    array([-1.02986653])
    >>> sol.fun
    array([ -6.66133815e-16])

Consider now a set of non-linear equations

\[\begin{aligned}
\begin{eqnarray*}
x_{0}\cos\left(x_{1}\right) & = & 4,\\
x_{0}x_{1}-x_{1} & = & 5.
\end{eqnarray*}
\end{aligned}\]

We define the objective function so that it also returns the Jacobian and indicate this by setting the `jac` parameter to `True`. Also, the Levenberg-Marquardt solver is used here.

    >>> def func2(x):
    ...     f = [x[0] * np.cos(x[1]) - 4,
    ...          x[1]*x[0] - x[1] - 5]
    ...     df = np.array([[np.cos(x[1]), -x[0] * np.sin(x[1])],
    ...                    [x[1], x[0] - 1]])
    ...     return f, df
    >>> sol = root(func2, [1, 1], jac=True, method='lm')
    >>> sol.x
    array([ 6.50409711,  0.90841421])

### Root finding for large problems

Methods `hybr` and `lm` in <span class="title-ref">root</span> cannot deal with a very large number of variables (*N*), as they need to calculate and invert a dense *N x N* Jacobian matrix on every Newton step. This becomes rather inefficient when *N* grows.

Consider, for instance, the following problem: we need to solve the following integrodifferential equation on the square \([0,1]\times[0,1]\):

\[(\partial_x^2 + \partial_y^2) P + 5 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2 = 0\]

with the boundary condition \(P(x,1) = 1\) on the upper edge and \(P=0\) elsewhere on the boundary of the square. This can be done by approximating the continuous function *P* by its values on a grid, \(P_{n,m}\approx{}P(n h, m h)\), with a small grid spacing *h*. The derivatives and integrals can then be approximated; for instance \(\partial_x^2 P(x,y)\approx{}(P(x+h,y) - 2 P(x,y) +
P(x-h,y))/h^2\). The problem is then equivalent to finding the root of some function `residual(P)`, where `P` is a vector of length \(N_x N_y\).

Now, because \(N_x N_y\) can be large, methods `hybr` or `lm` in <span class="title-ref">root</span> will take a long time to solve this problem. The solution can, however, be found using one of the large-scale solvers, for example `krylov`, `broyden2`, or `anderson`. These use what is known as the inexact Newton method, which instead of computing the Jacobian matrix exactly, forms an approximation for it.

The problem we have can now be solved as follows:

<div class="plot" alt="&quot;This code generates a 2-D heatmap with Z values from 0 to 1. The graph resembles a smooth, dark blue-green, U shape, with an open yellow top. The right, bottom, and left edges have a value near zero and the top has a value close to 1. The center of the solution space has a value close to 0.8.&quot;">

import numpy as np from scipy.optimize import root from numpy import cosh, zeros\_like, mgrid, zeros

\# parameters nx, ny = 75, 75 hx, hy = 1./(nx-1), 1./(ny-1)

P\_left, P\_right = 0, 0 P\_top, P\_bottom = 1, 0

  - def residual(P):  
    d2x = zeros\_like(P) d2y = zeros\_like(P)
    
    d2x\[1:-1\] = (P\[2:\] - 2\*P\[1:-1\] + P\[:-2\]) / hx/hx d2x\[0\] = (P\[1\] - 2\*P\[0\] + P\_left)/hx/hx d2x\[-1\] = (P\_right - 2\*P\[-1\] + P\[-2\])/hx/hx
    
    d2y\[:,1:-1\] = (P\[:,2:\] - 2\*P\[:,1:-1\] + P\[:,:-2\])/hy/hy d2y\[:,0\] = (P\[:,1\] - 2\*P\[:,0\] + P\_bottom)/hy/hy d2y\[:,-1\] = (P\_top - 2\*P\[:,-1\] + P\[:,-2\])/hy/hy
    
    return d2x + d2y + 5\*cosh(P).mean()\*\*2

\# solve guess = zeros((nx, ny), float) sol = root(residual, guess, method='krylov', options={'disp': True}) \#sol = root(residual, guess, method='broyden2', options={'disp': True, 'max\_rank': 50}) \#sol = root(residual, guess, method='anderson', options={'disp': True, 'M': 10}) print('Residual: %g' % abs(residual(sol.x)).max())

\# visualize import matplotlib.pyplot as plt x, y = mgrid\[0:1:(nx\*1j), 0:1:(ny\*1j)\] plt.pcolormesh(x, y, sol.x, shading='gouraud') plt.colorbar() plt.show()

</div>

### Still too slow? Preconditioning.

When looking for the zero of the functions \(f_i({\bf x}) = 0\), *i = 1, 2, ..., N*, the `krylov` solver spends most of the time inverting the Jacobian matrix,

\[J_{ij} = \frac{\partial f_i}{\partial x_j} .\]

If you have an approximation for the inverse matrix \(M\approx{}J^{-1}\), you can use it for *preconditioning* the linear-inversion problem. The idea is that instead of solving \(J{\bf s}={\bf y}\) one solves \(MJ{\bf s}=M{\bf y}\): since matrix \(MJ\) is "closer" to the identity matrix than \(J\) is, the equation should be easier for the Krylov method to deal with.

The matrix *M* can be passed to <span class="title-ref">root</span> with method `krylov` as an option `options['jac_options']['inner_M']`. It can be a (sparse) matrix or a `scipy.sparse.linalg.LinearOperator` instance.

For the problem in the previous section, we note that the function to solve consists of two parts: the first one is the application of the Laplace operator, \([\partial_x^2 + \partial_y^2] P\), and the second is the integral. We can actually easily compute the Jacobian corresponding to the Laplace operator part: we know that in 1-D

\[\begin{aligned}
\partial_x^2 \approx \frac{1}{h_x^2} \begin{pmatrix}
-2 & 1 & 0 & 0 \cdots \\
1 & -2 & 1 & 0 \cdots \\
0 & 1 & -2 & 1 \cdots \\
\ldots
\end{pmatrix}
= h_x^{-2} L
\end{aligned}\]

so that the whole 2-D operator is represented by

\[J_1 = \partial_x^2 + \partial_y^2
\simeq
h_x^{-2} L \otimes I + h_y^{-2} I \otimes L\]

The matrix \(J_2\) of the Jacobian corresponding to the integral is more difficult to calculate, and since *all* of it entries are nonzero, it will be difficult to invert. \(J_1\) on the other hand is a relatively simple matrix, and can be inverted by `scipy.sparse.linalg.splu` (or the inverse can be approximated by `scipy.sparse.linalg.spilu`). So we are content to take \(M\approx{}J_1^{-1}\) and hope for the best.

In the example below, we use the preconditioner \(M=J_1^{-1}\).

<div class="literalinclude">

examples/newton\_krylov\_preconditioning.py

</div>

Resulting run, first without preconditioning:

    0:  |F(x)| = 803.614; step 1; tol 0.000257947
    1:  |F(x)| = 345.912; step 1; tol 0.166755
    2:  |F(x)| = 139.159; step 1; tol 0.145657
    3:  |F(x)| = 27.3682; step 1; tol 0.0348109
    4:  |F(x)| = 1.03303; step 1; tol 0.00128227
    5:  |F(x)| = 0.0406634; step 1; tol 0.00139451
    6:  |F(x)| = 0.00344341; step 1; tol 0.00645373
    7:  |F(x)| = 0.000153671; step 1; tol 0.00179246
    8:  |F(x)| = 6.7424e-06; step 1; tol 0.00173256
    Residual 3.57078908664e-07
    Evaluations 317

and then with preconditioning:

    0:  |F(x)| = 136.993; step 1; tol 7.49599e-06
    1:  |F(x)| = 4.80983; step 1; tol 0.00110945
    2:  |F(x)| = 0.195942; step 1; tol 0.00149362
    3:  |F(x)| = 0.000563597; step 1; tol 7.44604e-06
    4:  |F(x)| = 1.00698e-09; step 1; tol 2.87308e-12
    Residual 9.29603061195e-11
    Evaluations 77

Using a preconditioner reduced the number of evaluations of the `residual` function by a factor of *4*. For problems where the residual is expensive to compute, good preconditioning can be crucial --- it can even decide whether the problem is solvable in practice or not.

Preconditioning is an art, science, and industry. Here, we were lucky in making a simple choice that worked reasonably well, but there is a lot more depth to this topic than is shown here.

## Linear programming (<span class="title-ref">linprog</span>)

The function <span class="title-ref">linprog</span> can minimize a linear objective function subject to linear equality and inequality constraints. This kind of problem is well known as linear programming. Linear programming solves problems of the following form:

\[\begin{aligned}
\min_x \ & c^T x \\
\mbox{such that} \ & A_{ub} x \leq b_{ub},\\
& A_{eq} x = b_{eq},\\
& l \leq x \leq u ,
\end{aligned}\]

where \(x\) is a vector of decision variables; \(c\), \(b_{ub}\), \(b_{eq}\), \(l\), and \(u\) are vectors; and \(A_{ub}\) and \(A_{eq}\) are matrices.

In this tutorial, we will try to solve a typical linear programming problem using <span class="title-ref">linprog</span>.

### Linear programming example

Consider the following simple linear programming problem:

\[\begin{aligned}
\max_{x_1, x_2, x_3, x_4} \ & 29x_1 + 45x_2 \\
\mbox{such that} \
& x_1 -x_2 -3x_3 \leq 5\\
& 2x_1 -3x_2 -7x_3 + 3x_4 \geq 10\\
& 2x_1 + 8x_2 + x_3 = 60\\
& 4x_1 + 4x_2 + x_4 = 60\\
& 0 \leq x_0\\
& 0 \leq x_1 \leq 5\\
& x_2 \leq 0.5\\
& -3 \leq x_3\\
\end{aligned}\]

We need some mathematical manipulations to convert the target problem to the form accepted by <span class="title-ref">linprog</span>.

First of all, let's consider the objective function. We want to maximize the objective function, but <span class="title-ref">linprog</span> can only accept a minimization problem. This is easily remedied by converting the maximize \(29x_1 + 45x_2\) to minimizing \(-29x_1 -45x_2\). Also, \(x_3, x_4\) are not shown in the objective function. That means the weights corresponding with \(x_3, x_4\) are zero. So, the objective function can be converted to:

\[\min_{x_1, x_2, x_3, x_4} \ -29x_1 -45x_2 + 0x_3 + 0x_4\]

If we define the vector of decision variables \(x = [x_1, x_2, x_3, x_4]^T\), the objective weights vector \(c\) of <span class="title-ref">linprog</span> in this problem should be

\[c = [-29, -45, 0, 0]^T\]

Next, let's consider the two inequality constraints. The first one is a "less than" inequality, so it is already in the form accepted by <span class="title-ref">linprog</span>. The second one is a "greater than" inequality, so we need to multiply both sides by \(-1\) to convert it to a "less than" inequality. Explicitly showing zero coefficients, we have:

\[\begin{aligned}
x_1 -x_2 -3x_3 + 0x_4  &\leq 5\\
-2x_1 + 3x_2 + 7x_3 - 3x_4 &\leq -10\\
\end{aligned}\]

These equations can be converted to matrix form:

\[\begin{aligned}
A_{ub} x \leq b_{ub}\\
\end{aligned}\]

where

\[\begin{aligned}
\begin{equation*} A_{ub} =
\begin{bmatrix} 1 & -1 & -3 & 0 \\
                -2 & 3 & 7 & -3
\end{bmatrix}
\end{equation*}
\end{aligned}\]

\[\begin{aligned}
\begin{equation*} b_{ub} =
\begin{bmatrix} 5 \\
                -10
\end{bmatrix}
\end{equation*}
\end{aligned}\]

Next, let's consider the two equality constraints. Showing zero weights explicitly, these are:

\[\begin{aligned}
2x_1 + 8x_2 + 1x_3 + 0x_4 &= 60\\
4x_1 + 4x_2 + 0x_3 + 1x_4 &= 60\\
\end{aligned}\]

These equations can be converted to matrix form:

\[\begin{aligned}
A_{eq} x = b_{eq}\\
\end{aligned}\]

where

\[\begin{aligned}
\begin{equation*} A_{eq} =
\begin{bmatrix} 2 & 8 & 1 & 0 \\
                4 & 4 & 0 & 1
\end{bmatrix}
\end{equation*}
\end{aligned}\]

\[\begin{aligned}
\begin{equation*} b_{eq} =
\begin{bmatrix} 60 \\
                60
\end{bmatrix}
\end{equation*}
\end{aligned}\]

Lastly, let's consider the separate inequality constraints on individual decision variables, which are known as "box constraints" or "simple bounds". These constraints can be applied using the bounds argument of <span class="title-ref">linprog</span>. As noted in the <span class="title-ref">linprog</span> documentation, the default value of bounds is `(0, None)`, meaning that the lower bound on each decision variable is 0, and the upper bound on each decision variable is infinity: all the decision variables are non-negative. Our bounds are different, so we will need to specify the lower and upper bound on each decision variable as a tuple and group these tuples into a list.

Finally, we can solve the transformed problem using <span class="title-ref">linprog</span>.

    >>> import numpy as np
    >>> from scipy.optimize import linprog
    >>> c = np.array([-29.0, -45.0, 0.0, 0.0])
    >>> A_ub = np.array([[1.0, -1.0, -3.0, 0.0],
    ...                 [-2.0, 3.0, 7.0, -3.0]])
    >>> b_ub = np.array([5.0, -10.0])
    >>> A_eq = np.array([[2.0, 8.0, 1.0, 0.0],
    ...                 [4.0, 4.0, 0.0, 1.0]])
    >>> b_eq = np.array([60.0, 60.0])
    >>> x0_bounds = (0, None)
    >>> x1_bounds = (0, 5.0)
    >>> x2_bounds = (-np.inf, 0.5)  # +/- np.inf can be used instead of None
    >>> x3_bounds = (-3.0, None)
    >>> bounds = [x0_bounds, x1_bounds, x2_bounds, x3_bounds]
    >>> result = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)
    >>> print(result.message)
    The problem is infeasible. (HiGHS Status 8: model_status is Infeasible; primal_status is None)

The result states that our problem is infeasible, meaning that there is no solution vector that satisfies all the constraints. That doesn't necessarily mean we did anything wrong; some problems truly are infeasible. Suppose, however, that we were to decide that our bound constraint on \(x_1\) was too tight and that it could be loosened to \(0 \leq x_1 \leq 6\). After adjusting our code `x1_bounds = (0, 6)` to reflect the change and executing it again:

    >>> x1_bounds = (0, 6)
    >>> bounds = [x0_bounds, x1_bounds, x2_bounds, x3_bounds]
    >>> result = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)
    >>> print(result.message)
    Optimization terminated successfully. (HiGHS Status 7: Optimal)

The result shows the optimization was successful. We can check the objective value (`result.fun`) is same as \(c^Tx\):

    >>> x = np.array(result.x)
    >>> obj = result.fun
    >>> print(c @ x)
    -505.97435889013434  # may vary
    >>> print(obj)
    -505.97435889013434  # may vary

We can also check that all constraints are satisfied within reasonable tolerances:

    >>> print(b_ub - (A_ub @ x).flatten())  # this is equivalent to result.slack
    [ 6.52747190e-10, -2.26730279e-09]  # may vary
    >>> print(b_eq - (A_eq @ x).flatten())  # this is equivalent to result.con
    [ 9.78840831e-09, 1.04662945e-08]]  # may vary
    >>> print([0 <= result.x[0], 0 <= result.x[1] <= 6.0, result.x[2] <= 0.5, -3.0 <= result.x[3]])
    [True, True, True, True]

## Assignment problems

### Linear sum assignment problem example

Consider the problem of selecting students for a swimming medley relay team. We have a table showing times for each swimming style of five students:

<table>
<thead>
<tr class="header">
<th>Student</th>
<th>backstroke</th>
<th>breaststroke</th>
<th>butterfly</th>
<th>freestyle</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>A</p>
</blockquote></td>
<td>43.5</td>
<td><blockquote>
<p>47.1</p>
</blockquote></td>
<td><blockquote>
<p>48.4</p>
</blockquote></td>
<td>38.2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>B</p>
</blockquote></td>
<td>45.5</td>
<td><blockquote>
<p>42.1</p>
</blockquote></td>
<td><blockquote>
<p>49.6</p>
</blockquote></td>
<td>36.8</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>C</p>
</blockquote></td>
<td>43.4</td>
<td><blockquote>
<p>39.1</p>
</blockquote></td>
<td><blockquote>
<p>42.1</p>
</blockquote></td>
<td>43.2</td>
</tr>
<tr class="even">
<td><blockquote>
<p>D</p>
</blockquote></td>
<td>46.5</td>
<td><blockquote>
<p>44.1</p>
</blockquote></td>
<td><blockquote>
<p>44.5</p>
</blockquote></td>
<td>41.2</td>
</tr>
<tr class="odd">
<td><blockquote>
<p>E</p>
</blockquote></td>
<td>46.3</td>
<td><blockquote>
<p>47.8</p>
</blockquote></td>
<td><blockquote>
<p>50.4</p>
</blockquote></td>
<td>37.2</td>
</tr>
</tbody>
</table>

We need to choose a student for each of the four swimming styles such that the total relay time is minimized. This is a typical linear sum assignment problem. We can use <span class="title-ref">linear\_sum\_assignment</span> to solve it.

The linear sum assignment problem is one of the most famous combinatorial optimization problems. Given a "cost matrix" \(C\), the problem is to choose

  - exactly one element from each row
  - without choosing more than one element from any column
  - such that the sum of the chosen elements is minimized

In other words, we need to assign each row to one column such that the sum of the corresponding entries is minimized.

Formally, let \(X\) be a boolean matrix where \(X[i,j] = 1\) iff row \(i\) is assigned to column \(j\). Then the optimal assignment has cost

\[\min \sum_i \sum_j C_{i,j} X_{i,j}\]

The first step is to define the cost matrix. In this example, we want to assign each swimming style to a student. <span class="title-ref">linear\_sum\_assignment</span> is able to assign each row of a cost matrix to a column. Therefore, to form the cost matrix, the table above needs to be transposed so that the rows correspond with swimming styles and the columns correspond with students:

    >>> import numpy as np
    >>> cost = np.array([[43.5, 45.5, 43.4, 46.5, 46.3],
    ...                  [47.1, 42.1, 39.1, 44.1, 47.8],
    ...                  [48.4, 49.6, 42.1, 44.5, 50.4],
    ...                  [38.2, 36.8, 43.2, 41.2, 37.2]])

We can solve the assignment problem with \`linear\_sum\_assignment\`:

    >>> from scipy.optimize import linear_sum_assignment
    >>> row_ind, col_ind = linear_sum_assignment(cost)

The `row_ind` and `col_ind` are optimal assigned matrix indexes of the cost matrix:

    >>> row_ind
    array([0, 1, 2, 3])
    >>> col_ind
    array([0, 2, 3, 1])

The optimal assignment is:

    >>> styles = np.array(["backstroke", "breaststroke", "butterfly", "freestyle"])[row_ind]
    >>> students = np.array(["A", "B", "C", "D", "E"])[col_ind]
    >>> dict(zip(styles, students))
    {'backstroke': 'A', 'breaststroke': 'C', 'butterfly': 'D', 'freestyle': 'B'}

The optimal total medley time is:

    >>> cost[row_ind, col_ind].sum()
    163.89999999999998

Note that this result is not the same as the sum of the minimum times for each swimming style:

    >>> np.min(cost, axis=1).sum()
    161.39999999999998

because student "C" is the best swimmer in both "breaststroke" and "butterfly" style. We cannot assign student "C" to both styles, so we assigned student C to the "breaststroke" style and D to the "butterfly" style to minimize the total time.

**References**

Some further reading and related software, such as Newton-Krylov [\[KK\]](#KK), PETSc [\[PP\]](#PP), and PyAMG [\[AMG\]](#AMG):

## Mixed integer linear programming

### Knapsack problem example

The knapsack problem is a well known combinatorial optimization problem. Given a set of items, each with a size and a value, the problem is to choose the items that maximize the total value under the condition that the total size is below a certain threshold.

Formally, let

  - \(x_i\) be a boolean variable that indicates whether item \(i\) is included in the knapsack,
  - \(n\) be the total number of items,
  - \(v_i\) be the value of item \(i\),
  - \(s_i\) be the size of item \(i\), and
  - \(C\) be the capacity of the knapsack.

Then the problem is:

\[\max \sum_i^n  v_{i} x_{i}\]

\[\text{subject to} \sum_i^n s_{i} x_{i} \leq C,  x_{i} \in {0, 1}\]

Although the objective function and inequality constraints are linear in the *decision variables* \(x_i\), this differs from a typical linear programming problem in that the decision variables can only assume integer values. Specifically, our decision variables can only be \(0\) or \(1\), so this is known as a *binary integer linear program* (BILP). Such a problem falls within the larger class of *mixed integer linear programs* (MILPs), which we we can solve with <span class="title-ref">milp</span>.

In our example, there are 8 items to choose from, and the size and value of each is specified as follows.

    >>> import numpy as np
    >>> from scipy import optimize
    >>> sizes = np.array([21, 11, 15, 9, 34, 25, 41, 52])
    >>> values = np.array([22, 12, 16, 10, 35, 26, 42, 53])

We need to constrain our eight decision variables to be binary. We do so by adding a \`Bounds\`: constraint to ensure that they lie between \(0\) and \(1\), and we apply "integrality" constraints to ensure that they are *either* \(0\) *or* \(1\).

    >>> bounds = optimize.Bounds(0, 1)  # 0 <= x_i <= 1
    >>> integrality = np.full_like(values, True)  # x_i are integers

The knapsack capacity constraint is specified using <span class="title-ref">LinearConstraint</span>.

    >>> capacity = 100
    >>> constraints = optimize.LinearConstraint(A=sizes, lb=0, ub=capacity)

If we are following the usual rules of linear algebra, the input `A` should be a two-dimensional matrix, and the lower and upper bounds `lb` and `ub` should be one-dimensional vectors, but <span class="title-ref">LinearConstraint</span> is forgiving as long as the inputs can be broadcast to consistent shapes.

Using the variables defined above, we can solve the knapsack problem using <span class="title-ref">milp</span>. Note that <span class="title-ref">milp</span> minimizes the objective function, but we want to maximize the total value, so we set <span class="title-ref">c</span> to be negative of the values.

    >>> from scipy.optimize import milp
    >>> res = milp(c=-values, constraints=constraints,
    ...            integrality=integrality, bounds=bounds)

Let's check the result:

    >>> res.success
    True
    >>> res.x
    array([1., 1., 0., 1., 1., 1., 0., 0.])

This means that we should select the items 1, 2, 4, 5, 6 to optimize the total value under the size constraint. Note that this is different from we would have obtained had we solved the *linear programming relaxation* (without integrality constraints) and attempted to round the decision variables.

    >>> from scipy.optimize import milp
    >>> res = milp(c=-values, constraints=constraints,
    ...            integrality=False, bounds=bounds)
    >>> res.x
    array([1.        , 1.        , 1.        , 1.        ,
           0.55882353, 1.        , 0.        , 0.        ])

If we were to round this solution up to `array([1., 1., 1., 1., 1., 1., 0., 0.])`, our knapsack would be over the capacity constraint, whereas if we were to round down to `array([1., 1., 1., 1., 0., 1., 0., 0.])`, we would have a sub-optimal solution.

For more MILP tutorials, see the Jupyter notebooks on SciPy Cookbooks:

  - [Compressed Sensing l1 program](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/LinearAndMixedIntegerLinearProgramming/compressed_sensing_milp_tutorial_1.ipynb)
  - [Compressed Sensing l0 program](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/LinearAndMixedIntegerLinearProgramming/compressed_sensing_milp_tutorial_2.ipynb)

<div id="citations">

  - <span id="AMG" class="citation-label">AMG</span>  
    PyAMG (algebraic multigrid preconditioners/solvers) <https://github.com/pyamg/pyamg/issues>

  - <span id="CGT" class="citation-label">CGT</span>  
    Conn, A. R., Gould, N. I., & Toint, P. L. "Trust region methods". Siam. (2000). pp. 169-200.

  - <span id="EQSQP" class="citation-label">EQSQP</span>  
    Lalee, Marucha, Jorge Nocedal, and Todd Plantega. 1998. On the implementation of an algorithm for large-scale equality constrained optimization. SIAM Journal on Optimization 8.3: 682-706.

  - <span id="GLTR" class="citation-label">GLTR</span>  
    N. Gould, S. Lucidi, M. Roma, P. Toint: "Solving the Trust-Region Subproblem using the Lanczos Method", SIAM J. Optim., 9(2), 504--525, (1999). `10.1137/S1052623497322735`

  - <span id="KK" class="citation-label">KK</span>  
    D.A. Knoll and D.E. Keyes, "Jacobian-free Newton-Krylov methods", J. Comp. Phys. 193, 357 (2004). `10.1016/j.jcp.2003.08.010`

  - <span id="NW" class="citation-label">NW</span>  
    J. Nocedal, S.J. Wright "Numerical optimization." 2nd edition. Springer Science (2006).

  - <span id="PP" class="citation-label">PP</span>  
    PETSc <https://www.mcs.anl.gov/petsc/> and its Python bindings <https://bitbucket.org/petsc/petsc4py/>

  - <span id="TRIP" class="citation-label">TRIP</span>  
    Byrd, Richard H., Mary E. Hribar, and Jorge Nocedal. 1999. An interior point algorithm for large-scale nonlinear programming. SIAM Journal on Optimization 9.4: 877-900.

  - <span id="TRLIB" class="citation-label">TRLIB</span>  
    F. Lenders, C. Kirches, A. Potschka: "trlib: A vector-free implementation of the GLTR method for iterative solution of the trust region problem", `1611.04718`

</div>

1.  J. Kowalik and J. F. Morrison, “Analysis of kinetic data for allosteric enzyme reactions as a nonlinear regression problem”, Math. Biosci., vol. 2, pp. 57-66, 1968.

2.  2.  13. Averick et al., “The MINPACK-2 Test Problem Collection”.

---

signal.md

---

# Signal Processing (<span class="title-ref">scipy.signal</span>)

<div class="sectionauthor">

Travis E. Oliphant

</div>

<div class="sectionauthor">

Pim Schellart

</div>

<div class="currentmodule">

scipy.signal

</div>

The signal processing toolbox currently contains some filtering functions, a limited set of filter design tools, and a few B-spline interpolation algorithms for 1- and 2-D data. While the B-spline algorithms could technically be placed under the interpolation category, they are included here because they only work with equally-spaced data and make heavy use of filter-theory and transfer-function formalism to provide a fast B-spline transform. To understand this section, you will need to understand that a signal in SciPy is an array of real or complex numbers.

## B-splines

A B-spline is an approximation of a continuous function over a finite-domain in terms of B-spline coefficients and knot points. If the knot-points are equally spaced with spacing \(\Delta x\), then the B-spline approximation to a 1-D function is the finite-basis expansion.

\[y\left(x\right)\approx\sum_{j}c_{j}\beta^{o}\left(\frac{x}{\Delta x}-j\right).\]

In two dimensions with knot-spacing \(\Delta x\) and \(\Delta y\), the function representation is

\[z\left(x,y\right)\approx\sum_{j}\sum_{k}c_{jk}\beta^{o}\left(\frac{x}{\Delta x}-j\right)\beta^{o}\left(\frac{y}{\Delta y}-k\right).\]

In these expressions, \(\beta^{o}\left(\cdot\right)\) is the space-limited B-spline basis function of order \(o\). The requirement of equally-spaced knot-points and equally-spaced data points, allows the development of fast (inverse-filtering) algorithms for determining the coefficients, \(c_{j}\), from sample-values, \(y_{n}\). Unlike the general spline interpolation algorithms, these algorithms can quickly find the spline coefficients for large images.

The advantage of representing a set of samples via B-spline basis functions is that continuous-domain operators (derivatives, re-sampling, integral, etc.), which assume that the data samples are drawn from an underlying continuous function, can be computed with relative ease from the spline coefficients. For example, the second derivative of a spline is

\[y{}^{\prime\prime}\left(x\right)=\frac{1}{\Delta x^{2}}\sum_{j}c_{j}\beta^{o\prime\prime}\left(\frac{x}{\Delta x}-j\right).\]

Using the property of B-splines that

\[\frac{d^{2}\beta^{o}\left(w\right)}{dw^{2}}=\beta^{o-2}\left(w+1\right)-2\beta^{o-2}\left(w\right)+\beta^{o-2}\left(w-1\right),\]

it can be seen that

\[y^{\prime\prime}\left(x\right)=\frac{1}{\Delta x^{2}}\sum_{j}c_{j}\left[\beta^{o-2}\left(\frac{x}{\Delta x}-j+1\right)-2\beta^{o-2}\left(\frac{x}{\Delta x}-j\right)+\beta^{o-2}\left(\frac{x}{\Delta x}-j-1\right)\right].\]

If \(o=3\), then at the sample points:

\[\begin{aligned}
\begin{eqnarray*} \Delta x^{2}\left.y^{\prime}\left(x\right)\right|_{x=n\Delta x} & = & \sum_{j}c_{j}\delta_{n-j+1}-2c_{j}\delta_{n-j}+c_{j}\delta_{n-j-1},\\  & = & c_{n+1}-2c_{n}+c_{n-1}.\end{eqnarray*}
\end{aligned}\]

Thus, the second-derivative signal can be easily calculated from the spline fit. If desired, smoothing splines can be found to make the second derivative less sensitive to random errors.

The savvy reader will have already noticed that the data samples are related to the knot coefficients via a convolution operator, so that simple convolution with the sampled B-spline function recovers the original data from the spline coefficients. The output of convolutions can change depending on how the boundaries are handled (this becomes increasingly more important as the number of dimensions in the dataset increases). The algorithms relating to B-splines in the signal-processing subpackage assume mirror-symmetric boundary conditions. Thus, spline coefficients are computed based on that assumption, and data-samples can be recovered exactly from the spline coefficients by assuming them to be mirror-symmetric also.

Currently the package provides functions for determining second- and third-order cubic spline coefficients from equally-spaced samples in one and two dimensions (<span class="title-ref">qspline1d</span>, <span class="title-ref">qspline2d</span>, <span class="title-ref">cspline1d</span>, <span class="title-ref">cspline2d</span>). For large \(o\), the B-spline basis function can be approximated well by a zero-mean Gaussian function with standard-deviation equal to \(\sigma_{o}=\left(o+1\right)/12\) :

\[\beta^{o}\left(x\right)\approx\frac{1}{\sqrt{2\pi\sigma_{o}^{2}}}\exp\left(-\frac{x^{2}}{2\sigma_{o}}\right).\]

A function to compute this Gaussian for arbitrary \(x\) and \(o\) is also available ( <span class="title-ref">gauss\_spline</span> ). The following code and figure use spline-filtering to compute an edge-image (the second derivative of a smoothed spline) of a raccoon's face, which is an array returned by the command <span class="title-ref">scipy.datasets.face</span>. The command <span class="title-ref">sepfir2d</span> was used to apply a separable 2-D FIR filter with mirror-symmetric boundary conditions to the spline coefficients. This function is ideally-suited for reconstructing samples from spline coefficients and is faster than <span class="title-ref">convolve2d</span>, which convolves arbitrary 2-D filters and allows for choosing mirror-symmetric boundary conditions.

<div class="plot" alt="&quot;This code displays two plots. The first plot is a normal grayscale photo of a raccoon climbing on a palm plant. The second plot has the 2-D spline filter applied to the photo and is completely grey except the edges of the photo have been emphasized, especially on the raccoon fur and palm fronds.&quot;">

\>\>\> import numpy as np \>\>\> from scipy import signal, datasets \>\>\> import matplotlib.pyplot as plt

\>\>\> image = datasets.face(gray=True).astype(np.float32) \>\>\> derfilt = np.array(\[1.0, -2, 1.0\], dtype=np.float32) \>\>\> ck = signal.cspline2d(image, 8.0) \>\>\> deriv = (signal.sepfir2d(ck, derfilt, \[1\]) + ... signal.sepfir2d(ck, \[1\], derfilt))

Alternatively, we could have done:

    laplacian = np.array([[0,1,0], [1,-4,1], [0,1,0]], dtype=np.float32)
    deriv2 = signal.convolve2d(ck,laplacian,mode='same',boundary='symm')

\>\>\> plt.figure() \>\>\> plt.imshow(image) \>\>\> plt.gray() \>\>\> plt.title('Original image') \>\>\> plt.show()

\>\>\> plt.figure() \>\>\> plt.imshow(deriv) \>\>\> plt.gray() \>\>\> plt.title('Output of spline edge filter') \>\>\> plt.show()

</div>

## Filtering

Filtering is a generic name for any system that modifies an input signal in some way. In SciPy, a signal can be thought of as a NumPy array. There are different kinds of filters for different kinds of operations. There are two broad kinds of filtering operations: linear and non-linear. Linear filters can always be reduced to multiplication of the flattened NumPy array by an appropriate matrix resulting in another flattened NumPy array. Of course, this is not usually the best way to compute the filter, as the matrices and vectors involved may be huge. For example, filtering a \(512 \times 512\) image with this method would require multiplication of a \(512^2 \times 512^2\) matrix with a \(512^2\) vector. Just trying to store the \(512^2 \times 512^2\) matrix using a standard NumPy array would require \(68,719,476,736\) elements. At 4 bytes per element this would require \(256\textrm{GB}\) of memory. In most applications, most of the elements of this matrix are zero and a different method for computing the output of the filter is employed.

### Convolution/Correlation

Many linear filters also have the property of shift-invariance. This means that the filtering operation is the same at different locations in the signal and it implies that the filtering matrix can be constructed from knowledge of one row (or column) of the matrix alone. In this case, the matrix multiplication can be accomplished using Fourier transforms.

Let \(x\left[n\right]\) define a 1-D signal indexed by the integer \(n.\) Full convolution of two 1-D signals can be expressed as

\[y\left[n\right]=\sum_{k=-\infty}^{\infty}x\left[k\right]h\left[n-k\right].\]

This equation can only be implemented directly if we limit the sequences to finite-support sequences that can be stored in a computer, choose \(n=0\) to be the starting point of both sequences, let \(K+1\) be that value for which \(x\left[n\right]=0\) for all \(n\geq K+1\) and \(M+1\) be that value for which \(h\left[n\right]=0\) for all \(n\geq M+1\), then the discrete convolution expression is

\[y\left[n\right]=\sum_{k=\max\left(n-M,0\right)}^{\min\left(n,K\right)}x\left[k\right]h\left[n-k\right].\]

For convenience, assume \(K\geq M.\) Then, more explicitly, the output of this operation is

\[\begin{aligned}
\begin{eqnarray*} y\left[0\right] & = & x\left[0\right]h\left[0\right]\\ y\left[1\right] & = & x\left[0\right]h\left[1\right]+x\left[1\right]h\left[0\right]\\ y\left[2\right] & = & x\left[0\right]h\left[2\right]+x\left[1\right]h\left[1\right]+x\left[2\right]h\left[0\right]\\ \vdots & \vdots & \vdots\\ y\left[M\right] & = & x\left[0\right]h\left[M\right]+x\left[1\right]h\left[M-1\right]+\cdots+x\left[M\right]h\left[0\right]\\ y\left[M+1\right] & = & x\left[1\right]h\left[M\right]+x\left[2\right]h\left[M-1\right]+\cdots+x\left[M+1\right]h\left[0\right]\\ \vdots & \vdots & \vdots\\ y\left[K\right] & = & x\left[K-M\right]h\left[M\right]+\cdots+x\left[K\right]h\left[0\right]\\ y\left[K+1\right] & = & x\left[K+1-M\right]h\left[M\right]+\cdots+x\left[K\right]h\left[1\right]\\ \vdots & \vdots & \vdots\\ y\left[K+M-1\right] & = & x\left[K-1\right]h\left[M\right]+x\left[K\right]h\left[M-1\right]\\ y\left[K+M\right] & = & x\left[K\right]h\left[M\right].\end{eqnarray*}
\end{aligned}\]

Thus, the full discrete convolution of two finite sequences of lengths \(K+1\) and \(M+1\), respectively, results in a finite sequence of length \(K+M+1=\left(K+1\right)+\left(M+1\right)-1.\)

1-D convolution is implemented in SciPy with the function <span class="title-ref">convolve</span>. This function takes as inputs the signals \(x,\) \(h\), and two optional flags 'mode' and 'method', and returns the signal \(y.\)

The first optional flag, 'mode', allows for the specification of which part of the output signal to return. The default value of 'full' returns the entire signal. If the flag has a value of 'same', then only the middle \(K\) values are returned, starting at \(y\left[\left\lfloor \frac{M-1}{2}\right\rfloor
\right]\), so that the output has the same length as the first input. If the flag has a value of 'valid', then only the middle \(K-M+1=\left(K+1\right)-\left(M+1\right)+1\) output values are returned, where \(z\) depends on all of the values of the smallest input from \(h\left[0\right]\) to \(h\left[M\right].\) In other words, only the values \(y\left[M\right]\) to \(y\left[K\right]\) inclusive are returned.

The second optional flag, 'method', determines how the convolution is computed, either through the Fourier transform approach with <span class="title-ref">fftconvolve</span> or through the direct method. By default, it selects the expected faster method. The Fourier transform method has order \(O(N\log N)\), while the direct method has order \(O(N^2)\). Depending on the big O constant and the value of \(N\), one of these two methods may be faster. The default value, 'auto', performs a rough calculation and chooses the expected faster method, while the values 'direct' and 'fft' force computation with the other two methods.

The code below shows a simple example for convolution of 2 sequences:

\>\>\> x = np.array(\[1.0, 2.0, 3.0\]) \>\>\> h = np.array(\[0.0, 1.0, 0.0, 0.0, 0.0\]) \>\>\> signal.convolve(x, h) array(\[ 0., 1., 2., 3., 0., 0., 0.\]) \>\>\> signal.convolve(x, h, 'same') array(\[ 2., 3., 0.\])

This same function <span class="title-ref">convolve</span> can actually take N-D arrays as inputs and will return the N-D convolution of the two arrays, as is shown in the code example below. The same input flags are available for that case as well.

\>\>\> x = np.array(\[\[1., 1., 0., 0.\], \[1., 1., 0., 0.\], \[0., 0., 0., 0.\], \[0., 0., 0., 0.\]\]) \>\>\> h = np.array(\[\[1., 0., 0., 0.\], \[0., 0., 0., 0.\], \[0., 0., 1., 0.\], \[0., 0., 0., 0.\]\]) \>\>\> signal.convolve(x, h) array(\[\[ 1., 1., 0., 0., 0., 0., 0.\], \[ 1., 1., 0., 0., 0., 0., 0.\], \[ 0., 0., 1., 1., 0., 0., 0.\], \[ 0., 0., 1., 1., 0., 0., 0.\], \[ 0., 0., 0., 0., 0., 0., 0.\], \[ 0., 0., 0., 0., 0., 0., 0.\], \[ 0., 0., 0., 0., 0., 0., 0.\]\])

Correlation is very similar to convolution except that the minus sign becomes a plus sign. Thus,

\[w\left[n\right]=\sum_{k=-\infty}^{\infty}y\left[k\right]x\left[n+k\right],\]

is the (cross) correlation of the signals \(y\) and \(x.\) For finite-length signals with \(y\left[n\right]=0\) outside of the range \(\left[0,K\right]\) and \(x\left[n\right]=0\) outside of the range \(\left[0,M\right],\) the summation can simplify to

\[w\left[n\right]=\sum_{k=\max\left(0,-n\right)}^{\min\left(K,M-n\right)}y\left[k\right]x\left[n+k\right].\]

Assuming again that \(K\geq M\), this is

\[\begin{aligned}
\begin{eqnarray*} w\left[-K\right] & = & y\left[K\right]x\left[0\right]\\ w\left[-K+1\right] & = & y\left[K-1\right]x\left[0\right]+y\left[K\right]x\left[1\right]\\ \vdots & \vdots & \vdots\\ w\left[M-K\right] & = & y\left[K-M\right]x\left[0\right]+y\left[K-M+1\right]x\left[1\right]+\cdots+y\left[K\right]x\left[M\right]\\ w\left[M-K+1\right] & = & y\left[K-M-1\right]x\left[0\right]+\cdots+y\left[K-1\right]x\left[M\right]\\ \vdots & \vdots & \vdots\\ w\left[-1\right] & = & y\left[1\right]x\left[0\right]+y\left[2\right]x\left[1\right]+\cdots+y\left[M+1\right]x\left[M\right]\\ w\left[0\right] & = & y\left[0\right]x\left[0\right]+y\left[1\right]x\left[1\right]+\cdots+y\left[M\right]x\left[M\right]\\ w\left[1\right] & = & y\left[0\right]x\left[1\right]+y\left[1\right]x\left[2\right]+\cdots+y\left[M-1\right]x\left[M\right]\\ w\left[2\right] & = & y\left[0\right]x\left[2\right]+y\left[1\right]x\left[3\right]+\cdots+y\left[M-2\right]x\left[M\right]\\ \vdots & \vdots & \vdots\\ w\left[M-1\right] & = & y\left[0\right]x\left[M-1\right]+y\left[1\right]x\left[M\right]\\ w\left[M\right] & = & y\left[0\right]x\left[M\right].\end{eqnarray*}
\end{aligned}\]

The SciPy function <span class="title-ref">correlate</span> implements this operation. Equivalent flags are available for this operation to return the full \(K+M+1\) length sequence ('full') or a sequence with the same size as the largest sequence starting at \(w\left[-K+\left\lfloor \frac{M-1}{2}\right\rfloor \right]\) ('same') or a sequence where the values depend on all the values of the smallest sequence ('valid'). This final option returns the \(K-M+1\) values \(w\left[M-K\right]\) to \(w\left[0\right]\) inclusive.

The function <span class="title-ref">correlate</span> can also take arbitrary N-D arrays as input and return the N-D convolution of the two arrays on output.

When \(N=2,\) <span class="title-ref">correlate</span> and/or <span class="title-ref">convolve</span> can be used to construct arbitrary image filters to perform actions such as blurring, enhancing, and edge-detection for an image.

<div class="plot" alt="&quot;This code displays two plots. The first plot is the familiar photo of a raccoon climbing on a palm. The second plot has the FIR filter applied and has the two copies of the photo superimposed due to the twin peaks manually set in the filter kernel definition.&quot;">

\>\>\> import numpy as np \>\>\> from scipy import signal, datasets \>\>\> import matplotlib.pyplot as plt

\>\>\> image = datasets.face(gray=True) \>\>\> w = np.zeros((50, 50)) \>\>\> w\[0\]\[0\] = 1.0 \>\>\> w\[49\]\[25\] = 1.0 \>\>\> image\_new = signal.fftconvolve(image, w)

\>\>\> plt.figure() \>\>\> plt.imshow(image) \>\>\> plt.gray() \>\>\> plt.title('Original image') \>\>\> plt.show()

\>\>\> plt.figure() \>\>\> plt.imshow(image\_new) \>\>\> plt.gray() \>\>\> plt.title('Filtered image') \>\>\> plt.show()

</div>

Calculating the convolution in the time domain as above is mainly used for filtering when one of the signals is much smaller than the other ( \(K\gg
M\) ), otherwise linear filtering is more efficiently calculated in the frequency domain provided by the function <span class="title-ref">fftconvolve</span>. By default, <span class="title-ref">convolve</span> estimates the fastest method using <span class="title-ref">choose\_conv\_method</span>.

If the filter function \(w[n,m]\) can be factored according to

\[h[n, m] = h_1[n] h_2[m],\]

convolution can be calculated by means of the function <span class="title-ref">sepfir2d</span>. As an example, we consider a Gaussian filter <span class="title-ref">\~scipy.signal.windows.gaussian</span>

\[h[n, m] \propto e^{-x^2-y^2} = e^{-x^2} e^{-y^2},\]

which is often used for blurring.

<div class="plot" alt="&quot;This code displays two plots. The first plot is a grayscale photo of two people climbing a wooden staircase taken from below. The second plot has the 2-D gaussian FIR window applied and appears very blurry. You can still tell it&#39;s a photo but the subject is ambiguous.&quot;">

\>\>\> import numpy as np \>\>\> from scipy import signal, datasets \>\>\> import matplotlib.pyplot as plt

\>\>\> image = np.asarray(datasets.ascent(), np.float64) \>\>\> w = signal.windows.gaussian(51, 10.0) \>\>\> image\_new = signal.sepfir2d(image, w, w)

\>\>\> plt.figure() \>\>\> plt.imshow(image) \>\>\> plt.gray() \>\>\> plt.title('Original image') \>\>\> plt.show()

\>\>\> plt.figure() \>\>\> plt.imshow(image\_new) \>\>\> plt.gray() \>\>\> plt.title('Filtered image') \>\>\> plt.show()

</div>

### Difference-equation filtering

A general class of linear 1-D filters (that includes convolution filters) are filters described by the difference equation

\[\sum_{k=0}^{N}a_{k}y\left[n-k\right]=\sum_{k=0}^{M}b_{k}x\left[n-k\right],\]

where \(x\left[n\right]\) is the input sequence and \(y\left[n\right]\) is the output sequence. If we assume initial rest so that \(y\left[n\right]=0\) for \(n<0\), then this kind of filter can be implemented using convolution. However, the convolution filter sequence \(h\left[n\right]\) could be infinite if \(a_{k}\neq0\) for \(k\geq1.\) In addition, this general class of linear filter allows initial conditions to be placed on \(y\left[n\right]\) for \(n<0\) resulting in a filter that cannot be expressed using convolution.

The difference equation filter can be thought of as finding \(y\left[n\right]\) recursively in terms of its previous values

\[a_{0}y\left[n\right]=-a_{1}y\left[n-1\right]-\cdots-a_{N}y\left[n-N\right]+\cdots+b_{0}x\left[n\right]+\cdots+b_{M}x\left[n-M\right].\]

Often, \(a_{0}=1\) is chosen for normalization. The implementation in SciPy of this general difference equation filter is a little more complicated than would be implied by the previous equation. It is implemented so that only one signal needs to be delayed. The actual implementation equations are (assuming \(a_{0}=1\) ):

\[\begin{aligned}
\begin{eqnarray*} y\left[n\right] & = & b_{0}x\left[n\right]+z_{0}\left[n-1\right]\\ z_{0}\left[n\right] & = & b_{1}x\left[n\right]+z_{1}\left[n-1\right]-a_{1}y\left[n\right]\\ z_{1}\left[n\right] & = & b_{2}x\left[n\right]+z_{2}\left[n-1\right]-a_{2}y\left[n\right]\\ \vdots & \vdots & \vdots\\ z_{K-2}\left[n\right] & = & b_{K-1}x\left[n\right]+z_{K-1}\left[n-1\right]-a_{K-1}y\left[n\right]\\ z_{K-1}\left[n\right] & = & b_{K}x\left[n\right]-a_{K}y\left[n\right],\end{eqnarray*}
\end{aligned}\]

where \(K=\max\left(N,M\right).\) Note that \(b_{K}=0\) if \(K>M\) and \(a_{K}=0\) if \(K>N.\) In this way, the output at time \(n\) depends only on the input at time \(n\) and the value of \(z_{0}\) at the previous time. This can always be calculated as long as the \(K\) values \(z_{0}\left[n-1\right]\ldots z_{K-1}\left[n-1\right]\) are computed and stored at each time step.

The difference-equation filter is called using the command <span class="title-ref">lfilter</span> in SciPy. This command takes as inputs the vector \(b,\) the vector, \(a,\) a signal \(x\) and returns the vector \(y\) (the same length as \(x\) ) computed using the equation given above. If \(x\) is N-D, then the filter is computed along the axis provided. If desired, initial conditions providing the values of \(z_{0}\left[-1\right]\) to \(z_{K-1}\left[-1\right]\) can be provided or else it will be assumed that they are all zero. If initial conditions are provided, then the final conditions on the intermediate variables are also returned. These could be used, for example, to restart the calculation in the same state.

Sometimes, it is more convenient to express the initial conditions in terms of the signals \(x\left[n\right]\) and \(y\left[n\right].\) In other words, perhaps you have the values of \(x\left[-M\right]\) to \(x\left[-1\right]\) and the values of \(y\left[-N\right]\) to \(y\left[-1\right]\) and would like to determine what values of \(z_{m}\left[-1\right]\) should be delivered as initial conditions to the difference-equation filter. It is not difficult to show that, for \(0\leq
m<K,\)

\[z_{m}\left[n\right]=\sum_{p=0}^{K-m-1}\left(b_{m+p+1}x\left[n-p\right]-a_{m+p+1}y\left[n-p\right]\right).\]

Using this formula, we can find the initial-condition vector \(z_{0}\left[-1\right]\) to \(z_{K-1}\left[-1\right]\) given initial conditions on \(y\) (and \(x\) ). The command <span class="title-ref">lfiltic</span> performs this function.

As an example, consider the following system:

\[y[n] = \frac{1}{2} x[n] + \frac{1}{4} x[n-1] + \frac{1}{3} y[n-1]\]

The code calculates the signal \(y[n]\) for a given signal \(x[n]\); first for initial conditions \(y[-1] = 0\) (default case), then for \(y[-1] = 2\) by means of <span class="title-ref">lfiltic</span>.

\>\>\> import numpy as np \>\>\> from scipy import signal

\>\>\> x = np.array(\[1., 0., 0., 0.\]) \>\>\> b = np.array(\[1.0/2, 1.0/4\]) \>\>\> a = np.array(\[1.0, -1.0/3\]) \>\>\> signal.lfilter(b, a, x) array(\[0.5, 0.41666667, 0.13888889, 0.0462963\]) \>\>\> zi = signal.lfiltic(b, a, y=\[2.\]) \>\>\> signal.lfilter(b, a, x, zi=zi) (array(\[ 1.16666667, 0.63888889, 0.21296296, 0.07098765\]), array(\[0.02366\]))

Note that the output signal \(y[n]\) has the same length as the length as the input signal \(x[n]\).

#### Analysis of Linear Systems

Linear system described a linear-difference equation can be fully described by the coefficient vectors \(a\) and \(b\) as was done above; an alternative representation is to provide a factor \(k\), \(N_z\) zeros \(z_k\) and \(N_p\) poles \(p_k\), respectively, to describe the system by means of its transfer function \(H(z)\), according to

\[H(z) = k \frac{ (z-z_1)(z-z_2)...(z-z_{N_z})}{ (z-p_1)(z-p_2)...(z-p_{N_p})}.\]

This alternative representation can be obtained with the scipy function <span class="title-ref">tf2zpk</span>; the inverse is provided by <span class="title-ref">zpk2tf</span>.

For the above example we have

\>\>\> b = np.array(\[1.0/2, 1.0/4\]) \>\>\> a = np.array(\[1.0, -1.0/3\]) \>\>\> signal.tf2zpk(b, a) (array(\[-0.5\]), array(\[ 0.33333333\]), 0.5)

i.e., the system has a zero at \(z=-1/2\) and a pole at \(z=1/3\).

The scipy function <span class="title-ref">freqz</span> allows calculation of the frequency response of a system described by the coefficients \(a_k\) and \(b_k\). See the help of the <span class="title-ref">freqz</span> function for a comprehensive example.

### Filter Design

Time-discrete filters can be classified into finite response (FIR) filters and infinite response (IIR) filters. FIR filters can provide a linear phase response, whereas IIR filters cannot. SciPy provides functions for designing both types of filters.

#### FIR Filter

The function <span class="title-ref">firwin</span> designs filters according to the window method. Depending on the provided arguments, the function returns different filter types (e.g., low-pass, band-pass...).

The example below designs a low-pass and a band-stop filter, respectively.

<div class="plot" alt="&quot;This code displays an X-Y plot with the amplitude response on the Y axis vs frequency on the X axis. The first (low-pass) trace in blue starts with a pass-band at 0 dB and curves down around halfway through with some ripple in the stop-band about 80 dB down. The second (band-stop) trace in red starts and ends at 0 dB, but the middle third is down about 60 dB from the peak with some ripple where the filter would suppress a signal.&quot;">

\>\>\> import numpy as np \>\>\> import scipy.signal as signal \>\>\> import matplotlib.pyplot as plt

\>\>\> b1 = signal.firwin(40, 0.5) \>\>\> b2 = signal.firwin(41, \[0.3, 0.8\]) \>\>\> w1, h1 = signal.freqz(b1) \>\>\> w2, h2 = signal.freqz(b2)

\>\>\> plt.title('Digital filter frequency response') \>\>\> plt.plot(w1, 20\*np.log10(np.abs(h1)), 'b') \>\>\> plt.plot(w2, 20\*np.log10(np.abs(h2)), 'r') \>\>\> plt.ylabel('Amplitude Response (dB)') \>\>\> plt.xlabel('Frequency (rad/sample)') \>\>\> plt.grid() \>\>\> plt.show()

</div>

Note that <span class="title-ref">firwin</span> uses, per default, a normalized frequency defined such that the value \(1\) corresponds to the Nyquist frequency, whereas the function <span class="title-ref">freqz</span> is defined such that the value \(\pi\) corresponds to the Nyquist frequency.

The function <span class="title-ref">firwin2</span> allows design of almost arbitrary frequency responses by specifying an array of corner frequencies and corresponding gains, respectively.

The example below designs a filter with such an arbitrary amplitude response.

<div class="plot" alt="&quot;This code displays an X-Y plot with amplitude response on the Y axis vs frequency on the X axis. A single trace forms a shape similar to a heartbeat signal.&quot;">

\>\>\> import numpy as np \>\>\> import scipy.signal as signal \>\>\> import matplotlib.pyplot as plt

\>\>\> b = signal.firwin2(150, \[0.0, 0.3, 0.6, 1.0\], \[1.0, 2.0, 0.5, 0.0\]) \>\>\> w, h = signal.freqz(b)

\>\>\> plt.title('Digital filter frequency response') \>\>\> plt.plot(w, np.abs(h)) \>\>\> plt.title('Digital filter frequency response') \>\>\> plt.ylabel('Amplitude Response') \>\>\> plt.xlabel('Frequency (rad/sample)') \>\>\> plt.grid() \>\>\> plt.show()

</div>

Note the linear scaling of the y-axis and the different definition of the Nyquist frequency in <span class="title-ref">firwin2</span> and <span class="title-ref">freqz</span> (as explained above).

#### IIR Filter

SciPy provides two functions to directly design IIR <span class="title-ref">iirdesign</span> and <span class="title-ref">iirfilter</span>, where the filter type (e.g., elliptic) is passed as an argument and several more filter design functions for specific filter types, e.g., <span class="title-ref">ellip</span>.

The example below designs an elliptic low-pass filter with defined pass-band and stop-band ripple, respectively. Note the much lower filter order (order 4) compared with the FIR filters from the examples above in order to reach the same stop-band attenuation of \(\approx 60\) dB.

<div class="plot" alt="&quot;This code generates an X-Y plot with amplitude response on the Y axis vs Frequency on the X axis. A single trace shows a smooth low-pass filter with the left third passband near 0 dB. The right two-thirds are about 60 dB down with two sharp narrow valleys dipping down to -100 dB.&quot;">

\>\>\> import numpy as np \>\>\> import scipy.signal as signal \>\>\> import matplotlib.pyplot as plt

\>\>\> b, a = signal.iirfilter(4, Wn=0.2, rp=5, rs=60, btype='lowpass', ftype='ellip') \>\>\> w, h = signal.freqz(b, a)

\>\>\> plt.title('Digital filter frequency response') \>\>\> plt.plot(w, 20\*np.log10(np.abs(h))) \>\>\> plt.title('Digital filter frequency response') \>\>\> plt.ylabel('Amplitude Response \[dB\]') \>\>\> plt.xlabel('Frequency (rad/sample)') \>\>\> plt.grid() \>\>\> plt.show()

</div>

\> **Note** \> It is important to note that the cutoffs for <span class="title-ref">firwin</span> and <span class="title-ref">iirfilter</span> are defined differently. For <span class="title-ref">firwin</span>, the cutoff-frequency is at half-amplitude (i.e. -6dB). For <span class="title-ref">iirfilter</span>, the cutoff is at half-power (i.e. -3dB).

> 
> 
> <div class="plot" alt="&quot;This code generates an example plot displaying the differences in cutoff frequency between FIR and IIR filters. FIR filters have a cutoff frequency at half-amplitude, while IIR filter cutoffs are at half-power.&quot;">
> 
> \>\>\> import numpy as np \>\>\> from matplotlib import pyplot as plt \>\>\> from scipy import signal as sig
> 
> \>\>\> fs = 16000 \>\>\> b = sig.firwin(101, 2500, fs=fs) \>\>\> f, h\_fft = sig.freqz(b, fs=fs) \>\>\> h\_amp = 20 \* np.log10(np.abs(h\_fft)) \>\>\> \_, ax = plt.subplots(layout="constrained") \>\>\> ax.plot(f, h\_amp, label="FIR") \>\>\> ax.grid(True)
> 
> \>\>\> b, a = sig.iirfilter(15, 2500, btype="low", fs=fs) \>\>\> f, h\_fft = sig.freqz(b, a, fs=fs) \>\>\> h\_amp = 20 \* np.log10(np.abs(h\_fft)) \>\>\> ax.plot(f, h\_amp, label="IIR") \>\>\> ax.set(xlim=\[2100, 2900\], ylim=\[-10, 2\]) \>\>\> ax.set(xlabel="Frequency (Hz)", ylabel="Amplitude Response \[dB\]") \>\>\> ax.legend()
> 
> </div>

#### Filter Coefficients

Filter coefficients can be stored in several different formats:

  - 'ba' or 'tf' = transfer function coefficients
  - 'zpk' = zeros, poles, and overall gain
  - 'ss' = state-space system representation
  - 'sos' = transfer function coefficients of second-order sections

Functions, such as <span class="title-ref">tf2zpk</span> and <span class="title-ref">zpk2ss</span>, can convert between them.

##### Transfer function representation

The `ba` or `tf` format is a 2-tuple `(b, a)` representing a transfer function, where <span class="title-ref">b</span> is a length `M+1` array of coefficients of the <span class="title-ref">M</span>-order numerator polynomial, and <span class="title-ref">a</span> is a length `N+1` array of coefficients of the <span class="title-ref">N</span>-order denominator, as positive, descending powers of the transfer function variable. So the tuple of \(b = [b_0, b_1, ..., b_M]\) and \(a =[a_0, a_1, ..., a_N]\) can represent an analog filter of the form:

\[H(s) = \frac
{b_0 s^M + b_1 s^{(M-1)} + \cdots + b_M}
{a_0 s^N + a_1 s^{(N-1)} + \cdots + a_N}
= \frac
{\sum_{i=0}^M b_i s^{(M-i)}}
{\sum_{i=0}^N a_i s^{(N-i)}}\]

or a discrete-time filter of the form:

\[H(z) = \frac
{b_0 z^M + b_1 z^{(M-1)} + \cdots + b_M}
{a_0 z^N + a_1 z^{(N-1)} + \cdots + a_N}
= \frac
{\sum_{i=0}^M b_i z^{(M-i)}}
{\sum_{i=0}^N a_i z^{(N-i)}}.\]

This "positive powers" form is found more commonly in controls engineering. If <span class="title-ref">M</span> and <span class="title-ref">N</span> are equal (which is true for all filters generated by the bilinear transform), then this happens to be equivalent to the "negative powers" discrete-time form preferred in DSP:

\[H(z) = \frac
{b_0 + b_1 z^{-1} + \cdots + b_M z^{-M}}
{a_0 + a_1 z^{-1} + \cdots + a_N z^{-N}}
= \frac
{\sum_{i=0}^M b_i z^{-i}}
{\sum_{i=0}^N a_i z^{-i}}.\]

Although this is true for common filters, remember that this is not true in the general case. If <span class="title-ref">M</span> and <span class="title-ref">N</span> are not equal, the discrete-time transfer function coefficients must first be converted to the "positive powers" form before finding the poles and zeros.

This representation suffers from numerical error at higher orders, so other formats are preferred when possible.

##### Zeros and poles representation

The `zpk` format is a 3-tuple `(z, p, k)`, where <span class="title-ref">z</span> is an <span class="title-ref">M</span>-length array of the complex zeros of the transfer function \(z = [z_0, z_1, ..., z_{M-1}]\), <span class="title-ref">p</span> is an <span class="title-ref">N</span>-length array of the complex poles of the transfer function \(p = [p_0, p_1, ..., p_{N-1}]\), and <span class="title-ref">k</span> is a scalar gain. These represent the digital transfer function:

\[H(z) = k \cdot \frac
{(z - z_0) (z - z_1) \cdots (z - z_{(M-1)})}
{(z - p_0) (z - p_1) \cdots (z - p_{(N-1)})}
= k \frac
{\prod_{i=0}^{M-1} (z - z_i)}
{\prod_{i=0}^{N-1} (z - p_i)}\]

or the analog transfer function:

\[H(s) = k \cdot \frac
{(s - z_0) (s - z_1) \cdots (s - z_{(M-1)})}
{(s - p_0) (s - p_1) \cdots (s - p_{(N-1)})}
= k \frac
{\prod_{i=0}^{M-1} (s - z_i)}
{\prod_{i=0}^{N-1} (s - p_i)}.\]

Although the sets of roots are stored as ordered NumPy arrays, their ordering does not matter: `([-1, -2], [-3, -4], 1)` is the same filter as `([-2, -1], [-4, -3], 1)`.

##### State-space system representation

The `ss` format is a 4-tuple of arrays `(A, B, C, D)` representing the state-space of an <span class="title-ref">N</span>-order digital/discrete-time system of the form:

\[\begin{aligned}
\mathbf{x}[k+1] = A \mathbf{x}[k] + B \mathbf{u}[k]\\
\mathbf{y}[k] = C \mathbf{x}[k] + D \mathbf{u}[k]
\end{aligned}\]

or a continuous/analog system of the form:

\[\begin{aligned}
\dot{\mathbf{x}}(t) = A \mathbf{x}(t) + B \mathbf{u}(t)\\
\mathbf{y}(t) = C \mathbf{x}(t) + D \mathbf{u}(t),
\end{aligned}\]

with <span class="title-ref">P</span> inputs, <span class="title-ref">Q</span> outputs and <span class="title-ref">N</span> state variables, where:

  - <span class="title-ref">x</span> is the state vector
  - <span class="title-ref">y</span> is the output vector of length <span class="title-ref">Q</span>
  - <span class="title-ref">u</span> is the input vector of length <span class="title-ref">P</span>
  - <span class="title-ref">A</span> is the state matrix, with shape `(N, N)`
  - <span class="title-ref">B</span> is the input matrix with shape `(N, P)`
  - <span class="title-ref">C</span> is the output matrix with shape `(Q, N)`
  - <span class="title-ref">D</span> is the feedthrough or feedforward matrix with shape `(Q, P)`. (In cases where the system does not have a direct feedthrough, all values in <span class="title-ref">D</span> are zero.)

State-space is the most general representation and the only one that allows for multiple-input, multiple-output (MIMO) systems. There are multiple state-space representations for a given transfer function. Specifically, the "controllable canonical form" and "observable canonical form" have the same coefficients as the `tf` representation, and, therefore, suffer from the same numerical errors.

##### Second-order sections representation

The `sos` format is a single 2-D array of shape `(n_sections, 6)`, representing a sequence of second-order transfer functions which, when cascaded in series, realize a higher-order filter with minimal numerical error. Each row corresponds to a second-order `tf` representation, with the first three columns providing the numerator coefficients and the last three providing the denominator coefficients:

\[[b_0, b_1, b_2, a_0, a_1, a_2]\]

The coefficients are typically normalized, such that \(a_0\) is always 1. The section order is usually not important with floating-point computation; the filter output will be the same, regardless of the order.

#### Filter transformations

The IIR filter design functions first generate a prototype analog low-pass filter with a normalized cutoff frequency of 1 rad/sec. This is then transformed into other frequencies and band types using the following substitutions:

| Type                                        | Transformation                                                                          |
| ------------------------------------------- | --------------------------------------------------------------------------------------- |
| <span class="title-ref">lp2lp</span> :math: | <span class="title-ref">s rightarrow frac{s}{omega\_0}</span>                           |
| <span class="title-ref">lp2hp</span> :math: | <span class="title-ref">s rightarrow frac{omega\_0}{s}</span>                           |
| <span class="title-ref">lp2bp</span> :math: | <span class="title-ref">s rightarrow frac{s^2 + {omega\_0}^2}{s cdot mathrm{BW}}</span> |
| <span class="title-ref">lp2bs</span> :math: | <span class="title-ref">s rightarrow frac{s cdot mathrm{BW}}{s^2 + {omega\_0}^2}</span> |

Here, \(\omega_0\) is the new cutoff or center frequency, and \(\mathrm{BW}\) is the bandwidth. These preserve symmetry on a logarithmic frequency axis.

To convert the transformed analog filter into a digital filter, the <span class="title-ref">bilinear</span> transform is used, which makes the following substitution:

\[s \rightarrow \frac{2}{T} \frac{z - 1}{z + 1},\]

where T is the sampling time (the inverse of the sampling frequency).

### Other filters

The signal processing package provides many more filters as well.

#### Median Filter

A median filter is commonly applied when noise is markedly non-Gaussian or when it is desired to preserve edges. The median filter works by sorting all of the array pixel values in a rectangular region surrounding the point of interest. The sample median of this list of neighborhood pixel values is used as the value for the output array. The sample median is the middle-array value in a sorted list of neighborhood values. If there are an even number of elements in the neighborhood, then the average of the middle two values is used as the median. A general purpose median filter that works on N-D arrays is <span class="title-ref">medfilt</span>. A specialized version that works only for 2-D arrays is available as <span class="title-ref">medfilt2d</span>.

#### Order Filter

A median filter is a specific example of a more general class of filters called order filters. To compute the output at a particular pixel, all order filters use the array values in a region surrounding that pixel. These array values are sorted and then one of them is selected as the output value. For the median filter, the sample median of the list of array values is used as the output. A general-order filter allows the user to select which of the sorted values will be used as the output. So, for example, one could choose to pick the maximum in the list or the minimum. The order filter takes an additional argument besides the input array and the region mask that specifies which of the elements in the sorted list of neighbor array values should be used as the output. The command to perform an order filter is <span class="title-ref">order\_filter</span>.

#### Wiener filter

The Wiener filter is a simple deblurring filter for denoising images. This is not the Wiener filter commonly described in image-reconstruction problems but, instead, it is a simple, local-mean filter. Let \(x\) be the input signal, then the output is

\[\begin{aligned}
y=\left\{ \begin{array}{cc} \frac{\sigma^{2}}{\sigma_{x}^{2}}m_{x}+\left(1-\frac{\sigma^{2}}{\sigma_{x}^{2}}\right)x & \sigma_{x}^{2}\geq\sigma^{2},\\ m_{x} & \sigma_{x}^{2}<\sigma^{2},\end{array}\right.
\end{aligned}\]

where \(m_{x}\) is the local estimate of the mean and \(\sigma_{x}^{2}\) is the local estimate of the variance. The window for these estimates is an optional input parameter (default is \(3\times3\) ). The parameter \(\sigma^{2}\) is a threshold noise parameter. If \(\sigma\) is not given, then it is estimated as the average of the local variances.

#### Hilbert filter

The Hilbert transform constructs the complex-valued analytic signal from a real signal. For example, if \(x=\cos\omega n\), then \(y=\textrm{hilbert}\left(x\right)\) would return (except near the edges) \(y=\exp\left(j\omega n\right).\) In the frequency domain, the hilbert transform performs

\[Y=X\cdot H,\]

where \(H\) is \(2\) for positive frequencies, \(0\) for negative frequencies, and \(1\) for zero-frequencies.

### Analog Filter Design

The functions <span class="title-ref">iirdesign</span>, <span class="title-ref">iirfilter</span>, and the filter design functions for specific filter types (e.g., <span class="title-ref">ellip</span>) all have a flag <span class="title-ref">analog</span>, which allows the design of analog filters as well.

The example below designs an analog (IIR) filter, obtains via <span class="title-ref">tf2zpk</span> the poles and zeros and plots them in the complex s-plane. The zeros at \(\omega \approx 150\) and \(\omega \approx 300\) can be clearly seen in the amplitude response.

<div class="plot" alt="&quot;This code displays two plots. The first plot is an IIR filter response as an X-Y plot with amplitude response on the Y axis vs frequency on the X axis. The low-pass filter shown has a passband from 0 to 100 Hz with 0 dB response and a stop-band from about 175 Hz to 1 KHz about 40 dB down. There are two sharp discontinuities in the filter near 175 Hz and 300 Hz. The second plot is an X-Y showing the transfer function in the complex plane. The Y axis is real-valued an the X axis is complex-valued. The filter has four zeros near [300+0j, 175+0j, -175+0j, -300+0j] shown as blue X markers. The filter also has four poles near [50-30j, -50-30j, 100-8j, -100-8j] shown as red dots.&quot;">

\>\>\> import numpy as np \>\>\> import scipy.signal as signal \>\>\> import matplotlib.pyplot as plt

\>\>\> b, a = signal.iirdesign(wp=100, ws=200, gpass=2.0, gstop=40., analog=True) \>\>\> w, h = signal.freqs(b, a)

\>\>\> plt.title('Analog filter frequency response') \>\>\> plt.plot(w, 20\*np.log10(np.abs(h))) \>\>\> plt.ylabel('Amplitude Response \[dB\]') \>\>\> plt.xlabel('Frequency') \>\>\> plt.grid() \>\>\> plt.show()

\>\>\> z, p, k = signal.tf2zpk(b, a)

\>\>\> plt.plot(np.real(z), np.imag(z), 'ob', markerfacecolor='none') \>\>\> plt.plot(np.real(p), np.imag(p), 'xr') \>\>\> plt.legend(\['Zeros', 'Poles'\], loc=2)

\>\>\> plt.title('Pole / Zero Plot') \>\>\> plt.xlabel('Real') \>\>\> plt.ylabel('Imaginary') \>\>\> plt.grid() \>\>\> plt.show()

</div>

\[% LaTeX Macros to make the LaTeX formulas more readable:
\newcommand{\IC}{{\mathbb{C}}}  % set of complex numbers
\newcommand{\IN}{{\mathbb{N}}}  % set of natural numbers
\newcommand{\IR}{{\mathbb{R}}}  % set of real numbers
\newcommand{\IZ}{{\mathbb{Z}}}  % set of integers
\newcommand{\jj}{{\mathbb{j}}}  % imaginary unit
\newcommand{\e}{\operatorname{e}}  % Euler's number
\newcommand{\dd}{\operatorname{d}} % infinitesimal operator
\newcommand{\abs}[1]{\left|#1\right|} % absolute value
\newcommand{\conj}[1]{\overline{#1}} % complex conjugate
\newcommand{\conjT}[1]{\overline{#1^T}} % transposed complex conjugate
\newcommand{\inv}[1]{\left(#1\right)^{\!-1}} % inverse
% Since the physics package is not loaded, we define the macros ourselves:
\newcommand{\vb}[1]{\mathbf{#1}} % vectors and matrices are bold
% new macros:
\newcommand{\rect}{\operatorname{rect}}  % rect or boxcar function
\newcommand{\sinc}{\operatorname{sinc}}  % sinc(t) := sin(pi*t) / (pi*t)\]

## Spectral Analysis

Spectral analysis refers to investigating the Fourier transform\[1\] of a signal. Depending on the context, various names, like spectrum, spectral density or periodogram exist for the various spectral representations of the Fourier transform. \[2\] This section illustrates the most common representations by the example of a continuous-time sine wave signal of fixed duration. Then the use of the discrete Fourier transform\[3\] on a sampled version of that sine wave is discussed.

Separate subsections are devoted to the spectrum's phase, estimating the power spectral density without (<span class="title-ref">\~scipy.signal.periodogram</span>) and with averaging (<span class="title-ref">\~scipy.signal.welch</span>) as well for non-equally spaced signals (<span class="title-ref">\~scipy.signal.lombscargle</span>).

Note that the concept of Fourier series is closely related but differs in a crucial point: Fourier series have a spectrum made up of discrete-frequency harmonics, while in this section the spectra are continuous in frequency.

### Continuous-time Sine Signal

Consider a sine signal with amplitude \(a\), frequency \(f_x\) and duration \(\tau\), i.e.,

\[x(t) = a \sin(2 \pi f_x t)\, \rect(\frac{t}{\tau}-\frac{1}{2})
     = \left(\frac{a}{2\jj}
          \e^{\jj 2 \pi f_x t} - \frac{a}{2\jj} \e^{-\jj 2 \pi f_x t}
       \right) \rect(\frac{t}{\tau}-\frac{1}{2})\ .\]

Since the \(\rect(t)\) function is one for \(|t|<1/2\) and zero for \(|t|>1/2\), it limits \(x(t)\) to the interval \([0, \tau]\). Expressing the sine by complex exponentials shows its two periodic components with frequencies \(\pm f_x\). We assume \(x(t)\) to be a voltage signal, so it has the unit \(\text{V}\).

In signal processing the integral of the absolute square \(|x(t)|^2\) is utilized to define energy and power of a signal, i.e.,

\[E_x :=  \int_0^\tau |x(t)|^2 \dd t\ = \frac{1}{2}|a|^2\tau\ , \qquad
P_x := \frac{1}{\tau}E_x = \frac{1}{2}|a|^2\ .\]

The power \(P_x\) can be interpreted as the energy \(E_x\) per unit time interval. Unit-wise, integrating over \(t\) results in multiplication with seconds. Hence, \(E_x\) has unit \(\text{V}^2\text{s}\) and \(P_x\) has the unit \(\text{V}^2\).

Applying the Fourier transform to \(x(t)\), i.e.,

\[X(f) = \int_{\IR} x(t)\, \e^{-2\jj\pi f t}\, \dd t
     = \frac{a \tau}{2\jj} \Big(
        \sinc\!\big(\tau (f-f_x)\big) - \sinc\!\big(\tau (f+f_x)\big)
       \Big)\e^{-\jj\pi\tau f}\ ,\]

results in two \(\sinc(f) := \sin(\pi f) /(\pi f)\) functions centered at \(\pm f_x\). The magnitude (absolute value) \(|X(f)|\) has two maxima located at \(\pm f_x\) with value \(|a|\tau/2\). It can be seen in the plot below that \(X(f)\) is not concentrated around the main lobes at \(\pm f_x\), but contains side lobes with heights decreasing proportional to \(1/(\tau f)\). This so-called "spectral leakage"\[4\] is caused by confining the sine to a finite interval. Note that the shorter the signal duration \(\tau\) is, the higher the leakage. To be independent of the signal duration, the so-called "amplitude spectrum" \(X(f)/\tau\) can be used instead of the spectrum \(X(f)\). Its value at \(f\) corresponds to the amplitude of the complex exponential \(\exp(\jj2\pi f
t)\).

Due to Parseval's theorem, the energy can be calculated from its Fourier transform \(X(f)\) by

\[E_X :=  \int_\IR \abs{X(f)}^2 \dd f = E_x\]

as well. E.g., it can be shown by direct calculation that the energy of \(X(f)\) of Eq. :math`eq_SpectA_FT_Energy` is \(|a|^2\tau/2\). Hence, the signal's power in a frequency band \([f_a, f_b]\) can be determined with

\[P_X^{a,b} =  \frac{1}{\tau} \int_{f_a}^{f_b} \abs{X(f)}^2 \dd f\ .\]

Thus the function \(|X(f)|^2\) can be defined as the so-called "energy spectral density and \(S_{xx}(f) := |X(f)|^2 / \tau\) as "power spectral density" (PSD) of \(x(t)\). Instead of the PSD, the so-called "amplitude spectral density" \(X(f) / \sqrt{\tau}\) is also used, which still contains the phase information. Its absolute square is the PSD and thus it is closely related to the concept of the root-mean-square (RMS) value \(\sqrt{P_x}\) of a signal.

In summary, this subsection presented five ways to represent a spectrum:

|                           | Spectrum                 | Amplitude Spectrum | Energy Spectral Density            | Power Spectral Density (PSD) | Amplitude Spectral Density      |
| ------------------------- | ------------------------ | ------------------ | ---------------------------------- | ---------------------------- | ------------------------------- |
| Definition:               | \(X(f)\)                 | \(X(f) / \tau\)    | \(|X(f)|^2\)                       | \(|X(f)|^2 / \tau\)          | \(X(f) / \sqrt{\tau}\)          |
| Magnitude at \(\pm f_x\): | \(\frac{1}{2}|a|\tau\)   | \(\frac{1}{2}|a|\) | \(\frac{1}{4}|a|^2\tau^2\)         | \(\frac{1}{4}|a|^2\tau\)     | \(\frac{1}{2}|a|\sqrt{\tau}\)   |
| Unit:                     | \(\text{V} / \text{Hz}\) | \(\text{V}\)       | \(\text{V}^2\text{s} / \text{Hz}\) | \(\text{V}^2 / \text{Hz}\)   | \(\text{V} / \sqrt{\text{Hz}}\) |

Comparison of Spectral Representations of sine signal \(x(t)\) of Eq. :math`eq_SpectA_sine` with unit \(\text{V}\):

Note that the units presented in the table above are not unambiguous, e.g., \(\text{V}^2\text{s} / \text{Hz} = \text{V}^2\text{s}^2 = \text{V}^2/
\text{Hz}^2\). When using the absolute value of \(|X(f) / \tau|\) of the amplitude spectrum, it is called a magnitude spectrum. Furthermore, note that the naming scheme of the representations is not consistent and varies in literature.

For real-valued signals the so-called "onesided" spectral representation is often utilized. It only uses the non-negative frequencies (due to \(X(-f)= \conj{X}(f)\) if \(x(t)\in\IR\)). Sometimes the values of the negative frequencies are added to their positive counterparts. Then the amplitude spectrum allows to read off the full (not half) amplitude sine of \(x(t)\) at \(f_x\) and the area of an interval in the PSD represents its full (not half) power. Note that for amplitude spectral densities the positive values are not doubled but multiplied by \(\sqrt{2}\), since it is the square root of the PSD. Furthermore, there is no canonical way for naming a doubled spectrum.

The following plot shows three different spectral representations of four sine signals \(x(t)\) of Eq. :math`eq_SpectA_sine` with different amplitudes \(a\) and durations \(\tau\). For less clutter, the spectra are centered at \(f_x\) and being are plotted next to each other:

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_ContinuousSpectralRepresentations.py

</div>

Note that depending on the representation, the height of the peaks vary. Only the interpretation of the magnitude spectrum is straightforward: The peak at \(f_x\) in the second plot represents half the magnitude \(|a|\) of the sine signal. For all other representations the duration \(\tau\) needs to be taken into account to extract information about the signal's amplitude.

### Sampled Sine Signal

In practice sampled signals are widely used. I.e., the signal is represented by \(n\) samples \(x_k := x(kT)\), \(k=0, \ldots, n-1\), where \(T\) is the sampling interval, \(\tau:=nT\) the signal's duration and \(f_S := 1/T\) the sampling frequency. Note that the continuous signal needs to be band-limited to \([-f_S/2,
f_S/2]\) to avoid aliasing, with \(f_S/2\) being called Nyquist frequency. \[5\] Replacing the integral by a sum to calculate the signal's energy and power, i.e.,

\[E_x = T\sum_{k=0}^{n-1} \abs{x_k}^2 = \frac{1}{2}|a|^2\tau\ , \qquad
P_x = \frac{1}{\tau}E_x =  \frac{1}{2}|a|^2\ ,\]

delivers the identical result as in the continuous time case of Eq. :math`eq_SpectA_ContEnergy`. The discrete Fourier transform (DFT) and its inverse (as implemented using efficient FFT calculations in the `scipy.fft` module) is given by

\[X_l := \sum_{k=0}^{n-1} x_k \e^{-2\jj\pi k l / n}\ ,\qquad
x_k = \frac{1}{n} \sum_{l=0}^{n-1} X_l \e^{2\jj\pi k l / n}\ .\]

The DFT and can be interpreted as an unscaled sampled version of the continuous Fourier transform of Eq. :math`eq_SpectA_FT_sine`, i.e.,

\[X(l\Delta f) = T X_l\ , \quad \Delta f := 1/\tau = 1/(nT)\ .\]

The following plot shows the magnitude spectrum of two sine signals with unit amplitude and frequencies of 20 Hz and 20.5 Hz. The signal is made up of \(n=100\) samples with a sampling interval of \(T=10\) ms resulting in a duration of \(\tau=1\) s and a sampling frequency of \(f_S=100\) Hz.

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_TwoSinesNoWindow.py

</div>

The interpretation of the 20 Hz signal seems straightforward: All values are zero except at 20 Hz. There it is 0.5, which corresponds to half the amplitude of the input signal in accordance with Eq. :math`eq_SpectA_sine`. The peak of the 20.5 Hz signal on the other hand is dispersed along the frequency axis. Eq. :math`eq_SpectA_FT_sine` shows that this difference is caused by the reason that 20 Hz is a multiple of the bin width of 1 Hz whereas 20.5 Hz is not. The following plot illustrates this by overlaying continuous spectrum over the sampled one:

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_SampledContinuousSpectrum.py

</div>

That a slight variation in frequency produces significantly different looking magnitude spectra is obviously undesirable behavior for many practical applications. The following two common techniques can be utilized to improve a spectrum:

The so-called "zero-padding" decreases \(\Delta f\) by appending zeros to the end of the signal. To oversample the frequency <span class="title-ref">q</span> times, pass the parameter `n=q*n_x` to the <span class="title-ref">\~scipy.fft.fft</span> / <span class="title-ref">\~scipy.fft.rfft</span> function with `n_x` being the length of the input signal.

The second technique is called windowing, i.e., multiplying the input signal with a suited function such that typically the secondary lobes are suppressed at the cost of widening the main lobe. The windowed DFT can be expressed as

\[X^w_l := \sum_{k=0}^{n-1} x_k w_k\e^{-2\jj\pi k l / n}\ ,\]

where \(w_k\), \(k=0,\ldots,n-1\) is the sampled window function. To calculate the sampled versions of the spectral representations given in the previous subsection, the following normalization constants

\[c^\text{amp}:= \abs{\sum_{k=0}^{n-1} w_k}\ ,\qquad
c^\text{den} := \sqrt{\sum_{k=0}^{n-1} \abs{w_k}^2}\]

need to be utilized. The first one ensures that a peak in the spectrum is consistent with the signal's amplitude at that frequency. E.g., the magnitude spectrum can be expressed by \(|X^w_l / c^\text{amp}|\). The second constant guarantees that the power of a frequency interval as defined in Eq. :math`eq_SpectA_FT_PowerI` is consistent. The absolute values are needed since complex-valued windows are not forbidden.

The following plot shows the result of applying a <span class="title-ref">\~scipy.signal.windows.hann</span> window and three times over-sampling to \(x(t)\):

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_MagnitudeSpectrum\_Hann\_3x.py

</div>

Now both lobes look almost identical and the side lobes are well suppressed. The maximum of the 20.5 Hz spectrum is also very close to the expected height of one half.

Spectral energy and spectral power can be calculated analogously to Eq. :math`eq_SpectA_FT_Energy`, yielding in identical results, i.e.,

\[E^w_X = T\sum_{k=0}^{n-1} \abs{\frac{X^w_k}{c^\text{den}}}^2
      = E_x\ ,\qquad
P^w_X = \frac{1}{\tau} E^w_X
      = \frac{1}{n} \sum_{k=0}^{n-1} \abs{\frac{X^w_k}{c^\text{den}}}^2
      = P_x\ .\]

This formulation is not to be confused with the special case of a rectangular window (or no window), i.e., \(w_k = 1\), \(X^w_l=X_l\), \(c^\text{den}=\sqrt{n}\), which results in

\[E_X = \frac{T}{n}\sum_{k=0}^{n-1} \abs{X_k}^2\ ,\qquad
P_X  = \frac{1}{n^2} \sum_{k=0}^{n-1} \abs{X_k}^2\ .\]

The windowed frequency-discrete power spectral density

\[S^w_{xx} := \frac{1}{f_S}\abs{\frac{X^w_l}{c^\text{den}}}^2
          = T \abs{\frac{X^w_l}{c^\text{den}}}^2\]

is defined over the frequency range \([0, f_S)\) and can be interpreted as power per frequency interval \(\Delta f\). Integrating over a frequency band \([l_a\Delta f, l_b\Delta f)\), like in Eq. :math`eq_SpectA_FT_PowerI`, becomes the sum

\[P_X^{a,b} = \Delta f\sum_{k=l_a}^{l_b-1} S^w_{xx}
          = \frac{1}{nT}\sum_{k=l_a}^{l_b-1} S^w_{xx}\ .\]

The windowed frequency-discrete energy spectral density \(\tau S^w_{xx}\) can be defined analogously.

The discussion above shows that sampled versions of the spectral representations as in the continuous-time case can be defined. The following tables summarizes these:

|             | Spectrum                      | Amplitude Spectrum       | Energy Spectral Density             | Power Spectral Density (PSD)   | Amplitude Spectral Density        |
| ----------- | ----------------------------- | ------------------------ | ----------------------------------- | ------------------------------ | --------------------------------- |
| Definition: | \(\tau X^w_l / c^\text{amp}\) | \(X^w_l / c^\text{amp}\) | \(\tau T |X^w_l / c^\text{den}|^2\) | \(T |X^w_l / c^\text{den}|^2\) | \(\sqrt{T} X^w_l / c^\text{den}\) |
| Unit:       | \(\text{V} / \text{Hz}\)      | \(\text{V}\)             | \(\text{V}^2\text{s} / \text{Hz}\)  | \(\text{V}^2 / \text{Hz}\)     | \(\text{V} / \sqrt{\text{Hz}}\)   |

Comparison of Spectral Representations of a windowed DFT \(X^w_l\) of Eq. :math`eq_SpectA_WDFT` for a sampled signal with unit \(\text{V}\):

Note that for the densities, the magnitude values at \(\pm f_x\) differ to the continuous time case due the change from integration to summation for determining spectral energy/power.

Though the hann window is the most common window function used in spectral analysis, other windows exist. The following plot shows the magnitude spectrum of various window functions of the `~scipy.signal.windows` submodule. It may be interpreted as the lobe shape of a single frequency input signal. Note that only the right half is shown and the \(y\)-axis is in decibel, i.e., it is logarithmically scaled.

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_SpectralLeakageWindows.py

</div>

This plot shows that the choice of window function is typically a trade-off between width of the main lobes and the height of the side lobes. Note that the <span class="title-ref">\~scipy.signal.windows.boxcar</span> window corresponds to a \(\rect\) function, i.e., to no windowing. Furthermore, many of the depicted windows are more frequently used in filter design than in spectral analysis.

### Phase of Spectrum

The phase (i.e., <span class="title-ref">\~numpy.angle()</span>) of the Fourier transform is typically utilized for investigating the time delay of the spectral components of a signal passing through a system like a filter. In the following example the standard test signal, an impulse with unit power, is passed through a simple filter, which delays the input by three samples. The input consists of \(n=50\) samples with sampling interval \(T =
1\) s. The plot shows magnitude and phase over frequency of the input and the output signal:

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_SpectrumPhaseDelay.py

</div>

The input has a unit magnitude and zero-phase Fourier transform, which is the reason for the use as a test signal. The output has also unit magnitude but a linearly falling phase with a slope of \(-6\pi\). This is expected, since delaying a signal \(x(t)\) by \(\Delta t\) produces an additional linear phase term in its Fourier transform, i.e.,

\[\int_\IR x(t-\Delta t) \e^{-\jj2\pi f t}\dd t =
X(f)\,  e^{-\jj2\pi \Delta t f}\ .\]

Note that in the plot the phase is not limited to the interval \((+\pi, \pi]\) (output of <span class="title-ref">\~numpy.angle</span>) and hence does not have any discontinuities. This is achieved by utilizing the <span class="title-ref">numpy.unwrap</span> function. If the transfer function of the filter is known, <span class="title-ref">\~scipy.signal.freqz</span> can be used to determine the spectral response of a filter directly.

### Spectra with Averaging

The <span class="title-ref">\~scipy.signal.periodogram</span> function calculates a power spectral density (`scaling='density'`) or a squared magnitude spectrum (`scaling='spectrum'`). To obtain a smoothed periodogram, the <span class="title-ref">\~scipy.signal.welch</span> function can be used. It does the smoothing by dividing the input signal into overlapping segments, to then calculate the windowed DFT of each segment. The result is to the average of those DFTs.

The example below shows the squared magnitude spectrum and the power spectral density of a signal made up of a \(1.27\,\text{kHz}\) sine signal with amplitude \(\sqrt{2}\,\text{V}\) and additive gaussian noise having a spectral power density with mean of \(10^{-3}\,\text{V}^2/\text{Hz}\).

<div class="plot">

tutorial/examples/signal\_SpectralAnalysis\_PeriodogramWelch.py

</div>

The plots shows that the <span class="title-ref">\~scipy.signal.welch</span> function produces a much smoother noise floor at the expense of the frequency resolution. Due to the smoothing the height of sine's lobe is wider and not as high as in the periodogram. The left plot can be used to read the height of the lobe, i.e., half sine's squared magnitude of \(1\,\text{V}^2\). The right plot can be used to determine the noise floor of \(10^{-3}\,\text{V}^2/\text{Hz}\). Note that the lobe height of the averaged squared magnitude spectrum is not exactly one due to limited frequency resolution. Either zero-padding (e.g., passing `nfft=4*len(x)` to <span class="title-ref">\~scipy.signal.welch</span>) or reducing the number of segments by increasing the segment length (setting parameter `nperseg`) could be utilized to increase the number of frequency bins.

### Lomb-Scargle Periodograms (<span class="title-ref">lombscargle</span>)

Least-squares spectral analysis (LSSA)\[6\]\[7\] is a method of estimating a frequency spectrum, based on a least-squares fit of sinusoids to data samples, similar to Fourier analysis. Fourier analysis, the most used spectral method in science, generally boosts long-periodic noise in long-gapped records; LSSA mitigates such problems.

The Lomb-Scargle method performs spectral analysis on unevenly-sampled data and is known to be a powerful way to find, and test the significance of, weak periodic signals.

For a time series comprising \(N_{t}\) measurements \(X_{j}\equiv
X(t_{j})\) sampled at times \(t_{j}\), where \((j = 1, \ldots, N_{t})\), assumed to have been scaled and shifted, such that its mean is zero and its variance is unity, the normalized Lomb-Scargle periodogram at frequency \(f\) is

\[P_{n}(f) = \frac{1}{2}\left\{\frac{\left[\sum_{j}^{N_{t}}X_{j}\cos\omega(t_{j}-\tau)\right]^{2}}{\sum_{j}^{N_{t}}\cos^{2}\omega(t_{j}-\tau)}+\frac{\left[\sum_{j}^{N_{t}}X_{j}\sin\omega(t_{j}-\tau)\right]^{2}}{\sum_{j}^{N_{t}}\sin^{2}\omega(t_{j}-\tau)}\right\}.\]

Here, \(\omega \equiv 2\pi f\) is the angular frequency. The frequency-dependent time offset \(\tau\) is given by

\[\tan 2\omega\tau = \frac{\sum_{j}^{N_{t}}\sin 2\omega t_{j}}{\sum_{j}^{N_{t}}\cos 2\omega t_{j}}.\]

The <span class="title-ref">lombscargle</span> function calculates the periodogram using a slightly modified algorithm created by Zechmeister and Kürster\[8\], which allows for the weighting of individual samples and calculating an unknown offset (also called a "floating-mean") for each frequency independently.

<div class="currentmodule">

scipy.signal.ShortTimeFFT

</div>

## Short-Time Fourier Transform

This section gives some background information on using the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> class: The short-time Fourier transform (STFT) can be utilized to analyze the spectral properties of signals over time. It divides a signal into overlapping chunks by utilizing a sliding window and calculates the Fourier transform of each chunk. For a continuous-time complex-valued signal \(x(t)\) the STFT is defined\[9\] as

\[S(f, t) := \int_\IR x(\xi)\, \conj{w(\xi-t)}\,\e^{-\jj2\pi f \xi}\dd\xi\ ,\]

where \(w(t)\) is a complex-valued window function with its complex conjugate being \(\conj{w(t)}\). It can be interpreted as determining the scalar product of \(x\) with the window \(w\) which is translated by the time \(t\) and then modulated (i.e., frequency-shifted) by the frequency \(f\). For working with sampled signals \(x[k] := x(kT)\), \(k\in\IZ\), with sampling interval \(T\) (being the inverse of the sampling frequency <span class="title-ref">fs</span>), the discrete version, i.e., only evaluating the STFT at discrete grid points \(S[q, p] := S(q \Delta f, p\Delta t)\), \(q,p\in\IZ\), needs to be used. It can be formulated as

\[S[q,p] = \sum_{k=0}^{N-1} x[k]\,\conj{w[k-p h]}\, \e^{-\jj2\pi q k / N}\ ,
          \quad q,p\in\IZ\ ,\]

with <span class="title-ref">p</span> representing the time index of \(S\) with time interval \(\Delta t := h T\), \(h\in\IN\) (see <span class="title-ref">delta\_t</span>), which can be expressed as the <span class="title-ref">hop</span> size of \(h\) samples. \(q\) represents the frequency index of \(S\) with step size \(\Delta f := 1 / (N T)\) (see <span class="title-ref">delta\_f</span>), which makes it FFT compatible. \(w[m] := w(mT)\), \(m\in\IZ\) is the sampled window function.

To be more aligned to the implementation of <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span>, it makes sense to reformulate Eq. :math`eq_dSTFT` as a two-step process:

1.  Extract the \(p\)-th slice by windowing with the window \(w[m]\) made up of \(M\) samples (see <span class="title-ref">m\_num</span>) centered at \(t[p] :=  p \Delta t = h T\) (see <span class="title-ref">delta\_t</span>), i.e.,
    
    \[x_p[m] = x\!\big[m - \lfloor M/2\rfloor + h p\big]\, \conj{w[m]}\ ,
             \quad m = 0, \ldots M-1\ ,\]
    
    where the integer \(\lfloor M/2\rfloor\) represents `M//2`, i.e., it is the mid point of the window (<span class="title-ref">m\_num\_mid</span>). For notational convenience, \(x[k]:=0\) for \(k\not\in\{0, 1, \ldots, N-1\}\) is assumed. In the subsection \[tutorial\_stft\_sliding\_win\](\#tutorial\_stft\_sliding\_win) the indexing of the slices is discussed in more detail.

2.  Then perform a discrete Fourier transform (i.e., an \[FFT \<tutorial\_FFT\>\](\#fft-\<tutorial\_fft\>)) of \(x_p[m]\).
    
    \[S[q, p] = \sum_{m=0}^{M-1} x_p[m] \exp\!\big\{%
                                     -2\jj\pi (q + \phi_m)\, m / M\big\}\ .\]
    
    Note that a linear phase \(\phi_m\) (see <span class="title-ref">phase\_shift</span>) can be specified, which corresponds to shifting the input by \(\phi_m\) samples. The default is \(\phi_m = \lfloor M/2\rfloor\) (corresponds per definition to `phase_shift = 0`), which suppresses linear phase components for unshifted signals. Furthermore, the FFT may be oversampled by padding \(w[m]\) with zeros. This can be achieved by specifying <span class="title-ref">mfft</span> to be larger than the window length <span class="title-ref">m\_num</span>---this sets \(M\) to <span class="title-ref">mfft</span> (implying that also \(w[m]:=0\) for \(m\not\in\{0, 1, \ldots, M-1\}\) holds).

The inverse short-time Fourier transform (<span class="title-ref">istft</span>) is implemented by reversing these two steps:

1.  Perform the inverse discrete Fourier transform, i.e.,
    
    \[x_p[m] = \frac{1}{M}\sum_{q=0}^M S[q, p]\, \exp\!\big\{
                                        2\jj\pi (q + \phi_m)\, m / M\big\}\ .\]

2.  Sum the shifted slices weighted by \(w_d[m]\) to reconstruct the original signal, i.e.,
    
    \[x[k] = \sum_p x_p\!\big[\mu_p(k)\big]\, w_d\!\big[\mu_p(k)\big]\ ,\quad
           \mu_p(k) = k + \lfloor M/2\rfloor - h p\]
    
    for \(k \in [0, \ldots, n-1]\). \(w_d[m]\) is the so-called canonical dual window of \(w[m]\) and is also made up of \(M\) samples.

Note that an inverse STFT does not necessarily exist for all windows and hop sizes. For a given window \(w[m]\) the hop size \(h\) must be small enough to ensure that every sample of \(x[k]\) is touched by a non-zero value of at least one window slice. This is sometimes referred as the "non-zero overlap condition" (see <span class="title-ref">\~scipy.signal.check\_NOLA</span>). Some more details are given in the subsection \[tutorial\_stft\_dual\_win\](\#tutorial\_stft\_dual\_win).

### Sliding Windows

This subsection discusses how the sliding window is indexed in the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> by means of an example: Consider a window of length 6 with a <span class="title-ref">hop</span> interval of two and a sampling interval <span class="title-ref">T</span> of one, e.g., `ShortTimeFFT (np.ones(6), 2, fs=1)`. The following image schematically depicts the first four window positions also named time slices:

![](../_static/tutorial_stft_sliding_win_start.svg)

The x-axis denotes the time \(t\), which corresponds to the sample index <span class="title-ref">k</span> indicated by the bottom row of blue boxes. The y-axis denotes the time slice index \(p\). The signal \(x[k]\) starts at index \(k=0\) and is marked by a light blue background. Per definition the zeroth slice (\(p=0\)) is centered at \(t=0\). The center of each slice (<span class="title-ref">m\_num\_mid</span>), here being the sample `6//2=3`, is marked by the text "mid". By default the <span class="title-ref">stft</span> calculates all slices which have some overlap with the signal. Hence the first slice is at <span class="title-ref">p\_min</span> = -1 with the lowest sample index being <span class="title-ref">k\_min</span> = -5. The first sample index unaffected by a slice not sticking out to the left of the signal is \(p_{lb} = 2\) and the first sample index unaffected by border effects is \(k_{lb} = 5\). The property <span class="title-ref">lower\_border\_end</span> returns the tuple \((k_{lb}, p_{lb})\).

The behavior at the end of the signal is depicted for a signal with \(n=50\) samples below, as indicated by the blue background:

![](../_static/tutorial_stft_sliding_win_stop.svg)

Here the last slice has index \(p=26\). Hence, following Python convention of the end index being outside the range, <span class="title-ref">p\_max</span> = 27 indicates the first slice not touching the signal. The corresponding sample index is <span class="title-ref">k\_max</span> = 55. The first slice, which sticks out to the right is \(p_{ub} = 24\) with its first sample at \(k_{ub}=45\). The function <span class="title-ref">upper\_border\_begin</span> returns the tuple \((k_{ub}, p_{ub})\).

### Inverse STFT and Dual Windows

The term dual window stems from frame theory\[10\] where a frame is a series expansion which can represent any function in a given Hilbert space. There the expansions \(\{g_k\}\) and \(\{h_k\}\) are dual frames if for all functions \(f\) in the given Hilbert space \(\mathcal{H}\)

\[f  = \sum_{k\in\IN} \langle f, g_k\rangle h_k
   =  \sum_{k\in\IN} \langle f, h_k\rangle g_k\ , \quad f \in \mathcal{H}\ ,\]

holds, where \(\langle ., .\rangle\) denotes the scalar product of \(\mathcal{H}\). All frames have dual frames\[11\].

An STFT evaluated only at discrete grid points \(S(q \Delta f, p\Delta t)\) is called a "Gabor frame" in literature\[12\]\[13\]. Since the support of the window \(w[m]\) is limited to a finite interval, the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> falls into the class of the so-called "painless non-orthogonal expansions"\[14\]. In this case the dual windows always have the same support and can be calculated by means of inverting a diagonal matrix. A rough derivation only requiring some understanding of manipulating matrices will be sketched out in the following:

Since the STFT given in Eq. :math`eq_dSTFT` is a linear mapping in \(x[k]\), it can be expressed in vector-matrix notation. This allows us to express the inverse via the formal solution of the linear least squares method (as in <span class="title-ref">\~scipy.linalg.lstsq</span>), which leads to a beautiful and simple result.

We begin by reformulating the windowing of Eq. :math`eq_STFT_windowing`

\[\begin{aligned}
\vb{x}_p  = \vb{W}_{\!p}\,\vb{x} =
\begin{bmatrix}
  \cdots & 0 & w[0]   & 0 & \cdots&&&\\
  & \cdots  & 0 & w[1] & 0 & \cdots&&\\
  &   &   &         & \ddots&&&\\
  &&\cdots & 0 & 0 & w[M-1] & 0 & \cdots
\end{bmatrix}\begin{bmatrix}
  x[0]\\ x[1]\\ \vdots\\ x[N-1]
\end{bmatrix}\ ,
\end{aligned}\]

where the \(M\times N\) matrix \(\vb{W}_{\!p}\) has only non-zeros entries on the \((ph)\)-th minor diagonal, i.e.,

\[\begin{aligned}
W_p[m,k] = w[m]\, \delta_{m+ph,k}\ ,\quad
\delta_{k,l} &= \begin{cases} 1 & \text{ for } k=l\ ,\\
                            0 & \text{ elsewhere ,} \end{cases}
\end{aligned}\]

with \(\delta_{k,l}\) being the Kronecker Delta. Eq. :math`eq_STFT_DFT` can be expressed as

\[\vb{s}_p = \vb{F}\,\vb{x}_p \quad\text{with}\quad
F[q,m] =\exp\!\big\{-2\jj\pi (q + \phi_m)\, m / M\big\}\ ,\]

which allows the STFT of the \(p\)-th slice to be written as

\[\vb{s}_p = \vb{F}\vb{W}_{\!p}\,\vb{x} =: \vb{G}_p\,\vb{x}
\quad\text{with}\quad s_p[q] = S[p,q]\ .\]

Note that \(\vb{F}\) is unitary, i.e., the inverse equals its conjugate transpose meaning \(\conjT{\vb{F}}\vb{F} = \vb{I}\).

To obtain a single vector-matrix equation for the STFT, the slices are stacked into one vector, i.e.,

\[\begin{aligned}
\vb{s} := \begin{bmatrix}
           \vb{s}_0\\ \vb{s}_1\\ \vdots\\ \vb{s}_{P-1}
          \end{bmatrix}
      = \begin{bmatrix}
           \vb{G}_0\\ \vb{G}_1\\ \vdots\\ \vb{G}_{P-1}
        \end{bmatrix}\, \vb{x}
      =:  \vb{G}\, \vb{x}\ ,
\end{aligned}\]

where \(P\) is the number of columns of the resulting STFT. To invert this equation the Moore-Penrose inverse \(\vb{G}^\dagger\) can be utilized

\[\vb{x} = \inv{\conjT{\vb{G}}\vb{G}}\, \conjT{\vb{G}} \vb{s}
       =: \vb{G}^\dagger \vb{s}\ ,\]

which exists if

\[\begin{aligned}
\vb{D} := \conjT{\vb{G}}\vb{G} =
    \begin{bmatrix}
        \conjT{\vb{G}_0}& \conjT{\vb{G}_1}& \cdots &  \conjT{\vb{G}_{P-1}}
    \end{bmatrix}^T \begin{bmatrix}
        \vb{G}_0\\ \vb{G}_1\\ \vdots\\ \vb{G}_{P-1}
    \end{bmatrix}
  = \sum_{p=0}^{P-1} \conjT{\vb{G}_p}\vb{G}_p \ .
\end{aligned}\]

is invertible. Then \(\vb{x} = \vb{G}^\dagger\vb{G}\,\vb{x} =
\inv{\conjT{\vb{G}}\vb{G}}\,\conjT{\vb{G}}\vb{G}\,\vb{x}\) obviously holds. \(\vb{D}\) is always a diagonal matrix with non-negative diagonal entries. This becomes clear, when simplifying \(\vb{D}\) further to

\[\vb{D} = \sum_{p=0}^{P-1} \conjT{\vb{G}_p}\vb{G}_p
       = \sum_{p=0}^{P-1} \conjT{(\vb{F}\,\vb{W}_{\!p})}\,
                          \vb{F}\,\vb{W}_{\!p}
       = \sum_{p=0}^{P-1} \conjT{\vb{W}_{\!p}}\vb{W}_{\!p}
       =: \sum_{p=0}^{P-1} \vb{D}_p\]

due to \(\vb{F}\) being unitary. Furthermore

\[\begin{aligned}
D_p[r,s] &= \sum_{m=0}^{M-1} \conj{W_p^T[r,m]}\,W_p[m,s]
          = \sum_{m=0}^{M-1} \left(\conj{w[m]}\, \delta_{m+ph,r}\right)
                             \left(w[m]\, \delta_{m+ph,s}\right)\\
         &= \sum_{m=0}^{M-1} \big|w[m]\big|^2\,
                             \delta_{r,s}\, \delta_{r,m+ph}\ .
\end{aligned}\]

shows that \(\vb{D}_p\) is a diagonal matrix with non-negative entries. Hence, summing \(\vb{D}_p\) preserves that property. This allows to simplify Eq. :math`eq_STFT_MoorePenrose` further, i.e.,

\[\begin{aligned}
\vb{x} &= \vb{D}^{-1} \conjT{\vb{G}}\vb{s}
        = \sum_{p=0}^{P-1} \vb{D}^{-1}\conjT{\vb{W}_{\!p}}\,
                           \conjT{\vb{F}}\vb{s}_p
        =  \sum_{p=0}^{P-1} (\conj{\vb{W}_{\!p}\vb{D}^{-1}})^T\,
                            \conjT{\vb{F}}\vb{s}_p\\
       &=: \sum_{p=0}^{P-1}\conjT{\vb{U}_p}\,\conjT{\vb{F}}\vb{s}_p\ .
\end{aligned}\]

Utilizing Eq. :math`eq_STFT_WinMatrix1`, :math`eq_STFT_DiagM2`, :math`eq_STFT_DiagM3`, \(\vb{U}_p=\vb{W}_{\!p}\vb{D}^{-1}\) can be expressed as

\[\begin{aligned}
U_p[m, k] &= W[m,k]\, D^{-1}[k,k]
           = \left(w[m] \delta_{m+ph,k}\right)
             \inv{\sum_{\eta=0}^{P-1}  \vb{D}_\eta[k,k]} \delta_{m+ph,k}\\
           &= w[m] \inv{\sum_{\eta=0}^{P-1}\sum_{\mu=0}^{M-1}
                             \big|w[\mu]\big|^2\,\delta_{m+ph, \mu+\eta h}}
                   \delta_{m+ph,k}\\
            &= w[m] \inv{\sum_{\eta=0}^{P-1} \big|w[m+(p-\eta)h]\big|^2}
                   \delta_{m+ph,k} \ .
\end{aligned}\]

This shows \(\vb{U}_p\) has the identical structure as \(\vb{W}_p\) in Eq. :math`eq_STFT_WinMatrix1`, i.e., having only non-zero entries on the \((ph)\)-th minor diagonal. The sum term in the inverse can be interpreted as sliding \(|w[\mu]|^2\) over \(w[m]\) (with an incorporated inversion), so only components overlapping with \(w[m]\) have an effect. Hence, all \(U_p[m, k]\) far enough from the border are identical windows. To circumvent border effects, \(x[k]\) is padded with zeros, enlarging \(\vb{U}\) so all slices which touch \(x[k]\) contain the identical dual window

\[w_d[m] = w[m] \inv{\sum_{\eta\in\IZ} \big|w[m + \eta\, h]\big|^2}\ .\]

Since \(w[m] = 0\) holds for \(m \not\in\{0, \ldots, M-1\}\), it is only required to sum over the indexes \(\eta\) fulfilling \(|\eta| < M/h\). The name dual window can be justified by inserting Eq. :math`eq_STFT_Slice_p` into Eq. :math`eq_STFT_istftM`, i.e.,

\[\vb{x} = \sum_{p=0}^{P-1} \conjT{\vb{U}_p}\,\conjT{\vb{F}}\,
                                             \vb{F}\,\vb{W}_{\!p}\,\vb{x}
    = \left(\sum_{p=0}^{P-1} \conjT{\vb{U}_p}\,\vb{W}_{\!p}\right)\vb{x}\ ,\]

showing that \(\vb{U}_p\) and \(\vb{W}_{\!p}\) are interchangeable. Hence, \(w_d[m]\) is also a valid window with dual window \(w[m]\). Note that \(w_d[m]\) is not a unique dual window, due to \(\vb{s}\) typically having more entries than \(\vb{x}\). It can be shown, that \(w_d[m]\) has the minimal energy (or \(L_2\) norm)\[15\], which is the reason for being named the "canonical dual window".

### Comparison with Legacy Implementation

The functions <span class="title-ref">stft \<scipy.signal.stft\></span>, <span class="title-ref">istft \<scipy.signal.istft\></span>, and the <span class="title-ref">spectrogram \<scipy.signal.spectrogram\></span> predate the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> implementation. This section discusses the key differences between the older "legacy" and the newer <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> implementations. The main motivation for a rewrite was the insight that integrating \[dual windows \<tutorial\_stft\_dual\_win\>\](\#dual windows-\<tutorial\_stft\_dual\_win\>) could not be done in a sane way without breaking compatibility. This opened the opportunity for rethinking the code structure and the parametrization, thus making some implicit behavior more explicit.

The following example compares the two STFTs of a complex valued chirp signal with a negative slope:

<div class="plot">

\>\>\> import matplotlib.pyplot as plt \>\>\> import numpy as np \>\>\> from scipy.fft import fftshift \>\>\> from scipy.signal import stft, istft, spectrogram, ShortTimeFFT ... \>\>\> fs, N = 200, 1001 \# 200 Hz sampling rate for 5 s signal \>\>\> t\_z = np.arange(N) / fs \# time indexes for signal \>\>\> z = np.exp(2j\*np.pi\*70 \* (t\_z - 0.2\*t\_z\**2)) \# complex-valued chirp ... \>\>\> nperseg, noverlap = 50, 40 \>\>\> win = ('gaussian', 1e-2* fs) \# Gaussian with 0.01 s standard dev. ... \>\>\> \# Legacy STFT: \>\>\> f0\_u, t0, Sz0\_u = stft(z, fs, win, nperseg, noverlap, ... return\_onesided=False, scaling='spectrum') \>\>\> f0, Sz0 = fftshift(f0\_u), fftshift(Sz0\_u, axes=0) ... \>\>\> \# New STFT: \>\>\> SFT = ShortTimeFFT.from\_window(win, fs, nperseg, noverlap, fft\_mode='centered', ... scale\_to='magnitude', phase\_shift=None) \>\>\> Sz1 = SFT.stft(z) ... \>\>\> \# Plot results: \>\>\> fig1, axx = plt.subplots(2, 1, sharex='all', sharey='all', ... figsize=(6., 5.)) \# enlarge figure a bit \>\>\> t\_lo, t\_hi, f\_lo, f\_hi = SFT.extent(N, center\_bins=True) \>\>\> axx\[0\].set\_title(r"Legacy stft() produces $%dtimes%d$ points" % Sz0.T.shape) \>\>\> axx\[0\].set\_xlim(t\_lo, t\_hi) \>\>\> axx\[0\].set\_ylim(f\_lo, f\_hi) \>\>\> axx\[1\].set\_title(r"ShortTimeFFT produces $%dtimes%d$ points" % Sz1.T.shape) \>\>\> axx\[1\].set\_xlabel(rf"Time $t$ in seconds ($Delta t= {SFT.delta\_t:g},$s)") ... \>\>\> \# Calculate extent of plot with centered bins since \>\>\> \# imshow does not interpolate by default: \>\>\> dt2 = (nperseg-noverlap) / fs / 2 \# equals SFT.delta\_t / 2 \>\>\> df2 = fs / nperseg / 2 \# equals SFT.delta\_f / 2 \>\>\> extent0 = (-dt2, t0\[-1\] + dt2, f0\[0\] - df2, f0\[-1\] - df2) \>\>\> extent1 = SFT.extent(N, center\_bins=True) ... \>\>\> kw = dict(origin='lower', aspect='auto', cmap='viridis') \>\>\> im1a = axx\[0\].imshow(abs(Sz0), extent=extent0, **kw) \>\>\> im1b = axx\[1\].imshow(abs(Sz1), extent=extent1,**kw) \>\>\> fig1.colorbar(im1b, ax=axx, label="Magnitude $$") \>\>\> \_ = fig1.supylabel(r"Frequency $f$ in Hertz ($Delta f = %g,$Hz)" % ... SFT.delta\_f, x=0.08, y=0.5, fontsize='medium') \>\>\> plt.show()

</div>

That the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> produces 3 more time slices than the legacy version is the main difference. As laid out in the \[tutorial\_stft\_sliding\_win\](\#tutorial\_stft\_sliding\_win) section, all slices which touch the signal are incorporated in the new version. This has the advantage that the STFT can be sliced and reassembled as shown in the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> code example. Furthermore, using all touching slices makes the ISTFT more robust in the case of windows that are zero somewhere.

Note that the slices with identical time stamps produce equal results (up to numerical accuracy), i.e.:

> \>\>\> np.allclose(Sz0, Sz1\[:, 2:-1\]) True

Generally, those additional slices contain non-zero values. Due to the large overlap in our example, they are quite small. E.g.:

> \>\>\> abs(Sz1\[:, 1\]).min(), abs(Sz1\[:, 1\]).max() (6.925060911593139e-07, 8.00271269218721e-07)

The ISTFT can be utilized to reconstruct the original signal:

> \>\>\> t0\_r, z0\_r = istft(Sz0\_u, fs, win, nperseg, noverlap, ... input\_onesided=False, scaling='spectrum') \>\>\> z1\_r = SFT.istft(Sz1, k1=N) ... \>\>\> len(z0\_r), len(z) (1010, 1001) \>\>\> np.allclose(z0\_r\[:N\], z) True \>\>\> np.allclose(z1\_r, z) True

Note that the legacy implementation returns a signal which is longer than the original. On the other hand, the new <span class="title-ref">istft</span> allows to explicitly specify the start index <span class="title-ref">k0</span> and the end index <span class="title-ref">k1</span> of the reconstructed signal. The length discrepancy in the old implementation is caused by the fact that the signal length is not a multiple of the slices.

Further differences between the new and legacy versions in this example are:

  - The parameter `fft_mode='centered'` ensures that the zero frequency is vertically centered for two-sided FFTs in the plot. With the legacy implementation, <span class="title-ref">fftshift \<scipy.fft.fftshift\></span> needs to be utilized. `fft_mode='twosided'` produces the same behavior as the old version.
  - The parameter `phase_shift=None` ensures identical phases of the two versions. <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span>'s default value of `0` produces STFT slices with an additional linear phase term.

A spectrogram is defined as the absolute square of the STFT\[16\]. The <span class="title-ref">spectrogram</span> provided by the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> sticks to that definition, i.e.:

> \>\>\> np.allclose(SFT.spectrogram(z), abs(Sz1)\*\*2) True

On the other hand, the legacy <span class="title-ref">spectrogram \<scipy.signal.spectrogram\></span> provides another STFT implementation with the key difference being the different handling of the signal borders. The following example shows how to use the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> to obtain an identical SFT as produced with the legacy <span class="title-ref">spectrogram \<scipy.signal.spectrogram\></span>:

> \>\>\> \# Legacy spectrogram (detrending for complex signals not useful): \>\>\> f2\_u, t2, Sz2\_u = spectrogram(z, fs, win, nperseg, noverlap, ... detrend=None, return\_onesided=False, ... scaling='spectrum', mode='complex') \>\>\> f2, Sz2 = fftshift(f2\_u), fftshift(Sz2\_u, axes=0) ... \>\>\> \# New STFT: ... SFT = ShortTimeFFT.from\_window(win, fs, nperseg, noverlap, ... fft\_mode='centered', ... scale\_to='magnitude', phase\_shift=None) \>\>\> Sz3 = SFT.stft(z, p0=0, p1=(N-noverlap)//SFT.hop, k\_offset=nperseg//2) \>\>\> t3 = SFT.t(N, p0=0, p1=(N-noverlap)//SFT.hop, k\_offset=nperseg//2) ... \>\>\> np.allclose(t2, t3) True \>\>\> np.allclose(f2, SFT.f) True \>\>\> np.allclose(Sz2, Sz3) True

The difference from the other STFTs is that the time slices do not start at 0 but at `nperseg//2`, i.e.:

> \>\>\> t2 array(\[0.125, 0.175, 0.225, 0.275, 0.325, 0.375, 0.425, 0.475, 0.525, ... 4.625, 4.675, 4.725, 4.775, 4.825, 4.875\])

Furthermore, only slices which do not stick out to the right are returned, centering the last slice at 4.875 s, which makes it shorter than with the default <span class="title-ref">stft</span> parametrization.

Using the `mode` parameter, the legacy <span class="title-ref">spectrogram \<scipy.signal.spectrogram\></span> can also return the 'angle', 'phase', 'psd' or the 'magnitude'. The <span class="title-ref">scaling</span> behavior of the legacy <span class="title-ref">spectrogram \<scipy.signal.spectrogram\></span> is not straightforward, since it depends on the parameters `mode`, `scaling` and `return_onesided`. There is no direct correspondence for all combinations in the <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span>, since it provides only 'magnitude', 'psd' or no <span class="title-ref">scaling</span> of the window at all. The following table shows those correspondences:

When using `onesided` output on complex-valued input signals, the old <span class="title-ref">spectrogram \<scipy.signal.spectrogram\></span> switches to `two-sided` mode. The <span class="title-ref">ShortTimeFFT \<scipy.signal.ShortTimeFFT\></span> raises a <span class="title-ref">TypeError</span>, since the utilized <span class="title-ref">\~scipy.fft.rfft</span> function only accepts real-valued inputs. Consult the \[tutorial\_SpectralAnalysis\](\#tutorial\_spectralanalysis) section above for a discussion on the various spectral representations which are induced by the various parameterizations.

**References**

Some further reading and related software:

1.  "Fourier transform", Wikipedia, <https://en.wikipedia.org/wiki/Fourier_transform>

2.  "Spectral density", Wikipedia, <https://en.wikipedia.org/wiki/Spectral_density>

3.  "Discrete Fourier transform", Wikipedia, <https://en.wikipedia.org/wiki/Discrete_Fourier_transform>

4.  "Spectral Leakage", Wikipedia, <https://en.wikipedia.org/wiki/Spectral_leakage>

5.  "Nyquist–Shannon sampling theorem", Wikipedia, <https://en.wikipedia.org/wiki/Nyquist-Shannon_sampling_theorem>

6.  N.R. Lomb "Least-squares frequency analysis of unequally spaced data", Astrophysics and Space Science, vol 39, pp. 447-462, 1976

7.  J.D. Scargle "Studies in astronomical time series analysis. II -Statistical aspects of spectral analysis of unevenly spaced data", The Astrophysical Journal, vol 263, pp. 835-853, 1982

8.  M. Zechmeister and M. Kürster, "The generalised Lomb-Scargle periodogram. A new formalism for the floating-mean and Keplerian periodograms," Astronomy and Astrophysics, vol. 496, pp. 577-584, 2009

9.  Karlheinz Gröchenig: "Foundations of Time-Frequency Analysis", Birkhäuser Boston 2001, `10.1007/978-1-4612-0003-1`

10. Ole Christensen: "An Introduction to Frames and Riesz Bases", Birkhäuser Boston 2016, `10.1007/978-3-319-25613-9`

11. Ole Christensen: "An Introduction to Frames and Riesz Bases", Birkhäuser Boston 2016, `10.1007/978-3-319-25613-9`

12. Karlheinz Gröchenig: "Foundations of Time-Frequency Analysis", Birkhäuser Boston 2001, `10.1007/978-1-4612-0003-1`

13. Ole Christensen: "An Introduction to Frames and Riesz Bases", Birkhäuser Boston 2016, `10.1007/978-3-319-25613-9`

14. Karlheinz Gröchenig: "Foundations of Time-Frequency Analysis", Birkhäuser Boston 2001, `10.1007/978-1-4612-0003-1`

15. Karlheinz Gröchenig: "Foundations of Time-Frequency Analysis", Birkhäuser Boston 2001, `10.1007/978-1-4612-0003-1`

16. Karlheinz Gröchenig: "Foundations of Time-Frequency Analysis", Birkhäuser Boston 2001, `10.1007/978-1-4612-0003-1`

---

sparse.md

---

# Sparse Arrays (<span class="title-ref">scipy.sparse</span>)

<div class="sectionauthor">

Levi John Wolf \<<levi.john.wolf@gmail.com>\>

</div>

<div class="currentmodule">

scipy.sparse

</div>

## Introduction

`scipy.sparse` and its submodules provide tools for working with *sparse arrays*. Sparse arrays are arrays where only a few locations in the array have any data, most of the locations are considered as "empty". Sparse arrays are useful because they allow for simpler, faster, and/or less memory-intensive algorithms for linear algebra (<span class="title-ref">scipy.sparse.linalg</span>) or graph-based computations (<span class="title-ref">scipy.sparse.csgraph</span>), but they are generally less flexible for operations like slicing, reshaping, or assignment. This guide will introduce the basics of sparse arrays in <span class="title-ref">scipy.sparse</span>, explain the unique aspects of sparse data structures, and refer onward for other sections of the user guide explaining [sparse linear algebra](https://docs.scipy.org/doc/scipy/tutorial/arpack.html) and [graph methods](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html).

## Getting started with sparse arrays

Sparse arrays are a special kind of array where only a few locations in the array have data. This allows for *compressed* representations of the data to be used, where only the locations where data exists are recorded. There are many different sparse array formats, each of which makes a different tradeoff between compression and functionality. To start, let's build a very simple sparse array, the Coordinate (COO) array (<span class="title-ref">coo\_array</span>) and compare it to a dense array:

> \>\>\> import scipy as sp \>\>\> import numpy as np \>\>\> dense = np.array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\]) \>\>\> sparse = sp.sparse.coo\_array(dense) \>\>\> dense array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\]) \>\>\> sparse \<COOrdinate sparse array of dtype 'int64' with 5 stored elements and shape (3, 4)\>

Note that in our dense array, we have five nonzero values. For example, `2` is at location `0,3`, and `4` is at location `1,1`. All of the other values are zero. The sparse array records these five values *explicitly* (see the `5 stored elements and shape (3, 4)`), and then represents all of the remaining zeros as *implicit* values.

Most sparse array methods work in a similar fashion to dense array methods:

> \>\>\> sparse.max() 5 \>\>\> dense.max() 5 \>\>\> sparse.argmax() 10 \>\>\> dense.argmax() 10 \>\>\> sparse.mean() 1.0833333333333333 \>\>\> dense.mean() 1.0833333333333333

A few "extra" properties, such as `.nnz` which returns the number of stored values, are present on sparse arrays as well:

> \>\>\> sparse.nnz 5

Most of the reduction operations, such as `.mean()`, `.sum()`, or `.max()` will return a numpy array when applied over an axis of the sparse array:

> \>\>\> sparse.mean(axis=1) array(\[0.75, 1.25, 1.25\])

This is because reductions over sparse arrays are often dense.

## Understanding sparse array formats

Different kinds of sparse arrays have different capabilities. For example, COO arrays cannot be subscripted or sliced:

> \>\>\> dense\[2, 2\] 5 \>\>\> sparse\[2, 2\] Traceback (most recent call last): File "\<stdin\>", line 1, in \<module\> TypeError: 'coo\_array' object is not subscriptable

But, other formats, such as the Compressed Sparse Row (CSR) <span class="title-ref">csr\_array()</span> support slicing and element indexing:

> \>\>\> sparse.tocsr()\[2, 2\] 5

Sometimes, <span class="title-ref">scipy.sparse</span> will return a different sparse matrix format than the input sparse matrix format. For example, the dot product of two sparse arrays in COO format will be a CSR format array:

> \>\>\> sparse @ sparse.T \<Compressed Sparse Row sparse array of dtype 'int64' with 5 stored elements and shape (3, 3)\>

This change occurs because <span class="title-ref">scipy.sparse</span> will change the format of input sparse arrays in order to use the most efficient computational method.

The <span class="title-ref">scipy.sparse</span> module contains the following formats, each with their own distinct advantages and disadvantages:

  - Block Sparse Row (BSR) arrays <span class="title-ref">scipy.sparse.bsr\_array()</span>, which are most appropriate when the parts of the array with data occur in contiguous blocks.
  - Coordinate (COO) arrays <span class="title-ref">scipy.sparse.coo\_array()</span>, which provide a simple way to construct sparse arrays and modify them in place. COO can also be quickly converted into other formats, such CSR, CSC, or BSR.
  - Compressed Sparse Row (CSR) arrays <span class="title-ref">scipy.sparse.csr\_array()</span>, which are most useful for fast arithmetic, vector products, and slicing by row.
  - Compressed Sparse Column (CSC) arrays <span class="title-ref">scipy.sparse.csc\_array()</span>, which are most useful for fast arithmetic, vector products, and slicing by column.
  - Diagonal (DIA) arrays <span class="title-ref">scipy.sparse.dia\_array()</span>, which are useful for efficient storage and fast arithmetic so long as the data primarily occurs along diagonals of the array.
  - Dictionary of Keys (DOK) arrays <span class="title-ref">scipy.sparse.dok\_array()</span>, which are useful for fast construction and single-element access.
  - List of Lists (LIL) arrays <span class="title-ref">scipy.sparse.lil\_array()</span>, which are useful for fast construction and modification of sparse arrays.

More information on the strengths and weaknesses of each of the sparse array formats can be found in [their documentation](https://docs.scipy.org/doc/scipy/reference/sparse.html#sparse-array-classes).

All formats of <span class="title-ref">scipy.sparse</span> arrays can be constructed directly from a <span class="title-ref">numpy.ndarray</span>. However, some sparse formats can be constructed in different ways, too. Each sparse array format has different strengths, and these strengths are documented in each class. For example, one of the most common methods for constructing sparse arrays is to build a sparse array from the individual `row`, `column`, and `data` values. For our array from before:

> \>\>\> dense array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\])

The `row`, `column`, and `data` arrays describe the rows, columns, and values where our sparse array has entries:

> \>\>\> row = \[0,0,1,1,2\] \>\>\> col = \[0,3,1,2,2\] \>\>\> data = \[1,2,4,1,5\]

Using these, we can now define a sparse array without building a dense array first:

> \>\>\> csr = sp.sparse.csr\_array((data, (row, col))) \>\>\> csr \<Compressed Sparse Row sparse array of dtype 'int64' with 5 stored elements and shape (3, 4)\>

Different classes have different constructors, but the <span class="title-ref">scipy.sparse.csr\_array</span>, <span class="title-ref">scipy.sparse.csc\_array</span>, and <span class="title-ref">scipy.sparse.coo\_array</span> allow for this style of construction.

## Sparse arrays, implicit zeros, and duplicates

Sparse arrays are useful because they represent much of their values *implicitly*, without storing an actual placeholder value. In <span class="title-ref">scipy.sparse</span>, the value used to represent "no data" is an *implicit zero*. This can be confusing when *explicit zeros* are required. For example, in [graph methods](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html) from <span class="title-ref">scipy.sparse.csgraph</span>, we often need to be able to distinguish between (A) a link connecting nodes `i` and `j` with zero weight and (B) no link between `i` and `j`. Sparse matrices can do this, so long as we keep the *explicit* and *implicit* zeros in mind.

For example, in our previous `csr` array, we could include an explicit zero by including it in the `data` list. Let's treat the final entry in the array at the bottom row and last column as an *explicit zero*:

> \>\>\> row = \[0,0,1,1,2,2\] \>\>\> col = \[0,3,1,2,2,3\] \>\>\> data = \[1,2,4,1,5,0\]

Then, our sparse array will have *six* stored elements, not five:

> \>\>\> csr = sp.sparse.csr\_array((data, (row, col))) \>\>\> csr \<Compressed Sparse Row sparse array of dtype 'int64' with 6 stored elements and shape (3, 4)\>

The "extra" element is our *explicit zero*. The two are still identical when converted back into a dense array, because dense arrays represent *everything* explicitly:

> \>\>\> csr.todense() array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\]) \>\>\> dense array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\])

But, for sparse arithmetic, linear algebra, and graph methods, the value at `2,3` will be considered an *explicit zero*. To remove this explicit zero, we can use the `csr.eliminate_zeros()` method. This operates on the sparse array *in place*, and removes any zero-value stored elements:

> \>\>\> csr \<Compressed Sparse Row sparse array of dtype 'int64' with 6 stored elements and shape (3, 4)\> \>\>\> csr.eliminate\_zeros() \>\>\> csr \<Compressed Sparse Row sparse array of dtype 'int64' with 5 stored elements and shape (3, 4)\>

Before `csr.eliminate_zeros()`, there were six stored elements. After, there are only five stored elements.

Another point of complication arises from how *duplicates* are processed when constructing a sparse array. A *duplicate* can occur when we have two or more entries at `row,col` when constructing a sparse array. This often occurs when building sparse arrays using the `data`, `row`, and `col` vectors. For example, we might represent our previous array with a duplicate value at `1,1`:

> \>\>\> row = \[0,0,1,1,1,2\] \>\>\> col = \[0,3,1,1,2,2\] \>\>\> data = \[1,2,1,3,1,5\]

In this case, we can see that there are *two* `data` values that correspond to the `1,1` location in our final array. <span class="title-ref">scipy.sparse</span> will store these values separately:

> \>\>\> dupes = sp.sparse.coo\_array((data, (row, col))) \>\>\> dupes \<COOrdinate sparse array of dtype 'int64' with 6 stored elements and shape (3, 4)\>

Note that there are six stored elements in this sparse array, despite only having five unique locations where data occurs. When these arrays are converted back to dense arrays, the duplicate values are summed. So, at location `1,1`, the dense array will contain the sum of duplicate stored entries, `1 + 3`:

> \>\>\> dupes.todense() array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\])

To remove duplicate values within the sparse array itself and thus reduce the number of stored elements, we can use the `.sum_duplicates()` method:

> \>\>\> dupes.sum\_duplicates() \>\>\> dupes \<COOrdinate sparse array of dtype 'int64' with 5 stored elements and shape (3, 4)\>

Now there are only five stored elements in our sparse array, and it is identical to the array we have been working with throughout this guide:

> \>\>\> dupes.todense() array(\[\[1, 0, 0, 2\], \[0, 4, 1, 0\], \[0, 0, 5, 0\]\])

## Canonical formats

Several sparse array formats have "canonical formats" to allow for more efficient operations. Generally these consist of added restrictions like:

  - No duplicate entries for any value
  - Sorted indices

Classes with a canonical form include: <span class="title-ref">coo\_array</span>, <span class="title-ref">csr\_array</span>, <span class="title-ref">csc\_array</span>, and <span class="title-ref">bsr\_array</span>. See the docstrings of these classes for details on each canonical representation.

To check if an instance of these classes is in canonical form, use the `.has_canonical_format` attribute:

> \>\>\> coo = sp.sparse.coo\_array((\[1, 1, 1\], (\[0, 2, 1\], \[0, 1, 2\]))) \>\>\> coo.has\_canonical\_format False

To convert an instance to canonical form, use the `.sum_duplicates()` method:

> \>\>\> coo.sum\_duplicates() \>\>\> coo.has\_canonical\_format True

## Next steps with sparse arrays

Sparse array types are most helpful when working with large, nearly empty arrays. Specifically, [sparse linear algebra](https://docs.scipy.org/doc/scipy/tutorial/arpack.html) and [sparse graph methods](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html) see the largest improvements in efficiency in these circumstances.

---

spatial.md

---

# Spatial Data Structures and Algorithms (<span class="title-ref">scipy.spatial</span>)

<div class="currentmodule">

scipy.spatial

</div>

<span class="title-ref">scipy.spatial</span> can compute triangulations, Voronoi diagrams, and convex hulls of a set of points, by leveraging the [Qhull](http://qhull.org/) library.

Moreover, it contains <span class="title-ref">KDTree</span> implementations for nearest-neighbor point queries, and utilities for distance computations in various metrics.

## Delaunay triangulations

The Delaunay triangulation is a subdivision of a set of points into a non-overlapping set of triangles, such that no point is inside the circumcircle of any triangle. In practice, such triangulations tend to avoid triangles with small angles.

Delaunay triangulation can be computed using <span class="title-ref">scipy.spatial</span> as follows:

<div class="plot" alt="&quot;This code generates an X-Y plot with four green points annotated 0 through 3 roughly in the shape of a box. The box is outlined with a diagonal line between points 0 and 3 forming two adjacent triangles. The top triangle is annotated as #1 and the bottom triangle is annotated as #0.&quot;">

\>\>\> from scipy.spatial import Delaunay \>\>\> import numpy as np \>\>\> points = np.array(\[\[0, 0\], \[0, 1.1\], \[1, 0\], \[1, 1\]\]) \>\>\> tri = Delaunay(points)

We can visualize it:

\>\>\> import matplotlib.pyplot as plt \>\>\> plt.triplot(points\[:,0\], points\[:,1\], tri.simplices) \>\>\> plt.plot(points\[:,0\], points\[:,1\], 'o')

And add some further decorations:

\>\>\> for j, p in enumerate(points): ... plt.text(p\[0\]-0.03, p\[1\]+0.03, j, ha='right') \# label the points \>\>\> for j, s in enumerate(tri.simplices): ... p = points\[s\].mean(axis=0) ... plt.text(p\[0\], p\[1\], '\#%d' % j, ha='center') \# label triangles \>\>\> plt.xlim(-0.5, 1.5); plt.ylim(-0.5, 1.5) \>\>\> plt.show()

</div>

The structure of the triangulation is encoded in the following way: the `simplices` attribute contains the indices of the points in the `points` array that make up the triangle. For instance:

\>\>\> i = 1 \>\>\> tri.simplices\[i,:\] array(\[3, 1, 0\], dtype=int32) \>\>\> points\[tri.simplices\[i,:\]\] array(\[\[ 1. , 1. \], \[ 0. , 1.1\], \[ 0. , 0. \]\])

Moreover, neighboring triangles can also be found:

\>\>\> tri.neighbors\[i\] array(\[-1, 0, -1\], dtype=int32)

What this tells us is that this triangle has triangle \#0 as a neighbor, but no other neighbors. Moreover, it tells us that neighbor 0 is opposite the vertex 1 of the triangle:

\>\>\> points\[tri.simplices\[i, 1\]\] array(\[ 0. , 1.1\])

Indeed, from the figure, we see that this is the case.

Qhull can also perform tessellations to simplices for higher-dimensional point sets (for instance, subdivision into tetrahedra in 3-D).

### Coplanar points

It is important to note that not *all* points necessarily appear as vertices of the triangulation, due to numerical precision issues in forming the triangulation. Consider the above with a duplicated point:

\>\>\> points = np.array(\[\[0, 0\], \[0, 1\], \[1, 0\], \[1, 1\], \[1, 1\]\]) \>\>\> tri = Delaunay(points) \>\>\> np.unique(tri.simplices.ravel()) array(\[0, 1, 2, 3\], dtype=int32)

Observe that point \#4, which is a duplicate, does not occur as a vertex of the triangulation. That this happened is recorded:

\>\>\> tri.coplanar array(\[\[4, 0, 3\]\], dtype=int32)

This means that point 4 resides near triangle 0 and vertex 3, but is not included in the triangulation.

Note that such degeneracies can occur not only because of duplicated points, but also for more complicated geometrical reasons, even in point sets that at first sight seem well-behaved.

However, Qhull has the "QJ" option, which instructs it to perturb the input data randomly until degeneracies are resolved:

\>\>\> tri = Delaunay(points, qhull\_options="QJ Pp") \>\>\> points\[tri.simplices\] array(\[\[\[1, 0\], \[1, 1\], \[0, 0\]\], \[\[1, 1\], \[1, 1\], \[1, 0\]\], \[\[1, 1\], \[0, 1\], \[0, 0\]\], \[\[0, 1\], \[1, 1\], \[1, 1\]\]\])

Two new triangles appeared. However, we see that they are degenerate and have zero area.

## Convex hulls

A convex hull is the smallest convex object containing all points in a given point set.

These can be computed via the Qhull wrappers in <span class="title-ref">scipy.spatial</span> as follows:

<div class="plot" alt="&quot;This code generates an X-Y plot with a few dozen random blue markers randomly distributed throughout. A single black line forms a convex hull around the boundary of the markers.&quot;">

\>\>\> from scipy.spatial import ConvexHull \>\>\> rng = np.random.default\_rng() \>\>\> points = rng.random((30, 2)) \# 30 random points in 2-D \>\>\> hull = ConvexHull(points)

The convex hull is represented as a set of N 1-D simplices, which in 2-D means line segments. The storage scheme is exactly the same as for the simplices in the Delaunay triangulation discussed above.

We can illustrate the above result:

\>\>\> import matplotlib.pyplot as plt \>\>\> plt.plot(points\[:,0\], points\[:,1\], 'o') \>\>\> for simplex in hull.simplices: ... plt.plot(points\[simplex,0\], points\[simplex,1\], 'k-') \>\>\> plt.show()

</div>

The same can be achieved with <span class="title-ref">scipy.spatial.convex\_hull\_plot\_2d</span>.

## Voronoi diagrams

A Voronoi diagram is a subdivision of the space into the nearest neighborhoods of a given set of points.

There are two ways to approach this object using <span class="title-ref">scipy.spatial</span>. First, one can use the <span class="title-ref">KDTree</span> to answer the question "which of the points is closest to this one", and define the regions that way:

<div class="plot" alt="&quot; &quot;">

\>\>\> from scipy.spatial import KDTree \>\>\> points = np.array(\[\[0, 0\], \[0, 1\], \[0, 2\], \[1, 0\], \[1, 1\], \[1, 2\], ... \[2, 0\], \[2, 1\], \[2, 2\]\]) \>\>\> tree = KDTree(points) \>\>\> tree.query(\[0.1, 0.1\]) (0.14142135623730953, 0)

So the point `(0.1, 0.1)` belongs to region `0`. In color:

\>\>\> x = np.linspace(-0.5, 2.5, 31) \>\>\> y = np.linspace(-0.5, 2.5, 33) \>\>\> xx, yy = np.meshgrid(x, y) \>\>\> xy = [np.c]()\[xx.ravel(), yy.ravel()\] \>\>\> import matplotlib.pyplot as plt \>\>\> dx\_half, dy\_half = np.diff(x\[:2\])\[0\] / 2., np.diff(y\[:2\])\[0\] / 2. \>\>\> x\_edges = np.concatenate((x - dx\_half, \[x\[-1\] + dx\_half\])) \>\>\> y\_edges = np.concatenate((y - dy\_half, \[y\[-1\] + dy\_half\])) \>\>\> plt.pcolormesh(x\_edges, y\_edges, tree.query(xy)\[1\].reshape(33, 31), shading='flat') \>\>\> plt.plot(points\[:,0\], points\[:,1\], 'ko') \>\>\> plt.show()

This does not, however, give the Voronoi diagram as a geometrical object.

The representation in terms of lines and points can be again obtained via the Qhull wrappers in \`scipy.spatial\`:

\>\>\> from scipy.spatial import Voronoi \>\>\> vor = Voronoi(points) \>\>\> vor.vertices array(\[\[0.5, 0.5\], \[0.5, 1.5\], \[1.5, 0.5\], \[1.5, 1.5\]\])

The Voronoi vertices denote the set of points forming the polygonal edges of the Voronoi regions. In this case, there are 9 different regions:

\>\>\> vor.regions \[\[\], \[-1, 0\], \[-1, 1\], \[1, -1, 0\], \[3, -1, 2\], \[-1, 3\], \[-1, 2\], \[0, 1, 3, 2\], \[2, -1, 0\], \[3, -1, 1\]\]

Negative value `-1` again indicates a point at infinity. Indeed, only one of the regions, `[0, 1, 3, 2]`, is bounded. Note here that due to similar numerical precision issues as in Delaunay triangulation above, there may be fewer Voronoi regions than input points.

The ridges (lines in 2-D) separating the regions are described as a similar collection of simplices as the convex hull pieces:

\>\>\> vor.ridge\_vertices \[\[-1, 0\], \[-1, 0\], \[-1, 1\], \[-1, 1\], \[0, 1\], \[-1, 3\], \[-1, 2\], \[2, 3\], \[-1, 3\], \[-1, 2\], \[1, 3\], \[0, 2\]\]

These numbers present the indices of the Voronoi vertices making up the line segments. `-1` is again a point at infinity --- only 4 of the 12 lines are a bounded line segment, while others extend to infinity.

The Voronoi ridges are perpendicular to the lines drawn between the input points. To which two points each ridge corresponds is also recorded:

\>\>\> vor.ridge\_points array(\[\[0, 3\], \[0, 1\], \[2, 5\], \[2, 1\], \[1, 4\], \[7, 8\], \[7, 6\], \[7, 4\], \[8, 5\], \[6, 3\], \[4, 5\], \[4, 3\]\], dtype=int32)

This information, taken together, is enough to construct the full diagram.

We can plot it as follows. First, the points and the Voronoi vertices:

\>\>\> plt.plot(points\[:, 0\], points\[:, 1\], 'o') \>\>\> plt.plot(vor.vertices\[:, 0\], vor.vertices\[:, 1\], '\*') \>\>\> plt.xlim(-1, 3); plt.ylim(-1, 3)

Plotting the finite line segments goes as for the convex hull, but now we have to guard for the infinite edges:

\>\>\> for simplex in vor.ridge\_vertices: ... simplex = np.asarray(simplex) ... if np.all(simplex \>= 0): ... plt.plot(vor.vertices\[simplex, 0\], vor.vertices\[simplex, 1\], 'k-')

The ridges extending to infinity require a bit more care:

\>\>\> center = points.mean(axis=0) \>\>\> for pointidx, simplex in zip(vor.ridge\_points, vor.ridge\_vertices): ... simplex = np.asarray(simplex) ... if np.any(simplex \< 0): ... i = simplex\[simplex \>= 0\]\[0\] \# finite end Voronoi vertex ... t = points\[pointidx\[1\]\] - points\[pointidx\[0\]\] \# tangent ... t = t / np.linalg.norm(t) ... n = np.array(\[-t\[1\], t\[0\]\]) \# normal ... midpoint = points\[pointidx\].mean(axis=0) ... far\_point = vor.vertices\[i\] + np.sign(np.dot(midpoint - center, n)) \* n \* 100 ... plt.plot(\[vor.vertices\[i,0\], far\_point\[0\]\], ... \[vor.vertices\[i,1\], far\_point\[1\]\], 'k--') \>\>\> plt.show()

</div>

This plot can also be created using <span class="title-ref">scipy.spatial.voronoi\_plot\_2d</span>.

Voronoi diagrams can be used to create interesting generative art. Try playing with the settings of this `mandala` function to create your own\!

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> from scipy import spatial \>\>\> import matplotlib.pyplot as plt

\>\>\> def mandala(n\_iter, n\_points, radius): ... """Creates a mandala figure using Voronoi tessellations. ... ... Parameters ... ----------... n\_iter : int ... Number of iterations, i.e. how many times the equidistant points will ... be generated. ... n\_points : int ... Number of points to draw per iteration. ... radius : scalar ... The radial expansion factor. ... ... Returns ... -------... fig : matplotlib.Figure instance ... ... Notes ... -----... This code is adapted from the work of Audrey Roy Greenfeld and Carlos ... Focil-Espinosa, who created beautiful mandalas with Python code. That ... code in turn was based on Antonio Sánchez Chinchón's R code. ... ... References ... ----------... .. \[1\] <https://www.codemakesmehappy.com/2019/09/voronoi-mandalas.html> ... ... .. \[2\] <https://github.com/CarlosFocil/mandalapy> ... ... .. \[3\] <https://github.com/aschinchon/mandalas> ... ... """ ... fig = plt.figure(figsize=(10, 10)) ... ax = fig.add\_subplot(111) ... ax.set\_axis\_off() ... ax.set\_aspect('equal', adjustable='box') ... ... angles = np.linspace(0, 2\*np.pi \* (1 - 1/n\_points), num=n\_points) + np.pi/2 ... \# Starting from a single center point, add points iteratively ... xy = np.array(\[\[0, 0\]\]) ... for k in range(n\_iter): ... t1 = np.array(\[\]) ... t2 = np.array(\[\]) ... \# Add <span class="title-ref">n\_points</span> new points around each existing point in this iteration ... for i in range(xy.shape\[0\]): ... t1 = np.append(t1, xy\[i, 0\] + radius\**k* np.cos(angles)) ... t2 = np.append(t2, xy\[i, 1\] + radius\**k* np.sin(angles)) ... ... xy = np.column\_stack((t1, t2)) ... ... \# Create the Mandala figure via a Voronoi plot ... spatial.voronoi\_plot\_2d(spatial.Voronoi(xy), ax=ax) ... ... return fig

\>\>\> \# Modify the following parameters in order to get different figures \>\>\> n\_iter = 3 \>\>\> n\_points = 6 \>\>\> radius = 4

\>\>\> fig = mandala(n\_iter, n\_points, radius) \>\>\> plt.show()

</div>

---

special.md

---

# Special Functions (`scipy.special`)

<div class="currentmodule">

scipy.special

</div>

The main feature of the `scipy.special` package is the definition of numerous special functions of mathematical physics. Available functions include airy, elliptic, bessel, gamma, beta, hypergeometric, parabolic cylinder, mathieu, spheroidal wave, struve, and kelvin. There are also some low-level stats functions that are not intended for general use as an easier interface to these functions is provided by the `stats` module. Most of these functions can take array arguments and return array results following the same broadcasting rules as other math functions in Numerical Python. Many of these functions also accept complex numbers as input. For a complete list of the available functions with a one-line description type `>>> help(special).` Each function also has its own documentation accessible using help. If you don't see a function you need, consider writing it and contributing it to the library. You can write the function in either C, Fortran, or Python. Look in the source code of the library for examples of each of these kinds of functions.

## Bessel functions of real order(<span class="title-ref">jv</span>, <span class="title-ref">jn\_zeros</span>)

Bessel functions are a family of solutions to Bessel's differential equation with real or complex order alpha:

\[x^2 \frac{d^2 y}{dx^2} + x \frac{dy}{dx} + (x^2 - \alpha^2)y = 0\]

Among other uses, these functions arise in wave propagation problems, such as the vibrational modes of a thin drum head. Here is an example of a circular drum head anchored at the edge:

<div class="plot" alt="&quot;This code generates a 3-D representation of the vibrational modes on a drum head viewed at a three-quarter angle. A circular region on the X-Y plane is defined with a Z value of 0 around the edge. Within the circle a single smooth valley exists on the -X side and a smooth peak exists on the +X side. The image resembles a yin-yang at this angle.&quot;">

\>\>\> from scipy import special \>\>\> import numpy as np \>\>\> def drumhead\_height(n, k, distance, angle, t): ... kth\_zero = special.jn\_zeros(n, k)\[-1\] ... return np.cos(t) \* np.cos(n\*angle) \* special.jn(n, distance\*kth\_zero) \>\>\> theta = [np.r]()\[0:2\*np.pi:50j\] \>\>\> radius = [np.r]()\[0:1:50j\] \>\>\> x = np.array(\[r \* np.cos(theta) for r in radius\]) \>\>\> y = np.array(\[r \* np.sin(theta) for r in radius\]) \>\>\> z = np.array(\[drumhead\_height(1, 1, r, theta, 0.5) for r in radius\])

\>\>\> import matplotlib.pyplot as plt \>\>\> fig = plt.figure() \>\>\> ax = fig.add\_axes(rect=(0, 0.05, 0.95, 0.95), projection='3d') \>\>\> ax.plot\_surface(x, y, z, rstride=1, cstride=1, cmap='RdBu\_r', vmin=-0.5, vmax=0.5) \>\>\> ax.set\_xlabel('X') \>\>\> ax.set\_ylabel('Y') \>\>\> ax.set\_xticks(np.arange(-1, 1.1, 0.5)) \>\>\> ax.set\_yticks(np.arange(-1, 1.1, 0.5)) \>\>\> ax.set\_zlabel('Z') \>\>\> plt.show()

</div>

## Cython Bindings for Special Functions (`scipy.special.cython_special`)

SciPy also offers Cython bindings for scalar, typed versions of many of the functions in special. The following Cython code gives a simple example of how to use these functions:

``` cython
cimport scipy.special.cython_special as csc

cdef:
    double x = 1
    double complex z = 1 + 1j
    double si, ci, rgam
    double complex cgam

rgam = csc.gamma(x)
print(rgam)
cgam = csc.gamma(z)
print(cgam)
csc.sici(x, &si, &ci)
print(si, ci)
```

(See the [Cython documentation](http://docs.cython.org/en/latest/src/reference/compilation.html) for help with compiling Cython.) In the example the function `csc.gamma` works essentially like its ufunc counterpart <span class="title-ref">gamma</span>, though it takes C types as arguments instead of NumPy arrays. Note, in particular, that the function is overloaded to support real and complex arguments; the correct variant is selected at compile time. The function `csc.sici` works slightly differently from <span class="title-ref">sici</span>; for the ufunc we could write `ai, bi = sici(x)`, whereas in the Cython version multiple return values are passed as pointers. It might help to think of this as analogous to calling a ufunc with an output array: `sici(x, out=(si, ci))`.

There are two potential advantages to using the Cython bindings:

  - they avoid Python function overhead
  - they do not require the Python Global Interpreter Lock (GIL)

The following sections discuss how to use these advantages to potentially speed up your code, though, of course, one should always profile the code first to make sure putting in the extra effort will be worth it.

### Avoiding Python Function Overhead

For the ufuncs in special, Python function overhead is avoided by vectorizing, that is, by passing an array to the function. Typically, this approach works quite well, but sometimes it is more convenient to call a special function on scalar inputs inside a loop, for example, when implementing your own ufunc. In this case, the Python function overhead can become significant. Consider the following example:

``` cython
import scipy.special as sc
cimport scipy.special.cython_special as csc

def python_tight_loop():
    cdef:
        int n
        double x = 1

    for n in range(100):
        sc.jv(n, x)

def cython_tight_loop():
    cdef:
        int n
        double x = 1

    for n in range(100):
        csc.jv(n, x)
```

On one computer `python_tight_loop` took about 131 microseconds to run and `cython_tight_loop` took about 18.2 microseconds to run. Obviously this example is contrived: one could just call `special.jv(np.arange(100), 1)` and get results just as fast as in `cython_tight_loop`. The point is that if Python function overhead becomes significant in your code, then the Cython bindings might be useful.

### Releasing the GIL

One often needs to evaluate a special function at many points, and typically the evaluations are trivially parallelizable. Since the Cython bindings do not require the GIL, it is easy to run them in parallel using Cython's `prange` function. For example, suppose that we wanted to compute the fundamental solution to the Helmholtz equation:

\[\Delta_x G(x, y) + k^2G(x, y) = \delta(x - y),\]

where \(k\) is the wavenumber and \(\delta\) is the Dirac delta function. It is known that in two dimensions the unique (radiating) solution is

\[G(x, y) = \frac{i}{4}H_0^{(1)}(k|x - y|),\]

where \(H_0^{(1)}\) is the Hankel function of the first kind, i.e., the function <span class="title-ref">hankel1</span>. The following example shows how we could compute this function in parallel:

``` cython
from libc.math cimport fabs
cimport cython
from cython.parallel cimport prange

import numpy as np
import scipy.special as sc
cimport scipy.special.cython_special as csc

def serial_G(k, x, y):
    return 0.25j*sc.hankel1(0, k*np.abs(x - y))

@cython.boundscheck(False)
@cython.wraparound(False)
cdef void _parallel_G(double k, double[:,:] x, double[:,:] y,
                      double complex[:,:] out) nogil:
    cdef int i, j

    for i in prange(x.shape[0]):
        for j in range(y.shape[0]):
            out[i,j] = 0.25j*csc.hankel1(0, k*fabs(x[i,j] - y[i,j]))

def parallel_G(k, x, y):
    out = np.empty_like(x, dtype='complex128')
    _parallel_G(k, x, y, out)
    return out
```

(For help with compiling parallel code in Cython see [here](http://docs.cython.org/en/latest/src/userguide/parallelism.html#compiling).) If the above Cython code is in a file `test.pyx`, then we can write an informal benchmark which compares the parallel and serial versions of the function:

``` cython
import timeit

import numpy as np

from test import serial_G, parallel_G

def main():
    k = 1
    x, y = np.linspace(-100, 100, 1000), np.linspace(-100, 100, 1000)
    x, y = np.meshgrid(x, y)

    def serial():
        serial_G(k, x, y)

    def parallel():
        parallel_G(k, x, y)

    time_serial = timeit.timeit(serial, number=3)
    time_parallel = timeit.timeit(parallel, number=3)
    print("Serial method took {:.3} seconds".format(time_serial))
    print("Parallel method took {:.3} seconds".format(time_parallel))

if __name__ == "__main__":
    main()
```

On one quad-core computer the serial method took 1.29 seconds and the parallel method took 0.29 seconds.

## Functions not in `scipy.special`

Some functions are not included in special because they are straightforward to implement with existing functions in NumPy and SciPy. To prevent reinventing the wheel, this section provides implementations of several such functions, which hopefully illustrate how to handle similar functions. In all examples NumPy is imported as `np` and special is imported as `sc`.

The [binary entropy function](https://en.wikipedia.org/wiki/Binary_entropy_function):

``` python
def binary_entropy(x):
    return -(sc.xlogy(x, x) + sc.xlog1py(1 - x, -x))/np.log(2)
```

A rectangular step function on \[0, 1\]:

``` python
def step(x):
    return 0.5*(np.sign(x) + np.sign(1 - x))
```

Translating and scaling can be used to get an arbitrary step function.

The [ramp function](https://en.wikipedia.org/wiki/Ramp_function):

``` python
def ramp(x):
    return np.maximum(0, x)
```

---

analysing_one_sample.md

---

# Analysing one sample

First, we create some random variables. We set a seed so that in each run we get identical results to look at. As an example we take a sample from the Student t distribution:

> \>\>\> import numpy as np \>\>\> import scipy.stats as stats \>\>\> x = stats.t.rvs(10, size=1000)

Here, we set the required shape parameter of the t distribution, which in statistics corresponds to the degrees of freedom, to 10. Using size=1000 means that our sample consists of 1000 independently drawn (pseudo) random numbers. Since we did not specify the keyword arguments <span class="title-ref">loc</span> and <span class="title-ref">scale</span>, those are set to their default values zero and one.

## Descriptive statistics

<span class="title-ref">x</span> is a numpy array, and we have direct access to all array methods, e.g.,

> \>\>\> print(x.min()) \# equivalent to np.min(x) -3.78975572422 \# random \>\>\> print(x.max()) \# equivalent to np.max(x) 5.26327732981 \# random \>\>\> print(x.mean()) \# equivalent to np.mean(x) 0.0140610663985 \# random \>\>\> print(x.var()) \# equivalent to np.var(x)) 1.28899386208 \# random

How do the sample properties compare to their theoretical counterparts?

> \>\>\> m, v, s, k = stats.t.stats(10, moments='mvsk') \>\>\> n, (smin, smax), sm, sv, ss, sk = stats.describe(x)
> 
> \>\>\> sstr = '%-14s mean = %6.4f, variance = %6.4f, skew = %6.4f, kurtosis = %6.4f' \>\>\> print(sstr % ('distribution:', m, v, s ,k)) distribution: mean = 0.0000, variance = 1.2500, skew = 0.0000, kurtosis = 1.0000 \# random \>\>\> print(sstr % ('sample:', sm, sv, ss, sk)) sample: mean = 0.0141, variance = 1.2903, skew = 0.2165, kurtosis = 1.0556 \# random

Note: <span class="title-ref">stats.describe</span> uses the unbiased estimator for the variance, while np.var is the biased estimator.

For our sample the sample statistics differ a by a small amount from their theoretical counterparts.

## T-test and KS-test

We can use the t-test to test whether the mean of our sample differs in a statistically significant way from the theoretical expectation.

> \>\>\> print('t-statistic = %6.3f pvalue = %6.4f' % stats.ttest\_1samp(x, m)) t-statistic = 0.391 pvalue = 0.6955 \# random

The pvalue is 0.7, this means that with an alpha error of, for example, 10%, we cannot reject the hypothesis that the sample mean is equal to zero, the expectation of the standard t-distribution.

As an exercise, we can calculate our ttest also directly without using the provided function, which should give us the same answer, and so it does:

> \>\>\> tt = (sm-m)/np.sqrt(sv/float(n)) \# t-statistic for mean \>\>\> pval = stats.t.sf(np.abs(tt), n-1)\*2 \# two-sided pvalue = Prob(abs(t)\>tt) \>\>\> print('t-statistic = %6.3f pvalue = %6.4f' % (tt, pval)) t-statistic = 0.391 pvalue = 0.6955 \# random

The Kolmogorov-Smirnov test can be used to test the hypothesis that the sample comes from the standard t-distribution

> \>\>\> print('KS-statistic D = %6.3f pvalue = %6.4f' % stats.kstest(x, 't', (10,))) KS-statistic D = 0.016 pvalue = 0.9571 \# random

Again, the p-value is high enough that we cannot reject the hypothesis that the random sample really is distributed according to the t-distribution. In real applications, we don't know what the underlying distribution is. If we perform the Kolmogorov-Smirnov test of our sample against the standard normal distribution, then we also cannot reject the hypothesis that our sample was generated by the normal distribution given that, in this example, the p-value is almost 40%.

> \>\>\> print('KS-statistic D = %6.3f pvalue = %6.4f' % stats.kstest(x, 'norm')) KS-statistic D = 0.028 pvalue = 0.3918 \# random

However, the standard normal distribution has a variance of 1, while our sample has a variance of 1.29. If we standardize our sample and test it against the normal distribution, then the p-value is again large enough that we cannot reject the hypothesis that the sample came form the normal distribution.

> \>\>\> d, pval = stats.kstest((x-x.mean())/x.std(), 'norm') \>\>\> print('KS-statistic D = %6.3f pvalue = %6.4f' % (d, pval)) KS-statistic D = 0.032 pvalue = 0.2397 \# random

Note: The Kolmogorov-Smirnov test assumes that we test against a distribution with given parameters, since, in the last case, we estimated mean and variance, this assumption is violated and the distribution of the test statistic, on which the p-value is based, is not correct.

## Tails of the distribution

Finally, we can check the upper tail of the distribution. We can use the percent point function ppf, which is the inverse of the cdf function, to obtain the critical values, or, more directly, we can use the inverse of the survival function

> \>\>\> crit01, crit05, crit10 = stats.t.ppf(\[1-0.01, 1-0.05, 1-0.10\], 10) \>\>\> print('critical values from ppf at 1%%, 5%% and 10%% %8.4f %8.4f %8.4f' % (crit01, crit05, crit10)) critical values from ppf at 1%, 5% and 10% 2.7638 1.8125 1.3722 \>\>\> print('critical values from isf at 1%%, 5%% and 10%% %8.4f %8.4f %8.4f' % tuple(stats.t.isf(\[0.01,0.05,0.10\],10))) critical values from isf at 1%, 5% and 10% 2.7638 1.8125 1.3722
> 
> \>\>\> freq01 = np.sum(x\>crit01) / float(n) \* 100 \>\>\> freq05 = np.sum(x\>crit05) / float(n) \* 100 \>\>\> freq10 = np.sum(x\>crit10) / float(n) \* 100 \>\>\> print('sample %%-frequency at 1%%, 5%% and 10%% tail %8.4f %8.4f %8.4f' % (freq01, freq05, freq10)) sample %-frequency at 1%, 5% and 10% tail 1.4000 5.8000 10.5000 \# random

In all three cases, our sample has more weight in the top tail than the underlying distribution. We can briefly check a larger sample to see if we get a closer match. In this case, the empirical frequency is quite close to the theoretical probability, but if we repeat this several times, the fluctuations are still pretty large.

> \>\>\> freq05l = np.sum(stats.t.rvs(10, size=10000) \> crit05) / 10000.0 \* 100 \>\>\> print('larger sample %%-frequency at 5%% tail %8.4f' % freq05l) larger sample %-frequency at 5% tail 4.8000 \# random

We can also compare it with the tail of the normal distribution, which has less weight in the tails:

> \>\>\> print('tail prob. of normal at 1%%, 5%% and 10%% %8.4f %8.4f %8.4f' % ... tuple(stats.norm.sf(\[crit01, crit05, crit10\])\*100)) tail prob. of normal at 1%, 5% and 10% 0.2857 3.4957 8.5003

The chisquare test can be used to test whether for a finite number of bins, the observed frequencies differ significantly from the probabilities of the hypothesized distribution.

> \>\>\> quantiles = \[0.0, 0.01, 0.05, 0.1, 1-0.10, 1-0.05, 1-0.01, 1.0\] \>\>\> crit = stats.t.ppf(quantiles, 10) \>\>\> crit array(\[ -inf, -2.76376946, -1.81246112, -1.37218364, 1.37218364, 1.81246112, 2.76376946, inf\]) \>\>\> n\_sample = x.size \>\>\> freqcount = np.histogram(x, bins=crit)\[0\] \>\>\> tprob = np.diff(quantiles) \>\>\> nprob = np.diff(stats.norm.cdf(crit)) \>\>\> tch, tpval = stats.chisquare(freqcount, tprob\*n\_sample) \>\>\> nch, npval = stats.chisquare(freqcount, nprob\*n\_sample) \>\>\> print('chisquare for t: chi2 = %6.2f pvalue = %6.4f' % (tch, tpval)) chisquare for t: chi2 = 2.30 pvalue = 0.8901 \# random \>\>\> print('chisquare for normal: chi2 = %6.2f pvalue = %6.4f' % (nch, npval)) chisquare for normal: chi2 = 64.60 pvalue = 0.0000 \# random

We see that the standard normal distribution is clearly rejected, while the standard t-distribution cannot be rejected. Since the variance of our sample differs from both standard distributions, we can again redo the test taking the estimate for scale and location into account.

The fit method of the distributions can be used to estimate the parameters of the distribution, and the test is repeated using probabilities of the estimated distribution.

> \>\>\> tdof, tloc, tscale = stats.t.fit(x) \>\>\> nloc, nscale = stats.norm.fit(x) \>\>\> tprob = np.diff(stats.t.cdf(crit, tdof, loc=tloc, scale=tscale)) \>\>\> nprob = np.diff(stats.norm.cdf(crit, loc=nloc, scale=nscale)) \>\>\> tch, tpval = stats.chisquare(freqcount, tprob\*n\_sample) \>\>\> nch, npval = stats.chisquare(freqcount, nprob\*n\_sample) \>\>\> print('chisquare for t: chi2 = %6.2f pvalue = %6.4f' % (tch, tpval)) chisquare for t: chi2 = 1.58 pvalue = 0.9542 \# random \>\>\> print('chisquare for normal: chi2 = %6.2f pvalue = %6.4f' % (nch, npval)) chisquare for normal: chi2 = 11.08 pvalue = 0.0858 \# random

Taking account of the estimated parameters, we can still reject the hypothesis that our sample came from a normal distribution (at the 5% level), but again, with a p-value of 0.95, we cannot reject the t-distribution.

## Special tests for normal distributions

Since the normal distribution is the most common distribution in statistics, there are several additional functions available to test whether a sample could have been drawn from a normal distribution.

First, we can test if skew and kurtosis of our sample differ significantly from those of a normal distribution:

> \>\>\> print('normal skewtest teststat = %6.3f pvalue = %6.4f' % stats.skewtest(x)) normal skewtest teststat = 2.785 pvalue = 0.0054 \# random \>\>\> print('normal kurtosistest teststat = %6.3f pvalue = %6.4f' % stats.kurtosistest(x)) normal kurtosistest teststat = 4.757 pvalue = 0.0000 \# random

These two tests are combined in the normality test

> \>\>\> print('normaltest teststat = %6.3f pvalue = %6.4f' % stats.normaltest(x)) normaltest teststat = 30.379 pvalue = 0.0000 \# random

In all three tests, the p-values are very low and we can reject the hypothesis that the our sample has skew and kurtosis of the normal distribution.

Since skew and kurtosis of our sample are based on central moments, we get exactly the same results if we test the standardized sample:

> \>\>\> print('normaltest teststat = %6.3f pvalue = %6.4f' % ... stats.normaltest((x-x.mean())/x.std())) normaltest teststat = 30.379 pvalue = 0.0000 \# random

Because normality is rejected so strongly, we can check whether the normaltest gives reasonable results for other cases:

> \>\>\> print('normaltest teststat = %6.3f pvalue = %6.4f' % ... stats.normaltest(stats.t.rvs(10, size=100))) normaltest teststat = 4.698 pvalue = 0.0955 \# random \>\>\> print('normaltest teststat = %6.3f pvalue = %6.4f' % ... stats.normaltest(stats.norm.rvs(size=1000))) normaltest teststat = 0.613 pvalue = 0.7361 \# random

When testing for normality of a small sample of t-distributed observations and a large sample of normal-distributed observations, then in neither case can we reject the null hypothesis that the sample comes from a normal distribution. In the first case, this is because the test is not powerful enough to distinguish a t and a normally distributed random variable in a small sample.

---

comparing_two_samples.md

---

# Comparing two samples

In the following, we are given two samples, which can come either from the same or from different distribution, and we want to test whether these samples have the same statistical properties.

## Comparing means

Test with sample with identical means:

> \>\>\> import scipy.stats as stats \>\>\> rvs1 = stats.norm.rvs(loc=5, scale=10, size=500) \>\>\> rvs2 = stats.norm.rvs(loc=5, scale=10, size=500) \>\>\> stats.ttest\_ind(rvs1, rvs2) Ttest\_indResult(statistic=-0.5489036175088705, pvalue=0.5831943748663959) \# random

Test with sample with different means:

> \>\>\> rvs3 = stats.norm.rvs(loc=8, scale=10, size=500) \>\>\> stats.ttest\_ind(rvs1, rvs3) Ttest\_indResult(statistic=-4.533414290175026, pvalue=6.507128186389019e-06) \# random

## Kolmogorov-Smirnov test for two samples ks\_2samp

For the example, where both samples are drawn from the same distribution, we cannot reject the null hypothesis, since the pvalue is high

> \>\>\> stats.ks\_2samp(rvs1, rvs2) KstestResult(statistic=0.026, pvalue=0.9959527565364388) \# random

In the second example, with different location, i.e., means, we can reject the null hypothesis, since the pvalue is below 1%

> \>\>\> stats.ks\_2samp(rvs1, rvs3) KstestResult(statistic=0.114, pvalue=0.00299005061044668) \# random

---

continuous.md

---

# Continuous Statistical Distributions

## Overview

All distributions will have location (L) and Scale (S) parameters along with any shape parameters needed, the names for the shape parameters will vary. Standard form for the distributions will be given where \(L=0.0\) and \(S=1.0.\) The nonstandard forms can be obtained for the various functions using (note \(U\) is a standard uniform random variate).

| Function Name                          | Standard Function                                                         | Transformation                                                                                                                        |
| -------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| Cumulative Distribution Function (CDF) | \(F\left(x\right)\)                                                       | \(F\left(x;L,S\right)=F\left(\frac{\left(x-L\right)}{S}\right)\)                                                                      |
| Probability Density Function (PDF)     | \(f\left(x\right)=F^{\prime}\left(x\right)\)                              | \(f\left(x;L,S\right)=\frac{1}{S}f\left(\frac{\left(x-L\right)}{S}\right)\)                                                           |
| Percent Point Function (PPF)           | \(G\left(q\right)=F^{-1}\left(q\right)\)                                  | \(G\left(q;L,S\right)=L+SG\left(q\right)\)                                                                                            |
| Probability Sparsity Function (PSF)    | \(g\left(q\right)=G^{\prime}\left(q\right)\)                              | \(g\left(q;L,S\right)=Sg\left(q\right)\)                                                                                              |
| Hazard Function (HF)                   | \(h_{a}\left(x\right)=\frac{f\left(x\right)}{1-F\left(x\right)}\)         | \(h_{a}\left(x;L,S\right)=\frac{1}{S}h_{a}\left(\frac{\left(x-L\right)}{S}\right)\)                                                   |
| Cumulative Hazard Function (CHF)       | \(H_{a}\left(x\right)=\) \(\log\frac{1}{1-F\left(x\right)}\)              | \(H_{a}\left(x;L,S\right)=H_{a}\left(\frac{\left(x-L\right)}{S}\right)\)                                                              |
| Survival Function (SF)                 | \(S\left(x\right)=1-F\left(x\right)\)                                     | \(S\left(x;L,S\right)=S\left(\frac{\left(x-L\right)}{S}\right)\)                                                                      |
| Inverse Survival Function (ISF)        | \(Z\left(\alpha\right)=S^{-1}\left(\alpha\right)=G\left(1-\alpha\right)\) | \(Z\left(\alpha;L,S\right)=L+SZ\left(\alpha\right)\)                                                                                  |
| Moment Generating Function (MGF)       | \(M_{Y}\left(t\right)=E\left[e^{Yt}\right]\)                              | \(M_{X}\left(t\right)=e^{Lt}M_{Y}\left(St\right)\)                                                                                    |
| Random Variates                        | \(Y=G\left(U\right)\)                                                     | \(X=L+SY\)                                                                                                                            |
| (Differential) Entropy                 | \(h\left[Y\right]=-\int f\left(y\right)\log f\left(y\right)dy\)           | \(h\left[X\right]=h\left[Y\right]+\log S\)                                                                                            |
| (Non-central) Moments                  | \(\mu_{n}^{\prime}=E\left[Y^{n}\right]\)                                  | \(E\left[X^{n}\right]=L^{n}\sum_{k=0}^{N}\left(\begin{array}{c} n\\ k\end{array}\right)\left(\frac{S}{L}\right)^{k}\mu_{k}^{\prime}\) |
| Central Moments                        | \(\mu_{n}=E\left[\left(Y-\mu\right)^{n}\right]\)                          | \(E\left[\left(X-\mu_{X}\right)^{n}\right]=S^{n}\mu_{n}\)                                                                             |
| mean (mode, median), var               | \(\mu,\,\mu_{2}\)                                                         | \(L+S\mu,\, S^{2}\mu_{2}\)                                                                                                            |
| skewness                               | \(\gamma_{1}=\frac{\mu_{3}}{\left(\mu_{2}\right)^{3/2}}\)                 | \(\gamma_{1}\)                                                                                                                        |
| kurtosis                               | \(\gamma_{2}=\frac{\mu_{4}}{\left(\mu_{2}\right)^{2}}-3\)                 | \(\gamma_{2}\)                                                                                                                        |

### Moments

Non-central moments are defined using the PDF

\[\mu_{n}^{\prime}=\int_{-\infty}^{\infty}x^{n}f\left(x\right)dx.\]

Note, that these can always be computed using the PPF. Substitute \(x=G\left(q\right)\) in the above equation and get

\[\mu_{n}^{\prime}=\int_{0}^{1}G^{n}\left(q\right)dq\]

which may be easier to compute numerically. Note that \(q=F\left(x\right)\) so that \(dq=f\left(x\right)dx.\) Central moments are computed similarly \(\mu=\mu_{1}^{\prime}\)

\[\begin{aligned}
\begin{eqnarray*} \mu_{n} & = & \int_{-\infty}^{\infty}\left(x-\mu\right)^{n}f\left(x\right)dx\\  & = & \int_{0}^{1}\left(G\left(q\right)-\mu\right)^{n}dq\\  & = & \sum_{k=0}^{n}\left(\begin{array}{c} n\\ k\end{array}\right)\left(-\mu\right)^{k}\mu_{n-k}^{\prime}\end{eqnarray*}
\end{aligned}\]

In particular

\[\begin{aligned}
\begin{eqnarray*} \mu_{3} & = & \mu_{3}^{\prime}-3\mu\mu_{2}^{\prime}+2\mu^{3}\\  & = & \mu_{3}^{\prime}-3\mu\mu_{2}-\mu^{3}\\ \mu_{4} & = & \mu_{4}^{\prime}-4\mu\mu_{3}^{\prime}+6\mu^{2}\mu_{2}^{\prime}-3\mu^{4}\\  & = & \mu_{4}^{\prime}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}\end{eqnarray*}
\end{aligned}\]

Skewness is defined as

\[\gamma_{1}=\sqrt{\beta_{1}}=\frac{\mu_{3}}{\mu_{2}^{3/2}}\]

while (Fisher) kurtosis is

\[\gamma_{2}=\frac{\mu_{4}}{\mu_{2}^{2}}-3,\]

so that a normal distribution has a kurtosis of zero.

### Median and mode

The median, \(m_{n}\) is defined as the point at which half of the density is on one side and half on the other. In other words, \(F\left(m_{n}\right)=\frac{1}{2}\) so that

\[m_{n}=G\left(\frac{1}{2}\right).\]

In addition, the mode, \(m_{d}\) , is defined as the value for which the probability density function reaches it's peak

\[m_{d}=\arg\max_{x}f\left(x\right).\]

### Fitting data

To fit data to a distribution, maximizing the likelihood function is common. Alternatively, some distributions have well-known minimum variance unbiased estimators. These will be chosen by default, but the likelihood function will always be available for minimizing.

If \(f\left(x;\boldsymbol{\theta}\right)\) is the PDF of a random-variable where \(\boldsymbol{\theta}\) is a vector of parameters ( *e.g.* \(L\) and \(S\) ), then for a collection of \(N\) independent samples from this distribution, the joint distribution the random vector \(\mathbf{x}\) is

\[f\left(\mathbf{x};\boldsymbol{\theta}\right)=\prod_{i=1}^{N}f\left(x_{i};\boldsymbol{\theta}\right).\]

The maximum likelihood estimate of the parameters \(\boldsymbol{\theta}\) are the parameters which maximize this function with \(\mathbf{x}\) fixed and given by the data:

\[\begin{aligned}
\begin{eqnarray*} \boldsymbol{\theta}_{es} & = & \arg\max_{\boldsymbol{\theta}}f\left(\mathbf{x};\boldsymbol{\theta}\right)\\  & = & \arg\min_{\boldsymbol{\theta}}l_{\mathbf{x}}\left(\boldsymbol{\theta}\right).\end{eqnarray*}
\end{aligned}\]

Where

\[\begin{aligned}
\begin{eqnarray*} l_{\mathbf{x}}\left(\boldsymbol{\theta}\right) & = & -\sum_{i=1}^{N}\log f\left(x_{i};\boldsymbol{\theta}\right)\\  & = & -N\overline{\log f\left(x_{i};\boldsymbol{\theta}\right)}\end{eqnarray*}
\end{aligned}\]

Note that if \(\boldsymbol{\theta}\) includes only shape parameters, the location and scale-parameters can be fit by replacing \(x_{i}\) with \(\left(x_{i}-L\right)/S\) in the log-likelihood function adding \(N\log S\) and minimizing, thus

\[\begin{aligned}
\begin{eqnarray*} l_{\mathbf{x}}\left(L,S;\boldsymbol{\theta}\right) & = & N\log S-\sum_{i=1}^{N}\log f\left(\frac{x_{i}-L}{S};\boldsymbol{\theta}\right)\\  & = & N\log S+l_{\frac{\mathbf{x}-S}{L}}\left(\boldsymbol{\theta}\right)\end{eqnarray*}
\end{aligned}\]

If desired, sample estimates for \(L\) and \(S\) (not necessarily maximum likelihood estimates) can be obtained from samples estimates of the mean and variance using

\[\begin{aligned}
\begin{eqnarray*} \hat{S} & = & \sqrt{\frac{\hat{\mu}_{2}}{\mu_{2}}}\\ \hat{L} & = & \hat{\mu}-\hat{S}\mu\end{eqnarray*}
\end{aligned}\]

where \(\mu\) and \(\mu_{2}\) are assumed known as the mean and variance of the **untransformed** distribution (when \(L=0\) and \(S=1\) ) and

\[\begin{aligned}
\begin{eqnarray*} \hat{\mu} & = & \frac{1}{N}\sum_{i=1}^{N}x_{i}=\bar{\mathbf{x}}\\ \hat{\mu}_{2} & = & \frac{1}{N-1}\sum_{i=1}^{N}\left(x_{i}-\hat{\mu}\right)^{2}=\frac{N}{N-1}\overline{\left(\mathbf{x}-\bar{\mathbf{x}}\right)^{2}}\end{eqnarray*}
\end{aligned}\]

### Standard notation for mean

We will use

\[\overline{y\left(\mathbf{x}\right)}=\frac{1}{N}\sum_{i=1}^{N}y\left(x_{i}\right)\]

where \(N\) should be clear from context as the number of samples \(x_{i}\)

### References

  - Documentation for ranlib, rv2, cdflib
  - Eric Weisstein's world of mathematics <http://mathworld.wolfram.com/>, <http://mathworld.wolfram.com/topics/StatisticalDistributions.html>
  - Documentation to Regress+ by Michael McLaughlin item Engineering and Statistics Handbook (NIST), <https://www.itl.nist.gov/div898/handbook/>
  - Documentation for DATAPLOT from NIST, <https://www.itl.nist.gov/div898/software/dataplot/distribu.htm>
  - Norman Johnson, Samuel Kotz, and N. Balakrishnan Continuous Univariate Distributions, second edition, Volumes I and II, Wiley & Sons, 1994.

In the tutorials several special functions appear repeatedly and are listed here.

| Symbol                                                     | Description                                                   | Definition                                                                                                                |
| ---------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |
| \(\gamma\left(s, x\right)\)                                | lower incomplete Gamma function                               | \(\int_0^x t^{s-1} e^{-t} dt\)                                                                                            |
| \(\Gamma\left(s, x\right)\)                                | upper incomplete Gamma function                               | \(\int_x^\infty t^{s-1} e^{-t} dt\)                                                                                       |
| \(B\left(x;a,b\right)\)                                    | incomplete Beta function                                      | \(\int_{0}^{x} t^{a-1}\left(1-t\right)^{b-1} dt\)                                                                         |
| \(I\left(x;a,b\right)\)                                    | regularized incomplete Beta function                          | \(\frac{\Gamma\left(a+b\right)}{\Gamma\left(a\right)\Gamma\left(b\right)} \int_{0}^{x} t^{a-1}\left(1-t\right)^{b-1} dt\) |
| \(\phi\left(x\right)\)                                     | PDF for normal distribution                                   | \(\frac{1}{\sqrt{2\pi}}e^{-x^{2}/2}\)                                                                                     |
| \(\Phi\left(x\right)\)                                     | CDF for normal distribution                                   | \(\int_{-\infty}^{x}\phi\left(t\right) dt = \frac{1}{2}+\frac{1}{2}\mathrm{erf}\left(\frac{x}{\sqrt{2}}\right)\)          |
| \(\psi\left(z\right)\)                                     | digamma function                                              | \(\frac{d}{dz} \log\left(\Gamma\left(z\right)\right)\)                                                                    |
| \(\psi_{n}\left(z\right)\) \(I_{\nu}\left(y\right)\)       | polygamma function modified Bessel function of the first kind | \(\frac{d^{n+1}}{dz^{n+1}}\log\left(\Gamma\left(z\right)\right)\)                                                         |
| \(\mathrm{Ei}(\mathrm{z})\)                                | exponential integral                                          | \(-\int_{-x}^\infty \frac{e^{-t}}{t} dt\)                                                                                 |
| \(\zeta\left(n\right)\)                                    | Riemann zeta function                                         | \(\sum_{k=1}^{\infty} \frac{1}{k^{n}}\)                                                                                   |
| \(\zeta\left(n,z\right)\)                                  | Hurwitz zeta function                                         | \(\sum_{k=0}^{\infty} \frac{1}{\left(k+z\right)^{n}}\)                                                                    |
| \(\,{}_{p}F_{q}(a_{1},\ldots,a_{p};b_{1},\ldots,b_{q};z)\) | Hypergeometric function                                       | \(\sum_{n=0}^{\infty} {\frac{(a_{1})_{n}\cdots(a_{p})_{n}}{(b_{1})_{n}\cdots(b_{q})_{n}}} \,{\frac{z^{n}}{n!}}\)          |

## Continuous Distributions in <span class="title-ref">scipy.stats</span>

<div class="toctree" data-maxdepth="1">

continuous\_alpha continuous\_anglit continuous\_arcsine continuous\_beta continuous\_betaprime continuous\_bradford continuous\_burr continuous\_burr12 continuous\_cauchy continuous\_skewcauchy continuous\_chi continuous\_chi2 continuous\_cosine continuous\_dgamma continuous\_dpareto\_lognorm continuous\_dweibull continuous\_erlang continuous\_expon continuous\_exponweib continuous\_exponpow continuous\_fatiguelife continuous\_fisk continuous\_foldcauchy continuous\_foldnorm continuous\_f continuous\_gamma continuous\_genlogistic continuous\_genpareto continuous\_genexpon continuous\_genextreme continuous\_gengamma continuous\_genhalflogistic continuous\_genhyperbolic continuous\_geninvgauss continuous\_gennorm continuous\_gibrat continuous\_gompertz continuous\_gumbel\_r continuous\_gumbel\_l continuous\_halfcauchy continuous\_halfnorm continuous\_halflogistic continuous\_hypsecant continuous\_gausshyper continuous\_invgamma continuous\_invgauss continuous\_invweibull continuous\_jf\_skew\_t continuous\_johnsonsb continuous\_johnsonsu continuous\_ksone continuous\_kstwo continuous\_kstwobign continuous\_landau continuous\_laplace continuous\_laplace\_asymmetric continuous\_levy\_l continuous\_levy continuous\_logistic continuous\_loglaplace continuous\_loggamma continuous\_lognorm continuous\_loguniform continuous\_maxwell continuous\_mielke continuous\_nakagami continuous\_ncx2 continuous\_ncf continuous\_nct continuous\_norm continuous\_norminvgauss continuous\_pareto continuous\_lomax continuous\_powerlognorm continuous\_powernorm continuous\_powerlaw continuous\_rdist continuous\_rayleigh continuous\_rice continuous\_recipinvgauss continuous\_rel\_breitwigner continuous\_semicircular continuous\_studentized\_range continuous\_t continuous\_trapezoid continuous\_triang continuous\_truncexpon continuous\_truncnorm continuous\_truncpareto continuous\_truncweibull\_min continuous\_tukeylambda continuous\_uniform continuous\_vonmises continuous\_wald continuous\_weibull\_max continuous\_weibull\_min continuous\_wrapcauchy

</div>

---

continuous_alpha.md

---

# Alpha Distribution

One shape parameter \(\alpha>0\) (parameter \(\beta\) in DATAPLOT is a scale-parameter). The support for the standard form is \(x>0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\alpha\right) & = & \frac{1}{x^{2}\Phi\left(\alpha\right)\sqrt{2\pi}}\exp\left(-\frac{1}{2}\left(\alpha-\frac{1}{x}\right)^{2}\right)\\ F\left(x;\alpha\right) & = & \frac{\Phi\left(\alpha-\frac{1}{x}\right)}{\Phi\left(\alpha\right)}\\ G\left(q;\alpha\right) & = & \left[\alpha-\Phi^{-1}\left(q\Phi\left(\alpha\right)\right)\right]^{-1}\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\frac{1}{\Phi\left(a\right)\sqrt{2\pi}}\int_{0}^{\infty}\frac{e^{xt}}{x^{2}}\exp\left(-\frac{1}{2}\left(\alpha-\frac{1}{x}\right)^{2}\right)dx\]

No moments?

\[l_{\mathbf{x}}\left(\alpha\right)=N\log\left[\Phi\left(\alpha\right)\sqrt{2\pi}\right]+2N\overline{\log\mathbf{x}}+\frac{N}{2}\alpha^{2}-\alpha\overline{\mathbf{x}^{-1}}+\frac{1}{2}\overline{\mathbf{x}^{-2}}\]

Implementation: <span class="title-ref">scipy.stats.alpha</span>

---

continuous_anglit.md

---

# Anglit Distribution

Defined over \(x\in\left[-\frac{\pi}{4},\frac{\pi}{4}\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \sin\left(2x+\frac{\pi}{2}\right)=\cos\left(2x\right)\\ F\left(x\right) & = & \sin^{2}\left(x+\frac{\pi}{4}\right)\\ G\left(q\right) & = & \arcsin\left(\sqrt{q}\right)-\frac{\pi}{4}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & 0\\ \mu_{2} & = & \frac{\pi^{2}}{16}-\frac{1}{2}\\ \gamma_{1} & = & 0\\ \gamma_{2} & = & -2\frac{\pi^{4}-96}{\left(\pi^{2}-8\right)^{2}}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & 1-\log2\\  & \approx & 0.30685281944005469058\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} M\left(t\right) & = & \int_{-\frac{\pi}{4}}^{\frac{\pi}{4}}\cos\left(2x\right)e^{xt}dx\\  & = & \frac{4\cosh\left(\frac{\pi t}{4}\right)}{t^{2}+4}\end{eqnarray*}
\end{aligned}\]

\[l_{\mathbf{x}}\left(\cdot\right)=-N\overline{\log\left[\cos\left(2\mathbf{x}\right)\right]}\]

Implementation: <span class="title-ref">scipy.stats.anglit</span>

---

continuous_arcsine.md

---

# Arcsine Distribution

Defined over \(x\in\left[0,1\right]\). To get the definition presented in Johnson, Kotz, and Balakrishnan, substitute \(x=\frac{u+1}{2}.\) i.e. \(L=-1\) and \(S=2.\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{\pi\sqrt{x\left(1-x\right)}}\\ F\left(x\right) & = & \frac{2}{\pi}\arcsin\left(\sqrt{x}\right)\\ G\left(q\right) & = & \sin^{2}\left(\frac{\pi}{2}q\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=1 + \sum_{k=1}^\infty \left( \prod_{r=0}^{k-1} \frac{2r + 1}{2r+2} \right) \frac{t^k}{k!}\]

\[\begin{aligned}
\begin{eqnarray*} \mu_{n}^{\prime} & = & \frac{1}{\pi}\int_{0}^{1} x^{n-1/2}\left(1-x\right)^{-1/2} dx\\
 & = & \frac{1}{\pi}B\left(\frac{1}{2},n+\frac{1}{2}\right)=\frac{\left(2n-1\right)!!}{2^{n}n!}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{1}{2}\\ \mu_{2} & = & \frac{1}{8}\\ \gamma_{1} & = & 0\\ \gamma_{2} & = & -\frac{3}{2}\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right] = \log(\frac{\pi}{4}) \approx-0.24156447527049044468\]

\[l_{\mathbf{x}}\left(\cdot\right)=N\log\pi+\frac{N}{2}\overline{\log\mathbf{x}}+\frac{N}{2}\overline{\log\left(1-\mathbf{x}\right)}\]

## References

  - Norman Johnson, Samuel Kotz, and N. Balakrishnan, Continuous Univariate Distributions, second edition, Volumes I and II, Wiley & Sons, 1994.
  - "Arcsine Distribution", Wikipedia, <https://en.wikipedia.org/wiki/Arcsine_distribution>

Implementation: <span class="title-ref">scipy.stats.arcsine</span>

---

continuous_beta.md

---

# Beta Distribution

There are two shape parameters \(a,b > 0\) and the support is \(x\in[0,1]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,b\right) & = & \frac{\Gamma\left(a+b\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}x^{a-1}\left(1-x\right)^{b-1} \\
F\left(x;a,b\right) & = & \int_{0}^{x}f\left(y;a,b\right)dy=I\left(x;a,b\right)\\
G\left(q;a,b\right) & = & I^{-1}\left(q;a,b\right)\\
M\left(t\right) & = & \frac{\Gamma\left(a\right)\Gamma\left(b\right)}{\Gamma\left(a+b\right)}\,_{1}F_{1}\left(a;a+b;t\right)\\
\mu & = & \frac{a}{a+b}\\
\mu_{2} & = & \frac{ab\left(a+b+1\right)}{\left(a+b\right)^{2}}\\
\gamma_{1} & = & 2\frac{b-a}{a+b+2}\sqrt{\frac{a+b+1}{ab}}\\
\gamma_{2} & = & \frac{6\left(a^{3}+a^{2}\left(1-2b\right)+b^{2}\left(b+1\right)-2ab\left(b+2\right)\right)}{ab\left(a+b+2\right)\left(a+b+3\right)}\\
m_{d} & = & \frac{\left(a-1\right)}{\left(a+b-2\right)}\, a+b\neq2\end{eqnarray*}
\end{aligned}\]

where \(I\left(x;a,b\right)\) is the regularized incomplete Beta function. \(f\left(x;a,1\right)\) is also called the Power-function distribution.

\[l_{\mathbf{x}}\left(a,b\right)=-N\log\Gamma\left(a+b\right)+N\log\Gamma\left(a\right)+N\log\Gamma\left(b\right)-N\left(a-1\right)\overline{\log\mathbf{x}}-N\left(b-1\right)\overline{\log\left(1-\mathbf{x}\right)}\]

Implementation: <span class="title-ref">scipy.stats.beta</span>

---

continuous_betaprime.md

---

# Beta Prime Distribution

There are two shape parameters \(a,b > 0\) and the support is \(x \in [0,\infty)\). Note the CDF evaluation uses Eq. 3.194.1 on pg. 313 of Gradshteyn & Ryzhik (sixth edition).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\alpha,\beta\right) & = & \frac{\Gamma\left(\alpha+\beta\right)}{\Gamma\left(\alpha\right)\Gamma\left(\beta\right)}x^{\alpha-1}\left(1+x\right)^{-\alpha-\beta}\\
F\left(x;\alpha,\beta\right) & = & \frac{\Gamma\left(\alpha+\beta\right)}{\alpha\Gamma\left(\alpha\right)\Gamma\left(\beta\right)}x^{\alpha}\,_{2}F_{1}\left(\alpha+\beta,\alpha;1+\alpha;-x\right)\\
G\left(q;\alpha,\beta\right) & = & F^{-1}\left(x;\alpha,\beta\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\mu_{n}^{\prime}=\left\{
  \begin{array}{ccc}
    \frac{\Gamma\left(n+\alpha\right)\Gamma\left(\beta-n\right)}{\Gamma\left(\alpha\right)\Gamma\left(\beta\right)}=\frac{\left(\alpha\right)_{n}}{\left(\beta-n\right)_{n}} &  & \beta>n\\
    \infty &  & \mathrm{otherwise}
  \end{array}\right.
\end{aligned}\]

Therefore,

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{\alpha}{\beta-1}\quad\textrm{for }\beta>1\\
\mu_{2} & = & \frac{\alpha\left(\alpha+1\right)}{\left(\beta-2\right)\left(\beta-1\right)}-\frac{\alpha^{2}}{\left(\beta-1\right)^{2}}\quad\textrm{for }\beta>2\\
\gamma_{1} & = & \frac{\frac{\alpha\left(\alpha+1\right)\left(\alpha+2\right)}{\left(\beta-3\right)\left(\beta-2\right)\left(\beta-1\right)}-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\quad\textrm{for }\beta>3\\
\gamma_{2} & = & \frac{\mu_{4}}{\mu_{2}^{2}}-3\\
\mu_{4} & = & \frac{\alpha\left(\alpha+1\right)\left(\alpha+2\right)\left(\alpha+3\right)}{\left(\beta-4\right)\left(\beta-3\right)\left(\beta-2\right)\left(\beta-1\right)}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}\quad\textrm{for }\beta>4\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.betaprime</span>

---

continuous_bradford.md

---

# Bradford Distribution

There is one shape parameter, \(c>0\), and the support is \(x\in [0,1]\).

\[\begin{aligned}
\begin{eqnarray*} \textrm{Let } k & = & \log\left(1+c\right)\\
\textrm{Then}\\
f\left(x;c\right) & = & \frac{c}{k\left(1+cx\right)}\\
F\left(x;c\right) & = & \frac{\log\left(1+cx\right)}{k}\\
G\left(q\; c\right) & = & \frac{\left(1+c\right)^{q}-1}{c}\\
M\left(t\right) & = & \frac{1}{k}e^{-t/c}\left[\mathrm{Ei}\left(t+\frac{t}{c}\right)-\mathrm{Ei}\left(\frac{t}{c}\right)\right]\\
\mu & = & \frac{c-k}{ck}\\
\mu_{2} & = & \frac{\left(c+2\right)k-2c}{2ck^{2}}\\
\gamma_{1} & = & \frac{\sqrt{2}\left(12c^{2}-9kc\left(c+2\right)+2k^{2}\left(c\left(c+3\right)+3\right)\right)}{\sqrt{c\left(c\left(k-2\right)+2k\right)}\left(3c\left(k-2\right)+6k\right)}\\
\gamma_{2} & = & \frac{c^{3}\left(k-3\right)\left(k\left(3k-16\right)+24\right)+12kc^{2}\left(k-4\right)\left(k-3\right)+6ck^{2}\left(3k-14\right)+12k^{3}}{3c\left(c\left(k-2\right)+2k\right)^{2}}\\
m_{d} & = & 0\\
m_{n} & = & \sqrt{1+c}-1\\
h\left[X\right]& = & \frac{1}{2}\log\left(1+c\right)-\log\left(\frac{c}{\log\left(1+c\right)}\right)\end{eqnarray*}
\end{aligned}\]

where \(\mathrm{Ei}\left(\mathrm{z}\right)\) is the exponential integral function.

Implementation: <span class="title-ref">scipy.stats.bradford</span>

---

continuous_burr.md

---

# Burr Distribution

There are two shape parameters \(c,d > 0\) and the support is \(x \in [0,\infty)\).

\[\begin{aligned}
\begin{eqnarray*} \textrm{Let }k & = & \Gamma\left(d\right)\Gamma\left(1-\frac{2}{c}\right)\Gamma\left(\frac{2}{c}+d\right)-\Gamma^{2}\left(1-\frac{1}{c}\right)\Gamma^{2}\left(\frac{1}{c}+d\right)\\
f\left(x;c,d\right) & = & \frac{cd}{x^{c+1}\left(1+x^{-c}\right)^{d+1}} \\
F\left(x;c,d\right) & = & \left(1+x^{-c}\right)^{-d}\\
G\left(q;c,d\right) & = & \left(q^{-1/d}-1\right)^{-1/c}\\
\mu & = & \frac{\Gamma\left(1-\frac{1}{c}\right)\Gamma\left(\frac{1}{c}+d\right)}{\Gamma\left(d\right)}\\
\mu_{2} & = & \frac{k}{\Gamma^{2}\left(d\right)}\\
\gamma_{1} & = & \frac{1}{\sqrt{k^{3}}}\left[2\Gamma^{3}\left(1-\frac{1}{c}\right)\Gamma^{3}\left(\frac{1}{c}+d\right)+\Gamma^{2}\left(d\right)\Gamma\left(1-\frac{3}{c}\right)\Gamma\left(\frac{3}{c}+d\right)\right.\\
 &  & \left.-3\Gamma\left(d\right)\Gamma\left(1-\frac{2}{c}\right)\Gamma\left(1-\frac{1}{c}\right)\Gamma\left(\frac{1}{c}+d\right)\Gamma\left(\frac{2}{c}+d\right)\right]\\
\gamma_{2} & = & -3+\frac{1}{k^{2}}\left[6\Gamma\left(d\right)\Gamma\left(1-\frac{2}{c}\right)\Gamma^{2}\left(1-\frac{1}{c}\right)\Gamma^{2}\left(\frac{1}{c}+d\right)\Gamma\left(\frac{2}{c}+d\right)\right.\\
 &  & -3\Gamma^{4}\left(1-\frac{1}{c}\right)\Gamma^{4}\left(\frac{1}{c}+d\right)+\Gamma^{3}\left(d\right)\Gamma\left(1-\frac{4}{c}\right)\Gamma\left(\frac{4}{c}+d\right)\\
  &  & \left.-4\Gamma^{2}\left(d\right)\Gamma\left(1-\frac{3}{c}\right)\Gamma\left(1-\frac{1}{c}\right)\Gamma\left(\frac{1}{c}+d\right)\Gamma\left(\frac{3}{c}+d\right)\right]\\
m_{d} & = & \left(\frac{cd-1}{c+1}\right)^{1/c}\,\text{if }\quad cd>1 \text{, otherwise }\quad 0\\
m_{n} & = & \left(2^{1/d}-1\right)^{-1/c}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.burr</span>

---

continuous_burr12.md

---

# Burr12 Distribution

There are two shape parameters \(c,d > 0\) and the support is \(x \in [0,\infty)\). The Burr12 distribution is also known as the Singh-Maddala distribution.

\[\begin{aligned}
\begin{eqnarray*}
f\left(x;c,d\right) & = & {cd} \frac{x^{c-1}} {\left(1+x^{c}\right)^{d+1}} \\
F\left(x;c,d\right) & = & 1 - \left(1+x^{c}\right)^{-d}\\
G\left(q;c,d\right) & = & \left((1-q)^{-1/d}-1\right)^{-1/c}\\
S\left(x;c,d\right) & = & \left(1+x^{c}\right)^{-d}\\
\mu & = & d \,  B\left(d-\frac{1}{c}, 1+\frac{1}{c}\right)\\
\mu_{n} & = & d \, B\left(d-\frac{n}{c}, 1+\frac{n}{c}\right)\\
m_{d} & = & \left(\frac{c-1}{c d + 1}\right)^{1/c} \,\text{if }\quad c>1 \text{, otherwise }\quad 0\\
m_{n} & = & \left(2^{1/d}-1\right)^{-1/c}
\end{eqnarray*}
\end{aligned}\]

where \(B(a, b) = \frac{\Gamma(a)\Gamma(b)}{\Gamma(a+b)}\) is the Beta function.

Implementation: <span class="title-ref">scipy.stats.burr12</span>

---

continuous_cauchy.md

---

# Cauchy Distribution

The support is \(x\in\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{\pi\left(1+x^{2}\right)}\\
F\left(x\right) & = & \frac{1}{2}+\frac{1}{\pi}\tan^{-1}x\\
G\left(q\right) & = & \tan\left(\pi q-\frac{\pi}{2}\right)\\
m_{d} & = & 0\\
m_{n} & = & 0\end{eqnarray*}
\end{aligned}\]

No finite moments. This is the \(t\) distribution with one degree of freedom.

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(4\pi\right)\\  & \approx & 2.5310242469692907930.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.cauchy</span>

---

continuous_chi.md

---

# Chi Distribution

Generated by taking the (positive) square-root of chi-squared variates. The one shape parameter is \(\nu\), a positive integer, the degrees of freedom. The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\nu\right) & = & \frac{x^{\nu-1}e^{-x^{2}/2}}{2^{\nu/2-1}\Gamma\left(\frac{\nu}{2}\right)}\\
F\left(x;\nu\right) & = & \frac{\gamma\left(\frac{\nu}{2},\frac{x^{2}}{2}\right)}{\Gamma(\frac{\nu}{2})}\\
G\left(q;\nu\right) & = & \sqrt{2\gamma^{-1}\left(\frac{\nu}{2},q\Gamma(\frac{\nu}{2})\right)}\\
M\left(t\right) & = & \Gamma\left(\frac{v}{2}\right)\,_{1}F_{1}\left(\frac{v}{2};\frac{1}{2};\frac{t^{2}}{2}\right)+\frac{t}{\sqrt{2}}\Gamma\left(\frac{1+\nu}{2}\right)\,_{1}F_{1}\left(\frac{1+\nu}{2};\frac{3}{2};\frac{t^{2}}{2}\right)\\
\mu & = & \frac{\sqrt{2}\Gamma\left(\frac{\nu+1}{2}\right)}{\Gamma\left(\frac{\nu}{2}\right)}\\
\mu_{2} & = & \nu-\mu^{2}\\
\gamma_{1} & = & \frac{2\mu^{3}+\mu\left(1-2\nu\right)}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{2\nu\left(1-\nu\right)-6\mu^{4}+4\mu^{2}\left(2\nu-1\right)}{\mu_{2}^{2}}\\
m_{d} & = & \sqrt{\nu-1}\quad\nu\geq1\\
m_{n} & = & \sqrt{2\gamma^{-1}\left(\frac{\nu}{2},\frac{1}{2}{\Gamma(\frac{\nu}{2})}\right)}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.chi</span>

---

continuous_chi2.md

---

# Chi-squared Distribution

This is the gamma distribution with \(L=0.0\) and \(S=2.0\) and \(\alpha=\nu/2\) where \(\nu\) is called the degrees of freedom. If \(Z_{1}\ldots Z_{\nu}\) are all standard normal distributions, then \(W=\sum_{k}Z_{k}^{2}\) has (standard) chi-square distribution with \(\nu\) degrees of freedom.

The standard form (most often used in standard form only) has support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\alpha\right) & = & \frac{1}{2\Gamma\left(\frac{\nu}{2}\right)}\left(\frac{x}{2}\right)^{\nu/2-1}e^{-x/2}\\
F\left(x;\alpha\right) & = & \frac{\gamma\left(\frac{\nu}{2},\frac{x}{2}\right)}{\Gamma(\frac{\nu}{2})}\\
G\left(q;\alpha\right) & = & 2\gamma^{-1}\left(\frac{\nu}{2},q{\Gamma(\frac{\nu}{2})}\right)\end{eqnarray*}
\end{aligned}\]

where \(\gamma\) is the lower incomplete gamma function, \(\gamma\left(s, x\right) = \int_0^x t^{s-1} e^{-t} dt\).

\[M\left(t\right)=\frac{\Gamma\left(\frac{\nu}{2}\right)}{\left(\frac{1}{2}-t\right)^{\nu/2}}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \nu\\
\mu_{2} & = & 2\nu\\
\gamma_{1} & = & \frac{2\sqrt{2}}{\sqrt{\nu}}\\
\gamma_{2} & = & \frac{12}{\nu}\\
m_{d} & = & \frac{\nu}{2}-1\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.chi2</span>

---

continuous_cosine.md

---

# Cosine Distribution

Approximation to the normal distribution. The support is \(\left[-\pi,\pi\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{2\pi}\left(1+\cos x\right)\\
F\left(x\right) & = & \frac{1}{2\pi}\left(\pi+x+\sin x\right)\\
G\left(q\right) & = & F^{-1}\left(q\right)\\
M\left(t\right) & = & \frac{\sinh\left(\pi t\right)}{\pi t\left(1+t^{2}\right)}\\
\mu=m_{d}=m_{n} & = & 0\\
\mu_{2} & = & \frac{\pi^{2}}{3}-2\\
\gamma_{1} & = & 0\\
\gamma_{2} & = & \frac{-6\left(\pi^{4}-90\right)}{5\left(\pi^{2}-6\right)^{2}}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(4\pi\right)-1\\
& \approx & 1.5310242469692907930.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.cosine</span>

---

continuous_dgamma.md

---

# Double Gamma Distribution

The double gamma is the signed version of the Gamma distribution. For \(\alpha>0:\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\alpha\right) & = & \frac{1}{2\Gamma\left(\alpha\right)}\left|x\right|^{\alpha-1}e^{-\left|x\right|}\\
F\left(x;\alpha\right) & = & \left\{
  \begin{array}{ccc}
    \frac{1}{2}-\frac{\gamma\left(\alpha,\left|x\right|\right)}{2\Gamma\left(\alpha\right)} &  & x\leq0\\
    \frac{1}{2}+\frac{\gamma\left(\alpha,\left|x\right|\right)}{2\Gamma\left(\alpha\right)} &  & x>0
  \end{array}
\right.\\
G\left(q;\alpha\right) & = & \left\{
  \begin{array}{ccc}
    -\gamma^{-1}\left(\alpha,\left|2q-1\right|\Gamma\left(\alpha\right)\right) &  & q\leq\frac{1}{2}\\
    \gamma^{-1}\left(\alpha,\left|2q-1\right|\Gamma\left(\alpha\right)\right) &  & q>\frac{1}{2}
  \end{array}
\right.\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\frac{1}{2\left(1-t\right)^{a}}+\frac{1}{2\left(1+t\right)^{a}}\]

\[\begin{aligned}
\begin{eqnarray*} \mu=m_{n} & = & 0\\
\mu_{2} & = & \alpha\left(\alpha+1\right)\\
\gamma_{1} & = & 0\\
\gamma_{2} & = & \frac{\left(\alpha+2\right)\left(\alpha+3\right)}{\alpha\left(\alpha+1\right)}-3\\
m_{d} & = & \mathrm{NA}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.dgamma</span>

---

continuous_dpareto_lognorm.md

---

# Double Pareto Lognormal Distribution

For real numbers \(x\) and \(\mu\), \(\sigma > 0\), \(\alpha > 0\), and \(\beta > 0\), the PDF of a double Pareto lognormal distribution is:

\[\begin{eqnarray*}
    f(x, \mu, \sigma, \alpha, \beta) =
    \frac{\alpha \beta}{(\alpha + \beta) x}
    \phi\left( \frac{\log x - \mu}{\sigma} \right)
    \left( R(y_1) + R(y_2) \right)
\end{eqnarray*}\]

where \(R(t) = \frac{1 - \Phi(t)}{\phi(t)}\) is a Mills' ratio, \(y_1 = \alpha \sigma - \frac{\log x - \mu}{\sigma}\), and \(y_2 = \beta \sigma + \frac{\log x - \mu}{\sigma}\). The CDF is:

\[\begin{eqnarray*}
    F(x, \mu, \sigma, \alpha, \beta) =
    \Phi \left(\frac{\log x - \mu}{\sigma} \right) -
    \phi \left(\frac{\log x - \mu}{\sigma} \right)
    \left(\frac{\beta R(x_1) - \alpha R(x_2)}{\alpha + \beta} \right)
\end{eqnarray*}\]

Raw moment \(k > \alpha\) is given by:

\[\begin{eqnarray*}
    \mu_k' = \frac{\alpha \beta}{(\alpha - k)(\beta + k)} 
             \exp \left(k \mu + \frac{k^2 \sigma^2}{2} \right)
\end{eqnarray*}\]

Implementation: <span class="title-ref">scipy.stats.dpareto\_lognorm</span>

---

continuous_dweibull.md

---

# Double Weibull Distribution

This is a signed form of the Weibull distribution. There is one shape parameter \(c>0\). Support is \(x\in\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{c}{2}\left|x\right|^{c-1}\exp\left(-\left|x\right|^{c}\right)\\
F\left(x;c\right) & = & \left\{
    \begin{array}{ccc}
      \frac{1}{2}\exp\left(-\left|x\right|^{c}\right) &  & x\leq0\\
      1-\frac{1}{2}\exp\left(-\left|x\right|^{c}\right) &  & x>0
    \end{array}
    \right.\\
G\left(q;c\right) & = & \left\{
    \begin{array}{ccc}
      -\log^{1/c}\left(\frac{1}{2q}\right) &  & q\leq\frac{1}{2}\\
      \log^{1/c}\left(\frac{1}{2q-1}\right) &  & q>\frac{1}{2}
    \end{array}
   \right.\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\mu_{n}^{\prime}=\mu_{n}=\begin{cases}
  \Gamma\left(1+\frac{n}{c}\right) & n\text{ even}\\
  0 & n\text{ odd}
\end{cases}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} m_{n}=\mu & = & 0\\
\mu_{2} & = & \Gamma\left(\frac{c+2}{c}\right)\\
\gamma_{1} & = & 0\\
\gamma_{2} & = & \frac{\Gamma\left(1+\frac{4}{c}\right)}{\Gamma^{2}\left(1+\frac{2}{c}\right)}\\
m_{d} & = & \text{NA bimodal}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.dweibull</span>

---

continuous_erlang.md

---

# Erlang Distribution

This is just the Gamma distribution with shape parameter \(\alpha=n\) an integer.

Implementation: <span class="title-ref">scipy.stats.erlang</span>

---

continuous_expon.md

---

# Exponential Distribution

This is a special case of the Gamma (and Erlang) distributions with shape parameter \(\left(\alpha=1\right)\) and the same location and scale parameters. The standard form is therefore ( \(x\geq0\) )

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & e^{-x}\\
F\left(x\right) & = & \gamma\left(1,x\right) = 1-e^{-x}\\
G\left(q\right) & = & -\log\left(1-q\right)\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=n!\]

\[M\left(t\right)=\frac{1}{1-t}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & 1\\ \mu_{2} & = & 1\\ \gamma_{1} & = & 2\\ \gamma_{2} & = & 6\\ m_{d} & = & 0\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=1.\]

Implementation: <span class="title-ref">scipy.stats.expon</span>

---

continuous_exponpow.md

---

# Exponential Power Distribution

One positive shape parameter \(b\). The support is \(x\geq0.\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x;b\right) & = & ebx^{b-1}\exp\left(x^{b}-e^{x^{b}}\right)\\
F\left(x;b\right) & = & 1-\exp\left(1-e^{x^{b}}\right)\\
G\left(q;b\right) & = & \log\left(1-\log\left(1-q\right)\right)^{1/b}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.exponpow</span>

---

continuous_exponweib.md

---

# Exponentiated Weibull Distribution

Two positive shape parameters \(a,c>0\), and the support is \(x\in\left[0,\infty\right)\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,c\right) & = & ac\left[1-\exp\left(-x^{c}\right)\right]^{a-1}\exp\left(-x^{c}\right)x^{c-1}\\ F\left(x;a,c\right) & = & \left[1-\exp\left(-x^{c}\right)\right]^{a}\\ G\left(q;a,c\right) & = & \left[-\log\left(1-q^{1/a}\right)\right]^{1/c}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.exponweib</span>

---

continuous_f.md

---

# Fratio (or F) Distribution

The distribution of \(\left(X_{1}/X_{2}\right)\left(\nu_{2}/\nu_{1}\right)\) if \(X_{1}\) is chi-squared with \(v_{1}\) degrees of freedom and \(X_{2}\) is chi-squared with \(v_{2}\) degrees of freedom. The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\nu_{1},\nu_{2}\right) & = & \frac{\nu_{2}^{\nu_{2}/2}\nu_{1}^{\nu_{1}/2}x^{\nu_{1}/2-1}}{\left(\nu_{2}+\nu_{1}x\right)^{\left(\nu_{1}+\nu_{2}\right)/2}B\left(\frac{\nu_{1}}{2},\frac{\nu_{2}}{2}\right)}\\
F\left(x;v_{1},v_{2}\right) & = & I\left(\frac{\nu_{1}x}{\nu_{2}+\nu_{1}x}; \frac{\nu_{1}}{2},\frac{\nu_{2}}{2}\right)\\
G\left(q;\nu_{1},\nu_{2}\right) & = & \left(\frac{\nu_{2}} {I^{-1}\left(q; \nu_{1}/2,\nu_{2}/2\right)}-\frac{\nu_{1}}{\nu_{2}}\right)^{-1}\\
\mu & = & \frac{\nu_{2}}{\nu_{2}-2}\quad\textrm{for }\nu_{2}>2\\
\mu_{2} & = & \frac{2\nu_{2}^{2}\left(\nu_{1}+\nu_{2}-2\right)}{\nu_{1}\left(\nu_{2}-2\right)^{2}\left(\nu_{2}-4\right)}\quad\textrm{for } v_{2}>4\\
\gamma_{1} & = & \frac{2\left(2\nu_{1}+\nu_{2}-2\right)}{\nu_{2}-6}\sqrt{\frac{2\left(\nu_{2}-4\right)}{\nu_{1}\left(\nu_{1}+\nu_{2}-2\right)}}\quad\textrm{for }\nu_{2}>6\\
\gamma_{2} & = & \frac{3\left(8+\left(\nu_{2}-6\right)\gamma_{1}^{2}\right)}{2\nu-16}\quad\textrm{for }\nu_{2}>8\end{eqnarray*}
\end{aligned}\]

where \(I\left(x;a,b\right)=I_{x}\left(a,b\right)\) is the regularized incomplete Beta function.

Implementation: <span class="title-ref">scipy.stats.f</span>

---

continuous_fatiguelife.md

---

# Fatigue Life (Birnbaum-Saunders) Distribution

This distribution's pdf is the average of the inverse-Gaussian \(\left(\mu=1\right)\) and reciprocal inverse-Gaussian pdf \(\left(\mu=1\right)\) . We follow the notation of JKB here with \(\beta=S.\) There is one shape parameter \(c>0\), and the support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{x+1}{2c\sqrt{2\pi x^{3}}}\exp\left(-\frac{\left(x-1\right)^{2}}{2xc^{2}}\right)\\
F\left(x;c\right) & = & \Phi\left(\frac{1}{c}\left(\sqrt{x}-\frac{1}{\sqrt{x}}\right)\right)\\
G\left(q;c\right) & = & \frac{1}{4}\left[c\Phi^{-1}\left(q\right)+\sqrt{c^{2}\left(\Phi^{-1}\left(q\right)\right)^{2}+4}\right]^{2}\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=c\sqrt{2\pi}\exp\left(\frac{1}{c^{2}}\left(1-\sqrt{1-2c^{2}t}\right)\right) \left(1+\frac{1}{\sqrt{1-2c^{2}t}}\right)\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{c^{2}}{2}+1\\
\mu_{2} & = & c^{2}\left(\frac{5}{4}c^{2}+1\right)\\
\gamma_{1} & = & \frac{4c\sqrt{11c^{2}+6}}{\left(5c^{2}+4\right)^{3/2}}\\
\gamma_{2} & = & \frac{6c^{2}\left(93c^{2}+41\right)}{\left(5c^{2}+4\right)^{2}}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.fatiguelife</span>

---

continuous_fisk.md

---

# Fisk (Log Logistic) Distribution

Special case of the Burr distribution with \(d=1\). There is are one shape parameter \(c > 0\) and the support is \(x \in [0,\infty)\).

\[\begin{aligned}
\begin{eqnarray*}\textrm{Let }k & = & \Gamma\left(1-\frac{2}{c}\right)\Gamma\left(\frac{2}{c}+1\right)-\Gamma^{2}\left(1-\frac{1}{c}\right)\Gamma^{2}\left(\frac{1}{c}+1\right)\\
f\left(x;c,d\right) & = & \frac{cx^{c-1}}{\left(1+x^{c}\right)^{2}} \\
F\left(x;c,d\right) & = & \left(1+x^{-c}\right)^{-1}\\
G\left(q;c,d\right) & = & \left(q^{-1}-1\right)^{-1/c}\\
\mu & = & \Gamma\left(1-\frac{1}{c}\right)\Gamma\left(\frac{1}{c}+1\right)\\
\mu_{2} & = & k\\
\gamma_{1} & = & \frac{1}{\sqrt{k^{3}}}\left[2\Gamma^{3}\left(1-\frac{1}{c}\right)\Gamma^{3}\left(\frac{1}{c}+1\right)+\Gamma\left(1-\frac{3}{c}\right)\Gamma\left(\frac{3}{c}+1\right)\right.\\  &  & \left.-3\Gamma\left(1-\frac{2}{c}\right)\Gamma\left(1-\frac{1}{c}\right)\Gamma\left(\frac{1}{c}+1\right)\Gamma\left(\frac{2}{c}+1\right)\right]\\
\gamma_{2} & = & -3+\frac{1}{k^{2}}\left[6\Gamma\left(1-\frac{2}{c}\right)\Gamma^{2}\left(1-\frac{1}{c}\right)\Gamma^{2}\left(\frac{1}{c}+1\right)\Gamma\left(\frac{2}{c}+1\right)\right.\\  &  & -3\Gamma^{4}\left(1-\frac{1}{c}\right)\Gamma^{4}\left(\frac{1}{c}+1\right)+\Gamma\left(1-\frac{4}{c}\right)\Gamma\left(\frac{4}{c}+1\right)\\  &  & \left.-4\Gamma\left(1-\frac{3}{c}\right)\Gamma\left(1-\frac{1}{c}\right)\Gamma\left(\frac{1}{c}+1\right)\Gamma\left(\frac{3}{c}+1\right)\right]\\
m_{d} & = & \left(\frac{c-1}{c+1}\right)^{1/c}\, \text{if }c>1, \text{otherwise } 0\\
m_{n} & = & 1\\
h\left[X\right] & = & 2-\log c\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.fisk</span>

---

continuous_foldcauchy.md

---

# Folded Cauchy Distribution

This formula can be expressed in terms of the standard formulas for the Cauchy distribution (call the cdf \(C\left(x\right)\) and the pdf \(d\left(x\right)\) ). If \(Y\) is cauchy then \(\left|Y\right|\) is folded cauchy. There is one shape parameter \(c\) and the support is \(x\geq0.\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{1}{\pi\left(1+\left(x-c\right)^{2}\right)}+\frac{1}{\pi\left(1+\left(x+c\right)^{2}\right)}\\
F\left(x;c\right) & = & \frac{1}{\pi}\tan^{-1}\left(x-c\right)+\frac{1}{\pi}\tan^{-1}\left(x+c\right)\\
G\left(q;c\right) & = & F^{-1}\left(q;c\right)\end{eqnarray*}
\end{aligned}\]

No moments

Implementation: <span class="title-ref">scipy.stats.foldcauchy</span>

---

continuous_foldnorm.md

---

# Folded Normal Distribution

If \(Z\) is Normal with mean \(L\) and \(\sigma=S\) , then \(\left|Z\right|\) is a folded normal with shape parameter \(c=\left|L\right|/S\) , location parameter \(0\) and scale parameter \(S\) . This is a special case of the non-central chi distribution with one-degree of freedom and non-centrality parameter \(c^{2}.\) Note that \(c\geq0\) . The standard form of the folded normal is

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \sqrt{\frac{2}{\pi}}\cosh\left(cx\right)\exp\left(-\frac{x^{2}+c^{2}}{2}\right)\\
F\left(x;c\right) & = & \Phi\left(x-c\right)-\Phi\left(-x-c\right)=\Phi\left(x-c\right)+\Phi\left(x+c\right)-1\\
G\left(q;c\right) & = & F^{-1}\left(q;c\right)\\
M\left(t\right) & = & \exp\left(\frac{t}{2}\left(t-2c\right)\right) \left(1+e^{2ct}\right)\\
k & = & \mathrm{erf}\left(\frac{c}{\sqrt{2}}\right)\\
p & = & \exp\left(-\frac{c^{2}}{2}\right)\\
\mu & = & \sqrt{\frac{2}{\pi}}p+ck\\
\mu_{2} & = & c^{2}+1-\mu^{2}\\
\gamma_{1} & = & \frac{\sqrt{\frac{2}{\pi}}p^{3}\left(4-\frac{\pi}{p^{2}}\left(2c^{2}+1\right)\right)+2ck\left(6p^{2}+3cpk\sqrt{2\pi}+\pi c\left(k^{2}-1\right)\right)}{\pi\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{c^{4}+6c^{2}+3+6\left(c^{2}+1\right)\mu^{2}-3\mu^{4}-4p\mu\left(\sqrt{\frac{2}{\pi}}\left(c^{2}+2\right)+\frac{ck}{p}\left(c^{2}+3\right)\right)}{\mu_{2}^{2}}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.foldnorm</span>

---

continuous_gamma.md

---

# Gamma Distribution

The standard form for the gamma distribution is \(\left(\alpha>0\right)\) valid for \(x\geq0\) .

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\alpha\right) & = & \frac{1}{\Gamma\left(\alpha\right)}x^{\alpha-1}e^{-x}\\
F\left(x;\alpha\right) & = & \frac{\gamma\left(\alpha,x\right)}{\Gamma(\alpha)}\\
G\left(q;\alpha\right) & = & \gamma^{-1}\left(\alpha,q\Gamma(\alpha)\right)\end{eqnarray*}
\end{aligned}\]

where \(\gamma\) is the lower incomplete gamma function, \(\gamma\left(s, x\right) = \int_0^x t^{s-1} e^{-t} dt\).

\[M\left(t\right)=\frac{1}{\left(1-t\right)^{\alpha}}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \alpha\\
\mu_{2} & = & \alpha\\
\gamma_{1} & = & \frac{2}{\sqrt{\alpha}}\\
\gamma_{2} & = & \frac{6}{\alpha}\\
m_{d} & = & \alpha-1\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\Psi\left(a\right)\left[1-a\right]+a+\log\Gamma\left(a\right)\]

where

\[\Psi\left(a\right)=\frac{\Gamma^{\prime}\left(a\right)}{\Gamma\left(a\right)}.\]

Implementation: <span class="title-ref">scipy.stats.gamma</span>

---

continuous_gausshyper.md

---

# Gauss Hypergeometric Distribution

The four shape parameters are \(\alpha>0\), \(\beta>0\), \(-\infty < \gamma < \infty\), and \(z > -1\). The support is \(x\in\left[0,1\right]\).

\[\text{Let }C=\frac{1}{B\left(\alpha,\beta\right)\,_{2}F_{1}\left(\gamma,\alpha;\alpha+\beta;-z\right)}\]

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\alpha,\beta,\gamma,z\right) & = & Cx^{\alpha-1}\frac{\left(1-x\right)^{\beta-1}}{\left(1+zx\right)^{\gamma}}\\ \mu_{n}^{\prime} & = & \frac{B\left(n+\alpha,\beta\right)}{B\left(\alpha,\beta\right)}\frac{\,_{2}F_{1}\left(\gamma,\alpha+n;\alpha+\beta+n;-z\right)}{\,_{2}F_{1}\left(\gamma,\alpha;\alpha+\beta;-z\right)}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.gausshyper</span>

---

continuous_genexpon.md

---

# Generalized Exponential Distribution

Three positive shape parameters \(a,b,c>0\) with support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,b,c\right) & = & \left(a+b\left(1-e^{-cx}\right)\right)\exp\left(ax-bx+\frac{b}{c}\left(1-e^{-cx}\right)\right)\\
F\left(x;a,b,c\right) & = & 1-\exp\left(ax-bx+\frac{b}{c}\left(1-e^{-cx}\right)\right)\\
G\left(q;a,b,c\right) & = & F^{-1}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.genexpon</span>

---

continuous_genextreme.md

---

# Generalized Extreme Value Distribution

Extreme value distributions with one shape parameter \(c\).

If \(c>0\), the support is \(-\infty<x\leq1/c.\) If \(c<0\), the support is \(\frac{1}{c}\leq x<\infty.\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \exp\left(-\left(1-cx\right)^{1/c}\right)\left(1-cx\right)^{1/c-1}\\
F\left(x;c\right) & = & \exp\left(-\left(1-cx\right)^{1/c}\right)\\
G\left(q;c\right) & = & \frac{1}{c}\left(1-\left(-\log q\right)^{c}\right)\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\frac{1}{c^{n}} \sum_{k=0}^{n} \binom{n}{k} \left(-1\right)^{k}\Gamma\left(ck+1\right)\quad\text{if } cn>-1\]

So,

\[\begin{aligned}
\begin{eqnarray*} \mu_{1}^{\prime} & = & \frac{1}{c}\left(1-\Gamma\left(1+c\right)\right)\quad c>-1\\
\mu_{2}^{\prime} & = & \frac{1}{c^{2}}\left(1-2\Gamma\left(1+c\right)+\Gamma\left(1+2c\right)\right)\quad c>-\frac{1}{2}\\
\mu_{3}^{\prime} & = & \frac{1}{c^{3}}\left(1-3\Gamma\left(1+c\right)+3\Gamma\left(1+2c\right)-\Gamma\left(1+3c\right)\right)\quad c>-\frac{1}{3}\\
\mu_{4}^{\prime} & = & \frac{1}{c^{4}}\left(1-4\Gamma\left(1+c\right)+6\Gamma\left(1+2c\right)-4\Gamma\left(1+3c\right)+\Gamma\left(1+4c\right)\right)\quad c>-\frac{1}{4}\end{eqnarray*}
\end{aligned}\]

For \(c=0\) the distribution is the same as the (left-skewed) Gumbel distribution, and the support is \(\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;0\right) & = & \exp\left(-e^{-x}\right)e^{-x}\\
F\left(x;0\right) & = & \exp\left(-e^{-x}\right)\\
G\left(q;0\right) & = & -\log\left(-\log q\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \gamma=-\psi_{0}\left(1\right)\\
\mu_{2} & = & \frac{\pi^{2}}{6}\\
\gamma_{1} & = & \frac{12\sqrt{6}}{\pi^{3}}\zeta\left(3\right)\\
\gamma_{2} & = & \frac{12}{5}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.genextreme</span>

---

continuous_gengamma.md

---

# Generalized Gamma Distribution

A general probability form that reduces to many common distributions. There are two shape parameters \(a>0\) and \(c\neq0\). The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,c\right) & = & \frac{\left|c\right|x^{ca-1}}{\Gamma\left(a\right)}\exp\left(-x^{c}\right)\\
F\left(x;a,c\right) & = &
  \left\{
    \begin{array}{cc}
      \frac{\gamma\left(a,x^{c}\right)}{\Gamma\left(a\right)} & c>0\\
      1-\frac{\gamma\left(a,x^{c}\right)}{\Gamma\left(a\right)} & c<0
    \end{array}
  \right. \\
G\left(q;a,c\right) & = &
  \left\{
    \begin{array}{cc}
      \gamma^{-1} \left(a, \Gamma\left(a\right) q \right)^{1/c} &  c>0 \\
      \gamma^{-1} \left(a, \Gamma\left(a\right) \left(1-q\right) \right)^{1/c} & c<0
    \end{array}
  \right. \end{eqnarray*}
\end{aligned}\]

where \(\gamma\) is the lower incomplete gamma function, \(\gamma\left(s, x\right) = \int_0^x t^{s-1} e^{-t} dt\).

\[\begin{aligned}
\begin{eqnarray*}  \mu_{n}^{\prime} & = & \frac{\Gamma\left(a+\frac{n}{c}\right)}{\Gamma\left(a\right)}\\
\mu & = & \frac{\Gamma\left(a+\frac{1}{c}\right)}{\Gamma\left(a\right)}\\
\mu_{2} & = & \frac{\Gamma\left(a+\frac{2}{c}\right)}{\Gamma\left(a\right)}-\mu^{2}\\
\gamma_{1} & = & \frac{\Gamma\left(a+\frac{3}{c}\right)/\Gamma\left(a\right)-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{\Gamma\left(a+\frac{4}{c}\right)/\Gamma\left(a\right)-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}}{\mu_{2}^{2}}-3\\
m_{d} & = & \left(\frac{ac-1}{c}\right)^{1/c}\end{eqnarray*}
\end{aligned}\]

Special cases are Weibull \(\left(a=1\right)\), half-normal \(\left(a=1/2,c=2\right)\) and ordinary gamma distributions \(c=1.\) If \(c=-1\) then it is the inverted gamma distribution.

\[h\left[X\right]=a-a\Psi\left(a\right)+\frac{1}{c}\Psi\left(a\right)+\log\Gamma\left(a\right)-\log\left|c\right|.\]

Implementation: <span class="title-ref">scipy.stats.gengamma</span>

---

continuous_genhalflogistic.md

---

# Generalized Half-Logistic Distribution

One shape parameter \(c>0\) and support \(x\in\left[0,1/c\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{2\left(1-cx\right)^{\frac{1}{c}-1}}{\left(1+\left(1-cx\right)^{1/c}\right)^{2}}\\
F\left(x;c\right) & = & \frac{1-\left(1-cx\right)^{1/c}}{1+\left(1-cx\right)^{1/c}}\\
G\left(q;c\right) & = & \frac{1}{c}\left[1-\left(\frac{1-q}{1+q}\right)^{c}\right]\end{eqnarray*}
\end{aligned}\]

\[\begin{eqnarray*} h\left[X\right] & = & 2-\left(2c+1\right)\log2.\end{eqnarray*}\]

Implementation: <span class="title-ref">scipy.stats.genhalflogistic</span>

---

continuous_genhyperbolic.md

---

# Generalized Hyperbolic Distribution

The Generalized Hyperbolic Distribution is defined as the normal variance-mean mixture with Generalized Inverse Gaussian distribution as the mixing distribution. The "hyperbolic" characterization refers to the fact that the shape of the log-probability distribution can be described as a hyperbola. Hyperbolic distributions are sometime referred to as semi-fat tailed because their probability density decrease slower than "sub-hyperbolic" distributions (e.g. normal distribution, whose log-probability decreases quadratically), but faster than other "extreme value" distributions (e.g. <span class="title-ref">pareto</span> distribution, whose log-probability decreases logarithmically).

## Functions

Different parameterizations exist in the literature; SciPy implements the "4th parametrization" in Prause (1999).

\[\begin{eqnarray*}
    f(x, p, a, b) & = &
    \frac{(a^2 - b^2)^{p/2}}
    {\sqrt{2\pi}a^{p-0.5}
    K_p\Big(\sqrt{a^2 - b^2}\Big)}
    e^{bx} \times \frac{K_{p - 1/2}
    (a \sqrt{1 + x^2})}
    {(\sqrt{1 + x^2})^{1/2 - p}}
\end{eqnarray*}\]

for:

  - \(x, p \in ( - \infty; \infty)\)
  - \(|b| < a\) if \(p \ge 0\)
  - \(|b| \le a\) if \(p < 0\)
  - \(K_{p}(.)\) denotes the modified Bessel function of the second kind and order \(p\) (<span class="title-ref">scipy.special.kn</span>)

The probability density above is defined in the "standardized" form. To shift and/or scale the distribution use the \(\text{loc}\) and \(\text{scale}\) parameters. Specifically, \(f(x, p, a, b, \text{loc}, \text{scale})\) is identically equivalent to \(\frac{1}{\text{scale}}f(y, p, a, b)\) with \(y = \frac{1}{\text{scale}}(x - \text{loc})\).

This parameterization derives from the original \((\lambda, \alpha, \beta, \delta, \mu)\) parameterization in Barndorff (1978) by setting:

  - \(\lambda = p\)
  - \(\alpha = \frac{a}{\delta} = \frac{\hat{\alpha}}{\delta}\)
  - \(\beta = \frac{b}{\delta} = \frac{\hat{\beta}}{\delta}\)
  - \(\delta = \text{scale}\)
  - \(\mu = \text{location}\)

Random variates for the <span class="title-ref">scipy.stats.genhyperbolic</span> can be efficiently sampled from the above-mentioned normal variance-mean mixture where <span class="title-ref">scipy.stats.geninvgauss</span> is parametrized as \(GIG\Big(p = p, b = \sqrt{\hat{\alpha}^2 - \hat{\beta}^2}, \text{loc} = \text{location}, \text{scale} = \frac{1}{\sqrt{\hat{\alpha}^2 - \hat{\beta}^2}}\Big)\) so that: \(GH(p, \hat{\alpha}, \hat{\beta}) = \hat{\beta} \cdot GIG + \sqrt{GIG} \cdot N(0,1)\)

The "generalized" characterization suggests the fact that this distribution is a superclass of several other probability distribution, for instance:

  - \(f(p = -\nu/2,  a = 0, b = 0, \text{loc} = 0, \text{scale} = \sqrt{\nu})\) has a Student's t-distribution (<span class="title-ref">scipy.stats.t</span>) with \(\nu\) degrees of freedom.
  - \(f(p = 1, a = \hat{\alpha}, b = \hat{\beta}, \text{loc} = \mu, \text{scale} = \delta)\) has a Hyperbolic Distribution.
  - \(f(p = - 1/2, a = \hat{\alpha}, b = \hat{\beta}, \text{loc} = \mu, \text{scale} = \delta)\) has a Normal Inverse Gaussian Distribution (<span class="title-ref">scipy.stats.norminvgauss</span>).
  - \(f(p = 1, a = \delta, b = 0, loc = \mu, \text{scale} = \delta)\) has a Laplace Distribution (<span class="title-ref">scipy.stats.laplace</span>) for \(\delta \rightarrow 0\)

## Examples

It is useful to understand how the parameters affect the shape of the distribution. While it is fairly straightforward to interpret the meaning of \(b\) as the skewness, understanding the difference between \(a\) and \(p\) is not as obvious, as both affect the kurtosis of the distribution. \(a\) can be interpreted as the speed of the decay of the probability density (where \(a > 1\) the asymptotic decay is faster than \(log_e\) and vice versa) or - equivalently - as the slope of the log-probability hyperbola asymptote (where \(a > 1\) decay is faster than \(|1|\) and vice versa). \(p\) can be seen as the width of the shoulders of the probability density distribution (where \(p < 1\) results in narrow shoulders and vice versa) or - equivalently - as the shape of the log-probability hyperbola, which is convex for \(p < 1\) and concave otherwise.

`` `python     import numpy as np     from matplotlib import pyplot as plt     from scipy import stats      p, a, b, loc, scale = 1, 1, 0, 0, 1     x = np.linspace(-10, 10, 100)      # plot GH for different values of p     plt.figure(0)     plt.title("Generalized Hyperbolic | -10 < p < 10")     plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             label = 'GH(p=1, a=1, b=0, loc=0, scale=1)')     plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'red', alpha = 0.5, label='GH(p>1, a=1, b=0, loc=0, scale=1)')     [plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'red', alpha = 0.1) for p in np.linspace(1, 10, 10)]     plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'blue', alpha = 0.5, label='GH(p<1, a=1, b=0, loc=0, scale=1)')     [plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'blue', alpha = 0.1) for p in np.linspace(-10, 1, 10)]     plt.plot(x, stats.norm.pdf(x, loc, scale), label = 'N(loc=0, scale=1)')     plt.plot(x, stats.laplace.pdf(x, loc, scale), label = 'Laplace(loc=0, scale=1)')     plt.plot(x, stats.pareto.pdf(x+1, 1, loc, scale), label = 'Pareto(a=1, loc=0, scale=1)')     plt.ylim(1e-15, 1e2)     plt.yscale('log')     plt.legend(bbox_to_anchor=(1.1, 1))     plt.subplots_adjust(right=0.5)      # plot GH for different values of a     plt.figure(1)     plt.title("Generalized Hyperbolic | 0 < a < 10")     plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             label = 'GH(p=1, a=1, b=0, loc=0, scale=1)')     plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'blue', alpha = 0.5, label='GH(p=1, a>1, b=0, loc=0, scale=1)')     [plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'blue', alpha = 0.1) for a in np.linspace(1, 10, 10)]     plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'red', alpha = 0.5, label='GH(p=1, 0<a<1, b=0, loc=0, scale=1)')     [plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),             color = 'red', alpha = 0.1) for a in np.linspace(0, 1, 10)]     plt.plot(x, stats.norm.pdf(x, loc, scale),  label = 'N(loc=0, scale=1)')     plt.plot(x, stats.laplace.pdf(x, loc, scale), label = 'Laplace(loc=0, scale=1)')     plt.plot(x, stats.pareto.pdf(x+1, 1, loc, scale), label = 'Pareto(a=1, loc=0, scale=1)')     plt.ylim(1e-15, 1e2)     plt.yscale('log')     plt.legend(bbox_to_anchor=(1.1, 1))     plt.subplots_adjust(right=0.5)      plt.show()  References ``\` ----------

  - Normal Variance-Mean Mixture <https://en.wikipedia.org/wiki/Normal_variance-mean_mixture>
  - Generalized Hyperbolic Distribution <https://en.wikipedia.org/wiki/Generalised_hyperbolic_distribution>
  - O. Barndorff-Nielsen, "Hyperbolic Distributions and Distributions on Hyperbolae", Scandinavian Journal of Statistics, Vol. 5(3), pp. 151-157, 1978. <https://www.jstor.org/stable/4615705>
  - Eberlein E., Prause K. (2002) The Generalized Hyperbolic Model: Financial Derivatives and Risk Measures. In: Geman H., Madan D., Pliska S.R., Vorst T. (eds) Mathematical Finance - Bachelier Congress 2000. Springer Finance. Springer, Berlin, Heidelberg. <https://doi.org/10.1007/978-3-662-12429-1_12>
  - Scott, David J, Würtz, Diethelm, Dong, Christine and Tran, Thanh Tam, (2009), Moments of the generalized hyperbolic distribution, MPRA Paper, University Library of Munich, Germany, <https://EconPapers.repec.org/RePEc:pra:mprapa:19081>.

Implementation: <span class="title-ref">scipy.stats.genhyperbolic</span>

---

continuous_geninvgauss.md

---

# Generalized Inverse Gaussian Distribution

The probability density function is given by:

\[\begin{eqnarray*}
        f(x; p, b) = x^{p-1} \exp(-b(x + 1/x)/2) / (2 K_p(b)),
\end{eqnarray*}\]

where \(x > 0\) is a real number and the parameters \(p, b\) satisfy \(b > 0\). \(K_v\) is the modified Bessel function of second kind of order \(v\) (<span class="title-ref">scipy.special.kv</span>).

If <span class="title-ref">X</span> is `geninvgauss(p, b)`, then the distribution of <span class="title-ref">1/X</span> is `geninvgauss(-p, b)`. The inverse Gaussian distribution (<span class="title-ref">scipy.stats.invgauss</span>) is a special case with p=-1/2.

Implementation: <span class="title-ref">scipy.stats.geninvgauss</span>

---

continuous_genlogistic.md

---

# Generalized Logistic Distribution

Has been used in the analysis of extreme values. There is one shape parameter \(c>0\). The support is \(x \in \mathcal{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{c\exp\left(-x\right)}{\left[1+\exp\left(-x\right)\right]^{c+1}}\\
F\left(x;c\right) & = & \frac{1}{\left[1+\exp\left(-x\right)\right]^{c}}\\
G\left(q;c\right) & = & -\log\left(q^{-1/c}-1\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\frac{c}{1-t}\,_{2}F_{1}\left(1+c,\,1-t\,;\,2-t\,;-1\right)\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \gamma+\psi_{0}\left(c\right)\\
\mu_{2} & = & \frac{\pi^{2}}{6}+\psi_{1}\left(c\right)\\
\gamma_{1} & = & \frac{\psi_{2}\left(c\right)+2\zeta\left(3\right)}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{\left(\frac{\pi^{4}}{15}+\psi_{3}\left(c\right)\right)}{\mu_{2}^{2}}\\
m_{d} & = & \log c\\
m_{n} & = & -\log\left(2^{1/c}-1\right)\end{eqnarray*}
\end{aligned}\]

Note that the polygamma function is

\[\begin{aligned}
\begin{eqnarray*} \psi_{n}\left(z\right) & = & \frac{d^{n+1}}{dz^{n+1}}\log\Gamma\left(z\right)\\
& = & \left(-1\right)^{n+1}n!\sum_{k=0}^{\infty}\frac{1}{\left(z+k\right)^{n+1}}\\
& = & \left(-1\right)^{n+1}n!\zeta\left(n+1,z\right)\end{eqnarray*}
\end{aligned}\]

where \(\zeta\left(k,x\right)\) is a generalization of the Riemann zeta function called the Hurwitz zeta function. Note that \(\zeta\left(n\right)\equiv\zeta\left(n,1\right)\).

Implementation: <span class="title-ref">scipy.stats.genlogistic</span>

---

continuous_gennorm.md

---

# Generalized Normal Distribution

This distribution is also known as the exponential power distribution. It has a single shape parameter \(\beta>0\). It reduces to a number of common distributions.

## Functions

\[\begin{eqnarray*} f\left(x; \beta\right) & = &\frac{\beta}{2\Gamma(1/\beta)} e^{-\left|x\right|^{\beta}} \end{eqnarray*}\]

\[\begin{eqnarray*} F\left(x; \beta\right) & = & \frac{1}{2} + \mathrm{sgn}\left(x\right) \frac{\gamma\left(1/\beta, x^{\beta}\right)}{2\Gamma\left(1/\beta\right)} \end{eqnarray*}\]

\(\gamma\) is the lower incomplete gamma function. \(\gamma\left(s, x\right) = \int_0^x t^{s-1} e^{-t} dt\).

\[\begin{eqnarray*} h\left[X; \beta\right] = \frac{1}{\beta} - \log\left(\frac{\beta}{2\Gamma\left(1/\beta\right)}\right)\end{eqnarray*}\]

## Moments

\[\begin{aligned}
\begin{eqnarray*}
\mu & = & 0 \\
m_{n} & = & 0 \\
m_{d} & = & 0 \\
\mu_2 &  = & \frac{\Gamma\left(3/\beta\right)}{\gamma\left(1/\beta\right)} \\
\gamma_1 & = & 0 \\
\gamma_2 & = & \frac{\Gamma\left(5/\beta\right) \Gamma\left(1/\beta\right)}{\Gamma\left(3/\beta\right)^2} - 3 \\
\end{eqnarray*}
\end{aligned}\]

## Special Cases

  - Laplace distribution (\(\beta = 1\))
  - Normal distribution with \(\mu_2 = 1/2\) (\(\beta = 2\))
  - Uniform distribution over the interval \([-1, 1]\) (\(\beta \rightarrow \infty\))

## Sources

  - <https://en.wikipedia.org/wiki/Generalized_normal_distribution#Version_1>
  - <https://en.wikipedia.org/wiki/Incomplete_gamma_function#Lower_incomplete_Gamma_function>

Implementation: <span class="title-ref">scipy.stats.gennorm</span>

---

continuous_genpareto.md

---

# Generalized Pareto Distribution

There is one shape parameter \(c\neq0\). The support is \(x\geq0\) if \(c>0\), and \(0\leq x<\frac{1}{\left|c\right|}\) if \(c\) is negative.

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \left(1+cx\right)^{-1-\frac{1}{c}}\\
F\left(x;c\right) & = & 1-\frac{1}{\left(1+cx\right)^{1/c}}\\
G\left(q;c\right) & = & \frac{1}{c}\left[\left(\frac{1}{1-q}\right)^{c}-1\right]\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
M\left(t\right) = \left\{
  \begin{array}{cc}
    \left(-\frac{t}{c}\right)^{\frac{1}{c}}
    e^{-\frac{t}{c}}
    \left[
    \Gamma\left(1-\frac{1}{c}\right)
    + \left(\gamma\left(-\frac{1}{c},-\frac{t}{c}\right) / \Gamma\left(\frac{1}{-c}\right)\right)
      - \pi\csc\left(\frac{\pi}{c}\right)/\Gamma\left(\frac{1}{c}\right)
      \right] & c>0\\
    \left(
    \frac{\left|c\right|}{t}\right)^{1/\left|c\right|}
    \Gamma\left(\frac{1}{\left|c\right|}, \frac{t}{\left|c\right|}\right)
    \frac{1}{\Gamma\left(\frac{1}{|c|}\right)}
     & c<0
  \end{array}
  \right.
\end{aligned}\]

\[\mu_{n}^{\prime}=\frac{\left(-1\right)^{n}}{c^{n}}\sum_{k=0}^{n}\binom{n}{k}\frac{\left(-1\right)^{k}}{1-ck}\quad \text{ if }cn<1\]

\[\begin{aligned}
\begin{eqnarray*} \mu_{1}^{\prime} & = & \frac{1}{1-c}\quad c<1\\
\mu_{2}^{\prime} & = & \frac{2}{\left(1-2c\right)\left(1-c\right)}\quad c<\frac{1}{2}\\
\mu_{3}^{\prime} & = & \frac{6}{\left(1-c\right)\left(1-2c\right)\left(1-3c\right)}\quad c<\frac{1}{3}\\
\mu_{4}^{\prime} & = & \frac{24}{\left(1-c\right)\left(1-2c\right)\left(1-3c\right)\left(1-4c\right)}\quad c<\frac{1}{4}\end{eqnarray*}
\end{aligned}\]

Thus,

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \mu_{1}^{\prime}\\
\mu_{2} & = & \mu_{2}^{\prime}-\mu^{2}\\
\gamma_{1} & = & \frac{\mu_{3}^{\prime}-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{\mu_{4}^{\prime}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}}{\mu_{2}^{2}}-3\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=1+c\quad c>0\]

Implementation: <span class="title-ref">scipy.stats.genpareto</span>

---

continuous_gibrat.md

---

# Gibrat Distribution

Special case of the log-normal with \(\sigma=1\) and \(S=1.0\), typically also \(L=0.0\).)

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\sigma\right) & = & \frac{1}{x\sqrt{2\pi}}\exp\left(-\frac{1}{2}\left(\log x\right)^{2}\right)\\
F\left(x;\sigma\right) & = & \Phi\left(\log x\right)=\frac{1}{2}\left(1+\mathrm{erf}\left(\frac{\log x}{\sqrt{2}}\right)\right)\\
G\left(q;\sigma\right) & = & \exp\left( \Phi^{-1}\left(q\right)\right) \end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \sqrt{e}\\
\mu_{2} & = & e\left[e-1\right]\\
\gamma_{1} & = & \sqrt{e-1}\left(2+e\right)\\
\gamma_{2} & = & e^{4}+2e^{3}+3e^{2}-6\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(\sqrt{2\pi e}\right)\\
 & \approx & 1.4189385332046727418\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.gibrat</span>

---

continuous_gompertz.md

---

# Gompertz (Truncated Gumbel) Distribution

For \(x\geq0\) and \(c>0\) . In JKB the two shape parameters \(b,a\) are reduced to the single shape-parameter \(c=b/a\) . As \(a\) is just a scale parameter when \(a\neq0\) . If \(a=0,\) the distribution reduces to the exponential distribution scaled by \(1/b.\) Thus, the standard form is given as

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & ce^{x}\exp\left(-c\left(e^{x}-1\right)\right)\\
F\left(x;c\right) & = & 1-\exp\left(-c\left(e^{x}-1\right)\right)\\
G\left(q;c\right) & = & \log\left(1-\frac{1}{c}\log\left(1-q\right)\right)\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=1-\log\left(c\right)-e^{c}\mathrm{Ei}\left(1,c\right),\]

where

\[\mathrm{Ei}\left(n,x\right)=\int_{1}^{\infty}t^{-n}\exp\left(-xt\right)dt\]

Implementation: <span class="title-ref">scipy.stats.gompertz</span>

---

continuous_gumbel_l.md

---

# Gumbel Left-skewed (for minimum order statistic) Distribution

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \exp\left(x-e^{x}\right)\\ F\left(x\right) & = & 1-\exp\left(-e^{x}\right)\\ G\left(q\right) & = & \log\left(-\log\left(1-q\right)\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\Gamma\left(1+t\right)\]

Note, that \(\mu\) is negative the mean for the right-skewed distribution. Similar for median and mode. All other moments are the same.

\[h\left[X\right]\approx1.0608407169541684911.\]

Implementation: <span class="title-ref">scipy.stats.gumbel\_l</span>

---

continuous_gumbel_r.md

---

# Gumbel (LogWeibull, Fisher-Tippetts, Type I Extreme Value) Distribution

One of a class of extreme value distributions (right-skewed).

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \exp\left(-\left(x+e^{-x}\right)\right)\\ F\left(x\right) & = & \exp\left(-e^{-x}\right)\\ G\left(q\right) & = & -\log\left(-\log\left(q\right)\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\Gamma\left(1-t\right)\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \gamma=-\psi_{0}\left(1\right)\\ \mu_{2} & = & \frac{\pi^{2}}{6}\\ \gamma_{1} & = & \frac{12\sqrt{6}}{\pi^{3}}\zeta\left(3\right)\\ \gamma_{2} & = & \frac{12}{5}\\ m_{d} & = & 0\\ m_{n} & = & -\log\left(\log2\right)\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]\approx1.0608407169541684911\]

Implementation: <span class="title-ref">scipy.stats.gumbel\_r</span>

---

continuous_halfcauchy.md

---

# HalfCauchy Distribution

If \(Z\) is Hyperbolic Secant distributed then \(e^{Z}\) is Half-Cauchy distributed. Also, if \(W\) is (standard) Cauchy distributed, then \(\left|W\right|\) is Half-Cauchy distributed. Special case of the Folded Cauchy distribution with \(c=0.\) The support is \(x\geq0\). The standard form is

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{2}{\pi\left(1+x^{2}\right)} \\
F\left(x\right) & = & \frac{2}{\pi}\arctan\left(x\right)\\
G\left(q\right) & = & \tan\left(\frac{\pi}{2}q\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\cos t+\frac{2}{\pi}\left[\mathrm{Si}\left(t\right)\cos t-\mathrm{Ci}\left(\mathrm{-}t\right)\sin t\right]\]

where \(\mathrm{Si}(t)=\int_0^t \frac{\sin x}{x} dx\), \(\mathrm{Ci}(t)=-\int_t^\infty \frac{\cos x}{x} dx\).

\[\begin{aligned}
\begin{eqnarray*} m_{d} & = & 0\\
m_{n} & = & \tan\left(\frac{\pi}{4}\right)\end{eqnarray*}
\end{aligned}\]

No moments, as the integrals diverge.

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(2\pi\right)\\  & \approx & 1.8378770664093454836.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.halfcauchy</span>

---

continuous_halflogistic.md

---

# Half-Logistic Distribution

In the limit as \(c\rightarrow\infty\) for the generalized half-logistic we have the half-logistic defined over \(x\geq0.\) Also, the distribution of \(\left|X\right|\) where \(X\) has logistic distribution.

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{2e^{-x}}{\left(1+e^{-x}\right)^{2}}=\frac{1}{2}\mathrm{sech}^{2}\left(\frac{x}{2}\right)\\
F\left(x\right) & = & \frac{1-e^{-x}}{1+e^{-x}}=\tanh\left(\frac{x}{2}\right)\\
G\left(q\right) & = & \log\left(\frac{1+q}{1-q}\right)=2\mathrm{arctanh}\left(q\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=1-t\psi_{0}\left(\frac{1}{2}-\frac{t}{2}\right)+t\psi_{0}\left(1-\frac{t}{2}\right)\]

where \(\psi_m\) is the polygamma function \(\psi_m(z) = \frac{d^{m+1}}{dz^{m+1}} \log(\Gamma(z))\).

\[\mu_{n}^{\prime}=2\left(1-2^{1-n}\right)n!\zeta\left(n\right)\quad n\neq1\]

\[\begin{aligned}
\begin{eqnarray*} \mu_{1}^{\prime} & = & 2\log\left(2\right)\\
\mu_{2}^{\prime} & = & 2\zeta\left(2\right)=\frac{\pi^{2}}{3}\\
\mu_{3}^{\prime} & = & 9\zeta\left(3\right)\\
\mu_{4}^{\prime} & = & 42\zeta\left(4\right)=\frac{7\pi^{4}}{15}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & 2-\log\left(2\right)\\  & \approx & 1.3068528194400546906.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.halflogistic</span>

---

continuous_halfnorm.md

---

# HalfNormal Distribution

This is a special case of the chi distribution with \(L=a\) and \(S=b\) and \(\nu=1.\) This is also a special case of the folded normal with shape parameter \(c=0\) and \(S=S.\) If \(Z\) is (standard) normally distributed then, \(\left|Z\right|\) is half-normal. The standard form is

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \sqrt{\frac{2}{\pi}}e^{-x^{2}/2}\\
F\left(x\right) & = & 2\Phi\left(x\right)-1\\
G\left(q\right) & = & \Phi^{-1}\left(\frac{1+q}{2}\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\sqrt{2\pi}e^{t^{2}/2}\Phi\left(t\right)\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \sqrt{\frac{2}{\pi}}\\
\mu_{2} & = & 1-\frac{2}{\pi}\\
\gamma_{1} & = & \frac{\sqrt{2}\left(4-\pi\right)}{\left(\pi-2\right)^{3/2}}\\
\gamma_{2} & = & \frac{8\left(\pi-3\right)}{\left(\pi-2\right)^{2}}\\
m_{d} & = & 0\\
m_{n} & = & \Phi^{-1}\left(\frac{3}{4}\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(\sqrt{\frac{\pi e}{2}}\right)\\  & \approx & 0.72579135264472743239.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.halfnorm</span>

---

continuous_hypsecant.md

---

# Hyperbolic Secant Distribution

Related to the logistic distribution and used in lifetime analysis. Standard form is (defined over all \(x\) )

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{\pi}\mathrm{sech}\left(x\right)\\
F\left(x\right) & = & \frac{2}{\pi}\arctan\left(e^{x}\right)\\
G\left(q\right) & = & \log\left(\tan\left(\frac{\pi}{2}q\right)\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\sec\left(\frac{\pi}{2}t\right)\]

\[\begin{aligned}
\begin{eqnarray*} \mu_{n}^{\prime} & = & \frac{1+\left(-1\right)^{n}}{2\pi2^{2n}}n!\left[\zeta\left(n+1,\frac{1}{4}\right)-\zeta\left(n+1,\frac{3}{4}\right)\right]\\
 & = & \left\{
   \begin{array}{cc}
     0 & n \text{ odd}\\
     C_{n/2}\frac{\pi^{n}}{2^{n}} & n \text{ even}
   \end{array}
 \right.\end{eqnarray*}
\end{aligned}\]

where \(C_{m}\) is an integer given by

\[\begin{aligned}
\begin{eqnarray*} C_{m} & = & \frac{\left(2m\right)!\left[\zeta\left(2m+1,\frac{1}{4}\right)-\zeta\left(2m+1,\frac{3}{4}\right)\right]}{\pi^{2m+1}2^{2m}}\\
 & = & 4\left(-1\right)^{m-1}\frac{16^{m}}{2m+1}B_{2m+1}\left(\frac{1}{4}\right)\end{eqnarray*}
\end{aligned}\]

where \(B_{2m+1}\left(\frac{1}{4}\right)\) is the Bernoulli polynomial of order \(2m+1\) evaluated at \(1/4.\) Thus

\[\begin{aligned}
\mu_{n}^{\prime}=\left\{
  \begin{array}{cc}
   0 & n \text{ odd}\\
   4\left(-1\right)^{n/2-1}\frac{\left(2\pi\right)^{n}}{n+1}B_{n+1}\left(\frac{1}{4}\right) & n \text{ even}
 \end{array}
 \right.
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} m_{d}=m_{n}=\mu & = & 0\\
\mu_{2} & = & \frac{\pi^{2}}{4}\\
\gamma_{1} & = & 0\\
\gamma_{2} & = & 2\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\log\left(2\pi\right).\]

Implementation: <span class="title-ref">scipy.stats.hypsecant</span>

---

continuous_invgamma.md

---

# Inverted Gamma Distribution

Special case of the generalized Gamma distribution with \(c=-1\) and \(a>0\) and support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a\right) & = & \frac{x^{-a-1}}{\Gamma\left(a\right)}\exp\left(-\frac{1}{x}\right)\\
F\left(x;a\right) & = & \frac{\Gamma\left(a,\frac{1}{x}\right)}{\Gamma\left(a\right)}\\
G\left(q;a\right) & = & \left\{ \Gamma^{-1}\left(a,\Gamma\left(a\right)q\right)\right\} ^{-1}\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\frac{\Gamma\left(a-n\right)}{\Gamma\left(a\right)}\quad a>n\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{1}{a-1}\quad a>1\\
\mu_{2} & = & \frac{1}{\left(a-2\right)\left(a-1\right)}-\mu^{2}\quad a>2\\
\gamma_{1} & = & \frac{\frac{1}{\left(a-3\right)\left(a-2\right)\left(a-1\right)}-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{\frac{1}{\left(a-4\right)\left(a-3\right)\left(a-2\right)\left(a-1\right)}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}}{\mu_{2}^{2}}-3\end{eqnarray*}
\end{aligned}\]

\[m_{d}=\frac{1}{a+1}\]

\[h\left[X\right]=a-\left(a+1\right)\psi\left(a\right)+\log\Gamma\left(a\right).\]

where \(\Psi\) is the digamma function \(\psi(z) = \frac{d}{dz} \log(\Gamma(z))\).

Implementation: <span class="title-ref">scipy.stats.invgamma</span>

---

continuous_invgauss.md

---

# Inverse Normal (Inverse Gaussian) Distribution

The standard form involves the shape parameter \(\mu\) (in most definitions, \(L=0.0\) is used). (In terms of the regress documentation \(\mu=A/B\) ) and \(B=S\) and \(L\) is not a parameter in that distribution. A standard form is \(x>0\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\mu\right) & = & \frac{1}{\sqrt{2\pi x^{3}}}\exp\left(-\frac{\left(x-\mu\right)^{2}}{2x\mu^{2}}\right).\\
F\left(x;\mu\right) & = & \Phi\left(\frac{1}{\sqrt{x}}\frac{x-\mu}{\mu}\right)+\exp\left(\frac{2}{\mu}\right)\Phi\left(-\frac{1}{\sqrt{x}}\frac{x+\mu}{\mu}\right)\\
G\left(q;\mu\right) & = & F^{-1}\left(q;\mu\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \mu\\
\mu_{2} & = & \mu^{3}\\
\gamma_{1} & = & 3\sqrt{\mu}\\
\gamma_{2} & = & 15\mu\\
m_{d} & = & \frac{\mu}{2}\left(\sqrt{9\mu^{2}+4}-3\mu\right)\end{eqnarray*}
\end{aligned}\]

This is related to the canonical form or JKB "two-parameter" inverse Gaussian when written in it's full form with scale parameter \(S\) and location parameter \(L\) by taking \(L=0\) and \(S\equiv\lambda,\) then \(\mu S\) is equal to \(\mu_{2}\) where \(\mu_{2}\) is the parameter used by JKB. We prefer this form because of it's consistent use of the scale parameter. Notice that in JKB the skew \(\left(\sqrt{\beta_{1}}\right)\) and the kurtosis ( \(\beta_{2}-3\) ) are both functions only of \(\mu_{2}/\lambda=\mu S/S=\mu\) as shown here, while the variance and mean of the standard form here are transformed appropriately.

Implementation: <span class="title-ref">scipy.stats.invgauss</span>

---

continuous_invweibull.md

---

# Inverted Weibull Distribution

There is one shape parameter \(c>0\) and the support is \(x\geq0\) . Then

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & cx^{-c-1}\exp\left(-x^{-c}\right)\\ F\left(x;c\right) & = & \exp\left(-x^{-c}\right)\\ G\left(q;c\right) & = & \left(-\log q\right)^{-1/c}\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=1+\gamma+\frac{\gamma}{c}-\log\left(c\right)\]

where \(\gamma\) is Euler's constant.

Implementation: <span class="title-ref">scipy.stats.invweibull</span>

---

continuous_jf_skew_t.md

---

# Jones and Faddy Skew-T Distribution

A skew extension of the <span class="title-ref">t</span> distribution, defined for \(a>0\) and \(b>0\).

\[\begin{aligned}
\begin{eqnarray*}
f(x;a,b) & = & C_{a,b}^{-1} \left(1+\frac{x}{\left(a+b+x^2\right)^{1/2}}\right)^{a+1/2} \left(1-\frac{x}{\left(a+b+x^2\right)^{1/2}}\right)^{b+1/2} \\
F(x;a,b) & = & I\left(\frac{1+x(a+b+x^2)^{-1/2}}{2};a,b\right) \\
\mu_{n}^{\prime} & = & \frac{(a+b)^{n/2}}{2^nB(a,b)}\sum_{i=0}^{n}{n \choose i}(-1)^iB\left(a+\frac{n}{2}-i, b-\frac{n}{2}+i\right)
\end{eqnarray*}
\end{aligned}\]

where \(C_{a,b}=2^{a+b-1}B(a,b)(a+b)^{1/2}\), \(B\) is the beta function <span class="title-ref">scipy.special.beta</span> and the formula for the moments \(\mu_{n}^{\prime}\) holds provided that \(a>n/2\) and \(b>n/2\).

When \(a<b\), the distribution is negatively skewed, and when \(a>b\), the distribution is positively skewed. If \(a=b\), then we recover the <span class="title-ref">t</span> distribution with \(2a\) degrees of freedom.

## References

  - M.C. Jones and M.J. Faddy. "A skew extension of the t distribution, with applications" *Journal of the Royal Statistical Society*, Series B (Statistical Methodology) 65, no. 1 (2003): 159-174. `10.1111/1467-9868.00378`

Implementation: <span class="title-ref">scipy.stats.jf\_skew\_t</span>

---

continuous_johnsonsb.md

---

# Johnson SB Distribution

There are two shape parameters \(a\in\mathbb{R}\) and \(b>0\), and the support is \(x\in\left[0,1\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,b\right) & = & \frac{b}{x\left(1-x\right)}\phi\left(a+b\log\frac{x}{1-x}\right)\\
F\left(x;a,b\right) & = & \Phi\left(a+b\log\frac{x}{1-x}\right)\\
G\left(q;a,b\right) & = & \frac{1}{1+\exp\left(-\frac{1}{b}\left(\Phi^{-1}\left(q\right)-a\right)\right)}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.johnsonsb</span>

---

continuous_johnsonsu.md

---

# Johnson SU Distribution

There are two shape parameters \(a\in\mathbb{R}\) and \(b>0\), and the support is \(x\in\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,b\right) & = & \frac{b}{\sqrt{x^{2}+1}}\phi\left(a+b\log\left(x+\sqrt{x^{2}+1}\right)\right)\\
F\left(x;a,b\right) & = & \Phi\left(a+b\log\left(x+\sqrt{x^{2}+1}\right)\right)\\
G\left(q;a,b\right) & = & \sinh\left(\frac{\Phi^{-1}\left(q\right)-a}{b}\right)\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.johnsonsu</span>

---

continuous_ksone.md

---

# KSone Distribution

This is the distribution of maximum positive differences between an empirical distribution function, computed from \(n\) samples or observations, and a comparison (or target) cumulative distribution function.

Writing \(D_n^+ = \sup_t \left(F_{empirical,n}(t)-F_{target}(t)\right)\), `ksone` is the distribution of the \(D_n^+\) values. (The distribution of \(D_n^- = \sup_t \left(F_{target}(t)-F_{empirical,n}(t)\right)\) differences follows the same distribution, so `ksone` can be used for one-sided tests on either side.)

There is one shape parameter \(n\), a positive integer, and the support is \(x\in\left[0,1\right]\).

\[\begin{aligned}
\begin{eqnarray*} F\left(n, x\right) & = & 1 - \sum_{j=0}^{\lfloor n(1-x)\rfloor} \dbinom{n}{j} x \left(x+\frac{j}{n}\right)^{j-1} \left(1-x-\frac{j}{n}\right)^{n-j}\\
& = & 1 - \textrm{scipy.special.smirnov}(n, x) \\
\lim_{n \rightarrow\infty} F\left(n, \frac{x}{\sqrt n}\right) & = & e^{-2 x^2} \end{eqnarray*}
\end{aligned}\]

## References

  - "Kolmogorov-Smirnov test", Wikipedia <https://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test>
  - Birnbaum, Z. W.; Tingey, Fred H. "One-Sided Confidence Contours for Probability Distribution Functions." *Ann. Math. Statist*. 22 (1951), no. 4, 592--596.

Implementation: <span class="title-ref">scipy.stats.ksone</span>

---

continuous_kstwo.md

---

# KStwo Distribution

This is the distribution of the maximum absolute differences between an empirical distribution function, computed from \(n\) samples or observations, and a comparison (or target) cumulative distribution function, which is assumed to be continuous. (The "two" in the name is because this is the two-sided difference. `ksone` is the distribution of the positive differences, \(D_n^+\), hence it concerns one-sided differences. `kstwobign` is the limiting distribution of the *normalized* maximum absolute differences \(\sqrt{n} D_n\).)

Writing \(D_n = \sup_t \left|F_{empirical,n}(t)-F_{target}(t)\right|\), `kstwo` is the distribution of the \(D_n\) values.

`kstwo` can also be used with the differences between two empirical distribution functions, for sets of observations with \(m\) and \(n\) samples respectively. Writing \(D_{m,n} = \sup_t \left|F_{1,m}(t)-F_{2,n}(t)\right|\), where \(F_{1,m}\) and \(F_{2,n}\) are the two empirical distribution functions, then \(Pr(D_{m,n} \le x) \approx Pr(D_N \le x)\) under appropriate conditions, where \(N = \sqrt{\left(\frac{mn}{m+n}\right)}\).

There is one shape parameter \(n\), a positive integer, and the support is \(x\in\left[0,1\right]\).

The implementation follows Simard & L'Ecuyer, which combines exact algorithms of Durbin and Pomeranz with asymptotic estimates of Li-Chien, Pelz and Good to compute the CDF with 5-15 accurate digits.

## Examples

\>\>\> import numpy as np \>\>\> from scipy.stats import kstwo

Show the probability of a gap at least as big as 0, 0.5 and 1.0 for a sample of size 5

\>\>\> kstwo.sf(\[0, 0.5, 1.0\], 5) array(\[1. , 0.112, 0. \])

Compare a sample of size 5 drawn from a source N(0.5, 1) distribution against a target N(0, 1) CDF.

\>\>\> from scipy.stats import norm \>\>\> n = 5 \>\>\> gendist = norm(0.5, 1) \# Normal distribution, mean 0.5, stddev 1 \>\>\> x = np.sort(gendist.rvs(size=n, random\_state=np.random.default\_rng())) \>\>\> x array(\[-1.59113056, -0.66335147, 0.54791569, 0.78009321, 1.27641365\]) \# may vary \>\>\> target = norm(0, 1) \>\>\> cdfs = target.cdf(x) \>\>\> cdfs array(\[0.0557901 , 0.25355274, 0.7081251 , 0.78233199, 0.89909533\]) \# may vary \>\>\> \# Construct the Empirical CDF and the K-S statistics (Dn+, Dn-, Dn) \>\>\> ecdfs = np.arange(n+1, dtype=float)/n \>\>\> cols = np.column\_stack(\[x, ecdfs\[1:\], cdfs, cdfs - ecdfs\[:n\], ecdfs\[1:\] - cdfs\]) \>\>\> np.set\_printoptions(precision=3) \>\>\> cols array(\[\[-1.591, 0.2 , 0.056, 0.056, 0.144\], \# may vary \[-0.663, 0.4 , 0.254, 0.054, 0.146\], \[ 0.548, 0.6 , 0.708, 0.308, -0.108\], \[ 0.78 , 0.8 , 0.782, 0.182, 0.018\], \[ 1.276, 1. , 0.899, 0.099, 0.101\]\]) \>\>\> gaps = cols\[:, -2:\] \>\>\> Dnpm = np.max(gaps, axis=0) \>\>\> Dn = np.max(Dnpm) \>\>\> iminus, iplus = np.argmax(gaps, axis=0) \>\>\> print('Dn- = %f (at x=%.2f)' % (Dnpm\[0\], x\[iminus\])) Dn- = 0.246201 (at x=-0.14) \>\>\> print('Dn+ = %f (at x=%.2f)' % (Dnpm\[1\], x\[iplus\])) Dn+ = 0.224726 (at x=0.19) \>\>\> print('Dn = %f' % (Dn)) Dn = 0.246201

\>\>\> probs = kstwo.sf(Dn, n) \>\>\> print(chr(10).join(\['For a sample of size %d drawn from a N(0, 1) distribution:' % n, ... ' Kolmogorov-Smirnov 2-sided n=%d: Prob(Dn \>= %f) = %.4f' % (n, Dn, probs)\])) For a sample of size 5 drawn from a N(0, 1) distribution: Kolmogorov-Smirnov 2-sided n=5: Prob(Dn \>= 0.246201) = 0.8562

Plot the Empirical CDF against the target N(0, 1) CDF

\>\>\> import matplotlib.pyplot as plt \>\>\> plt.step(np.concatenate(\[\[-3\], x\]), ecdfs, where='post', label='Empirical CDF') \>\>\> x3 = np.linspace(-3, 3, 100) \>\>\> plt.plot(x3, target.cdf(x3), label='CDF for N(0, 1)') \>\>\> plt.ylim(\[0, 1\]); plt.grid(True); plt.legend(); \>\>\> plt.vlines(\[x\[iminus\]\], ecdfs\[iminus\], cdfs\[iminus\], color='r', linestyle='solid', lw=4) \>\>\> plt.vlines(\[x\[iplus\]\], cdfs\[iplus\], ecdfs\[iplus+1\], color='m', linestyle='solid', lw=4) \>\>\> plt.annotate('Dn-', xy=(x\[iminus\], (ecdfs\[iminus\]+ cdfs\[iminus\])/2), ... xytext=(x\[iminus\]+1, (ecdfs\[iminus\]+ cdfs\[iminus\])/2 - 0.02), ... arrowprops=dict(facecolor='white', edgecolor='r', shrink=0.05), size=15, color='r'); \>\>\> plt.annotate('Dn+', xy=(x\[iplus\], (ecdfs\[iplus+1\]+ cdfs\[iplus\])/2), ... xytext=(x\[iplus\]-2, (ecdfs\[iplus+1\]+ cdfs\[iplus\])/2 - 0.02), ... arrowprops=dict(facecolor='white', edgecolor='m', shrink=0.05), size=15, color='m'); \>\>\> plt.show()

## References

  - "Kolmogorov-Smirnov test", Wikipedia <https://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test>
  - Durbin J. "The Probability that the Sample Distribution Function Lies Between Two Parallel Straight Lines." *Ann. Math. Statist*., 39 (1968) 39, 398-411.
  - Pomeranz J. "Exact Cumulative Distribution of the Kolmogorov-Smirnov Statistic for Small Samples (Algorithm 487)." *Communications of the ACM*, 17(12), (1974) 703-704.
  - Li-Chien, C. "On the exact distribution of the statistics of A. N. Kolmogorov and their asymptotic expansion." *Acta Matematica Sinica*, 6, (1956) 55-81.
  - Pelz W, Good IJ. "Approximating the Lower Tail-areas of the Kolmogorov-Smirnov One-sample Statistic." *Journal of the Royal Statistical Society*, Series B, (1976) 38(2), 152-156.
  - Simard, R., L'Ecuyer, P. "Computing the Two-Sided Kolmogorov-Smirnov Distribution", *Journal of Statistical Software*, Vol 39, (2011) 11.

Implementation: <span class="title-ref">scipy.stats.kstwo</span>

---

continuous_kstwobign.md

---

# KStwobign Distribution

This is the limiting distribution of the normalized maximum absolute differences between an empirical distribution function, computed from \(n\) samples or observations, and a comparison (or target) cumulative distribution function. (`ksone` is the distribution of the unnormalized positive differences, \(D_n^+\).)

Writing \(D_n = \sup_t \left|F_{empirical,n}(t) - F_{target}(t)\right|\), the normalization factor is \(\sqrt{n}\), and `kstwobign` is the limiting distribution of the \(\sqrt{n} D_n\) values as \(n\rightarrow\infty\).

Note that \(D_n=\max(D_n^+, D_n^-)\), but \(D_n^+\) and \(D_n^-\) are not independent.

`kstwobign` can also be used with the differences between two empirical distribution functions, for sets of observations with \(m\) and \(n\) samples respectively, where \(m\) and \(n\) are "big". Writing \(D_{m,n} = \sup_t \left|F_{1,m}(t)-F_{2,n}(t)\right|\), where \(F_{1,m}\) and \(F_{2,n}\) are the two empirical distribution functions, then `kstwobign` is also the limiting distribution of the \(\sqrt{\frac{mn}{m+n}}D_{m,n}\) values, as \(m,n\rightarrow\infty\) and \(m/n\rightarrow a \ne 0, \infty\).

There are no shape parameters, and the support is \(x\in\left[0,\infty\right)\).

\[\begin{aligned}
\begin{eqnarray*}  F\left(x\right) & = & 1 - 2 \sum_{k=1}^{\infty} (-1)^{k-1} e^{-2k^2 x^2}\\
& = & \frac{\sqrt{2\pi}}{x} \sum_{k=1}^{\infty} e^{-(2k-1)^2 \pi^2/(8x^2)}\\
& = & 1 - \textrm{scipy.special.kolmogorov}(n, x) \\
f\left(x\right) & = & 8x \sum_{k=1}^{\infty} (-1)^{k-1} k^2 e^{-2k^2 x^2} \end{eqnarray*}
\end{aligned}\]

## References

  - "Kolmogorov-Smirnov test", Wikipedia <https://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test>
  - Kolmogoroff, A. "Confidence Limits for an Unknown Distribution Function."" *Ann. Math. Statist.* 12 (1941), no. 4, 461--463.
  - Smirnov, N. "On the estimation of the discrepancy between empirical curves of distribution for two independent samples" *Bull. Math. Univ. Moscou.*, 2 (1039), 2-26.
  - Feller, W. "On the Kolmogorov-Smirnov Limit Theorems for Empirical Distributions." *Ann. Math. Statist.* 19 (1948), no. 2, 177--189. and "Errata" *Ann. Math. Statist.* 21 (1950), no. 2, 301--302.

Implementation: <span class="title-ref">scipy.stats.kstwobign</span>

---

continuous_landau.md

---

# Landau distribution

A special case of Lévy-stable distributions with \(\alpha=1\) and \(\beta=1\) and support \(-\infty < x < \infty\). The probability density function is given by

\[f(x) = \frac{1}{\pi}\int_0^\infty \exp(-t \log t - xt)\sin(\pi t) dt\]

The differential entropy is 2.37263644000448182, and the moments are undefined.

Implementation: <span class="title-ref">scipy.stats.landau</span>

---

continuous_laplace.md

---

# Laplace (Double Exponential, Bilateral Exponential) Distribution

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{2}e^{-\left|x\right|}\\ F\left(x\right) & = & \left\{ \begin{array}{ccc} \frac{1}{2}e^{x} &  & x\leq0\\ 1-\frac{1}{2}e^{-x} &  & x>0\end{array}\right.\\ G\left(q\right) & = & \left\{ \begin{array}{ccc} \log\left(2q\right) &  & q\leq\frac{1}{2}\\ -\log\left(2-2q\right) &  & q>\frac{1}{2}\end{array}\right.\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} m_{d}=m_{n}=\mu & = & 0\\ \mu_{2} & = & 2\\ \gamma_{1} & = & 0\\ \gamma_{2} & = & 3\end{eqnarray*}
\end{aligned}\]

The ML estimator of the location parameter is

\[\hat{L}=\mathrm{median}\left(X_{i}\right)\]

where \(X_{i}\) is a sequence of \(N\) mutually independent Laplace RV's and the median is some number between the \(\frac{1}{2}N\mathrm{th}\) and the \((N/2+1)\mathrm{th}\) order statistic ( *e.g.* take the average of these two) when \(N\) is even. Also,

\[\hat{S}=\frac{1}{N}\sum_{j=1}^{N}\left|X_{j}-\hat{L}\right|.\]

Replace \(\hat{L}\) with \(L\) if it is known. If \(L\) is known then this estimator is distributed as \(\left(2N\right)^{-1}S\cdot\chi_{2N}^{2}\) .

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(2e\right)\\  & \approx & 1.6931471805599453094.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.laplace</span>

---

continuous_laplace_asymmetric.md

---

# Asymmetric Laplace Distribution

This distribution is a generalization of the Laplace distribution. It has a single shape parameter \(\kappa>0\) that species the distribution's asymmetry. The special case \(\kappa=1\) yields the Laplace distribution.

## Functions

\[\begin{aligned}
\begin{eqnarray*}
F(x, \kappa) & = & 1-\frac{\kappa^{-1}}{\kappa+\kappa^{-1}}\exp(-x\kappa),\quad x\ge0; \\
             & = & \frac{\kappa}{\kappa+\kappa^{-1}}\exp(x/\kappa),\quad x<0. \\
f(x, \kappa) & = & \frac{1}{\kappa+\kappa^{-1}}\exp(-x\kappa),\quad x\ge0; \\
             & = & \frac{1}{\kappa+\kappa^{-1}}\exp(x/\kappa),\quad x<0.
\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*}
\mu & = & \kappa^{-1}-\kappa\\
\mu_2 & = & \kappa^{-2}+\kappa^2\\
\gamma_1 & = & \frac{2(1-\kappa^6)}{(1+\kappa^4)^{3/2}}\\
\gamma_2 & = & \frac{6(1+\kappa^8)}{(1+\kappa^4)^2}
\end{eqnarray*}
\end{aligned}\]

## References

  - "Asymmetric Laplace distribution", Wikipedia <https://en.wikipedia.org/wiki/Asymmetric_Laplace_distribution>
  - Kozubowski TJ and Podgórski K, "A Multivariate and Asymmetric Generalization of Laplace Distribution," *Computational Statistics* 15, 531--540 (2000). `10.1007/PL00022717`

Implementation: <span class="title-ref">scipy.stats.laplace\_asymmetric</span>

---

continuous_levy.md

---

# Lévy Distribution

A special case of Lévy-stable distributions with \(\alpha=\frac{1}{2}\) and \(\beta=1\) and support \(x\geq0\). In standard form it is defined for \(x>0\) as

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{x\sqrt{2\pi x}}\exp\left(-\frac{1}{2x}\right)\\ F\left(x\right) & = & 2\left[1-\Phi\left(\frac{1}{\sqrt{x}}\right)\right]\\ G\left(q\right) & = & \left[\Phi^{-1}\left(1-\frac{q}{2}\right)\right]^{-2}.\end{eqnarray*}
\end{aligned}\]

It has no finite moments.

Implementation: <span class="title-ref">scipy.stats.levy</span>

---

continuous_levy_l.md

---

# Left-skewed Lévy Distribution

Special case of Lévy-stable distribution with \(\alpha=\frac{1}{2}\) and \(\beta=-1\). The support is \(x\leq0\) . In standard form

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{\left|x\right|\sqrt{2\pi\left|x\right|}}\exp\left(-\frac{1}{2\left|x\right|}\right)\\ F\left(x\right) & = & 2\Phi\left(\frac{1}{\sqrt{\left|x\right|}}\right)-1\\ G\left(q\right) & = & -\left[\Phi^{-1}\left(\frac{q+1}{2}\right)\right]^{-2}.\end{eqnarray*}
\end{aligned}\]

No moments.

Implementation: <span class="title-ref">scipy.stats.levy\_l</span>

---

continuous_loggamma.md

---

# Log Gamma Distribution

A single shape parameter \(c>0\) . The support is \(x\in\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{\exp\left(cx-e^{x}\right)}{\Gamma\left(c\right)}\\
F\left(x;c\right) & = & \frac{\gamma\left(c,e^{x}\right)}{\Gamma\left(c\right)}\\
G\left(q;c\right) & = & \log\left(\gamma^{-1}\left(c,q\Gamma\left(c\right)\right)\right)\end{eqnarray*}
\end{aligned}\]

where \(\gamma\) is the lower incomplete gamma function, \(\gamma\left(s, x\right) = \int_0^x t^{s-1} e^{-t} dt\).

\[\mu_{n}^{\prime}=\int_{0}^{\infty}\left[\log y\right]^{n}y^{c-1}\exp\left(-y\right)dy.\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \mu_{1}^{\prime}\\
\mu_{2} & = & \mu_{2}^{\prime}-\mu^{2}\\
\gamma_{1} & = & \frac{\mu_{3}^{\prime}-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{\mu_{4}^{\prime}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}}{\mu_{2}^{2}}-3\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.loggamma</span>

---

continuous_logistic.md

---

# Logistic (Sech-squared) Distribution

A special case of the Generalized Logistic distribution with \(c=1\). The support is \(x \in \mathbb{R}\).

This distribution function has a direct connection with the Fermi-Dirac distribution via its survival function. I.e. `scipy.stats.logistic.sf` is equivalent to the Fermi-Dirac distribution.

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{\exp\left(-x\right)}{\left(1+\exp\left(-x\right)\right)^{2}}\\
F\left(x\right) & = & \frac{1}{1+\exp\left(-x\right)}\\
G\left(q\right) & = & -\log\left(1/q-1\right)\\
S\left(x\right) & = & n_F(x)=\frac{1}{1+\exp\left(x\right)}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \gamma+\psi_{0}\left(1\right)=0\\
\mu_{2} & = & \frac{\pi^{2}}{6}+\psi_{1}\left(1\right)=\frac{\pi^{2}}{3}\\
\gamma_{1} & = & \frac{\psi_{2}\left(1\right)+2\zeta\left(3\right)}{\mu_{2}^{3/2}}=0\\
\gamma_{2} & = & \frac{\left(\frac{\pi^{4}}{15}+\psi_{3}\left(1\right)\right)}{\mu_{2}^{2}}=\frac{6}{5}\\
m_{d} & = & \log1=0\\
m_{n} & = & -\log\left(2-1\right)=0\end{eqnarray*}
\end{aligned}\]

where \(\psi_m\) is the polygamma function \(\psi_m(z) = \frac{d^{m+1}}{dz^{m+1}} \log(\Gamma(z))\).

\[h\left[X\right]=1.\]

Implementation: <span class="title-ref">scipy.stats.logistic</span>

---

continuous_loglaplace.md

---

# Log Double Exponential (Log-Laplace) Distribution

One shape parameter \(c>0\). The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*}
    f\left(x;c\right) & = & \left\{
                                \begin{array}{ccc}
                                    \frac{c}{2}x^{c-1} &  & 0 < x < 1 \\
                                    \frac{c}{2}x^{-c-1} &  & x \geq 1
                                \end{array}
                            \right. \\
    F\left(x;c\right) & = & \left\{
                                \begin{array}{ccc}
                                    \frac{1}{2}x^{c} &  & 0 < x < 1 \\
                                    1-\frac{1}{2}x^{-c} &  & x \geq 1
                                \end{array}
                            \right. \\
    G\left(q;c\right) & = & \left\{
                                \begin{array}{ccc}
                                    \left(2q\right)^{1/c} &  & 0 \leq q < \frac{1}{2} \\
                                    \left(2-2q\right)^{-1/c} &  & \frac{1}{2} \leq q \leq 1
                                \end{array}
                            \right.
\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\log\left(\frac{2e}{c}\right)\]

Implementation: <span class="title-ref">scipy.stats.loglaplace</span>

---

continuous_lognorm.md

---

# Log Normal (Cobb-Douglass) Distribution

Has one shape parameter \(\sigma\) \>0. (Notice that the "Regress" \(A=\log S\) where \(S\) is the scale parameter and \(A\) is the mean of the underlying normal distribution). The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\sigma\right) & = & \frac{1}{\sigma x\sqrt{2\pi}}\exp\left(-\frac{1}{2}\left(\frac{\log x}{\sigma}\right)^{2}\right)\\
F\left(x;\sigma\right) & = & \Phi\left(\frac{\log x}{\sigma}\right)\\
G\left(q;\sigma\right) & = & \exp\left( \sigma\Phi^{-1}\left(q\right)\right) \end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \exp\left(\sigma^{2}/2\right)\\
\mu_{2} & = & \exp\left(\sigma^{2}\right)\left[\exp\left(\sigma^{2}\right)-1\right]\\
\gamma_{1} & = & \sqrt{p-1}\left(2+p\right)\\
\gamma_{2} & = & p^{4}+2p^{3}+3p^{2}-6\quad\quad p=e^{\sigma^{2}}\end{eqnarray*}
\end{aligned}\]

Notice that using JKB notation we have \(\theta=L,\) \(\zeta=\log S\) and we have given the so-called antilognormal form of the distribution. This is more consistent with the location, scale parameter description of general probability distributions.

\[h\left[X\right]=\frac{1}{2}\left[1+\log\left(2\pi\right)+2\log\left(\sigma\right)\right].\]

Also, note that if \(X\) is a log-normally distributed random-variable with \(L=0\) and \(S\) and shape parameter \(\sigma.\) Then, \(\log X\) is normally distributed with variance \(\sigma^{2}\) and mean \(\log S.\)

Implementation: <span class="title-ref">scipy.stats.lognorm</span>

---

continuous_loguniform.md

---

# Log-Uniform Distribution

This random variable is log-uniform. That is, if `loguniform(10**-1, 10**1)` is specified, `0.1`, `1`, `10` are all equally likely.

There are two shape parameters \(a,b>0\) and the support is \(x\in\left[a,b\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a,b\right) & = & \frac{1}{x\log\left(b/a\right)}\\ F\left(x;a,b\right) & = & \frac{\log\left(x/a\right)}{\log\left(b/a\right)}\\ G\left(q;a,b\right) & = & a\exp\left(q\log\left(b/a\right)\right)=a\left(\frac{b}{a}\right)^{q}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} d & = & \log\left(a/b\right)\\ \mu & = & \frac{a-b}{d}\\ \mu_{2} & = & \mu\frac{a+b}{2}-\mu^{2}=\frac{\left(a-b\right)\left[a\left(d-2\right)+b\left(d+2\right)\right]}{2d^{2}}\\ \gamma_{1} & = & \frac{\sqrt{2}\left[12d\left(a-b\right)^{2}+d^{2}\left(a^{2}\left(2d-9\right)+2abd+b^{2}\left(2d+9\right)\right)\right]}{3d\sqrt{a-b}\left[a\left(d-2\right)+b\left(d+2\right)\right]^{3/2}}\\ \gamma_{2} & = & \frac{-36\left(a-b\right)^{3}+36d\left(a-b\right)^{2}\left(a+b\right)-16d^{2}\left(a^{3}-b^{3}\right)+3d^{3}\left(a^{2}+b^{2}\right)\left(a+b\right)}{3\left(a-b\right)\left[a\left(d-2\right)+b\left(d+2\right)\right]^{2}}-3\\ m_{d} & = & a\\ m_{n} & = & \sqrt{ab}\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\frac{1}{2}\log\left(ab\right)+\log\left[\log\left(\frac{b}{a}\right)\right].\]

Implementation: <span class="title-ref">scipy.stats.loguniform</span>.

---

continuous_lomax.md

---

# Pareto Second Kind (Lomax) Distribution

This is Pareto of the first kind with \(L=-1.0\) . There is one shape parameter \(c>0\) and support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{c}{\left(1+x\right)^{c+1}}\\ F\left(x;c\right) & = & 1-\frac{1}{\left(1+x\right)^{c}}\\ G\left(q;c\right) & = & \left(1-q\right)^{-1/c}-1\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\frac{1}{c}+1-\log\left(c\right).\]

Implementation: <span class="title-ref">scipy.stats.lomax</span>

---

continuous_maxwell.md

---

# Maxwell Distribution

This is a special case of the Chi distribution with \(L=0\) and \(S=\frac{1}{\sqrt{a}}\) and \(\nu=3.\) The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \sqrt{\frac{2}{\pi}}x^{2}e^{-x^{2}/2}\\
F\left(x\right) & = & \frac{\gamma\left(\frac{3}{2},\frac{x^2}{2}\right)}{\Gamma(\frac{3}{2})}\\
G\left(q\right) & = & \sqrt{2\gamma^{-1}\left(\frac{3}{2},q\Gamma(\frac{3}{2})\right)}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & 2\sqrt{\frac{2}{\pi}}\\
\mu_{2} & = & 3-\frac{8}{\pi}\\
\gamma_{1} & = & \sqrt{2}\frac{32-10\pi}{\left(3\pi-8\right)^{3/2}}\\
\gamma_{2} & = & \frac{-12\pi^{2}+160\pi-384}{\left(3\pi-8\right)^{2}}\\
m_{d} & = & \sqrt{2}\\
m_{n} & = & \sqrt{2\gamma^{-1}\left(\frac{3}{2},\frac{1}{2}\Gamma(\frac{3}{2})\right)}\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\log\left(\sqrt{\frac{2\pi}{e}}\right)+\gamma.\]

Implementation: <span class="title-ref">scipy.stats.maxwell</span>

---

continuous_mielke.md

---

# Mielke's Beta-Kappa Distribution

A generalized F distribution. Two shape parameters \(\kappa\) and \(\theta\), with support \(x\geq0\). The \(\beta\) in the DATAPLOT reference is a scale parameter.

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\kappa,\theta\right) & = & \frac{\kappa x^{\kappa-1}}{\left(1+x^{\theta}\right)^{1+\frac{\kappa}{\theta}}}\\ F\left(x;\kappa,\theta\right) & = & \frac{x^{\kappa}}{\left(1+x^{\theta}\right)^{\kappa/\theta}}\\ G\left(q;\kappa,\theta\right) & = & \left(\frac{q^{\theta/\kappa}}{1-q^{\theta/\kappa}}\right)^{1/\theta}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.mielke</span>

---

continuous_nakagami.md

---

# Nakagami Distribution

Generalization of the chi distribution. Shape parameter is \(\nu>0.\) The support is \(x\geq0.\)

\[\begin{aligned}
\begin{eqnarray*}
f\left(x;\nu\right) & = & \frac{2\nu^{\nu}}{\Gamma\left(\nu\right)}x^{2\nu-1}\exp\left(-\nu x^{2}\right)\\
F\left(x;\nu\right) & = & \frac{\gamma\left(\nu,\nu x^{2}\right)}{\Gamma\left(\nu\right)}\\
G\left(q;\nu\right) & = & \sqrt{\frac{1}{\nu}\gamma^{-1}\left(\nu,q{\Gamma\left(\nu\right)}\right)}
\end{eqnarray*}
\end{aligned}\]

where \(\gamma\) is the lower incomplete gamma function, \(\gamma\left(\nu, x\right) = \int_0^x t^{\nu-1} e^{-t} dt\).

\[\begin{aligned}
\begin{eqnarray*}
\mu & = & \frac{\Gamma\left(\nu+\frac{1}{2}\right)}{\sqrt{\nu}\Gamma\left(\nu\right)}\\
\mu_{2} & = & \left[1-\mu^{2}\right]\\
\gamma_{1} & = & \frac{\mu\left(1-4v\mu_{2}\right)}{2\nu\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{-6\mu^{4}\nu+\left(8\nu-2\right)\mu^{2}-2\nu+1}{\nu\mu_{2}^{2}}
\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.nakagami</span>

## MLE of the Nakagami Distribution in SciPy (`nakagami.fit`)

The probability density function of the `nakagami` distribution in SciPy is

\[\begin{equation}
f(x; \nu, \mu, \sigma) = 2 \frac{\nu^\nu}{ \sigma \Gamma(\nu)}\left(\frac{x-\mu}{\sigma}\right)^{2\nu - 1} \exp\left(-\nu \left(\frac{x-\mu}{\sigma}\right)^2 \right),\tag{1}
\end{equation}\]

for \(x\) such that \(\frac{x-\mu}{\sigma} \geq 0\), where \(\nu \geq \frac{1}{2}\) is the shape parameter, \(\mu\) is the location, and \(\sigma\) is the scale.

The log-likelihood function is therefore

\[\begin{equation}
l(\nu, \mu, \sigma) = \sum_{i = 1}^{N} \log \left( 2 \frac{\nu^\nu}{ \sigma\Gamma(\nu)}\left(\frac{x_i-\mu}{\sigma}\right)^{2\nu - 1} \exp\left(-\nu \left(\frac{x_i-\mu}{\sigma}\right)^2 \right) \right),\tag{2}
\end{equation}\]

which can be expanded as

\[\begin{equation}
l(\nu, \mu, \sigma) = N \log(2) + N\nu \log(\nu) - N\log\left(\Gamma(\nu)\right) - 2N \nu \log(\sigma) + \left(2 \nu - 1 \right) \sum_{i=1}^N  \log(x_i - \mu) - \nu \sigma^{-2} \sum_{i=1}^N \left(x_i-\mu\right)^2, \tag{3}
\end{equation}\]

Leaving supports constraints out, the first-order condition for optimality on the likelihood derivatives gives estimates of parameters:

\[\begin{aligned}
\begin{align}
\frac{\partial l}{\partial \nu}(\nu, \mu, \sigma) &= N\left(1 + \log(\nu) - \psi^{(0)}(\nu)\right) + 2 \sum_{i=1}^N \log \left( \frac{x_i - \mu}{\sigma} \right) - \sum_{i=1}^N \left( \frac{x_i - \mu}{\sigma} \right)^2  = 0
\text{,} \tag{4}\\
\frac{\partial l}{\partial \mu}(\nu, \mu, \sigma) &= (1 - 2 \nu) \sum_{i=1}^N \frac{1}{x_i-\mu} + \frac{2\nu}{\sigma^2} \sum_{i=1}^N x_i-\mu = 0
\text{, and} \tag{5}\\
\frac{\partial l}{\partial \sigma}(\nu, \mu, \sigma) &= -2 N \nu \frac{1}{\sigma} + 2 \nu \sigma^{-3} \sum_{i=1}^N \left(x_i-\mu\right)^2 = 0
\text{,}\tag{6}
\end{align}
\end{aligned}\]

where \(\psi^{(0)}\) is the polygamma function of order \(0\); i.e. \(\psi^{(0)}(\nu) = \frac{d}{d\nu} \log \Gamma(\nu)\).

However, the support of the distribution is the values of \(x\) for which \(\frac{x-\mu}{\sigma} \geq 0\), and this provides an additional constraint that

\[\begin{equation}
\mu \leq \min_i{x_i}.\tag{7}
\end{equation}\]

For \(\nu = \frac{1}{2}\), the partial derivative of the log-likelihood with respect to \(\mu\) reduces to:

\[\begin{equation}
\frac{\partial l}{\partial \mu}(\nu, \mu, \sigma) = {\sigma^2} \sum_{i=1}^N (x_i-\mu),
\end{equation}\]

which is positive when the support constraint is satisfied. Because the partial derivative with respect to \(\mu\) is positive, increasing \(\mu\) increases the log-likelihood, and therefore the constraint is active at the maximum likelihood estimate for \(\mu\)

\[\begin{equation}
\mu = \min_i{x_i}, \quad \nu = \frac{1}{2}. \tag{8}
\end{equation}\]

For \(\nu\) sufficiently greater than \(\frac{1}{2}\), the likelihood equation \(\frac{\partial l}{\partial \mu}(\nu, \mu, \sigma)=0\) has a solution, and this solution provides the maximum likelihood estimate for \(\mu\). In either case, however, the condition \(\mu = \min_i{x_i}\) provides a reasonable initial guess for numerical optimization.

Furthermore, the likelihood equation for \(\sigma\) can be solved explicitly, and it provides the maximum likelihood estimate

\[\begin{equation}
\sigma = \sqrt{ \frac{\sum_{i=1}^N \left(x_i-\mu\right)^2}{N}}. \tag{9}
\end{equation}\]

Hence, the `_fitstart` method for `nakagami` uses

\[\begin{aligned}
\begin{align}
\mu_0 &= \min_i{x_i} \,
\text{and} \\
\sigma_0 &= \sqrt{ \frac{\sum_{i=1}^N \left(x_i-\mu_0\right)^2}{N}}
\end{align}
\end{aligned}\]

as initial guesses for numerical optimization accordingly.

---

continuous_ncf.md

---

# Noncentral F Distribution

The distribution of \(\left(X_{1}/X_{2}\right)\left(\nu_{2}/\nu_{1}\right)\) if \(X_{1}\) is non-central chi-squared with \(\nu_{1}\) degrees of freedom and parameter \(\lambda\), and \(X_{2}\) is chi-squared with \(\nu_{2}\) degrees of freedom.

There are 3 shape parameters: the degrees of freedom \(\nu_{1}>0\) and \(\nu_{2}>0\); and \(\lambda\geq 0\).

\[\begin{aligned}
\begin{eqnarray*}
    f\left(x;\lambda,\nu_{1},\nu_{2}\right)
    & = &
    \exp\left[\frac{\lambda}{2} +
              \frac{\left(\lambda\nu_{1}x\right)}
              {2\left(\nu_{1}x+\nu_{2}\right)}
        \right]
    \nu_{1}^{\nu_{1}/2}\nu_{2}^{\nu_{2}/2}x^{\nu_{1}/2-1} \\
    &  &
    \times\left(\nu_{2}+\nu_{1}x\right)^{-\left(\nu_{1}+\nu_{2}\right)/2}
    \frac{\Gamma\left(\frac{\nu_{1}}{2}\right)
          \Gamma\left(1+\frac{\nu_{2}}{2}\right)
          L_{\nu_{2}/2}^{\nu_{1}/2-1}
            \left(-\frac{\lambda\nu_{1}x}
                        {2\left(\nu_{1}x+\nu_{2}\right)}\right)}
         {B\left(\frac{\nu_{1}}{2},\frac{\nu_{2}}{2}\right)
          \Gamma\left(\frac{\nu_{1}+\nu_{2}}{2}\right)}
\end{eqnarray*}
\end{aligned}\]

where \(L_{\nu_{2}/2}^{\nu_{1}/2-1}(x)\) is an associated Laguerre polynomial.

If \(\lambda=0\), the distribution becomes equivalent to the Fisher distribution with \(\nu_{1}\) and \(\nu_{2}\) degrees of freedom.

Implementation: <span class="title-ref">scipy.stats.ncf</span>

---

continuous_nct.md

---

# Noncentral t Distribution

The distribution of the ratio

\[\frac{U+\lambda}{\chi_{\nu}/\sqrt{\nu}}\]

where \(U\) and \(\chi_{\nu}\) are independent and distributed as a standard normal and chi with \(\nu\) degrees of freedom. Note \(\lambda>0\) and \(\nu>0\) .

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\lambda,\nu\right) & = & \frac{\nu^{\nu/2}\Gamma\left(\nu+1\right)}{2^{\nu}e^{\lambda^{2}/2}\left(\nu+x^{2}\right)^{\nu/2}\Gamma\left(\nu/2\right)}\\
 &  & \times\left\{ \frac{\sqrt{2}\lambda x\,_{1}F_{1}\left(\frac{\nu}{2}+1;\frac{3}{2};\frac{\lambda^{2}x^{2}}{2\left(\nu+x^{2}\right)}\right)}{\left(\nu+x^{2}\right)\Gamma\left(\frac{\nu+1}{2}\right)}\right.\\
 &  & -\left.\frac{\,_{1}F_{1}\left(\frac{\nu+1}{2};\frac{1}{2};\frac{\lambda^{2}x^{2}}{2\left(\nu+x^{2}\right)}\right)}{\sqrt{\nu+x^{2}}\Gamma\left(\frac{\nu}{2}+1\right)}\right\} \\
 & = & \frac{\Gamma\left(\nu+1\right)}{2^{\left(\nu-1\right)/2}\sqrt{\pi\nu}\Gamma\left(\nu/2\right)}\exp\left[-\frac{\nu\lambda^{2}}{\nu+x^{2}}\right]\\
 &  & \times\left(\frac{\nu}{\nu+x^{2}}\right)^{\left(\nu-1\right)/2}Hh_{\nu}\left(-\frac{\lambda x}{\sqrt{\nu+x^{2}}}\right)\\
 F\left(x;\lambda,\nu\right) & = & \left\{
                              \begin{array}{cc}
                                {\tilde{F}}_{{\nu ,\mu }}(x) & x\geq0 \\
                                1 - {\tilde{F}}_{{\nu ,-\mu }}(x) & x<0
                                \end{array}
                             \right. \\
\text{where} \\
 {\tilde{F}}_{{\nu ,\mu }}(x) & = & \Phi (-\mu )+{\frac{1}{2}}\sum _{{j=0}}^{\infty }\left[p_{j}I_{y}\left(j+{\frac{1}{2}},{\frac{\nu }{2}}\right)+q_{j}I_{y}\left(j+1,{\frac{\nu }{2}}\right)\right]\\
 y & = & \frac{x^2}{x^2+\nu}\\
 p_{j} & = & \frac{e^{\left( -\frac{\mu^2}{2} \right)} }{j!} \left(\frac{\mu^2}{2}\right)^{j}\\
 q_{j} & = & {\frac{\mu e^{\left( -\frac{\mu^2}{2} \right)} } {\sqrt{2}\Gamma(j+3/2)}} \left({\frac{\mu^2}{2}}\right)^{j} \end{eqnarray*}
\end{aligned}\]

where \(I_{y}(a,b)\) is the regularized incomplete beta function and Airy's Hh function is \(Hh_{\nu}(x)=\frac{1}{\Gamma(\nu+1)}\int_0^\infty t^\nu e^{\frac{-(t+x)^2}{2}}dt\).

Implementation: <span class="title-ref">scipy.stats.nct</span>

---

continuous_ncx2.md

---

# Noncentral chi-squared Distribution

The distribution of \(\sum_{i=1}^{\nu}\left(Z_{i}+\delta_{i}\right)^{2}\) where \(Z_{i}\) are independent standard normal variables and \(\delta_{i}\) are constants. \(\lambda=\sum_{i=1}^{\nu}\delta_{i}^{2}>0.\) (In communications it is called the Marcum-Q function). It can be thought of as a Generalized Rayleigh-Rice distribution.

The two shape parameters are \(\nu\), a positive integer, and \(\lambda\), a positive real number. The support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\nu,\lambda\right) & = & e^{-\left(\lambda+x\right)/2}\frac{1}{2}\left(\frac{x}{\lambda}\right)^{\left(\nu-2\right)/4}I_{\left(\nu-2\right)/2}\left(\sqrt{\lambda x}\right)\\
F\left(x;\nu,\lambda\right) & = & \sum_{j=0}^{\infty}\left\{ \frac{\left(\lambda/2\right)^{j}}{j!}e^{-\lambda/2}\right\} \mathrm{Pr}\left[\chi_{\nu+2j}^{2}\leq x\right]\\
G\left(q;\nu,\lambda\right) & = & F^{-1}\left(q;\nu,\lambda\right)\\
\mu & = & \nu+\lambda\\
\mu_{2} & = & 2\left(\nu+2\lambda\right)\\
\gamma_{1} & = & \frac{\sqrt{8}\left(\nu+3\lambda\right)}{\left(\nu+2\lambda\right)^{3/2}}\\
\gamma_{2} & = & \frac{12\left(\nu+4\lambda\right)}{\left(\nu+2\lambda\right)^{2}}\end{eqnarray*}
\end{aligned}\]

where \(I_{\nu }(y)\) is a modified Bessel function of the first kind.

## References

  - "Noncentral chi-squared distribution", Wikipedia <https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution>

Implementation: <span class="title-ref">scipy.stats.ncx2</span>

---

continuous_norm.md

---

# Normal Distribution

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{e^{-x^{2}/2}}{\sqrt{2\pi}}\\
F\left(x\right) & = & \Phi\left(x\right)=\frac{1}{2}+\frac{1}{2}\mathrm{erf}\left(\frac{x}{\sqrt{2}}\right)\\
G\left(q\right) & = & \Phi^{-1}\left(q\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} m_{d}=m_{n}=\mu & = & 0\\
\mu_{2} & = & 1\\
\gamma_{1} & = & 0\\
\gamma_{2} & = & 0\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \log\left(\sqrt{2\pi e}\right)\\
& \approx & 1.4189385332046727418\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.norm</span>

---

continuous_norminvgauss.md

---

# Normal Inverse Gaussian Distribution

The probability density function is given by:

\[\begin{eqnarray*}
        f(x; a, b) = \frac{a \exp\left(\sqrt{a^2 - b^2} + b x \right)}{\pi \sqrt{1 + x^2}} \, K_1\left(a * \sqrt{1 + x^2}\right),
\end{eqnarray*}\]

where \(x\) is a real number, the parameter \(a\) is the tail heaviness and \(b\) is the asymmetry parameter satisfying \(a > 0\) and \(|b| \leq a\). \(K_1\) is the modified Bessel function of second kind (<span class="title-ref">scipy.special.k1</span>).

A normal inverse Gaussian random variable with parameters \(a\) and \(b\) can be expressed as \(X = b V + \sqrt(V) X\) where \(X\) is `norm(0,1)` and \(V\) is `invgauss(mu=1/sqrt(a**2 - b**2))`. Hence, the normal inverse Gaussian distribution is a special case of normal variance-mean mixtures.

Another common parametrization of the distribution is given by the following expression of the pdf:

\[\begin{eqnarray*}
    g(x, \alpha, \beta, \delta, \mu) = \frac{\alpha\delta K_1 \left(\alpha\sqrt{\delta^2 + (x - \mu)^2}\right)}{\pi \sqrt{\delta^2 + (x - \mu)^2}} \,
    e^{\delta \sqrt{\alpha^2 - \beta^2} + \beta (x - \mu)}
\end{eqnarray*}\]

In SciPy, this corresponds to \(a = \alpha \delta, b = \beta  \delta, \text{loc} = \mu, \text{scale}=\delta\).

Implementation: <span class="title-ref">scipy.stats.norminvgauss</span>

---

continuous_pareto.md

---

# Pareto Distribution

One shape parameter \(b>0\) and support \(x\geq1\). The standard form is

\[\begin{aligned}
\begin{eqnarray*} f\left(x;b\right) & = & \frac{b}{x^{b+1}}\\ F\left(x;b\right) & = & 1-\frac{1}{x^{b}}\\ G\left(q;b\right) & = & \left(1-q\right)^{-1/b}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{b}{b-1}\quad b>1\\ \mu_{2} & = & \frac{b}{\left(b-2\right)\left(b-1\right)^{2}}\quad b>2\\ \gamma_{1} & = & \frac{2\left(b+1\right)\sqrt{b-2}}{\left(b-3\right)\sqrt{b}}\quad b>3\\ \gamma_{2} & = & \frac{6\left(b^{3}+b^{2}-6b-2\right)}{b\left(b^{2}-7b+12\right)}\quad b>4\end{eqnarray*}
\end{aligned}\]

\[h\left(X\right)=\frac{1}{c}+1-\log\left(c\right)\]

Implementation: <span class="title-ref">scipy.stats.pareto</span>

---

continuous_powerlaw.md

---

# Power-function Distribution

A special case of the beta distribution with \(b=1\). There is one shape parameter \(a>0\) and support \(x\in\left[0,1\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;a\right) & = & ax^{a-1}\\ F\left(x;a\right) & = & x^{a}\\ G\left(q;a\right) & = & q^{1/a}\\ \mu & = & \frac{a}{a+1}\\ \mu_{2} & = & \frac{a\left(a+2\right)}{\left(a+1\right)^{2}}\\ \gamma_{1} & = & 2\left(1-a\right)\sqrt{\frac{a+2}{a\left(a+3\right)}}\\ \gamma_{2} & = & \frac{6\left(a^{3}-a^{2}-6a+2\right)}{a\left(a+3\right)\left(a+4\right)}\\ m_{d} & = & 1\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=1-\frac{1}{a}-\log\left(a\right)\]

Implementation: <span class="title-ref">scipy.stats.powerlaw</span>

---

continuous_powerlognorm.md

---

# Power Log Normal Distribution

A generalization of the log-normal distribution with shape parameters \(\sigma>0\), \(c>0\) and support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\sigma,c\right) & = & \frac{c}{x\sigma}\phi\left(\frac{\log x}{\sigma}\right)\left(\Phi\left(-\frac{\log x}{\sigma}\right)\right)^{c-1}\\
F\left(x;\sigma,c\right) & = & 1-\left(\Phi\left(-\frac{\log x}{\sigma}\right)\right)^{c}\\
G\left(q;\sigma,c\right) & = & \exp\left(-\sigma\Phi^{-1}\left(\left(1-q\right)^{1/c}\right)\right)\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\int_{0}^{1}\exp\left(-n\sigma\Phi^{-1}\left(y^{1/c}\right)\right)dy\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \mu_{1}^{\prime}\\
\mu_{2} & = & \mu_{2}^{\prime}-\mu^{2}\\
\gamma_{1} & = & \frac{\mu_{3}^{\prime}-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\\
\gamma_{2} & = & \frac{\mu_{4}^{\prime}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}}{\mu_{2}^{2}}-3\end{eqnarray*}
\end{aligned}\]

This distribution reduces to the log-normal distribution when \(c=1.\)

Implementation: <span class="title-ref">scipy.stats.powerlognorm</span>

---

continuous_powernorm.md

---

# Power Normal Distribution

A generalization of the normal distribution, with one shape parameter \(c>0\) and support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & c\phi\left(x\right)\left(\Phi\left(-x\right)\right)^{c-1}\\
F\left(x;c\right) & = & 1-\left(\Phi\left(-x\right)\right)^{c}\\
G\left(q;c\right) & = & -\Phi^{-1}\left(\left(1-q\right)^{1/c}\right)\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\left(-1\right)^{n}\int_{0}^{1}\left[\Phi^{-1}\left(y^{1/c}\right)\right]^{n}dy\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \mu_{1}^{\prime}\\ \mu_{2} & = & \mu_{2}^{\prime}-\mu^{2}\\ \gamma_{1} & = & \frac{\mu_{3}^{\prime}-3\mu\mu_{2}-\mu^{3}}{\mu_{2}^{3/2}}\\ \gamma_{2} & = & \frac{\mu_{4}^{\prime}-4\mu\mu_{3}-6\mu^{2}\mu_{2}-\mu^{4}}{\mu_{2}^{2}}-3\end{eqnarray*}
\end{aligned}\]

For \(c=1\) this reduces to the normal distribution.

Implementation: <span class="title-ref">scipy.stats.powernorm</span>

---

continuous_rayleigh.md

---

# Rayleigh Distribution

This is a special case of the Chi distribution with \(L=0.0\) and \(\nu=2\) (no location parameter is generally used), the mode of the distribution is \(S.\)

\[\begin{aligned}
\begin{eqnarray*} f\left(r\right) & = & re^{-r^{2}/2}\\
F\left(r\right) & = & 1-e^{-r^{2}/2}\\
G\left(q\right) & = & \sqrt{-2\log\left(1-q\right)}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \sqrt{\frac{\pi}{2}}\\
\mu_{2} & = & \frac{4-\pi}{2}\\
\gamma_{1} & = & \frac{2\left(\pi-3\right)\sqrt{\pi}}{\left(4-\pi\right)^{3/2}}\\
\gamma_{2} & = & \frac{24\pi-6\pi^{2}-16}{\left(4-\pi\right)^{2}}\\
m_{d} & = & 1\\ m_{n} & = & \sqrt{2\log\left(2\right)}\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\frac{\gamma}{2}+\log\left(\frac{e}{\sqrt{2}}\right).\]

\[\mu_{n}^{\prime}=\sqrt{2^{n}}\Gamma\left(\frac{n}{2}+1\right)\]

Implementation: <span class="title-ref">scipy.stats.rayleigh</span>

---

continuous_rdist.md

---

# R-distribution Distribution

A general-purpose distribution with a variety of shapes controlled by one shape parameter \(c>0.\) The support of the standard distribution is \(x\in\left[-1,1\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{\left(1-x^{2}\right)^{c/2-1}}{B\left(\frac{1}{2},\frac{c}{2}\right)}\\ F\left(x;c\right) & = & \frac{1}{2}+\frac{x}{B\left(\frac{1}{2},\frac{c}{2}\right)}\,_{2}F_{1}\left(\frac{1}{2},1-\frac{c}{2};\frac{3}{2};x^{2}\right)\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\frac{\left(1+\left(-1\right)^{n}\right)}{2}B\left(\frac{n+1}{2},\frac{c}{2}\right)\]

The R-distribution with parameter \(n\) is the distribution of the correlation coefficient of a random sample of size \(n\) drawn from a bivariate normal distribution with \(\rho=0.\) The mean of the standard distribution is always zero and as the sample size grows, the distribution's mass concentrates more closely about this mean.

Implementation: <span class="title-ref">scipy.stats.rdist</span>

---

continuous_recipinvgauss.md

---

# Reciprocal Inverse Gaussian Distribution

The pdf is found from the inverse gaussian (IG), \(f_{RIG}\left(x;\mu\right)=\frac{1}{x^{2}}f_{IG}\left(\frac{1}{x};\mu\right)\) defined for \(x\geq0\) as

\[\begin{aligned}
\begin{eqnarray*} f_{IG}\left(x;\mu\right) & = & \frac{1}{\sqrt{2\pi x^{3}}}\exp\left(-\frac{\left(x-\mu\right)^{2}}{2x\mu^{2}}\right).\\ F_{IG}\left(x;\mu\right) & = & \Phi\left(\frac{1}{\sqrt{x}}\frac{x-\mu}{\mu}\right)+\exp\left(\frac{2}{\mu}\right)\Phi\left(-\frac{1}{\sqrt{x}}\frac{x+\mu}{\mu}\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} f_{RIG}\left(x;\mu\right) & = & \frac{1}{\sqrt{2\pi x}}\exp\left(-\frac{\left(1-\mu x\right)^{2}}{2x\mu^{2}}\right)\\ F_{RIG}\left(x;\mu\right) & = & 1-F_{IG}\left(\frac{1}{x},\mu\right)\\  & = & 1-\Phi\left(\frac{1}{\sqrt{x}}\frac{1-\mu x}{\mu}\right)-\exp\left(\frac{2}{\mu}\right)\Phi\left(-\frac{1}{\sqrt{x}}\frac{1+\mu x}{\mu}\right)\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.recipinvgauss</span>

---

continuous_rel_breitwigner.md

---

# Relativistic Breit-Wigner Distribution

There is a single shape parameter \(\rho\) which takes values in \((0, \infty)\). The support is \(0 \leq x < \infty\).

\[\begin{aligned}
\begin{eqnarray*}
    f\left(x, \rho\right) & = & \frac{k}{\left(x^2 - \rho^2\right)^2 + \rho^2}\\
    F\left(x, \rho\right) & = & -\frac{i k\left(\frac{\tan^{-1}\left(\frac{x}{c}\right)}{c} -
                                 \frac{\tan^{-1}\left(\frac{x}{\bar{c}}\right)}{\bar{c}}\right)}{2\rho}
\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*}
    \mu & = & \frac{k}{2\rho} \left[\frac{\pi}{2} + \tan^{-1}\left(\rho\right)\right]\\
    \mu_2 & = & \frac{k\pi}{4} \left[\frac{1 - \rho i}{\sqrt{-1 - \rho i}} + \frac{1 + \rho i}{\sqrt{-1 + \rho i}}\right]\\
    \mu_3 & = & \infty\\
    \mu_4 & = & \infty\\
\end{eqnarray*}
\end{aligned}\]

where

\[\begin{aligned}
\begin{eqnarray*}
c & = & \sqrt{-\rho (\rho + i)}\\
\bar{c} & = & \sqrt{-\rho (\rho - i)}\text{ is its complex conjugate}\\
k & = & \frac{2\sqrt{2}\rho^2\sqrt{\rho^2 + 1}}{\pi\sqrt{\rho^2 + \rho\sqrt{\rho^2 + 1}}}
\end{eqnarray*}
\end{aligned}\]

Implementation <span class="title-ref">scipy.stats.rel\_breitwigner</span>

---

continuous_rice.md

---

# Rice Distribution

There is one shape parameter \(b\geq0\) (the "distance from the origin") and the support is \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;b\right) & = & x\exp\left(-\frac{x^{2}+b^{2}}{2}\right)I_{0}\left(xb\right)\\
F\left(x;b\right) & = & \int_{0}^{x}\alpha\exp\left(-\frac{\alpha^{2}+b^{2}}{2}\right)I_{0}\left(\alpha b\right)d\alpha\end{eqnarray*}
\end{aligned}\]

were \(I_{0}(y)\) is the modified Bessel function of the first kind of order 0.

\[\mu_{n}^{\prime}=\sqrt{2^{n}}\Gamma\left(1+\frac{n}{2}\right)\,_{1}F_{1}\left(-\frac{n}{2};1;-\frac{b^{2}}{2}\right)\]

Implementation: <span class="title-ref">scipy.stats.rice</span>

---

continuous_semicircular.md

---

# Semicircular Distribution

Defined on \(x\in\left[-1,1\right]\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{2}{\pi}\sqrt{1-x^{2}}\\ F\left(x\right) & = & \frac{1}{2}+\frac{1}{\pi}\left[x\sqrt{1-x^{2}}+\arcsin x\right]\\ G\left(q\right) & = & F^{-1}\left(q\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} m_{d}=m_{n}=\mu & = & 0\\ \mu_{2} & = & \frac{1}{4}\\ \gamma_{1} & = & 0\\ \gamma_{2} & = & -1\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=0.64472988584940017414.\]

Implementation: <span class="title-ref">scipy.stats.semicircular</span>

---

continuous_skewcauchy.md

---

# Skewed Cauchy Distribution

This distribution is a generalization of the Cauchy distribution. It has a single shape parameter \(-1 < a < 1\) that skews the distribution. The special case \(a=0\) yields the Cauchy distribution.

## Functions

\[\begin{aligned}
\begin{eqnarray*}
f(x, a) & = & \frac{1}{\pi \left(\frac{x^2}{\left(a x + 1 \right)^2} + 1 \right)},\quad x\ge0; \\
             & = & \frac{1}{\pi \left(\frac{x^2}{\left(-a x + 1 \right)^2} + 1 \right)},\quad x<0. \\
F(x, a) & = & \frac{1 - a}{2} + \frac{1 + a}{\pi} \arctan\left(\frac{x}{1 + a} \right),\quad x\ge0; \\
             & = & \frac{1 - a}{2} + \frac{1 - a}{\pi} \arctan\left(\frac{x}{1 - a} \right),\quad x<0.
\end{eqnarray*}
\end{aligned}\]

The mean, variance, skewness, and kurtosis are all undefined.

## References

  - "Skewed generalized *t* distribution", Wikipedia <https://en.wikipedia.org/wiki/Skewed_generalized_t_distribution#Skewed_Cauchy_distribution>

Implementation: <span class="title-ref">scipy.stats.skewcauchy</span>

---

continuous_studentized_range.md

---

# Studentized Range Distribution

This distribution has two shape parameters, \(k>1\) and \(\nu>0\), and the support is \(x \geq 0\).

\[\begin{eqnarray*}
f(x; k, \nu) = \frac{k(k-1)\nu^{\nu/2}}{\Gamma(\nu/2)2^{\nu/2-1}}
\int_{0}^{\infty} \int_{-\infty}^{\infty} s^{\nu} e^{-\nu s^2/2} \phi(z) \phi(sx + z)
[\Phi(sx + z) - \Phi(z)]^{k-2} \,dz \,ds
\end{eqnarray*}\]

\[\begin{eqnarray*}
F(q; k, \nu) = \frac{k\nu^{\nu/2}}{\Gamma(\nu/2)2^{\nu/2-1}}
\int_{0}^{\infty} \int_{-\infty}^{\infty} s^{\nu-1} e^{-\nu s^2/2} \phi(z)
[\Phi(sq + z) - \Phi(z)]^{k-1} \,dz \,ds
\end{eqnarray*}\]

Note: \(\phi(z)\) and \(\Phi(z)\) represent the normal PDF and normal CDF, respectively.

When \(\nu\) exceeds 100,000, the asymptotic approximation of \(F(x; k, \nu=\infty)\) or \(f(x; k, \nu=\infty)\) is used:

\[\begin{eqnarray*}
F(x; k, \nu=\infty) = k \int_{-\infty}^{\infty} \phi(z)
[\Phi(x + z) - \Phi(z)]^{k-1} \,dz
\end{eqnarray*}\]

\[\begin{eqnarray*}
f(x; k, \nu=\infty) = k(k-1) \int_{-\infty}^{\infty} \phi(z)\phi(x + z)
[\Phi(x + z) - \Phi(z)]^{k-2} \,dz
\end{eqnarray*}\]

Implementation: <span class="title-ref">scipy.stats.studentized\_range</span>

---

continuous_t.md

---

# Student t Distribution

There is one shape parameter \(\nu>0\) and the support is \(x\in\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\nu\right) & = & \frac{\Gamma\left(\frac{\nu+1}{2}\right)}{\sqrt{\pi\nu}\Gamma\left(\frac{\nu}{2}\right)\left[1+\frac{x^{2}}{\nu}\right]^{\frac{\nu+1}{2}}}\\
F\left(x;\nu\right) & = &
  \left\{
    \begin{array}{ccc}
      \frac{1}{2}I\left(\frac{\nu}{\nu+x^{2}}; \frac{\nu}{2},\frac{1}{2}\right) &  & x\leq0\\
      1-\frac{1}{2}I\left(\frac{\nu}{\nu+x^{2}}; \frac{\nu}{2},\frac{1}{2}\right) &  & x\geq0
    \end{array}
  \right.\\
G\left(q;\nu\right) & = & \left\{
  \begin{array}{ccc}
    -\sqrt{\frac{\nu}{I^{-1}\left(2q; \frac{\nu}{2},\frac{1}{2}\right)}-\nu} &  & q\leq\frac{1}{2}\\
    \sqrt{\frac{\nu}{I^{-1}\left(2-2q; \frac{\nu}{2},\frac{1}{2}\right)}-\nu} &  & q\geq\frac{1}{2}
  \end{array}
  \right. \end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} m_{n}=m_{d}=\mu & = & 0\\
\mu_{2} & = & \frac{\nu}{\nu-2}\quad\nu>2\\
\gamma_{1} & = & 0\quad\nu>3\\
\gamma_{2} & = & \frac{6}{\nu-4}\quad\nu>4\end{eqnarray*}
\end{aligned}\]

where \(I\left(x; a,b\right)\) is the incomplete beta integral and \(I^{-1}\left(I\left(x; a,b\right); a,b\right)=x\). As \(\nu\rightarrow\infty,\) this distribution approaches the standard normal distribution.

\[h\left[X\right]=\frac{\nu+1}{2} \left[\psi \left(\frac{1+\nu}{2} \right) -\psi \left(\frac{\nu}{2} \right) \right] + \ln \left[ \sqrt{\nu} B \left( \frac{\nu}{2}, \frac{1}{2} \right) \right]\]

where \(\psi(x)\) is the digamma function and \(B(x, y)\) is the beta function.

## References

  - "Student's t-distribution", Wikipedia, <https://en.wikipedia.org/wiki/Student%27s_t-distribution>

Implementation: <span class="title-ref">scipy.stats.t</span>

---

continuous_trapezoid.md

---

# Trapezoidal Distribution

Two shape parameters \(c\in[0,1], d\in[0, 1]\) giving the distances to the first and second modes as a percentage of the total extent of the non-zero portion. The location parameter is the start of the non-zero portion, and the scale-parameter is the width of the non-zero portion. In standard form we have \(x\in\left[0,1\right].\)

\[\begin{aligned}
\begin{eqnarray*}
    u(c, d) & = & \frac{2}{d - c + 1} \\
    f\left(x;c, d\right) & = & \left\{
                                \begin{array}{ccc}
                                    \frac{ux}{c} &  & x < c \\
                                    u & & c\leq x \leq d \\
                                    u\frac{1-x}{1-d} &  & x > d \\
                                \end{array}
                            \right.\\
    F\left(x;c, d\right) & = & \left\{
                                \begin{array}{ccc}
                                    \frac{ux^{2}}{2c} &  & x < c \\
                                    \frac{uc}{2} + u(x-c) &  & c\leq x \leq d \\
                                    1 - \frac{u(1 - x)^2}{2(1 - d)} &  & x > d \\
                                \end{array}
                            \right.\\
    G\left(q;c, d\right) & = & \left\{
                                \begin{array}{ccc}
                                    \sqrt{qc(d-c+1)} &  & q < c \\
                                    \frac{q}{u}+ \frac{c}{2} &  & q \leq d \\
                                    1 - \sqrt{\frac{2(1 - q) (1 - d)}{u}} &  & q > d \\
                                \end{array}
                            \right.
\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.trapezoid</span>

---

continuous_triang.md

---

# Triangular Distribution

One shape parameter \(c\in[0,1]\) giving the distance to the peak as a percentage of the total extent of the non-zero portion. The location parameter is the start of the non-zero portion, and the scale-parameter is the width of the non-zero portion. In standard form we have \(x\in\left[0,1\right].\)

\[\begin{aligned}
\begin{eqnarray*}
    f\left(x;c\right) & = & \left\{
                                \begin{array}{ccc}
                                    2\frac{x}{c} &  & x < c \\
                                    2\frac{1-x}{1-c} &  & x \geq c
                                \end{array}
                            \right.\\
    F\left(x;c\right) & = & \left\{
                                \begin{array}{ccc}
                                    \frac{x^{2}}{c} &  & x < c \\
                                    \frac{x^{2}-2x+c}{c-1} &  & x \geq c
                                \end{array}
                            \right.\\
    G\left(q;c\right) & = & \left\{
                                \begin{array}{ccc}
                                    \sqrt{cq} &  & q < c \\
                                    1-\sqrt{\left(1-c\right)\left(1-q\right)} &  & q \geq c
                                \end{array}
                            \right.
\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{c}{3}+\frac{1}{3}\\ \mu_{2} & = & \frac{1-c+c^{2}}{18}\\ \gamma_{1} & = & \frac{\sqrt{2}\left(2c-1\right)\left(c+1\right)\left(c-2\right)}{5\left(1-c+c^{2}\right)^{3/2}}\\ \gamma_{2} & = & -\frac{3}{5}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} h\left(X\right) & = & \log\left(\frac{1}{2}\sqrt{e}\right)\\  & \approx & -0.19314718055994530942.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.triang</span>

---

continuous_truncexpon.md

---

# Truncated Exponential Distribution

This is an exponential distribution defined only over a certain region \(0\leq x\leq B\) . In standard form this is

\[\begin{aligned}
\begin{eqnarray*} f\left(x;B\right) & = & \frac{e^{-x}}{1-e^{-B}}\\ F\left(x;B\right) & = & \frac{1-e^{-x}}{1-e^{-B}}\\ G\left(q;B\right) & = & -\log\left(1-q+qe^{-B}\right)\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\Gamma\left(1+n\right)-\Gamma\left(1+n,B\right)\]

\[h\left[X\right]=\log\left(e^{B}-1\right)+\frac{1+e^{B}\left(B-1\right)}{1-e^{B}}.\]

Implementation: <span class="title-ref">scipy.stats.truncexpon</span>

---

continuous_truncnorm.md

---

# Truncated Normal Distribution

A normal distribution restricted to lie within a certain range given by two parameters \(A\) and \(B\) . Notice that this \(A\) and \(B\) correspond to the bounds on \(x\) in standard form. For \(x\in\left[A,B\right]\) we get

\[\begin{aligned}
\begin{eqnarray*} f\left(x;A,B\right) & = & \frac{\phi\left(x\right)}{\Phi\left(B\right)-\Phi\left(A\right)}\\
F\left(x;A,B\right) & = & \frac{\Phi\left(x\right)-\Phi\left(A\right)}{\Phi\left(B\right)-\Phi\left(A\right)}\\
G\left(q;A,B\right) & = & \Phi^{-1}\left(q\Phi\left(B\right)+\Phi\left(A\right)\left(1-q\right)\right)\end{eqnarray*}
\end{aligned}\]

where

\[\begin{aligned}
\begin{eqnarray*} \phi\left(x\right) & = & \frac{1}{\sqrt{2\pi}}e^{-x^{2}/2}\\
\Phi\left(x\right) & = & \int_{-\infty}^{x}\phi\left(u\right)du.\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{\phi\left(A\right)-\phi\left(B\right)}{\Phi\left(B\right)-\Phi\left(A\right)}\\
\mu_{2} & = & 1+\frac{A\phi\left(A\right)-B\phi\left(B\right)}{\Phi\left(B\right)-\Phi\left(A\right)}-\left(\frac{\phi\left(A\right)-\phi\left(B\right)}{\Phi\left(B\right)-\Phi\left(A\right)}\right)^{2}\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.truncnorm</span>

---

continuous_truncpareto.md

---

# Truncated Pareto Distribution

Two shape parameters, exponent \(b>0\) and upper truncation \(c>1\). The support is \(1\leq x \leq c\).

The standard form is

\[\begin{aligned}
\begin{eqnarray*} f\left(x;b, c\right) & = & \frac{b}{1 - c^{-b}}\frac{1}{x^{b+1}}\\ F\left(x;b, c\right) & = & \frac{1 - x^{-b}}{1 - c^{-b}} \\ G\left(q;b, c\right) & = & \left(1 - \left(1 - c^{-b}\right)q\right)^{-1/b}.\end{eqnarray*}
\end{aligned}\]

The non-central moments are given by

\[\begin{aligned}
\mu_{n}^{\prime} = \begin{cases}\displaystyle\frac{b\log c}{1 - c^{-b}} & \mbox{if $n = b$,}\\ \displaystyle\frac{b}{b-n}\frac{c^b - c^n}{c^b - 1} & \mbox{otherwise.}\end{cases}
\end{aligned}\]

The entropy is

\[h\left(X\right)= -\left[\log\left(\frac{b}{1 - c^{-b}}\right) + (b+1)\left(\frac{\log c}{c^b - 1} - \frac{1}{b}\right)\right].\]

Implementation: <span class="title-ref">scipy.stats.truncpareto</span>

---

continuous_truncweibull_min.md

---

# Truncated Weibull Minimum Extreme Value Distribution

A doubly truncated version of Weibull minimum extreme value distribution. Defined for \(a<x<=b\) and \(c>0\).

\[\begin{aligned}
\begin{eqnarray*}
    f\left(x;c,a,b\right) & = & \frac{cx^{c-1}\exp\left(-x^{c}\right)}{\exp\left(-a^{c}\right) - \exp\left(-b^{c}\right)} \\
    F\left(x;c,a,b\right) & = & \frac{\exp\left(-a^{c}\right) - \exp\left(-x^{c}\right)}{\exp\left(-a^{c}\right) - \exp\left(-b^{c}\right)} \\
    G\left(q;c,a,b\right) & = & \left[-\log\left(\left(1-q\right)\exp\left(-a^{c}\right)+q\exp\left(-b^{c}\right)\right)\right]^{1/c}
\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\frac{\exp\left(a^{c}\right)}{1-\exp\left(-b^{c}\right)}\left[\gamma\left(\frac{n}{c}+1,b^{c}\right)-\gamma\left(\frac{n}{c}+1,a^{c}\right)\right]\]

where \(\gamma\left(\right)\) is the lower incomplete gamma function.

Implementation: <span class="title-ref">scipy.stats.truncweibull\_min</span>

---

continuous_tukeylambda.md

---

# Tukey-Lambda Distribution

There is one shape parameter \(\lambda\). The support is \(x\in\mathbb{R}\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\lambda\right) & = & F^{\prime}\left(x;\lambda\right)=\frac{1}{G^{\prime}\left(F\left(x;\lambda\right);\lambda\right)}=\frac{1}{F^{\lambda-1}\left(x;\lambda\right)+\left[1-F\left(x;\lambda\right)\right]^{\lambda-1}}\\ F\left(x;\lambda\right) & = & G^{-1}\left(x;\lambda\right)\\ G\left(p;\lambda\right) & = & \frac{p^{\lambda}-\left(1-p\right)^{\lambda}}{\lambda}\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & 0\\ \mu_{2} & = & \int_{0}^{1}G^{2}\left(p;\lambda\right)dp\\  & = & \frac{2\Gamma\left(\lambda+\frac{3}{2}\right)-\lambda4^{-\lambda}\sqrt{\pi}\Gamma\left(\lambda\right)\left(1-2\lambda\right)}{\lambda^{2}\left(1+2\lambda\right)\Gamma\left(\lambda+\frac{3}{2}\right)}\\ \gamma_{1} & = & 0\\ \gamma_{2} & = & \frac{\mu_{4}}{\mu_{2}^{2}}-3\\ \mu_{4} & = & \frac{3\Gamma\left(\lambda\right)\Gamma\left(\lambda+\frac{1}{2}\right)2^{-2\lambda}}{\lambda^{3}\Gamma\left(2\lambda+\frac{3}{2}\right)}+\frac{2}{\lambda^{4}\left(1+4\lambda\right)}\\  &  & -\frac{2\sqrt{3}\Gamma\left(\lambda\right)2^{-6\lambda}3^{3\lambda}\Gamma\left(\lambda+\frac{1}{3}\right)\Gamma\left(\lambda+\frac{2}{3}\right)}{\lambda^{3}\Gamma\left(2\lambda+\frac{3}{2}\right)\Gamma\left(\lambda+\frac{1}{2}\right)}.\end{eqnarray*}
\end{aligned}\]

Notice that the \(\lim_{\lambda\rightarrow0}G\left(p;\lambda\right)=\log\left(p/\left(1-p\right)\right)\)

\[\begin{aligned}
\begin{eqnarray*} h\left[X\right] & = & \int_{0}^{1}\log\left[G^{\prime}\left(p\right)\right]dp\\  & = & \int_{0}^{1}\log\left[p^{\lambda-1}+\left(1-p\right)^{\lambda-1}\right]dp.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.tukeylambda</span>

---

continuous_uniform.md

---

# Uniform Distribution

Standard form \(x\in\left[0,1\right].\) In general form, the lower limit is \(L,\) the upper limit is \(S+L.\)

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & 1\\ F\left(x\right) & = & x\\ G\left(q\right) & = & q\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{1}{2}\\ \mu_{2} & = & \frac{1}{12}\\ \gamma_{1} & = & 0\\ \gamma_{2} & = & -\frac{6}{5}\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=0\]

Implementation: <span class="title-ref">scipy.stats.uniform</span>

---

continuous_vonmises.md

---

# Von Mises Distribution

There is one shape parameter \(\kappa>0\), with support \(x\in\left[-\pi,\pi\right]\). For values of \(\kappa<100\) the PDF and CDF formulas below are used. Otherwise, a normal approximation with variance \(1/\kappa\) is used. \[Note that the PDF and CDF functions below are periodic with period \(2\pi\). If an input outside \(x\in\left[-\pi,\pi\right]\) is given, it is converted to the equivalent angle in this range.\]

\[\begin{aligned}
\begin{eqnarray*} f\left(x;\kappa\right) & = & \frac{e^{\kappa\cos x}}{2\pi I_{0}\left(\kappa\right)}\\
F\left(x;\kappa\right) & = & \frac{1}{2} + \frac{x}{2\pi} + \sum_{k=1}^{\infty}\frac{I_{k}\left(\kappa\right)\sin\left(kx\right)}{I_{0}\left(\kappa\right)\pi k}\\
G\left(q; \kappa\right) & = & F^{-1}\left(x;\kappa\right)\end{eqnarray*}
\end{aligned}\]

where \(I_{k}(\kappa)\) is a modified Bessel function of the first kind.

\[\begin{aligned}
\begin{eqnarray*} \mu & = & 0\\
\mu_{2} & = & \int_{-\pi}^{\pi}x^{2}f\left(x;\kappa\right)dx\\
\gamma_{1} & = & 0\\
\gamma_{2} & = & \frac{\int_{-\pi}^{\pi}x^{4}f\left(x;\kappa\right)dx}{\mu_{2}^{2}}-3\end{eqnarray*}
\end{aligned}\]

This can be used for defining circular variance.

Implementation: <span class="title-ref">scipy.stats.vonmises</span>

---

continuous_wald.md

---

# Wald Distribution

Special case of the Inverse Normal with shape parameter set to \(1.0\). It has support \(x\geq0\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x\right) & = & \frac{1}{\sqrt{2\pi x^{3}}}\exp\left(-\frac{\left(x-1\right)^{2}}{2x}\right).\\ F\left(x\right) & = & \Phi\left(\frac{x-1}{\sqrt{x}}\right)+\exp\left(2\right)\Phi\left(-\frac{x+1}{\sqrt{x}}\right)\\ G\left(q;\mu\right) & = & F^{-1}\left(q;\mu\right)\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & 1\\ \mu_{2} & = & 1\\ \gamma_{1} & = & 3\\ \gamma_{2} & = & 15\\ m_{d} & = & \frac{1}{2}\left(\sqrt{13}-3\right)\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.wald</span>

---

continuous_weibull_max.md

---

# Weibull Maximum Extreme Value Distribution

Defined for \(x<0\) and \(c>0\) .

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & c\left(-x\right)^{c-1}\exp\left(-\left(-x\right)^{c}\right)\\ F\left(x;c\right) & = & \exp\left(-\left(-x\right)^{c}\right)\\ G\left(q;c\right) & = & -\left(-\log q\right)^{1/c}\end{eqnarray*}
\end{aligned}\]

The mean is the negative of the right-skewed Frechet distribution given above, and the other statistical parameters can be computed from

\[\mu_{n}^{\prime}=\left(-1\right)^{n}\Gamma\left(1+\frac{n}{c}\right).\]

\[\begin{aligned}
\begin{eqnarray*}
    \mu & = & -\Gamma\left(1+\frac{1}{c}\right) \\
    \mu_{2} & = & \Gamma\left(1+\frac{2}{c}\right) -
                  \Gamma^{2}\left(1+\frac{1}{c}\right) \\
    \gamma_{1} & = & -\frac{\Gamma\left(1+\frac{3}{c}\right) -
                            3\Gamma\left(1+\frac{2}{c}\right)\Gamma\left(1+\frac{1}{c}\right) +
                            2\Gamma^{3}\left(1+\frac{1}{c}\right)}
                           {\mu_{2}^{3/2}} \\
    \gamma_{2} & = & \frac{\Gamma\left(1+\frac{4}{c}\right) -
                           4\Gamma\left(1+\frac{1}{c}\right)\Gamma\left(1+\frac{3}{c}\right) +
                           6\Gamma^{2}\left(1+\frac{1}{c}\right)\Gamma\left(1+\frac{2}{c}\right) -
                           3\Gamma^{4}\left(1+\frac{1}{c}\right)}
                          {\mu_{2}^{2}} - 3 \\
    m_{d} & = & \begin{cases}
                    -\left(\frac{c-1}{c}\right)^{\frac{1}{c}} & \text{if}\; c > 1 \\
                    0 & \text{if}\; c <= 1
                \end{cases} \\
    m_{n} & = & -\ln\left(2\right)^{\frac{1}{c}}
\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=-\frac{\gamma}{c}-\log\left(c\right)+\gamma+1\]

where \(\gamma\) is Euler's constant and equal to

\[\gamma\approx0.57721566490153286061.\]

Implementation: <span class="title-ref">scipy.stats.weibull\_max</span>

---

continuous_weibull_min.md

---

# Weibull Minimum Extreme Value Distribution

A type of extreme-value distribution with a lower bound. Defined for \(x>0\) and \(c>0\)

\[\begin{aligned}
\begin{eqnarray*}
    f\left(x;c\right) & = & cx^{c-1}\exp\left(-x^{c}\right) \\
    F\left(x;c\right) & = & 1 - \exp\left(-x^{c}\right) \\
    G\left(q;c\right) & = & \left[-\log\left(1-q\right)\right]^{1/c}
\end{eqnarray*}
\end{aligned}\]

\[\mu_{n}^{\prime}=\Gamma\left(1+\frac{n}{c}\right)\]

\[\begin{aligned}
\begin{eqnarray*}
    \mu & = & \Gamma\left(1+\frac{1}{c}\right) \\
    \mu_{2} & = & \Gamma\left(1+\frac{2}{c}\right) -
                  \Gamma^{2}\left(1+\frac{1}{c}\right) \\
    \gamma_{1} & = & \frac{\Gamma\left(1+\frac{3}{c}\right) -
                           3\Gamma\left(1+\frac{2}{c}\right)\Gamma\left(1+\frac{1}{c}\right) +
                           2\Gamma^{3}\left(1+\frac{1}{c}\right)}
                          {\mu_{2}^{3/2}} \\
    \gamma_{2} & = & \frac{\Gamma\left(1+\frac{4}{c}\right) -
                           4\Gamma\left(1+\frac{1}{c}\right)\Gamma\left(1+\frac{3}{c}\right) +
                           6\Gamma^{2}\left(1+\frac{1}{c}\right)\Gamma\left(1+\frac{2}{c}\right) -
                           3\Gamma^{4}\left(1+\frac{1}{c}\right)}
                          {\mu_{2}^{2}} - 3 \\
    m_{d} & = & \begin{cases}
                    \left(\frac{c-1}{c}\right)^{\frac{1}{c}} & \text{if}\; c > 1 \\
                    0 & \text{if}\; c <= 1
                \end{cases} \\
    m_{n} & = & \ln\left(2\right)^{\frac{1}{c}}
\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=-\frac{\gamma}{c}-\log\left(c\right)+\gamma+1\]

where \(\gamma\) is Euler's constant and equal to

\[\gamma\approx0.57721566490153286061.\]

Implementation: <span class="title-ref">scipy.stats.weibull\_min</span>

---

continuous_wrapcauchy.md

---

# Wrapped Cauchy Distribution

There is one shape parameter \(c\in\left(0,1\right)\) with support \(x\in\left[0,2\pi\right]\).

\[\begin{aligned}
\begin{eqnarray*} f\left(x;c\right) & = & \frac{1-c^{2}}{2\pi\left(1+c^{2}-2c\cos x\right)}\\
g_{c}\left(x\right) & = & \frac{1}{\pi}\arctan\left(\frac{1+c}{1-c}\tan\left(\frac{x}{2}\right)\right)\\
r_{c}\left(q\right) & = & 2\arctan\left(\frac{1-c}{1+c}\tan\left(\pi q\right)\right)\\
F\left(x;c\right) & = & \left\{
      \begin{array}{ccc}
        g_{c}\left(x\right) &  & 0\leq x<\pi\\
        1-g_{c}\left(2\pi-x\right) &  & \pi\leq x\leq2\pi
      \end{array}
      \right.\\
G\left(q;c\right) & = & \left\{
      \begin{array}{ccc}
        r_{c}\left(q\right) &  & 0\leq q<\frac{1}{2}\\
        2\pi-r_{c}\left(1-q\right) &  & \frac{1}{2}\leq q\leq1
      \end{array}
      \right.\end{eqnarray*}
\end{aligned}\]

\[h\left[X\right]=\log\left(2\pi\left(1-c^{2}\right)\right).\]

Implementation: <span class="title-ref">scipy.stats.wrapcauchy</span>

---

discrete.md

---

# Discrete Statistical Distributions

## Overview

Discrete random variables take on only a countable number of values. The commonly used distributions are included in SciPy and described in this document. Each discrete distribution can take one extra integer parameter: \(L.\) The relationship between the general distribution \(p\) and the standard distribution \(p_{0}\) is

\[p\left(x\right) = p_{0}\left(x-L\right)\]

which allows for shifting of the input. When a distribution generator is initialized, the discrete distribution can either specify the beginning and ending (integer) values \(a\) and \(b\) which must be such that

\[p_{0}\left(x\right) = 0\quad x < a \textrm{ or } x > b\]

in which case, it is assumed that the pdf function is specified on the integers \(a+mk\leq b\) where \(k\) is a non-negative integer ( \(0,1,2,\ldots\) ) and \(m\) is a positive integer multiplier. Alternatively, the two lists \(x_{k}\) and \(p\left(x_{k}\right)\) can be provided directly in which case a dictionary is set up internally to evaluate probabilities and generate random variates.

### Probability Mass Function (PMF)

The probability mass function of a random variable X is defined as the probability that the random variable takes on a particular value.

\[p\left(x_{k}\right)=P\left[X=x_{k}\right]\]

This is also sometimes called the probability density function, although technically

\[f\left(x\right)=\sum_{k}p\left(x_{k}\right)\delta\left(x-x_{k}\right)\]

is the probability density function for a discrete distribution\[1\] .

### Cumulative Distribution Function (CDF)

The cumulative distribution function is

\[F\left(x\right)=P\left[X\leq x\right]=\sum_{x_{k}\leq x}p\left(x_{k}\right)\]

and is also useful to be able to compute. Note that

\[F\left(x_{k}\right)-F\left(x_{k-1}\right)=p\left(x_{k}\right)\]

### Survival Function

The survival function is just

\[S\left(x\right)=1-F\left(x\right)=P\left[X>k\right]\]

the probability that the random variable is strictly larger than \(k\) .

### Percent Point Function (Inverse CDF)

The percent point function is the inverse of the cumulative distribution function and is

\[G\left(q\right)=F^{-1}\left(q\right)\]

for discrete distributions, this must be modified for cases where there is no \(x_{k}\) such that \(F\left(x_{k}\right)=q.\) In these cases we choose \(G\left(q\right)\) to be the smallest value \(x_{k}=G\left(q\right)\) for which \(F\left(x_{k}\right)\geq q\) . If \(q=0\) then we define \(G\left(0\right)=a-1\) . This definition allows random variates to be defined in the same way as with continuous rv's using the inverse cdf on a uniform distribution to generate random variates.

### Inverse survival function

The inverse survival function is the inverse of the survival function

\[Z\left(\alpha\right)=S^{-1}\left(\alpha\right)=G\left(1-\alpha\right)\]

and is thus the smallest non-negative integer \(k\) for which \(F\left(k\right)\geq1-\alpha\) or the smallest non-negative integer \(k\) for which \(S\left(k\right)\leq\alpha.\)

### Hazard functions

If desired, the hazard function and the cumulative hazard function could be defined as

\[h\left(x_{k}\right)=\frac{p\left(x_{k}\right)}{1-F\left(x_{k}\right)}\]

and

\[H\left(x\right)=\sum_{x_{k}\leq x}h\left(x_{k}\right)=\sum_{x_{k}\leq x}\frac{F\left(x_{k}\right)-F\left(x_{k-1}\right)}{1-F\left(x_{k}\right)}.\]

### Moments

Non-central moments are defined using the PDF

\[\mu_{m}^{\prime}=E\left[X^{m}\right]=\sum_{k}x_{k}^{m}p\left(x_{k}\right).\]

Central moments are computed similarly \(\mu=\mu_{1}^{\prime}\)

\[\begin{aligned}
\begin{eqnarray*} \mu_{m}=E\left[\left(X-\mu\right)^{m}\right] & = & \sum_{k}\left(x_{k}-\mu\right)^{m}p\left(x_{k}\right)\\  & = & \sum_{k=0}^{m}\left(-1\right)^{m-k}\left(\begin{array}{c} m\\ k\end{array}\right)\mu^{m-k}\mu_{k}^{\prime}\end{eqnarray*}
\end{aligned}\]

The mean is the first moment

\[\mu=\mu_{1}^{\prime}=E\left[X\right]=\sum_{k}x_{k}p\left(x_{k}\right)\]

the variance is the second central moment

\[\mu_{2}=E\left[\left(X-\mu\right)^{2}\right]=\sum_{x_{k}}x_{k}^{2}p\left(x_{k}\right)-\mu^{2}.\]

Skewness is defined as

\[\gamma_{1}=\frac{\mu_{3}}{\mu_{2}^{3/2}}\]

while (Fisher) kurtosis is

\[\gamma_{2}=\frac{\mu_{4}}{\mu_{2}^{2}}-3,\]

so that a normal distribution has a kurtosis of zero.

### Moment generating function

The moment generating function is defined as

\[M_{X}\left(t\right)=E\left[e^{Xt}\right]=\sum_{x_{k}}e^{x_{k}t}p\left(x_{k}\right)\]

Moments are found as the derivatives of the moment generating function evaluated at \(0.\)

### Fitting data

To fit data to a distribution, maximizing the likelihood function is common. Alternatively, some distributions have well-known minimum variance unbiased estimators. These will be chosen by default, but the likelihood function will always be available for minimizing.

If \(f_{i}\left(k;\boldsymbol{\theta}\right)\) is the PDF of a random-variable where \(\boldsymbol{\theta}\) is a vector of parameters ( *e.g.* \(L\) and \(S\) ), then for a collection of \(N\) independent samples from this distribution, the joint distribution the random vector \(\mathbf{k}\) is

\[f\left(\mathbf{k};\boldsymbol{\theta}\right)=\prod_{i=1}^{N}f_{i}\left(k_{i};\boldsymbol{\theta}\right).\]

The maximum likelihood estimate of the parameters \(\boldsymbol{\theta}\) are the parameters which maximize this function with \(\mathbf{x}\) fixed and given by the data:

\[\begin{aligned}
\begin{eqnarray*} \hat{\boldsymbol{\theta}} & = & \arg\max_{\boldsymbol{\theta}}f\left(\mathbf{k};\boldsymbol{\theta}\right)\\  & = & \arg\min_{\boldsymbol{\theta}}l_{\mathbf{k}}\left(\boldsymbol{\theta}\right).\end{eqnarray*}
\end{aligned}\]

Where

\[\begin{aligned}
\begin{eqnarray*} l_{\mathbf{k}}\left(\boldsymbol{\theta}\right) & = & -\sum_{i=1}^{N}\log f\left(k_{i};\boldsymbol{\theta}\right)\\  & = & -N\overline{\log f\left(k_{i};\boldsymbol{\theta}\right)}\end{eqnarray*}
\end{aligned}\]

### Standard notation for mean

We will use

\[\overline{y\left(\mathbf{x}\right)}=\frac{1}{N}\sum_{i=1}^{N}y\left(x_{i}\right)\]

where \(N\) should be clear from context.

### Combinations

Note that

\[k!=k\cdot\left(k-1\right)\cdot\left(k-2\right)\cdot\cdots\cdot1=\Gamma\left(k+1\right)\]

and has special cases of

\[\begin{aligned}
\begin{eqnarray*} 0! & \equiv & 1\\ k! & \equiv & 0\quad k<0\end{eqnarray*}
\end{aligned}\]

and

\[\begin{aligned}
\left(\begin{array}{c} n\\ k\end{array}\right)=\frac{n!}{\left(n-k\right)!k!}.
\end{aligned}\]

If \(n<0\) or \(k<0\) or \(k>n\) we define \(\left(\begin{array}{c} n\\ k\end{array}\right)=0\)

## Discrete Distributions in <span class="title-ref">scipy.stats</span>

<div class="toctree" data-maxdepth="1">

discrete\_bernoulli discrete\_betabinom discrete\_betanbinom discrete\_binom discrete\_boltzmann discrete\_planck discrete\_poisson discrete\_geom discrete\_nbinom discrete\_hypergeom discrete\_nchypergeom\_fisher discrete\_nchypergeom\_wallenius discrete\_nhypergeom discrete\_zipf discrete\_zipfian discrete\_logser discrete\_randint discrete\_dlaplace discrete\_yulesimon

</div>

1.  XXX: Unknown layout Plain Layout: Note that we will be using \(p\) to represent the probability mass function and a parameter (a XXX: probability). The usage should be obvious from context.

---

discrete_bernoulli.md

---

# Bernoulli Distribution

A Bernoulli random variable of parameter \(p\) takes one of only two values \(X=0\) or \(X=1\) . The probability of success ( \(X=1\) ) is \(p\) , and the probability of failure ( \(X=0\) ) is \(1-p.\) It can be thought of as a binomial random variable with \(n=1\) . The PMF is \(p\left(k\right)=0\) for \(k\neq0,1\) and

\[\begin{aligned}
\begin{eqnarray*}
    p\left(k;p\right) & = & \begin{cases} 1-p & k=0\\ p & k=1\end{cases}\\
    F\left(x;p\right) & = & \begin{cases} 0 & x<0\\ 1-p & 0\le x<1\\ 1 & 1\leq x\end{cases}\\
    G\left(q;p\right) & = & \begin{cases} 0 & 0\leq q<1-p\\ 1 & 1-p\leq q\leq1\end{cases}\\
    \mu & = & p\\ \mu_{2} & = & p\left(1-p\right)\\
    \gamma_{3} & = & \frac{1-2p}{\sqrt{p\left(1-p\right)}}\\
    \gamma_{4} & = & \frac{1-6p\left(1-p\right)}{p\left(1-p\right)}
\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right) = 1-p\left(1-e^{t}\right)\]

\[\mu_{m}^{\prime}=p\]

\[h\left[X\right]=p\log p+\left(1-p\right)\log\left(1-p\right)\]

Implementation: <span class="title-ref">scipy.stats.bernoulli</span>

---

discrete_betabinom.md

---

# Beta-Binomial Distribution

The beta-binomial distribution is a binomial distribution with a probability of success <span class="title-ref">p</span> that follows a beta distribution. The probability mass function for <span class="title-ref">betabinom</span>, defined for \(0 \leq k \leq n\), is:

\[f(k; n, a, b) = \binom{n}{k} \frac{B(k + a, n - k + b)}{B(a, b)}\]

for `k` in `{0, 1,..., n}`, where \(B(a, b)\) is the Beta function.

In the limiting case of \(a = b = 1\), the beta-binomial distribution reduces to a discrete uniform distribution:

\[f(k; n, 1, 1) = \frac{1}{n + 1}\]

In the limiting case of \(n = 1\), the beta-binomial distribution reduces to a Bernoulli distribution with the shape parameter \(p = a / (a + b)\):

\[\begin{aligned}
f(k; 1, a, b) = \begin{cases}a / (a + b) & \text{if}\; k = 0 \\b / (a + b) & \text{if}\; k = 1\end{cases}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.betabinom</span>

---

discrete_betanbinom.md

---

# Beta-Negative Binomial Distribution

The beta-negative binomial distribution is a negative binomial distribution with a probability of success <span class="title-ref">p</span> that follows a beta distribution. The probability mass function for <span class="title-ref">betanbinom</span>, defined for \(k\geq 0\), is:

\[f(k; n, a, b) = \binom{n + k - 1}{k} \frac{B(a + n, b + k)}{B(a, b)}\]

for `k` in `{0, 1,...}`, where \(B(a, b)\) is the Beta function.

In the limiting case of \(n = 1\), the beta-negative binomial distribution reduces to a beta-geometric distribution with the probability mass function:

\[f(k; a, b) = \frac{B(a + 1, b + k)}{B(a, b)}\]

Implementation: <span class="title-ref">scipy.stats.betanbinom</span>

---

discrete_binom.md

---

# Binomial Distribution

A binomial random variable with parameters \(\left(n,p\right)\) can be described as the sum of \(n\) independent Bernoulli random variables of parameter \(p;\)

\[Y=\sum_{i=1}^{n}X_{i}.\]

Therefore, this random variable counts the number of successes in \(n\) independent trials of a random experiment where the probability of success is \(p.\)

\[\begin{aligned}
\begin{eqnarray*} p\left(k;n,p\right) & = & \left(\begin{array}{c} n\\ k\end{array}\right)p^{k}\left(1-p\right)^{n-k}\,\, k\in\left\{ 0,1,\ldots n\right\} ,\\ F\left(x;n,p\right) & = & \sum_{k\leq x}\left(\begin{array}{c} n\\ k\end{array}\right)p^{k}\left(1-p\right)^{n-k}=I_{1-p}\left(n-\left\lfloor x\right\rfloor ,\left\lfloor x\right\rfloor +1\right)\quad x\geq0\end{eqnarray*}
\end{aligned}\]

where the incomplete beta integral is

\[I_{x}\left(a,b\right)=\frac{\Gamma\left(a+b\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}\int_{0}^{x}t^{a-1}\left(1-t\right)^{b-1}dt.\]

Now

\[\begin{aligned}
\begin{eqnarray*} \mu & = & np\\ \mu_{2} & = & np\left(1-p\right)\\ \gamma_{1} & = & \frac{1-2p}{\sqrt{np\left(1-p\right)}}\\ \gamma_{2} & = & \frac{1-6p\left(1-p\right)}{np\left(1-p\right)}.\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\left[1-p\left(1-e^{t}\right)\right]^{n}\]

Implementation: <span class="title-ref">scipy.stats.binom</span>

---

discrete_boltzmann.md

---

# Boltzmann (truncated Planck) Distribution

\[\begin{aligned}
\begin{eqnarray*} p\left(k;N,\lambda\right) & = & \frac{1-e^{-\lambda}}{1-e^{-\lambda N}}\exp\left(-\lambda k\right)\quad k\in\left\{ 0,1,\ldots,N-1\right\} \\ F\left(x;N,\lambda\right) & = & \left\{ \begin{array}{cc} 0 & x<0\\ \frac{1-\exp\left[-\lambda\left(\left\lfloor x\right\rfloor +1\right)\right]}{1-\exp\left(-\lambda N\right)} & 0\leq x\leq N-1\\ 1 & x\geq N-1\end{array}\right.\\ G\left(q,\lambda\right) & = & \left\lceil -\frac{1}{\lambda}\log\left[1-q\left(1-e^{-\lambda N}\right)\right]-1\right\rceil \end{eqnarray*}
\end{aligned}\]

Define \(z=e^{-\lambda}\)

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{z}{1-z}-\frac{Nz^{N}}{1-z^{N}}\\ \mu_{2} & = & \frac{z}{\left(1-z\right)^{2}}-\frac{N^{2}z^{N}}{\left(1-z^{N}\right)^{2}}\\ \gamma_{1} & = & \frac{z\left(1+z\right)\left(\frac{1-z^{N}}{1-z}\right)^{3}-N^{3}z^{N}\left(1+z^{N}\right)}{\left[z\left(\frac{1-z^{N}}{1-z}\right)^{2}-N^{2}z^{N}\right]^{3/2}}\\ \gamma_{2} & = & \frac{z\left(1+4z+z^{2}\right)\left(\frac{1-z^{N}}{1-z}\right)^{4}-N^{4}z^{N}\left(1+4z^{N}+z^{2N}\right)}{\left[z\left(\frac{1-z^{N}}{1-z}\right)^{2}-N^{2}z^{N}\right]^{2}}\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\frac{1-e^{N\left(t-\lambda\right)}}{1-e^{t-\lambda}}\frac{1-e^{-\lambda}}{1-e^{-\lambda N}}\]

Implementation: <span class="title-ref">scipy.stats.boltzmann</span>

---

discrete_dlaplace.md

---

# Discrete Laplacian Distribution

Defined over all integers for \(a>0\)

\[\begin{aligned}
\begin{eqnarray*} p\left(k\right) & = & \tanh\left(\frac{a}{2}\right)e^{-a\left|k\right|},\\ F\left(x\right) & = & \left\{ \begin{array}{cc} \frac{e^{a\left(\left\lfloor x\right\rfloor +1\right)}}{e^{a}+1} & \left\lfloor x\right\rfloor <0,\\ 1-\frac{e^{-a\left\lfloor x\right\rfloor }}{e^{a}+1} & \left\lfloor x\right\rfloor \geq0.\end{array}\right.\\ G\left(q\right) & = & \left\{ \begin{array}{cc} \left\lceil \frac{1}{a}\log\left[q\left(e^{a}+1\right)\right]-1\right\rceil  & q<\frac{1}{1+e^{-a}},\\ \left\lceil -\frac{1}{a}\log\left[\left(1-q\right)\left(1+e^{a}\right)\right]\right\rceil  & q\geq\frac{1}{1+e^{-a}}.\end{array}\right.\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} M\left(t\right) & = & \tanh\left(\frac{a}{2}\right)\sum_{k=-\infty}^{\infty}e^{tk}e^{-a\left|k\right|}\\  & = & C\left(1+\sum_{k=1}^{\infty}e^{-\left(t+a\right)k}+\sum_{1}^{\infty}e^{\left(t-a\right)k}\right)\\  & = & \tanh\left(\frac{a}{2}\right)\left(1+\frac{e^{-\left(t+a\right)}}{1-e^{-\left(t+a\right)}}+\frac{e^{t-a}}{1-e^{t-a}}\right)\\  & = & \frac{\tanh\left(\frac{a}{2}\right)\sinh a}{\cosh a-\cosh t}.\end{eqnarray*}
\end{aligned}\]

Thus,

\[\mu_{n}^{\prime}=M^{\left(n\right)}\left(0\right)=\left[1+\left(-1\right)^{n}\right]\textrm{Li}_{-n}\left(e^{-a}\right)\]

where \(\textrm{Li}_{-n}\left(z\right)\) is the polylogarithm function of order \(-n\) evaluated at \(z.\)

\[h\left[X\right]=-\log\left(\tanh\left(\frac{a}{2}\right)\right)+\frac{a}{\sinh a}\]

Implementation: <span class="title-ref">scipy.stats.dlaplace</span>

---

discrete_geom.md

---

# Geometric Distribution

The geometric random variable with parameter \(p\in\left(0,1\right)\) can be defined as the number of trials required to obtain a success where the probability of success on each trial is \(p\) . Thus,

\[\begin{aligned}
\begin{eqnarray*} p\left(k;p\right) & = & \left(1-p\right)^{k-1}p\quad k\geq1\\ F\left(x;p\right) & = & 1-\left(1-p\right)^{\left\lfloor x\right\rfloor }\quad x\geq1\\ G\left(q;p\right) & = & \left\lceil \frac{\log\left(1-q\right)}{\log\left(1-p\right)}\right\rceil \\ \mu & = & \frac{1}{p}\\ \mu_{2} & = & \frac{1-p}{p^{2}}\\ \gamma_{1} & = & \frac{2-p}{\sqrt{1-p}}\\ \gamma_{2} & = & \frac{p^{2}-6p+6}{1-p}.\end{eqnarray*}
\end{aligned}\]

\[\begin{eqnarray*} M\left(t\right) & = & \frac{p}{e^{-t}-\left(1-p\right)}\end{eqnarray*}\]

Implementation: <span class="title-ref">scipy.stats.geom</span>

---

discrete_hypergeom.md

---

# Hypergeometric Distribution

The hypergeometric random variable with parameters \(\left(M,n,N\right)\) counts the number of "good "objects in a sample of size \(N\) chosen without replacement from a population of \(M\) objects where \(n\) is the number of "good "objects in the total population.

\[\begin{aligned}
\begin{eqnarray*} p\left(k;N,n,M\right) & = & \frac{\left(\begin{array}{c} n\\ k\end{array}\right)\left(\begin{array}{c} M-n\\ N-k\end{array}\right)}{\left(\begin{array}{c} M\\ N\end{array}\right)}\quad N-\left(M-n\right)\leq k\leq\min\left(n,N\right)\\ F\left(x;N,n,M\right) & = & \sum_{k=0}^{\left\lfloor x\right\rfloor }\frac{\left(\begin{array}{c} m\\ k\end{array}\right)\left(\begin{array}{c} N-m\\ n-k\end{array}\right)}{\left(\begin{array}{c} N\\ n\end{array}\right)},\\ \mu & = & \frac{nN}{M}\\ \mu_{2} & = & \frac{nN\left(M-n\right)\left(M-N\right)}{M^{2}\left(M-1\right)}\\ \gamma_{1} & = & \frac{\left(M-2n\right)\left(M-2N\right)}{M-2}\sqrt{\frac{M-1}{nN\left(M-m\right)\left(M-n\right)}}\\ \gamma_{2} & = & \frac{g\left(N,n,M\right)}{nN\left(M-n\right)\left(M-3\right)\left(M-2\right)\left(N-M\right)}\end{eqnarray*}
\end{aligned}\]

where (defining \(m=M-n\) )

\[\begin{aligned}
\begin{eqnarray*} g\left(N,n,M\right) & = & m^{3}-m^{5}+3m^{2}n-6m^{3}n+m^{4}n+3mn^{2}\\  &  & -12m^{2}n^{2}+8m^{3}n^{2}+n^{3}-6mn^{3}+8m^{2}n^{3}\\  &  & +mn^{4}-n^{5}-6m^{3}N+6m^{4}N+18m^{2}nN\\  &  & -6m^{3}nN+18mn^{2}N-24m^{2}n^{2}N-6n^{3}N\\  &  & -6mn^{3}N+6n^{4}N+6m^{2}N^{2}-6m^{3}N^{2}-24mnN^{2}\\  &  & +12m^{2}nN^{2}+6n^{2}N^{2}+12mn^{2}N^{2}-6n^{3}N^{2}.\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.hypergeom</span>

---

discrete_logser.md

---

# Logarithmic (Log-Series, Series) Distribution

The logarithmic distribution with parameter \(p\) has a probability mass function with terms proportional to the Taylor series expansion of \(\log\left(1-p\right)\)

\[\begin{aligned}
\begin{eqnarray*} p\left(k;p\right) & = & -\frac{p^{k}}{k\log\left(1-p\right)}\quad k\geq1\\ F\left(x;p\right) & = & -\frac{1}{\log\left(1-p\right)}\sum_{k=1}^{\left\lfloor x\right\rfloor }\frac{p^{k}}{k}=1+\frac{p^{1+\left\lfloor x\right\rfloor }\Phi\left(p,1,1+\left\lfloor x\right\rfloor \right)}{\log\left(1-p\right)}\end{eqnarray*}
\end{aligned}\]

where

\[\Phi\left(z,s,a\right)=\sum_{k=0}^{\infty}\frac{z^{k}}{\left(a+k\right)^{s}}\]

is the Lerch Transcendent. Also define \(r=\log\left(1-p\right)\)

\[\begin{aligned}
\begin{eqnarray*} \mu & = & -\frac{p}{\left(1-p\right)r}\\ \mu_{2} & = & -\frac{p\left[p+r\right]}{\left(1-p\right)^{2}r^{2}}\\ \gamma_{1} & = & -\frac{2p^{2}+3pr+\left(1+p\right)r^{2}}{r\left(p+r\right)\sqrt{-p\left(p+r\right)}}r\\ \gamma_{2} & = & -\frac{6p^{3}+12p^{2}r+p\left(4p+7\right)r^{2}+\left(p^{2}+4p+1\right)r^{3}}{p\left(p+r\right)^{2}}.\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} M\left(t\right) & = & -\frac{1}{\log\left(1-p\right)}\sum_{k=1}^{\infty}\frac{e^{tk}p^{k}}{k}\\  & = & \frac{\log\left(1-pe^{t}\right)}{\log\left(1-p\right)}\end{eqnarray*}
\end{aligned}\]

Thus,

\[\mu_{n}^{\prime}=\left.M^{\left(n\right)}\left(t\right)\right|_{t=0}=\left.\frac{\textrm{Li}_{1-n}\left(pe^{t}\right)}{\log\left(1-p\right)}\right|_{t=0}=-\frac{\textrm{Li}_{1-n}\left(p\right)}{\log\left(1-p\right)}.\]

Implementation: <span class="title-ref">scipy.stats.logser</span>

---

discrete_nbinom.md

---

# Negative Binomial Distribution

The negative binomial random variable with parameters \(n\) and \(p\in\left(0,1\right)\) can be defined as the number of *extra* independent trials (beyond \(n\) ) required to accumulate a total of \(n\) successes where the probability of a success on each trial is \(p.\) Equivalently, this random variable is the number of failures encountered while accumulating \(n\) successes during independent trials of an experiment that succeeds with probability \(p.\) Thus,

\[\begin{aligned}
\begin{eqnarray*} p\left(k;n,p\right) & = & \left(\begin{array}{c} k+n-1\\ n-1\end{array}\right)p^{n}\left(1-p\right)^{k}\quad k\geq0\\ F\left(x;n,p\right) & = & \sum_{i=0}^{\left\lfloor x\right\rfloor }\left(\begin{array}{c} i+n-1\\ i\end{array}\right)p^{n}\left(1-p\right)^{i}\quad x\geq0\\  & = & I_{p}\left(n,\left\lfloor x\right\rfloor +1\right)\quad x\geq0\\ \mu & = & n\frac{1-p}{p}\\ \mu_{2} & = & n\frac{1-p}{p^{2}}\\ \gamma_{1} & = & \frac{2-p}{\sqrt{n\left(1-p\right)}}\\ \gamma_{2} & = & \frac{p^{2}+6\left(1-p\right)}{n\left(1-p\right)}.\end{eqnarray*}
\end{aligned}\]

Recall that \(I_{p}\left(a,b\right)\) is the incomplete beta integral.

Implementation: <span class="title-ref">scipy.stats.nbinom</span>

---

discrete_nchypergeom_fisher.md

---

# Fisher's Noncentral Hypergeometric Distribution

A random variable has Fisher's Noncentral Hypergeometric distribution with parameters

\(M \in {\mathbb N}\), \(n \in [0, M]\), \(N \in [0, M]\), \(\omega > 0\),

if its probability mass function is given by

\[p(x; M, n, N, \omega) = \frac{\binom{n}{x}\binom{M - n}{N-x}\omega^x}{P_0},\]

for \(x \in [x_l, x_u]\), where \(x_l = \max(0, N - (M - n))\), \(x_u = \min(N, n)\),

\[P_k = \sum_{y=x_l}^{x_u} \binom{n}{y} \binom{M - n}{N-y} \omega^y y^k,\]

and the binomial coefficients are

\[\binom{n}{k} \equiv \frac{n!}{k! (n - k)!}.\]

Other functions of this distribution are

\[\begin{aligned}
\begin{eqnarray*}
\mu & = & \frac{P_0}{P_1},\\
\mu_{2} & = & \frac{P_2}{P_0} - \left(\frac{P_1}{P_0}\right)^2,\\
\end{eqnarray*}
\end{aligned}\]

## References

  - Agner Fog, "Biased Urn Theory", <https://cran.r-project.org/web/packages/BiasedUrn/vignettes/UrnTheory.pdf>
  - "Fisher's noncentral hypergeometric distribution", Wikipedia, <https://en.wikipedia.org/wiki/Fisher's_noncentral_hypergeometric_distribution>

Implementation: <span class="title-ref">scipy.stats.nchypergeom\_fisher</span>

---

discrete_nchypergeom_wallenius.md

---

# Wallenius' Noncentral Hypergeometric Distribution

A random variable has Wallenius' Noncentral Hypergeometric distribution with parameters

\(M \in {\mathbb N}\), \(n \in [0, M]\), \(N \in [0, M]\), \(\omega > 0\),

if its probability mass function is given by

\[p(x; N, n, M) = \binom{n}{x} \binom{M - n}{N-x}\int_0^1 \left(1-t^{\omega/D}\right)^x\left(1-t^{1/D}\right)^{N-x} dt\]

for \(x \in [x_l, x_u]\), where \(x_l = \max(0, N - (M - n))\), \(x_u = \min(N, n)\),

\[D = \omega(n - x) + ((M - n)-(N-x)),\]

and the binomial coefficients are

\[\binom{n}{k} \equiv \frac{n!}{k! (n - k)!}.\]

## References

  - Agner Fog, "Biased Urn Theory", <https://cran.r-project.org/web/packages/BiasedUrn/vignettes/UrnTheory.pdf>
  - "Wallenius' noncentral hypergeometric distribution", Wikipedia, <https://en.wikipedia.org/wiki/Wallenius'_noncentral_hypergeometric_distribution>

Implementation: <span class="title-ref">scipy.stats.nchypergeom\_wallenius</span>

---

discrete_nhypergeom.md

---

# Negative Hypergeometric Distribution

Consider a box containing \(M\) balls: \(n\) red and \(M-n\) blue. We randomly sample balls from the box, one at a time and *without* replacement, until we have picked \(r\) blue balls. <span class="title-ref">nhypergeom</span> is the distribution of the number of red balls \(k\) we have picked.

\[\begin{aligned}
\begin{eqnarray*}
p(k;M,n,r) & = & \frac{\left(\begin{array}{c} k+r-1\\ k\end{array}\right)\left(\begin{array}{c} M-r-k\\ n-k\end{array}\right)}{\left(\begin{array}{c} M\\ n\end{array}\right)}\quad 0 \leq k \leq M-n,\\
F(x;M,n,r) & = & \sum_{k=0}^{\left\lfloor x\right\rfloor }p\left(k;M,n,r\right),\\
\mu & = & \frac{rn}{M-n+1},\\
\mu_{2} & = & \frac{rn(M+1)}{(M-n+1)(M-n+2)}\left(1-\frac{r}{M-n+1}\right)
\end{eqnarray*}
\end{aligned}\]

for \(k \in 0, 1, 2, ..., n\), where the binomial coefficients are defined as,

\[\begin{eqnarray*} \binom{n}{k} \equiv \frac{n!}{k! (n - k)!} \end{eqnarray*}\]

The cumulative distribution, survivor function, hazard function, cumulative hazard function, inverse distribution function, moment generating function, and characteristic function on the support of \(k\) are mathematically intractable.

Implementation: <span class="title-ref">scipy.stats.nhypergeom</span>

---

discrete_planck.md

---

# Planck (discrete exponential) Distribution

Named Planck because of its relationship to the black-body problem he solved.

\[\begin{aligned}
\begin{eqnarray*} p\left(k;\lambda\right) & = & \left(1-e^{-\lambda}\right)e^{-\lambda k}\quad k\lambda\geq0\\ F\left(x;\lambda\right) & = & 1-e^{-\lambda\left(\left\lfloor x\right\rfloor +1\right)}\quad x\lambda\geq0\\ G\left(q;\lambda\right) & = & \left\lceil -\frac{1}{\lambda}\log\left[1-q\right]-1\right\rceil .\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{1}{e^{\lambda}-1}\\ \mu_{2} & = & \frac{e^{-\lambda}}{\left(1-e^{-\lambda}\right)^{2}}\\ \gamma_{1} & = & 2\cosh\left(\frac{\lambda}{2}\right)\\ \gamma_{2} & = & 4+2\cosh\left(\lambda\right)\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\frac{1-e^{-\lambda}}{1-e^{t-\lambda}}\]

\[h\left[X\right]=\frac{\lambda e^{-\lambda}}{1-e^{-\lambda}}-\log\left(1-e^{-\lambda}\right)\]

Implementation: <span class="title-ref">scipy.stats.planck</span>

---

discrete_poisson.md

---

# Poisson Distribution

The Poisson random variable counts the number of successes in \(n\) independent Bernoulli trials in the limit as \(n\rightarrow\infty\) and \(p\rightarrow0\) where the probability of success in each trial is \(p\) and \(np=\lambda\geq0\) is a constant. It can be used to approximate the Binomial random variable or in its own right to count the number of events that occur in the interval \(\left[0,t\right]\) for a process satisfying certain "sparsity" constraints. The functions are:

\[\begin{aligned}
\begin{eqnarray*} p\left(k;\lambda\right) & = & e^{-\lambda}\frac{\lambda^{k}}{k!}\quad k\geq0,\\ F\left(x;\lambda\right) & = & \sum_{n=0}^{\left\lfloor x\right\rfloor }e^{-\lambda}\frac{\lambda^{n}}{n!}=\frac{1}{\Gamma\left(\left\lfloor x\right\rfloor +1\right)}\int_{\lambda}^{\infty}t^{\left\lfloor x\right\rfloor }e^{-t}dt,\\ \mu & = & \lambda\\ \mu_{2} & = & \lambda\\ \gamma_{1} & = & \frac{1}{\sqrt{\lambda}}\\ \gamma_{2} & = & \frac{1}{\lambda}.\end{eqnarray*}
\end{aligned}\]

\[M\left(t\right)=\exp\left[\lambda\left(e^{t}-1\right)\right].\]

Implementation: <span class="title-ref">scipy.stats.poisson</span>

---

discrete_randint.md

---

# Discrete Uniform (randint) Distribution

The discrete uniform distribution with parameters \(\left(a,b\right)\) constructs a random variable that has an equal probability of being any one of the integers in the half-open range \([a,b)\). If \(a\) is not given it is assumed to be zero and the only parameter is \(b\). Therefore,

\[\begin{aligned}
\begin{eqnarray*}
    p\left(k,a,b\right) & = & \frac{1}{b-a} \quad a \leq k < b \\
    F\left(x;a,b\right) & = & \frac{\left\lfloor x\right\rfloor -a}{b-a} \quad a \leq x \leq b \\
    G\left(q;a,b\right) & = & \left\lceil q\left(b-a\right)+a\right\rceil \\
    \mu & = & \frac{b+a-1}{2}\\
    \mu_{2} & = & \frac{\left(b-a-1\right)\left(b-a+1\right)}{12}\\
    \gamma_{1} & = & 0 \\
    \gamma_{2} & = & -\frac{6}{5}\frac{\left(b-a\right)^{2}+1}{\left(b-a-1\right)\left(b-a+1\right)}.
\end{eqnarray*}
\end{aligned}\]

\[\begin{aligned}
\begin{eqnarray*}
    M\left(t\right) & = & \frac{1}{b-a}\sum_{k=a}^{b-1}e^{tk}\\
                    & = & \frac{e^{bt}-e^{at}}{\left(b-a\right)\left(e^{t}-1\right)}
\end{eqnarray*}
\end{aligned}\]

Implementation: <span class="title-ref">scipy.stats.randint</span>

---

discrete_yulesimon.md

---

# Yule-Simon Distribution

A Yule-Simon random variable with parameter \(\alpha>0\) can be represented as a mixture of exponential random variates. To see this write \(W\) as an exponential random variate with rate \(\rho\) and a Geometric random variate \(K\) with probability \(1-exp(-W)\) then \(K\) marginally has a Yule-Simon distribution. The latent variable representation described above is used for random variate generation.

\[\begin{aligned}
\begin{eqnarray*}
p \left( k; \alpha \right) & = & \alpha \frac{\Gamma\left(k\right)\Gamma\left(\alpha + 1\right)}{\Gamma\left(k+\alpha+1\right)} \\
F \left( k; \alpha \right) & = &  1 - \frac{ k \Gamma\left(k\right)\Gamma\left(\alpha + 1\right)}{\Gamma\left(k+\alpha+1\right)}
\end{eqnarray*}
\end{aligned}\]

for \(k = 1,2,...\).

Now

\[\begin{aligned}
\begin{eqnarray*} \mu & = & \frac{\alpha}{\alpha-1}\\
\mu_{2} & = &  \frac{\alpha^2}{\left(\alpha-1\right)^2\left( \alpha - 2 \right)}\\
\gamma_{1} & = & \frac{ \sqrt{\left( \alpha - 2 \right)} \left( \alpha + 1 \right)^2}{ \alpha  \left( \alpha - 3 \right)}\\
\gamma_{2} & = & \frac{ \left(\alpha + 3\right) + \left(\alpha^3 - 49\alpha - 22\right)}{\alpha \left(\alpha - 4\right)\left(\alpha - 3 \right) }
\end{eqnarray*}
\end{aligned}\]

for \(\alpha>1\) otherwise the mean is infinite and the variance does not exist. For the variance, \(\alpha>2\) otherwise the variance does not exist. Similarly, for the skewness and kurtosis to be finite, \(\alpha>3\) and \(\alpha>4\) respectively.

Implementation: <span class="title-ref">scipy.stats.yulesimon</span>

---

discrete_zipf.md

---

# Zipf (Zeta) Distribution

A random variable has the zeta distribution (also called the zipf distribution) with parameter \(\alpha>1\) if it's probability mass function is given by

\[\begin{eqnarray*} p\left(k;\alpha\right) & = & \frac{1}{\zeta\left(\alpha\right)k^{\alpha}}\quad k\geq1\end{eqnarray*}\]

where

\[\zeta\left(\alpha\right)=\sum_{n=1}^{\infty}\frac{1}{n^{\alpha}}\]

is the Riemann zeta function. Other functions of this distribution are

\[\begin{aligned}
\begin{eqnarray*} F\left(x;\alpha\right) & = & \frac{1}{\zeta\left(\alpha\right)}\sum_{k=1}^{\left\lfloor x\right\rfloor }\frac{1}{k^{\alpha}}\\ \mu & = & \frac{\zeta_{1}}{\zeta_{0}}\quad\alpha>2\\ \mu_{2} & = & \frac{\zeta_{2}\zeta_{0}-\zeta_{1}^{2}}{\zeta_{0}^{2}}\quad\alpha>3\\ \gamma_{1} & = & \frac{\zeta_{3}\zeta_{0}^{2}-3\zeta_{0}\zeta_{1}\zeta_{2}+2\zeta_{1}^{3}}{\left[\zeta_{2}\zeta_{0}-\zeta_{1}^{2}\right]^{3/2}}\quad\alpha>4\\ \gamma_{2} & = & \frac{\zeta_{4}\zeta_{0}^{3}-4\zeta_{3}\zeta_{1}\zeta_{0}^{2}+12\zeta_{2}\zeta_{1}^{2}\zeta_{0}-6\zeta_{1}^{4}-3\zeta_{2}^{2}\zeta_{0}^{2}}{\left(\zeta_{2}\zeta_{0}-\zeta_{1}^{2}\right)^{2}}.\end{eqnarray*}
\end{aligned}\]

\[\begin{eqnarray*} M\left(t\right) & = & \frac{\textrm{Li}_{\alpha}\left(e^{t}\right)}{\zeta\left(\alpha\right)}\end{eqnarray*}\]

where \(\zeta_{i}=\zeta\left(\alpha-i\right)\) and \(\textrm{Li}_{n}\left(z\right)\) is the \(n^{\textrm{th}}\) polylogarithm function of \(z\) defined as

\[\textrm{Li}_{n}\left(z\right)\equiv\sum_{k=1}^{\infty}\frac{z^{k}}{k^{n}}\]

\[\mu_{n}^{\prime}=\left.M^{\left(n\right)}\left(t\right)\right|_{t=0}=\left.\frac{\textrm{Li}_{\alpha-n}\left(e^{t}\right)}{\zeta\left(a\right)}\right|_{t=0}=\frac{\zeta\left(\alpha-n\right)}{\zeta\left(\alpha\right)}\]

Implementation: <span class="title-ref">scipy.stats.zipf</span>

---

discrete_zipfian.md

---

# Zipfian Distribution

A random variable has the Zipfian distribution with parameters \(s \ge 0\) and \(N \in \{1, 2, 3, \dots\}\) if its probability mass function is given by

\[\begin{eqnarray*} p\left(k; s, N \right) & = & \frac{1}{H_{N, s}k^{s}}\quad k \in \{1, 2, \dots, n-1, n\} \end{eqnarray*}\]

where

\[H_{N, s}=\sum_{n=1}^{N}\frac{1}{n^{s}}\]

is the \(N\)<sup>th</sup> generalized harmonic number of order \(s\). Other functions of this distribution are

\[\begin{aligned}
\begin{eqnarray*}
 F\left(x; s, N\right) & = & \frac{H_{k, s}}{H_{N, s}}, \\
\mu & = & \frac{H_{N, s-1}}{H_{N, s}},\\
\mu_{2} & = & \frac{H_{N, s-2}}{H_{N, s}} - \frac{H^2_{N, s-1}}{H^2_{N, s}},\\
\gamma_1 & = & \frac{\frac{H_{N, s-3}}{H_{N, s}} - 3 \frac{H_{N, s-1}H_{N, s-2}}{H_{N, s}^2} + 2\frac{H_{N, s-1}^3}{H_{N, s}^3}}{\left(\frac{H_{N, s-2}H_{N, s}- H_{N, s-1}^2}{H_{N, s}^2}\right)^{\frac{3}{2}}}, \mbox{and}\\
\gamma_2 & = & \frac{H_{N, s}^3 H_{N, s-4} - 4 H_{N, s}^2 H_{N, s-1} H_{N, s-3} + 6 H_{N, s} H_{N, s-1}^2 H_{N, s-2} - 3 H_{N, s-1}^4}{\left(H_{N, s-2} H_{N, s} - H_{N, s-1}^2 \right)^2}.
\end{eqnarray*}
\end{aligned}\]

## References

  - "Zipf's Law", Wikipedia, <https://en.wikipedia.org/wiki/Zipf%27s_law>
  - Larry Leemis, "Zipf Distribution", Univariate Distribution Relationships. <http://www.math.wm.edu/~leemis/chart/UDR/PDFs/Zipf.pdf>

Implementation: <span class="title-ref">scipy.stats.zipfian</span>

---

hypothesis_tests.md

---

# Hypothesis tests

Statistical hypothesis tests are used to decide whether data sufficiently support a particular hypothesis. SciPy defines a number of hypothesis tests, listed in \[hypotests\](\#hypotests).

You can find simple examples to each test in the corresponding docstring. For more detailed examples, see the following sections.

<div class="toctree" data-maxdepth="1">

hypothesis\_bartlett.md hypothesis\_chisquare.md hypothesis\_chi2\_contingency.md hypothesis\_dunnett.md hypothesis\_fisher\_exact.md hypothesis\_fligner.md hypothesis\_friedmanchisquare.md hypothesis\_jarque\_bera.md hypothesis\_kendalltau.md hypothesis\_kurtosistest.md hypothesis\_levene.md hypothesis\_normaltest.md hypothesis\_odds\_ratio.md hypothesis\_shapiro.md hypothesis\_skewtest.md hypothesis\_spearmanr.md

</div>

---

kernel_density_estimation.md

---

# Kernel density estimation

A common task in statistics is to estimate the probability density function (PDF) of a random variable from a set of data samples. This task is called density estimation. The most well-known tool to do this is the histogram. A histogram is a useful tool for visualization (mainly because everyone understands it), but doesn't use the available data very efficiently. Kernel density estimation (KDE) is a more efficient tool for the same task. The <span class="title-ref">scipy.stats.gaussian\_kde</span> estimator can be used to estimate the PDF of univariate as well as multivariate data. It works best if the data is unimodal.

## Univariate estimation

We start with a minimal amount of data in order to see how <span class="title-ref">scipy.stats.gaussian\_kde</span> works and what the different options for bandwidth selection do. The data sampled from the PDF are shown as blue dashes at the bottom of the figure (this is called a rug plot):

<div class="plot" alt="&quot; &quot;">

\>\>\> import numpy as np \>\>\> from scipy import stats \>\>\> import matplotlib.pyplot as plt

\>\>\> x1 = np.array(\[-7, -5, 1, 4, 5\], dtype=np.float64) \>\>\> kde1 = stats.gaussian\_kde(x1) \>\>\> kde2 = stats.gaussian\_kde(x1, bw\_method='silverman')

\>\>\> fig = plt.figure() \>\>\> ax = fig.add\_subplot(111)

\>\>\> ax.plot(x1, np.zeros(x1.shape), 'b+', ms=20) \# rug plot \>\>\> x\_eval = np.linspace(-10, 10, num=200) \>\>\> ax.plot(x\_eval, kde1(x\_eval), 'k-', label="Scott's Rule") \>\>\> ax.plot(x\_eval, kde2(x\_eval), 'r-', label="Silverman's Rule")

\>\>\> plt.show()

</div>

We see that there is very little difference between Scott's Rule and Silverman's Rule, and that the bandwidth selection with a limited amount of data is probably a bit too wide. We can define our own bandwidth function to get a less smoothed-out result.

> \>\>\> def my\_kde\_bandwidth(obj, fac=1./5): ... """We use Scott's Rule, multiplied by a constant factor.""" ... return np.power(obj.n, -1./(obj.d+4)) \* fac
> 
> \>\>\> fig = plt.figure() \>\>\> ax = fig.add\_subplot(111)
> 
> \>\>\> ax.plot(x1, np.zeros(x1.shape), 'b+', ms=20) \# rug plot \>\>\> kde3 = stats.gaussian\_kde(x1, bw\_method=my\_kde\_bandwidth) \>\>\> ax.plot(x\_eval, kde3(x\_eval), 'g-', label="With smaller BW")
> 
> \>\>\> plt.show()

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/kde\_plot2.py

</div>

We see that if we set bandwidth to be very narrow, the obtained estimate for the probability density function (PDF) is simply the sum of Gaussians around each data point.

We now take a more realistic example and look at the difference between the two available bandwidth selection rules. Those rules are known to work well for (close to) normal distributions, but even for unimodal distributions that are quite strongly non-normal they work reasonably well. As a non-normal distribution we take a Student's T distribution with 5 degrees of freedom.

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="1">

tutorial/stats/plots/kde\_plot3.py

</div>

We now take a look at a bimodal distribution with one wider and one narrower Gaussian feature. We expect that this will be a more difficult density to approximate, due to the different bandwidths required to accurately resolve each feature.

> \>\>\> from functools import partial
> 
> \>\>\> loc1, scale1, size1 = (-2, 1, 175) \>\>\> loc2, scale2, size2 = (2, 0.2, 50) \>\>\> x2 = np.concatenate(\[np.random.normal(loc=loc1, scale=scale1, size=size1), ... np.random.normal(loc=loc2, scale=scale2, size=size2)\])
> 
> \>\>\> x\_eval = np.linspace(x2.min() - 1, x2.max() + 1, 500)
> 
> \>\>\> kde = stats.gaussian\_kde(x2) \>\>\> kde2 = stats.gaussian\_kde(x2, bw\_method='silverman') \>\>\> kde3 = stats.gaussian\_kde(x2, bw\_method=partial(my\_kde\_bandwidth, fac=0.2)) \>\>\> kde4 = stats.gaussian\_kde(x2, bw\_method=partial(my\_kde\_bandwidth, fac=0.5))
> 
> \>\>\> pdf = stats.norm.pdf \>\>\> bimodal\_pdf = pdf(x\_eval, loc=loc1, scale=scale1) \* float(size1) / x2.size + ... pdf(x\_eval, loc=loc2, scale=scale2) \* float(size2) / x2.size
> 
> \>\>\> fig = plt.figure(figsize=(8, 6)) \>\>\> ax = fig.add\_subplot(111)
> 
> \>\>\> ax.plot(x2, np.zeros(x2.shape), 'b+', ms=12) \>\>\> ax.plot(x\_eval, kde(x\_eval), 'k-', label="Scott's Rule") \>\>\> ax.plot(x\_eval, kde2(x\_eval), 'b-', label="Silverman's Rule") \>\>\> ax.plot(x\_eval, kde3(x\_eval), 'g-', label="Scott \* 0.2") \>\>\> ax.plot(x\_eval, kde4(x\_eval), 'c-', label="Scott \* 0.5") \>\>\> ax.plot(x\_eval, bimodal\_pdf, 'r--', label="Actual PDF")
> 
> \>\>\> ax.set\_xlim(\[x\_eval.min(), x\_eval.max()\]) \>\>\> ax.legend(loc=2) \>\>\> ax.set\_xlabel('x') \>\>\> ax.set\_ylabel('Density') \>\>\> plt.show()

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/kde\_plot4.py

</div>

As expected, the KDE is not as close to the true PDF as we would like due to the different characteristic size of the two features of the bimodal distribution. By halving the default bandwidth (`Scott * 0.5`), we can do somewhat better, while using a factor 5 smaller bandwidth than the default doesn't smooth enough. What we really need, though, in this case, is a non-uniform (adaptive) bandwidth.

## Multivariate estimation

With <span class="title-ref">scipy.stats.gaussian\_kde</span> we can perform multivariate, as well as univariate estimation. We demonstrate the bivariate case. First, we generate some random data with a model in which the two variates are correlated.

> \>\>\> def measure(n): ... """Measurement model, return two coupled measurements.""" ... m1 = np.random.normal(size=n) ... m2 = np.random.normal(scale=0.5, size=n) ... return m1+m2, m1-m2
> 
> \>\>\> m1, m2 = measure(2000) \>\>\> xmin = m1.min() \>\>\> xmax = m1.max() \>\>\> ymin = m2.min() \>\>\> ymax = m2.max()

Then we apply the KDE to the data:

> \>\>\> X, Y = np.mgrid\[xmin:xmax:100j, ymin:ymax:100j\] \>\>\> positions = np.vstack(\[X.ravel(), Y.ravel()\]) \>\>\> values = np.vstack(\[m1, m2\]) \>\>\> kernel = stats.gaussian\_kde(values) \>\>\> Z = np.reshape(kernel.evaluate(positions).T, X.shape)

Finally, we plot the estimated bivariate distribution as a colormap and plot the individual data points on top.

> \>\>\> fig = plt.figure(figsize=(8, 6)) \>\>\> ax = fig.add\_subplot(111)
> 
> \>\>\> ax.imshow(np.rot90(Z), cmap=plt.cm.gist\_earth\_r, ... extent=\[xmin, xmax, ymin, ymax\]) \>\>\> ax.plot(m1, m2, 'k.', markersize=2)
> 
> \>\>\> ax.set\_xlim(\[xmin, xmax\]) \>\>\> ax.set\_ylim(\[ymin, ymax\])
> 
> \>\>\> plt.show()

<div class="plot" data-align="center" alt="&quot;An X-Y plot showing a random scattering of points around a 2-D gaussian. The distribution has a semi-major axis at 45 degrees with a semi-minor axis about half as large. Each point in the plot is highlighted with the outer region in red, then yellow, then green, with the center in blue. &quot;" data-include-source="0">

tutorial/stats/plots/kde\_plot5.py

</div>

---

multiscale_graphcorr.md

---

# Multiscale Graph Correlation (MGC)

With <span class="title-ref">scipy.stats.multiscale\_graphcorr</span>, we can test for independence on high dimensional and nonlinear data. Before we start, let's import some useful packages:

> \>\>\> import numpy as np \>\>\> import matplotlib.pyplot as plt; plt.style.use('classic') \>\>\> from scipy.stats import multiscale\_graphcorr

Let's use a custom plotting function to plot the data relationship:

> \>\>\> def mgc\_plot(x, y, sim\_name, mgc\_dict=None, only\_viz=False, ... only\_mgc=False): ... """Plot sim and MGC-plot""" ... if not only\_mgc: ... \# simulation ... plt.figure(figsize=(8, 8)) ... ax = plt.gca() ... ax.set\_title(sim\_name + " Simulation", fontsize=20) ... ax.scatter(x, y) ... ax.set\_xlabel('X', fontsize=15) ... ax.set\_ylabel('Y', fontsize=15) ... ax.axis('equal') ... ax.tick\_params(axis="x", labelsize=15) ... ax.tick\_params(axis="y", labelsize=15) ... plt.show() ... if not only\_viz: ... \# local correlation map ... plt.figure(figsize=(8,8)) ... ax = plt.gca() ... mgc\_map = mgc\_dict\["mgc\_map"\] ... \# draw heatmap ... ax.set\_title("Local Correlation Map", fontsize=20) ... im = ax.imshow(mgc\_map, cmap='YlGnBu') ... \# colorbar ... cbar = ax.figure.colorbar(im, ax=ax) ... cbar.ax.set\_ylabel("", rotation=-90, va="bottom") ... ax.invert\_yaxis() ... \# Turn spines off and create white grid. ... for edge, spine in ax.spines.items(): ... spine.set\_visible(False) ... \# optimal scale ... opt\_scale = mgc\_dict\["opt\_scale"\] ... ax.scatter(opt\_scale\[0\], opt\_scale\[1\], ... marker='X', s=200, color='red') ... \# other formatting ... ax.tick\_params(bottom="off", left="off") ... ax.set\_xlabel('\#Neighbors for X', fontsize=15) ... ax.set\_ylabel('\#Neighbors for Y', fontsize=15) ... ax.tick\_params(axis="x", labelsize=15) ... ax.tick\_params(axis="y", labelsize=15) ... ax.set\_xlim(0, 100) ... ax.set\_ylim(0, 100) ... plt.show()

Let's look at some linear data first:

> \>\>\> rng = np.random.default\_rng() \>\>\> x = np.linspace(-1, 1, num=100) \>\>\> y = x + 0.3 \* rng.random(x.size)

The simulation relationship can be plotted below:

> \>\>\> mgc\_plot(x, y, "Linear", only\_viz=True)

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/mgc\_plot1.py

</div>

Now, we can see the test statistic, p-value, and MGC map visualized below. The optimal scale is shown on the map as a red "x":

> \>\>\> stat, pvalue, mgc\_dict = multiscale\_graphcorr(x, y) \>\>\> print("MGC test statistic: ", round(stat, 1)) MGC test statistic: 1.0 \>\>\> print("P-value: ", round(pvalue, 1)) P-value: 0.0 \>\>\> mgc\_plot(x, y, "Linear", mgc\_dict, only\_mgc=True)

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/mgc\_plot2.py

</div>

It is clear from here, that MGC is able to determine a relationship between the input data matrices because the p-value is very low and the MGC test statistic is relatively high. The MGC-map indicates a **strongly linear relationship**. Intuitively, this is because having more neighbors will help in identifying a linear relationship between \(x\) and \(y\). The optimal scale in this case is **equivalent to the global scale**, marked by a red spot on the map.

The same can be done for nonlinear data sets. The following \(x\) and \(y\) arrays are derived from a nonlinear simulation:

> \>\>\> unif = np.array(rng.uniform(0, 5, size=100)) \>\>\> x = unif \* np.cos(np.pi \* unif) \>\>\> y = unif \* np.sin(np.pi \* unif) + 0.4 \* rng.random(x.size)

The simulation relationship can be plotted below:

> \>\>\> mgc\_plot(x, y, "Spiral", only\_viz=True)

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/mgc\_plot3.py

</div>

Now, we can see the test statistic, p-value, and MGC map visualized below. The optimal scale is shown on the map as a red "x":

> \>\>\> stat, pvalue, mgc\_dict = multiscale\_graphcorr(x, y) \>\>\> print("MGC test statistic: ", round(stat, 1)) MGC test statistic: 0.2 \# random \>\>\> print("P-value: ", round(pvalue, 1)) P-value: 0.0 \>\>\> mgc\_plot(x, y, "Spiral", mgc\_dict, only\_mgc=True)

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/mgc\_plot4.py

</div>

It is clear from here, that MGC is able to determine a relationship again because the p-value is very low and the MGC test statistic is relatively high. The MGC-map indicates a **strongly nonlinear relationship**. The optimal scale in this case is **equivalent to the local scale**, marked by a red spot on the map.

---

probability_distributions.md

---

# Probability distributions

There are two general distribution classes that have been implemented for encapsulating \[continuous random variables \<continuous-random-variables\>\](\#continuous-random-variables \<continuous-random-variables\>) and \[discrete random variables \<discrete-random-variables\>\](\#discrete-random-variables \<discrete-random-variables\>). Over 100 continuous random variables (RVs) and 20 discrete random variables have been implemented using these classes. For mathematical reference information about individual distributions, please see \[continuous\](continuous.md) and \[discrete\](discrete.md).

All of the statistics functions are located in the sub-package `scipy.stats` and a fairly complete listing of these functions and random variables available can also be obtained from the docstring for the stats sub-package.

In the discussion below, we mostly focus on continuous RVs. Nearly everything also applies to discrete variables, but we point out some differences here: \[discrete\_points\_label\](\#discrete\_points\_label).

In the code samples below, we assume that the `scipy.stats` package is imported as

> \>\>\> from scipy import stats

and in some cases we assume that individual objects are imported as

> \>\>\> from scipy.stats import norm

<div class="toctree" data-maxdepth="2" data-caption="All distributions">

continuous discrete

</div>

## Getting help

First of all, all distributions are accompanied with help functions. To obtain just some basic information, we print the relevant docstring: `print(stats.norm.__doc__)`.

To find the support, i.e., upper and lower bounds of the distribution, call:

> \>\>\> print('bounds of distribution lower: %s, upper: %s' % norm.support()) bounds of distribution lower: -inf, upper: inf

We can list all methods and properties of the distribution with `dir(norm)`. As it turns out, some of the methods are private, although they are not named as such (their names do not start with a leading underscore), for example `veccdf`, are only available for internal calculation (those methods will give warnings when one tries to use them, and will be removed at some point).

To obtain the *real* main methods, we list the methods of the frozen distribution. (We explain the meaning of a <span class="title-ref">frozen</span> distribution below).

> \>\>\> rv = norm() \>\>\> dir(rv) \# reformatted \['\_\_class\_\_', '\_\_delattr\_\_', '\_\_dict\_\_', '\_\_dir\_\_', '\_\_doc\_\_', '\_\_eq\_\_', '\_\_format\_\_', '\_\_ge\_\_', '\_\_getattribute\_\_', '\_\_gt\_\_', '\_\_hash\_\_', '\_\_init\_\_', '\_\_le\_\_', '\_\_lt\_\_', '\_\_module\_\_', '\_\_ne\_\_', '\_\_new\_\_', '\_\_reduce\_\_', '\_\_reduce\_ex\_\_', '\_\_repr\_\_', '\_\_setattr\_\_', '\_\_sizeof\_\_', '\_\_str\_\_', '\_\_subclasshook\_\_', '\_\_weakref\_\_', 'a', 'args', 'b', 'cdf', 'dist', 'entropy', 'expect', 'interval', 'isf', 'kwds', 'logcdf', 'logpdf', 'logpmf', 'logsf', 'mean', 'median', 'moment', 'pdf', 'pmf', 'ppf', 'random\_state', 'rvs', 'sf', 'stats', 'std', 'var'\]

Finally, we can obtain the list of available distribution through introspection:

> \>\>\> dist\_continu = \[d for d in dir(stats) if ... isinstance(getattr(stats, d), stats.rv\_continuous)\] \>\>\> dist\_discrete = \[d for d in dir(stats) if ... isinstance(getattr(stats, d), stats.rv\_discrete)\] \>\>\> print('number of continuous distributions: %d' % len(dist\_continu)) number of continuous distributions: 109 \>\>\> print('number of discrete distributions: %d' % len(dist\_discrete)) number of discrete distributions: 21

## Common methods

The main public methods for continuous RVs are:

  - rvs: Random Variates
  - pdf: Probability Density Function
  - cdf: Cumulative Distribution Function
  - sf: Survival Function (1-CDF)
  - ppf: Percent Point Function (Inverse of CDF)
  - isf: Inverse Survival Function (Inverse of SF)
  - stats: Return mean, variance, (Fisher's) skew, or (Fisher's) kurtosis
  - moment: non-central moments of the distribution

Let's take a normal RV as an example.

> \>\>\> norm.cdf(0) 0.5

To compute the `cdf` at a number of points, we can pass a list or a numpy array.

> \>\>\> norm.cdf(\[-1., 0, 1\]) array(\[ 0.15865525, 0.5, 0.84134475\]) \>\>\> import numpy as np \>\>\> norm.cdf(np.array(\[-1., 0, 1\])) array(\[ 0.15865525, 0.5, 0.84134475\])

Thus, the basic methods, such as <span class="title-ref">pdf</span>, <span class="title-ref">cdf</span>, and so on, are vectorized.

Other generally useful methods are supported too:

> \>\>\> norm.mean(), norm.std(), norm.var() (0.0, 1.0, 1.0) \>\>\> norm.stats(moments="mv") (array(0.0), array(1.0))

To find the median of a distribution, we can use the percent point function `ppf`, which is the inverse of the `cdf`:

> \>\>\> norm.ppf(0.5) 0.0

To generate a sequence of random variates, use the `size` keyword argument:

> \>\>\> norm.rvs(size=3) array(\[-0.35687759, 1.34347647, -0.11710531\]) \# random

Don't think that `norm.rvs(5)` generates 5 variates:

> \>\>\> norm.rvs(5) 5.471435163732493 \# random

Here, `5` with no keyword is being interpreted as the first possible keyword argument, `loc`, which is the first of a pair of keyword arguments taken by all continuous distributions. This brings us to the topic of the next subsection.

## Random number generation

Drawing random numbers relies on generators from <span class="title-ref">numpy.random</span> package. In the examples above, the specific stream of random numbers is not reproducible across runs. To achieve reproducibility, you can explicitly *seed* a random number generator. In NumPy, a generator is an instance of <span class="title-ref">numpy.random.Generator</span>. Here is the canonical way to create a generator:

> \>\>\> from numpy.random import default\_rng \>\>\> rng = default\_rng()

And fixing the seed can be done like this:

> \>\>\> \# do NOT copy this value \>\>\> rng = default\_rng(301439351238479871608357552876690613766)

<div class="warning">

<div class="title">

Warning

</div>

Do not use this number or common values such as 0. Using just a small set of seeds to instantiate larger state spaces means that there are some initial states that are impossible to reach. This creates some biases if everyone uses such values. A good way to get a seed is to use a \`numpy.random.SeedSequence\`:

\>\>\> from numpy.random import SeedSequence \>\>\> print(SeedSequence().entropy) 301439351238479871608357552876690613766 \# random

</div>

The <span class="title-ref">random\_state</span> parameter in distributions accepts an instance of <span class="title-ref">numpy.random.Generator</span> class, or an integer, which is then used to seed an internal `Generator` object:

> \>\>\> norm.rvs(size=5, random\_state=rng) array(\[ 0.47143516, -1.19097569, 1.43270697, -0.3126519 , -0.72058873\]) \# random

For further info, see [NumPy's documentation](https://numpy.org/doc/stable/reference/random/index.html).

To learn more about the random number samplers implemented in SciPy, see \[non-uniform random number sampling tutorial \<non-uniform-random-number-sampling\>\](\#non-uniform-random-number-sampling-tutorial \<non-uniform-random-number-sampling\>) and \[quasi monte carlo tutorial \<quasi-monte-carlo\>\](\#quasi-monte-carlo-tutorial \<quasi-monte-carlo\>)

## Shifting and scaling

All continuous distributions take `loc` and `scale` as keyword parameters to adjust the location and scale of the distribution, e.g., for the standard normal distribution, the location is the mean and the scale is the standard deviation.

> \>\>\> norm.stats(loc=3, scale=4, moments="mv") (array(3.0), array(16.0))

In many cases, the standardized distribution for a random variable `X` is obtained through the transformation `(X - loc) / scale`. The default values are `loc = 0` and `scale = 1`.

Smart use of `loc` and `scale` can help modify the standard distributions in many ways. To illustrate the scaling further, the `cdf` of an exponentially distributed RV with mean \(1/\lambda\) is given by

\[F(x) = 1 - \exp(-\lambda x)\]

By applying the scaling rule above, it can be seen that by taking `scale  = 1./lambda` we get the proper scale.

> \>\>\> from scipy.stats import expon \>\>\> expon.mean(scale=3.) 3.0

<div class="note">

<div class="title">

Note

</div>

Distributions that take shape parameters may require more than simple application of `loc` and/or `scale` to achieve the desired form. For example, the distribution of 2-D vector lengths given a constant vector of length \(R\) perturbed by independent N(0, \(\sigma^2\)) deviations in each component is rice(\(R/\sigma\), scale= \(\sigma\)). The first argument is a shape parameter that needs to be scaled along with \(x\).

</div>

The uniform distribution is also interesting:

> \>\>\> from scipy.stats import uniform \>\>\> uniform.cdf(\[0, 1, 2, 3, 4, 5\], loc=1, scale=4) array(\[ 0. , 0. , 0.25, 0.5 , 0.75, 1. \])

Finally, recall from the previous paragraph that we are left with the problem of the meaning of `norm.rvs(5)`. As it turns out, calling a distribution like this, the first argument, i.e., the 5, gets passed to set the `loc` parameter. Let's see:

> \>\>\> np.mean(norm.rvs(5, size=500)) 5.0098355106969992 \# random

Thus, to explain the output of the example of the last section: `norm.rvs(5)` generates a single normally distributed random variate with mean `loc=5`, because of the default `size=1`.

We recommend that you set `loc` and `scale` parameters explicitly, by passing the values as keywords rather than as arguments. Repetition can be minimized when calling more than one method of a given RV by using the technique of [Freezing a Distribution](#freezing-a-distribution), as explained below.

## Shape parameters

While a general continuous random variable can be shifted and scaled with the `loc` and `scale` parameters, some distributions require additional shape parameters. For instance, the gamma distribution with density

\[\gamma(x, a) = \frac{\lambda (\lambda x)^{a-1}}{\Gamma(a)} e^{-\lambda x}\;,\]

requires the shape parameter \(a\). Observe that setting \(\lambda\) can be obtained by setting the `scale` keyword to \(1/\lambda\).

Let's check the number and name of the shape parameters of the gamma distribution. (We know from the above that this should be 1.)

> \>\>\> from scipy.stats import gamma \>\>\> gamma.numargs 1 \>\>\> gamma.shapes 'a'

Now, we set the value of the shape variable to 1 to obtain the exponential distribution, so that we compare easily whether we get the results we expect.

> \>\>\> gamma(1, scale=2.).stats(moments="mv") (array(2.0), array(4.0))

Notice that we can also specify shape parameters as keywords:

> \>\>\> gamma(a=1, scale=2.).stats(moments="mv") (array(2.0), array(4.0))

## Freezing a distribution

Passing the `loc` and `scale` keywords time and again can become quite bothersome. The concept of <span class="title-ref">freezing</span> a RV is used to solve such problems.

> \>\>\> rv = gamma(1, scale=2.)

By using `rv` we no longer have to include the scale or the shape parameters anymore. Thus, distributions can be used in one of two ways, either by passing all distribution parameters to each method call (such as we did earlier) or by freezing the parameters for the instance of the distribution. Let us check this:

> \>\>\> rv.mean(), rv.std() (2.0, 2.0)

This is, indeed, what we should get.

## Broadcasting

The basic methods `pdf`, and so on, satisfy the usual numpy broadcasting rules. For example, we can calculate the critical values for the upper tail of the t distribution for different probabilities and degrees of freedom.

> \>\>\> stats.t.isf(\[0.1, 0.05, 0.01\], \[\[10\], \[11\]\]) array(\[\[ 1.37218364, 1.81246112, 2.76376946\], \[ 1.36343032, 1.79588482, 2.71807918\]\])

Here, the first row contains the critical values for 10 degrees of freedom and the second row for 11 degrees of freedom (d.o.f.). Thus, the broadcasting rules give the same result of calling `isf` twice:

> \>\>\> stats.t.isf(\[0.1, 0.05, 0.01\], 10) array(\[ 1.37218364, 1.81246112, 2.76376946\]) \>\>\> stats.t.isf(\[0.1, 0.05, 0.01\], 11) array(\[ 1.36343032, 1.79588482, 2.71807918\])

If the array with probabilities, i.e., `[0.1, 0.05, 0.01]` and the array of degrees of freedom i.e., `[10, 11, 12]`, have the same array shape, then element-wise matching is used. As an example, we can obtain the 10% tail for 10 d.o.f., the 5% tail for 11 d.o.f. and the 1% tail for 12 d.o.f. by calling

> \>\>\> stats.t.isf(\[0.1, 0.05, 0.01\], \[10, 11, 12\]) array(\[ 1.37218364, 1.79588482, 2.68099799\])

## Specific points for discrete distributions

Discrete distributions have mostly the same basic methods as the continuous distributions. However `pdf` is replaced by the probability mass function `pmf`, no estimation methods, such as fit, are available, and `scale` is not a valid keyword parameter. The location parameter, keyword `loc`, can still be used to shift the distribution.

The computation of the cdf requires some extra attention. In the case of continuous distribution, the cumulative distribution function is, in most standard cases, strictly monotonic increasing in the bounds (a,b) and has, therefore, a unique inverse. The cdf of a discrete distribution, however, is a step function, hence the inverse cdf, i.e., the percent point function, requires a different definition:

    ppf(q) = min{x : cdf(x) >= q, x integer}

For further info, see the docs \[here\<discrete-ppf\>\](\#here\<discrete-ppf\>).

We can look at the hypergeometric distribution as an example

> \>\>\> from scipy.stats import hypergeom \>\>\> \[M, n, N\] = \[20, 7, 12\]

If we use the cdf at some integer points and then evaluate the ppf at those cdf values, we get the initial integers back, for example

> \>\>\> x = np.arange(4) \* 2 \>\>\> x array(\[0, 2, 4, 6\]) \>\>\> prb = hypergeom.cdf(x, M, n, N) \>\>\> prb array(\[ 1.03199174e-04, 5.21155831e-02, 6.08359133e-01, 9.89783282e-01\]) \>\>\> hypergeom.ppf(prb, M, n, N) array(\[ 0., 2., 4., 6.\])

If we use values that are not at the kinks of the cdf step function, we get the next higher integer back:

> \>\>\> hypergeom.ppf(prb + 1e-8, M, n, N) array(\[ 1., 3., 5., 7.\]) \>\>\> hypergeom.ppf(prb - 1e-8, M, n, N) array(\[ 0., 2., 4., 6.\])

## Fitting distributions

The main additional methods of the not frozen distribution are related to the estimation of distribution parameters:

  -   - fit: maximum likelihood estimation of distribution parameters, including location  
        and scale

  - fit\_loc\_scale: estimation of location and scale when shape parameters are given

  - nnlf: negative log likelihood function

  - expect: calculate the expectation of a function against the pdf or pmf

## Performance issues and cautionary remarks

The performance of the individual methods, in terms of speed, varies widely by distribution and method. The results of a method are obtained in one of two ways: either by explicit calculation, or by a generic algorithm that is independent of the specific distribution.

Explicit calculation, on the one hand, requires that the method is directly specified for the given distribution, either through analytic formulas or through special functions in `scipy.special` or `numpy.random` for `rvs`. These are usually relatively fast calculations.

The generic methods, on the other hand, are used if the distribution does not specify any explicit calculation. To define a distribution, only one of pdf or cdf is necessary; all other methods can be derived using numeric integration and root finding. However, these indirect methods can be <span class="title-ref">very</span> slow. As an example, `rgh = stats.gausshyper.rvs(0.5, 2, 2, 2, size=100)` creates random variables in a very indirect way and takes about 19 seconds for 100 random variables on my computer, while one million random variables from the standard normal or from the t distribution take just above one second.

## Remaining issues

The distributions in `scipy.stats` have recently been corrected and improved and gained a considerable test suite; however, a few issues remain:

  - The distributions have been tested over some range of parameters; however, in some corner ranges, a few incorrect results may remain.
  - The maximum likelihood estimation in <span class="title-ref">fit</span> does not work with default starting parameters for all distributions and the user needs to supply good starting parameters. Also, for some distribution using a maximum likelihood estimator might inherently not be the best choice.

## Building specific distributions

The next examples shows how to build your own distributions. Further examples show the usage of the distributions and some statistical tests.

### Making a continuous distribution, i.e., subclassing `rv_continuous`

Making continuous distributions is fairly simple.

> \>\>\> from scipy import stats \>\>\> class deterministic\_gen(stats.rv\_continuous): ... def \_cdf(self, x): ... return np.where(x \< 0, 0., 1.) ... def \_stats(self): ... return 0., 0., 0., 0.
> 
> \>\>\> deterministic = deterministic\_gen(name="deterministic") \>\>\> deterministic.cdf(np.arange(-3, 3, 0.5)) array(\[ 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.\])

Interestingly, the `pdf` is now computed automatically:

> \>\>\> deterministic.pdf(np.arange(-3, 3, 0.5)) array(\[ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.83333333e+04, 4.16333634e-12, 4.16333634e-12, 4.16333634e-12, 4.16333634e-12, 4.16333634e-12\])

Be aware of the performance issues mentioned in \[performance\_issues\_label\](\#performance\_issues\_label). The computation of unspecified common methods can become very slow, since only general methods are called, which, by their very nature, cannot use any specific information about the distribution. Thus, as a cautionary example:

> \>\>\> from scipy.integrate import quad \>\>\> quad(deterministic.pdf, -1e-1, 1e-1) (4.163336342344337e-13, 0.0)

But this is not correct: the integral over this pdf should be 1. Let's make the integration interval smaller:

> \>\>\> quad(deterministic.pdf, -1e-3, 1e-3) \# warning removed (1.000076872229173, 0.0010625571718182458)

This looks better. However, the problem originated from the fact that the pdf is not specified in the class definition of the deterministic distribution.

### Subclassing `rv_discrete`

In the following, we use <span class="title-ref">stats.rv\_discrete</span> to generate a discrete distribution that has the probabilities of the truncated normal for the intervals centered around the integers.

**General info**

From the docstring of rv\_discrete, `help(stats.rv_discrete)`,

> "You can construct an arbitrary discrete rv where P{X=xk} = pk by passing to the rv\_discrete initialization method (through the values= keyword) a tuple of sequences (xk, pk) which describes only those values of X (xk) that occur with nonzero probability (pk)."

Next to this, there are some further requirements for this approach to work:

  - The keyword <span class="title-ref">name</span> is required.
  - The support points of the distribution xk have to be integers.
  - The number of significant digits (decimals) needs to be specified.

In fact, if the last two requirements are not satisfied, an exception may be raised or the resulting numbers may be incorrect.

**An example**

Let's do the work. First:

> \>\>\> npoints = 20 \# number of integer support points of the distribution minus 1 \>\>\> npointsh = npoints // 2 \>\>\> npointsf = float(npoints) \>\>\> nbound = 4 \# bounds for the truncated normal \>\>\> normbound = (1+1/npointsf) \* nbound \# actual bounds of truncated normal \>\>\> grid = np.arange(-npointsh, npointsh+2, 1) \# integer grid \>\>\> gridlimitsnorm = (grid-0.5) / npointsh \* nbound \# bin limits for the truncnorm \>\>\> gridlimits = grid - 0.5 \# used later in the analysis \>\>\> grid = grid\[:-1\] \>\>\> probs = np.diff(stats.truncnorm.cdf(gridlimitsnorm, -normbound, normbound)) \>\>\> gridint = grid

And, finally, we can subclass `rv_discrete`:

> \>\>\> normdiscrete = stats.rv\_discrete(values=(gridint, ... np.round(probs, decimals=7)), name='normdiscrete')

Now that we have defined the distribution, we have access to all common methods of discrete distributions.

> \>\>\> print('mean = %6.4f, variance = %6.4f, skew = %6.4f, kurtosis = %6.4f' % ... normdiscrete.stats(moments='mvsk')) mean = -0.0000, variance = 6.3302, skew = 0.0000, kurtosis = -0.0076
> 
> \>\>\> nd\_std = np.sqrt(normdiscrete.stats(moments='v'))

**Testing the implementation**

Let's generate a random sample and compare observed frequencies with the probabilities.

> \>\>\> n\_sample = 500 \>\>\> rvs = normdiscrete.rvs(size=n\_sample) \>\>\> f, l = np.histogram(rvs, bins=gridlimits) \>\>\> sfreq = np.vstack(\[gridint, f, probs\*n\_sample\]).T \>\>\> print(sfreq) \[\[-1.00000000e+01 0.00000000e+00 2.95019349e-02\] \# random \[-9.00000000e+00 0.00000000e+00 1.32294142e-01\] \[-8.00000000e+00 0.00000000e+00 5.06497902e-01\] \[-7.00000000e+00 2.00000000e+00 1.65568919e+00\] \[-6.00000000e+00 1.00000000e+00 4.62125309e+00\] \[-5.00000000e+00 9.00000000e+00 1.10137298e+01\] \[-4.00000000e+00 2.60000000e+01 2.24137683e+01\] \[-3.00000000e+00 3.70000000e+01 3.89503370e+01\] \[-2.00000000e+00 5.10000000e+01 5.78004747e+01\] \[-1.00000000e+00 7.10000000e+01 7.32455414e+01\] \[ 0.00000000e+00 7.40000000e+01 7.92618251e+01\] \[ 1.00000000e+00 8.90000000e+01 7.32455414e+01\] \[ 2.00000000e+00 5.50000000e+01 5.78004747e+01\] \[ 3.00000000e+00 5.00000000e+01 3.89503370e+01\] \[ 4.00000000e+00 1.70000000e+01 2.24137683e+01\] \[ 5.00000000e+00 1.10000000e+01 1.10137298e+01\] \[ 6.00000000e+00 4.00000000e+00 4.62125309e+00\] \[ 7.00000000e+00 3.00000000e+00 1.65568919e+00\] \[ 8.00000000e+00 0.00000000e+00 5.06497902e-01\] \[ 9.00000000e+00 0.00000000e+00 1.32294142e-01\] \[ 1.00000000e+01 0.00000000e+00 2.95019349e-02\]\]

<div class="plot" data-align="center" alt="&quot;An X-Y histogram plot showing the distribution of random variates. A blue trace shows a normal bell curve. A blue bar chart perfectly approximates the curve showing the true distribution. A red bar chart representing the sample is well described by the blue trace but not exact.&quot;" data-include-source="0">

tutorial/examples/normdiscr\_plot1.py

</div>

<div class="plot" data-align="center" alt="&quot;An X-Y histogram plot showing the cumulative distribution of random variates. A blue trace shows a CDF for a typical normal distribution. A blue bar chart perfectly approximates the curve showing the true distribution. A red bar chart representing the sample is well described by the blue trace but not exact.&quot;" data-include-source="0">

tutorial/examples/normdiscr\_plot2.py

</div>

Next, we can use a chi-squared test, <span class="title-ref">scipy.stats.chisquare</span>, to test the null hypothesis that the sample is distributed according to our norm-discrete distribution.

The test requires that there are a minimum number of observations in each bin. We combine the tail bins into larger bins so that they contain enough observations.

> \>\>\> f2 = np.hstack(\[f\[:5\].sum(), f\[5:-5\], f\[-5:\].sum()\]) \>\>\> p2 = np.hstack(\[probs\[:5\].sum(), probs\[5:-5\], probs\[-5:\].sum()\]) \>\>\> ch2, pval = stats.chisquare(f2, p2\*n\_sample)
> 
> \>\>\> print('chisquare for normdiscrete: chi2 = %6.3f pvalue = %6.4f' % (ch2, pval)) chisquare for normdiscrete: chi2 = 12.466 pvalue = 0.4090 \# random

Conceptually, the test statistic `chi2` is sensitive to deviations between the frequencies of observations and their expected frequencies under the null hypothesis. The p-value is the probability of drawing samples from the hypothesized distribution that would produce a statistic value more extreme than the one we observed. Our statistic value is not very high; in fact, there is a 40.9% chance that the statistic would be higher than 12.466 if we were to draw a sample of the same size from the discrete distribution defined by `p2`. Therefore, the test provides little evidence against the null hypothesis that the sample was drawn from our norm-discrete distribution.

---

quasi_monte_carlo.md

---

# Quasi-Monte Carlo

Before talking about Quasi-Monte Carlo (QMC), a quick introduction about Monte Carlo (MC). MC methods, or MC experiments, are a broad class of computational algorithms that rely on repeated random sampling to obtain numerical results. The underlying concept is to use randomness to solve problems that might be deterministic in principle. They are often used in physical and mathematical problems and are most useful when it is difficult or impossible to use other approaches. MC methods are mainly used in three problem classes: optimization, numerical integration, and generating draws from a probability distribution.

Generating random numbers with specific properties is a more complex problem than it sounds. Simple MC methods are designed to sample points to be independent and identically distributed (IID). But generating multiple sets of random points can produce radically different results.

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/qmc\_plot\_mc.py

</div>

In both cases in the plot above, points are generated randomly without any knowledge about previously drawn points. It is clear that some regions of the space are left unexplored - which can cause problems in simulations as a particular set of points might trigger a totally different behaviour.

A great benefit of MC is that it has known convergence properties. Let's look at the mean of the squared sum in 5 dimensions:

\[f(\mathbf{x}) = \left( \sum_{j=1}^{5}x_j \right)^2,\]

with \(x_j \sim \mathcal{U}(0,1)\). It has a known mean value, \(\mu = 5/3+5(5-1)/4\). Using MC sampling, we can compute that mean numerically, and the approximation error follows a theoretical rate of \(O(n^{-1/2})\).

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/qmc\_plot\_conv\_mc.py

</div>

Although the convergence is ensured, practitioners tend to want to have an exploration process which is more deterministic. With normal MC, a seed can be used to have a repeatable process. But fixing the seed would break the convergence property: a given seed could work for a given class of problem and break for another one.

What is commonly done to walk through the space in a deterministic manner, is to use a regular grid spanning all parameter dimensions, also called a saturated design. Let’s consider the unit-hypercube, with all bounds ranging from 0 to 1. Now, having a distance of 0.1 between points, the number of points required to fill the unit interval would be 10. In a 2-dimensional hypercube the same spacing would require 100, and in 3 dimensions 1,000 points. As the number of dimensions grows, the number of experiments which is required to fill the space rises exponentially as the dimensionality of the space increases. This exponential growth is called "the curse of dimensionality".

> \>\>\> import numpy as np \>\>\> disc = 10 \>\>\> x1 = np.linspace(0, 1, disc) \>\>\> x2 = np.linspace(0, 1, disc) \>\>\> x3 = np.linspace(0, 1, disc) \>\>\> x1, x2, x3 = np.meshgrid(x1, x2, x3)

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/qmc\_plot\_curse.py

</div>

To mitigate this issue, QMC methods have been designed. They are deterministic, have a good coverage of the space and some of them can be continued and retain good properties. The main difference with MC methods is that the points are not IID but they know about previous points. Hence, some methods are also referred to as sequences.

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/qmc\_plot\_mc\_qmc.py

</div>

This figure presents 2 sets of 256 points. The design of the left is a plain MC whereas the design of the right is a QMC design using the *Sobol'* method. We clearly see that the QMC version is more uniform. The points sample better near the boundaries and there are less clusters or gaps.

One way to assess the uniformity is to use a measure called the discrepancy. Here the discrepancy of *Sobol'* points is better than crude MC.

Coming back to the computation of the mean, QMC methods also have better rates of convergence for the error. They can achieve \(O(n^{-1})\) for this function, and even better rates on very smooth functions. This figure shows that the *Sobol'* method has a rate of \(O(n^{-1})\):

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/qmc\_plot\_conv\_mc\_sobol.py

</div>

We refer to the documentation of `scipy.stats.qmc` for more mathematical details.

## Calculate the discrepancy

Let's consider two sets of points. From the figure below, it is clear that the design on the left covers more of the space than the design on the right. This can be quantified using a <span class="title-ref">scipy.stats.qmc.discrepancy</span> measure. The lower the discrepancy, the more uniform a sample is.

> \>\>\> import numpy as np \>\>\> from scipy.stats import qmc \>\>\> space\_1 = np.array(\[\[1, 3\], \[2, 6\], \[3, 2\], \[4, 5\], \[5, 1\], \[6, 4\]\]) \>\>\> space\_2 = np.array(\[\[1, 5\], \[2, 4\], \[3, 3\], \[4, 2\], \[5, 1\], \[6, 6\]\]) \>\>\> l\_bounds = \[0.5, 0.5\] \>\>\> u\_bounds = \[6.5, 6.5\] \>\>\> space\_1 = qmc.scale(space\_1, l\_bounds, u\_bounds, reverse=True) \>\>\> space\_2 = qmc.scale(space\_2, l\_bounds, u\_bounds, reverse=True) \>\>\> qmc.discrepancy(space\_1) 0.008142039609053464 \>\>\> qmc.discrepancy(space\_2) 0.010456854423869011

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/qmc\_plot\_discrepancy.py

</div>

## Using a QMC engine

Several QMC samplers/engines are implemented. Here we look at two of the most used QMC methods: <span class="title-ref">scipy.stats.qmc.Sobol</span> and <span class="title-ref">scipy.stats.qmc.Halton</span> sequences.

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="1">

tutorial/stats/plots/qmc\_plot\_sobol\_halton.py

</div>

<div class="warning">

<div class="title">

Warning

</div>

QMC methods require particular care and the user must read the documentation to avoid common pitfalls. *Sobol'* for instance requires a number of points following a power of 2. Also, thinning, burning or other point selection can break the properties of the sequence and result in a set of points which would not be better than MC.

</div>

QMC engines are state-aware. Meaning that you can continue the sequence, skip some points, or reset it. Let's take 5 points from <span class="title-ref">scipy.stats.qmc.Halton</span>. And then ask for a second set of 5 points:

> \>\>\> from scipy.stats import qmc \>\>\> engine = qmc.Halton(d=2) \>\>\> engine.random(5) array(\[\[0.22166437, 0.07980522\], \# random \[0.72166437, 0.93165708\], \[0.47166437, 0.41313856\], \[0.97166437, 0.19091633\], \[0.01853937, 0.74647189\]\]) \>\>\> engine.random(5) array(\[\[0.51853937, 0.52424967\], \# random \[0.26853937, 0.30202745\], \[0.76853937, 0.857583 \], \[0.14353937, 0.63536078\], \[0.64353937, 0.01807683\]\])

Now we reset the sequence. Asking for 5 points leads to the same first 5 points:

> \>\>\> engine.reset() \>\>\> engine.random(5) array(\[\[0.22166437, 0.07980522\], \# random \[0.72166437, 0.93165708\], \[0.47166437, 0.41313856\], \[0.97166437, 0.19091633\], \[0.01853937, 0.74647189\]\])

And here we advance the sequence to get the same second set of 5 points:

> \>\>\> engine.reset() \>\>\> engine.fast\_forward(5) \>\>\> engine.random(5) array(\[\[0.51853937, 0.52424967\], \# random \[0.26853937, 0.30202745\], \[0.76853937, 0.857583 \], \[0.14353937, 0.63536078\], \[0.64353937, 0.01807683\]\])

<div class="note">

<div class="title">

Note

</div>

By default, both <span class="title-ref">scipy.stats.qmc.Sobol</span> and <span class="title-ref">scipy.stats.qmc.Halton</span> are scrambled. The convergence properties are better, and it prevents the appearance of fringes or noticeable patterns of points in high dimensions. There should be no practical reason not to use the scrambled version.

</div>

## Making a QMC engine, i.e., subclassing `QMCEngine`

To make your own <span class="title-ref">scipy.stats.qmc.QMCEngine</span>, a few methods have to be defined. Following is an example wrapping <span class="title-ref">numpy.random.Generator</span>.

> \>\>\> import numpy as np \>\>\> from scipy.stats import qmc \>\>\> class RandomEngine(qmc.QMCEngine): ... def \_\_init\_\_(self, d, seed=None): ... super().\_\_init\_\_(d=d, seed=seed) ... self.rng = np.random.default\_rng(self.rng\_seed) ... ... ... def \_random(self, n=1, \*, workers=1): ... return self.rng.random((n, self.d)) ... ... ... def reset(self): ... self.rng = np.random.default\_rng(self.rng\_seed) ... self.num\_generated = 0 ... return self ... ... ... def fast\_forward(self, n): ... self.random(n) ... return self

Then we use it as any other QMC engine:

> \>\>\> engine = RandomEngine(2) \>\>\> engine.random(5) array(\[\[0.22733602, 0.31675834\], \# random \[0.79736546, 0.67625467\], \[0.39110955, 0.33281393\], \[0.59830875, 0.18673419\], \[0.67275604, 0.94180287\]\]) \>\>\> engine.reset() \>\>\> engine.random(5) array(\[\[0.22733602, 0.31675834\], \# random \[0.79736546, 0.67625467\], \[0.39110955, 0.33281393\], \[0.59830875, 0.18673419\], \[0.67275604, 0.94180287\]\])

## Guidelines on using QMC

  - QMC has rules\! Be sure to read the documentation or you might have no benefit over MC.
  - Use <span class="title-ref">scipy.stats.qmc.Sobol</span> if you need **exactly** \(2^m\) points.
  - <span class="title-ref">scipy.stats.qmc.Halton</span> allows to sample, or skip, an arbitrary number of points. This is at the cost of a slower rate of convergence than *Sobol'*.
  - Never remove the first points of the sequence. It will destroy the properties.
  - Scrambling is always better.
  - If you use LHS based methods, you cannot add points without losing the LHS properties. (There are some methods to do so, but this is not implemented.)

---

resampling.md

---

# Resampling and Monte Carlo Methods

<div class="currentmodule">

scipy.stats.resampling

</div>

## Introduction

Resampling and Monte Carlo methods are statistical techniques that replace mathematical analysis with lots of computation.

For example, suppose you and your brother Kyle find yourselves hitchhiking down a long and lonesome road. All of a sudden, there shines a shiny demon... in the middle... of the road. And he says:

> If you flip a coin with probability of heads \(p=0.5\) exactly \(n=100\) times, what is the probability that the number of heads will be less than or equal to \(x=45\)? Answer correctly, or I'll eat your souls.
> 
> > \>\>\> import math \>\>\> import numpy as np \>\>\> p = 0.5 \# probability of flipping heads each flip \>\>\> n = 100 \# number of coin flips per trial \>\>\> x = 45 \# we want to know the probability that the number of heads per trial will be less than or equal to this

Your brother Kyle is the analytical one. He answers:

> As the number of coin tosses increases, the distribution of the number of heads will tend towards normality with mean \(\mu = p n\) and standard deviation \(\sigma = \sqrt{n p (1 - p)}\), where \(p = 0.5\) is the probability of heads and \(n=100\) is the number of flips. The probability of \(x=45\) heads can be approximated as the cumulative density function \(F(x)\) of this normal distribution. Specifically:

\[F(x; \mu, \sigma) = \frac{1}{2} \left[ 1 + \mbox{erf} \left( \frac{x-\mu}{\sigma \sqrt{2}} \right) \right]\]

    >>> # Kyle's Analytical Approach
    >>> mean = p*n
    >>> std = math.sqrt(n*p*(1-p))
    >>> # CDF of the normal distribution. (Unfortunately, Kyle forgets a continuity correction that would produce a more accurate answer.)
    >>> prob = 0.5 * (1 + math.erf((x - mean) / (std * math.sqrt(2))))
    >>> print(f"The normal approximation estimates the probability as {prob:.3f}")
    The normal approximation estimates the probability as 0.159

You are a little more practical, so you decide to take a computational approach (or more precisely, a Monte Carlo approach): just simulate many sequences of coin tosses, count the number of heads in each toss, and estimate the probability as the fraction of sequences in which the count does not exceed 45.

> \>\>\> \# Your Monte Carlo Approach \>\>\> N = 100000 \# We'll do 100000 trials, each with 100 flips \>\>\> rng = np.random.default\_rng() \# use the "new" Generator interface \>\>\> simulation = rng.random(size=(n, N)) \< p \# False for tails, True for heads \>\>\> counts = np.sum(simulation, axis=0) \# count the number of heads each trial \>\>\> prob = np.sum(counts \<= x) / N \# estimate the probability as the observed proportion of cases in which the count did not exceed 45 \>\>\> print(f"The Monte Carlo approach estimates the probability as {prob:.3f}") The Monte Carlo approach estimates the probability as 0.187

The demon replies:

> You are both incorrect. The probability is given by the binomial distribution. Specifically.

\[\sum_{i=0}^{x} {n \choose i} p^i (1-p)^{n-i}\]

    >>> # The Demon's Exact Probability
    >>> from scipy.stats import binom
    >>> prob = binom.cdf(x, n, p)
    >>> print(f"The correct answer is approximately {prob}")
    The correct answer is approximately 0.18410080866334788

As your soul is being eaten, you take solace in the knowledge that your simple Monte Carlo approach was more accurate than the normal approximation. This is not uncommon: when an exact answer is unknown, often a computational approximation is more accurate than an analytical approximation. Also, it's easy for demons to invent questions for which analytical approximations (let alone exact answers) are unavailable. In such cases, a computational approach is the only way to go.

## Resampling and Monte Carlo methods tutorials

Although it's best to use an exact approach when it's available, learning to use computational statistics techniques can improve the accuracy of <span class="title-ref">scipy.stats</span> features that rely on analytical approximations, dramatically extend your statistical analysis capabilities, and even improve your understanding of statistics. The following tutorials will help you get started with the resampling and Monte Carlo methods in <span class="title-ref">scipy.stats</span>.

1.  [Monte Carlo Hypothesis Tests](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/ResamplingAndMonteCarloMethods/resampling_tutorial_1.ipynb)
2.  [Permutation Tests](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/ResamplingAndMonteCarloMethods/resampling_tutorial_2.ipynb)
    1.  [Independent-Sample Permutation Tests](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/ResamplingAndMonteCarloMethods/resampling_tutorial_2a.ipynb)
    2.  [Paired-Sample Permutation Tests](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/ResamplingAndMonteCarloMethods/resampling_tutorial_2b.ipynb)
    3.  [Correlated-Sample Permutation Tests](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/ResamplingAndMonteCarloMethods/resampling_tutorial_2c.ipynb)
3.  [The Bootstrap](https://nbviewer.org/github/scipy/scipy-cookbook/blob/main/ipython/ResamplingAndMonteCarloMethods/resampling_tutorial_3.ipynb)

---

sampling_dau.md

---

# Discrete Alias Urn (DAU)

<div class="currentmodule">

scipy.stats.sampling

</div>

  - Required: probability vector (PV) or the PMF along with a finite domain

  - Speed:
    
    >   - Set-up: slow (linear with the vector-length)
    >   - Sampling: very fast

DAU samples from distributions with arbitrary but finite probability vectors (PV) of length N. The algorithm is based on an ingenious method by A.J. Walker and requires a table of size (at least) N. It needs one random number and only one comparison for each generated random variate. The setup time for constructing the tables is O(N).

> \>\>\> import numpy as np \>\>\> from scipy.stats.sampling import DiscreteAliasUrn \>\>\> \>\>\> pv = \[0.18, 0.02, 0.8\] \>\>\> urng = np.random.default\_rng() \>\>\> rng = DiscreteAliasUrn(pv, random\_state=urng) \>\>\> rng.rvs() 0 \# may vary

By default, the probability vector is indexed starting at 0. However, this can be changed by passing a `domain` parameter. When `domain` is given in combination with the PV, it has the effect of relocating the distribution from `(0, len(pv))` to `(domain[0]`, `domain[0] + len(pv))`. `domain[1]` is ignored in this case.

> \>\>\> rng = DiscreteAliasUrn(pv, domain=(10, 13), random\_state=urng) \>\>\> rng.rvs() 12 \# may vary

The method also works when no probability vector but a PMF is given. In that case, a bounded (finite) domain must also be given either by passing the `domain` parameter explicitly or by providing a `support` method in the distribution object:

> \>\>\> class Distribution: ... def \_\_init\_\_(self, c): ... self.c = c ... def pmf(self, x): ... return x\*\*self.c ... def support(self): ... return (0, 10) ... \>\>\> dist = Distribution(2) \>\>\> rng = DiscreteAliasUrn(dist, random\_state=urng) \>\>\> rng.rvs() 10 \# may vary

<div class="plot" alt="&quot; &quot;">

\>\>\> import matplotlib.pyplot as plt \>\>\> from scipy.stats.sampling import DiscreteAliasUrn \>\>\> class Distribution: ... def \_\_init\_\_(self, c): ... self.c = c ... def pmf(self, x): ... return x\*\*self.c ... def support(self): ... return (0, 10) ... \>\>\> dist = Distribution(2) \>\>\> urng = np.random.default\_rng() \>\>\> rng = DiscreteAliasUrn(dist, random\_state=urng) \>\>\> rvs = rng.rvs(1000) \>\>\> fig = plt.figure() \>\>\> ax = fig.add\_subplot(111) \>\>\> x = np.arange(1, 11) \>\>\> fx = dist.pmf(x) \>\>\> fx = fx / fx.sum() \>\>\> ax.plot(x, fx, 'bo', label='true distribution') \>\>\> ax.vlines(x, 0, fx, lw=2) \>\>\> ax.hist(rvs, bins=np.[r]()\[x, 11\]-0.5, density=True, alpha=0.5, color='r', ... label='samples') \>\>\> ax.set\_xlabel('x') \>\>\> ax.set\_ylabel('PMF(x)') \>\>\> ax.set\_title('Discrete Alias Urn Samples') \>\>\> plt.legend() \>\>\> plt.show()

</div>

<div class="note">

<div class="title">

Note

</div>

As <span class="title-ref">\~DiscreteAliasUrn</span> expects PMF with signature `def pmf(self, x: float) -> float`, it first vectorizes the PMF using `np.vectorize` and then evaluates it over all the points in the domain. But if the PMF is already vectorized, it is much faster to just evaluate it at each point in the domain and pass the obtained PV instead along with the domain. For example, `pmf` methods of SciPy's discrete distributions are vectorized and a PV can be obtained by doing:

\>\>\> from scipy.stats import binom \>\>\> from scipy.stats.sampling import DiscreteAliasUrn \>\>\> dist = binom(10, 0.2) \# distribution object \>\>\> domain = dist.support() \# the domain of your distribution \>\>\> x = np.arange(domain\[0\], domain\[1\] + 1) \>\>\> pv = dist.pmf(x) \>\>\> rng = DiscreteAliasUrn(pv, domain=domain)

Domain is required here to relocate the distribution.

</div>

The performance can be slightly influenced by setting the size of the used table which can be changed by passing a `urn_factor` parameter.

> \>\>\> \# use a table twice the length of PV. \>\>\> urn\_factor = 2 \>\>\> rng = DiscreteAliasUrn(pv, urn\_factor=urn\_factor, random\_state=urng) \>\>\> rng.rvs() 2 \# may vary

<div class="note">

<div class="title">

Note

</div>

It is recommended to keep this parameter under 2.

</div>

Please see\[1\] and\[2\] for more details on this method.

## References

1.  UNU.RAN reference manual, Section 5.8.2, "DAU - (Discrete) Alias-Urn method", <http://statmath.wu.ac.at/software/unuran/doc/unuran.html#DAU>

2.  A.J. Walker (1977). An efficient method for generating discrete random variables with general distributions, ACM Trans. Math. Software 3, pp. 253-256.

---

sampling_dgt.md

---

# Discrete Guide Table (DGT)

<div class="currentmodule">

scipy.stats.sampling

</div>

  - Required: probability vector (PV) or the PMF along with a finite domain

  - Speed:
    
    >   - Set-up: slow (linear with the vector-length)
    >   - Sampling: very fast

DGT samples from arbitrary but finite probability vectors. Random numbers are generated by the inversion method, i.e.

1.  Generate a random number U \~ U(0,1).
2.  Find smallest integer I such that F(I) = P(X\<=I) \>= U.

Step (2) is the crucial step. Using sequential search requires O(E(X)) comparisons, where E(X) is the expectation of the distribution. Indexed search, however, uses a guide table to jump to some I' \<= I near I to find X in constant time. Indeed the expected number of comparisons is reduced to 2, when the guide table has the same size as the probability vector (this is the default). For larger guide tables this number becomes smaller (but is always larger than 1), for smaller tables it becomes larger.

On the other hand the setup time for guide table is O(N), where N denotes the length of the probability vector (for size 1 no preprocessing is required). Moreover, for very large guide tables memory effects might even reduce the speed of the algorithm. So we do not recommend to use guide tables that are more than three times larger than the given probability vector. If only a few random numbers have to be generated, (much) smaller table sizes are better. The size of the guide table relative to the length of the given probability vector can be set by the <span class="title-ref">guide\_factor</span> parameter:

> \>\>\> import numpy as np \>\>\> from scipy.stats.sampling import DiscreteGuideTable \>\>\> \>\>\> pv = \[0.18, 0.02, 0.8\] \>\>\> urng = np.random.default\_rng() \>\>\> rng = DiscreteGuideTable(pv, random\_state=urng) \>\>\> rng.rvs() 2 \# may vary

By default, the probability vector is indexed starting at 0. However, this can be changed by passing a `domain` parameter. When `domain` is given in combination with the PV, it has the effect of relocating the distribution from `(0, len(pv))` to `(domain[0], domain[0] + len(pv))`. `domain[1]` is ignored in this case.

> \>\>\> rng = DiscreteGuideTable(pv, random\_state=urng, domain=(10, 13)) \>\>\> rng.rvs() 10 \# may vary

The method also works when no probability vector but a PMF is given. In that case, a bounded (finite) domain must also be given either by passing the `domain` parameter explicitly or by providing a `support` method in the distribution object:

> \>\>\> class Distribution: ... def \_\_init\_\_(self, c): ... self.c = c ... def pmf(self, x): ... return x \*\* self.c ... def support(self): ... return 0, 10 ... \>\>\> dist = Distribution(2) \>\>\> rng = DiscreteGuideTable(dist, random\_state=urng) \>\>\> rng.rvs() 9 \# may vary

<div class="note">

<div class="title">

Note

</div>

As <span class="title-ref">\~DiscreteGuideTable</span> expects PMF with signature `def pmf(self, x: float) -> float`, it first vectorizes the PMF using `np.vectorize` and then evaluates it over all the points in the domain. But if the PMF is already vectorized, it is much faster to just evaluate it at each point in the domain and pass the obtained PV instead along with the domain. For example, `pmf` methods of SciPy's discrete distributions are vectorized and a PV can be obtained by doing:

\>\>\> from scipy.stats import binom \>\>\> from scipy.stats.sampling import DiscreteGuideTable \>\>\> dist = binom(10, 0.2) \# distribution object \>\>\> domain = dist.support() \# the domain of your distribution \>\>\> x = np.arange(domain\[0\], domain\[1\] + 1) \>\>\> pv = dist.pmf(x) \>\>\> rng = DiscreteGuideTable(pv, domain=domain)

Domain is required here to relocate the distribution

</div>

The size of the guide table relative to the probability vector may be set using the `guide_factor` parameter. Larger guide tables result in faster generation time but require a more expensive setup.

> \>\>\> guide\_factor = 2 \>\>\> rng = DiscreteGuideTable(pv, random\_state=urng, guide\_factor=guide\_factor) \>\>\> rng.rvs() 2 \# may vary

Unfortunately, the PPF is rarely available in closed form or too slow when available. The user only has to provide the probability vector and the PPF (inverse CDF) can be evaluated using `ppf` method. This method calculates the (exact) PPF of the given distribution.

For example to calculate the PPF of a binomial distribution with \(n=4\) and \(p=0.1\): we can set up a guide table as follows:

> \>\>\> import scipy.stats as stats \>\>\> n, p = 4, 0.1 \>\>\> dist = stats.binom(n, p) \>\>\> rng = DiscreteGuideTable(dist, random\_state=42) \>\>\> rng.ppf(0.5) 0.0

Please see\[1\] and\[2\] for more details on this method.

## References

1.  UNU.RAN reference manual, Section 5.8.4, "DGT - (Discrete) Guide Table method (indexed search)" <https://statmath.wu.ac.at/unuran/doc/unuran.html#DGT>

2.  H.C. Chen and Y. Asau (1974). On generating random variates from an empirical distribution, AIIE Trans. 6, pp. 163-166.

---

sampling_hinv.md

---

# Hermite interpolation based INVersion of CDF (HINV)

<div class="currentmodule">

scipy.stats.sampling

</div>

  - Required: CDF
  - Optional: PDF, dPDF
  - Speed:
      - Set-up: (very) slow
      - Sampling: (very) fast

HINV is a variant of numerical inversion, where the inverse CDF is approximated using Hermite interpolation, i.e., the interval \[0,1\] is split into several intervals and in each interval the inverse CDF is approximated by polynomials constructed by means of values of the CDF and PDF at interval boundaries. This makes it possible to improve the accuracy by splitting a particular interval without recomputations in unaffected intervals. Three types of splines are implemented: linear, cubic, and quintic interpolation. For linear interpolation only the CDF is required. Cubic interpolation also requires PDF and quintic interpolation PDF and its derivative.

These splines have to be computed in a setup step. However, it only works for distributions with bounded domain; for distributions with unbounded domain the tails are chopped off such that the probability for the tail regions is small compared to the given u-resolution.

The method is not exact, as it only produces random variates of the approximated distribution. Nevertheless, the maximal numerical error in "u-direction" (i.e. `|U - CDF(X)|` where `X` is the approximate percentile corresponding to the quantile `U` i.e. `X = approx_ppf(U)`) can be set to the required resolution (within machine precision). Notice that very small values of the u-resolution are possible but may increase the cost for the setup step.

<span class="title-ref">NumericalInverseHermite</span> approximates the inverse of a continuous statistical distribution's CDF with a Hermite spline. Order of the hermite spline can be specified by passing the <span class="title-ref">order</span> parameter.

As described in\[1\], it begins by evaluating the distribution's PDF and CDF at a mesh of quantiles `x` within the distribution's support. It uses the results to fit a Hermite spline `H` such that `H(p) == x`, where `p` is the array of percentiles corresponding with the quantiles `x`. Therefore, the spline approximates the inverse of the distribution's CDF to machine precision at the percentiles `p`, but typically, the spline will not be as accurate at the midpoints between the percentile points:

    p_mid = (p[:-1] + p[1:])/2

so the mesh of quantiles is refined as needed to reduce the maximum "u-error":

    u_error = np.max(np.abs(dist.cdf(H(p_mid)) - p_mid))

below the specified tolerance <span class="title-ref">u\_resolution</span>. Refinement stops when the required tolerance is achieved or when the number of mesh intervals after the next refinement could exceed the maximum allowed number of intervals (100000).

> \>\>\> import numpy as np \>\>\> from scipy.stats.sampling import NumericalInverseHermite \>\>\> from scipy.stats import norm, genexpon \>\>\> from scipy.special import ndtr

To create a generator to sample from the standard normal distribution, do:

> \>\>\> class StandardNormal: ... def pdf(self, x): ... return 1/np.sqrt(2\*np.pi) \* np.exp(-x\*\*2 / 2) ... def cdf(self, x): ... return ndtr(x) ... \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> rng = NumericalInverseHermite(dist, random\_state=urng)

The <span class="title-ref">NumericalInverseHermite</span> has a method that approximates the PPF of the distribution.

> \>\>\> rng = NumericalInverseHermite(dist) \>\>\> p = np.linspace(0.01, 0.99, 99) \# percentiles from 1% to 99% \>\>\> np.allclose(rng.ppf(p), norm.ppf(p)) True

Depending on the implementation of the distribution's random sampling method, the random variates generated may be nearly identical, given the same random state.

> \>\>\> dist = genexpon(9, 16, 3) \>\>\> rng = NumericalInverseHermite(dist) \>\>\> \# <span class="title-ref">seed</span> ensures identical random streams are used by each <span class="title-ref">rvs</span> method \>\>\> seed = 500072020 \>\>\> rvs1 = dist.rvs(size=100, random\_state=np.random.default\_rng(seed)) \>\>\> rvs2 = rng.rvs(size=100, random\_state=np.random.default\_rng(seed)) \>\>\> np.allclose(rvs1, rvs2) True

To check that the random variates closely follow the given distribution, we can look at its histogram:

> \>\>\> import matplotlib.pyplot as plt \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> rng = NumericalInverseHermite(dist, random\_state=urng) \>\>\> rvs = rng.rvs(10000) \>\>\> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000) \>\>\> fx = norm.pdf(x) \>\>\> plt.plot(x, fx, 'r-', lw=2, label='true distribution') \>\>\> plt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates') \>\>\> plt.xlabel('x') \>\>\> plt.ylabel('PDF(x)') \>\>\> plt.title('Numerical Inverse Hermite Samples') \>\>\> plt.legend() \>\>\> plt.show()

<div class="plot" data-align="center" alt="&quot; &quot;" data-include-source="0">

tutorial/stats/plots/hinv\_plot.py

</div>

Given the derivative of the PDF w.r.t the variate (i.e. `x`), we can use quintic Hermite interpolation to approximate the PPF by passing the <span class="title-ref">order</span> parameter:

> \>\>\> class StandardNormal: ... def pdf(self, x): ... return 1/np.sqrt(2\*np.pi) \* np.exp(-x\**2 / 2) ... def dpdf(self, x): ... return -1/np.sqrt(2*np.pi) \* x \* np.exp(-x\*\*2 / 2) ... def cdf(self, x): ... return ndtr(x) ... \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> rng = NumericalInverseHermite(dist, order=5, random\_state=urng)

Higher orders result in a fewer number of intervals:

> \>\>\> rng3 = NumericalInverseHermite(dist, order=3) \>\>\> rng5 = NumericalInverseHermite(dist, order=5) \>\>\> rng3.intervals, rng5.intervals (3000, 522)

The u-error can be estimated by calling the <span class="title-ref">u\_error</span> method. It runs a small Monte-Carlo simulation to estimate the u-error. By default, 100,000 samples are used. This can be changed by passing the <span class="title-ref">sample\_size</span> argument:

> \>\>\> rng1 = NumericalInverseHermite(dist, u\_resolution=1e-10) \>\>\> rng1.u\_error(sample\_size=1000000) \# uses one million samples UError(max\_error=9.53167544892608e-11, mean\_absolute\_error=2.2450136432146864e-11)

This returns a namedtuple which contains the maximum u-error and the mean absolute u-error.

The u-error can be reduced by decreasing the u-resolution (maximum allowed u-error):

> \>\>\> rng2 = NumericalInverseHermite(dist, u\_resolution=1e-13) \>\>\> rng2.u\_error(sample\_size=1000000) UError(max\_error=9.32027892364129e-14, mean\_absolute\_error=1.5194172675685075e-14)

Note that this comes at the cost of computation time as a result of the increased setup time and number of intervals.

> \>\>\> rng1.intervals 1022 \>\>\> rng2.intervals 5687 \>\>\> from timeit import timeit \>\>\> f = lambda: NumericalInverseHermite(dist, u\_resolution=1e-10) \>\>\> timeit(f, number=1) 0.017409582000254886 \# may vary \>\>\> f = lambda: NumericalInverseHermite(dist, u\_resolution=1e-13) \>\>\> timeit(f, number=1) 0.08671202100003939 \# may vary

See\[2\] and\[3\] for more details on this method.

## References

1.  Hörmann, Wolfgang, and Josef Leydold. "Continuous random variate generation by fast numerical inversion." ACM Transactions on Modeling and Computer Simulation (TOMACS) 13.4 (2003): 347-362.

2.  Hörmann, Wolfgang, and Josef Leydold. "Continuous random variate generation by fast numerical inversion." ACM Transactions on Modeling and Computer Simulation (TOMACS) 13.4 (2003): 347-362.

3.  UNU.RAN reference manual, Section 5.3.5, "HINV - Hermite interpolation based INVersion of CDF", <https://statmath.wu.ac.at/software/unuran/doc/unuran.html#HINV>

---

sampling_pinv.md

---

# Polynomial interpolation based INVersion of CDF (PINV)

<div class="currentmodule">

scipy.stats.sampling

</div>

  - Required: PDF
  - Optional: CDF, mode, center
  - Speed:
      - Set-up: (very) slow
      - Sampling: (very) fast

Polynomial interpolation based INVersion of CDF (PINV) is an inversion method that only requires the density function to sample from a distribution. It is based on Polynomial interpolation of the PPF and Gauss-Lobatto integration of the PDF. It provides control over the interpolation error and integration error. Its primary purpose is to provide very fast sampling which is nearly the same for any given distribution at the cost of moderate to slow setup time. It is the fastest known inversion method for the fixed-parameter case.

The inversion method is the simplest and most flexible to sample nonuniform random variates. For a target distribution with CDF \(F\) and a uniform random variate \(U\) sampled from \(\text{Uniform}(0, 1)\), a random variate X is generated by transforming the uniform random variate \(U\) using the PPF (inverse CDF) of the distribution:

\[X = F^{-1}(U)\]

This method is suitable for stochastic simulations because of its advantages. Some of the most attractive are:

  - It preserves the structural properties of the uniform random number sampler.
  - Transforms a uniform random variate \(U\) one-to-one into non-uniform random variates \(X\).
  - Easy and efficient sampling from truncated distributions.

Unfortunately, the PPF is rarely available in closed form or too slow when available. For many distributions, the CDF is also not easy to obtain. This method addresses both the shortcomings. The user only has to provide the PDF and optionally a point near the mode (called "center") together with the size of the maximal acceptable error. It uses a combination of an adaptive and a simple Gauss-Lobatto quadrature to obtain the CDF and Newton's interpolation to obtain the PPF. The method is not exact, as it only produces random variates of the approximated distribution. Nevertheless, the maximal tolerated approximation error can be set close to the machine precision. The concept of u-error is used to measure and control the error. It is defined as:

\[\epsilon_{u}(u) = | u - F\left(F^{-1}_{a}(u)\right) |\]

where \(u \in (0, 1)\) is a quantile where we want to measure the error and \(F^{-1}_a\) is the approximated PPF of the given distribution.

The maximal u-error is the criterion for approximation errors when calculating the CDF and PPF numerically. The maximal tolerated u-error of an algorithm is called the u-resolution of the algorithm and denoted by \(\epsilon_{u}\):

\[\sup_{u \in (0,1)} | u - F\left(F^{-1}_{a}(u)\right) | \le \epsilon_{u}\]

The main advantage of the u-error is that it can be easily computed if the CDF is available. We refer to\[1\] for a more detailed discussion.

Also, the method only works for bounded distributions. In case of infinite tails, the ends of the tails are cut off such that the area under them is less than or equal to \(0.05\epsilon_{u}\).

There are some restrictions for the given distribution:

  - The support of the distribution (i.e., the region where the PDF is strictly positive) must be connected. In practice this means, that the region where PDF is "not too small" must be connected. Unimodal densities satisfy this condition. If this condition is violated then the domain of the distribution might be truncated.
  - When the PDF is integrated numerically, then the given PDF must be continuous and should be smooth.
  - The PDF must be bounded.
  - The algorithm has problems when the distribution has heavy tails (as then the inverse CDF becomes very steep at 0 or 1) and the requested u-resolution is very small. E.g., the Cauchy distribution is likely to show this problem when the requested u-resolution is less than 1.e-12.

Following four steps are carried out by the algorithm during setup:

  - Computing the end points of the distribution: If a finite support is given, this step is skipped. Otherwise, the ends of the tails are cut off such that the area under them is less than or equal to \(0.05\epsilon_{u}\).
  - The domain is divided into subintervals to compute the CDF and PPF.
  - The CDF is computed using Gauss-Lobatto quadrature such that the integration error is at most \(0.05I_{0}\epsilon_{u}\) where \(I_{0}\) is approximately the total area under the PDF.
  - The PPF is computed using Newton's interpolating formula with maximum interpolation error \(0.9\epsilon_{u}\).

To initialize the generator to sample from a standard normal distribution, do:

> \>\>\> import numpy as np \>\>\> from scipy.stats.sampling import NumericalInversePolynomial \>\>\> class StandardNormal: ... def pdf(self, x): ... return np.exp(-0.5 \* x\*x) ... \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> rng = NumericalInversePolynomial(dist, random\_state=urng)

The generator has been setup and we can start sampling from our distribution:

> \>\>\> rng.rvs((5, 3)) array(\[\[-1.52449963, 1.31933688, 2.05884468\], \[ 0.48883931, 0.15207903, -0.02150773\], \[ 1.11486463, 1.95449597, -0.30724928\], \[ 0.9854643 , 0.29867424, 0.7560304 \], \[-0.61776203, 0.16033378, -1.00933003\]\])

We can look at the histogram of the random variates to check how well they fit our distribution:

<div class="plot" alt="&quot; &quot;">

\>\>\> import matplotlib.pyplot as plt \>\>\> from scipy.stats import norm \>\>\> from scipy.stats.sampling import NumericalInversePolynomial \>\>\> class StandardNormal: ... def pdf(self, x): ... return np.exp(-0.5 \* x\*x) ... \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> rng = NumericalInversePolynomial(dist, random\_state=urng) \>\>\> rvs = rng.rvs(10000) \>\>\> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, num=10000) \>\>\> fx = norm.pdf(x) \>\>\> plt.plot(x, fx, "r-", label="pdf") \>\>\> plt.hist(rvs, bins=50, density=True, alpha=0.8, label="rvs") \>\>\> plt.xlabel("x") \>\>\> plt.ylabel("PDF(x)") \>\>\> plt.title("Samples drawn using PINV method.") \>\>\> plt.legend() \>\>\> plt.show()

</div>

The maximum tolerated error (i.e. u-resolution) can be changed by passing the `u_resolution` keyword during initialization:

> \>\>\> rng = NumericalInversePolynomial(dist, u\_resolution=1e-12, ... random\_state=urng)

This leads to a more accurate approximation of the PPF and the generated RVs follow the exact distribution more closely. Although, note that it comes at the cost of an expensive setup.

The setup time mainly depends on the number of times the PDF is evaluated. It is more costly for PDFs that are difficult to evaluate. Note that we can ignore the normalization constant to speed up the evaluations of the PDF. PDF evaluations increase during setup for small values of `u_resolution`.

> \>\>\> from scipy.stats.sampling import NumericalInversePolynomial \>\>\> class StandardNormal: ... def \_\_init\_\_(self): ... self.callbacks = 0 ... def pdf(self, x): ... self.callbacks += 1 ... return np.exp(-0.5 \* x\*x) ... \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> \# u\_resolution = 10^-8 \>\>\> \# =\> less PDF evaluations required \>\>\> \# =\> faster setup \>\>\> rng = NumericalInversePolynomial(dist, u\_resolution=1e-8, ... random\_state=urng) \>\>\> dist.callbacks 4095 \# may vary \>\>\> dist.callbacks = 0 \# reset the number of callbacks \>\>\> \# u\_resolution = 10^-10 (default) \>\>\> \# =\> more PDF evaluations required \>\>\> \# =\> slow setup \>\>\> rng = NumericalInversePolynomial(dist, u\_resolution=1e-10, ... random\_state=urng) \>\>\> dist.callbacks 11454 \# may vary \>\>\> dist.callbacks = 0 \# reset the number of callbacks \>\>\> \# u\_resolution = 10^-12 \>\>\> \# =\> lots of PDF evaluations required \>\>\> \# =\> very slow setup \>\>\> rng = NumericalInversePolynomial(dist, u\_resolution=1e-12, ... random\_state=urng) 13902 \# may vary

As we can see, the number of PDF evaluations required is very high and a fast PDF is critical to the algorithm. Though, this helps reduce the number of subintervals required to achieve the error goal which saves memory and makes sampling fast. <span class="title-ref">NumericalInverseHermite</span> is a similar inversion method that inverts the CDF based on Hermite interpolation and provides control over the maximum tolerated error via u-resolution. But it makes use of a lot more intervals compared to \`NumericalInversePolynomial\`:

> \>\>\> from scipy.stats.sampling import NumericalInverseHermite \>\>\> \# NumericalInverseHermite accepts a <span class="title-ref">tol</span> parameter to set the \>\>\> \# u-resolution of the generator. \>\>\> rng\_hermite = NumericalInverseHermite(norm(), tol=1e-12) \>\>\> rng\_hermite.intervals 3000 \>\>\> rng\_poly = NumericalInversePolynomial(norm(), u\_resolution=1e-12) \>\>\> rng\_poly.intervals 252

When exact CDF of a distribution is available, one can estimate the u-error achieved by the algorithm by calling the <span class="title-ref">\~NumericalInversePolynomial.u\_error</span> method:

> \>\>\> from scipy.special import ndtr \>\>\> class StandardNormal: ... def pdf(self, x): ... return np.exp(-0.5 \* x\*x) ... def cdf(self, x): ... return ndtr(x) ... \>\>\> dist = StandardNormal() \>\>\> urng = np.random.default\_rng() \>\>\> rng = NumericalInversePolynomial(dist, random\_state=urng) \>\>\> rng.u\_error(sample\_size=100\_000) UError(max\_error=8.785949745515609e-11, mean\_absolute\_error=2.9307548109436816e-11)

<span class="title-ref">\~NumericalInversePolynomial.u\_error</span> runs a monte carlo simulation with a given number of samples to estimate the u-error. In the above example, 100,000 samples are used by the simulation to approximate the u-error. It returns the maximum u-error (`max_error`) and the mean absolute u-error (`mean_absolute_error`) in a `UError` namedtuple. As we can see, `max_error` is below the default `u_resolution` (`1e-10`).

It is also possible to evaluate the PPF of the given distribution once the generator is initialized:

> \>\>\> rng.ppf(0.975) 1.959963985701268 \>\>\> norm.ppf(0.975) 1.959963984540054

We can use this, for example, to check the maximum and mean absolute u-error:

> \>\>\> u = np.linspace(0.001, 0.999, num=1\_000\_000) \>\>\> u\_errors = np.abs(u - dist.cdf(rng.ppf(u))) \>\>\> u\_errors.max() 8.78600525666684e-11 \>\>\> u\_errors.mean() 2.9321444940323206e-11

The approximate PPF method provided by the generator is much faster to evaluate than the exact PPF of the distribution.

During setup, a table of CDF points is stored that can be used to approximate the CDF once the generator has been created:

> \>\>\> rng.cdf(1.959963984540054) 0.9750000000042454 \>\>\> norm.cdf(1.959963984540054) 0.975

We can use this to check if the integration error while computing the CDF exceeds \(0.05I_{0}\epsilon_{u}\). Here \(I_0\) is \(\sqrt{2\pi}\) (the normalization constant for the standard normal distribution):

> \>\>\> x = np.linspace(-10, 10, num=100\_000) \>\>\> x\_error = np.abs(dist.cdf(x) - rng.cdf(x)) \>\>\> x\_error.max() 4.506062190046123e-12 \>\>\> I0 = np.sqrt(2\*np.pi) \>\>\> max\_integration\_error = 0.05 \* I0 \* 1e-10 \>\>\> x\_error.max() \<= max\_integration\_error True

The CDF table computed during setup is used to evaluate the CDF and only some further fine-tuning is required. This reduces the calls to the PDF but as the fine-tuning step uses the simple Gauss-Lobatto quadrature, the PDF is called several times, slowing down the computation.

## References

1.  Derflinger, Gerhard, Wolfgang Hörmann, and Josef Leydold. "Random variate generation by numerical inversion when only the density is known." ACM Transactions on Modeling and Computer Simulation (TOMACS) 20.4 (2010): 1-25.

---

sampling_srou.md

---

# Simple Ratio-of-Uniforms (SROU)

<div class="currentmodule">

scipy.stats.sampling

</div>

  - Required: PDF, area under PDF if different than 1
  - Optional: mode, CDF at mode
  - Speed:
      - Set-up: fast
      - Sampling: slow

SROU is based on the ratio-of-uniforms method that uses universal inequalities for constructing a (universal) bounding rectangle. It works for T-concave distributions with T(x) = -1/sqrt(x).

> \>\>\> import numpy as np \>\>\> from scipy.stats.sampling import SimpleRatioUniforms

Suppose we have the normal distribution:

> \>\>\> class StdNorm: ... def pdf(self, x): ... return np.exp(-0.5 \* x\*\*2)

Notice that the PDF doesn't integrate to 1. We can either pass the exact area under the PDF during initialization of the generator or an upper bound to the exact area under the PDF. Also, it is recommended to pass the mode of the distribution to speed up the setup:

> \>\>\> urng = np.random.default\_rng() \>\>\> dist = StdNorm() \>\>\> rng = SimpleRatioUniforms(dist, mode=0, ... pdf\_area=np.sqrt(2\*np.pi), ... random\_state=urng)

Now, we can use the <span class="title-ref">rvs</span> method to generate samples from the distribution:

> \>\>\> rvs = rng.rvs(10)

If the CDF at mode is available, it can be set to improve the performance of \`rvs\`:

> \>\>\> from scipy.stats import norm \>\>\> rng = SimpleRatioUniforms(dist, mode=0, ... pdf\_area=np.sqrt(2\*np.pi), ... cdf\_at\_mode=norm.cdf(0), ... random\_state=urng) \>\>\> rvs = rng.rvs(1000)

We can check that the samples are from the given distribution by visualizing its histogram:

<div class="plot" alt="&quot; &quot;">

\>\>\> from scipy.stats.sampling import SimpleRatioUniforms \>\>\> from scipy.stats import norm \>\>\> import matplotlib.pyplot as plt \>\>\> class StdNorm: ... def pdf(self, x): ... return np.exp(-0.5 \* x\**2) ... \>\>\> urng = np.random.default\_rng() \>\>\> dist = StdNorm() \>\>\> rng = SimpleRatioUniforms(dist, mode=0, ... pdf\_area=np.sqrt(2*np.pi), ... cdf\_at\_mode=norm.cdf(0), ... random\_state=urng) \>\>\> rvs = rng.rvs(1000) \>\>\> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000) \>\>\> fx = 1/np.sqrt(2\*np.pi) \* dist.pdf(x) \>\>\> fig, ax = plt.subplots() \>\>\> ax.plot(x, fx, 'r-', lw=2, label='true distribution') \>\>\> ax.hist(rvs, bins=10, density=True, alpha=0.8, label='random variates') \>\>\> ax.set\_xlabel('x') \>\>\> ax.set\_ylabel('PDF(x)') \>\>\> ax.set\_title('Simple Ratio-of-Uniforms Samples') \>\>\> ax.legend() \>\>\> plt.show()

</div>

The main advantage of the method is a fast setup. This can be beneficial if one repeatedly needs to generate small to moderate samples of a distribution with different shape parameters. In such a situation, the setup step of <span class="title-ref">sampling.NumericalInverseHermite</span> or <span class="title-ref">sampling.NumericalInversePolynomial</span> will lead to poor performance. As an example, assume we are interested to generate 100 samples for the Gamma distribution with 1000 different shape parameters given by `np.arange(1.5, 5, 1000)`.

> \>\>\> import math \>\>\> class GammaDist: ... def \_\_init\_\_(self, p): ... self.p = p ... def pdf(self, x): ... return x\**(self.p-1)* np.exp(-x) ... \>\>\> urng = np.random.default\_rng() \>\>\> p = np.arange(1.5, 5, 1000) \>\>\> res = np.empty((1000, 100)) \>\>\> for i in range(1000): ... dist = GammaDist(p\[i\]) ... rng = SimpleRatioUniforms(dist, mode=p\[i\]-1, ... pdf\_area=math.gamma(p\[i\]), ... random\_state=urng) ... with np.testing.suppress\_warnings() as sup: ... sup.filter(RuntimeWarning, "invalid value encountered in double\_scalars") ... sup.filter(RuntimeWarning, "overflow encountered in exp") ... res\[i\] = rng.rvs(100)

See\[1\],\[2\], and\[3\] for more details.

## References

1.  UNU.RAN reference manual, Section 5.3.16, "SROU - Simple Ratio-of-Uniforms method", <http://statmath.wu.ac.at/software/unuran/doc/unuran.html#SROU>

2.  Leydold, Josef. "A simple universal generator for continuous and discrete univariate T-concave distributions." ACM Transactions on Mathematical Software (TOMS) 27.1 (2001): 66-82

3.  Leydold, Josef. "Short universal generators via generalized ratio-of-uniforms method." Mathematics of Computation 72.243 (2003): 1453-1471

---

sampling_tdr.md

---

# Transformed Density Rejection (TDR)

<div class="currentmodule">

scipy.stats.sampling

</div>

  - Required: T-concave PDF, dPDF
  - Optional: mode, center
  - Speed:
      - Set-up: slow
      - Sampling: fast

TDR is an acceptance/rejection method that uses the concavity of a transformed density to construct hat function and squeezes automatically. Such PDFs are called T-concave. Currently the following transformations are implemented:

\[\begin{aligned}
c = 0.: T(x) &= \log(x)\\
c = -0.5: T(x) &= \frac{1}{\sqrt{x}} \text{ (Default)}
\end{aligned}\]

In addition to the PDF, it also requires the derivative of the PDF w.r.t `x` (i.e. the variate). These functions must be present as methods of a python object which can then be passed to the generators to instantiate their object. The variant that is implemented uses squeezes proportional to hat function (\[1\]).

An example of using this method is shown below:

> \>\>\> import numpy as np \>\>\> from scipy.stats.sampling import TransformedDensityRejection \>\>\> from scipy.stats import norm \>\>\> \>\>\> class StandardNormal: ... def pdf(self, x): ... \# note that the normalization constant is not required ... return np.exp(-0.5 \* x\*x) ... def dpdf(self, x): ... return -x \* np.exp(-0.5 \* x\*x) ... \>\>\> dist = StandardNormal() \>\>\> \>\>\> urng = np.random.default\_rng() \>\>\> rng = TransformedDensityRejection(dist, random\_state=urng) \>\>\> rng.rvs() -1.526829048388144

In the above example, we have used the TDR method to sample from the standard normal distribution. Note that we can drop the normalization constant while computing the PDF. This usually helps speed up the sampling stage. Also, note that the PDF doesn't need to be vectorized. It should accept and return a scalar.

It is also possible to evaluate the inverse of the CDF of the hat distribution directly using the `ppf_hat` method.

> \>\>\> rng.ppf\_hat(0.5) -0.00018050266342362759 \>\>\> norm.ppf(0.5) 0.0 \>\>\> u = np.linspace(0, 1, num=10) \>\>\> rng.ppf\_hat(u) array(\[ -inf, -1.22227372, -0.7656556 , -0.43135731, -0.14002921, 0.13966423, 0.43096141, 0.76517113, 1.22185606, inf\]) \>\>\> norm.ppf(u) array(\[ -inf, -1.22064035, -0.76470967, -0.4307273 , -0.1397103 , 0.1397103 , 0.4307273 , 0.76470967, 1.22064035, inf\])

Apart from the PPF method, other attributes can be accessed to see how well the generator fits the given distribution. These are:

  - 'squeeze\_hat\_ratio': (area below squeeze) / (area below hat) for the generator. It is a number between 0 and 1. Closer to 1 means that the hat and the squeeze functions tightly envelop the distribution and fewer PDF evaluations are required to generate samples. The expected number of evaluations of the density is bounded by `(1/squeeze_hat_ratio) - 1` per sample. By default, it is kept above 0.99 but that can be changed by passing a `max_squeeze_hat_ratio` parameter.

  - 'hat\_area': area below the hat for the generator.

  - 'squeeze\_area': area below the squeeze for the generator.
    
    > \>\>\> rng.squeeze\_hat\_ratio 0.9947024204884917 \>\>\> rng.hat\_area 2.510253139791547 \>\>\> rng.squeeze\_area 2.4969548741894876 \>\>\> rng.squeeze\_hat\_ratio == rng.squeeze\_area / rng.hat\_area True

The distribution can be truncated by passing a domain parameter:

> \>\>\> urng = np.random.default\_rng() \>\>\> rng = TransformedDensityRejection(dist, domain=\[0, 1\], random\_state=urng) \>\>\> rng.rvs(10) array(\[0.05452512, 0.97251362, 0.49955877, 0.82789729, 0.33048885, 0.55558548, 0.23168323, 0.13423275, 0.73176575, 0.35739799\])

If the domain is not specified, the `support` method of the `dist` object is used to determine the domain:

> \>\>\> class StandardNormal: ... def pdf(self, x): ... return np.exp(-0.5 \* x\*x) ... def dpdf(self, x): ... return -x \* np.exp(-0.5 \* x\*x) ... def support(self): ... return -np.inf, np.inf ... \>\>\> dist = StandardNormal() \>\>\> \>\>\> urng = np.random.default\_rng() \>\>\> rng = TransformedDensityRejection(dist, random\_state=urng) \>\>\> rng.rvs(10) array(\[-1.52682905, 2.06206883, 0.15205036, 1.11587367, -0.30775562, 0.29879802, -0.61858268, -1.01049115, 0.78853694, -0.23060766\])

If the `dist` object does not provide a `support` method, the domain is assumed to be `(-np.inf, np.inf)`.

To increase `squeeze_hat_ratio`, pass `max_squeeze_hat_ratio`:

> \>\>\> dist = StandardNormal() \>\>\> rng = TransformedDensityRejection(dist, max\_squeeze\_hat\_ratio=0.999, ... random\_state=urng) \>\>\> rng.squeeze\_hat\_ratio 0.999364900465214

Let's see how this affects the callbacks to the PDF method of the distribution:

> \>\>\> from copy import copy \>\>\> class StandardNormal: ... def \_\_init\_\_(self): ... self.callbacks = 0 ... def pdf(self, x): ... self.callbacks += 1 ... return np.exp(-0.5 \* x\*x) ... def dpdf(self, x): ... return -x \* np.exp(-0.5 \* x\*x) ... \>\>\> dist1 = StandardNormal() \>\>\> urng1 = np.random.default\_rng() \>\>\> urng2 = copy(urng1) \>\>\> rng1 = TransformedDensityRejection(dist1, random\_state=urng1) \>\>\> dist1.callbacks \# evaluations during setup 139 \>\>\> dist1.callbacks = 0 \# don't consider evaluations during setup \>\>\> rvs = rng1.rvs(100000) \>\>\> dist1.callbacks \# evaluations during sampling 527 \>\>\> dist2 = StandardNormal() \>\>\> \# use the same stream of uniform random numbers \>\>\> rng2 = TransformedDensityRejection(dist2, max\_squeeze\_hat\_ratio=0.999, ... random\_state=urng2) \>\>\> dist2.callbacks \# evaluations during setup 467 \>\>\> dist2.callbacks = 0 \# don't consider evaluations during setup \>\>\> rvs = rng2.rvs(100000) \>\>\> dist2.callbacks \# evaluations during sampling 84 \# may vary

As we can see, far fewer PDF evaluations are required during sampling when we increase the `squeeze_hat_ratio`. The PPF-hat function is also more accurate:

> \>\>\> abs(norm.ppf(0.975) - rng1.ppf\_hat(0.975)) 0.0027054565421578136 \>\>\> abs(norm.ppf(0.975) - rng2.ppf\_hat(0.975)) 0.00047824084476300044

Though, notice that this comes at the cost of increased PDF evaluations during setup.

For densities with modes not close to 0, it is suggested to set either the mode or the center of the distribution by passing `mode` or `center` parameters. The latter is the approximate location of the mode or the mean of the distribution. This location provides some information about the main part of the PDF and is used to avoid numerical problems.

> \>\>\> \# mode = 0 for our distribution \>\>\> \# if exact mode is not available, pass 'center' parameter instead \>\>\> rng = TransformedDensityRejection(dist, mode=0.)

By default, the method uses 30 construction points to construct the hat. This can be changed by passing a `construction_points` parameter which can either be an array of construction points or an integer representing the number of construction points to use.

> \>\>\> rng = TransformedDensityRejection(dist, ... construction\_points=\[-5, 0, 5\])

This method accepts many other set-up parameters. See the documentation for an exclusive list. More information of the parameters and the method can be found in [Section 5.3.16 of the UNU.RAN user manual](http://statmath.wu.ac.at/software/unuran/doc/unuran.html#TDR).

Please see\[2\] and\[3\] for more details on this method.

## References

1.  UNU.RAN reference manual, Section 5.3.16, "TDR - Transformed Density Rejection", <http://statmath.wu.ac.at/software/unuran/doc/unuran.html#TDR>

2.  UNU.RAN reference manual, Section 5.3.16, "TDR - Transformed Density Rejection", <http://statmath.wu.ac.at/software/unuran/doc/unuran.html#TDR>

3.  Hörmann, Wolfgang. "A rejection technique for sampling from T-concave distributions." ACM Transactions on Mathematical Software (TOMS) 21.2 (1995): 182-193

---

stats.md

---

# Statistics (<span class="title-ref">scipy.stats</span>)

<div class="sectionauthor">

Travis E. Oliphant

</div>

<div class="sectionauthor">

Josef Perktold

</div>

<div class="sectionauthor">

Nicky van Foreest

</div>

<div class="sectionauthor">

Sambit Panda

</div>

<div class="sectionauthor">

Pamphile T. Roy (@tupui)

</div>

<div class="currentmodule">

scipy

</div>

In this tutorial, we discuss many, but certainly not all, features of `scipy.stats`. The intention here is to provide a user with a working knowledge of this package. We refer to the \[reference manual \<statsrefmanual\>\](\#reference-manual-\<statsrefmanual\>) for further details.

Note: This documentation is work in progress.

<div class="toctree" data-caption="Contents" data-maxdepth="2">

stats/probability\_distributions stats/sampling stats/kernel\_density\_estimation stats/multiscale\_graphcorr stats/quasi\_monte\_carlo

</div>

<div class="toctree" data-caption="Sample statistics and hypothesis tests" data-maxdepth="2">

stats/analysing\_one\_sample stats/comparing\_two\_samples stats/resampling stats/hypothesis\_tests

</div>

---

CONTRIBUTING.rst

---

SciPy pull request guidelines
=============================

Pull requests are always welcome, and the SciPy community appreciates any help you give. Note that a code of conduct applies to all spaces managed by the SciPy project, including issues and pull requests: <https://docs.scipy.org/doc/scipy/dev/conduct/code_of_conduct.html>

When submitting a pull request, we ask you to check the following:

1.  **Unit tests**, **documentation**, and **code style** are in order. For details, please read <https://docs.scipy.org/doc/scipy/dev/hacking.html>

    It\'s also OK to submit work in progress if you\'re unsure of what this exactly means, in which case you\'ll likely be asked to make some further changes.

2.  The contributed code will be **licensed under SciPy\'s license**, <https://github.com/scipy/scipy/blob/main/LICENSE.txt>. If you did not write the code yourself, you ensure the existing license is compatible and include the license information in the contributed files, or obtain permission from the original author to relicense the contributed code.


---

LICENSE.txt

---

Copyright (c) 2001-2002 Enthought, Inc. 2003-2024, SciPy Developers.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following
   disclaimer in the documentation and/or other materials provided
   with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


---

LICENSES_bundled.txt

---


----

The SciPy repository and source distributions bundle a number of libraries that
are compatibly licensed.  We list these here.


Name: Decorator
Files: scipy/_lib/decorator.py
License: 2-clause BSD
  For details, see the header inside scipy/_lib/decorator.py

Name: fast_matrix_market
Files: scipy/io/_fast_matrix_market/*
License: 2-clause BSD
  For details, see scipy/io/_fast_matrix_market/LICENSE.txt

Name: pystreambuf
Files: scipy/io/_fast_matrix_market/src/pystreambuf.h
License: 3-clause BSD
  For details, see the header inside scipy/io/_fast_matrix_market/src/pystreambuf.h

Name: fast_float
Files: scipy/io/_fast_matrix_market/fast_matrix_market/dependencies/fast_float/*
License: MIT
  For details, see scipy/io/_fast_matrix_market/fast_matrix_market/dependencies/fast_float/LICENSE-MIT

Name: ryu
Files: scipy/io/_fast_matrix_market/fast_matrix_market/dependencies/ryu/*
License: BSL-1.0
  For details, see scipy/io/_fast_matrix_market/fast_matrix_market/dependencies/ryu/LICENSE-BOOST

Name: ID
Files: scipy/linalg/src/id_dist/*
License: 3-clause BSD
  For details, see scipy/linalg/src/id_dist/doc/doc.tex

Name: L-BFGS-B
Files: scipy/optimize/lbfgsb/*
License: BSD license
  For details, see scipy/optimize/lbfgsb/README

Name: LAPJVsp
Files: scipy/sparse/csgraph/_matching.pyx
License: 3-clause BSD
Copyright 1987-, A. Volgenant/Amsterdam School of Economics,
                 University of Amsterdam

  Distributed under 3-clause BSD license with permission from
  University of Amsterdam.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of its contributors
     may be used to endorse or promote products derived from this software
    without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.


Name: SuperLU
Files: scipy/sparse/linalg/dsolve/SuperLU/*
License: 3-clause BSD
  For details, see scipy/sparse/linalg/dsolve/SuperLU/License.txt

Name: ARPACK
Files: scipy/sparse/linalg/eigen/arpack/ARPACK/*
License: 3-clause BSD
  For details, see scipy/sparse/linalg/eigen/arpack/ARPACK/COPYING

Name: Qhull
Files: scipy/spatial/qhull/*
License: Qhull license (BSD-like)
  For details, see scipy/spatial/qhull/COPYING.txt

Name: Cephes
Files: scipy/special/cephes/*
License: 3-clause BSD
  Distributed under 3-clause BSD license with permission from the author,
  see https://lists.debian.org/debian-legal/2004/12/msg00295.html

  Cephes Math Library Release 2.8:  June, 2000
  Copyright 1984, 1995, 2000 by Stephen L. Moshier

  This software is derived from the Cephes Math Library and is
  incorporated herein by permission of the author.

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * Neither the name of the <organization> nor the
        names of its contributors may be used to endorse or promote products
        derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Name: Faddeeva
Files: scipy/special/Faddeeva.*
License: MIT
  Copyright (c) 2012 Massachusetts Institute of Technology

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Name: qd
Files: scipy/special/cephes/dd_*.[ch]
License: modified BSD license ("BSD-LBNL-License.doc")
  This work was supported by the Director, Office of Science, Division
  of Mathematical, Information, and Computational Sciences of the
  U.S. Department of Energy under contract numbers DE-AC03-76SF00098 and
  DE-AC02-05CH11231.

  Copyright (c) 2003-2009, The Regents of the University of California,
  through Lawrence Berkeley National Laboratory (subject to receipt of
  any required approvals from U.S. Dept. of Energy) All rights reserved.

  1. Redistribution and use in source and binary forms, with or
  without modification, are permitted provided that the following
  conditions are met:

  (1) Redistributions of source code must retain the copyright
  notice, this list of conditions and the following disclaimer.

  (2) Redistributions in binary form must reproduce the copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

  (3) Neither the name of the University of California, Lawrence
  Berkeley National Laboratory, U.S. Dept. of Energy nor the names
  of its contributors may be used to endorse or promote products
  derived from this software without specific prior written
  permission.

  2. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  3. You are under no obligation whatsoever to provide any bug fixes,
  patches, or upgrades to the features, functionality or performance of
  the source code ("Enhancements") to anyone; however, if you choose to
  make your Enhancements available either publicly, or directly to
  Lawrence Berkeley National Laboratory, without imposing a separate
  written license agreement for such Enhancements, then you hereby grant
  the following license: a non-exclusive, royalty-free perpetual license
  to install, use, modify, prepare derivative works, incorporate into
  other computer software, distribute, and sublicense such enhancements
  or derivative works thereof, in binary and source code form.

Name: pypocketfft
Files: scipy/fft/_pocketfft/[pocketfft.h, pypocketfft.cxx]
License: 3-Clause BSD
  For details, see scipy/fft/_pocketfft/LICENSE.md

Name: uarray
Files: scipy/_lib/uarray/*
License: 3-Clause BSD
  For details, see scipy/_lib/uarray/LICENSE

Name: ampgo
Files: benchmarks/benchmarks/go_benchmark_functions/*.py
License: MIT
  Functions for testing global optimizers, forked from the AMPGO project,
  https://code.google.com/archive/p/ampgo

Name: pybind11
Files: no source files are included, however pybind11 binary artifacts are
  included with every binary build of SciPy.
License:
  Copyright (c) 2016 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of its contributors
     may be used to endorse or promote products derived from this software
     without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Name: HiGHS
Files: scipy/optimize/_highs/*
License: MIT
  For details, see scipy/optimize/_highs/LICENCE

Name: Boost
Files: scipy/_lib/boost_math/*
License: Boost Software License - Version 1.0
  For details, see scipy/_lib/boost_math/LICENSE.txt

Name: Biasedurn
Files: scipy/stats/biasedurn/*
License 3-Clause BSD
  For details, see scipy/stats/biasedurn/license.txt

Name: UNU.RAN
Files: scipy/_lib/unuran/*
License 3-Clause BSD
  For details, see scipy/_lib/unuran/license.txt

Name: NumPy
Files: scipy/stats/_rcont/[logfactorial.h,logfactorial.c]
License 3-Clause BSD
  For details, see header inside scipy/stats/_rcont/logfactorial.h
  and scipy/stats/_rcont/logfactorial.c

Name: array-api-compat
Files: scipy/_lib/array-api-compat/*
License: MIT
  For details, see scipy/_lib/array-api-compat/LICENCE

Name: Tempita
Files: scipy/_build_utils/tempita/*
License: MIT
  For details, see scipy/_build_utils/tempita/LICENCE.txt

Name: mdspan
Files: scipy/special/special/third_party/kokkos/mdspan.hpp
License: Apache License v2.0 with LLVM Exceptions
  For details, see scipy/special/special/third_party/kokkos/mdspan.hpp

Name: Chebfun
Files: scipy/interpolate/[_aaa.py, tests/test_aaa.py]
License 3-Clause BSD
  For details, see scipy/interpolate/_aaa.py

Name: getLebedevSphere
Files: scipy/integrate/_lebedev.py
License 2-Clause BSD
  For details, see scipy/integrate/_lebedev.py

---

README.rst

---

[![image](https://raw.githubusercontent.com/scipy/scipy/main/doc/source/_static/logo.svg){.align-left width="110px" height="110px"}](https://scipy.org)

[![image](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)

[![image](https://img.shields.io/pypi/dm/scipy.svg?label=Pypi%20downloads)](https://pypi.org/project/scipy/)

[![image](https://img.shields.io/conda/dn/conda-forge/scipy.svg?label=Conda%20downloads)](https://anaconda.org/conda-forge/scipy)

[![image](https://img.shields.io/badge/stackoverflow-Ask%20questions-blue.svg)](https://stackoverflow.com/questions/tagged/scipy)

[![image](https://img.shields.io/badge/DOI-10.1038%2Fs41592--019--0686--2-blue.svg)](https://www.nature.com/articles/s41592-019-0686-2)

SciPy (pronounced \"Sigh Pie\") is an open-source software for mathematics, science, and engineering. It includes modules for statistics, optimization, integration, linear algebra, Fourier transforms, signal and image processing, ODE solvers, and more.

-   **Website:** <https://scipy.org>
-   **Documentation:** <https://docs.scipy.org/doc/scipy/>
-   **Development version of the documentation:** <https://scipy.github.io/devdocs>
-   **SciPy development forum:** <https://discuss.scientific-python.org/c/contributor/scipy>
-   **Stack Overflow:** <https://stackoverflow.com/questions/tagged/scipy>
-   **Source code:** <https://github.com/scipy/scipy>
-   **Contributing:** <https://scipy.github.io/devdocs/dev/index.html>
-   **Bug reports:** <https://github.com/scipy/scipy/issues>
-   **Code of Conduct:** <https://docs.scipy.org/doc/scipy/dev/conduct/code_of_conduct.html>
-   **Report a security vulnerability:** <https://tidelift.com/docs/security>
-   **Citing in your work:** <https://www.scipy.org/citing-scipy/>

SciPy is built to work with NumPy arrays, and provides many user-friendly and efficient numerical routines, such as routines for numerical integration and optimization. Together, they run on all popular operating systems, are quick to install, and are free of charge. NumPy and SciPy are easy to use, but powerful enough to be depended upon by some of the world\'s leading scientists and engineers. If you need to manipulate numbers on a computer and display or publish the results, give SciPy a try!

For the installation instructions, see [our install guide](https://scipy.org/install/).

Call for Contributions
======================

We appreciate and welcome contributions. Small improvements or fixes are always appreciated; issues labeled as \"good first issue\" may be a good starting point. Have a look at [our contributing guide](https://scipy.github.io/devdocs/dev/index.html).

Writing code isn't the only way to contribute to SciPy. You can also:

-   review pull requests
-   triage issues
-   develop tutorials, presentations, and other educational materials
-   maintain and improve [our website](https://github.com/scipy/scipy.org)
-   develop graphic design for our brand assets and promotional materials
-   help with outreach and onboard new contributors
-   write grant proposals and help with other fundraising efforts

If you're unsure where to start or how your skills fit in, reach out! You can ask on the [forum](https://discuss.scientific-python.org/c/contributor/scipy) or here, on GitHub, by leaving a comment on a relevant issue that is already open.

If you are new to contributing to open source, [this guide](https://opensource.guide/how-to-contribute/) helps explain why, what, and how to get involved.
