3424.doc.md

---

Fix typo in `docs/config.rst` from `{}` to `{:}`.

  - by `wooshaun53`

---

3425.doc.md

---

Pass `NIX_LD` and `NIX_LD_LIBRARY_PATH` variables by default in `pass_env` to make generic binaries work under Nix/NixOS.

  - by `albertodonato`

---

changelog.md

---

# Release History

\<\!-- Failed to include \_draft.rst --\>

## v4.23.2 (2024-10-22)

### Misc - 4.23.2

  - `3415`

## v4.23.1 (2024-10-21)

### Improved Documentation - 4.23.1

  - Fix bad example in documentation for dependency groups - by `gaborbernat`. (`3240`)

## v4.23.0 (2024-10-16)

### Features - 4.23.0

  - Add `NETRC` to the list of environment variables always passed through. (`3410`)

### Improved Documentation - 4.23.0

  - replace `[tool.pyproject]` and `[tool.tox.pyproject]` with `[tool.tox]` in config.rst (`3411`)

## v4.22.0 (2024-10-15)

### Features - 4.22.0

  - Implement dependency group support as defined in `735` - see \[dependency\_groups\](\#dependency\_groups) - by `gaborbernat`. (`3408`)

## v4.21.2 (2024-10-03)

### Bugfixes - 4.21.2

  - Include `tox.toml` in sdist archives to fix test failures resulting from its lack.
      - by `mgorny` (`3389`)

## v4.21.1 (2024-10-02)

### Bugfixes - 4.21.1

  - Fix error when using `requires` within a TOML configuration file - by `gaborbernat`. (`3386`)
  - Fix error when using `deps` within a TOML configuration file - by `gaborbernat`. (`3387`)
  - Multiple fixes for the TOML configuration by `gaborbernat`.:
      - Do not fail when there is an empty command within `commands`.
      - Allow references for `set_env` by accepting list of dictionaries for it.
      - Do not try to be smart about reference unrolling, instead allow the user to control it via the `extend` flag, available both for `posargs` and `ref` replacements.
      - The `ref` replacements `raw` key has been renamed to `of`. (`3388`)

## v4.21.0 (2024-09-30)

### Features - 4.21.0

  - Native TOML configuration support - by `gaborbernat`. (`999`)

### Improved Documentation - 4.21.0

  - Update Loader docs - by :user:ziima (`3352`)

## v4.20.0 (2024-09-18)

### Features - 4.20.0

  - Separate the list dependencies functionality to a separate abstract class allowing code reuse in plugins (such as `tox-uv`) - by :gaborbernat\`. (`3347`)

## v4.19.0 (2024-09-17)

### Features - 4.19.0

  - Support `pypy-<major>.<minor>` environment names for PyPy environments - by `gaborbernat`. (`3346`)

## v4.18.1 (2024-09-07)

### Bugfixes - 4.18.1

  - Fix and test the string spec for the `sys.executable` interpreter (introduced in `3325`)
      - by `hroncok` (`3327`)

### Improved Documentation - 4.18.1

  - Changes the `tox_env_teardown` docstring to explain the hook is called after a tox env was teared down. (`3305`)

## v4.18.0 (2024-08-13)

### Features - 4.18.0

  - Suppress spinner in parallel runs in CI - by `ziima`. (`3318`)

### Bugfixes - 4.18.0

  - Boost temporary directories cleanup in tests - by `ziima`. (`3278`)
  - Fix absolute base python paths conflicting - by `gaborbernat`. (`3325`)

## v4.17.1 (2024-08-07)

### Bugfixes - 4.17.1

  - Support for running `-e <major>.<minor>` has been lost, fixing it - by `gaborbernat`. (`2849`)
  - `base_python` now accepts absolute paths to interpreter executable - by `paveldikov`. (`3191`)

## v4.17.0 (2024-08-05)

### Features - 4.17.0

  - Add `graalpy` prefix as a supported base python (`3312`)
  - Add \[on\_platform\](\#on\_platform) core configuration holding the tox platform and do not install package when exec an environment
      - by `gaborbernat`. (`3315`)

### Bugfixes - 4.17.0

  - Add table with default environment variables per OS (`2753`)

## v4.16.0 (2024-07-02)

### Bugfixes - 4.16.0

  -   - Add `windir` to the default list of Windows `pass_env` environment variables. - by `kurtmckee` (`3302`)

### Improved Documentation - 4.16.0

  -   - Fix typo in configuration example and fix broken link to code style guide. - by `srenfo` (`3297`)

## v4.15.1 (2024-06-05)

### Features - 4.15.1

  - Fix `skip_missing_interpreters` option for `package = wheel` (`3269`)

### Bugfixes - 4.15.1

  - Fix section substitution with setenv. (`3262`)
  - Allow `ConfigSet.add_config` to receive parameterized generics for `of_type`. (`3288`)

## v4.15.0 (2024-04-26)

### Features - 4.15.0

  - Add support for multiple appending override options (-x, --override) on command line - by `amitschang`. (`3261`)
  - Add support for inverting exit code success criteria using bang (\!) (`3271`)

### Bugfixes - 4.15.0

  - Fix issue that the leading character `c` was dropped from packages in constraints files - by `jugmac00`. (`3247`)
  - Allow appending to `deps` with `--override testenv.deps+=foo` - by `stefanor`. (`3256`)
  - Fix non-existing branch `rewrite` in the documentation to `main`. (`3257`)
  - Update test typing for build 1.2.0, which has an explicit `Distribution` type - by `stefanor`. (`3260`)
  - Fix broken input parsing for `--discover` flag. - by `mimre25` (`3272`)

### Improved Documentation - 4.15.0

  - Rephrase `--discover` flag's description to avoid confusion between paths and executables. - by `mimre25` (`3274`)

## v4.14.2 (2024-03-22)

### Bugfixes - 4.14.2

  - Add provision arguments to ToxParser to fix crash when provisioning new tox environment without list-dependencies by `seyidaniels` (`3190`)

### Improved Documentation - 4.14.2

  - Removed unused line from the `fresh_subprocess` documentation. (`3241`)

## v4.14.1 (2024-03-06)

### Bugfixes - 4.14.1

  - Fix crash with fresh subprocess, if the build backend is setuptools automatically enable fresh subprocesses for build backend calls - by `gaborbernat`. (`3235`)

## v4.14.0 (2024-03-05)

### Features - 4.14.0

  - Support enabling fresh subprocess for packaging build backends via \[fresh\_subprocess\](\#fresh\_subprocess) - by `gaborbernat`. (`3227`)
  - Allow plugins attaching additional information to `--version` via `tox_append_version_info` method in the plugin module - by `gaborbernat`. (`3234`)

## v4.13.0 (2024-02-16)

### Features - 4.13.0

  - Extract virtual environment packaging code to its own base class not tied to `virtualenv` - by `gaborbernat`. (`3221`)

### Improved Documentation - 4.13.0

  - Documented usage of `pytest` with `tox run-parallel` - by `faph`. (`3187`)
  - Configuration: state in config directive sections their ini file sections - by `0cjs`. (`3194`)
  - Development: summarize important points experienced developers need to know - by `0cjs`. (`3197`)

## v4.12.1 (2024-01-16)

### Bugfixes - 4.12.1

  - Fixed bug where running with --installpkg and multiple envs could not clean up between tests (`3165`)

## v4.12.0 (2024-01-11)

### Features - 4.12.0

  - Always pass `FORCE_COLOR` and `NO_COLOR` to the environment (`3172`)

### Bugfixes - 4.12.0

  - `--parallel-no-spinner` flag now implies `--parallel` (`3158`)

### Improved Documentation - 4.12.0

  - \-Fix `open an issue` link in development.rst (`3179`)

## v4.11.4 (2023-11-27)

### Bugfixes - 4.11.4

  - Fix terminal size of tox subcommands (fixes ipython, ipdb, prompt\_toolkit, ...). (`2999`)
  - Fix `quickstart` command from requiring `root` positional argument (`3084`)
  - Added 'AppData' to the default passed environment variables on Windows. (`3151`)

### Improved Documentation - 4.11.4

  - Fix default value for `install_command` - by `hashar`. (`3126`)
  - Fix default value for `base_python` - by `rpatterson`. (`3156`)

## v4.11.3 (2023-09-08)

### Bugfixes - 4.11.3

  - Handle `FileNotFoundError` when the `base_python` interpreter doesn't exist (`3105`)

### Improved Documentation - 4.11.3

  - Explain how plugins are registered and discovered - by `hashar`. (`3116`)

## v4.11.2 (2023-09-07)

### Bugfixes - 4.11.2

  - Fix bug in `config.rst` by removing stray colons left over from (`3111`) - by `posita`. (`3118`)
  - Provide example to make CLI help more helpful for ``-x`/``--override\`<span class="title-ref"> - by :user:\`posita</span>. (`3119`)

### Improved Documentation - 4.11.2

  - Fix typos discovered by codespell - by `cclauss`. (`3113`)

## v4.11.1 (2023-09-01)

### Bugfixes - 4.11.1

  - Allow passing in multiple overrides using the `;` character and fix `,` being used as splitting values -by `gaborbernat`. (`3112`)

## v4.11.0 (2023-08-29)

### Features - 4.11.0

  - Add support for setting build backend `config_settings` in the configuration file - by `gaborbernat`. (`3090`)

## v4.10.0 (2023-08-21)

### Features - 4.10.0

  - Change accepted environment name rule: must be made up of factors defined in configuration or match regex `(pypy|py|cython|)((\d(\.\d+(\.\d+)?)?)|\d+)?`. If an environment name does not match this fail, and if a close match found suggest that to the user. (`3099`)

### Bugfixes - 4.10.0

  - `--override foo+=bar` appending syntax will now work correctly when `foo` wasn't defined in `tox.ini`. (`3100`)

## v4.9.0 (2023-08-16)

### Features - 4.9.0

  - Disallow command line environments which are not explicitly specified in the config file - by `tjsmart`. (`2858`)

## v4.8.0 (2023-08-12)

### Features - 4.8.0

  - `--override` can now take options in the form of `foo+=bar` which will append `bar` to the end of an existing list/dict, rather than replacing it. (`3087`)

## v4.7.0 (2023-08-08)

### Features - 4.7.0

  - Make `--hashseed` default to `PYTHONHASHSEED`, if defined - by `paravoid`. The main motivation for this is to able to set the hash seed when building the documentation with `tox -e docs`, and thus avoid embedding a random value in the tox documentation for --help. This caused documentation builds to fail to build reproducibly. (`2942`)

### Bugfixes - 4.7.0

  - Update a regular expression in tests to match the exception message in both Python 3.12 and older. (`3065`)

### Improved Documentation - 4.7.0

  - Fix broken links - by `gaborbernat`. (`3072`)

## v4.6.4 (2023-07-06)

### Bugfixes - 4.6.4

  - Fix hang and zombie process on interrupt (CTRL-C). (`3056`)

## v4.6.3 (2023-06-19)

### Bugfixes - 4.6.3

  - Ensure that `get_requires_for_build_wheel` is called before `prepare_metadata_for_build_wheel`, and `get_requires_for_build_editable` is called before `prepare_metadata_for_build_editable` - by `abravalheri`. (`3043`)

### Improved Documentation - 4.6.3

  - Linked environment variable substitutions docs in `set_env` and `pass_env` config docs. (`3039`)

## v4.6.2 (2023-06-16)

### Bugfixes - 4.6.2

  - Avoid cache collision between editable wheel build and normal wheel build -- by `f3flight`. (`3035`)

## v4.6.1 (2023-06-15)

No significant changes.

## v4.6.0 (2023-06-05)

### Features - 4.6.0

  - Added `--list-dependencies` and `--no-list-dependencies` CLI parameters. If unspecified, defaults to listing when in CI, but not otherwise. (`3024`)

### Misc - 4.6.0

  - `3020`

## v4.5.1 (2023-05-25)

### Bugfixes - 4.5.1

  - Fix `tox --devenv venv` invocation without `-e` - by `asottile`. (`2925`)

## v4.5.0 (2023-04-24)

### Features - 4.5.0

  - When run with verbosity=1, the per-step timing summaries are suppressed at the end of the run. Thanks to `nedbat` at the PyCon 2023 sprints. (`2891`)

### Improved Documentation - 4.5.0

  - Add FAQ entry on how to test EOL Python versions by `jugmac00`. (`2989`)

## v4.4.12 (2023-04-13)

### Bugfixes - 4.4.12

  - Avoid race conditions in tests using the `demo_pkg_inline` fixture. (`2985`)

## v4.4.11 (2023-04-05)

### Bugfixes - 4.4.11

  - Fixed an issue where a tox plugin couldn't change the value of `tox_root`. (`2966`)

## v4.4.10 (2023-04-05)

### Bugfixes - 4.4.10

  - Fix issue where `work_dir` was not correctly including `tox_root` for test runs. (`2933`)

## v4.4.9 (2023-04-05)

### Bugfixes - 4.4.9

  - Instead of raising `UnicodeDecodeError` when command output includes non-utf-8 bytes, `tox` will now use `surrogateescape` error handling to convert the unrecognized bytes to escape sequences according to `383` - by `masenf`. (`2969`)

### Improved Documentation - 4.4.9

  - Document running tox within a Docker container. (`1035`)
  - Added python version 3.11 to `installation.rst`. (`2964`)

## v4.4.8 (2023-03-26)

### Bugfixes - 4.4.8

  - `tox.ini` is now included in source distributions in order to make all tests pass. (`2939`)
  - Fix `--index-url` and `--find-links` being used together in `requirements.txt` files. (`2959`)

## v4.4.6 (2023-02-21)

### Bugfixes - 4.4.6

  - Plugins are now able to access tox.ini config sections using a custom prefix with the same suffix / name as a tox `testenv` - by `masenf` (`2926`)

## v4.4.5 (2023-02-07)

### Bugfixes - 4.4.5

  - Ignore labels when tox will provision a runtime environment (`.tox`) so that environment configurations which depend on provisioned plugins or specific tox versions are not accessed in the outer tox process where the configuration would be invalid - by `masenf`. (`2916`)

## v4.4.4 (2023-01-31)

### Bugfixes - 4.4.4

  - Forward `HOME` by default - by `gschaffner`. (`2702`)

## v4.4.3 (2023-01-30)

### Bugfixes - 4.4.3

  - Tox will now expand self-referential extras discovered in package deps to respect local modifications to package metadata. This allows a package extra to explicitly depend on another package extra, which previously only worked with non-static metadata - by `masenf`. (`2904`)

## v4.4.2 (2023-01-25)

### Bugfixes - 4.4.2

  - Allow the user configuration file (default `<appdir>/tox/config.ini`) to be overridden via the `TOX_USER_CONFIG_FILE` environment variable. Previously tox was looking at the `TOX_CONFIG_FILE` to override the user configuration, however that environment variable is already used to override the main configuration - by `masenf`. (`2890`)

## v4.4.1 (2023-01-25)

### Bugfixes - 4.4.1

  - In tox 4.4.0 `constrain_package_deps` was introduced with a default value of `True`. This has been changed back to `False`, which restores the original behavior of tox 4.3.5 - by `masenf`. (`2897`)

## v4.4.0 (2023-01-25)

### Features - 4.4.0

  - Test environments now recognize boolean config keys `constrain_package_deps` (default=true) and `use_frozen_constraints` (default=false), which control how tox generates and applies constraints files when performing `install_package_deps`.
    
    If `constrain_package_deps` is true (default), then tox will write out `{env_dir}{/}constraints.txt` and pass it to `pip` during `install_package_deps`. If `use_frozen_constraints` is false (default), the constraints will be taken from the specifications listed under `deps` (and inside any requirements or constraints file referenced in `deps`). Otherwise, `list_dependencies_command` (`pip freeze`) is used to enumerate exact package specifications which will be written to the constraints file.
    
    In previous releases, conflicting package dependencies would silently override the `deps` named in the configuration, resulting in test runs against unexpected dependency versions, particularly when using tox factors to explicitly test with different versions of dependencies - by `masenf`. (`2386`)

### Bugfixes - 4.4.0

  - When parsing command lines, use `shlex(..., posix=True)`, even on windows platforms, since non-POSIX mode does not handle escape characters and quoting like a shell would. This improves cross-platform configurations without hacks or esoteric quoting.
    
    To make this transition easier, on Windows, the backslash path separator will not treated as an escape character unless it precedes a quote, whitespace, or another backslash character. This allows paths to mostly be written in single or double backslash style.
    
    Note that **double-backslash will no longer be escaped to a single backslash in substitutions**, instead the double backslash will be consumed as part of command splitting, on either posix or windows platforms.
    
    In some instances superfluous double or single quote characters may be stripped from arg arrays in ways that do not occur in the default windows `cmd.exe` shell - by `masenf`. (`2635`)

### Improved Documentation - 4.4.0

  - Add information when command from `list_dependencies_command` configuration option is used. (`2883`)

## v4.3.5 (2023-01-18)

### Bugfixes - 4.3.5

  - When building a `wheel` or `editable` package with a PEP 517 backend, no longer pass an empty `metadata_directory` to the backend `build_wheel` or `build_editable` endpoint.
    
    Some backends, such as PDM and poetry, will not generate package metadata in the presence of a `metadata_directory`, even if it is empty.
    
    Prior to this change, attempting to install a wheel created by tox using PDM or poetry would return an error like "There is no item named 'my-package.0.1.dist-info/WHEEL' in the archive" - by `masenf`. (`2880`)

## v4.3.4 (2023-01-17)

### Bugfixes - 4.3.4

  - When executing via the provisioning environment (`.tox` by default), run `tox` in working directory of the parent process.
    
    Prior to this change (from tox 4.0.0), the provisioned `tox` would execute with `{tox_root}` as the working directory, which breaks when a relative path is passed to `-c` or `--conf` and `tox` is executed in a working directory other than `{tox_root}` - by `masenf`. (`2876`)

### Misc - 4.3.4

  - `2878`

## v4.3.3 (2023-01-16)

### Bugfixes - 4.3.3

  - The provision environment (`.tox`) will never inherit from `testenv`. During provisioning, other test environments are not processed, allowing the use of keys and values that may be registered by later tox version or provisioned plugins - by `masenf`. (`2862`)

## v4.3.2 (2023-01-16)

### Bugfixes - 4.3.2

  - Fix regression introduced in 4.3.0 which occurred when a substitution expression for an environment variable that had previously been substituted appears in the ini file after a substitution expression for a different environment variable. This situation erroneously resulted in an exception about "circular chain between set" of those variables - by `masenf`. (`2869`)

## v4.3.1 (2023-01-15)

### Bugfixes - 4.3.1

  - Fix regression introduced in 4.3.0 by expanding substitution expressions (`{...}`) that result from a previous subsitution's replacement value (up to 100 times). Note that recursive expansion is strictly depth-first; no replacement value will ever affect adjacent characters nor will expansion ever occur over the result of more than one replacement - by `masenf`. (`2863`)

## v4.3.0 (2023-01-15)

### Features - 4.3.0

  - Rewrite substitution replacement parser - by `masenf`
      - `\` acts as a proper escape for `\` in ini-style substitutions
    
      - The resulting value of a substitution is no longer reprocessed in the context of the broader string. (Prior to this change, ini-values were repeatedly re-substituted until the expression no longer had modifications)
    
      - Migrate and update "Substitutions" section of Configuration page from v3 docs.
    
      - `find_replace_part` is removed from `tox.config.loader.ini.replace`
    
      -   - New names exported from `tox.config.loader.ini.replace`:
            
              - `find_replace_expr`
              - `MatchArg`
              - `MatchError`
              - `MatchExpression`
              - Note: the API for `replace` itself is unchanged. (`2732`)
  - Improved documentation for factors and test env names - by `stephenfin`. (`2852`)

## v4.2.8 (2023-01-11)

### Bugfixes - 4.2.8

  - Allow using package names with env markers for pip's `--no-binary` and `--only-binary` options - by `q0w`. (`2814`)

## v4.2.7 (2023-01-11)

### Bugfixes - 4.2.7

  - A testenv with multiple factors, one of which conflicts with a `base_python` setting in `tox.ini`, will now use the correct Python interpreter version - by `stephenfin`. (`2838`)
  - Explicitly list `wheel` as requirement for the tests, as some of the tests error without it. (`2843`)
  - tox has reverted support for Python factors that include PATCH release info (e.g. `py3.10.1`), build architecture (e.g. `pypy3-64`) or do not define a `py` prefix or other supported prefix (e.g. `3.10`). These complex factors were initially supported with the release of tox 4.0 but has proven complicated to support. Instead, the simple factors supported by tox 3 e.g. (`py310`, `pypy3`) or period-separated equivalent (`py3.10`) introduced in tox 4 should be used. Users who wish to specify more specific Python version information should configure the \[base\_python\](\#base\_python) setting
      - by `stephenfin`. (`2848`)

## v4.2.6 (2023-01-06)

### Bugfixes - 4.2.6

  - Handle properly pip `--no-binary` / `--only-binary` options in requirements.txt format files. (`2814`)

## v4.2.5 (2023-01-06)

### Bugfixes - 4.2.5

  - The combination of `usedevelop = true` and `--skip-missing-interpreters=false` will no longer fail for environments that were *not* invoked - by `stephenfin`. (`2811`)
  - Fix an attribute error when `use_develop = true` is set and an unsupported interpreter version is requested - by `stephenfin`. (`2826`)
  - tox returns a non-zero error code if all envs are skipped. It will now correctly do this if only a single env was requested and this was skipped - by `stephenfin`. (`2827`)

## v4.2.4 (2023-01-05)

### Bugfixes - 4.2.4

  - Setting `[testenv] basepython = python3` will no longer override the Python interpreter version requested by a factor, such as `py311` - by `stephenfin`. (`2754`)
  - Also accept tab after colon before factor filter expansion - by `pdecat`. (`2823`)

## v4.2.3 (2023-01-04)

### Bugfixes - 4.2.3

  - `devenv` does not respect the specified path when the package is a wheel file - by `gaborbernat`. (`2815`)
  - Require space after colon before factor filter expansion, unless it is the last character of the line - by `pdecat`. (`2822`)

## v4.2.2 (2023-01-04)

### Bugfixes - 4.2.2

  - Add `CC`, `CFLAGS`, `CCSHARED`, `CXX`, `CPPFLAGS`, `LDFLAGS`, `PKG_CONFIG` and `PKG_CONFIG_SYSROOT_DIR` to the default passed through environment variables list as these are needed for building various C-extensions
      - by `gaborbernat`. (`2818`)

## v4.2.1 (2023-01-03)

### Bugfixes - 4.2.1

  - Fix extracting extras from markers with more than 2 extras in an or chain - by `dconathan`. (`2791`)

## v4.2.0 (2023-01-03)

### Features - 4.2.0

  - Packaging environments now inherit from the `pkgenv` section, allowing to set all your packaging options in one place, and support the `deps` key to set additional dependencies that will be installed after `pyproject.toml` static `requires` but before backends dynamic requires - by `gaborbernat`. (`2543`)

### Improved Documentation - 4.2.0

  - Document breaking changes with tox 4 and packaging environments - by `gaborbernat`. (`2543`)
  - Document how to handle environments whose names match `tox` subcommands - by `sirosen`. (`2728`)

## v4.1.3 (2023-01-02)

### Bugfixes - 4.1.3

  - Reuse package\_env with `--installpkg` - by `q0w`. (`2442`)
  - Fail more gracefully when pip \[install\_command\](\#install\_command) is empty - by `jayaddison`. (`2695`)

### Improved Documentation - 4.1.3

  - Add breaking-change documentation for empty `install_command` values - by `jayaddison`. (`2695`)

### Misc - 4.1.3

  - `2796`, `2797`

## v4.1.2 (2022-12-30)

### Bugfixes - 4.1.2

  - Fix `--skip-missing-interpreters` behavior - by `q0w`. (`2649`)
  - Restore tox 3 behavior of showing the output of pip freeze, however now only active when running inside a CI environment - by `gaborbernat`. (`2685`)
  - Fix extracting extras from markers with many extras - by `q0w`. (`2791`)

## v4.1.1 (2022-12-29)

### Bugfixes - 4.1.1

  - Fix logging error with emoji in git branch name. (`2768`)

### Improved Documentation - 4.1.1

  - Add faq entry about reuse of environments - by `jugmac00`. (`2788`)

## v4.1.0 (2022-12-29)

### Features - 4.1.0

  - `-f` can be used multiple times and on hyphenated factors (e.g. `-f py311-django -f py39`) - by `sirosen`. (`2766`)

### Improved Documentation - 4.1.0

  - Fix a grammatical typo in docs/user\_guide.rst. (`2787`)

## v4.0.19 (2022-12-28)

### Bugfixes - 4.0.19

  - Create temp\_dir if not exists - by `q0w`. (`2770`)

## v4.0.18 (2022-12-26)

### Bugfixes - 4.0.18

  - Strip leading and trailing whitespace when parsing elements in requirement files - by `gaborbernat`. (`2773`)

## v4.0.17 (2022-12-25)

### Features - 4.0.17

  - Suppress a report output when verbosity = 0. (`2697`)

### Bugfixes - 4.0.17

  - Fix `--sdistonly` behavior. (`2653`)
  - Override toxworkdir with --workdir. (`2654`)

## v4.0.16 (2022-12-20)

### Bugfixes - 4.0.16

  - Fix \[change\_dir\](\#change\_dir) is relative to current working directory rather than to the \[tox\_root\](\#tox\_root) when using the `-c` argument to locate the `tox.ini` file - by `gaborbernat`. (`2619`)

## v4.0.15 (2022-12-19)

### Bugfixes - 4.0.15

  - Fix tox auto-provisioning not working and relax \[min\_version\](\#min\_version) default from `4.0` to no version constraint
      - by `gaborbernat`. (`2634`)
  - Fix assertion in `test_result_json_sequential` when interpreter `_base_executable` is a hardlink (macOS homebrew)
      - by `masenf`. (`2720`)
  - Complex negative factor filters not working - by `gaborbernat`. (`2747`)

## v4.0.14 (2022-12-18)

### Bugfixes - 4.0.14

  - Do not include non test environment sections or factor filters in INI configuration to factor discovery - by `gaborbernat`. (`2746`)

## v4.0.13 (2022-12-17)

### Bugfixes - 4.0.13

  - A plain section in INI configuration matching a tox environment name shadowed the laters configuration - by `gaborbernat`. (`2636`)
  - Fix space not accepted in factor filter expression - by `gaborbernat`. (`2718`)

## v4.0.12 (2022-12-16)

### Bugfixes - 4.0.12

  - If tox is running in a tty, allocate a pty (pseudo terminal) for commands and copy termios attributes to show colors and improve interactive use - by `masenf`. (`1773`)
  - Fix python hash seed not being set - by `gaborbernat`. (`2645`)
  - Fix legacy CLI flags `--pre`, `--force-deps`, `--sitepackages` and `--alwayscopy` not working, and mark them as deprecated - by `gaborbernat`. (`2690`)

### Improved Documentation - 4.0.12

  - Document user level config. (`2633`)

## v4.0.11 (2022-12-14)

### Features - 4.0.11

  - Modified handling of `NO_COLOR` environment variable, consistent with [de facto conventions](https://no-color.org): any non-empty string will enable `NO_COLOR` (disable colorized output); no `NO_COLOR` variable or `NO_COLOR` with an empty string will disable `NO_COLOR` (enable colorized output) - by `ptmcg`. (`2719`)

### Bugfixes - 4.0.11

  - `TOX_SKIP_ENV` environment variable now works again, and can also be set via the CLI argument `--skip-env` for any command where `-e` can be set - by `mgedmin`. (`2698`)
  - `tox config` should only show \[env\_list\](\#env\_list) arguments by default instead of `ALL` - by `gaborbernat`. (`2726`)

## v4.0.10 (2022-12-14)

### Features - 4.0.10

  - Add `py_dot_ver` and `py_impl` constants to environments to show the current Python implementation and dot version (e.g. `3.11`) for the current environment. These can be also used as substitutions in `tox.ini` - by `gaborbernat`. (`2640`)

### Bugfixes - 4.0.10

  - `--help` now reports the default verbosity level (which is WARNING) correctly. (`2707`)

## v4.0.9 (2022-12-13)

### Features - 4.0.9

  - Add <span class="title-ref">tox\_on\_install \<tox.plugin.spec.tox\_on\_install\></span> and <span class="title-ref">tox\_env\_teardown \<tox.plugin.spec.tox\_env\_teardown\></span> plugin hooks - by `gaborbernat`. (`2687`)
  - Add `PKG_CONFIG_PATH` to the default pass through environment list for python tox environments -by `gaborbernat`. (`2700`)

## v4.0.8 (2022-12-11)

### Bugfixes - 4.0.8

  - Fix multiple substitution on factor filtering in `tox.ini` when multiple factor filters match
      - by `gaborbernat`. (`2650`)
  - Fix regression in `requirements.txt` parsing - by `gaborbernat`. (`2682`)

## v4.0.7 (2022-12-11)

### Bugfixes - 4.0.7

  - Support for `--no-deps` flag within the \[deps\](\#deps) - by `gaborbernat`. (`2674`)

## v4.0.6 (2022-12-10)

### Features - 4.0.6

  - Fail on \[pass\_env\](\#pass\_env)/\[passenv\](\#passenv) entries containing whitespace - by `ericzolf`. (`2658`)

## v4.0.5 (2022-12-09)

### Bugfixes - 4.0.5

  - Normalize extra names passed in (fixes extra groups not being picked up during installation) - by `gaborbernat`. (`2655`)

## v4.0.4 (2022-12-09)

### Bugfixes - 4.0.4

  - Disable logging from `distlib.util` and `filelock` as these log messages are too verbose - by `gaborbernat`. (`2655`)
  - Use `!r` and `repr()` to better display erroneous values in exception from `StrConverter.to_bool()` - by `ptmcg`. (`2665`)

### Improved Documentation - 4.0.4

  - Document that running `--showconfig` or `--help-ini` with the `-v` flag will add interleaved debugging information, whereas tox v3 added extra lines at the start - by `jugmac00`. (`2622`)
  - Document that tox v4 errors when using `-U` when defining dependencies via `deps` - by `jugmac00`. (`2631`)

## v4.0.3 (2022-12-08)

### Bugfixes - 4.0.3

  - Always set environment variable `PYTHONIOENCODING` to `utf-8` to ensure tox works under Windows custom encodings
      - by `gaborbernat`. (`2422`)
  - Ensure \[change\_dir\](\#change\_dir) is created if does not exist before executing \[commands\](\#commands) - by `gaborbernat`. (`2620`)
  - Pass through `NUMBER_OF_PROCESSORS` on Windows as is needed for `multiprocessing.cpu_count` -by `gaborbernat`. (`2629`)
  - The core tox configuration now contains `host_python` key showing the host python executable path -by `gaborbernat`. (`2630`)

### Improved Documentation - 4.0.3

  - Document that space separator is no longer valid for the \[passenv\](\#passenv) and instead one should use comma -by `gaborbernat`. (`2615`)
  - Document necessity to escape `#` within INI configuration - by `jugmac00`. (`2617`)

## v4.0.2 (2022-12-07)

### Bugfixes - 4.0.2

  - Unescaped comma in substitution should not be replaced during INI expansion - by `gaborbernat`. (`2616`)
  - `tox --showconfig -e py311` reports tox section, though it should not - by `gaborbernat`. (`2624`)

## v4.0.1 (2022-12-07)

### Bugfixes - 4.0.1

  - Create session views of the build wheel/sdist into the \[temp\_dir\](\#temp\_dir) folder - by `gaborbernat`. (`2612`)
  - Default tox min\_version to 4.0 instead of current tox version - by `gaborbernat`. (`2613`)

## v4.0.0 (2022-12-07)

### Bugfixes - 4.0.0

  - The temporary folder within the tox environment was named `.temp` instead of `.tmp` - by `gaborbernat`. (`2608`)

### Improved Documentation - 4.0.0

  - Enumerate breaking changes of tox 4 in the FAQ, and also list major new improvements - by `gaborbernat`. (`2587`)
  - Document in the FAQ that tox 4 will raise a warning when finding conflicting environment names - by `gaborbernat`. (`2602`)

## v4.0.0rc4 (2022-12-06)

### Bugfixes - 4.0.0rc4

  - Fix extras not being kept for install dependencies - by `gaborbernat`. (`2603`)

### Deprecations and Removals - 4.0.0rc4

  - Remove deprecated configuration option `whitelist_externals` which was replaced by `allowlist_externals` - by `jugmac00`. (`2599`)

## v4.0.0rc3 (2022-12-05)

### Features - 4.0.0rc3

  - Add `--exit-and-dump-after` flag that allows automatically killing tox if does not finish within the passed seconds, and dump the thread stacks (useful to debug tox when it seemingly hangs) - by `gaborbernat`. (`2595`)

### Bugfixes - 4.0.0rc3

  - Ensure that two parallel tox instance invocations on different tox environment targets will work by holding a file lock onto the packaging operations (e.g., in bash `tox4 r -e py311 &; tox4 r -e py310`) - by `gaborbernat`. (`2594`)
  - Fix leaking backend processes when the build backend does not support editable wheels and fix failure when multiple environments exist that have a build backend that does not support editable wheels - by `gaborbernat`. (`2595`)

## v4.0.0rc2 (2022-12-04)

### Features - 4.0.0rc2

  - Support for recursive extras in Python package dependencies - by `gaborbernat`. (`2567`)

### Bugfixes - 4.0.0rc2

  - Support in INI files for ignore exit code marker the `-` without a subsequent space too - by `gaborbernat`. (`2561`)
  - Ensure paths constructed by tox are stable by resolving relative paths to fully qualified one, this insures that running tox from a different folder than project root still generates meaningful paths - by `gaborbernat`. (`2562`)
  - Ensure only on run environment operates at a time on a packaging environment (fixes unexpected failures when running in parallel mode) - by `gaborbernat`. (`2564`)
  - Fallback to `editable-legacy` if package target is `editable` but the build backend does not have `build_editable` hook - by `gaborbernat`. (`2567`)
  - Allow reference replacement in INI configuration via keys that contain the `-` character - by `gaborbernat`. (`2569`)
  - Resolve symlinks when saving Python executable path - by `ssbarnea`. (`2574`)
  - Do not set `COLUMNS` or `LINES` environment to the current TTY size if already set by the user -by `gaborbernat`. (`2575`)
  - Add missing `build[virtualenv]<build>` test dependency - by `ssbarnea`. (`2576`)

## v4.0.0rc1 (2022-11-29)

### Features - 4.0.0rc1

  - Add support for generative section headers - by `gaborbernat`. (`2362`)

### Bugfixes - 4.0.0rc1

  - Allow installing relative paths that go outside tox root folder. - by `ssbarnea`. (`2366`)

## v4.0.0b3 (2022-11-27)

### Features - 4.0.0b3

  - Improve coloring of logged commands - by `ssbarnea`. (`2356`)
  - Pass `PROGRAMDATA`, `PROGRAMFILES(x86)`, `PROGRAMFILES` environments on Windows by default as it is needed for discovering the VS C++ compiler and start testing against 3.11 - by `gaborbernat`. (`2492`)
  - Support PEP-621 static metadata for getting package dependencies - by `gaborbernat`. (`2499`)
  - Add support for editable wheels, make it the default development mode and rename `dev-legacy` mode to `editable-legacy` - by `gaborbernat`. (`2502`)

### Bugfixes - 4.0.0b3

  - Recognize `TERM=dumb` or `NO_COLOR` environment variables. - by `ssbarnea`. (`1290`)
  - Allow passing config directory without filename. - by `ssbarnea`. (`2340`)
  - Avoid ignored explicit argument 're' console message. - by `ssbarnea`. (`2342`)
  - Display registered plugins with `tox --version` - by `mxd4`. (`2358`)
  - Allow `--hash` to be specified in requirements.txt files. - by `masenf`. (`2373`)
  - Avoid impossible minversion version requirements. - by `ssbarnea`. (`2414`)

### Improved Documentation - 4.0.0b3

  - Add new documentation for tox 4 - by `gaborbernat`. (`2408`)

## v4.0.0b2 (2022-04-11)

### Features - 4.0.0b2

  - Use `tox` console entry point name instead of `tox4` - by `gaborbernat`. (`2344`)
  - Use `.tox` as working directory instead of `.tox/4` - by `gaborbernat`. (`2346`)
  - Switch to `hatchling` as build backend instead of `setuptools` - by `gaborbernat`. (`2368`)

### Bugfixes - 4.0.0b2

  - Fix CLI raises an error for `-va` with `ignored explicit argument 'a'` - by `gaborbernat`. (`2343`)
  - Do not interpolate values when parsing `tox.ini` configuration files - by `gaborbernat`. (`2350`)

### Improved Documentation - 4.0.0b2

  - Deleted the tox mailing list -- by `jugmac00` (`2364`)

## v4.0.0b1 (2022-02-05)

### Features - 4.0.0b1

  - Display a hint for unrecognized argument CLI parse failures to use `--` separator to pass arguments to commands
      - by `gaborbernat`. (`2183`)
  - Do not allow extending the config set beyond setup to ensures that all configuration values are visible via the config sub-command. - by `gaborbernat`. (`2243`)
  - Print a message when ignoring outcome of commands - by `gaborbernat`. (`2315`)

### Bugfixes - 4.0.0b1

  - Fix type annotation is broken for <span class="title-ref">tox.config.sets.ConfigSet.add\_config</span> when adding a container type
      - by `gaborbernat`. (`2233`)
  - Insert `TOX_WORK_DIR`, `TOX_ENV_NAME`, `TOX_ENV_DIR` and `VIRTUAL_ENV` into the environment variables for all tox environments to keep contract with tox version 3 - by `gaborbernat`. (`2259`)
  - Fix plugin initialization order - core plugins first, then 3rd party and finally inline - by `gaborbernat`. (`2264`)
  - Legacy parallel mode should accept `-p` flag without arguments - by `gaborbernat`. (`2299`)
  - Sequential run fails because the packaging environment is deleted twice for sequential runs with recreate flag on
      - by `gaborbernat`. (`2300`)
  - Require Python 3.10 to generate docs - by `jugmac00`. (`2321`)
  - Environment assignment for output breaks when using `-rv` (when we cannot guess upfront the verbosity level from the CLI arguments) - by `gaborbernat`. (`2324`)
  - `devenv` command does not respect specified path - by `gaborbernat`. (`2325`)

### Improved Documentation - 4.0.0b1

  - Enable link check during documentation build - by `gaborbernat`. (`806`)
  - Document ownership of the `tox.wiki` root domain - by `gaborbernat`. (`2242`)
  - Document <span class="title-ref">tox.config.sets.ConfigSet.loaders</span> - by `gaborbernat`. (`2287`)
  - Fix CLI documentation is missing and broken documentation references - by `gaborbernat`. (`2310`)

## v4.0.0a10 (2022-01-04)

### Features - 4.0.0a10

  - Support for grouping environment values together by applying labels to them either at \[core \<labels\>\](\#core-\<labels\>) and \[environment \<labels-env\>\](\#environment-\<labels-env\>) level, and allow selecting them via the \[-m \<tox-run--m\>\](\#-m-\<tox-run--m\>) flag from the CLI - by `gaborbernat`. (`238`)
  - Support for environment files within the \[set\_env\](\#set\_env) configuration via the `file|` prefix - by `gaborbernat`. (`1938`)
  - Support for `--no-provision` flag - by `gaborbernat`. (`1951`)
  - Missing `pyproject.toml` or `setup.py` file at the tox root folder without the `--install-pkg` flag assumes no packaging - by `gaborbernat`. (`1964`)
  - Add `external` package type for \[package\](\#package) (see \[external-package-builder\](\#external-package-builder)), and extract package dependencies for packages passed in via \[--installpkg \<tox-run---installpkg\>\](\#--installpkg-\<tox-run---installpkg\>) - by `gaborbernat`. (`2204`)
  - Add support for rewriting script invocations that have valid shebang lines when the `TOX_LIMITED_SHEBANG` environment variable is set and not empty - by `gaborbernat`. (`2208`)
  - Support for the `--discover` CLI flag - by `gaborbernat`. (`2245`)
  - Moved the python packaging logic into a dedicate package `pyproject-api` and use it as a dependency - by `gaborbernat`. (`2274`)
  - Drop python 3.6 support - by `gaborbernat`. (`2275`)
  - Support for selecting target environments with a given factor via the \[-f \<tox-run--f\>\](\#-f-\<tox-run--f\>) CLI environment flag - by `gaborbernat`. (`2290`)

### Bugfixes - 4.0.0a10

  - Fix `CTRL+C` is not stopping the process on Windows - by `gaborbernat`. (`2159`)
  - Fix list/depends commands can create tox package environment as runtime environment and display an error message
      - by `gaborbernat`. (`2234`)

### Deprecations and Removals - 4.0.0a10

  - `tox_add_core_config` and `tox_add_env_config` now take a `state: State` argument instead of a configuration one, and `Config` not longer provides the `envs` property (instead users should migrate to `State.envs`) - by `gaborbernat`. (`2275`)

## v4.0.0a9 (2021-09-16)

### Features - 4.0.0a9

  - Expose the parsed CLI arguments on the main configuration object for plugins and allow plugins to define their own configuration section -- by `gaborbernat`. (`2191`)
  - Let tox run fail when all envs are skipped -- by `jugmac00`. (`2195`)
  - Expose the configuration loading mechanism to plugins to define and load their own sections. Add <span class="title-ref">tox\_add\_env\_config \<tox.plugin.spec.tox\_add\_env\_config\></span> plugin hook called after the configuration environment is created for a tox environment and removed `tox_configure`. Add the main configuration object as argument to <span class="title-ref">tox\_add\_core\_config \<tox.plugin.spec.tox\_add\_core\_config\></span>. Move the environment list method from the state to the main configuration object to allow its use within plugins -- by `gaborbernat`. (`2200`)
  - Allow running code in plugins before and after commands via <span class="title-ref">tox\_before\_run\_commands \<tox.plugin.spec.tox\_before\_run\_commands\></span> and <span class="title-ref">tox\_after\_run\_commands \<tox.plugin.spec.tox\_after\_run\_commands\></span> plugin points -- by `gaborbernat`. (`2201`)
  - Allow plugins to update the \[set\_env\](\#set\_env) and change the \[pass\_env\](\#pass\_env) configurations -- by `gaborbernat`. (`2215`)

### Bugfixes - 4.0.0a9

  - Fix env variable substitutions with defaults containing colon (e.g. URL) -- by `comabrewer`. (`2182`)
  - Do not allow constructing `ConfigSet` directly and implement `__contains__` for `Loader` -- by `gaborbernat`. (`2209`)
  - Fix old-new value on recreate cache miss-match are swapped -- by `gaborbernat`. (`2211`)
  - Report fails when report does not support Unicode characters -- by `gaborbernat`. (`2213`)

### Improved Documentation - 4.0.0a9

  - Adopt furo theme, update our state diagram and description in user docs (SVG + light/dark variant), split the Python API into its own page from under the plugin page, and document plugin adoption under the `tox-dev` organization - by `gaborbernat`. (`1881`)

## v4.0.0a8 (2021-08-21)

### Features - 4.0.0a8

  - Add support for \[allowlist\_externals\](\#allowlist\_externals), commands not matching error - by `gaborbernat`. (`1127`)
  - Add outcome of environments into the result json (\[--result-json \<tox-run---result-json\>\](\#--result-json-\<tox-run---result-json\>)) under the `result` key containing `success` boolean, `exit_code` integer and `duration` float value - by `gaborbernat`. (`1405`)
  - Add `exec` subcommand that allows users to run an arbitrary command within the tox environment (without needing to modify their configuration) - by `gaborbernat`. (`1790`)
  - Add check to validate the base Python names and the environments name do not conflict Python spec wise, when they do raise error if \[ignore\_base\_python\_conflict\](\#ignore\_base\_python\_conflict) is not set or `False` - by `gaborbernat`. (`1840`)
  - Allow any Unix shell-style wildcards expression for \[pass\_env\](\#pass\_env) - by `gaborbernat`. (`2121`)
  - Add support for \[args\_are\_paths\](\#args\_are\_paths) flag - by `gaborbernat`. (`2122`)
  - Add support for \[env\_log\_dir\](\#env\_log\_dir) (compared to tox 3 extend content and keep only last run entries) -by `gaborbernat`. (`2123`)
  - Add support for `{:}` substitution in ini files as placeholder for the OS path separator - by `gaborbernat`. (`2125`)
  - When cleaning directories (for tox environment, `env_log_dir`, `env_tmp_dir` and packaging metadata folders) do not delete the directory itself and recreate, but instead just delete its content (this allows the user to cd into it and still be in a valid folder after a new run) - by `gaborbernat`. (`2139`)
  - Changes to help plugin development: simpler tox env creation argument list, expose python creation directly, allow skipping list dependencies install command for pip and executable is only part of the python cache for virtualenv
      - by `gaborbernat`. (`2172`)

### Bugfixes - 4.0.0a8

  - Support `#` character in path for the tox project - by `gaborbernat`. (`763`)
  - If the command expression fails to parse with shlex fallback to literal pass through of the remaining elements
      - by `gaborbernat`. (`1944`)
  - tox config fails on \[--recreate \<tox-config---recreate\>\](\#--recreate-\<tox-config---recreate\>) flag, and once specified the output does not reflect the impact of the CLI flags - by `gaborbernat`. (`2037`)
  - Virtual environment creation for Python is always triggered at every run - by `gaborbernat`. (`2041`)
  - Add support for setting \[suicide\_timeout\](\#suicide\_timeout), \[interrupt\_timeout\](\#interrupt\_timeout) and \[terminate\_timeout\](\#terminate\_timeout) - by `gaborbernat`. (`2124`)
  - Parallel show output not working when there's a packaging phase in the run - by `gaborbernat`. (`2161`)

### Improved Documentation - 4.0.0a8

  - Note constraint files are a subset of requirement files - by `gaborbernat`. (`1939`)
  - Add a note about having a package with different Python requirements than tox and not specifying \[base\_python\](\#base\_python) -by `gaborbernat`. (`1975`)
  - Fix \[--runner \<tox---runner\>\](\#--runner-\<tox---runner\>) is missing default value and documentation unclear - by `gaborbernat`. (`2004`)

## v4.0.0a7 (2021-07-28)

### Features - 4.0.0a7

  - Add support for configuration taken from the `setup.cfg` file -by `gaborbernat`. (`1836`)
  - Add support for configuration taken from the `pyproject.toml` file, `tox` section `legacy_tox_ini` key - by `gaborbernat`. (`1837`)
  - Add configuration documentation - by `gaborbernat`. (`1914`)
  - Implemented `[]` substitution (alias for `{posargs}`) - by `hexagonrecursion`. (`1928`)
  - Implement `[testenv] ignore_outcome` - "a failing result of this testenv will not make tox fail" - by `hexagonrecursion`. (`1947`)
  - Inline plugin support via `tox_.py`. This is loaded where the tox config source is discovered. It's a Python file that can contain arbitrary Python code, such as definition of a plugin. Eventually we'll add a plugin that allows succinct declaration/generation of new tox environments - by `gaborbernat`. (`1963`)
  - Introduce the installer concept, and collect pip installation into a `pip` package, also attach to this the requirements file parsing which got a major rework - by `gaborbernat`. (`1991`)
  - Support CPython `3.10` -by `gaborbernat`. (`2014`)

### Bugfixes - 4.0.0a7

  - Environments with a platform mismatch are no longer silently skipped, but properly reported - by `jugmac00`. (`1926`)
  - Port pip requirements file parser to `tox` to achieve full equivalency (such as support for the per requirement `--install-option` and `--global-option` flags) - by `gaborbernat`. (`1929`)
  - Support for extras with paths for Python deps and requirement files - by `gaborbernat`. (`1933`)
  - Due to a bug `\{posargs} {posargs}` used to expand to literal `{posargs} {posargs}`. Now the second `{posargs}` is expanded. `\{posargs} {posargs}` expands to `{posargs} positional arguments here` - by `hexagonrecursion`. (`1956`)
  - Enable setting a different `upstream` repository for the coverage diff report. This has been hardcoded to `upstream/rewrite` until now. by `jugmac00`. (`1972`)
  - Enable replacements (a.k.a section substitutions) for section names containing a dash in sections without the `testenv:` prefix - by `jugmac00`, `obestwalter`, `eumiro`. (`1985`)
  - Fix legacy list env command for empty/missing envlist - by `jugmac00`. (`1987`)
  - Requirements and constraints files handling got reimplemented, which should fix all open issues related to this area
      - by `gaborbernat`. (`1991`)
  - Use importlib instead of `__import__` - by `dmendek`. (`1995`)
  - Evaluate factor conditions for `command` keys - by `jugmac00`. (`2002`)
  - Prefer f-strings instead of the str.format method - by `eumiro`. (`2012`)
  - Fix regex validation for SHA 512 hashes - by `jugmac00`. (`2018`)
  - Actually run all environments when `ALL` is provided to the legacy env command - by `jugmac00`. (`2112`)
  - Move from `appdirs` to `platformdirs` - by `gaborbernat`. (`2117`)
  - Move from `toml` to `tomli` - by `gaborbernat`. (`2118`)

### Improved Documentation - 4.0.0a7

  - Start documenting the plugin interface. Added <span class="title-ref">tox\_register\_tox\_env \<tox.plugin.spec.tox\_register\_tox\_env\></span>, <span class="title-ref">tox\_add\_option \<tox.plugin.spec.tox\_add\_option\></span>, <span class="title-ref">tox\_add\_core\_config \<tox.plugin.spec.tox\_add\_core\_config\></span>, `tox_configure` - by `gaborbernat`. (`1991`)
  - Explain how `-v` and `-q` flags play together to determine CLI verbosity level - by `jugmac00`. (`2005`)
  - Start polishing the documentation for the upcoming final release - by `jugmac00`. (`2006`)
  - Update documentation about changelog entries for trivial changes - by `jugmac00`. (`2007`)

## v4.0.0a6 (2021-02-15)

### Features - 4.0.0a6

  - Add basic quickstart implementation (just use pytest with the current Python version) - by `gaborbernat`. (`1829`)
  - Support comments via the `#` character within the ini configuration (to force a literal `#` use `\#`) -by `gaborbernat`. (`1831`)
  - Add support for the `install_command` settings in the virtual env test environments - by `gaborbernat`. (`1832`)
  - Add support for the `package_root` `setupdir` ( Python scoped) configuration that sets the root directory used for packaging (the location of the historical `setup.py` and modern `pyproject.toml`). This can be set at root level, or at tox environment level (the later takes precedence over the former) - by `gaborbernat`. (`1838`)
  - Implement support for the `--installpkg` CLI flag - by `gaborbernat`. (`1839`)
  - Add support for the `list_dependencies_command` settings in the virtual env test environments - by `gaborbernat`. (`1842`)
  - Add support for the `ignore_errors` settings in tox test environments - by `gaborbernat`. (`1843`)
  - Add support for the `pip_pre` settings for virtual environment based tox environments - by `gaborbernat`. (`1844`)
  - Add support for the `platform` settings in tox test environments - by `gaborbernat`. (`1845`)
  - Add support for the `recreate` settings in tox test environments - by `gaborbernat`. (`1846`)
  - Allow Python test and packaging environments with version 2.7 - by `gaborbernat`. (`1900`)
  - Do not construct a requirements file for deps in virtualenv, instead pass content as CLI argument to pip - by `gaborbernat`. (`1906`)
  - Do not display status update environment reports when interrupted or for the final environment ran (because at the final report will be soon printed and makes the status update redundant) - by `gaborbernat`. (`1909`)
  - The `_TOX_SHOW_THREAD` environment variable can be used to print alive threads when tox exists (useful to debug when tox hangs because of some non-finished thread) and also now prints the pid of the local subprocess when reporting the outcome of an execution - by `gaborbernat`. (`1915`)

### Bugfixes - 4.0.0a6

  - Normalize description text to collapse newlines and one or more than whitespace to a single space - by `gaborbernat`. (`1829`)
  - Support aliases in show config key specification (will print with the primary key) - by `gaborbernat`. (`1831`)
  - Show config no longer marks as unused keys that are inherited (e.g. if the key is coming from `testenv` section and our target is `testenv:fix`) - by `gaborbernat`. (`1833`)
  - `--alwayscopy` and `--sitepackages` legacy only flags do not work - by `gaborbernat`. (`1839`)
  - Fix handling of `commands_pre`/`commands`/`commands_post` to be in line with tox 3 (returned incorrect exit codes and post was not always executed) - by `gaborbernat`. (`1843`)
  - Support requirement files containing `--hash` constraints - by `gaborbernat`. (`1903`)
  - Fix a bug that caused tox to never finish when pulling configuration from a tox run environment that was never executed
      - by `gaborbernat`. (`1915`)

### Deprecations and Removals - 4.0.0a6

  -   - Drop support for `sdistsrc` flag because introduces a significant complexity and is barely used (5 hits on a github search).
      - `--skip-missing-interpreters`, `--notest`, `--sdistonly`, `--installpkg`, `--develop` and `--skip-pkg-install` CLI flags are no longer available for `devenv` (enforce the only sane value for these).
    
    By `gaborbernat` (`1839`)

  - Remove Jenkins override support: this feature goes against the spirit of tox - blurring the line between the CI and local runs. It also singles out a single CI provider, which opens the door for other CIs wanting similar functionality. Finally, only 54 code file examples came back on a Github search, showing this is a not widely used feature. People who still want Jenkins override support may create a tox plugin to achieve this functionality - by `gaborbernat`. (`1841`)

## v4.0.0a5 (2021-01-23)

### Features - 4.0.0a5

  - Support the `system_site_packages`/`sitepackages` flag for virtual environment based tox environments -by `gaborbernat`. (`1847`)
  - Support the `always_copy`/`alwayscopy` flag for virtual environment based tox environments -by `gaborbernat`. (`1848`)
  - Support the `download` flag for virtual environment based tox environments - by `gaborbernat`. (`1849`)
  - Recreate virtual environment based tox environments when the `virtualenv` version changes - by `gaborbernat`. (`1865`)

### Bugfixes - 4.0.0a5

  - Not all package dependencies are installed when different tox environments in the same run use different set of extras - by `gaborbernat`. (`1868`)

  - Support `=` separator in requirement file flags, directories as requirements and correctly set the root of the requirements file when using the `--root` CLI flag to change the root - by `gaborbernat`. (`1853`)

  - Cleanup local subprocess file handlers when exiting runs (fixes `ResourceWarning: unclosed file` errors when running with `env PYTHONTRACEMALLOC=5 PYTHONDEVMODE=y` under a Python built with `--with-pydebug`)
    
      - by `gaborbernat`. (`1857`)

  - Various small bugfixes:
    
      - honor updating default environment variables set by internal tox via set env (`PIP_DISABLE_PIP_VERSION_CHECK`)
      - do not multi-wrap `HandledError` in the ini file loader,
      - skipped environments are logged now with their fail message at default verbosity level,
      - fix an error that made the show configuration command crash when making the string of a config value failed,
      - support empty-new lines within the set env configurations replacements,
    
    by `gaborbernat`. (`1864`)

### Improved Documentation - 4.0.0a5

  - Add CLI documentation - by `gaborbernat`. (`1852`)

## v4.0.0a4 (2021-01-16)

### Features - 4.0.0a4

  - Use `.tox/4` instead of `.tox4` folder (so ignores for tox 3 works for tox 4 too), reminder we'll rename this to just `.tox` before public release, however to encourage testing tox 4 in parallel with tox 3 this is helpful
      - by `gaborbernat`. (`1812`)
  - Colorize the `config` command: section headers are yellow, keys are green, values remained white, exceptions are light red and comments are cyan - by `gaborbernat`. (`1821`)

### Bugfixes - 4.0.0a4

  - Support legacy format (`-cconstraint.txt`) of constraint files in `deps`, and expand constraint files too when viewing inside the `deps` or calculating weather our environment is up to date or not - by `gaborbernat`. (`1788`)
  - When specifying requirements/editable/constraint paths within `deps` escape space, unless already escaped to support running specifying transitive requirements files within deps - by `gaborbernat`. (`1792`)
  - When using a provisioned tox environment requesting `--recreate` failed with `AttributeError` -by `gaborbernat`. (`1793`)
  - Fix `RequirementsFile` from tox is rendered incorrectly in `config` command - by `gaborbernat`. (`1820`)
  - Fix a bug in the configuration system where referring to the same named key in another env/section causes circular dependency error - by `gaborbernat`. (`1821`)
  - Raise `ValueError` with descriptive message when a requirements file specified does not exist
      - by `gaborbernat`. (`1828`)
  - Support all valid requirement file specification without delimiting space in the `deps` of the `tox.ini` -by `gaborbernat`. (`1834`)

### Improved Documentation - 4.0.0a4

  - Add code style guide for contributors - by `gaborbernat`. (`1734`)

## v4.0.0a3 (2021-01-13)

### Features - 4.0.0a3

  - Raise exception when set env enters into a circular reference - by `gaborbernat`. (`1779`)

  -   - Raise exception when variable substitution enters into a circle.
      - Add `{/}` as substitution for os specific path separator.
      - Add `{env_bin_dir}` constant substitution.
      - Implement support for `--discover` flag - by `gaborbernat`. (`1784`)

### Bugfixes - 4.0.0a3

  - Entries in the `set_env` does not reference environments from `set_env` - by `gaborbernat`. (`1776`)

  - `env` substitution does not uses values from `set_env` - by `gaborbernat`. (`1779`)

  - Adopt tox 3 base pass env list, by adding:
    
      - on all platforms: `LANG`, `LANGUAGE`, `CURL_CA_BUNDLE`, `SSL_CERT_FILE` , `LD_LIBRARY_PATH` and `REQUESTS_CA_BUNLDE`,
      - on Windows: `SYSTEMDRIVE` - by `gaborbernat`. (`1780`)

  - Fixed a bug that crashed tox where calling tox with the recreate flag and when multiple environments were reusing the same package - by `gaborbernat`. (`1782`)

  -   - Python version markers are stripped in package dependencies (after wrongfully being detected as an extra marker).
      - In packaging APIs do not set `PYTHONPATH` (to empty string) if `backend-path` is empty.
      - Fix commands parsing on Windows (do not auto-escape `\` - instead users should use the new `{\}`, and on parsed arguments strip both `'` and `"` quoted outcomes).
      - Allow windows paths in substitution set/default (the `:` character used to separate substitution arguments may also be present in paths on Windows - do not support single capital letter values as substitution arguments) -by `gaborbernat`. (`1784`)

  - Rework how we handle Python packaging environments:
    
      - the base packaging environment changed from `.package` to `.pkg`,
      - merged the `sdist`, `wheel` and `dev` separate packaging implementations into one, and internally dynamically pick the one that's needed,
      - the base packaging environment always uses the same Python environment as tox is installed into,
      - the base packaging environment is used to get the metadata of the project (via PEP-517) and to build `sdist` and `dev` packages,
      - for building wheels introduced a new per env configurable option `wheel_build_env`, if the target Python major/minor and implementation for the run tox environment and the base package tox environment matches set this to `.pkg`, otherwise this is `.pkg-{implementation}{major}{minor}`,
      - internally now packaging environments can create further packaging environments they are responsible of managing,
      - updated `depends` to use the packaging logic,
      - add support skip missing interpreters for depends and show config,
    
    by `gaborbernat`. (`1804`)

## v4.0.0a2 (2021-01-09)

### Features - 4.0.0a2

  - Add option to disable colored output, and support `NO_COLOR` and `FORCE_COLOR` environment variables - by `gaborbernat`. (`1630`)

### Bugfixes - 4.0.0a2

  - Fix coverage generation in CI - by `gaborbernat`. (`1551`)
  - Fix the CI failures:
      - drop Python 3.5 support as it's not expected to get to a release before EOL,
      - fix test using `\n` instead of `os.linesep`,
      - Windows Python 3.6 does not contain `_overlapped.ReadFileInto`
      - by `gaborbernat`. (`1556`)

### Improved Documentation - 4.0.0a2

  - Add base documentation by merging virtualenv structure with tox 3 - by `gaborbernat`. (`1551`)

## v4.0.0a1

  - First version all is brand new.

\> **Warning** \> The current tox is the second iteration of implementation. From version `0.5` all the way to `3.X` we numbered the first iteration. Version `4.0.0a1` is a complete rewrite of the package, and as such this release history starts from there. The old changelog is still available in the [legacy branch documentation](https://tox.wiki/en/legacy/changelog.html).

---

cli_interface.md

---

<div id="cli">

</div>

---

config.md

---

# Configuration

tox configuration can be split into two categories: core and environment specific. Core settings are options that can be set once and used for all tox environments, while environment options are applied to the given tox environment only.

## Discovery and file types

With regards to the configuration format, at the moment we support the following formats:

  - [INI](https://en.wikipedia.org/wiki/INI_file).
  - [TOML](https://toml.io/en/v1.0.0).

Out of box tox supports five configuration locations prioritized in the following order:

1.  `tox.ini` (INI),
2.  `setup.cfg` (INI),
3.  `pyproject.toml` with the `tool.tox` table, having `legacy_tox_ini` key (containing INI),
4.  Native `pyproject.toml` under the `tool.tox` table (TOML),
5.  `tox.toml` (TOML).

Historically, the INI format was created first, and TOML was added in 2024. The TOML format generally is more robust, however is less powerful and more verbose. You should use TOML unless you need some of the more advanced features that TOML does not support (such as conditional factors, generative environments to name a few -- however, PRs to add support for these in TOML is welcome).

### `tox.ini`

This configuration file uses:

  - `tox` section to host core configuration,
  - `testenv:{env_name}` section to host environment configuration,
  - `testenv` section as base configuration for run environments (fallback location for missing values for a test/run environment),
  - `pkgenv` section as base configuration for package environments (fallback location for missing values for a package environment).

For example:

`` `ini     [tox]     min_version = 4.20     env_list =         3.13         3.12         type      [testenv]     deps = pytest     commands = pytest tests      [testenv:type]     deps = mypy     commands = mypy src ``setup.cfg`  `\` \~\~\~\~\~\~\~\~\~\~\~\~\~ This configuration file uses:

  - `tox:tox` section to host core configuration,
  - `testenv:{env_name}` section to host environment configuration,
  - `testenv` section as base configuration for run environments (fallback location for missing values for a test/run environment),
  - `pkgenv` section as base configuration for package environments (fallback location for missing values for a package environment).

`` `ini     [tox:tox]     min_version = 4.0     env_list =         3.13         3.12         type      [testenv]     deps = pytest     commands = pytest tests      [testenv:type]     deps = mypy     commands = mypy src ``pyproject.toml`- INI`<span class="title-ref"> \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~ This configuration file is equivalent to \[tox.ini \<tox-ini\>\](\#tox.ini-\<tox-ini\>) format, with the difference that the text is stored instead inside the </span><span class="title-ref">pyproject.toml</span><span class="title-ref"> file under the </span><span class="title-ref">tool.tox</span><span class="title-ref"> table and </span><span class="title-ref">legacy\_tox\_ini</span>\` key:

`` `toml     [tool.tox]     legacy_tox_ini = """         [tox]         min_version = 4.0         env_list =             py310             py39             type          [testenv]         deps = pytest         commands = pytest tests          [testenv:type]         deps = mypy         commands = mypy src     """   .. _pyproject-toml-native: ``pyproject.toml`- native`\` \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~

We support native TOML configuration via the `pyproject.toml` files `tool.tox` table. This configuration file uses:

  - `tool.tox` table to host core configuration,
  - `tool.tox.env.{env_name}` table to host environment configuration,
  - `tool.tox.env_run_base` table as base configuration for run environments (fallback location for missing values for a test/run environment),
  - `tool.tox.env_pkg_base` table as base configuration for package environments (fallback location for missing values for a package environment).

`` `toml     [tool.tox]     requires = ["tox>=4.19"]     env_list = ["3.13", "3.12", "type"]      [tool.tox.env_run_base]     description = "Run test under {base_python}"     commands = [["pytest"]]      [tool.tox.env.type]     description = "run type check on code base"     deps = ["mypy==1.11.2", "types-cachetools>=5.5.0.20240820", "types-chardet>=5.0.4.6"]     commands = [["mypy", "src{/}tox"], ["mypy", "tests"]] ``tox.toml`  `\` \~\~\~\~\~\~\~\~\~\~\~\~

This configuration file is equivalent to \[pyproject.toml - native \<pyproject-toml-native\>\](\#pyproject.toml---native-\<pyproject-toml-native\>) with the difference that it lives in a separate dedicated files and accordingly the `tool.tox` sub-table is no longer required.

For example:

`` `toml     requires = ["tox>=4.19"]     env_list = ["3.13", "3.12", "type"]      [env_run_base]     description = "Run test under {base_python}"     commands = [["pytest"]]      [env.type]     description = "run type check on code base"     deps = ["mypy==1.11.2", "types-cachetools>=5.5.0.20240820", "types-chardet>=5.0.4.6"]     commands = [["mypy", "src{/}tox"], ["mypy", "tests"]]  .. _conf-core:  Core ``\` ----

The following options are set in the `[tox]` section of `tox.ini` or the `[tox:tox]` section of `setup.cfg`.

<div class="conf" data-keys="requires" default="&lt;empty list&gt;" data-version_added="3.2.0">

Specify a list of `508` compliant dependencies that must be satisfied in the Python environment hosting tox when running the tox command. If any of these dependencies are not satisfied will automatically create a provisioned tox environment that does not have this issue, and run the tox command within that environment. See \[provision\_tox\_env\](\#provision\_tox\_env) for more details.

> 
> 
> <div class="tab">
> 
> TOML
> 
> \`\`\`toml \[tool.tox\] requires = \[ "tox\>=4", "virtualenv\>20.2", \]
> 
> </div>

</div>

<div class="tab">

INI

``` ini
[tox]
requires =
    tox>=4
    virtualenv>20.2
```

</div>

  - `` ` .. conf::    :keys: min_version, minversion    :default: <current version of tox>     A string to define the minimal tox version required to run. If the host's tox version is less than this, it will    automatically create a provisioned tox environment that satisfies this requirement. See [provision_tox_env](#provision_tox_env)    for more details.  .. conf::    :keys: provision_tox_env    :default: .tox    :version_added: 3.8.0     Name of the tox environment used to provision a valid tox run environment.     .. versionchanged:: 3.23.0        When tox is invoked with the ``--no-provision`flag, the provision won't be attempted,  tox will fail instead.  .. conf::    :keys: env_list, envlist    :default: <empty list>     A list of environments to run by default (when the user does not specify anything during the invocation).     .. versionchanged:: 3.4.0        Which tox environments are run during the tox invocation can be further filtered via the operating system       environment variable`TOX\_SKIP\_ENV`regular expression (e.g.`py27.*\`\` meansdon't*\* evaluate environments  
    that start with the key `py27`). Skipped environments will be logged at level two verbosity level.

<div class="conf" data-keys="skip_missing_interpreters" default="config" data-version_added="1.7.2">

Setting this to `true` will force `tox` to return success even if some of the specified environments were missing. This is useful for some CI systems or when running on a developer box, where you might only have a subset of all your supported interpreters installed but don't want to mark the build as failed because of it. As expected, the command line switch always overrides this setting if passed on the invocation. Setting it to `config` means that the value is read from the config file.

</div>

<div class="conf" data-keys="tox_root, toxinidir">

The root directory for the tox project (where the configuration file is found).

</div>

<div class="conf" data-keys="work_dir, toxworkdir" default="{tox_root}/.tox">

Directory for tox to generate its environments into, will be created if it does not exist.

</div>

<div class="conf" data-keys="temp_dir" default="{work_dir}/.tmp">

Directory where to put tox temporary files. For example: we create a hard link (if possible, otherwise new copy) in this directory for the project package. This ensures tox works correctly when having parallel runs (as each session will have its own copy of the project package - e.g. the source distribution).

</div>

<div class="conf" data-keys="no_package, skipsdist" default="false">

Flag indicating to perform the packaging operation or not. Set it to `true` when using tox for an application, instead of a library.

</div>

<div class="conf" data-keys="package_env, isolated_build_env" default=".pkg" data-version_added="3.3.0">

Default name of the virtual environment used to create a source distribution from the source tree.

</div>

<div class="conf" data-keys="package_root, setupdir" default="{tox_root}">

Indicates where the packaging root file exists (historically setup.py file or pyproject.toml now).

</div>

<div class="conf" data-keys="labels" default="&lt;empty dictionary&gt;">

A mapping of label names to environments it applies too. For example:

> 
> 
> <div class="tab">
> 
> TOML
> 
>   - \`\`\`toml  
>     \[tool.tox\] labels = { test = \["3.13", "3.12"\], static = \["ruff", "mypy"\] }
> 
> </div>
> 
> <div class="tab">
> 
> INI
> 
> ``` ini
> [tox]
> labels =
>      test = 3.13, 3.12
>      static = ruff, mypy
> ```
> 
> </div>

</div>

<div class="conf" data-keys="on_platform" data-constant="">

A constant holding the platform of the tox runtime environment.

</div>

Python language core options `` ` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~  .. conf::    :keys: ignore_base_python_conflict, ignore_basepython_conflict    :default: True      .. versionadded:: 3.1.0      tox allows setting the Python version for an environment via the [base_python](#base_python) setting. If that's not set tox     can set a default value from the environment name (e.g. ``py310`implies Python 3.10). Matching up the Python     version with the environment name has became expected at this point, leading to surprises when some configs don't     do so. To help with sanity of users, an error will be raised whenever the environment name version does not match     up with this expectation.      Furthermore, we allow hard enforcing this rule by setting this flag to`true`. In such cases we ignore the     [base_python](#base_python) and instead always use the base Python implied from the Python name. This allows you to configure     [base_python](#base_python) in the [base](#base) section without affecting environments that have implied base Python versions.  .. _conf-testenv:  tox environment ---------------  These are configuration for the tox environments (either packaging or run type).  Base options ~~~~~~~~~~~~  .. conf::    :keys: envname, env_name    :constant:     The name of the tox environment.  .. conf::    :keys: env_dir, envdir    :default: {work_dir}/{env_name}    :version_added: 1.5     Directory assigned to the tox environment. If not absolute it would be treated as relative to [tox_root](#tox_root).  .. conf::    :keys: env_tmp_dir, envtmpdir    :default: {work_dir}/{env_name}/tmp     A folder that is always reset at the start of the run.  .. conf::    :keys: env_log_dir, envlogdir    :default: {work_dir}/{env_name}/log     A folder containing log files about tox runs. It's always reset at the start of the run. Currently contains every    process invocation in the format of`\<index\>-\<run name\>.log`, and details the execution request (command,    environment variables, current working directory, etc.) and its outcome (exit code and standard output/error    content).  .. conf::    :keys: platform     Run on platforms that match this regular expression (empty means any platform). If a non-empty expression is defined    and does not match against the`sys.platform`string the entire test environment will be skipped and none of the    commands will be executed. Running`tox -e \<platform\_name\>``will run commands for a particular platform and skip    the rest.  .. conf::    :keys: pass_env, passenv    :default: <empty list>     Environment variables to pass on to the tox environment. The values are evaluated as UNIX shell-style wildcards, see    `fnmatch <https://docs.python.org/3/library/fnmatch.html>`_  If a specified environment variable doesn't exist in the    tox invocation environment it is ignored. The list of environment variable names is not case sensitive, for example:    passing``A`or`a`will pass through both`A`and`a`.     Some variables are always passed through to ensure the basic functionality of standard library functions or tooling like    pip. This is also not case sensitive on all platforms except Windows.      .. list-table:: Environment Variables per Operating System         :widths: 25 25 25 25         :header-rows: 1          *   - Environment Variable             - Linux             - MacOS             - Windows         *   - https_proxy             - ✅             - ✅             - ✅         *   - http_proxy             - ✅             - ✅             - ✅         *   - no_proxy             - ✅             - ✅             - ✅         *   - LANG             - ✅             - ✅             - ✅         *   - LANGUAGE             - ✅             - ✅             - ✅         *   - CURL_CA_BUNDLE             - ✅             - ✅             - ✅         *   - SSL_CERT_FILE             - ✅             - ✅             - ✅         *   - CC             - ✅             - ✅             - ✅         *   - CFLAGS             - ✅             - ✅             - ✅         *   - CCSHARED             - ✅             - ✅             - ✅         *   - CXX             - ✅             - ✅             - ✅         *   - CPPFLAGS             - ✅             - ✅             - ✅         *   - LD_LIBRARY_PATH             - ✅             - ✅             - ✅         *   - LDFLAGS             - ✅             - ✅             - ✅         *   - HOME             - ✅             - ✅             - ✅         *   - FORCE_COLOR             - ✅             - ✅             - ✅         *   - NO_COLOR             - ✅             - ✅             - ✅         *   - TMPDIR             - ✅             - ✅             - ❌         *   - TEMP             - ❌             - ❌             - ✅         *   - TMP             - ❌             - ❌             - ✅         *   - USERPROFILE             - ❌             - ❌             - ✅         *   - PATHEXT             - ❌             - ❌             - ✅         *   - MSYSTEM             - ❌             - ❌             - ✅         *   - WINDIR             - ❌             - ❌             - ✅         *   - APPDATA             - ❌             - ❌             - ✅         *   - PROGRAMDATA             - ❌             - ❌             - ✅         *   - PROGRAMFILES(x86)             - ❌             - ❌             - ✅         *   - SYSTEMDRIVE             - ❌             - ❌             - ✅         *   - SYSTEMROOT             - ❌             - ❌             - ✅         *   - COMSPEC             - ❌             - ❌             - ✅         *   - PROCESSOR_ARCHITECTURE             - ❌             - ❌             - ✅         *   - NUMBER_OF_PROCESSORS             - ❌             - ❌             - ✅         *   - PIP_*             - ✅             - ✅             - ✅         *   - VIRTUALENV_*             - ✅             - ✅             - ✅         *   - NETRC             - ✅             - ✅             - ✅         *   - NIX_LD*             - ✅             - ✅             - ❌         *   - NIX_LD_LIBRARY_PATH             - ✅             - ✅             - ❌       More environment variable-related information    can be found in [environment variable substitutions](#environment-variable-substitutions).  .. conf::    :keys: set_env, setenv     A dictionary of environment variables to set when running commands in the tox environment. Lines starting with a`file|`prefix define the location of environment file.      > **Note** >         Environment files are processed using the following rules:         - blank lines are ignored,        - lines starting with the`\#`character are ignored,        - each line is in KEY=VALUE format; both the key and the value are stripped,        - there is no special handling of quotation marks, they are part of the key or value.     More environment variable-related information    can be found in [environment variable substitutions](#environment-variable-substitutions).  .. conf::    :keys: parallel_show_output    :default: False    :version_added: 3.7     If set to`True`the content of the output will always be shown  when running in parallel mode.  .. conf::    :keys: recreate    :default: False     Always recreate virtual environment if this option is true, otherwise leave it up to tox.  .. conf::    :keys: allowlist_externals    :default: <empty list>     Each line specifies a command name (in glob-style pattern format) which can be used in the commands section even if    it's located outside of the tox environment. For example: if you use the unix *rm* command for running tests you can    list`allowlist\_externals=rm`or`allowlist\_externals=/usr/bin/rm`. If you want to allow all external    commands you can use`allowlist\_externals=\*`which will match all commands (not recommended).  .. conf::    :keys: labels    :default: <empty list>    :ref_suffix: env     A list of labels to apply for this environment. For example:      .. tab:: TOML`\`toml \[tool.tox.env\_run\_base\] labels = \["test", "core"\] \[tool.tox.env.flake8\] labels = \["mypy"\]

> 
> 
> <div class="tab">
> 
> INI
> 
> ``` ini
> [testenv]
> labels = test, core
> [testenv:flake8]
> labels = mypy
> ```
> 
> </div>

Execute `` ` ~~~~~~~  .. conf::    :keys: suicide_timeout    :default: 0.0    :version_added: 3.15.2      When an interrupt is sent via Ctrl+C or the tox process is killed with a SIGTERM, a SIGINT is sent to all foreground     processes. The [suicide_timeout](#suicide_timeout) gives the running process time to cleanup and exit before receiving (in some     cases, a duplicate) SIGINT from tox.  .. conf::    :keys: interrupt_timeout    :default: 0.3    :version_added: 3.15      When tox is interrupted, it propagates the signal to the child process after [suicide_timeout](#suicide_timeout) seconds. If the     process still hasn't exited after [interrupt_timeout](#interrupt_timeout) seconds, its sends a SIGTERM.  .. conf::    :keys: terminate_timeout    :default: 0.2    :version_added: 3.15      When tox is interrupted, after waiting [interrupt_timeout](#interrupt_timeout) seconds, it propagates the signal to the child     process, waits [interrupt_timeout](#interrupt_timeout) seconds, sends it a SIGTERM, waits [terminate_timeout](#terminate_timeout) seconds, and     sends it a SIGKILL if it hasn't exited.  Run ~~~  .. conf::    :keys: base    :default: testenv    :version_added: 4.0.0     Inherit missing keys from these sections.  .. conf::    :keys: runner    :default:    :version_added: 4.0.0     The tox execute used to evaluate this environment. Defaults to Python virtual environments, however may be    overwritten by plugins.  .. conf::    :keys: description    :default: <empty string>     A short description of the environment, this will be used to explain the environment to the user upon listing    environments.  .. conf::    :keys: depends    :default: <empty list>     tox environments that this environment depends on (must be run after those).     > **Warning** > ``depends`does not pull in dependencies into the run target, for example if you select`py310,py39,coverage`via the`-e`tox will only run those three (even if`coverage`may specify as`depends`other targets too -       such as`py310, py39, py38`). This is solely meant to specify dependencies and order in between a target run       set.  .. conf::    :keys: commands_pre    :default: <empty list>    :version_added: 3.4     Commands to run before running the [commands](#commands). All evaluation and configuration logic applies from    [commands](#commands).  .. conf::    :keys: commands    :default: <empty list>     The commands to be called for testing. Only execute if [commands_pre](#commands_pre) succeed. Each line is interpreted as one    command; however a command can be split over multiple lines by ending the line with the`\`\` character.

> Commands will execute one by one in sequential fashion until one of them fails (their exit code is non-zero) or all of them succeed. The exit code of a command may be ignored (meaning they are always considered successful) by prefixing the command with a dash (`-`) - this is similar to how `make` recipe lines work. The outcome of the environment is considered successful only if all commands (these + setup + teardown) succeeded (exit code ignored via the `-` or success exit code value of zero).
> 
> \> **Note**

  - \>  
    The virtual environment binary path (see \[env\_bin\_dir\](\#env\_bin\_dir)) is prepended to the `PATH` environment variable, meaning commands will first try to resolve to an executable from within the virtual environment, and only after that outside of it. Therefore `python` translates as the virtual environments `python` (having the same runtime version as the \[base\_python\](\#base\_python)), and `pip` translates as the virtual environments `pip`.
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    `shlex` POSIX-mode quoting rules are used to split the command line into arguments on all supported platforms as of tox 4.4.0.
    
    The backslash `\` character can be used to escape quotes, whitespace, itself, and other characters (except on Windows, where a backslash in a path will not be interpreted as an escape). Unescaped single quote will disable the backslash escape until closed by another unescaped single quote. For more details, please see \[shlex parsing rules \<python:library/shlex\>\](shlex parsing rules \<python:library/shlex\>.md).
    
    </div>
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    </div>
    
    Inline scripts can be used, however note these are discovered from the project root directory, and is not influenced by \[change\_dir\](\#change\_dir) (this only affects the runtime current working directory). To make this behavior explicit we recommend that you make inline scripts absolute paths by prepending `{tox_root}`, instead of `path/to/my_script` prefer `{tox_root}{/}path{/}to{/}my_script`. If your inline script is platform dependent refer to \[platform-specification\](\#platform-specification) on how to select different script per platform.

<div class="conf" data-keys="commands_post" default="&lt;empty list&gt;">

Commands to run after running the \[commands\](\#commands). Execute regardless of the outcome of both \[commands\](\#commands) and \[commands\_pre\](\#commands\_pre). All evaluation and configuration logic applies from \[commands\](\#commands).

</div>

<div class="conf" data-keys="change_dir, changedir" default="{tox_root}">

Change to this working directory when executing the test command. If the directory does not exist yet, it will be created (required for Windows to be able to execute any command).

</div>

<div class="conf" data-keys="args_are_paths" default="False">

Treat positional arguments passed to tox as file system paths and - if they exist on the filesystem and are in relative format - rewrite them according to the current and \[change\_dir\](\#change\_dir) working directory. This handles automatically transforming relative paths specified on the CLI to relative paths respective of the commands executing directory.

</div>

<div class="conf" data-keys="ignore_errors" default="False">

When executing the commands keep going even if a sub-command exits with non-zero exit code. The overall status will be "commands failed", i.e. tox will exit non-zero in case any command failed. It may be helpful to note that this setting is analogous to the `-k` or `--keep-going` option of GNU Make.

</div>

<div class="conf" data-keys="ignore_outcome" default="False">

If set to true a failing result of this test environment will not make tox fail (instead just warn).

</div>

<div class="conf" data-keys="skip_install" default="False" data-version_added="1.9">

Skip installation of the package. This can be used when you need the virtualenv management but do not want to install the current package into that environment.

</div>

<div class="conf" data-keys="package_env" default="{package_env}" data-version_added="4.0.0" data-ref_suffix="env">

Name of the virtual environment used to create a source distribution from the source tree for this environment.

</div>

<div class="conf" data-keys="package_tox_env_type" data-version_added="4.0.0" default="virtualenv-pep-517">

tox package type used to package.

</div>

### Python options

<div class="conf" data-keys="base_python, basepython" default="&lt;{env_name} python factor&gt; or &lt;python version of tox&gt;">

Name or path to a Python interpreter which will be used for creating the virtual environment, first one found wins. This determines in practice the Python for what we'll create a virtual isolated environment. Use this to specify the Python version for a tox environment. If not specified, the virtual environments factors (e.g. name part) will be used to automatically set one. For example, `py310` means `python3.10`, `py3` means `python3` and `py` means `python`. If the name does not match this pattern the same Python version tox is installed into will be used.

> 
> 
> <div class="versionchanged">
> 
> 3.1
> 
> After resolving this value if the interpreter reports back a different version number than implied from the name a warning will be printed by default. However, if \[ignore\_basepython\_conflict\](\#ignore\_basepython\_conflict) is set, the value is ignored and we force the \[base\_python\](\#base\_python) implied from the factor name.
> 
> </div>
> 
> \> **Note**

</div>

  - \>  
    Leaving this unset will cause an error if the package under test has a different Python requires than tox itself and tox is installed into a Python that's not supported by the package. For example, if your package requires Python 3.10 or later, and you install tox in Python 3.9, when you run a tox environment that has left this unspecified tox will use Python 3.9 to build and install your package which will fail given it requires 3.10.

<div class="conf" data-keys="env_site_packages_dir, envsitepackagesdir" data-constant="">

The Python environments site package - where packages are installed (the purelib folder path).

</div>

<div class="conf" data-keys="env_bin_dir, envbindir" data-constant="">

The binary folder where console/gui scripts are generated during installation.

</div>

<div class="conf" data-keys="env_python, envpython" data-constant="">

The Python executable from within the tox environment.

</div>

### Python run

<div class="conf" data-keys="dependency_groups" default="&lt;empty list&gt;" data-version_added="4.22">

A list of names of dependency groups (as defined by `735`) to install into this Python environment. The installation will happen before installing the package or any of its dependencies.

For example:

> 
> 
> <div class="tab">
> 
> TOML
> 
>   - \`\`\`toml  
>     \[dependency-groups\] test = \[ "pytest\>=8", \]
>     
>     \[tool.tox.env\_run\_base\] dependency\_groups = \[ "test", \]
> 
> </div>
> 
> <div class="tab">
> 
> INI
> 
> ``` ini
> [testenv]
> dependency_groups =
>     test
> ```
> 
> ``` toml
> [dependency-groups]
> test = [
>    "pytest>=8",
> ]
> ```
> 
> </div>

</div>

<div class="conf" data-keys="deps" default="&lt;empty list&gt;">

Name of the Python dependencies. Installed into the environment prior to project after environment creation, but before package installation. All installer commands are executed using the \[tox\_root\](\#tox\_root) as the current working directory. Each value must be one of:

  - a Python dependency as specified by `440`,
  - a [requirement file](https://pip.pypa.io/en/stable/user_guide/#requirements-files) when the value starts with `-r` (followed by a file path),
  - a [constraint file](https://pip.pypa.io/en/stable/user_guide/#constraints-files) when the value starts with `-c` (followed by a file path).

If you are only defining `508` requirements (aka no pip requirement files), you should use \[dependency\_groups\](\#dependency\_groups) instead.

  - For example:
    
    <div class="tab">
    
    TOML
    
    ``` toml
    [tool.tox.env_run_base]
    deps = [
      "pytest>=8",
      "-r requirements.txt",
      "-c constraints.txt",
    ]
    ```
    
    </div>
    
    <div class="tab">
    
    INI
    
    ``` ini
    [testenv]
    deps =
        pytest>=7,<8
        -r requirements.txt
        -c constraints.txt
    ```
    
    </div>

</div>

<div class="conf" data-keys="use_develop, usedevelop" default="false" data-version_added="1.6">

Install the current package in development mode using `660`. This means that the package will be installed in-place and editable.

\> **Note**

</div>

  - \>  
    `package = editable` is the preferred way to enable development/editable mode. See the details in \[package\](\#package).
    
    <div class="note">
    
    <div class="title">
    
    Note
    
    </div>
    
    </div>
    
    PEP-660 introduced a standardized way of installing a package in development mode, providing the same effect as if `pip install -e` was used.

<div class="conf" data-keys="package" data-version_added="4.0">

When option can be one of `wheel`, `sdist`, `editable`, `editable-legacy`, `skip`, or `external`. If \[use\_develop\](\#use\_develop) is set this becomes a constant of `editable`. If \[skip\_install\](\#skip\_install) is set this becomes a constant of `skip`.

</div>

<div class="conf" data-keys="wheel_build_env" data-version_added="4.0" default="&lt;package_env&gt;-&lt;python-flavor-lowercase&gt;&lt;python-version-no-dot&gt;">

If \[package\](\#package) is set to `wheel` this will be the tox Python environment in which the wheel will be built. The value is generated to be unique per Python flavor and version, and prefixed with \[package\_env\](\#package\_env) value. This is to ensure the target interpreter and the generated wheel will be compatible. If you have a wheel that can be reused across multiple Python versions set this value to the same across them (to avoid building a new wheel for each one of them).

</div>

<div class="conf" data-keys="extras" data-version_added="2.4" default="&lt;empty list&gt;">

A list of "extras" from the package to be installed. For example, `extras = testing` is equivalent to `[testing]` in a `pip install` command.

</div>

<div id="external-package-builder">

External package builder `` ` ~~~~~~~~~~~~~~~~~~~~~~~~  tox supports operating with externally built packages. External packages might be provided in two ways:  - explicitly via the [--installpkg <tox-run---installpkg>](#--installpkg-<tox-run---installpkg>) CLI argument, - setting the [package](#package) to ``external`and using a tox packaging environment named`\<package\_env\>\_external``(see [package_env](#package_env)) to build the package. The tox packaging environment takes all configuration flags of a   [python environment <python-options>](#python-environment-<python-options>), plus the following:  .. conf::    :keys: deps    :default: <empty list>    :ref_suffix: external     Name of the Python dependencies as specified by :pep:`440`. Installed into the environment prior running the build    commands. All installer commands are executed using the [tox_root](#tox_root) as the current working directory.  .. conf::    :keys: commands    :default: <empty list>    :ref_suffix: external     Commands to run that will build the package. If any command fails the packaging operation is considered failed and    will fail all environments using that package.  .. conf::    :keys: ignore_errors    :default: False    :ref_suffix: external     When executing the commands keep going even if a sub-command exits with non-zero exit code. The overall status will    be "commands failed", i.e. tox will exit non-zero in case any command failed. It may be helpful to note that this    setting is analogous to the``-k`or`--keep-going`option of GNU Make.  .. conf::    :keys: change_dir, changedir    :default: {tox_root}    :ref_suffix: external     Change to this working directory when executing the package build command. If the directory does not exist yet, it    will be created (required for Windows to be able to execute any command).  .. conf::    :keys: package_glob    :default: {envtmpdir}{/}dist{/}*     A glob that should match the wheel/sdist file to install. If no file or multiple files is matched the packaging    operation is considered failed and will raise an error.   Python virtual environment ~~~~~~~~~~~~~~~~~~~~~~~~~~ .. conf::    :keys: system_site_packages, sitepackages    :default: False     Create virtual environments that also have access to globally installed packages. Note the default value may be    overwritten by the`VIRTUALENV\_SYSTEM\_SITE\_PACKAGES`environment variable.     > **Warning** >       In cases where a command line tool is also installed globally you have to make sure that you use the tool installed      in the virtualenv by using`python -m \<command line tool\>`(if supported by the tool) or`{env\_bin\_dir}/\<command line tool\>`. If you forget to do that you will get an error.  .. conf::    :keys: always_copy, alwayscopy    :default: False     Force virtualenv to always copy rather than symlink. Note the default value may be overwritten by the`VIRTUALENV\_COPIES`or`VIRTUALENV\_ALWAYS\_COPY`(in that order) environment variables.  This is useful for    situations where hardlinks don't work (e.g. running in VMS with Windows guests).  .. conf::    :keys: download    :version_added: 3.10    :default: False     True if you want virtualenv to upgrade pip/wheel/setuptools to the latest version. Note the default value may be    overwritten by the`VIRTUALENV\_DOWNLOAD`environment variable. If (and only if) you want to choose a specific    version (not necessarily the latest) then you can add`VIRTUALENV\_PIP=20.3.3`(and similar) to your [set_env](#set_env).   Python virtual environment packaging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. conf::    :keys: meta_dir    :version_added: 4.0.0    :default: {env_dir}/.meta     Directory where to put the project metadata files.  .. conf::    :keys: pkg_dir    :version_added: 4.0.0    :default: {env_dir}/.dist     Directory where to put project packages.  .. conf::    :keys: config_settings_get_requires_for_build_sdist    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`get\_requires\_for\_build\_sdist`backend API endpoint.  .. conf::    :keys: config_settings_build_sdist    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`build\_sdist`backend API endpoint.  .. conf::    :keys: config_settings_get_requires_for_build_wheel    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`get\_requires\_for\_build\_wheel`backend API endpoint.  .. conf::    :keys: config_settings_prepare_metadata_for_build_wheel    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`prepare\_metadata\_for\_build\_wheel`backend API endpoint.  .. conf::    :keys: config_settings_build_wheel    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`build\_wheel`backend API endpoint.  .. conf::    :keys: config_settings_get_requires_for_build_editable    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`get\_requires\_for\_build\_editable`backend API endpoint.  .. conf::    :keys: config_settings_prepare_metadata_for_build_editable    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`prepare\_metadata\_for\_build\_editable`backend API endpoint.  .. conf::    :keys: config_settings_build_editable    :version_added: 4.11     Config settings (`dict\[str, str\]`) passed to the`build\_editable`backend API endpoint.  .. conf::    :keys: fresh_subprocess    :version_added: 4.14.0    :default: True if build backend is setuptools otherwise False     A flag controlling if each call to the build backend should be done in a fresh subprocess or not (especially older    build backends such as`setuptools`might require this to discover newly provisioned dependencies).   Pip installer ~~~~~~~~~~~~~  .. conf::    :keys: install_command    :default: python -I -m pip install {opts} {packages}    :version_added: 1.6     Determines the command used for installing packages into the virtual environment; both the package under test and its    dependencies (defined with [deps](#deps)). Must contain the substitution key`{packages}`which will be replaced by    the package(s) to install.  You should also accept`{opts}`-- it will contain index server options such as`--pre`(configured as`pip\_pre`).     > **Note** >        You can also provide arbitrary commands to the`install\_command`. Please take care that these commands can be       executed on the supported operating systems. When executing shell scripts we recommend to not specify the script       directly but instead pass it to the appropriate shell as argument (e.g. prefer`bash script.sh`over`script.sh`).  .. conf::    :keys: list_dependencies_command    :default: python -m pip freeze --all    :version_added: 2.4     The`list\_dependencies\_command`setting is used for listing the packages installed into the virtual environment.    This command will be executed only if executing on Continuous Integrations is detected (for example set environment    variable`CI=1`) or if journal is active.   .. conf::    :keys: pip_pre    :default: false    :version_added: 1.9     If`true`, adds`--pre`to the`opts`passed to [install_command](#install_command). This will cause it to install the    latest available pre-release of any dependencies without a specified version. If`false`, pip will only install    final releases of unpinned dependencies.  .. conf::    :keys: constrain_package_deps    :default: false    :version_added: 4.4.0     If`constrain\_package\_deps`is true, then tox will create and use`{env\_dir}{/}constraints.txt`when installing    package dependencies during`install\_package\_deps`stage. When this value is set to false, any conflicting package    dependencies will override explicit dependencies and constraints passed to`deps`.  .. conf::    :keys: use_frozen_constraints    :default: false    :version_added: 4.4.0     When`use\_frozen\_constraints`is true, then tox will use the`list\_dependencies\_command`to enumerate package    versions in order to create`{env\_dir}{/}constraints.txt`. Otherwise the package specifications explicitly listed    under`deps`(or in requirements / constraints files referenced in`deps`) will be used as the constraints. If`constrain\_package\_deps`is false, then this setting has no effect.  User configuration ------------------  tox allows creation of user level config-file to modify default values of the CLI commands. It is located in the OS-specific user config directory under`tox/config.ini`path, see`tox --help`output for exact location. It can be changed via`TOX\_USER\_CONFIG\_FILE`environment variable. Example configuration:`\`ini \[tox\] skip\_missing\_interpreters = true

</div>

Set CLI flags via environment variables `` ` --------------------------------------- All configuration can be overridden via environment variables too, the naming convention here is ``[TOX]()\<option\>`. E.g.`TOX\_WORK\_DIR`sets the`--workdir`flag, or`TOX\_OVERRIDE`sets the`--override`flag. For flags accepting more than one argument, use the`;`character to separate these values:  All configuration inside the configuration file may be overwritten via the`TOX\_OVERRIDE`, note in this case the configuration file and its access (section/table + key) are needed. Here we demonstrate with a`tox.ini`file:`\`bash \# set FOO and bar as passed environment variable $ env 'TOX\_OVERRIDE=testenv.pass\_env=FOO,BAR' tox c -k pass\_env -e py \[testenv:py\] pass\_env = BAR FOO \<default pass\_envs\>

``` bash
# append FOO and bar as passed environment variable to the list already defined in
# the tox configuration
$ env 'TOX_OVERRIDE=testenv.pass_env+=FOO,BAR' tox c -k pass_env -e py
[testenv:py]
pass_env =
  BAR
  FOO
  <pass_envs defined in configuration>
  <default pass_envs>
```

``` bash
# set httpx and deps to and 3.12 as base_python
$ env 'TOX_OVERRIDE=testenv.deps=httpx;testenv.base_python=3.12' .tox/dev/bin/tox c \
      -k deps base_python -e py
[testenv:py]
deps = httpx
base_python = 3.12
```

Overriding configuration from the command line `` ` ----------------------------------------------  You can override options in the configuration file, from the command line. For example, given this config:  .. tab:: TOML ``\`toml \# tox.toml \[env\_run\_base\] deps = \["pytest"\] set\_env = { foo = "bar" } commands = \[\[ "pytest", "tests" \]\]

<div class="tab">

INI

``` ini
[testenv]
deps = pytest
set_env =
  foo=bar
commands = pytest tests
```

</div>

You could enable `ignore_errors` by running:

<div class="tab">

TOML

``` bash
tox --override env_run_base.ignore_errors=True
```

</div>

<div class="tab">

INI

``` bash
tox --override testenv.ignore_errors=True
```

</div>

You could add additional dependencies by running:

<div class="tab">

TOML

``` bash
tox --override env_run_base.deps+=pytest-xdist
```

</div>

<div class="tab">

INI

``` bash
tox --override testenv.deps+=pytest-xdist
```

</div>

You could set additional environment variables by running:

<div class="tab">

TOML

``` bash
tox --override env_run_base.set_env+=baz=quux
```

</div>

<div class="tab">

INI

``` bash
tox --override testenv.set_env+=baz=quux
```

</div>

You can specify overrides multiple times on the command line to append multiple items:

<div class="tab">

TOML

``` bash
tox -x env_run_base.set_env+=foo=bar -x env_run_base.set_env+=baz=quux
tox -x testenv_run_baseenv.deps+=pytest-xdist -x env_run_base.deps+=pytest-covt
```

</div>

<div class="tab">

INI

``` bash
tox -x testenv.set_env+=foo=bar -x testenv.set_env+=baz=quux
tox -x testenv.deps+=pytest-xdist -x testenv.deps+=pytest-covt
```

</div>

Or reset override and append to that (note the first override is `=` and not `+=`):

<div class="tab">

TOML

``` bash
tox -x env_run_base.deps=pytest-xdist -x env_run_base.deps+=pytest-cov
```

</div>

<div class="tab">

INI

``` bash
tox -x testenv.deps=pytest-xdist -x testenv.deps+=pytest-cov
```

</div>

TOML only `` ` ---------  These additional rules are active for native TOML configuration files.  String elements (excluding keys) will be transformed according to the [Substitutions <substitution>](#substitutions-<substitution>) section.  String substitution references ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  .. versionadded:: 4.21  Within strings values from other sections can be referred to via ``{\[\<table\>\]\<key\>}`:  which you can use to avoid repetition of config values. You can put default values in one section and reference them in others to avoid repeating the same values:`\`toml \[extra\] ok = "o" \[.env.B\] description = "{\[extra\]ok}"

If the target table is one of the tox environments variable substitution will be applied on the replaced value, `` ` otherwise the text will be inserted as is (e.g., here with extra).  Configuration reference ~~~~~~~~~~~~~~~~~~~~~~~ .. versionadded:: 4.21  You can reference other configurations via the ``ref`replacement. This can either be of type:   -`env`, in this case the configuration is loaded from another tox environment, where string substitution will happen   in that environments scope:`\`toml \[env.src\] extras = \["A", "{env\_name}"\] \[env.dest\] extras = \[{ replace = "ref", env = "src", key = "extras", extend = true }, "B"

> In this case `dest` environments `extras` will be `A`, `src`, `B`.

  - `raw`, in this case the configuration is loaded as raw, and substitution executed in the current environments scope:
    
    > 
    > 
    > ``` toml
    > [env.src]
    > extras = ["A", "{env_name}"]
    > [env.dest]
    > extras = [{ replace = "ref", of = ["env", "extras"], extend = true }, "B"]
    > ```
    
    In this case `dest` environments `extras` will be `A`, `dest`, `B`.

The `extend` flag controls if after replacement the value should be replaced as is in the host structure (when flag is `` ` false -- by default) or be extended into. This flag only operates when the host is a list.  Positional argument reference ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. versionadded:: 4.21  You can reference positional arguments via the ``posargs`replacement:`\`toml \[env.A\] commands = \[\["python", { replace = "posargs", default = \["a", "b"\], extend = true } \]\]

If the positional arguments are not set commands will become `python a b`, otherwise will be `python posarg-set`. `` ` The ``extend`option instructs tox to unroll the positional arguments within the host structure. Without it the result would become`\["python", \["a", "b"\]`which would be invalid.  Note that:`\`toml \[env.A\] commands = \[\["python", "{posargs}" \]\]

Differs in sense that the positional arguments will be set as a single argument, while in the original example they are `` ` passed through as separate.  Empty commands groups will be ignored: ``\`toml \[env.A\] commands = \[\[\], \["pytest\]\]

will only invoke pytest. This is especially useful together with posargs allowing you to opt out of running a set of `` ` commands: ``\`toml \[env.A\] commands = \[ { replace = "posargs", default = \["python", "patch.py"\]}, \["pytest"\] \]

When running `tox run -e A` it will invoke `python patch.py` followed by pytest. When running `tox run -e A --` it `` ` will invoke only pytest.   Environment variable reference ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. versionadded:: 4.21  You can reference environment variables via the ``env`replacement:`\`toml \[env.A\] set\_env.COVERAGE\_FILE = { replace = "env", name = "COVERAGE\_FILE", default = "ok" }

If the environment variable is set the the `COVERAGE_FILE` will become that, otherwise will default to `ok`.

References within set\_env `` ` ~~~~~~~~~~~~~~~~~~~~~~~~~ .. versionadded:: 4.21.1  When you want to inherit ``set\_env`from another environment you can use the feature that if you pass a list of dictionaries to`set\_env`they will be merged together, for example:`\`toml \[tool.tox.env\_run\_base\] set\_env = { A = "1", B = "2"}

> \[tool.tox.env.magic\] set\_env = \[ { replace = "ref", of = \["tool", "tox", "env\_run\_base", "set\_env"\]}, { C = "3", D = "4"}, \]

Here the `magic` tox environment will have both `A`, `B`, `C` and `D` environments set.

INI only `` ` -------- These additional rules are active for native INI configuration.  The value for each setting in an INI configuration will be transformed according to the [Substitutions <substitution>](#substitutions-<substitution>) section.  Substitution for values from other sections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  .. versionadded:: 1.4  Values from other sections can be referred to via::     {[sectionname]valuename}  which you can use to avoid repetition of config values. You can put default values in one section and reference them in others to avoid repeating the same values: ``\`ini \[base\] deps = pytest mock pytest-xdist

> \[testenv:dulwich\] deps = dulwich {\[base\]deps}
> 
> \[testenv:mercurial\] deps = mercurial {\[base\]deps}

Conditional settings `` ` ~~~~~~~~~~~~~~~~~~~~  - Configurations may be set conditionally within the ``tox.ini`file. If a line starts with an environment name   or names, separated by a comma, followed by`:`the configuration will only be used if the   environment name(s) matches the executed tox environment. For example:`\`ini \[testenv\] deps = pip format: black py310,py39: pytest

> Here pip will be always installed as the configuration value is not conditional. black is only used for the `format` environment, while `pytest` is only installed for the `py310` and `py39` environments.

Generative environment list `` ` ~~~~~~~~~~~~~~~~~~~~~~~~~~~  If you have a large matrix of dependencies, python versions and/or environments you can use a generative [env_list](#env_list) and conditional settings to express that in a concise form: ``\`ini \[tox\] env\_list = py{311,310,39}-django{41,40}-{sqlite,mysql}

> \[testenv\] deps = django41: Django\>=4.1,\<4.2 django40: Django\>=4.0,\<4.1 \# use PyMySQL if factors "py311" and "mysql" are present in env name py311-mysql: PyMySQL \# use urllib3 if any of "py311" or "py310" are present in env name py311,py310: urllib3 \# mocking sqlite on 3.11 and 3.10 if factor "sqlite" is present py{311,310}-sqlite: mock

This will generate the following tox environments:

``` shell
> tox l
default environments:
py311-django41-sqlite -> [no description]
py311-django41-mysql  -> [no description]
py311-django40-sqlite -> [no description]
py311-django40-mysql  -> [no description]
py310-django41-sqlite -> [no description]
py310-django41-mysql  -> [no description]
py310-django40-sqlite -> [no description]
py310-django40-mysql  -> [no description]
py39-django41-sqlite  -> [no description]
py39-django41-mysql   -> [no description]
py39-django40-sqlite  -> [no description]
py39-django40-mysql   -> [no description]
```

Generative section names `` ` ~~~~~~~~~~~~~~~~~~~~~~~~  Suppose you have some binary packages, and need to run tests both in 32 and 64 bits. You also want an environment to create your virtual env for the developers. ``\`ini \[testenv\] base\_python = py311-x86: python3.11-32 py311-x64: python3.11-64 commands = pytest

> \[testenv:py311-{x86,x64}-venv\] envdir = x86: .venv-x86 x64: .venv-x64

``` shell
> tox l
default environments:
py          -> [no description]

additional environments:
py310-black -> [no description]
py310-lint  -> [no description]
py311-black -> [no description]
py311-lint  -> [no description]
```

<div id="substitution">

Substitutions `` ` -------------  **Value substitution** operates through the ``{...}`string-substitution pattern. The string inside the curly braces may reference a global or per-environment config key as described above.  In substitutions, the backslash character`\`<span class="title-ref"> will act as an escape when preceding </span><span class="title-ref">{</span><span class="title-ref">, </span><span class="title-ref">}</span><span class="title-ref">, </span><span class="title-ref">:</span><span class="title-ref">, </span><span class="title-ref">\[</span><span class="title-ref">, or </span><span class="title-ref">\]</span>\`, otherwise the backslash will be reproduced literally:

</div>

<div class="tab">

TOML

  - \`\`\`toml
    
      - commands = \[  
        \["python", "-c", 'print("{posargs} = {}".format("{posargs}"))'\], \["python", "-c", 'print("host: {}".format("{env:HOSTNAME:host: not set}")'\],
    
    \]

</div>

<div class="tab">

INI

``` ini
commands =
  python -c 'print("\{posargs} = \{}".format("{posargs}"))'
  python -c 'print("host: \{}".format("{env:HOSTNAME:host\: not set}")'
```

</div>

Note that any backslashes remaining after substitution may be processed by `shlex` during command parsing. On POSIX `` ` platforms, the backslash will escape any following character; on windows, the backslash will escape any following quote, whitespace, or backslash character (since it normally acts as a path delimiter).  Special substitutions that accept additional colon-delimited ``:`parameters cannot have a space after the`:`at the beginning of line (e.g.`{posargs: magic}`would be parsed as factorial`{posargs``, having value magic).  .. _`environment variable substitutions`:  Environment variable substitutions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  If you specify a substitution string like this::      {env:KEY}  then the value will be retrieved as``os.environ\['KEY'\]`and raise an Error if the environment variable does not exist.   Environment variable substitutions with default values ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  If you specify a substitution string like this::      {env:KEY:DEFAULTVALUE}  then the value will be retrieved as`os.environ\['KEY'\]`and replace with DEFAULTVALUE if the environment variable does not exist.  If you specify a substitution string like this::      {env:KEY:}  then the value will be retrieved as`os.environ\['KEY'\]`and replace with an empty string if the environment variable does not exist.  Substitutions can also be nested. In that case they are expanded starting from the innermost expression::      {env:KEY:{env:DEFAULT_OF_KEY}}  the above example is roughly equivalent to`os.environ.get('KEY', os.environ\['DEFAULT\_OF\_KEY'\])`Interactive shell substitution ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  .. versionadded:: 3.4.0  It's possible to inject a config value only when tox is running in interactive shell (standard input)::      {tty:ON_VALUE:OFF_VALUE}  The first value is the value to inject when the interactive terminal is available, the second value is the value to use when it's not (optional). A good use case for this is e.g. passing in the`--pdb``flag for pytest.  .. _`command positional substitution`: .. _`positional substitution`:  Substitutions for positional arguments in commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  .. versionadded:: 1.0  If you specify a substitution string like this::      {posargs:DEFAULTS}  then the value will be replaced with positional arguments as provided to the tox command::      tox arg1 arg2  In this instance, the positional argument portion will be replaced with``arg1 arg2`. If no positional arguments were specified, the value of DEFAULTS will be used instead. If DEFAULTS contains other substitution strings, such as`{env:\*}`, they will be interpreted.,  Use a double`--`if you also want to pass options to an underlying test command, for example::      tox run -e 3.13 -- --opt1 ARG1  will make the`--opt1 ARG1`appear in all test commands where`\[\]`or`{posargs}`was specified.  By default (see`args\_are\_paths`setting),`tox`rewrites each positional argument if it is a relative path and exists on the filesystem to become a path relative to the`changedir`setting.  Other Substitutions ~~~~~~~~~~~~~~~~~~~  *`{:}`- replaced as`os.pathsep`*`{/}`- replaced as`os.sep\`\`

---

development.md

---

# Development

## Key points

If you're already experienced with submitting GitHub PRs to open-source Python projects, the following are the key points you need to know about this project. (If you're not, you should carefully read all the documentation after this section. This section contains only highlights; it's not a substitute for reading this entire file.)

  - Check the [style guide](#code-style-guide) below. Note that `tox -e fix` will not catch the following:
      - Lines wrapped at less than 120 characters. Lines should be wrapped at 120 characters, not the PEP-8 standard of 79.
      - Variable names should be at least two characters long.
  - Documentation is in [RST](https://docutils.sourceforge.io/docs/user/rst/quickref.html) format; beware the differences from GitHub Markdown. The tox `docs` and `fix` targets will catch only some RST errors; documentation changes *must* be checked visually (see below).
  - All PRs that make changes visible to an end user require a changelog entry. This should reference an issue if it closes that issue, otherwise reference the PR. Create one or more (if there's more than one issue) `docs/changelog/####.{feature,bugfix,doc,removal,misc}.rst` per the [changelog entry](#changelog-entries) section below.
  - GitHub Actions will do a full set of [tests and checks](#automated-testing) when the PR is submitted. For local testing you'll need to install your own "top-level" tox (using [pipx]() or similar is fine) and use the following targets (tox environments):
      - `tox -e py [-- {pytest-arg ...}]` to [test code changes](#running-tests). This will skip tests for which you are missing dependencies, but those tests will still be run by GitHub Actions.
      - `tox -e type` to typecheck changes. (All new code should have complete type annotations.)
      - `tox -e docs` to build documentation changes and update the changelog, followed by viewing (with a browser) the generated HTML files under `.tox/docs_out/`. The required changelog entry can be viewed at the "Release History" link at the left.
      - `tox -e fix` to lint code, documentation and any other changes to the repo. This will also fix the code and write out the changed files; you can update your commit with <span class="title-ref">git commit --amend</span>.

## Getting started

`tox` is a volunteer maintained open source project and we welcome contributions of all forms. The sections below will help you get started with development, testing, and documentation. We’re pleased that you are interested in working on tox. This document is meant to get you setup to work on tox and to act as a guide and reference to the development setup. If you face any issues during this process, please `open an issue <new?title=Trouble+with+development+environment>` about it on the issue tracker.

### Setup

tox is a command line application written in Python. To work on it, you'll need:

  - **Source code**: available on :gh\_repo:<span class="title-ref">GitHub \<tox-dev/tox\></span>. You can use `git` to clone the repository:
      - \`\`\`shell  
        git clone <https://github.com/tox-dev/tox> cd tox
  - **Python interpreter**: We recommend using `CPython`. You can use [this guide](https://realpython.com/installing-python/) to set it up.
  - `tox`: to automatically get the projects development dependencies and run the test suite. We recommend installing it using [pipx](https://pipxproject.github.io/pipx/).

Running from source tree `` ` ~~~~~~~~~~~~~~~~~~~~~~~~  The easiest way to do this is to generate the development tox environment, and then invoke tox from under the ``.tox/dev`folder`\`shell tox -e dev .tox/dev/bin/tox \# on Linux .tox/dev/Scripts/tox \# on Windows

Running tests `` ` ~~~~~~~~~~~~~  tox's tests are written using the :pypi:`pytest` test framework. :pypi:`tox` is used to automate the setup and execution of tox's tests.  To run tests locally execute: ``\`shell tox -e py

This will run the test suite for the same Python version as under which `tox` is installed. Alternatively you can `` ` specify a specific version of Python by using the ``pyNN`format, such as:`py38`,`pypy3`, etc.`tox`has been configured to forward any additional arguments it is given to`pytest``. This enables the use of pytest's `rich CLI <https://docs.pytest.org/en/latest/how-to/usage.html#specifying-which-tests-to-run>`_. As an example, you can select tests using the various ways that pytest provides:``\`shell \# Using markers tox -e py -- -m "not slow" \# Using keywords tox -e py -- -k "test\_extra"

Some tests require additional dependencies to be run, such is the various shell activators (`bash`, `fish`, `` ` ``powershell``, etc). The tests will be skipped automatically if the dependencies are not present. Please note however that in CI all tests are run; so even if all tests succeed locally for you, they may still fail in the CI.  Running linters ~~~~~~~~~~~~~~~  tox uses :pypi:`pre-commit` for managing linting of the codebase.``pre-commit`performs various checks on all files in tox and uses tools that help following a consistent code style within the codebase. To use linters locally, run:`\`shell tox -e fix

\> **Note** \> Avoid using `# noqa` comments to suppress linter warnings - wherever possible, warnings should be fixed instead. `# noqa` comments are reserved for rare cases where the recommended style causes severe readability problems or sidestep bugs within the linters.

Code style guide `` ` ~~~~~~~~~~~~~~~~  - First and foremost, the linters configured for the project must pass; this generally means following PEP-8 rules,   as codified by: ``flake8`,`black`,`isort`,`pyupgrade`. - The supported Python versions (and the code syntax to use) are listed in the`pyproject.toml`file   in the`project/requires-python`entry. However, there are some files that have to be kept compatible   with Python 2.7 to allow and test for running Python 2 envs from tox. They are listed in`.pre-commit-config.yaml`under`repo: <https://github.com/asottile/pyupgrade>`under`hooks/exclude`.   Please do not attempt to modernize them to Python 3.x. - All code (tests too) must be type annotated as much as required by`mypy`. - We use a line length of 120. - Exception messages should only be capitalized (and ended with a period/exclamation mark) if they are multi-sentenced,   which should be avoided. Otherwise, use statements that start with lowercase. - All function (including test) names must follow PEP-8, so they must be fully snake cased. All classes are upper   camel-cased. - Prefer f-strings instead of the`str.format``method. - Tests should contain as little information as possible but do use descriptive variable names within it.  Building documentation ~~~~~~~~~~~~~~~~~~~~~~  tox's documentation is built using :pypi:`Sphinx`. The documentation is written in reStructuredText. To build it locally, run:``\`shell tox -e docs

The built documentation can be found in the `.tox/docs_out` folder and may be viewed by opening `index.html` within `` ` that folder.   Contributing -------------  Submitting pull requests ~~~~~~~~~~~~~~~~~~~~~~~~  Submit pull requests (PRs) against the ``main`branch, providing a good description of what you're doing and why. You must have legal permission to distribute any code you contribute to tox and it must be available under the MIT License. Provide tests that cover your changes and run the tests locally first. tox [supports <compatibility-requirements>](#supports-<compatibility-requirements>) multiple Python versions and operating systems. Any pull request must consider and work on all these platforms.  Pull requests should be small to facilitate review. Keep them self-contained, and limited in scope. Studies have shown that review quality falls off as patch size grows. In particular, pull requests must not be treated as "feature branches", with ongoing development work happening within the PR. Instead, the feature should be broken up into smaller, independent parts which can be reviewed and merged individually.  Additionally, avoid including "cosmetic" changes to code that is unrelated to your change, as these make reviewing the PR more difficult. Examples include re-flowing text in comments or documentation, or addition or removal of blank lines or whitespace within lines. Such changes can be made separately, as a "formatting cleanup" PR, if needed.  Automated testing ~~~~~~~~~~~~~~~~~  All pull requests and merges to the`main``branch are tested using :gh:`GitHub Actions <features/actions>` (configured by``check.yml`file inside the`.github/workflows`directory). You can find the status and the results to the CI runs for your PR on GitHub's Web UI for the pull request. You can also find links to the CI services' pages for the specific builds in the form of "Details" links, in case the CI run fails and you wish to view the output.  To trigger CI to run again for a pull request, you can close and open the pull request or submit another change to the pull request. If needed, project maintainers can manually trigger a restart of a job/build.  Changelog entries ~~~~~~~~~~~~~~~~~  The`changelog.rst``file is managed using :pypi:`towncrier` and all changes must be accompanied by a changelog entry. To add an entry to the changelog, first you need to have created an issue describing the change you want to make. A pull request itself *may* function as such, but it is preferred to have a dedicated issue (for example, in case the PR ends up rejected due to code quality reasons).  There is no need to create an issue for trivial changes, e.g. for typo fixes.  Once you have an issue or pull request, you take the number and you create a file inside of the``docs/changelog`directory named after that issue number with an extension of:  -`feature.rst`, -`bugfix.rst`, -`doc.rst`, -`removal.rst`, -`misc.rst`.  Thus if your issue or PR number is`1234`and this change is fixing a bug, then you would create a file`docs/changelog/1234.bugfix.rst`. PRs can span multiple categories by creating multiple files (for instance, if you added a feature and deprecated/removed the old feature at the same time, you would create`docs/changelog/1234.bugfix.rst`and`docs/changelog/1234.remove.rst``). Likewise if a PR touches multiple issues/PRs you may create a file for each of them with the same contents and :pypi:`towncrier` will deduplicate them.  Contents of a changelog entry ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  The content of this file is reStructuredText formatted text that will be used as the content of the changelog entry. You do not need to reference the issue or PR numbers here as towncrier will automatically add a reference to all of the affected issues when rendering the changelog. You may append``- by :user:USERNAME`, with a GitHub username in backticks, if you wish.  In order to maintain a consistent style in the`changelog.rst`file, it is preferred to keep the entries to the point, in sentence case, shorter than 120 characters and in an imperative tone -- an entry should complete the sentence`This change will …`. In rare cases, where one line is not enough, use a summary line in an imperative tone followed by a blank line separating it from a description of the feature/change in one or more paragraphs, each wrapped at 120 characters. Remember that a changelog entry is meant for end users and should only contain details relevant to an end user.  An example of`docs/changelog/\#\#\#\#.bugfix.rst`contents is:  .. code-block::      Instead of raising`UnicodeDecodeError`when command output includes non-utf-8 bytes,`tox`will now use`surrogateescape``error handling to convert the unrecognized bytes to escape sequences according to :pep:`383`     - by :user:`masenf`   Becoming a maintainer ~~~~~~~~~~~~~~~~~~~~~  If you want to become an official maintainer, start by helping out. As a first step, we welcome you to triage issues on tox's issue tracker. tox maintainers provide triage abilities to contributors once they have been around for some time and contributed positively to the project. This is optional and highly recommended for becoming a tox maintainer. Later, when you think you're ready, get in touch with one of the maintainers and they will initiate a vote among the existing maintainers.  > **Note** >      Upon becoming a maintainer, a person should be given access to various tox-related tooling across multiple     platforms. These are noted here for future reference by the maintainers:      - GitHub Push Access (provides also CI administration capabilities)     - PyPI Publishing Access     - ReadTheDocs Administration capabilities (the root domain `tox.wiki <https://tox.wiki/en/latest/>`_ is currently       owned and maintained by the primary maintainer and author``Bernat Gabor``; bought via       `Porkbun <https://porkbun.com/>`_       -- reach out to him directly for any changes).  Creating a new release ~~~~~~~~~~~~~~~~~~~~~~  > **Note** >      The following process assumes that you call the``remote`for the main repository for tox`upstream`.      .. code:: shell          git remote add upstream git@github.com:tox-dev/tox.git  In order to create a new release, a maintainer needs to run the following command::      tox r -e release -- <version>  You need to replace`\<version\>\`<span class="title-ref"> with an actual version number according to \`Semantic Versioning \<https://semver.org/\></span>\_.

#### Current maintainers

  - `Anthony Sottile <asottile>`
  - `Bernát Gábor <gaborbernat>`
  - `Jürgen Gmach <jugmac00>`
  - `Masen Furer <masenf>`
  - `Oliver Bestwalter <obestwalter>`

---

faq.md

---

# FAQ

Here you'll find answers to some frequently asked questions.

## Breaking changes in tox 4

Version 4 of tox should be mostly backwards compatible with version 3. Exceptions and guidance for migrating are given in the \[upgrading doc \<upgrading\>\](\#upgrading-doc-\<upgrading\>).

## New features in tox 4

Here is a non-exhaustive list of these.

  - You can now build wheel(s) instead of a source distribution during the packaging phase by using the `wheel` setting for the \[package\](\#package) setting. If your package is a universal wheel you'll likely want to set the \[wheel\_build\_env\](\#wheel\_build\_env) to `.pkg` to avoid building a wheel for every Python version you target.

  - Editable wheel support was added as defined by `660` via the \[package\](\#package) setting to `editable`.

  - We redesigned our CLI interface, we no longer try to squeeze everything under single command, instead now we have multiple sub-commands. For backwards compatibility if you do not specify a subcommand we'll assume you want the tox 3 legacy interface (available under the legacy subcommand), for now the list of available commands are:
    
    \`\`\`bash subcommands: tox command to execute (by default legacy)
    
    >   - {run,r,run-parallel,p,depends,de,list,l,devenv,d,config,c,quickstart,q,exec,e,legacy,le}  
    >     run (r) run environments run-parallel (p) run environments in parallel depends (de) visualize tox environment dependencies list (l) list environments devenv (d) sets up a development environment at ENVDIR based on the tox configuration specified config (c) show tox configuration quickstart (q) Command line script to quickly create a tox config file for a Python project exec (e) execute an arbitrary command within a tox environment legacy (le) legacy entry-point command

The `exec` and `depends` are brand new features. Other subcommands are a more powerful versions of previously existing single flags (e.g. `-av` is now succeeded by the `list` subcommand). All subcommands have a one or two character shortcuts for less typing on the CLI (e.g. `tox run` can be abbreviated to `tox r`). For more details see \[cli\](\#cli). `` ` - Startup times should be improved because now we no longer eagerly load all configurations for all environments, but   instead these are performed lazily when needed. Side-effect of this is that if you have an invalid configuration will   not be picked up until you try to use it. - We now discover your package dependency changes (either via :pep:`621` or otherwise via :pep:`517` ``prepare\_metadata\_for\_build\_wheel`/`build\_wheel`metadata). If new dependencies are added these will be installed   on the next run. If a dependency is removed we'll recreate the entire environment. This works for`requirements`files within the [deps](#deps). This means that you should never need to use`--recreate`flag, tox should be smart   enough to figure out when things change and automatically apply it. - All tox defaults can now be changed via the user level config-file (see help message output for its location, can be   changed via`TOX\_CONFIG\_FILE`environment variable). - All tox defaults can now be changed via an environment variable:`[TOX]()`prefix followed by the settings key,   e.g.`TOX\_PACKAGE=wheel`. - Any configuration can be overridden via the CLI`-x`or`--override`flag, e.g.`tox run -e py311 -x testenv:py311.package=editable`would force the packaging of environment`py311`to be an   editable install independent what's in the configuration file. - [basepython](#basepython) is now a list, the first successfully detected python will be used to generate python environment. - We now have support for inline tox plugins via the`toxfile.py`at the root of your project. At a later time this   will allow using Python only configuration, as seen with nox. - You can now group tox environments via [labels](#labels) configuration, and you can invoke all tox environments within a   label by using the`-m label`CLI flag (instead of the`-e list\_of\_envs`). - You can now invoke all tox environments within a given factor via the`-f factor`CLI flag.  .. _faq_custom_pypi_server:  Using a custom PyPI server -------------------------- By default tox uses pip to install Python dependencies. Therefore to change the index server you should configure pip directly. pip accepts environment variables as configuration flags, therefore the easiest way to do this is to set the`PIP\_INDEX\_URL`environment variable:`\`ini set\_env = PIP\_INDEX\_URL = <https://tox.wiki/pypi/simple>

It's considered a best practice to allow the user to change the index server rather than hard code it, allowing them to `` ` use for example a local cache when they are offline. Therefore, a better form of this would be: ``\`ini set\_env = PIP\_INDEX\_URL = {env:PIP\_INDEX\_URL:<https://tox.wiki/pypi/simple>}

Here we use an environment substitution to set the index URL if not set by the user, but otherwise default to our target `` ` URI.  Using two PyPI servers ----------------------  When you want to use two PyPI index servers because not all dependencies are found in either of them use the ``PIP\_EXTRA\_INDEX\_URL`environment variable:`\`ini set\_env = PIP\_INDEX\_URL = {env:PIP\_INDEX\_URL:<https://tox.wiki/pypi/simple-first>} PIP\_EXTRA\_INDEX\_URL = {env:PIP\_EXTRA\_INDEX\_URL:<https://tox.wiki/pypi/simple-second>}

If the index server defined under `PIP_INDEX_URL` does not contain a package, pip will attempt to resolve it also from `` ` the URI from ``PIP\_EXTRA\_INDEX\_URL`.  > **Warning** >    Using an extra PyPI index for installing private packages may cause security issues. For example, if`package1`is   registered with the default PyPI index, pip will install`package1``from the default PyPI index, not from the extra   one.  Using constraint files ---------------------- `Constraint files <https://pip.pypa.io/en/stable/user_guide/#constraints-files>`_ are a type of artifact, supported by pip, that define not what requirements to install but instead what version constraints should be applied for the otherwise specified requirements. The constraint file must always be specified together with the requirement(s) to install. While creating a test environment tox will invoke pip multiple times, in separate phases:  1. If [deps](#deps) is specified, it will install a set of dependencies before installing the package. 2. If the target environment contains a package (the project does not have [package](#package)``skip`or    [skip_install](#skip_install) is`true`), it will:     1. install the dependencies of the package.    2. install the package itself.  Starting in tox 4.4.0, when`constrain\_package\_deps = true`is set in the test environment,`{env\_dir}{/}constraints.txt`will be generated during`install\_deps`based on the package specifications listed under`deps`. These constraints are subsequently passed to pip during the`install\_package\_deps`stage, causing an error to be raised when the package dependencies conflict with the test environment dependencies.  For stronger guarantees, set`use\_frozen\_constraints = true`in the test environment to generate the constraints file based on the exact versions enumerated by the`list\_dependencies\_command`(`pip freeze`).  When using frozen constraints, if the package deps are incompatible with any previously installed dependency, an error will be raised. To use constraints with url, path, or "extras" (`.\[tests\]`) deps, then you must`use\_frozen\_constraints`, as these types of deps are not valid constraints as specified (see pypa/pip#8210).  Note constraint files are a subset of requirement files. Therefore, it's valid to pass a constraint file wherever you can specify a requirement file.  .. _platform-specification:  Platform specification ----------------------  Assuming the following layout:`\`shell tox.ini \# see below for content setup.py \# a classic distutils/setuptools setup.py file

and the following `tox.ini` content:

``` ini
[tox]
min_version = 2.0  # platform specification support is available since version 2.0
envlist = py{310,39}-{lin,mac,win}

[testenv]
# environment will be skipped if regular expression does not match against the sys.platform string
platform = lin: linux
           mac: darwin
           win: win32

# you can specify dependencies and their versions based on platform filtered environments
deps = lin,mac: platformdirs==3
       win: platformdirs==2

# upon tox invocation you will be greeted according to your platform
commands=
   lin: python -c 'print("Hello, Linus!")'
   mac: python -c 'print("Hello, Tim!")'
   win: python -c 'print("Hello, Satya!")'
```

You can invoke `tox` in the directory where your `tox.ini` resides. `tox` creates two virtualenv environments `` ` with the ``python3.10`and`python3.9`interpreters, respectively, and will then run the specified command according to platform you invoke`tox`at.  Ignoring the exit code of a given command -----------------------------------------  When multiple commands are defined within the [commands](#commands) configuration field tox will run them sequentially until one of them fails (by exiting with non zero exit code) or all of them are run. If you want to ignore the status code of a given command add a`-`prefix to that line (similar syntax to how the GNU`make`handles this):`\`ini \[testenv\] commands = - python -c 'import sys; sys.exit(1)' python --version

You can also choose to provide a `!` prefix instead to purposely invert the exit code, making the line fail if the `` ` command returned exit code 0. Any other exit code is considered a success. ``\`ini \[testenv\] commands = \! python -c 'import sys; sys.exit(1)' python --version

Customizing virtual environment creation `` ` ----------------------------------------  By default tox uses the :pypi:`virtualenv` to create Python virtual environments to run your tools in. To change how tox creates virtual environments you can set environment variables to customize virtualenv. For example, to provision a given pip version in the virtual environment you can set ``VIRTUALENV\_PIP`or to enable system site packages use the`VIRTUALENV\_SYSTEM\_SITE\_PACKAGES`:`\`ini \[testenv\] setenv = VIRTUALENV\_PIP==22.1 VIRTUALENV\_SYSTEM\_SITE\_PACKAGES=true

Consult the `virtualenv` project for supported values (any CLI flag for virtualenv, in all upper case, prefixed by `` ` the ``[VIRTUALENV]()`key).  Building documentation with Sphinx ----------------------------------  It's possible to orchestrate the projects documentation with tox. The advantage of this is that now generating the documentation can be part of the CI, and whenever any validations/checks/operations fail while generating the documentation you'll catch it within tox.  We don't recommend using the Make and Batch file generated by Sphinx, as this makes your documentation generation platform specific. A better solution is to use tox to setup a documentation build environment and invoke sphinx inside it. This solution is cross platform.  For example if the sphinx file structure is under the`docs`folder the following configuration will generate the documentation under`.tox/docs\_out/index.html`and print out a link to the generated documentation:`\`ini \[testenv:docs\] description = build documentation basepython = python3.10 deps = sphinx\>=4 commands = sphinx-build -d "{envtmpdir}{/}doctree" docs "{toxworkdir}{/}docs\_out" --color -b html python -c 'print(r"documentation available under [file://{toxworkdir}{/}docs\_out{/}index.html](file://%7Btoxworkdir%7D%7B/%7Ddocs_out%7B/%7Dindex.html)")'

Note here we also require Python 3.10, allowing us to use f-strings within the sphinx `conf.py`.

Building documentation with mkdocs `` ` ----------------------------------  It's possible to orchestrate the projects documentation with tox. The advantage of this is that now generating the documentation can be part of the CI, and whenever any validations/checks/operations fail while generating the documentation you'll catch it within tox.  It's best to define one environment to write/generate the documentation, and another to deploy it. Use the config substitution logic to avoid duplication: ``\`ini \[testenv:docs\] description = Run a development server for working on documentation deps = mkdocs\>=1.3 mkdocs-material commands = mkdocs build --clean python -c 'print("\#\#\#\#\#\# Starting local server. Press Control+C to stop server \#\#\#\#\#\#")' mkdocs serve -a localhost:8080

> \[testenv:docs-deploy\] description = built fresh docs and deploy them deps = {\[testenv:docs\]deps} commands = mkdocs gh-deploy --clean

Understanding `InvocationError` exit codes `` ` --------------------------------------------  When a command executed by tox fails, it always has a non-zero exit code and an ``InvocationError`exception is raised:`\`shell ERROR: InvocationError for command '\<command defined in tox.ini\>' (exited with code 1)

Generally always check the documentation for the command executed to understand what the code means. For example for `` ` :pypi:`pytest` you'd read `here <https://docs.pytest.org/en/latest/reference/exit-codes.html#exit-codes>`_. On unix systems, there are some rather `common exit codes <http://www.faqs.org/docs/abs/HTML/exitcodes.html>`_. This is why for exit codes larger than 128, if a signal with number equal to ``\<exit code\> - 128``is found in the :py:mod:`signal` module, an additional hint is given:``\`shell ERROR: InvocationError for command '\<command\>' (exited with code 139) Note: this might indicate a fatal error signal (139 - 128 = 11: SIGSEGV)

The signal numbers (e.g. 11 for a segmentation fault) can be found in the "Standard signals" section of the `` ` `signal man page <https://man7.org/linux/man-pages/man7/signal.7.html>`_. Their meaning is described in `POSIX signals <https://en.wikipedia.org/wiki/Signal_(IPC)#POSIX_signals>`_. Beware that programs may issue custom exit codes with any value, so their documentation should be consulted.   Sometimes, no exit code is given at all. An example may be found in :gh:`pytest-qt issue #170 <pytest-dev/pytest-qt/issues/170>`, where Qt was calling `abort() <https://unix.org/version2/sample/abort.html>`_ instead of ``exit()`.  Access full logs ----------------  If you want to access the full logs you need to write`-q`and`-v``as individual tox arguments and avoid combining them into a single one.  Running within a Docker container ---------------------------------  If you want to run tox within a Docker container you can use `31z4/tox <https://hub.docker.com/r/31z4/tox>`_. This Docker image neatly packages tox along with common build dependencies (e.g.,``make`,`gcc``, etc) and currently `active CPython versions <https://devguide.python.org/versions/#status-of-python-versions>`_. See more details in its `GitHub repository <https://github.com/31z4/tox-docker>`_.  The recommended way of using the image is to mount the directory that contains your tox configuration files and your code as a volume. Assuming your project is within the current directory of the host, use the following command to run tox without any flags:``\`shell docker run -v \`pwd\`:/tests -it --rm 31z4/tox

Because an entry point of the image is `tox`, you can easily pass subcommands and flags:

``` shell
docker run -v `pwd`:/tests -it --rm 31z4/tox run-parallel -e black,py311
```

Note, that the image is configured with a working directory at `/tests`.

If you want to install additional Python versions/implementations or Ubuntu packages you can create a derivative image. `` ` Just make sure you switch the user to ``root`when needed and switch back to`tox`afterwards:`\`Dockerfile FROM 31z4/tox

> USER root
> 
> RUN set -eux; apt-get update; DEBIAN\_FRONTEND=noninteractive apt-get install -y --no-install-recommends python3.12; rm -rf /var/lib/apt/lists/\*
> 
> USER tox

<div id="eol-version-support">

Testing end-of-life Python versions `` ` ----------------------------------- ``tox`uses`virtualenv``under its hood for managing virtual environments. `Virtualenv 20.22.0 <https://virtualenv.pypa.io/en/latest/changelog.html#v20-22-0-2023-04-19>`_ dropped support for all Python versions smaller or equal to Python 3.6.  If you need to test against e.g. Python 2.7, 3.5 or 3.6, you need to add the following``requires`statement to your`tox.ini`configuration files.`\`ini \[tox\] requires = virtualenv\<20.22.0

</div>

In case you need to do this for many repositories, we recommend to use `` ` `all-repos <https://github.com/asottile/all-repos>`_.  Support for Python 3.7 was dropped in `virtualenv 20.27.0 <https://virtualenv.pypa.io/en/latest/changelog.html#v20-27-0-2024-10-17>`_. In order to test against Python 3.7, you can limit the version with ``requires = virtualenv\<20.27.0`instead.   Testing with Pytest -------------------  Running`pytest`from`tox`can be configured like this:`\`ini \[tox\] envlist = py311, py312

> \[testenv\] commands = pytest

If required, `tox` positional arguments can be passed through to `pytest`:

``` ini
[testenv]
commands = pytest {posargs}
```

When running `tox` in parallel mode (\[tox-run-parallel-(p)\](\#tox-run-parallel-(p))), care should be taken to ensure concurrent `` ` ``pytest`invocations are fully isolated.  This can be achieved by setting`pytest`'s base temporary directory to a unique temporary directory for each virtual environment as provided by`tox`:`\`ini \[testenv\] commands = pytest --basetemp="{env\_tmp\_dir}"

Setting the `pytest` `--basetemp` argument also causes all temporary `pytest` files to be deleted immediately `` ` after the tests are completed. To restore the default ``pytest`behavior to retain temporary files for the most recent`pytest`invocations, the system's temporary directory location could be configured like this instead:`\`ini \[tox\] set\_env = TEMP = {env\_tmp\_dir}

\[testenv\] commands = pytest \`\`\`

---

index.md

---

# tox - automation project

`tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software (alongside [pytest](https://docs.pytest.org/en/latest/) and [devpi](https://www.devpi.net)).

[![Latest version on PyPI](https://img.shields.io/pypi/v/tox?style=flat-square)](https://pypi.org/project/tox/#history)

![PyPI - Implementation](https://img.shields.io/pypi/implementation/tox?style=flat-square)

![PyPI - Python Version](https://img.shields.io/pypi/pyversions/tox?style=flat-square)

[![Documentation status](https://readthedocs.org/projects/tox/badge/?version=latest&style=flat-square)](https://tox.wiki/en/latest/)

[![Discord](https://img.shields.io/discord/802911963368783933?style=flat-square)](https://discord.com/invite/tox)

[![PyPI - Downloads](https://img.shields.io/pypi/dm/tox?style=flat-square)](https://pypistats.org/packages/tox)

[![PyPI - License](https://img.shields.io/pypi/l/tox?style=flat-square)](https://opensource.org/license/mit)

[![Open issues](https://img.shields.io/github/issues/tox-dev/tox?style=flat-square)](https://github.com/tox-dev/tox/issues)

[![Open pull requests](https://img.shields.io/github/issues-pr/tox-dev/tox?style=flat-square)](https://github.com/tox-dev/tox/pulls)

[![Package popularity](https://img.shields.io/github/stars/tox-dev/tox?style=flat-square)](https://pypistats.org/packages/tox)

tox is a generic virtual environment management and test command line tool you can use for:

  - checking your package builds and installs correctly under different environments (such as different Python implementations, versions or installation dependencies),
  - running your tests in each of the environments with the test tool of choice,
  - acting as a frontend to continuous integration servers, greatly reducing boilerplate and merging CI and shell-based testing.

## Useful links

**Related projects**

tox has influenced several other projects in the Python test automation space. If tox doesn't quite fit your needs or you want to do more research, we recommend taking a look at these projects:

  - [Invoke](https://www.pyinvoke.org/) is a general-purpose task execution library, similar to Make. Invoke is far more general-purpose than tox but it does not contain the Python testing-specific features that tox specializes in.
  - [nox](https://nox.thea.codes/en/stable/) is a project similar in spirit to tox but different in approach. Nox's key difference is that it uses Python scripts instead of a configuration file. Nox might be useful if you find tox's configuration too limiting but aren't looking to move to something as general-purpose as Invoke or Make.

**Tutorials**

  - [Oliver Bestwalter - Automating Build, Test and Release Workflows with tox](https://www.youtube.com/watch?v=PrAyvH-tm8E)
  - [Bernat Gabor - Standardize Testing in Python](https://www.youtube.com/watch?v=SFqna5ilqig)

<div class="toctree" hidden="">

installation user\_guide cli\_interface config faq plugins plugins\_api development changelog upgrading

</div>

---

installation.md

---

# Installation

## As tool

`tox` is a CLI tool that needs a Python interpreter (version 3.7 or higher) to run. We recommend either `pipx` or `uv` to install tox into an isolated environment. This has the added benefit that later you'll be able to upgrade tox without affecting other parts of the system. We provide method for `pip` too here but we discourage that path if you can:

<div class="tab">

uv

  - \`\`\`bash  
    \# install uv per <https://docs.astral.sh/uv/#getting-started> uv tool install tox tox --help

</div>

<div class="tab">

pipx

``` bash
python -m pip install pipx-in-pipx --user
pipx install tox
tox --help
```

</div>

<div class="tab">

pip

``` bash
python -m pip install --user tox
python -m tox --help
```

You can install it within the global Python interpreter itself (perhaps as a user package via the `--user` flag). Be cautious if you are using a Python installation that is managed by your operating system or another package manager. `pip` might not coordinate with those tools, and may leave your system in an inconsistent state. Note, if you go down this path you need to ensure pip is new enough per the subsections below

</div>

wheel `` ` ~~~~~ Installing tox via a wheel (default with pip) requires an installer that can understand the ``python-requires``tag (see :pep:`503`), with pip this is version``9.0.0`(released in November 2016). Furthermore, in case you're not installing it via PyPI you need to use a mirror that correctly forwards the`python-requires``tag (notably the OpenStack mirrors don't do this, or older :gh_repo:`devpi/devpi` versions - added with version``4.7.0``).  .. _sdist:  sdist ~~~~~ When installing via a source distribution you need an installer that handles the :pep:`517` specification. In case of``pip`this is version`18.0.0``or later (released in July 2018). If you cannot upgrade your pip to support this you need to ensure that the build requirements from :gh:`pyproject.toml <tox-dev/tox/blob/main/pyproject.toml>` are satisfied before triggering the installation.  via``setup.py``---------------- We don't recommend and officially support this method. You should prefer using an installer that supports :pep:`517` interface, such as pip``19.0.0`or later. That being said you might be able to still install a package via this method if you satisfy build dependencies before calling the installation command (as described under [sdist](#sdist)).  latest unreleased ----------------- Installing an unreleased version is discouraged and should be only done for testing purposes. If you do so you'll need a pip version of at least`18.0.0`and use the following command:`\`bash pip install git+https://<github.com/tox-dev/tox.git@main>

<div id="compatibility-requirements">

Python and OS Compatibility \`\`\` ---------------------------

</div>

tox works with the following Python interpreter implementations:

  - [CPython](https://www.python.org/) versions 3.8, 3.9, 3.10, 3.11, 3.12, 3.13

This means tox works on the latest patch version of each of these minor versions. Previous patch versions are supported on a best effort approach.

---

plugins.md

---

# Extending tox

## Extensions points

<div class="automodule" data-members="" data-exclude-members="impl">

tox.plugin

</div>

<div class="autodata" data-no-value="">

tox.plugin.impl

</div>

<div class="automodule" data-members="">

tox.plugin.spec

</div>

A plugin can define its plugin module a:

`` `python    def tox_append_version_info() -> str:        return "magic"  and this message will be appended to the output of the ``--version`flag.  Adoption of a plugin under tox-dev Github organization`\` \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~

You're free to host your plugin on your favorite platform, however the core tox development is happening on Github, under the `tox-dev` org organization. We are happy to adopt tox plugins under the `tox-dev` organization if:

  - we determine it's trying to solve a valid use case and it's not malicious (e.g. no plugin that deletes the users home directory),
  - it's released on PyPI with at least 100 downloads per month (to ensure it's a plugin used by people).

What's in for you in this:

  - you get owner rights on the repository under the tox-dev organization,
  - exposure of your plugin under the core umbrella,
  - backup maintainers from other tox plugin development.

How to apply:

  - create an issue under the `tox-dev/tox` Github repository with the title `Adopt plugin \<name\> <login?return_to=https%3A%2F%2Fgithub.com%2Ftox-dev%2Ftox%2Fissues%2Fnew%3Flabels%3Dfeature%253Anew%26template%3Dfeature_request.md%26title%3DAdopt%2520plugin%26body%3D>`,
  - wait for the green light by one of our maintainers (see \[current-maintainers\](\#current-maintainers)),
  - follow the [guidance by Github](https://docs.github.com/en/repositories/creating-and-managing-repositories/transferring-a-repository),
  - (optionally) add at least one other people as co-maintainer on PyPI.

## Migration from tox 3

This section explains how the plugin interface changed between tox 3 and 4, and provides guidance for plugin developers on how to migrate.

### `tox_get_python_executable`

With tox 4 the Python discovery is performed `tox.tox_env.python.virtual_env.api._get_python` that delegates the job to `virtualenv`. Therefore first [define a new virtualenv discovery mechanism](https://virtualenv.pypa.io/en/latest/extend.html#python-discovery) and then set that by setting the `VIRTUALENV_DISCOVERY` environment variable.

### `tox_package`

Register new packager types via <span class="title-ref">tox\_register\_tox\_env \<tox.plugin.spec.tox\_register\_tox\_env\></span>.

### `tox_addoption`

Renamed to <span class="title-ref">tox\_add\_option \<tox.plugin.spec.tox\_add\_option\></span>.

---

plugins_api.md

---

# API

## tox objects

### register

<div class="automodule" data-members="" data-exclude-members="REGISTER">

tox.tox\_env.register

</div>

<div class="autodata" data-no-value="">

REGISTER

</div>

### config

<div class="autoclass" data-members="">

tox.config.cli.parser.ArgumentParserWithEnvAndConfig

</div>

<div class="autoclass" data-members="">

tox.config.cli.parser.ToxParser

</div>

<div class="autoclass" data-members="">

tox.config.cli.parser.Parsed

</div>

<div class="autoclass" data-members="" data-exclude-members="__init__, make">

tox.config.main.Config

</div>

<div class="autoclass" data-members="">

tox.config.loader.section.Section

</div>

<div class="autoclass" data-members="">

tox.config.loader.api.ConfigLoadArgs

</div>

<div class="autoclass" data-members="" data-special-members="__iter__, __contains__">

tox.config.sets.ConfigSet

</div>

<div class="autoclass" data-members="">

tox.config.sets.CoreConfigSet

</div>

<div class="autoclass" data-members="">

tox.config.sets.EnvConfigSet

</div>

<div class="autoclass" data-members="">

tox.config.of\_type.ConfigDefinition

</div>

<div class="autoclass" data-members="">

tox.config.of\_type.ConfigDynamicDefinition

</div>

<div class="autoclass" data-members="">

tox.config.of\_type.ConfigConstantDefinition

</div>

<div class="autoclass" data-members="">

tox.config.source.api.Source

</div>

<div class="autoclass" data-members="">

tox.config.loader.api.Override

</div>

<div class="autoclass" data-members="">

tox.config.loader.api.Loader

</div>

<div class="autoclass" data-members="">

tox.config.loader.memory.MemoryLoader

</div>

<div class="autoclass" data-members="">

tox.config.loader.convert.Convert

</div>

<div class="autoclass" data-members="" data-special-members="__bool__, __iter__">

tox.config.types.EnvList

</div>

<div class="autoclass" data-members="">

tox.config.types.Command

</div>

<div class="autoclass" data-members="">

tox.config.loader.convert.Factory

</div>

### environments

<div class="autoclass" data-members="">

tox.tox\_env.api.ToxEnv

</div>

<div class="autoclass" data-members="">

tox.tox\_env.runner.RunToxEnv

</div>

<div class="autoclass" data-members="">

tox.tox\_env.package.PackageToxEnv

</div>

<div class="autoclass" data-members="">

tox.tox\_env.package.Package

</div>

### journal

<div class="autoclass" data-members="" data-exclude-members="__init__" data-special-members="__bool__, __setitem__">

tox.journal.env.EnvJournal

</div>

### report

<div class="autoclass" data-members="" data-exclude-members="stream, format, patch_thread, write_out_err, suspend_out_err">

tox.report.ToxHandler

</div>

### execute

<div class="autoclass" data-members="">

tox.execute.request.ExecuteRequest

</div>

<div class="autoclass" data-members="">

tox.execute.request.StdinSource

</div>

<div class="autoclass" data-members="">

tox.execute.api.Outcome

</div>

<div class="autoclass" data-members="">

tox.execute.api.Execute

</div>

<div class="autoclass" data-members="">

tox.execute.api.ExecuteStatus

</div>

<div class="autoclass" data-members="">

tox.execute.api.ExecuteInstance

</div>

<div class="autoclass" data-members="">

tox.execute.stream.SyncWrite

</div>

### installer

<div class="autoclass" data-members="">

tox.tox\_env.installer.Installer

</div>

### session

<div class="autoclass" data-members="">

tox.session.state.State

</div>

<div class="autoclass" data-members="">

tox.session.env\_select.EnvSelector

</div>

<div class="autoclass" data-members="">

tox.tox\_env.info.Info

</div>

---

upgrading.md

---

# Upgrading to tox v4

Version 4 is mostly backwards compatible. This document covers all breaking changes and, where applicable, includes guidance on how to update.

See also the list of new features in the \[FAQ \<faq\>\](\#faq-\<faq\>).

## Python support

  - tox now requires Python `3.7` or later and is tested only against CPython. You can still create test environments for earlier Python versions or different Python interpreters. PyPy support is best effort, meaning we do not test it as part of our CI runs, however if you discover issues under PyPy we will accept PRs addressing it.

## Changed INI rules

  - The hash sign (`#`) now always acts as comment within `tox.ini` or `setup.cfg` tox configuration file. Where you need to pass on a `#` character you will need to escape it in form of `\#` so tox does not handle everything right of the `#` character as a comment. Valid in tox 3:
    
      - \`\`\`ini  
        \# valid in tox 3 commands = bash -c "echo 'foo\#bar'"
        
        \# valid in tox 4 commands = bash -c "echo 'foo\#bar'"

  - Within the `pass_env` you can no longer use space as value separator, instead you need to use the `,` or the newline character. This is to have the same value separation rules for all tox configuration lines.
    
    ``` ini
    # valid in tox 3
    passenv = ALPHA BETA
    passenv =
        ALPHA
        BETA
    
    # valid in tox 4
    passenv = ALPHA, BETA
    passenv =
        ALPHA
        BETA
    ```

  - tox 4 now errors when using the `-U` flag when defining dependencies, e.g. `deps = -Ur requirements.txt`. While this worked in tox 3, it was never supported officially. Additionally, in the context of a new virtual environment this flag makes no sense anyway.

  - tox 4 requires the `install_command` to evaluate to a non-empty value for each target environment. In tox 3, an empty value would be substituted for the default install command.

Known regressions `` ` -----------------  - On Windows, the tty trait of the caller environment is no longer passed through. The most notable impact of this   change is that some tools no longer show colored output. You may need to force colorization to be for such enabled   for such tools. See :issue:`2337` for more details.  New plugin system -----------------  tox 4 is a grounds up rewrite of the code base, and while we kept the configuration layer compatibility no such effort has been made for the programmatic API. Therefore, all plugins will need to redo their integration against the new code base. If you're a plugin developer refer to the `plugin documentation <https://tox.wiki/en/latest/plugins.html>`_ for more information.  Removed tox.ini keys --------------------  +--------------------------+-----------------------------------------------------------------+ | Configuration key        | Migration path                                                  | +==========================+=================================================================+ | ``indexserver`| See [Using a custom PyPI server <faq_custom_pypi_server>](#using-a-custom-pypi-server-<faq_custom_pypi_server>). | +--------------------------+-----------------------------------------------------------------+ |`whitelist\_externals`| Use [allowlist_externals](#allowlist_externals) key instead.                     | +--------------------------+-----------------------------------------------------------------+ |`isolated\_build`| Isolated builds are now always used.                            | +--------------------------+-----------------------------------------------------------------+ |`distdir`| Use the`TOX\_PACKAGE`environment variable.                   | +--------------------------+-----------------------------------------------------------------+  basepython not resolved -----------------------  The base python configuration is no longer resolved to`pythonx.y`format, instead is kept as`py39`, and is the virtualenv project that handles mapping that to a Python interpreter. If you were using this variable we recommend moving to the newly added`py\_impl`and`py\_dot\_ver`variables, for example:`\`ini deps = -r{py\_impl}{py\_dot\_ver}-req.txt

Failure when all environments are skipped `` ` -----------------------------------------  A run that results in all environments being skipped will no longer result in success. Instead, a failure will be reported. For example, consider a host that does not support Python 3.5: ``\`bash tox run --skip-missing-interpreters=true -e py35

This will now result in a failure.

Substitutions removed `` ` ---------------------  - The ``distshare`and`homedir`substitutions have been removed.  Disallowed env names --------------------  - Environment names that contain multiple Python variants, such as`name-py39-pypy`or`py39-py310`will now raise   an error, previously this only warned, you can use [ignore_basepython_conflict](#ignore_basepython_conflict) to disable this error, but we   recommend changing the name to avoid this name that can be confusing.  CLI arguments changed ---------------------  - The`--parallel--safe-build`CLI argument has been removed, no longer needed. - When you want to pass an option to a test command, e.g. to`pytest`, now you must use`--`as a separator, this   worked with version 3 also, but any unknown trailing arguments were automatically passed through, while now this is   no longer the case. - Running`--showconfig`or`--help-ini`with the`-v`flag will add interleaved debugging information, whereas   tox 3 added additional lines at the start. If you want to generate valid ini files you must not use the`-v`flag. - The`--index-url`is now removed, use`PIP\_INDEX\_URL`in [set_env](#set_env) instead.  Output changes --------------  - We now use colors for reporting, to help make the output easier to read for humans. This can be disabled via the`TERM=dumb`or`NO\_COLOR=1`environment variables, or the`--colored no`CLI argument.  Reuse of environments ----------------------  - It is no longer possible to reuse environments. While this might have been possible with tox version 3, this   behavior was never supported, and possibly caused wrong results as illustrated in the following example.`\`ini \[testenv\] envdir = .tox/venv

> \[testenv:a\] deps = pytest\>7
> 
> \[testenv:b\] deps = pytest\<7

CLI command compatibility `` ` ------------------------- ``tox`4 introduced dedicated subcommands for various usages. However, when no subcommand is given the legacy entry point which imitates`tox`3 is used.  This compatibility feature makes most`tox`3 commands work in`tox`4, but there are some exceptions.  Updating usage with`-e`++++++++++++++++++++++++++  In`tox`3, environments could be specified to run with the`-e`flag. In`tox`4, environments should always be specified using the`-e`flag to the`run`subcommand.  Rewrite usages as follows  .. code:: bash      # tox 3     tox -e py310,style      # tox 4     tox run -e py310,style      # or, tox 4 with the short alias     tox r -e py310,style  Environment names matching commands +++++++++++++++++++++++++++++++++++  Now that`tox`has subcommands, it is possible for arguments to`tox`or its options to match those subcommand names. When that happens, parsing can become ambiguous between the`tox`4 usage and the legacy fallback behavior.  For example, consider the following tox config:`\`ini \[tox\] env\_list = py39,py310

> \[testenv\] commands = python -c 'print("hi")'
> 
> \[testenv:list\] commands = python -c 'print("a, b, c")'

This defines an environment whose name matches a `tox` 4 command, `list`.

Under `tox` 3, `tox -e list` specified the `list` environment. `` ` However, under ``tox`4, the parse of this usage as an invocation of`tox list`takes precedence over the legacy behavior.  Therefore, attempting that same usage results in an error:  .. code:: bash      $ tox -e list     ...     tox: error: unrecognized arguments: -e  This is best avoided by updating to non-legacy usage:  .. code:: bash      $ tox run -e list      # or, equivalently...     $ tox r -e list  Packaging environments ----------------------  Isolated environment on by default ++++++++++++++++++++++++++++++++++`tox`now always uses an isolated build environment when building your projects package. The previous flag to enable this called`isolated\_build`has been removed.  Packaging configuration and inheritance +++++++++++++++++++++++++++++++++++++++ Isolated build environments are tox environments themselves and may be configured on their own. Their name is defined as follows:  - For source distributions this environment will match a virtual environment with the same python interpreter as tox is   using. The name of this environment will by default`.pkg``(can be changed via [package_env](#package_env) config on a per   test environment basis). - For wheels (including editable wheels as defined by :pep:`660`) their name will be``.pkg-\<impl\>\<python\_version\>`, so   for example if you're building a wheel for a Python 3.10 environment the packaging environment will be`.pkg-cpython311`(can be changed via [wheel_build_env](#wheel_build_env) config on a per test environment basis).  To change a packaging environments settings you can use:`\`ini \[testenv:.pkg\] pass\_env = PKG\_CONFIG PKG\_CONFIG\_PATH PKG\_CONFIG\_SYSROOT\_DIR

> \[testenv:.pkg-cpython311\] pass\_env = PKG\_CONFIG PKG\_CONFIG\_PATH PKG\_CONFIG\_SYSROOT\_DIR

Packaging environments no longer inherit their settings from the `testenv` section, as this caused issues when `` ` some test environment settings conflicted with packaging setting. However starting with ``tox\>=4.2`all packaging environments inherit from the`pkgenv`section, allowing you to define packaging common packaging settings in one central place, while still allowing you to override it when needed on a per package environment basis:`\`ini \[pkgenv\] pass\_env = PKG\_CONFIG PKG\_CONFIG\_PATH PKG\_CONFIG\_SYSROOT\_DIR

> \[testenv:.pkg-cpython311\] pass\_env = {\[pkgenv\]pass\_env} IS\_311 = yes
> 
> \[testenv:magic\] package = sdist pass\_env = {\[pkgenv\]pass\_env} \# sdist install builds wheel -\> need packaging settings

Note that specific packaging environments are defined under `testenv:.pkg` and **not** `pkgenv:.pkg`, this is due `` ` backwards compatibility.  Universal wheels ++++++++++++++++ If your project builds universal wheels you can avoid using multiple build environments for each targeted python by setting [wheel_build_env](#wheel_build_env) to the same packaging environment via: ``\`ini \[testenv\] package = wheel wheel\_build\_env = .pkg

Editable mode `` ` +++++++++++++ ``tox``now defaults to using editable wheels when develop mode is enabled and the build backend supports it, as defined by :pep:`660` by setting [package](#package) to``editable`. In case the backend does not support it, will fallback to [package](#package) to`editable-legacy`, and invoke pip with`-e`. In the later case will also print a message to make this setting explicit in your configuration (explicit better than implicit):`\`ini \[testenv:dev\] package = editable-legacy

If you want to use the new standardized method to achieve the editable install effect you should ensure your backend `` ` version is above the version this feature was added to it, for example for setuptools: ``\`ini \[testenv:dev\] deps = setuptools\>=64 package = editable

Provisioning environment `` ` ------------------------  The provisioning environment is triggered when ``minversion`or`requires`are specified and the current environment does not satisfy the requirement. In tox 4, the provisioning environment (`.tox`by default) must be explicitly configured and will not inherit values from`\[testenv\]\`\` section.

---

user_guide.md

---

# User Guide

## Overview

tox is an environment orchestrator. Use it to define how to setup and execute various tools on your projects. The tool can set up environments for and invoke:

  - test runners (such as `pytest`),
  - linters (e.g., `flake8`),
  - formatters (for example `black` or `isort`),
  - documentation generators (e.g., `Sphinx`),
  - build and publishing tools (e.g., `build` with `twine`),
  - ...

## Configuration

*tox* needs a configuration file where you define what tools you need to run and how to provision a test environment for these. The canonical file for this is either a `tox.toml` or `tox.ini` file. For example:

> 
> 
> <div class="tab">
> 
> TOML
> 
>   - \`\`\`toml  
>     requires = \["tox\>=4"\] env\_list = \["lint", "type", "3.13", "3.12", "3.11"\]
>     
>     \[env\_run\_base\] description = "run unit tests" deps = \[ "pytest\>=8", "pytest-sugar" \] commands = \[\["pytest", { replace = "posargs", default = \["tests"\], extend = true }\]\]
>     
>     \[env.lint\] description = "run linters" skip\_install = true deps = \["black"\] commands = \[\["black", { replace = "posargs", default = \["."\], extend = true} \]\]
>     
>     \[env.type\] description = "run type checks" deps = \["mypy"\] commands = \[\["mypy", { replace = "posargs", default = \["src", "tests"\], extend = true} \]\]
> 
> </div>
> 
> <div class="tab">
> 
> INI
> 
> ``` ini
> [tox]
>  requires =
>      tox>=4
>  env_list = lint, type, 3.1{3,2,1}
> 
>  [testenv]
>  description = run unit tests
>  deps =
>      pytest>=8
>      pytest-sugar
>  commands =
>      pytest {posargs:tests}
> 
>  [testenv:lint]
>  description = run linters
>  skip_install = true
>  deps =
>      black
>  commands = black {posargs:.}
> 
>  [testenv:type]
>  description = run type checks
>  deps =
>      mypy
>  commands =
>      mypy {posargs:src tests}
> ```
> 
> </div>

\> **Tip** \> You can also generate a `tox.ini` file automatically by running `tox quickstart` and then answering a few questions.

The configuration is split into two types:

\- core settings `` ` - tox environment settings.  Core settings ~~~~~~~~~~~~~  Core settings that affect all test environments or configure how tox itself is invoked are defined under the root table in ``tox.toml`and`tox`section in`tox.ini`.      .. tab:: TOML`\`toml requires = \["tox\>=4"\] env\_list = \["lint", "type", "3.13", "3.12", "3.11"\]

> 
> 
> <div class="tab">
> 
> INI
> 
> ``` ini
> [tox]
> requires =
>     tox>=4
> env_list = lint, type, 3.1{3,2,1}
> ```
> 
> </div>

We can use it to specify things such as the minimum version of *tox* required or the location of the package under test. `` ` A list of all supported configuration options for the ``tox`section can be found in the [configuration guide <conf-core>](#configuration-guide <conf-core>).  Test environments ~~~~~~~~~~~~~~~~~  When`\<env\_name\>`is the name of a specific environment, test environment configurations are defined:  -`testenv`section and individual`testenv:\<env\_name\>`for`tox.ini`, -`env\_run\_base`table and individual`env.\<env\_name\>`for`tox.toml`.  .. tab:: TOML`\`toml \[env\_run\_base\] description = "run unit tests" deps = \[ "pytest\>=8", "pytest-sugar" \] commands = \[\["pytest", { replace = "posargs", default = \["tests"\], extend = true }\]\]

> \[env.lint\] description = "run linters" skip\_install = true deps = \["black"\] commands = \[\["black", { replace = "posargs", default = \["."\], extend = true} \]\]
> 
> \[env.type\] description = "run type checks" deps = \["mypy"\] commands = \[\["mypy", { replace = "posargs", default = \["src", "tests"\], extend = true} \]\]

<div class="tab">

INI

``` ini
[testenv]
description = run unit tests
deps =
    pytest>=8
    pytest-sugar
commands =
    pytest {posargs:tests}

[testenv:lint]
description = run linters
skip_install = true
deps =
    black
commands = black {posargs:.}

[testenv:type]
description = run type checks
deps =
    mypy
commands =
    mypy {posargs:src tests}
```

</div>

Settings defined at the top-level (`env_run_base` table in TOML and `testenv` section in INI configuration files) `` ` are automatically inherited by individual environments unless overridden. Test environment names can consist of alphanumeric characters and dashes; for example: ``py311-django42`. The name will be split on dashes into multiple factors, meaning`py311-django42`will be split into two factors:`py311`and`django42`. *tox* defines a number of default factors, which correspond to various versions and implementations of Python and provide default values for`base\_python`:  -`pyNM`: configures`basepython = pythonN.M`-`pypyNM`: configures`basepython = pypyN.M`-`jythonNM`: configures`basepython = jythonN.M`-`cpythonNM`: configures`basepython = cpythonN.M`-`ironpythonNM`: configures`basepython = ironpythonN.M`-`rustpythonNM`: configures`basepython = rustpythonN.M`-`graalpyNM`: configures`basepython = graalpyN.M`You can also specify these factors with a period between the major and minor versions (e.g.`pyN.M`), without a minor version (e.g.`pyN`), or without any version information whatsoever (e.g.`py`)  A list of all supported configuration options for the tox environments can be found in the [configuration guide <conf-testenv>](#configuration-guide-<conf-testenv>).  Basic example -------------  .. tab:: TOML`\`toml env\_list = \["format", "3.13"\]

> \[env.format\] description = "install black in a virtual environment and invoke it on the current folder" deps = \["black==22.3.0"\] skip\_install = true commands = \[\[ "black", "." \]\]
> 
> \[env."3.13"\] description = "install pytest in a virtual environment and invoke it on the tests folder" deps = \[ "pytest\>=7", "pytest-sugar", \] commands = \[\[ "pytest", "tests", { replace = "posargs", extend = true} \]\]

<div class="tab">

INI

``` ini
[tox]
env_list =
    format
    3.13

[testenv:format]
description = install black in a virtual environment and invoke it on the current folder
deps = black==22.3.0
skip_install = true
commands = black .

[testenv:3.13]
description = install pytest in a virtual environment and invoke it on the tests folder
deps =
    pytest>=7
    pytest-sugar
commands = pytest tests {posargs}
```

</div>

This example contains a core configuration (root table in TOML and `tox` in INI) section as well as two `` ` test environments. Taking the core section first, we use the [env_list](#env_list) setting to indicate that this project has two run environments named ``format`and`3.13`that should be run by default when`tox run`is invoked without a specific environment.  The formatting environment and test environment are defined separately (via the`env.format`and`env."3.13"`in TOML file;`testenv:format`and`testenv:py313`in INI file). For example to format the project we:  - add a description (visible when you type`tox list``into the command line) via the [description](#description) setting - define that it requires the :pypi:`black` dependency with version``22.3.0`via the [deps](#deps) setting - disable installation of the project under test into the test environment via the [skip_install](#skip_install) setting -`black`does not need it installed - indicate the commands to be run via the [commands](#commands) setting  For testing the project we use the`3.13``environment. For this environment we:  - define a text description of the environment via the [description](#description) setting - specify that we should install :pypi:`pytest` v7.0 or later together with the :pypi:`pytest-sugar` project via the   [deps](#deps) setting - indicate the command(s) to be run - in this case``pytest tests`- via the [commands](#commands) setting`{ replace = "posargs"}`in TOML and`{posargs}`in INI is a place holder part for the CLI command that allows us to pass additional flags to the pytest invocation, for example if we'd want to run`pytest tests -v`as a one off, instead of`tox run -e 3.13`we'd type`tox run -e py310 -- -v`. The`--`delimits flags for the tox tool and what should be forwarded to the tool within.  tox, by default, always creates a fresh virtual environment for every run environment. The Python version to use for a given environment can be controlled via the [base_python](#base_python) configuration, however if not set tox will try to use the environment name to determine something sensible: if the name is in the format of`pyxy`(or`x.y`) then tox will create an environment with CPython with version`x.y`(for example`py310`means CPython`3.10`). If the name does not match this pattern it will use a virtual environment with the same Python version as the one tox is installed into (this is the case for`format`).  tox environments are reused between runs, so while the first`tox run -e 3.13`will take a while as tox needs to create a virtual environment and install`pytest`and`pytest-sugar`in it, subsequent runs only need to reinstall your project, as long as the environments dependency list does not change.  Almost every step and aspect of virtual environments and command execution can be customized. You'll find an exhaustive list of configuration flags (together with what it does and detailed explanation of what values are accepted) at our [configuration page <configuration>](#configuration-page-<configuration>).  System overview ---------------  Below is a graphical representation of the tox states and transition pathways between them:  .. image:: img/overview_light.svg    :align: center    :class: only-light  .. image:: img/overview_dark.svg    :align: center    :class: only-dark   The primary tox states are:  #. **Configuration:** load tox configuration files (such as`tox.ini`,`pyproject.toml`and`toxfile.py`) and    merge it with options from the command line plus the operating system environment variables.  #. **Environment**: for each selected tox environment (e.g.`py310`,`format``) do:     #. **Creation**: create a fresh environment; by default :pypi:`virtualenv` is used, but configurable via       [runner](#runner). For `virtualenv` tox will use the `virtualenv discovery logic       <https://virtualenv.pypa.io/en/latest/user_guide.html#python-discovery>`_ where the python specification is       defined by the tox environments [base_python](#base_python) (if not set will default to the environments name). This is       created at first run only to be re-used at subsequent runs. If certain aspects of the project change (python       version, dependencies removed, etc.), a re-creation of the environment is automatically triggered. To force the       recreation tox can be invoked with the [recreate](#recreate) flag (``-r`).     #. **Install dependencies** (optional): install the environment dependencies specified inside the`deps`configuration section, and then the earlier packaged source distribution. By default`pip`is used to install       packages, however one can customize this via`install\_command`. Note`pip`will not update project       dependencies (specified either in the`install\_requires`or the`extras`section of the`setup.py`) if any       version already exists in the virtual environment; therefore we recommend to recreate your environments whenever       your project dependencies change.     #. **Packaging** (optional): create a distribution of the current project.        #. **Build**: If the tox environment has a package configured tox will build a package from the current source          tree. If multiple tox environments are run and the package built are compatible in between them then it will be          reused. This is to ensure that we build the package as rare as needed. By default for Python a source          distribution is built as defined via the`pyproject.toml`style build (see PEP-517 and PEP-518).        #. **Install the package dependencies**. If this has not changed since the last run this step will be skipped.        #. **Install the package**. This operation will force reinstall the package without its dependencies.     #. **Commands**: run the specified commands in the specified order. Whenever the exit code of any of them is not       zero, stop and mark the environment failed. When you start a command with a dash character, the exit code will be       ignored.  #. **Report** print out a report of outcomes for each tox environment:     .. code:: bash        ____________________ summary ____________________       py37: commands succeeded       ERROR:   py38: commands failed     Only if all environments ran successfully tox will return exit code`0`(success). In this case you'll also see the    message`congratulations :)`.  tox will take care of environment variable isolation for you. That means it will remove system environment variables not specified via`passenv`. Furthermore, it will also alter the`PATH`variable so that your commands resolve within the current active tox environment. In general, all executables outside of the tox environment are available in`commands``, but external commands need to be explicitly allowed via the [allowlist_externals](#allowlist_externals) configuration.  Main features -------------  * **automation of tedious Python related test activities** * **test your Python package against many interpreter and dependency configurations**    - automatic customizable (re)creation of :pypi:`virtualenv` test environments   - installs your project into each virtual environment   - test-tool agnostic: runs pytest, nose or unittest in a uniform manner  *``plugin system``to modify tox execution with simple hooks. * uses :pypi:`pip` and :pypi:`virtualenv` by default. Support for plugins replacing it with their own. * **cross-Python compatible**: tox requires CPython 3.9 and higher, but it can create environments 2.7 or later.   Special configuration might be required: [eol-version-support](#eol-version-support). * **cross-platform**: Windows, macOS and Unix style environments * **full interoperability with devpi**: is integrated with and is used for testing in the :pypi:`devpi` system, a   versatile PyPI index server and release managing tool * **driven by a simple (but flexible to allow expressing more complicated variants) ini-style config file** * **documented** examples and configuration * **concise reporting** about tool invocations and configuration errors * supports using different / multiple PyPI index servers  Related projects ----------------  tox has influenced several other projects in the Python test automation space. If tox doesn't quite fit your needs or you want to do more research, we recommend taking a look at these projects:  - `nox <https://nox.thea.codes/en/stable/>`__ is a project similar in spirit to tox but different in approach. The   primary key difference is that it uses Python scripts instead of a configuration file. It might be useful if you   find tox configuration too limiting but aren't looking to move to something as general-purpose as``Invoke`or`make``. Please note that tox will support defining configuration in a Python file soon, too. - `Invoke <https://www.pyinvoke.org/>`__ is a general-purpose task execution library, similar to Make. Invoke is far   more general-purpose than tox but it does not contain the Python testing-specific features that tox specializes in.   Auto-provisioning ----------------- In case the installed tox version does not satisfy either the [min_version](#min_version) or the [requires](#requires), tox will automatically create a virtual environment under [provision_tox_env](#provision_tox_env) name that satisfies those constraints and delegate all calls to this meta environment. This should allow satisfying constraints on your tox environment automatically, given you have at least version``3.8.0`of tox.  For example given:  .. tab:: TOML`\`toml min\_version = "4" requires = \["tox-uv\>=1"\]

<div class="tab">

INI

``` ini
[tox]
min_version = 4
requires = tox-uv>=1
```

</div>

if the user runs it with tox `3.8` or later the installed tox application will automatically ensure that both the minimum version and `` ` requires constraints are satisfied, by creating a virtual environment under ``.tox`folder, and then installing into it`tox\>=4`and`tox-uv\>=1`. Afterwards all tox invocations are forwarded to the tox installed inside`.tox.tox`folder (referred to as meta-tox or auto-provisioned tox).  This allows tox to automatically setup itself with all its plugins for the current project.  If the host tox satisfies the constraints expressed with the [requires](#requires) and [min_version](#min_version) no such provisioning is done (to avoid setup cost and indirection when it's not explicitly needed).  Cheat sheet ------------  This section details information that you'll use most often in short form.  CLI ~~~ - Each tox subcommand has a 1 (or 2) letter shortcut form too, e.g.`tox run`can also be written as`tox r`or`tox config`can be shortened to`tox c`. - To run all tox environments defined in the [env_list](#env_list) run tox without any flags:`tox`. - To run a single tox environment use the`-e`flag for the`run`sub-command as in`tox run -e py310`. - To run two or more tox environment pass comma separated values, e.g.`tox run -e format,py310`. The run command will   run the tox environments sequentially, one at a time, in the specified order. - To run two or more tox environment in parallel use the`parallel`sub-command , e.g.`tox parallel -e py39,py310`.   The`--parallel`flag for this sub-command controls the degree of parallelism. - To view the configuration value for a given environment and a given configuration key use the config sub-command with   the`-k`flag to filter for targeted configuration values:`tox config -e py310 -k pass\_env`. - tox tries to automatically detect changes to your project dependencies and force a recreation when needed.   Unfortunately the detection is not always accurate, and it also won't detect changes on the PyPI index server. You can   force a fresh start for the tox environments by passing the`-r`flag to your run command. Whenever you see   something that should work but fails with some esoteric error it's recommended to use this flag to make sure you don't   have a stale Python environment; e.g.`tox run -e py310 -r`would clean the run environment and recreate it from   scratch.  Config files ~~~~~~~~~~~~  - Every tox environment has its own configuration section (e.g. in case of`tox.toml`configuration method the`3.13`tox environments configuration is read from the`env\_run\_base."3.13"`table). If the table is missing or   does not contain that configuration value, it will fall back to the section defined by the [base](#base) configuration   (for`tox.toml`this is the`env\_run\_base`table). For example:`\`toml \[env\_run\_base\] commands = \[\["pytest", "tests"\]\]

> \[env.test\] description = "run the test suite with pytest"
> 
> Here the environment description for `test` is taken from `env_run_base`. As `commands` is not specified, the value defined under the `env_run_base` section will be used. If the base environment is also missing a configuration value then the configuration default will be used (e.g. in case of the `pass_env` configuration here).

  - To change the current working directory for the commands run use \[change\_dir\](\#change\_dir) (note this will make the change for all install commands too - watch out if you have relative paths in your project dependencies).
  - Environment variables:
      - To view environment variables set and passed down use `tox c -e py310 -k set_env pass_env`.
      - To pass through additional environment variables use \[pass\_env\](\#pass\_env).
      - To set environment variables use \[set\_env\](\#set\_env).
  - Setup operation can be configured via the \[commands\_pre\](\#commands\_pre), while teardown commands via the \[commands\_post\](\#commands\_post).

<div id="parallel_mode">

Parallel mode `` ` ------------- ``tox`allows running environments in parallel mode via the`parallel`sub-command:  - After the packaging phase completes tox will run the tox environments in parallel processes (multi-thread based). - the`--parallel`flag takes an argument specifying the degree of parallelization, defaulting to`auto`:    -`all`to run all invoked environments in parallel,   -`auto`to limit it to CPU count,   - or pass an integer to set that limit. - Parallel mode displays a progress spinner while running tox environments in parallel, and reports outcome of these as   soon as they have been completed with a human readable duration timing attached. To run parallelly without the spinner,   you can use the`--parallel-no-spinner`flag. - Parallel mode by default shows output only of failed environments and ones marked as [parallel_show_output](#parallel_show_output)`=True`. - There's now a concept of dependency between environments (specified via [depends](#depends)), tox will re-order the   environment list to be run to satisfy these dependencies, also for sequential runs. Furthermore, in parallel mode,   tox will only schedule a tox environment to run once all of its dependencies have finished (independent of their outcome).    > **Warning** >`depends`does not pull in dependencies into the run target, for example if you select`py310,py39,coverage`via the`-e`tox will only run those three (even if`coverage`may specify as`depends`other targets too -     such as`py310, py39, py38, py37`).  -`--parallel-live`/`-o`allows showing the live output of the standard output and error, also turns off reporting   as described above. - Note: parallel evaluation disables standard input. Use non parallel invocation if you need standard input.  Example final output:`\`bash $ tox -e py310,py39,coverage -p all ✔ OK py39 in 9.533 seconds ✔ OK py310 in 9.96 seconds ✔ OK coverage in 2.0 seconds \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ summary \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ py310: commands succeeded py39: commands succeeded coverage: commands succeeded congratulations :)

</div>

Example progress bar, showing a rotating spinner, the number of environments running and their list (limited up to `` ` 120 characters): ``\`bash ⠹ \[2\] py310 | py39

Packaging `` ` ---------  tox always builds projects in a PEP-518 compatible virtual environment and communicates with the build backend according to the interface defined in PEP-517 and PEP-660. To define package build dependencies and specify the build backend to use create a ``pyproject.toml`at the root of the project. For example to use hatch:`\`toml \[build-system\] build-backend = "hatchling.build" requires = \["hatchling\>=0.22", "hatch-vcs\>=0.2"\]

By default tox will create and install a source distribution. You can configure to build a wheel instead by setting `` ` the [package](#package) configuration to ``wheel`. Wheels are much faster to install than source distributions.  To query the projects dependencies tox will use a virtual environment whose name is defined under the [package_env](#package_env) configuration (by default`.pkg`). The virtual environment used for building the package depends on the artifact built:  - for source distribution the [package_env](#package_env), - for wheels the name defined under [wheel_build_env](#wheel_build_env) (this depends on the Python version defined by the target tox   environment under [base_python](#base_python),  if the environment targets CPython 3.10 it will be`.pkg-cpython310`or   for PyPy 3.9 it will be`.pkg-pypy39`).  For pure Python projects (non C-Extension ones) it's recommended to set [wheel_build_env](#wheel_build_env) to the same as the [package_env](#package_env). This way you'll build the wheel once and install the same wheel for all tox environments.  Advanced features -----------------  Disallow command line environments which are not explicitly specified in the config file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Previously, any environment would be implicitly created even if no such environment was specified in the configuration file. For example, given this config:  .. tab:: TOML`\`toml \[env.unit\] deps = \[ "pytest" \] commands = \[\[ "pytest" \]\]

<div class="tab">

INI

``` ini
[testenv:unit]
deps = pytest
commands = pytest
```

</div>

Running `tox -e unit` would run our tests but running `tox -e unt` or `tox -e unti` would ultimately succeed `` ` without running any tests. A special exception is made for environments starting in ``py\*`. In the above example running`tox -e py310\`\` would still function as intended.

---

CODE_OF_CONDUCT.md

---

# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making
participation in our project and our community a harassment-free experience for everyone, regardless of age, body size,
disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race,
religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take
appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits,
issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any
contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the
project or its community. Examples of representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed representative at an online or offline
event. Representation of a project may be further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. The
project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the
circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent
repercussions as determined by other members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at
[https://www.contributor-covenant.org/version/1/4/code-of-conduct.html][version]

[homepage]: https://www.contributor-covenant.org/
[version]: https://www.contributor-covenant.org/version/1/4/


---

README.md

---

# tox

[![PyPI](https://img.shields.io/pypi/v/tox)](https://pypi.org/project/tox/)
[![Supported Python
versions](https://img.shields.io/pypi/pyversions/tox.svg)](https://pypi.org/project/tox/)
[![Downloads](https://static.pepy.tech/badge/tox/month)](https://pepy.tech/project/tox)
[![Documentation
status](https://readthedocs.org/projects/tox/badge/?version=latest)](https://tox.readthedocs.io/en/latest/?badge=latest)
[![check](https://github.com/tox-dev/tox/actions/workflows/check.yaml/badge.svg)](https://github.com/tox-dev/tox/actions/workflows/check.yaml)

`tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing
and release process of Python software (alongside [pytest](https://docs.pytest.org/en/latest/) and
[devpi](https://www.devpi.net)).

tox is a generic virtual environment management and test command line tool you can use for:

- checking your package builds and installs correctly under different environments (such as different Python
  implementations, versions or installation dependencies),
- running your tests in each of the environments with the test tool of choice,
- acting as a frontend to continuous integration servers, greatly reducing boilerplate and merging CI and shell-based
  testing.

Please read our [user guide](https://tox.wiki/en/latest/user_guide.html#basic-example) for an example and more detailed
introduction, or watch [this YouTube video](https://www.youtube.com/watch?v=SFqna5ilqig) that presents the problem space
and how tox solves it.


---

ignore-words.txt

---

releas
master
