PIL.md

---

# PIL Package (autodoc of remaining modules)

Reference for modules whose documentation has not yet been ported or written can be found here.

## `PIL` Module

<div class="autoexception" data-show-inheritance="">

UnidentifiedImageError

</div>

## `~PIL.BdfFontFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.BdfFontFile

</div>

## `~PIL.ContainerIO` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.ContainerIO

</div>

## `~PIL.FontFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.FontFile

</div>

## `~PIL.GdImageFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.GdImageFile

</div>

## `~PIL.GimpGradientFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.GimpGradientFile

</div>

## `~PIL.GimpPaletteFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.GimpPaletteFile

</div>

## `~PIL.ImageDraw2` Module

<div class="automodule" data-members="" data-member-order="bysource" data-undoc-members="" data-show-inheritance="">

PIL.ImageDraw2

</div>

## `~PIL.ImageMode` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.ImageMode

</div>

## `~PIL.PaletteFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PaletteFile

</div>

## `~PIL.PcfFontFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PcfFontFile

</div>

## <span class="title-ref">.PngImagePlugin.iTXt</span> Class

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PngImagePlugin.iTXt

<div class="method">

\_\_new\_\_(cls, text, lang, tkey)

  - param value  
    value for this key

  - param lang  
    language code

  - param tkey  
    UTF-8 version of the key name

</div>

</div>

## <span class="title-ref">.PngImagePlugin.PngInfo</span> Class

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PngImagePlugin.PngInfo

</div>

## `~PIL.TarIO` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.TarIO

</div>

## `~PIL.WalImageFile` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.WalImageFile

</div>

---

about.md

---

# About

## Goals

The fork author's goal is to foster and support active development of PIL through:

  - Continuous integration testing via [GitHub Actions](https://github.com/python-pillow/Pillow/actions) and [AppVeyor](https://ci.appveyor.com/project/Python-pillow/pillow)
  - Publicized development activity on [GitHub](https://github.com/python-pillow/Pillow)
  - Regular releases to the [Python Package Index](https://pypi.org/project/pillow/)

## License

Like PIL, Pillow is [licensed under the open source MIT-CMU License](https://raw.githubusercontent.com/python-pillow/Pillow/main/LICENSE)

## Why a fork?

PIL is not setuptools compatible. Please see [this Image-SIG post](https://mail.python.org/pipermail/image-sig/2010-August/006480.html) for a more detailed explanation. Also, PIL's bi-yearly (or greater) release schedule was too infrequent to accommodate the large number and frequency of issues reported.

## What about PIL?

\> **Note** \> Prior to Pillow 2.0.0, very few image code changes were made. Pillow 2.0.0 added Python 3 support and includes many bug fixes from many contributors.

The last PIL release was in 2009 (1.1.7) and [no future releases are expected](https://github.com/python-pillow/Pillow/issues/1535). In January 2020, [the PyPI moderators exhausted the PEP 541 process for contacting the PIL project owner](https://github.com/python-pillow/Pillow/issues/1535#issuecomment-570308446) and the [PIL project on PyPI](https://pypi.org/project/PIL) was transferred to the [Pillow team](https://github.com/python-pillow/Pillow/graphs/contributors). The Pillow team has no plans to update the PIL project on PyPI.

---

deprecations.md

---

# Deprecations and removals

This page lists Pillow features that are deprecated, or have been removed in past major releases, and gives the alternatives to use instead.

## Deprecated features

Below are features which are considered deprecated. Where appropriate, a :py\`DeprecationWarning\` is issued.

### ImageFile.raise\_oserror

<div class="deprecated">

10.2.0

</div>

`ImageFile.raise_oserror()` has been deprecated and will be removed in Pillow 12.0.0 (2025-10-15). The function is undocumented and is only useful for translating error codes returned by a codec's `decode()` method, which ImageFile already does automatically.

### IptcImageFile helper functions

<div class="deprecated">

10.2.0

</div>

The functions `IptcImageFile.dump` and `IptcImageFile.i`, and the constant `IptcImageFile.PAD` have been deprecated and will be removed in Pillow 12.0.0 (2025-10-15). These are undocumented helper functions intended for internal use, so there is no replacement. They can each be replaced by a single line of code using builtin functions in Python.

### ImageCms constants and versions() function

<div class="deprecated">

10.3.0

</div>

A number of constants and a function in :py`.ImageCms` have been deprecated. This includes a table of flags based on LittleCMS version 1 which has been replaced with a new class :py\`.ImageCms.Flags\` based on LittleCMS 2 flags.

| Deprecated                                 | Use instead                                                                                                                            |
| ------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------- |
| `ImageCms.DESCRIPTION`                     | No replacement                                                                                                                         |
| `ImageCms.VERSION`                         | `PIL.__version__`                                                                                                                      |
| `ImageCms.FLAGS["MATRIXINPUT"]`            | :py\`.ImageCms.Flags.CLUT\_POST\_LINEARIZATION\`                                                                                       |
| `ImageCms.FLAGS["MATRIXOUTPUT"]`           | :py\`.ImageCms.Flags.FORCE\_CLUT\`                                                                                                     |
| `ImageCms.FLAGS["MATRIXONLY"]`             | No replacement                                                                                                                         |
| `ImageCms.FLAGS["NOWHITEONWHITEFIXUP"]`    | :py\`.ImageCms.Flags.NOWHITEONWHITEFIXUP\`                                                                                             |
| `ImageCms.FLAGS["NOPRELINEARIZATION"]`     | :py\`.ImageCms.Flags.CLUT\_PRE\_LINEARIZATION\`                                                                                        |
| `ImageCms.FLAGS["GUESSDEVICECLASS"]`       | :py\`.ImageCms.Flags.GUESSDEVICECLASS\`                                                                                                |
| `ImageCms.FLAGS["NOTCACHE"]`               | :py\`.ImageCms.Flags.NOCACHE\`                                                                                                         |
| `ImageCms.FLAGS["NOTPRECALC"]`             | :py\`.ImageCms.Flags.NOOPTIMIZE\`                                                                                                      |
| `ImageCms.FLAGS["NULLTRANSFORM"]`          | :py\`.ImageCms.Flags.NULLTRANSFORM\`                                                                                                   |
| `ImageCms.FLAGS["HIGHRESPRECALC"]`         | :py\`.ImageCms.Flags.HIGHRESPRECALC\`                                                                                                  |
| `ImageCms.FLAGS["LOWRESPRECALC"]`          | :py\`.ImageCms.Flags.LOWRESPRECALC\`                                                                                                   |
| `ImageCms.FLAGS["GAMUTCHECK"]`             | :py\`.ImageCms.Flags.GAMUTCHECK\`                                                                                                      |
| `ImageCms.FLAGS["WHITEBLACKCOMPENSATION"]` | :py\`.ImageCms.Flags.BLACKPOINTCOMPENSATION\`                                                                                          |
| `ImageCms.FLAGS["BLACKPOINTCOMPENSATION"]` | :py\`.ImageCms.Flags.BLACKPOINTCOMPENSATION\`                                                                                          |
| `ImageCms.FLAGS["SOFTPROOFING"]`           | :py\`.ImageCms.Flags.SOFTPROOFING\`                                                                                                    |
| `ImageCms.FLAGS["PRESERVEBLACK"]`          | :py\`.ImageCms.Flags.NONEGATIVES\`                                                                                                     |
| `ImageCms.FLAGS["NODEFAULTRESOURCEDEF"]`   | :py\`.ImageCms.Flags.NODEFAULTRESOURCEDEF\`                                                                                            |
| `ImageCms.FLAGS["GRIDPOINTS"]`             | :py\`.ImageCms.Flags.GRIDPOINTS()\`                                                                                                    |
| `ImageCms.versions()`                      | :py\`PIL.features.version\_module\` with `feature="littlecms2"`, :py\`sys.version\` or :py\`sys.version\_info\`, and `PIL.__version__` |

#### ImageMath eval()

<div class="deprecated">

10.3.0

</div>

`ImageMath.eval()` has been deprecated. Use :py\`\~PIL.ImageMath.lambda\_eval\` or :py\`\~PIL.ImageMath.unsafe\_eval\` instead.

#### BGR;15, BGR 16 and BGR;24

<div class="deprecated">

10.4.0

</div>

The experimental BGR;15, BGR;16 and BGR;24 modes have been deprecated.

#### Non-image modes in ImageCms

<div class="deprecated">

10.4.0

</div>

The use in :py`.ImageCms` of input modes and output modes that are not Pillow image modes has been deprecated. Defaulting to "L" or "1" if the mode cannot be mapped is also deprecated.

#### Support for LibTIFF earlier than 4

<div class="deprecated">

10.4.0

</div>

Support for LibTIFF earlier than version 4 has been deprecated. Upgrade to a newer version of LibTIFF instead.

#### ImageDraw.getdraw hints parameter

<div class="deprecated">

10.4.0

</div>

The `hints` parameter in :py\`\~PIL.ImageDraw.getdraw()\` has been deprecated.

#### FreeType 2.9.0

<div class="deprecated">

11.0.0

</div>

Support for FreeType 2.9.0 is deprecated and will be removed in Pillow 12.0.0 (2025-10-15), when FreeType 2.9.1 will be the minimum supported.

We recommend upgrading to at least FreeType [2.10.4](https://sourceforge.net/projects/freetype/files/freetype2/2.10.4/), which fixed a severe vulnerability introduced in FreeType 2.6 (`2020-15999`).

#### ICNS (width, height, scale) sizes

<div class="deprecated">

11.0.0

</div>

Setting an ICNS image size to `(width, height, scale)` before loading has been deprecated. Instead, `load(scale)` can be used.

#### Image isImageType()

<div class="deprecated">

11.0.0

</div>

`Image.isImageType(im)` has been deprecated. Use `isinstance(im, Image.Image)` instead.

#### ImageMath.lambda\_eval and ImageMath.unsafe\_eval options parameter

<div class="deprecated">

11.0.0

</div>

The `options` parameter in :py\`\~PIL.ImageMath.lambda\_eval()<span class="title-ref"> and :py</span>\~PIL.ImageMath.unsafe\_eval()\` has been deprecated. One or more keyword arguments can be used instead.

#### JpegImageFile.huffman\_ac and JpegImageFile.huffman\_dc

<div class="deprecated">

11.0.0

</div>

The `huffman_ac` and `huffman_dc` dictionaries on JPEG images were unused. They have been deprecated, and will be removed in Pillow 12 (2025-10-15).

#### Specific WebP Feature Checks

<div class="deprecated">

11.0.0

</div>

`features.check("transp_webp")`, `features.check("webp_mux")` and `features.check("webp_anim")` are now deprecated. They will always return `True` if the WebP module is installed, until they are removed in Pillow 12.0.0 (2025-10-15).

#### Get internal pointers to objects

<div class="deprecated">

11.0.0

</div>

`Image.core.ImagingCore.id` and `Image.core.ImagingCore.unsafe_ptrs` have been deprecated and will be removed in Pillow 12 (2025-10-15). They were used for obtaining raw pointers to `ImagingCore` internals. To interact with C code, you can use `Image.Image.getim()`, which returns a `Capsule` object.

## Removed features

Deprecated features are only removed in major releases after an appropriate period of deprecation has passed.

### TiffImagePlugin IFD\_LEGACY\_API

<div class="versionremoved">

11.0.0

</div>

`TiffImagePlugin.IFD_LEGACY_API` was removed, as it was an unused setting.

### PSFile

<div class="deprecated">

9.5.0

</div>

<div class="versionremoved">

11.0.0

</div>

The :py\`\!PSFile\` class was removed in Pillow 11 (2024-10-15). This class was only made as a helper to be used internally, so there is no replacement. If you need this functionality though, it is a very short class that can easily be recreated in your own code.

### PyAccess and Image.USE\_CFFI\_ACCESS

<div class="deprecated">

10.0.0

</div>

<div class="versionremoved">

11.0.0

</div>

Since Pillow's C API is now faster than PyAccess on PyPy, `PyAccess` has been removed. Pillow's C API will now be used on PyPy instead.

`Image.USE_CFFI_ACCESS`, for switching from the C API to PyAccess, was similarly removed.

### Tk/Tcl 8.4

<div class="deprecated">

8.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

Support for Tk/Tcl 8.4 was removed in Pillow 10.0.0 (2023-07-01).

### Categories

<div class="deprecated">

8.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

`im.category` was removed along with the related `Image.NORMAL`, `Image.SEQUENCE` and `Image.CONTAINER` attributes.

To determine if an image has multiple frames or not, `getattr(im, "is_animated", False)` can be used instead.

### JpegImagePlugin.convert\_dict\_qtables

<div class="deprecated">

8.3.0

</div>

<div class="versionremoved">

10.0.0

</div>

Since deprecation in Pillow 8.3.0, the `convert_dict_qtables` method no longer performed any operations on the data given to it, and has been removed.

### ImagePalette size parameter

<div class="deprecated">

8.4.0

</div>

<div class="versionremoved">

10.0.0

</div>

Before Pillow 8.3.0, `ImagePalette` required palette data of particular lengths by default, and the `size` parameter could be used to override that. Pillow 8.3.0 removed the default required length, also removing the need for the `size` parameter.

### ImageShow.Viewer.show\_file file argument

<div class="deprecated">

9.1.0

</div>

<div class="versionremoved">

10.0.0

</div>

The `file` argument in :py\`\~PIL.ImageShow.Viewer.show\_file()<span class="title-ref"> has been removed and replaced by </span><span class="title-ref">path</span>\`.

In effect, `viewer.show_file("test.jpg")` will continue to work unchanged.

### Constants

<div class="deprecated">

9.1.0

</div>

<div class="versionremoved">

10.0.0

</div>

A number of constants have been removed. Instead, :py\`enum.IntEnum\` classes have been added.

\> **Note** \> Additional `Image` constants were deprecated in Pillow 9.1.0, but that was reversed in Pillow 9.4.0 and those constants will now remain available. See \[restored-image-constants\](\#restored-image-constants)

| Removed                                             | Use instead                                     |
| --------------------------------------------------- | ----------------------------------------------- |
| `Image.LINEAR`                                      | `Image.BILINEAR` or `Image.Resampling.BILINEAR` |
| `Image.CUBIC`                                       | `Image.BICUBIC` or `Image.Resampling.BICUBIC`   |
| `Image.ANTIALIAS`                                   | `Image.LANCZOS` or `Image.Resampling.LANCZOS`   |
| `ImageCms.INTENT_PERCEPTUAL`                        | `ImageCms.Intent.PERCEPTUAL`                    |
| `ImageCms.INTENT_RELATIVE_COLORMETRIC`              | `ImageCms.Intent.RELATIVE_COLORMETRIC`          |
| `ImageCms.INTENT_SATURATION`                        | `ImageCms.Intent.SATURATION`                    |
| `ImageCms.INTENT_ABSOLUTE_COLORIMETRIC`             | `ImageCms.Intent.ABSOLUTE_COLORIMETRIC`         |
| `ImageCms.DIRECTION_INPUT`                          | `ImageCms.Direction.INPUT`                      |
| `ImageCms.DIRECTION_OUTPUT`                         | `ImageCms.Direction.OUTPUT`                     |
| `ImageCms.DIRECTION_PROOF`                          | `ImageCms.Direction.PROOF`                      |
| `ImageFont.LAYOUT_BASIC`                            | `ImageFont.Layout.BASIC`                        |
| `ImageFont.LAYOUT_RAQM`                             | `ImageFont.Layout.RAQM`                         |
| `BlpImagePlugin.BLP_FORMAT_JPEG`                    | `BlpImagePlugin.Format.JPEG`                    |
| `BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED`          | `BlpImagePlugin.Encoding.UNCOMPRESSED`          |
| `BlpImagePlugin.BLP_ENCODING_DXT`                   | `BlpImagePlugin.Encoding.DXT`                   |
| `BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA` | `BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA` |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1`            | `BlpImagePlugin.AlphaEncoding.DXT1`             |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3`            | `BlpImagePlugin.AlphaEncoding.DXT3`             |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5`            | `BlpImagePlugin.AlphaEncoding.DXT5`             |
| `FtexImagePlugin.FORMAT_DXT1`                       | `FtexImagePlugin.Format.DXT1`                   |
| `FtexImagePlugin.FORMAT_UNCOMPRESSED`               | `FtexImagePlugin.Format.UNCOMPRESSED`           |
| `PngImagePlugin.APNG_DISPOSE_OP_NONE`               | `PngImagePlugin.Disposal.OP_NONE`               |
| `PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND`         | `PngImagePlugin.Disposal.OP_BACKGROUND`         |
| `PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS`           | `PngImagePlugin.Disposal.OP_PREVIOUS`           |
| `PngImagePlugin.APNG_BLEND_OP_SOURCE`               | `PngImagePlugin.Blend.OP_SOURCE`                |
| `PngImagePlugin.APNG_BLEND_OP_OVER`                 | `PngImagePlugin.Blend.OP_OVER`                  |

### FitsStubImagePlugin

<div class="deprecated">

9.1.0

</div>

<div class="versionremoved">

10.0.0

</div>

The stub image plugin `FitsStubImagePlugin` has been removed. FITS images can be read without a handler through `~PIL.FitsImagePlugin` instead.

### Font size and offset methods

<div class="deprecated">

9.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

Several functions for computing the size and offset of rendered text have been removed:

| Removed                                                     | Use instead                                                                                        |
| ----------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |
| `FreeTypeFont.getsize()` and `FreeTypeFont.getoffset()`     | :py\`.FreeTypeFont.getbbox\` and :py\`.FreeTypeFont.getlength\`                                    |
| `FreeTypeFont.getsize_multiline()`                          | :py\`.ImageDraw.multiline\_textbbox\`                                                              |
| `ImageFont.getsize()`                                       | :py\`.ImageFont.getbbox\` and :py\`.ImageFont.getlength\`                                          |
| `TransposedFont.getsize()`                                  | :py\`.TransposedFont.getbbox\` and :py\`.TransposedFont.getlength\`                                |
| `ImageDraw.textsize()` and `ImageDraw.multiline_textsize()` | :py\`.ImageDraw.textbbox\`, :py\`.ImageDraw.textlength\` and :py\`.ImageDraw.multiline\_textbbox\` |
| `ImageDraw2.Draw.textsize()`                                | :py\`.ImageDraw2.Draw.textbbox\` and :py\`.ImageDraw2.Draw.textlength\`                            |

Previous code:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    width, height = font.getsize("Hello world")
    left, top = font.getoffset("Hello world")
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    width, height = draw.textsize("Hello world", font)
    
    width, height = font.getsize_multiline("Hello\nworld")
    width, height = draw.multiline_textsize("Hello\nworld", font)

Use instead:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    left, top, right, bottom = font.getbbox("Hello world")
    width, height = right - left, bottom - top
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    width = draw.textlength("Hello world", font)
    
    left, top, right, bottom = draw.multiline_textbbox((0, 0), "Hello\nworld", font)
    width, height = right - left, bottom - top

Previously, the `size` methods returned a `height` that included the vertical offset of the text, while the new `bbox` methods distinguish this as a `top` offset.

![In bbox methods, top measures the vertical distance above the text, while bottom measures that plus the vertical distance of the text itself. In size methods, height also measures the vertical distance above the text plus the vertical distance of the text itself.](./example/size_vs_bbox.webp)

If you are using these methods for aligning text, consider using \[text-anchors\](\#text-anchors) instead which avoid issues that can occur with non-English text or unusual fonts. For example, instead of the following code:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    width, height = draw.textsize("Hello world", font)
    x, y = (100 - width) / 2, (100 - height) / 2
    draw.text((x, y), "Hello world", font=font)

Use instead:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    draw.text((100 / 2, 100 / 2), "Hello world", font=font, anchor="mm")

### FreeTypeFont.getmask2 fill parameter

<div class="deprecated">

9.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

The undocumented `fill` parameter of :py\`.FreeTypeFont.getmask2\` has been removed.

### PhotoImage.paste box parameter

<div class="deprecated">

9.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

The `box` parameter was unused and has been removed.

### PyQt5 and PySide2

<div class="deprecated">

9.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

[Qt 5 reached end-of-life](https://www.qt.io/blog/qt-5.15-released) on 2020-12-08 for open-source users (and will reach EOL on 2023-12-08 for commercial licence holders).

Support for PyQt5 and PySide2 has been removed from `ImageQt`. Upgrade to [PyQt6](https://www.riverbankcomputing.com/static/Docs/PyQt6/) or [PySide6](https://doc.qt.io/qtforpython-6/) instead.

### Image.coerce\_e

<div class="deprecated">

9.2.0

</div>

<div class="versionremoved">

10.0.0

</div>

This undocumented method has been removed.

### PILLOW\_VERSION constant

<div class="deprecated">

5.2.0

</div>

<div class="versionremoved">

9.0.0

</div>

Use `__version__` instead.

It was initially removed in Pillow 7.0.0, but temporarily brought back in 7.1.0 to give projects more time to upgrade.

### Image.show command parameter

<div class="deprecated">

7.2.0

</div>

<div class="versionremoved">

9.0.0

</div>

The `command` parameter has been removed. Use a subclass of :py\`.ImageShow.Viewer\` instead.

### Image.\_showxv

<div class="deprecated">

7.2.0

</div>

<div class="versionremoved">

9.0.0

</div>

Use :py\`.Image.Image.show\` instead. If custom behaviour is required, use :py\`.ImageShow.register\` to add a custom :py\`.ImageShow.Viewer\` class.

### ImageFile.raise\_ioerror

<div class="deprecated">

7.2.0

</div>

<div class="versionremoved">

9.0.0

</div>

:py\`IOError\` was merged into :py\`OSError\` in Python 3.3. So, `ImageFile.raise_ioerror` has been removed. Use `ImageFile.raise_oserror` instead.

### FreeType 2.7

<div class="deprecated">

8.1.0

</div>

<div class="versionremoved">

9.0.0

</div>

Support for FreeType 2.7 has been removed.

We recommend upgrading to at least [FreeType](https://freetype.org/) 2.10.4, which fixed a severe vulnerability introduced in FreeType 2.6 (`2020-15999`).

### im.offset

<div class="deprecated">

1.1.2

</div>

<div class="versionremoved">

8.0.0

</div>

`im.offset()` has been removed, call :py\`.ImageChops.offset()\` instead.

It was documented as deprecated in PIL 1.1.2, raised a :py\`DeprecationWarning\` since 1.1.5, an :py\`Exception\` since Pillow 3.0.0 and :py\`NotImplementedError\` since 3.3.0.

### Image.fromstring, im.fromstring and im.tostring

<div class="deprecated">

2.0.0

</div>

<div class="versionremoved">

8.0.0

</div>

  - `Image.fromstring()` has been removed, call :py\`.Image.frombytes()\` instead.
  - `im.fromstring()` has been removed, call :py\`\~PIL.Image.Image.frombytes()\` instead.
  - `im.tostring()` has been removed, call :py\`\~PIL.Image.Image.tobytes()\` instead.

They issued a :py\`DeprecationWarning\` since 2.0.0, an :py\`Exception\` since 3.0.0 and :py\`NotImplementedError\` since 3.3.0.

### ImageCms.CmsProfile attributes

<div class="deprecated">

3.2.0

</div>

<div class="versionremoved">

8.0.0

</div>

Some attributes in :py\`PIL.ImageCms.core.CmsProfile\` have been removed. From 6.0.0, they issued a :py\`DeprecationWarning\`:

| Removed                | Use instead                                       |
| ---------------------- | ------------------------------------------------- |
| `color_space`          | Padded :py\`\~.CmsProfile.xcolor\_space\`         |
| `pcs`                  | Padded :py\`\~.CmsProfile.connection\_space\`     |
| `product_copyright`    | Unicode :py\`\~.CmsProfile.copyright\`            |
| `product_desc`         | Unicode :py\`\~.CmsProfile.profile\_description\` |
| `product_description`  | Unicode :py\`\~.CmsProfile.profile\_description\` |
| `product_manufacturer` | Unicode :py\`\~.CmsProfile.manufacturer\`         |
| `product_model`        | Unicode :py\`\~.CmsProfile.model\`                |

### Python 2.7

<div class="deprecated">

6.0.0

</div>

<div class="versionremoved">

7.0.0

</div>

Python 2.7 reached end-of-life on 2020-01-01. Pillow 6.x was the last series to support Python 2.

### Image.\_\_del\_\_

<div class="deprecated">

6.1.0

</div>

<div class="versionremoved">

7.0.0

</div>

Implicitly closing the image's underlying file in `Image.__del__` has been removed. Use a context manager or call `Image.close()` instead to close the file in a deterministic way.

Previous method:

    im = Image.open("hopper.png")
    im.save("out.jpg")

Use instead:

    with Image.open("hopper.png") as im:
        im.save("out.jpg")

### PIL.\*ImagePlugin.\_\_version\_\_ attributes

<div class="deprecated">

6.0.0

</div>

<div class="versionremoved">

7.0.0

</div>

The version constants of individual plugins have been removed. Use `PIL.__version__` instead.

| Removed                                                    | Removed                                                     | Removed                          |
| ---------------------------------------------------------- | ----------------------------------------------------------- | -------------------------------- |
| `BmpImagePlugin.__version__`                               | `Jpeg2KImagePlugin.__version__`                             | `PngImagePlugin.__version__`     |
| `CurImagePlugin.__version__`                               | `JpegImagePlugin.__version__`                               | `PpmImagePlugin.__version__`     |
| `DcxImagePlugin.__version__`                               | `McIdasImagePlugin.__version__`                             | `PsdImagePlugin.__version__`     |
| `EpsImagePlugin.__version__`                               | `MicImagePlugin.__version__`                                | `SgiImagePlugin.__version__`     |
| `FliImagePlugin.__version__`                               | `MpegImagePlugin.__version__`                               | `SunImagePlugin.__version__`     |
| `FpxImagePlugin.__version__`                               | `MpoImagePlugin.__version__`                                | `TgaImagePlugin.__version__`     |
| `GdImageFile.__version__`                                  | `MspImagePlugin.__version__`                                | `TiffImagePlugin.__version__`    |
| `GifImagePlugin.__version__`                               | `PalmImagePlugin.__version__`                               | `WmfImagePlugin.__version__`     |
| `IcoImagePlugin.__version__`                               | `PcdImagePlugin.__version__`                                | `XbmImagePlugin.__version__`     |
| `ImImagePlugin.__version__`                                | `PcxImagePlugin.__version__`                                | `XpmImagePlugin.__version__`     |
| `ImtImagePlugin.__version__` `IptcImagePlugin.__version__` | `PdfImagePlugin.__version__` `PixarImagePlugin.__version__` | `XVThumbImagePlugin.__version__` |

### PyQt4 and PySide

<div class="deprecated">

6.0.0

</div>

<div class="versionremoved">

7.0.0

</div>

Qt 4 reached end-of-life on 2015-12-19. Its Python bindings are also EOL: PyQt4 since 2018-08-31 and PySide since 2015-10-14.

Support for PyQt4 and PySide has been removed from `ImageQt`. Please upgrade to PyQt5 or PySide2.

### Setting the size of TIFF images

<div class="deprecated">

5.3.0

</div>

<div class="versionremoved">

7.0.0

</div>

Setting the size of a TIFF image directly (eg. `im.size = (256, 256)`) throws an error. Use `Image.resize` instead.

### VERSION constant

<div class="deprecated">

5.2.0

</div>

<div class="versionremoved">

6.0.0

</div>

`VERSION` (the old PIL version, always 1.1.7) has been removed. Use `__version__` instead.

### Undocumented ImageOps functions

<div class="deprecated">

4.3.0

</div>

<div class="versionremoved">

6.0.0

</div>

Several undocumented functions in `ImageOps` have been removed. Use the equivalents in `ImageFilter` instead:

| Removed                  | Use instead                |
| ------------------------ | -------------------------- |
| `ImageOps.box_blur`      | `ImageFilter.BoxBlur`      |
| `ImageOps.gaussian_blur` | `ImageFilter.GaussianBlur` |
| `ImageOps.gblur`         | `ImageFilter.GaussianBlur` |
| `ImageOps.usm`           | `ImageFilter.UnsharpMask`  |
| `ImageOps.unsharp_mask`  | `ImageFilter.UnsharpMask`  |

### PIL.OleFileIO

<div class="deprecated">

4.0.0

</div>

<div class="versionremoved">

6.0.0

</div>

`PIL.OleFileIO` was removed as a vendored file in Pillow 4.0.0 (2017-01) in favour of the upstream `olefile` Python package, and replaced with an :py\`ImportError\` in 5.0.0 (2018-01). The deprecated file has now been removed from Pillow. If needed, install from PyPI (eg. `python3 -m pip install olefile`).

### import \_imaging

<div class="versionremoved">

2.1.0

</div>

Pillow \>= 2.1.0 no longer supports `import _imaging`. Please use `from PIL.Image import core as _imaging` instead.

### Pillow and PIL

<div class="versionremoved">

1.0.0

</div>

Pillow and PIL cannot co-exist in the same environment. Before installing Pillow, please uninstall PIL.

### import Image

<div class="versionremoved">

1.0.0

</div>

Pillow \>= 1.0 no longer supports `import Image`. Please use `from PIL import Image` instead.

---

appendices.md

---

# Appendices

<div class="note">

<div class="title">

Note

</div>

Contributors please include appendices as needed or appropriate with your bug fixes, feature additions and tests.

</div>

<div class="toctree" data-maxdepth="2">

image-file-formats text-anchors writing-your-own-image-plugin

</div>

---

concepts.md

---

# Concepts

The Python Imaging Library handles *raster images*; that is, rectangles of pixel data.

## Bands

An image can consist of one or more bands of data. The Python Imaging Library allows you to store several bands in a single image, provided they all have the same dimensions and depth. For example, a PNG image might have 'R', 'G', 'B', and 'A' bands for the red, green, blue, and alpha transparency values. Many operations act on each band separately, e.g., histograms. It is often useful to think of each pixel as having one value per band.

To get the number and names of bands in an image, use the :py\`\~PIL.Image.Image.getbands\` method.

## Modes

The `mode` of an image is a string which defines the type and depth of a pixel in the image. Each pixel uses the full range of the bit depth. So a 1-bit pixel has a range of 0-1, an 8-bit pixel has a range of 0-255, a 32-signed integer pixel has the range of INT32 and a 32-bit floating point pixel has the range of FLOAT32. The current release supports the following standard modes:

>   - `1` (1-bit pixels, black and white, stored with one pixel per byte)
>   - `L` (8-bit pixels, grayscale)
>   - `P` (8-bit pixels, mapped to any other mode using a color palette)
>   - `RGB` (3x8-bit pixels, true color)
>   - `RGBA` (4x8-bit pixels, true color with transparency mask)
>   - `CMYK` (4x8-bit pixels, color separation)
>   - `YCbCr` (3x8-bit pixels, color video format)
>       - Note that this refers to the JPEG, and not the ITU-R BT.2020, standard
>   - `LAB` (3x8-bit pixels, the L\*a\*b color space)
>   - `HSV` (3x8-bit pixels, Hue, Saturation, Value color space)
>       - Hue's range of 0-255 is a scaled version of 0 degrees \<= Hue \< 360 degrees
>   - `I` (32-bit signed integer pixels)
>   - `F` (32-bit floating point pixels)

Pillow also provides limited support for a few additional modes, including:

>   - `LA` (L with alpha)
>   - `PA` (P with alpha)
>   - `RGBX` (true color with padding)
>   - `RGBa` (true color with premultiplied alpha)
>   - `La` (L with premultiplied alpha)
>   - `I;16` (16-bit unsigned integer pixels)
>   - `I;16L` (16-bit little endian unsigned integer pixels)
>   - `I;16B` (16-bit big endian unsigned integer pixels)
>   - `I;16N` (16-bit native endian unsigned integer pixels)

Premultiplied alpha is where the values for each other channel have been multiplied by the alpha. For example, an RGBA pixel of `(10, 20, 30, 127)` would convert to an RGBa pixel of `(5, 10, 15, 127)`. The values of the R, G and B channels are halved as a result of the half transparency in the alpha channel.

Apart from these additional modes, Pillow doesn't yet support multichannel images with a depth of more than 8 bits per channel.

Pillow also doesn’t support user-defined modes; if you need to handle band combinations that are not listed above, use a sequence of Image objects.

You can read the mode of an image through the :py\`\~PIL.Image.Image.mode\` attribute. This is a string containing one of the above values.

## Size

You can read the image size through the :py\`\~PIL.Image.Image.size\` attribute. This is a 2-tuple, containing the horizontal and vertical size in pixels.

## Coordinate System

The Python Imaging Library uses a Cartesian pixel coordinate system, with (0,0) in the upper left corner. Note that the coordinates refer to the implied pixel corners; the centre of a pixel addressed as (0, 0) actually lies at (0.5, 0.5).

Coordinates are usually passed to the library as 2-tuples (x, y). Rectangles are represented as 4-tuples, (x1, y1, x2, y2), with the upper left corner given first.

## Palette

The palette mode (`P`) uses a color palette to define the actual color for each pixel.

## Info

You can attach auxiliary information to an image using the :py\`\~PIL.Image.Image.info\` attribute. This is a dictionary object.

How such information is handled when loading and saving image files is up to the file format handler (see the chapter on \[image-file-formats\](\#image-file-formats)). Most handlers add properties to the :py\`\~PIL.Image.Image.info\` attribute when loading an image, but ignore it when saving images.

## Transparency

If an image does not have an alpha band, transparency may be specified in the :py\`\~PIL.Image.Image.info\` attribute with a "transparency" key.

Most of the time, the "transparency" value is a single integer, describing which pixel value is transparent in a "1", "L", "I" or "P" mode image. However, PNG images may have three values, one for each channel in an "RGB" mode image, or can have a byte string for a "P" mode image, to specify the alpha value for each palette entry.

## Orientation

A common element of the :py\`\~PIL.Image.Image.info\` attribute for JPG and TIFF images is the EXIF orientation tag. This is an instruction for how the image data should be oriented. For example, it may instruct an image to be rotated by 90 degrees, or to be mirrored. To apply this information to an image, :py\`\~PIL.ImageOps.exif\_transpose\` can be used.

## Filters

For geometry operations that may map multiple input pixels to a single output pixel, the Python Imaging Library provides different resampling *filters*.

<div class="data" data-noindex="">

Resampling.NEAREST

Pick one nearest pixel from the input image. Ignore all other input pixels.

</div>

<div class="data" data-noindex="">

Resampling.BOX

Each pixel of source image contributes to one pixel of the destination image with identical weights. For upscaling is equivalent of <span class="title-ref">Resampling.NEAREST</span>. This filter can only be used with the :py\`\~PIL.Image.Image.resize\` and :py\`\~PIL.Image.Image.thumbnail\` methods.

<div class="versionadded">

3.4.0

</div>

</div>

<div class="data" data-noindex="">

Resampling.BILINEAR

For resize calculate the output pixel value using linear interpolation on all pixels that may contribute to the output value. For other transformations linear interpolation over a 2x2 environment in the input image is used.

</div>

<div class="data" data-noindex="">

Resampling.HAMMING

Produces a sharper image than <span class="title-ref">Resampling.BILINEAR</span>, doesn't have dislocations on local level like with <span class="title-ref">Resampling.BOX</span>. This filter can only be used with the :py\`\~PIL.Image.Image.resize\` and :py\`\~PIL.Image.Image.thumbnail\` methods.

<div class="versionadded">

3.4.0

</div>

</div>

<div class="data" data-noindex="">

Resampling.BICUBIC

For resize calculate the output pixel value using cubic interpolation on all pixels that may contribute to the output value. For other transformations cubic interpolation over a 4x4 environment in the input image is used.

</div>

<div class="data" data-noindex="">

Resampling.LANCZOS

Calculate the output pixel value using a high-quality Lanczos filter (a truncated sinc) on all pixels that may contribute to the output value. This filter can only be used with the :py\`\~PIL.Image.Image.resize\` and :py\`\~PIL.Image.Image.thumbnail\` methods.

<div class="versionadded">

1.1.3

</div>

</div>

### Filters comparison table

<table style="width:94%;">
<colgroup>
<col style="width: 38%" />
<col style="width: 19%" />
<col style="width: 16%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th>Filter</th>
<th>Downscaling quality</th>
<th>Upscaling quality</th>
<th>Performance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="title-ref">Resampling.NEAREST</span> |</td>
<td><blockquote>
<div class="line-block"></div>
</blockquote></td>
<td><blockquote>
<div class="line-block">⭐⭐⭐⭐⭐</div>
</blockquote></td>
<td></td>
</tr>
<tr class="even">
<td><span class="title-ref">Resampling.BOX</span> | ⭐</td>
<td><blockquote>
<div class="line-block"></div>
</blockquote></td>
<td><blockquote>
<div class="line-block">⭐⭐⭐⭐</div>
</blockquote></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="title-ref">Resampling.BILINEAR</span>| ⭐</td>
<td><blockquote>
<div class="line-block">⭐</div>
</blockquote></td>
<td><blockquote>
<div class="line-block">⭐⭐⭐</div>
</blockquote></td>
<td></td>
</tr>
<tr class="even">
<td><span class="title-ref">Resampling.HAMMING</span> | ⭐⭐</td>
<td><blockquote>
<div class="line-block"></div>
</blockquote></td>
<td><blockquote>
<div class="line-block">⭐⭐⭐</div>
</blockquote></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="title-ref">Resampling.BICUBIC</span> | ⭐⭐⭐</td>
<td><blockquote>
<div class="line-block">⭐⭐⭐</div>
</blockquote></td>
<td>⭐⭐</td>
<td></td>
</tr>
<tr class="even">
<td><span class="title-ref">Resampling.LANCZOS</span> | ⭐⭐⭐⭐</td>
<td><blockquote>
<div class="line-block">⭐⭐⭐⭐ | ⭐</div>
</blockquote></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

---

image-file-formats.md

---

# Image file formats

The Python Imaging Library supports a wide variety of raster file formats. Over 30 different file formats can be identified and read by the library. Write support is less extensive, but most common interchange and presentation formats are supported.

The :py\`\~PIL.Image.open\` function identifies files from their contents, not their names, but the :py\`\~PIL.Image.Image.save\` method looks at the name to determine which format to use, unless the format is given explicitly.

When an image is opened from a file, only that instance of the image is considered to have the format. Copies of the image will contain data loaded from the file, but not the file itself, meaning that it can no longer be considered to be in the original format. So if :py\`\~PIL.Image.Image.copy\` is called on an image, or another method internally creates a copy of the image, then any methods or attributes specific to the format will no longer be present. The `fp` (file pointer) attribute will no longer be present, and the :py\`\~PIL.Image.Image.format\` attribute will be `None`.

## Fully supported formats

### BLP

BLP is the Blizzard Mipmap Format, a texture format used in World of Warcraft. Pillow supports reading `JPEG` Compressed or raw `BLP1` images, and all types of `BLP2` images.

#### Saving

Pillow supports writing BLP images. The :py\`\~PIL.Image.Image.save\` method can take the following keyword arguments:

  - **blp\_version**  
    If present and set to "BLP1", images will be saved as BLP1. Otherwise, images will be saved as BLP2.

### BMP

Pillow reads and writes Windows and OS/2 BMP files containing `1`, `L`, `P`, or `RGB` data. 16-colour images are read as `P` images. Support for reading 8-bit run-length encoding was added in Pillow 9.1.0. Support for reading 4-bit run-length encoding was added in Pillow 9.3.0.

#### Opening

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **compression**  
    Set to 1 if the file is a 256-color run-length encoded image. Set to 2 if the file is a 16-color run-length encoded image.

### DDS

DDS is a popular container texture format used in video games and natively supported by DirectX.

DXT1 and DXT5 pixel formats can be read, only in `RGBA` mode.

<div class="versionadded">

3.4.0 DXT3 images can be read in `RGB` mode and DX10 images can be read in `RGB` and `RGBA` mode.

</div>

<div class="versionadded">

6.0.0 Uncompressed `RGBA` images can be read.

</div>

<div class="versionadded">

8.3.0 BC5S images can be opened in `RGB` mode, and uncompressed `RGB` images can be read. Uncompressed data can also be saved to image files.

</div>

<div class="versionadded">

9.3.0 ATI1 images can be opened in `L` mode and ATI2 images can be opened in `RGB` mode.

</div>

<div class="versionadded">

9.4.0 Uncompressed `L` ("luminance") and `LA` images can be opened and saved.

</div>

<div class="versionadded">

10.1.0 BC5U can be read in `RGB` mode, and 8-bit color indexed images can be read in `P` mode.

</div>

### DIB

Pillow reads and writes DIB files. DIB files are similar to BMP files, so see above for more information.

> 
> 
> <div class="versionadded">
> 
> 6.0.0
> 
> </div>

### EPS

Pillow identifies EPS files containing image data, and can read files that contain embedded raster images (ImageData descriptors). If Ghostscript is available, other EPS files can be read as well. The EPS driver can also write EPS images. The EPS driver can read EPS images in `L`, `LAB`, `RGB` and `CMYK` mode, but Ghostscript may convert the images to `RGB` mode rather than leaving them in the original color space. The EPS driver can write images in `L`, `RGB` and `CMYK` modes.

#### Loading

To use Ghostscript, Pillow searches for the "gs" executable. On Windows, it also searches for "gswin32c" and "gswin64c". To customise this behaviour, `EpsImagePlugin.gs_binary = "gswin64"` will set the name of the executable to use. `EpsImagePlugin.gs_binary = False` will prevent Ghostscript use.

If Ghostscript is available, you can call the :py\`\~PIL.Image.Image.load\` method with the following parameters to affect how Ghostscript renders the EPS.

  - **scale**  
    Affects the scale of the resultant rasterized image. If the EPS suggests that the image be rendered at 100px x 100px, setting this parameter to 2 will make the Ghostscript render a 200px x 200px image instead. The relative position of the bounding box is maintained:
    
        im = Image.open(...)
        im.size  # (100,100)
        im.load(scale=2)
        im.size  # (200,200)

  - **transparency**  
    If true, generates an RGBA image with a transparent background, instead of the default behaviour of an RGB image with a white background.

### GIF

Pillow reads GIF87a and GIF89a versions of the GIF file format. The library writes files in GIF87a by default, unless GIF89a features are used or GIF89a is already in use. Files are written with LZW encoding.

GIF files are initially read as grayscale (`L`) or palette mode (`P`) images. Seeking to later frames in a `P` image will change the image to `RGB` (or `RGBA` if the first frame had transparency).

`P` mode images are changed to `RGB` because each frame of a GIF may contain its own individual palette of up to 256 colors. When a new frame is placed onto a previous frame, those colors may combine to exceed the `P` mode limit of 256 colors. Instead, the image is converted to `RGB` handle this.

If you would prefer the first `P` image frame to be `RGB` as well, so that every `P` frame is converted to `RGB` or `RGBA` mode, there is a setting available:

    from PIL import GifImagePlugin
    GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_ALWAYS

GIF frames do not always contain individual palettes however. If there is only a global palette, then all of the colors can fit within `P` mode. If you would prefer the frames to be kept as `P` in that case, there is also a setting available:

    from PIL import GifImagePlugin
    GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_AFTER_DIFFERENT_PALETTE_ONLY

To restore the default behavior, where `P` mode images are only converted to `RGB` or `RGBA` after the first frame:

    from PIL import GifImagePlugin
    GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_AFTER_FIRST

#### Opening

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **background**  
    Default background color (a palette color index).

  - **transparency**  
    Transparency color index. This key is omitted if the image is not transparent.

  - **version**  
    Version (either `GIF87a` or `GIF89a`).

  - **duration**  
    May not be present. The time to display the current frame of the GIF, in milliseconds.

  - **loop**  
    May not be present. The number of times the GIF should loop. 0 means that it will loop forever.

  - **comment**  
    May not be present. A comment about the image. This is the last comment found before the current frame's image.

  - **extension**  
    May not be present. Contains application specific information.

#### Reading sequences

The GIF loader supports the :py\`\~PIL.Image.Image.seek\` and :py\`\~PIL.Image.Image.tell\` methods. You can combine these methods to seek to the next frame (`im.seek(im.tell() + 1)`).

`im.seek()` raises an :py\`EOFError\` if you try to seek after the last frame.

#### Saving

When calling :py\`\~PIL.Image.Image.save\` to write a GIF file, the following options are available:

    im.save(out, save_all=True, append_images=[im1, im2, ...])

  - **save\_all**  
    If present and true, all frames of the image will be saved. If not, then only the first frame of a multiframe image will be saved.

  - **append\_images**  
    A list of images to append as additional frames. Each of the images in the list can be single or multiframe images. This is currently supported for GIF, PDF, PNG, TIFF, and WebP.
    
    It is also supported for ICO and ICNS. If images are passed in of relevant sizes, they will be used instead of scaling down the main image.

  - **include\_color\_table**  
    Whether or not to include local color table.

  - **interlace**  
    Whether or not the image is interlaced. By default, it is, unless the image is less than 16 pixels in width or height.

  - **disposal**  
    Indicates the way in which the graphic is to be treated after being displayed.
    
      - 0 - No disposal specified.
      - 1 - Do not dispose.
      - 2 - Restore to background color.
      - 3 - Restore to previous content.
    
    > Pass a single integer for a constant disposal, or a list or tuple to set the disposal for each frame separately.

  - **palette**  
    Use the specified palette for the saved image. The palette should be a bytes or bytearray object containing the palette entries in RGBRGB... form. It should be no more than 768 bytes. Alternately, the palette can be passed in as an :py\`PIL.ImagePalette.ImagePalette\` object.

  - **optimize**  
    Whether to attempt to compress the palette by eliminating unused colors (this is only useful if the palette can be compressed to the next smaller power of 2 elements) and whether to mark all pixels that are not new in the next frame as transparent.
    
    This is attempted by default, unless a palette is specified as an option or as part of the first image's :py\`\~PIL.Image.Image.info\` dictionary.

Note that if the image you are saving comes from an existing GIF, it may have the following properties in its :py\`\~PIL.Image.Image.info\` dictionary. For these options, if you do not pass them in, they will default to their :py\`\~PIL.Image.Image.info\` values.

  - **transparency**  
    Transparency color index.

  - **duration**  
    The display duration of each frame of the multiframe gif, in milliseconds. Pass a single integer for a constant duration, or a list or tuple to set the duration for each frame separately.

  - **loop**  
    Integer number of times the GIF should loop. 0 means that it will loop forever. If omitted or `None`, the image will not loop.

  - **comment**  
    A comment about the image.

#### Reading local images

The GIF loader creates an image memory the same size as the GIF file’s *logical screen size*, and pastes the actual pixel data (the *local image*) into this image. If you only want the actual pixel rectangle, you can crop the image:

    im = Image.open(...)
    
    if im.tile[0][0] == "gif":
        # only read the first "local image" from this GIF file
        box = im.tile[0][1]
        im = im.crop(box)

### ICNS

Pillow reads and writes macOS `.icns` files. By default, the largest available icon is read, though you can override this by setting the :py\`\~PIL.Image.Image.size\` property before calling :py\`\~PIL.Image.Image.load\`. The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` property:

\> **Note** \> Prior to version 8.3.0, Pillow could only write ICNS files on macOS.

  - **sizes**  
    A list of supported sizes found in this icon file; these are a 3-tuple, `(width, height, scale)`, where `scale` is 2 for a retina icon and 1 for a standard icon.

#### Loading

You can call the :py\`\~PIL.Image.Image.load\` method with the following parameter.

  - **scale**  
    Affects the scale of the resultant image. If the size is set to `(512, 512)`, after loading at scale 2, the final value of :py\`\~PIL.Image.Image.size\` will be `(1024, 1024)`.

#### Saving

The :py\`\~PIL.Image.Image.save\` method can take the following keyword arguments:

  - **append\_images**  
    A list of images to replace the scaled down versions of the image. The order of the images does not matter, as their use is determined by the size of each image.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

### ICO

ICO is used to store icons on Windows. The largest available icon is read.

#### Saving

The :py\`\~PIL.Image.Image.save\` method supports the following options:

  - **sizes**  
    A list of sizes including in this ico file; these are a 2-tuple, `(width, height)`; Default to `[(16, 16), (24, 24), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)]`. Any sizes bigger than the original size or 256 will be ignored.

The :py\`\~PIL.Image.Image.save\` method can take the following keyword arguments:

  - **append\_images**  
    A list of images to replace the scaled down versions of the image. The order of the images does not matter, as their use is determined by the size of each image.
    
    <div class="versionadded">
    
    8.1.0
    
    </div>

  - **bitmap\_format**  
    By default, the image data will be saved in PNG format. With a bitmap format of "bmp", image data will be saved in BMP format instead.
    
    <div class="versionadded">
    
    8.3.0
    
    </div>

### IM

IM is a format used by LabEye and other applications based on the IFUNC image processing library. The library reads and writes most uncompressed interchange versions of this format.

IM is the only format that can store all internal Pillow formats.

### JPEG

Pillow reads JPEG, JFIF, and Adobe JPEG files containing `L`, `RGB`, or `CMYK` data. It writes standard and progressive JFIF files.

Using the :py\`\~PIL.Image.Image.draft\` method, you can speed things up by converting `RGB` images to `L`, and resize images to 1/2, 1/4 or 1/8 of their original size while loading them.

By default Pillow doesn't allow loading of truncated JPEG files, set <span class="title-ref">.ImageFile.LOAD\_TRUNCATED\_IMAGES</span> to override this.

#### Opening

The :py\`\~PIL.Image.open\` method may set the following :py\`\~PIL.Image.Image.info\` properties if available:

  - **jfif**  
    JFIF application marker found. If the file is not a JFIF file, this key is not present.

  - **jfif\_version**  
    A tuple representing the jfif version, (major version, minor version).

  - **jfif\_density**  
    A tuple representing the pixel density of the image, in units specified by jfif\_unit.

  - **jfif\_unit**  
    Units for the jfif\_density:
    
      - 0 - No Units
      - 1 - Pixels per Inch
      - 2 - Pixels per Centimeter

  - **dpi**  
    A tuple representing the reported pixel density in pixels per inch, if the file is a jfif file and the units are in inches.

  - **adobe**  
    Adobe application marker found. If the file is not an Adobe JPEG file, this key is not present.

  - **adobe\_transform**  
    Vendor Specific Tag.

  - **progression**  
    Indicates that this is a progressive JPEG file.

  - **icc\_profile**  
    The ICC color profile for the image.

  - **exif**  
    Raw EXIF data from the image.

  - **comment**  
    A comment about the image.
    
    <div class="versionadded">
    
    7.1.0
    
    </div>

#### Saving

The :py\`\~PIL.Image.Image.save\` method supports the following options:

  - **quality**  
    The image quality, on a scale from 0 (worst) to 95 (best), or the string `keep`. The default is 75. Values above 95 should be avoided; 100 disables portions of the JPEG compression algorithm, and results in large files with hardly any gain in image quality. The value `keep` is only valid for JPEG files and will retain the original image quality level, subsampling, and qtables.

  - **optimize**  
    If present and true, indicates that the encoder should make an extra pass over the image in order to select optimal encoder settings.

  - **progressive**  
    If present and true, indicates that this image should be stored as a progressive JPEG file.

  - **dpi**  
    A tuple of integers representing the pixel density, `(x,y)`.

  - **icc\_profile**  
    If present and true, the image is stored with the provided ICC profile. If this parameter is not provided, the image will be saved with no profile attached. To preserve the existing profile:
    
        im.save(filename, 'jpeg', icc_profile=im.info.get('icc_profile'))

  - **exif**  
    If present, the image will be stored with the provided raw EXIF data.

  - **keep\_rgb**  
    By default, libjpeg converts images with an RGB color space to YCbCr. If this option is present and true, those images will be stored as RGB instead.
    
    When this option is enabled, attempting to chroma-subsample RGB images with the `subsampling` option will raise an :py\`OSError\`.
    
    <div class="versionadded">
    
    10.2.0
    
    </div>

  - **subsampling**  
    If present, sets the subsampling for the encoder.
    
      - `keep`: Only valid for JPEG files, will retain the original image setting.
      - `4:4:4`, `4:2:2`, `4:2:0`: Specific sampling values
      - `0`: equivalent to `4:4:4`
      - `1`: equivalent to `4:2:2`
      - `2`: equivalent to `4:2:0`
    
    If absent, the setting will be determined by libjpeg or libjpeg-turbo.

  - **restart\_marker\_blocks**  
    If present, emit a restart marker whenever the specified number of MCU blocks has been produced.
    
    <div class="versionadded">
    
    10.2.0
    
    </div>

  - **restart\_marker\_rows**  
    If present, emit a restart marker whenever the specified number of MCU rows has been produced.
    
    <div class="versionadded">
    
    10.2.0
    
    </div>

  - **qtables**  
    If present, sets the qtables for the encoder. This is listed as an advanced option for wizards in the JPEG documentation. Use with caution. `qtables` can be one of several types of values:
    
      - a string, naming a preset, e.g. `keep`, `web_low`, or `web_high`
      - a list, tuple, or dictionary (with integer keys = range(len(keys))) of lists of 64 integers. There must be between 2 and 4 tables.
    
    <div class="versionadded">
    
    2.5.0
    
    </div>

  - **streamtype**  
    Allows storing images without quantization and Huffman tables, or with these tables but without image data. This is useful for container formats or network protocols that handle tables separately and share them between images.
    
      - `0` (default): interchange datastream, with tables and image data
    
      - `1`: abbreviated table specification (tables-only) datastream
        
        <div class="versionadded">
        
        10.2.0
        
        </div>
    
      - `2`: abbreviated image (image-only) datastream

  - **comment**  
    A comment about the image.
    
    <div class="versionadded">
    
    9.4.0
    
    </div>

\> **Note** \> To enable JPEG support, you need to build and install the IJG JPEG library before building the Python Imaging Library. See the distribution README for details.

### JPEG 2000

<div class="versionadded">

2.4.0

</div>

Pillow reads and writes JPEG 2000 files containing `L`, `LA`, `RGB`, `RGBA`, or `YCbCr` data. When reading, `YCbCr` data is converted to `RGB` or `RGBA` depending on whether or not there is an alpha channel. Beginning with version 8.3.0, Pillow can read (but not write) `RGB`, `RGBA`, and `YCbCr` images with subsampled components. Pillow supports JPEG 2000 raw codestreams (`.j2k` files), as well as boxed JPEG 2000 files (`.jp2` or `.jpx` files).

When loading, if you set the `mode` on the image prior to the :py\`\~PIL.Image.Image.load\` method being invoked, you can ask Pillow to convert the image to either `RGB` or `RGBA` rather than choosing for itself. It is also possible to set `reduce` to the number of resolutions to discard (each one reduces the size of the resulting image by a factor of 2), and `layers` to specify the number of quality layers to load.

#### Saving

The :py\`\~PIL.Image.Image.save\` method supports the following options:

  - **offset**  
    The image offset, as a tuple of integers, e.g. (16, 16)

  - **tile\_offset**  
    The tile offset, again as a 2-tuple of integers.

  - **tile\_size**  
    The tile size as a 2-tuple. If not specified, or if set to None, the image will be saved without tiling.

  - **quality\_mode**  
    Either `"rates"` or `"dB"` depending on the units you want to use to specify image quality.

  - **quality\_layers**  
    A sequence of numbers, each of which represents either an approximate size reduction (if quality mode is `"rates"`) or a signal to noise ratio value in decibels. If not specified, defaults to a single layer of full quality.

  - **num\_resolutions**  
    The number of different image resolutions to be stored (which corresponds to the number of Discrete Wavelet Transform decompositions plus one).

  - **codeblock\_size**  
    The code-block size as a 2-tuple. Minimum size is 4 x 4, maximum is 1024 x 1024, with the additional restriction that no code-block may have more than 4096 coefficients (i.e. the product of the two numbers must be no greater than 4096).

  - **precinct\_size**  
    The precinct size as a 2-tuple. Must be a power of two along both axes, and must be greater than the code-block size.

  - **irreversible**  
    If `True`, use the lossy discrete waveform transformation DWT 9-7. Defaults to `False`, which uses the lossless DWT 5-3.

  - **mct**  
    If `1` then enable multiple component transformation when encoding, otherwise use `0` for no component transformation (default). If MCT is enabled and `irreversible` is `True` then the Irreversible Color Transformation will be applied, otherwise encoding will use the Reversible Color Transformation. MCT works best with a `mode` of `RGB` and is only applicable when the image data has 3 components.
    
    <div class="versionadded">
    
    9.1.0
    
    </div>

  - **progression**  
    Controls the progression order; must be one of `"LRCP"`, `"RLCP"`, `"RPCL"`, `"PCRL"`, `"CPRL"`. The letters stand for Component, Position, Resolution and Layer respectively and control the order of encoding, the idea being that e.g. an image encoded using LRCP mode can have its quality layers decoded as they arrive at the decoder, while one encoded using RLCP mode will have increasing resolutions decoded as they arrive, and so on.

  - **signed**  
    If true, then tell the encoder to save the image as signed.
    
    <div class="versionadded">
    
    9.4.0
    
    </div>

  - **cinema\_mode**  
    Set the encoder to produce output compliant with the digital cinema specifications. The options here are `"no"` (the default), `"cinema2k-24"` for 24fps 2K, `"cinema2k-48"` for 48fps 2K, and `"cinema4k-24"` for 24fps 4K. Note that for compliant 2K files, *at least one* of your image dimensions must match 2048 x 1080, while for compliant 4K files, *at least one* of the dimensions must match 4096 x 2160.

  - **no\_jp2**  
    If `True` then don't wrap the raw codestream in the JP2 file format when saving, otherwise the extension of the filename will be used to determine the format (default).
    
    <div class="versionadded">
    
    9.1.0
    
    </div>

  - **comment**  
    Adds a custom comment to the file, replacing the default "Created by OpenJPEG version" comment.
    
    <div class="versionadded">
    
    9.5.0
    
    </div>

  - **plt**  
    If `True` and OpenJPEG 2.4.0 or later is available, then include a PLT (packet length, tile-part header) marker in the produced file. Defaults to `False`.
    
    <div class="versionadded">
    
    9.5.0
    
    </div>

\> **Note** \> To enable JPEG 2000 support, you need to build and install the OpenJPEG library, version 2.0.0 or higher, before building the Python Imaging Library.

> Windows users can install the OpenJPEG binaries available on the OpenJPEG website, but must add them to their PATH in order to use Pillow (if you fail to do this, you will get errors about not being able to load the `_imaging` DLL).

### MPO

Pillow reads and writes Multi Picture Object (MPO) files. When first opened, it loads the primary image. The :py\`\~PIL.Image.Image.seek\` and :py\`\~PIL.Image.Image.tell\` methods may be used to read other pictures from the file. The pictures are zero-indexed and random access is supported.

#### Saving

When calling :py\`\~PIL.Image.Image.save\` to write an MPO file, by default only the first frame of a multiframe image will be saved. If the `save_all` argument is present and true, then all frames will be saved, and the following option will also be available.

  - **append\_images**  
    A list of images to append as additional pictures. Each of the images in the list can be single or multiframe images.
    
    <div class="versionadded">
    
    9.3.0
    
    </div>

### MSP

Pillow identifies and reads MSP files from Windows 1 and 2. The library writes uncompressed (Windows 1) versions of this format.

### PCX

Pillow reads and writes PCX files containing `1`, `L`, `P`, or `RGB` data.

### PFM

<div class="versionadded">

10.3.0

</div>

Pillow reads and writes grayscale (Pf format) Portable FloatMap (PFM) files containing `F` data.

Color (PF format) PFM files are not supported.

#### Opening

The :py\`\~PIL.Image.open\` function sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **scale**  
    The absolute value of the number stored in the *Scale Factor / Endianness* line.

### PNG

Pillow identifies, reads, and writes PNG files containing `1`, `L`, `LA`, `I`, `P`, `RGB` or `RGBA` data. Interlaced files are supported as of v1.1.7.

As of Pillow 6.0, EXIF data can be read from PNG images. However, unlike other image formats, EXIF data is not guaranteed to be present in :py\`\~PIL.Image.Image.info\` until :py\`\~PIL.Image.Image.load\` has been called.

By default Pillow doesn't allow loading of truncated PNG files, set <span class="title-ref">.ImageFile.LOAD\_TRUNCATED\_IMAGES</span> to override this.

#### Opening

The :py\`\~PIL.Image.open\` function sets the following :py\`\~PIL.Image.Image.info\` properties, when appropriate:

  - **chromaticity**  
    The chromaticity points, as an 8 tuple of floats. (`White Point X`, `White Point Y`, `Red X`, `Red Y`, `Green X`, `Green Y`, `Blue X`, `Blue Y`)

  - **gamma**  
    Gamma, given as a floating point number.

  - **srgb**  
    The sRGB rendering intent as an integer.
    
    >   - 0 Perceptual
    >   - 1 Relative Colorimetric
    >   - 2 Saturation
    >   - 3 Absolute Colorimetric

  - **transparency**  
    For `P` images: Either the palette index for full transparent pixels, or a byte string with alpha values for each palette entry.
    
    For `1`, `L`, `I` and `RGB` images, the color that represents full transparent pixels in this image.
    
    This key is omitted if the image is not a transparent palette image.

<div id="png-text">

`open` also sets `Image.text` to a dictionary of the values of the `tEXt`, `zTXt`, and `iTXt` chunks of the PNG image. Individual compressed chunks are limited to a decompressed size of <span class="title-ref">.PngImagePlugin.MAX\_TEXT\_CHUNK</span>, by default 1MB, to prevent decompression bombs. Additionally, the total size of all of the text chunks is limited to <span class="title-ref">.PngImagePlugin.MAX\_TEXT\_MEMORY</span>, defaulting to 64MB.

</div>

#### Saving

The :py\`\~PIL.Image.Image.save\` method supports the following options:

  - **optimize**  
    If present and true, instructs the PNG writer to make the output file as small as possible. This includes extra processing in order to find optimal encoder settings.

  - **transparency**  
    For `P`, `1`, `L`, `I`, and `RGB` images, this option controls what color from the image to mark as transparent.
    
    For `P` images, this can be a either the palette index, or a byte string with alpha values for each palette entry.

  - **dpi**  
    A tuple of two numbers corresponding to the desired dpi in each direction.

  - **pnginfo**  
    A :py\`PIL.PngImagePlugin.PngInfo\` instance containing chunks.

  - **compress\_level**  
    ZLIB compression level, a number between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all. Default is 6. When `optimize` option is True `compress_level` has no effect (it is set to 9 regardless of a value passed).

  - **icc\_profile**  
    The ICC Profile to include in the saved file.

  - **exif**  
    The exif data to include in the saved file.
    
    <div class="versionadded">
    
    6.0.0
    
    </div>

  - **bits (experimental)**  
    For `P` images, this option controls how many bits to store. If omitted, the PNG writer uses 8 bits (256 colors).

  - **dictionary (experimental)**  
    Set the ZLIB encoder dictionary.

\> **Note** \> To enable PNG support, you need to build and install the ZLIB compression library before building the Python Imaging Library. See the \[installation documentation \<../installation\>\](installation documentation \<../installation\>.md) for details.

#### APNG sequences

The PNG loader includes limited support for reading and writing Animated Portable Network Graphics (APNG) files. When an APNG file is loaded, :py\`\~PIL.ImageFile.ImageFile.get\_format\_mimetype\` will return `"image/apng"`. The value of the :py\`\~PIL.Image.Image.is\_animated\` property will be `True` when the :py\`\~PIL.Image.Image.n\_frames\` property is greater than 1. For APNG files, the `n_frames` property depends on both the animation frame count as well as the presence or absence of a default image. See the `default_image` property documentation below for more details. The :py\`\~PIL.Image.Image.seek\` and :py\`\~PIL.Image.Image.tell\` methods are supported.

`im.seek()` raises an :py\`EOFError\` if you try to seek after the last frame.

These :py\`\~PIL.Image.Image.info\` properties will be set for APNG frames, where applicable:

  - **default\_image**  
    Specifies whether or not this APNG file contains a separate default image, which is not a part of the actual APNG animation.
    
    When an APNG file contains a default image, the initially loaded image (i.e. the result of `seek(0)`) will be the default image. To account for the presence of the default image, the :py\`\~PIL.Image.Image.n\_frames\` property will be set to `frame_count + 1`, where `frame_count` is the actual APNG animation frame count. To load the first APNG animation frame, `seek(1)` must be called.
    
      - `True` - The APNG contains default image, which is not an animation frame.
      - `False` - The APNG does not contain a default image. The `n_frames` property will be set to the actual APNG animation frame count. The initially loaded image (i.e. `seek(0)`) will be the first APNG animation frame.

  - **loop**  
    The number of times to loop this APNG, 0 indicates infinite looping.

  - **duration**  
    The time to display this APNG frame (in milliseconds).

\> **Note** \> The APNG loader returns images the same size as the APNG file's logical screen size. The returned image contains the pixel data for a given frame, after applying any APNG frame disposal and frame blend operations (i.e. it contains what a web browser would render for this frame - the composite of all previous frames and this frame).

> Any APNG file containing sequence errors is treated as an invalid image. The APNG loader will not attempt to repair and reorder files containing sequence errors.

#### Saving

When calling :py\`\~PIL.Image.Image.save\`, by default only a single frame PNG file will be saved. To save an APNG file (including a single frame APNG), the `save_all` parameter must be set to `True`. The following parameters can also be set:

  - **default\_image**  
    Boolean value, specifying whether or not the base image is a default image. If `True`, the base image will be used as the default image, and the first image from the `append_images` sequence will be the first APNG animation frame. If `False`, the base image will be used as the first APNG animation frame. Defaults to `False`.

  - **append\_images**  
    A list or tuple of images to append as additional frames. Each of the images in the list can be single or multiframe images. The size of each frame should match the size of the base image. Also note that if a frame's mode does not match that of the base image, the frame will be converted to the base image mode.

  - **loop**  
    Integer number of times to loop this APNG, 0 indicates infinite looping. Defaults to 0.

  - **duration**  
    Integer (or list or tuple of integers) length of time to display this APNG frame (in milliseconds). Defaults to 0.

  - **disposal**  
    An integer (or list or tuple of integers) specifying the APNG disposal operation to be used for this frame before rendering the next frame. Defaults to 0.
    
      - 0 (:py\`\~PIL.PngImagePlugin.Disposal.OP\_NONE\`, default) -No disposal is done on this frame before rendering the next frame.
      - 1 (:py\`PIL.PngImagePlugin.Disposal.OP\_BACKGROUND\`) -This frame's modified region is cleared to fully transparent black before rendering the next frame.
      - 2 (:py\`\~PIL.PngImagePlugin.Disposal.OP\_PREVIOUS\`) -This frame's modified region is reverted to the previous frame's contents before rendering the next frame.

  - **blend**  
    An integer (or list or tuple of integers) specifying the APNG blend operation to be used for this frame before rendering the next frame. Defaults to 0.
    
      - 0 (:py\`\~PIL.PngImagePlugin.Blend.OP\_SOURCE\`) -All color components of this frame, including alpha, overwrite the previous output image contents.
      - 1 (:py\`\~PIL.PngImagePlugin.Blend.OP\_OVER\`) -This frame should be alpha composited with the previous output image contents.

\> **Note** \> The `duration`, `disposal` and `blend` parameters can be set to lists or tuples to specify values for each individual frame in the animation. The length of the list or tuple must be identical to the total number of actual frames in the APNG animation. If the APNG contains a default image (i.e. `default_image` is set to `True`), these list or tuple parameters should not include an entry for the default image.

### PPM

Pillow reads and writes PBM, PGM, PPM and PNM files containing `1`, `L`, `I` or `RGB` data.

"Raw" (P4 to P6) formats can be read, and are used when writing.

Since Pillow 9.2.0, "plain" (P1 to P3) formats can be read as well.

### SGI

Pillow reads and writes uncompressed `L`, `RGB`, and `RGBA` files.

### SPIDER

Pillow reads and writes SPIDER image files of 32-bit floating point data ("F;32F").

Pillow also reads SPIDER stack files containing sequences of SPIDER images. The :py\`\~PIL.Image.Image.seek\` and :py\`\~PIL.Image.Image.tell\` methods are supported, and random access is allowed.

#### Opening

The :py\`\~PIL.Image.open\` method sets the following attributes:

  - **format**  
    Set to `SPIDER`

  - **istack**  
    Set to 1 if the file is an image stack, else 0.

  - **n\_frames**  
    Set to the number of images in the stack.

A convenience method, :py\`\~PIL.SpiderImagePlugin.SpiderImageFile.convert2byte\`, is provided for converting floating point data to byte data (mode `L`):

    im = Image.open("image001.spi").convert2byte()

#### Saving

The extension of SPIDER files may be any 3 alphanumeric characters. Therefore the output format must be specified explicitly:

    im.save('newimage.spi', format='SPIDER')

For more information about the SPIDER image processing package, see <https://github.com/spider-em/SPIDER>

### TGA

Pillow reads and writes TGA images containing `L`, `LA`, `P`, `RGB`, and `RGBA` data. Pillow can read and write both uncompressed and run-length encoded TGAs.

#### Saving

The :py\`\~PIL.Image.Image.save\` method can take the following keyword arguments:

  - **compression**  
    If set to "tga\_rle", the file will be run-length encoded.
    
    <div class="versionadded">
    
    5.3.0
    
    </div>

  - **id\_section**  
    The identification field.
    
    <div class="versionadded">
    
    5.3.0
    
    </div>

  - **orientation**  
    If present and a positive number, the first pixel is for the top left corner, rather than the bottom left corner.
    
    <div class="versionadded">
    
    5.3.0
    
    </div>

### TIFF

Pillow reads and writes TIFF files. It can read both striped and tiled images, pixel and plane interleaved multi-band images. If you have libtiff and its headers installed, Pillow can read and write many kinds of compressed TIFF files. If not, Pillow will only read and write uncompressed files.

\> **Note** \> Beginning in version 5.0.0, Pillow requires libtiff to read or write compressed files. Prior to that release, Pillow had buggy support for reading Packbits, LZW and JPEG compressed TIFFs without using libtiff.

#### Opening

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **compression**  
    Compression mode.
    
    <div class="versionadded">
    
    2.0.0
    
    </div>

  - **dpi**  
    Image resolution as an `(xdpi, ydpi)` tuple, where applicable. You can use the :py\`\~PIL.TiffImagePlugin.TiffImageFile.tag\` attribute to get more detailed information about the image resolution.
    
    <div class="versionadded">
    
    1.1.5
    
    </div>

  - **resolution**  
    Image resolution as an `(xres, yres)` tuple, where applicable. This is a measurement in whichever unit is specified by the file.
    
    <div class="versionadded">
    
    1.1.5
    
    </div>

The :py\`\~PIL.TiffImagePlugin.TiffImageFile.tag\_v2\` attribute contains a dictionary of TIFF metadata. The keys are numerical indexes from :py\`.TiffTags.TAGS\_V2\`. Values are strings or numbers for single items, multiple values are returned in a tuple of values. Rational numbers are returned as a :py\`\~PIL.TiffImagePlugin.IFDRational\` object.

> 
> 
> <div class="versionadded">
> 
> 3.0.0
> 
> </div>

For compatibility with legacy code, the :py\`\~PIL.TiffImagePlugin.TiffImageFile.tag\` attribute contains a dictionary of decoded TIFF fields as returned prior to version 3.0.0. Values are returned as either strings or tuples of numeric values. Rational numbers are returned as a tuple of `(numerator, denominator)`.

> 
> 
> <div class="deprecated">
> 
> 3.0.0
> 
> </div>

#### Reading Multi-frame TIFF Images

The TIFF loader supports the :py\`\~PIL.Image.Image.seek\` and :py\`\~PIL.Image.Image.tell\` methods, taking and returning frame numbers within the image file. You can combine these methods to seek to the next frame (`im.seek(im.tell() + 1)`). Frames are numbered from 0 to `im.n_frames - 1`, and can be accessed in any order.

`im.seek()` raises an :py\`EOFError\` if you try to seek after the last frame.

#### Saving

The :py\`\~PIL.Image.Image.save\` method can take the following keyword arguments:

  - **save\_all**  
    If true, Pillow will save all frames of the image to a multiframe tiff document.
    
    <div class="versionadded">
    
    3.4.0
    
    </div>

  - **append\_images**  
    A list of images to append as additional frames. Each of the images in the list can be single or multiframe images. Note however, that for correct results, all the appended images should have the same `encoderinfo` and `encoderconfig` properties.
    
    <div class="versionadded">
    
    4.2.0
    
    </div>

  - **tiffinfo**  
    A :py\`\~PIL.TiffImagePlugin.ImageFileDirectory\_v2\` object or dict object containing tiff tags and values. The TIFF field type is autodetected for Numeric and string values, any other types require using an :py\`\~PIL.TiffImagePlugin.ImageFileDirectory\_v2\` object and setting the type in :py\`\~PIL.TiffImagePlugin.ImageFileDirectory\_v2.tagtype\` with the appropriate numerical value from :py\`.TiffTags.TYPES\`.
    
    <div class="versionadded">
    
    2.3.0
    
    </div>
    
    Metadata values that are of the rational type should be passed in using a :py\`\~PIL.TiffImagePlugin.IFDRational\` object.
    
    <div class="versionadded">
    
    3.1.0
    
    </div>
    
    For compatibility with legacy code, a :py\`\~PIL.TiffImagePlugin.ImageFileDirectory\_v1\` object may be passed in this field. However, this is deprecated.
    
    <div class="versionadded">
    
    5.4.0
    
    </div>
    
    Previous versions only supported some tags when writing using libtiff. The supported list is found in :py\`.TiffTags.LIBTIFF\_CORE\`.
    
    <div class="versionadded">
    
    6.1.0
    
    </div>
    
    Added support for signed types (e.g. `TIFF_SIGNED_LONG`) and multiple values. Multiple values for a single tag must be to :py\`\~PIL.TiffImagePlugin.ImageFileDirectory\_v2\` as a tuple and require a matching type in :py\`\~PIL.TiffImagePlugin.ImageFileDirectory\_v2.tagtype\` tagtype.

  - **exif**  
    Alternate keyword to "tiffinfo", for consistency with other formats.
    
    <div class="versionadded">
    
    8.4.0
    
    </div>

  - **compression**  
    A string containing the desired compression method for the file. (valid only with libtiff installed) Valid compression methods are: <span class="title-ref">None</span>, `"group3"`, `"group4"`, `"jpeg"`, `"lzma"`, `"packbits"`, `"tiff_adobe_deflate"`, `"tiff_ccitt"`, `"tiff_lzw"`, `"tiff_raw_16"`, `"tiff_sgilog"`, `"tiff_sgilog24"`, `"tiff_thunderscan"`, `"webp"`, `"zstd"`

  - **quality**  
    The image quality for JPEG compression, on a scale from 0 (worst) to 100 (best). The default is 75.
    
    <div class="versionadded">
    
    6.1.0
    
    </div>

These arguments to set the tiff header fields are an alternative to using the general tags available through tiffinfo.

**description**

**software**

**date\_time**

**artist**

  - **copyright**  
    Strings

  - **icc\_profile**  
    The ICC Profile to include in the saved file.

  - **resolution\_unit**  
    An integer. 1 for no unit, 2 for inches and 3 for centimeters.

  - **resolution**  
    Either an integer or a float, used for both the x and y resolution.

  - **x\_resolution**  
    Either an integer or a float.

  - **y\_resolution**  
    Either an integer or a float.

  - **dpi**  
    A tuple of `(x_resolution, y_resolution)`, with inches as the resolution unit. For consistency with other image formats, the x and y resolutions of the dpi will be rounded to the nearest integer.

### WebP

Pillow reads and writes WebP files. Requires libwebp v0.5.0 or later.

#### Saving

The :py\`\~PIL.Image.Image.save\` method supports the following options:

  - **lossless**  
    If present and true, instructs the WebP writer to use lossless compression.

  - **quality**  
    Integer, 0-100, defaults to 80. For lossy, 0 gives the smallest size and 100 the largest. For lossless, this parameter is the amount of effort put into the compression: 0 is the fastest, but gives larger files compared to the slowest, but best, 100.

  - **alpha\_quality**  
    Integer, 0-100, defaults to 100. For lossy compression only. 0 gives the smallest size and 100 is lossless.

  - **method**  
    Quality/speed trade-off (0=fast, 6=slower-better). Defaults to 4.

  - **exact**  
    If true, preserve the transparent RGB values. Otherwise, discard invisible RGB values for better compression. Defaults to false.

  - **icc\_profile**  
    The ICC Profile to include in the saved file.

  - **exif**  
    The exif data to include in the saved file.

  - **xmp**  
    The XMP data to include in the saved file.

#### Saving sequences

When calling :py\`\~PIL.Image.Image.save\` to write a WebP file, by default only the first frame of a multiframe image will be saved. If the `save_all` argument is present and true, then all frames will be saved, and the following options will also be available.

  - **append\_images**  
    A list of images to append as additional frames. Each of the images in the list can be single or multiframe images.

  - **duration**  
    The display duration of each frame, in milliseconds. Pass a single integer for a constant duration, or a list or tuple to set the duration for each frame separately.

  - **loop**  
    Number of times to repeat the animation. Defaults to \[0 = infinite\].

  - **background**  
    Background color of the canvas, as an RGBA tuple with values in the range of (0-255).

  - **minimize\_size**  
    If true, minimize the output size (slow). Implicitly disables key-frame insertion.

  - **kmin, kmax**  
    Minimum and maximum distance between consecutive key frames in the output. The library may insert some key frames as needed to satisfy this criteria. Note that these conditions should hold: kmax \> kmin and kmin \>= kmax / 2 + 1. Also, if kmax \<= 0, then key-frame insertion is disabled; and if kmax == 1, then all frames will be key-frames (kmin value does not matter for these special cases).

  - **allow\_mixed**  
    If true, use mixed compression mode; the encoder heuristically chooses between lossy and lossless for each frame.

### XBM

Pillow reads and writes X bitmap files (mode `1`).

## Read-only formats

### CUR

CUR is used to store cursors on Windows. The CUR decoder reads the largest available cursor. Animated cursors are not supported.

### DCX

DCX is a container file format for PCX files, defined by Intel. The DCX format is commonly used in fax applications. The DCX decoder can read files containing `1`, `L`, `P`, or `RGB` data.

When the file is opened, only the first image is read. You can use :py\`\~PIL.Image.Image.seek\` or :py`~PIL.ImageSequence` to read other images.

### FITS

<div class="versionadded">

9.1.0

</div>

Pillow identifies and reads FITS files, commonly used for astronomy. Uncompressed and GZIP\_1 compressed images can be read.

### FLI, FLC

Pillow reads Autodesk FLI and FLC animations.

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **duration**  
    The delay (in milliseconds) between each frame.

### FPX

Pillow reads Kodak FlashPix files. Only the highest resolution image is read from the file, and the viewing transform is not taken into account.

To enable FPX support, you must install `olefile`.

\> **Note** \> To enable full FlashPix support, you need to build and install the IJG JPEG library before building the Python Imaging Library. See the distribution README for details.

### FTEX

<div class="versionadded">

3.2.0

</div>

The FTEX decoder reads textures used for 3D objects in Independence War 2: Edge Of Chaos. The plugin reads a single texture per file, in the compressed and uncompressed formats.

### GBR

The GBR decoder reads GIMP brush files, version 1 and 2.

#### Opening

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **comment**  
    The brush name.

  - **spacing**  
    The spacing between the brushes, in pixels. Version 2 only.

### GD

Pillow reads uncompressed GD2 files. Note that you must use :py\`PIL.GdImageFile.open\` to read such a file.

#### Opening

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **transparency**  
    Transparency color index. This key is omitted if the image is not transparent.

### IMT

Pillow reads Image Tools images containing `L` data.

### IPTC/NAA

Pillow provides limited read support for IPTC/NAA newsphoto files.

### MCIDAS

Pillow identifies and reads 8-bit McIdas area files.

### MIC

Pillow identifies and reads Microsoft Image Composer (MIC) files. When opened, the first sprite in the file is loaded. You can use :py\`\~PIL.Image.Image.seek\` and :py\`\~PIL.Image.Image.tell\` to read other sprites from the file.

Note that there may be an embedded gamma of 2.2 in MIC files.

To enable MIC support, you must install `olefile`.

### PCD

Pillow reads PhotoCD files containing `RGB` data. This only reads the 768x512 resolution image from the file. Higher resolutions are encoded in a proprietary encoding.

### PIXAR

Pillow provides limited support for PIXAR raster files. The library can identify and read “dumped” RGB files.

The format code is `PIXAR`.

### PSD

Pillow identifies and reads PSD files written by Adobe Photoshop 2.5 and 3.0.

### QOI

<div class="versionadded">

9.5.0

</div>

Pillow reads images in Quite OK Image format using a Python decoder. If you wish to write code specifically for this format, `qoi` is an alternative library that uses C to decode the image and interfaces with NumPy.

### SUN

Pillow identifies and reads Sun raster files.

### WAL

<div class="versionadded">

1.1.4

</div>

Pillow reads Quake2 WAL texture files.

Note that this file format cannot be automatically identified, so you must use the open function in the :py`~PIL.WalImageFile` module to read files in this format.

By default, a Quake2 standard palette is attached to the texture. To override the palette, use the :py\`PIL.Image.Image.putpalette()\` method.

### WMF, EMF

Pillow can identify WMF and EMF files.

On Windows, it can read WMF and EMF files. By default, it will load the image at 72 dpi. To load it at another resolution:

    from PIL import Image
    
    with Image.open("drawing.wmf") as im:
        im.load(dpi=144)

To add other read or write support, use :py\`PIL.WmfImagePlugin.register\_handler\` to register a WMF and EMF handler. :

    from typing import IO
    
    from PIL import Image, ImageFile
    from PIL import WmfImagePlugin

    class WmfHandler(ImageFile.StubHandler):
        def open(self, im: ImageFile.StubImageFile) -> None:
            ...
    
        def load(self, im: ImageFile.StubImageFile) -> Image.Image:
            ...
            return image
    
        def save(self, im: Image.Image, fp: IO[bytes], filename: str) -> None:
            ...

    wmf_handler = WmfHandler()
    
    WmfImagePlugin.register_handler(wmf_handler)
    
    im = Image.open("sample.wmf")

### XPM

Pillow reads X pixmap files (mode `P`) with 256 colors or less.

#### Opening

The :py\`\~PIL.Image.open\` method sets the following :py\`\~PIL.Image.Image.info\` properties:

  - **transparency**  
    Transparency color index. This key is omitted if the image is not transparent.

## Write-only formats

### PALM

Pillow provides write-only support for PALM pixmap files.

The format code is `Palm`, the extension is `.palm`.

### PDF

Pillow can write PDF (Acrobat) images. Such images are written as binary PDF 1.4 files. Different encoding methods are used, depending on the image mode.

  - 1 mode images are saved using TIFF encoding, or JPEG encoding if libtiff support is unavailable
  - L, RGB and CMYK mode images use JPEG encoding
  - P mode images use HEX encoding
  - LA and RGBA mode images use JPEG2000 encoding

#### Saving

The :py\`\~PIL.Image.Image.save\` method can take the following keyword arguments:

  - **save\_all**  
    If a multiframe image is used, by default, only the first image will be saved. To save all frames, each frame to a separate page of the PDF, the `save_all` parameter must be present and set to `True`.
    
    <div class="versionadded">
    
    3.0.0
    
    </div>

  - **append\_images**  
    A list of :py\`PIL.Image.Image\` objects to append as additional pages. Each of the images in the list can be single or multiframe images. The `save_all` parameter must be present and set to `True` in conjunction with `append_images`.
    
    <div class="versionadded">
    
    4.2.0
    
    </div>

  - **append**  
    Set to True to append pages to an existing PDF file. If the file doesn't exist, an :py\`OSError\` will be raised.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **resolution**  
    Image resolution in DPI. This, together with the number of pixels in the image, will determine the physical dimensions of the page that will be saved in the PDF.

  - **dpi**  
    A tuple of `(x_resolution, y_resolution)`, with inches as the resolution unit. If both the `resolution` parameter and the `dpi` parameter are present, `resolution` will be ignored.

  - **title**  
    The document’s title. If not appending to an existing PDF file, this will default to the filename.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **author**  
    The name of the person who created the document.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **subject**  
    The subject of the document.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **keywords**  
    Keywords associated with the document.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **creator**  
    If the document was converted to PDF from another format, the name of the conforming product that created the original document from which it was converted.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **producer**  
    If the document was converted to PDF from another format, the name of the conforming product that converted it to PDF.
    
    <div class="versionadded">
    
    5.1.0
    
    </div>

  - **creationDate**  
    The creation date of the document. If not appending to an existing PDF file, this will default to the current time.
    
    <div class="versionadded">
    
    5.3.0
    
    </div>

  - **modDate**  
    The modification date of the document. If not appending to an existing PDF file, this will default to the current time.
    
    <div class="versionadded">
    
    5.3.0
    
    </div>

### XV Thumbnails

Pillow can read XV thumbnail files.

## Identify-only formats

### BUFR

<div class="versionadded">

1.1.3

</div>

Pillow provides a stub driver for BUFR files.

To add read or write support to your application, use :py\`PIL.BufrStubImagePlugin.register\_handler\`.

### GRIB

<div class="versionadded">

1.1.5

</div>

Pillow provides a stub driver for GRIB files.

The driver requires the file to start with a GRIB header. If you have files with embedded GRIB data, or files with multiple GRIB fields, your application has to seek to the header before passing the file handle to Pillow.

To add read or write support to your application, use :py\`PIL.GribStubImagePlugin.register\_handler\`.

### HDF5

<div class="versionadded">

1.1.5

</div>

Pillow provides a stub driver for HDF5 files.

To add read or write support to your application, use :py\`PIL.Hdf5StubImagePlugin.register\_handler\`.

### MPEG

Pillow identifies MPEG files.

---

index.md

---

# Handbook

<div class="toctree" data-maxdepth="2">

overview tutorial concepts appendices

</div>

---

overview.md

---

# Overview

The **Python Imaging Library** adds image processing capabilities to your Python interpreter.

This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.

The core image library is designed for fast access to data stored in a few basic pixel formats. It should provide a solid foundation for a general image processing tool.

Let’s look at a few possible uses of this library.

## Image Archives

The Python Imaging Library is ideal for image archival and batch processing applications. You can use the library to create thumbnails, convert between file formats, print images, etc.

The current version identifies and reads a large number of formats. Write support is intentionally restricted to the most commonly used interchange and presentation formats.

## Image Display

The current release includes Tk :py\`\~PIL.ImageTk.PhotoImage\` and :py\`\~PIL.ImageTk.BitmapImage\` interfaces, as well as a :py`Windows
DIB interface <PIL.ImageWin>` that can be used with PythonWin and other Windows-based toolkits. Many other GUI toolkits come with some kind of PIL support.

For debugging, there’s also a :py\`\~PIL.Image.Image.show\` method which saves an image to disk, and calls an external display utility.

## Image Processing

The library contains basic image processing functionality, including point operations, filtering with a set of built-in convolution kernels, and colour space conversions.

The library also supports image resizing, rotation and arbitrary affine transforms.

There’s a histogram method allowing you to pull some statistics out of an image. This can be used for automatic contrast enhancement, and for global statistical analysis.

---

text-anchors.md

---

# Text anchors

The `anchor` parameter determines the alignment of drawn text relative to the `xy` parameter. The default alignment is top left, specifically `la` (left-ascender) for horizontal text and `lt` (left-top) for vertical text.

This parameter is only supported by OpenType/TrueType fonts. Other fonts may ignore the parameter and use the default (top left) alignment.

## Specifying an anchor

An anchor is specified with a two-character string. The first character is the horizontal alignment, the second character is the vertical alignment. For example, the default value of `la` for horizontal text means left-ascender aligned text.

When drawing text with :py\`PIL.ImageDraw.ImageDraw.text\` with a specific anchor, the text will be placed such that the specified anchor point is at the `xy` coordinates.

For example, in the following image, the text is `ms` (middle-baseline) aligned, with `xy` at the intersection of the two lines:

![ms (middle-baseline) aligned text.](../../Tests/images/test_anchor_quick_ms.png)

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/NotoSans-Regular.ttf", 48)
    im = Image.new("RGB", (200, 200), "white")
    d = ImageDraw.Draw(im)
    d.line(((0, 100), (200, 100)), "gray")
    d.line(((100, 0), (100, 200)), "gray")
    d.text((100, 100), "Quick", fill="black", anchor="ms", font=font)

<div class="container clearer">

</div>

## Quick reference

![Horizontal text](../resources/anchor_horizontal.svg)

![Vertical text](../resources/anchor_vertical.svg)

## Horizontal anchor alignment

  - `l` --- left  
    Anchor is to the left of the text.
    
    For *horizontal* text this is the origin of the first glyph, as shown in the [FreeType tutorial](https://freetype.org/freetype2/docs/tutorial/step2.html).

  - `m` --- middle  
    Anchor is horizontally centered with the text.
    
    For *vertical* text it is recommended to use `s` (baseline) alignment instead, as it does not change based on the specific glyphs of the given text.

  - `r` --- right  
    Anchor is to the right of the text.
    
    For *horizontal* text this is the advanced origin of the last glyph, as shown in the [FreeType tutorial](https://freetype.org/freetype2/docs/tutorial/step2.html).

  - `s` --- baseline *(vertical text only)*  
    Anchor is at the baseline (middle) of the text. The exact alignment depends on the font.
    
    For *vertical* text this is the recommended alignment, as it does not change based on the specific glyphs of the given text (see image for vertical text above).

## Vertical anchor alignment

  - `a` --- ascender / top *(horizontal text only)*  
    Anchor is at the ascender line (top) of the first line of text, as defined by the font.
    
    See [Font metrics on Wikipedia](https://en.wikipedia.org/wiki/Typeface#Font_metrics) for more information.

  - `t` --- top *(single-line text only)*  
    Anchor is at the top of the text.
    
    For *vertical* text this is the origin of the first glyph, as shown in the [FreeType tutorial](https://freetype.org/freetype2/docs/tutorial/step2.html).
    
    For *horizontal* text it is recommended to use `a` (ascender) alignment instead, as it does not change based on the specific glyphs of the given text.

  - `m` --- middle  
    Anchor is vertically centered with the text.
    
    For *horizontal* text this is the midpoint of the first ascender line and the last descender line.

  - `s` --- baseline *(horizontal text only)*  
    Anchor is at the baseline (bottom) of the first line of text, only descenders extend below the anchor.
    
    See [Font metrics on Wikipedia](https://en.wikipedia.org/wiki/Typeface#Font_metrics) for more information.

  - `b` --- bottom *(single-line text only)*  
    Anchor is at the bottom of the text.
    
    For *vertical* text this is the advanced origin of the last glyph, as shown in the [FreeType tutorial](https://freetype.org/freetype2/docs/tutorial/step2.html).
    
    For *horizontal* text it is recommended to use `d` (descender) alignment instead, as it does not change based on the specific glyphs of the given text.

  - `d` --- descender / bottom *(horizontal text only)*  
    Anchor is at the descender line (bottom) of the last line of text, as defined by the font.
    
    See [Font metrics on Wikipedia](https://en.wikipedia.org/wiki/Typeface#Font_metrics) for more information.

## Examples

The following image shows several examples of anchors for horizontal text. In each section the `xy` parameter was set to the center shown by the intersection of the two lines.

![Text anchor examples](../example/anchors.webp)

---

tutorial.md

---

# Tutorial

## Using the Image class

The most important class in the Python Imaging Library is the :py\`\~PIL.Image.Image\` class, defined in the module with the same name. You can create instances of this class in several ways; either by loading images from files, processing other images, or creating images from scratch.

To load an image from a file, use the :py\`\~PIL.Image.open\` function in the :py`~PIL.Image` module:

    >>> from PIL import Image
    >>> im = Image.open("hopper.ppm")

If successful, this function returns an :py\`\~PIL.Image.Image\` object. You can now use instance attributes to examine the file contents:

    >>> print(im.format, im.size, im.mode)
    PPM (512, 512) RGB

The :py\`\~PIL.Image.Image.format\` attribute identifies the source of an image. If the image was not read from a file, it is set to None. The size attribute is a 2-tuple containing width and height (in pixels). The :py\`\~PIL.Image.Image.mode\` attribute defines the number and names of the bands in the image, and also the pixel type and depth. Common modes are “L” (luminance) for grayscale images, “RGB” for true color images, and “CMYK” for pre-press images.

If the file cannot be opened, an :py\`OSError\` exception is raised.

Once you have an instance of the :py\`\~PIL.Image.Image\` class, you can use the methods defined by this class to process and manipulate the image. For example, let’s display the image we just loaded:

    >>> im.show()

![image](show_hopper.webp)

\> **Note** \> The standard version of :py\`\~PIL.Image.Image.show\` is not very efficient, since it saves the image to a temporary file and calls a utility to display the image. If you don’t have an appropriate utility installed, it won’t even work. When it does work though, it is very handy for debugging and tests.

The following sections provide an overview of the different functions provided in this library.

## Reading and writing images

The Python Imaging Library supports a wide variety of image file formats. To read files from disk, use the :py\`\~PIL.Image.open\` function in the :py`~PIL.Image` module. You don’t have to know the file format to open a file. The library automatically determines the format based on the contents of the file.

To save a file, use the :py\`\~PIL.Image.Image.save\` method of the :py\`\~PIL.Image.Image\` class. When saving files, the name becomes important. Unless you specify the format, the library uses the filename extension to discover which file storage format to use.

### Convert files to JPEG

    import os, sys
    from PIL import Image
    
    for infile in sys.argv[1:]:
        f, e = os.path.splitext(infile)
        outfile = f + ".jpg"
        if infile != outfile:
            try:
                with Image.open(infile) as im:
                    im.save(outfile)
            except OSError:
                print("cannot convert", infile)

![image](../../Tests/images/hopper.jpg)

A second argument can be supplied to the :py\`\~PIL.Image.Image.save\` method which explicitly specifies a file format. If you use a non-standard extension, you must always specify the format this way:

### Create JPEG thumbnails

    import os, sys
    from PIL import Image
    
    size = (128, 128)
    
    for infile in sys.argv[1:]:
        outfile = os.path.splitext(infile)[0] + ".thumbnail"
        if infile != outfile:
            try:
                with Image.open(infile) as im:
                    im.thumbnail(size)
                    im.save(outfile, "JPEG")
            except OSError:
                print("cannot create thumbnail for", infile)

![image](thumbnail_hopper.jpg)

It is important to note that the library doesn’t decode or load the raster data unless it really has to. When you open a file, the file header is read to determine the file format and extract things like mode, size, and other properties required to decode the file, but the rest of the file is not processed until later.

This means that opening an image file is a fast operation, which is independent of the file size and compression type. Here’s a simple script to quickly identify a set of image files:

### Identify Image Files

    import sys
    from PIL import Image
    
    for infile in sys.argv[1:]:
        try:
            with Image.open(infile) as im:
                print(infile, im.format, f"{im.size}x{im.mode}")
        except OSError:
            pass

## Cutting, pasting, and merging images

The :py\`\~PIL.Image.Image\` class contains methods allowing you to manipulate regions within an image. To extract a sub-rectangle from an image, use the :py\`\~PIL.Image.Image.crop\` method.

### Copying a subrectangle from an image

    box = (0, 0, 64, 64)
    region = im.crop(box)

The region is defined by a 4-tuple, where coordinates are (left, upper, right, lower). The Python Imaging Library uses a coordinate system with (0, 0) in the upper left corner. Also note that coordinates refer to positions between the pixels, so the region in the above example is exactly 64x64 pixels.

The region could now be processed in a certain manner and pasted back.

![image](cropped_hopper.webp)

### Processing a subrectangle, and pasting it back

    region = region.transpose(Image.Transpose.ROTATE_180)
    im.paste(region, box)

When pasting regions back, the size of the region must match the given region exactly. In addition, the region cannot extend outside the image. However, the modes of the original image and the region do not need to match. If they don’t, the region is automatically converted before being pasted (see the section on \[color-transforms\](\#color-transforms) below for details).

![image](pasted_hopper.webp)

Here’s an additional example:

### Rolling an image

    def roll(im: Image.Image, delta: int) -> Image.Image:
        """Roll an image sideways."""
        xsize, ysize = im.size
    
        delta = delta % xsize
        if delta == 0:
            return im
    
        part1 = im.crop((0, 0, delta, ysize))
        part2 = im.crop((delta, 0, xsize, ysize))
        im.paste(part1, (xsize - delta, 0, xsize, ysize))
        im.paste(part2, (0, 0, xsize - delta, ysize))
    
        return im

![image](rolled_hopper.webp)

Or if you would like to merge two images into a wider image:

### Merging images

    def merge(im1: Image.Image, im2: Image.Image) -> Image.Image:
        w = im1.size[0] + im2.size[0]
        h = max(im1.size[1], im2.size[1])
        im = Image.new("RGBA", (w, h))
    
        im.paste(im1)
        im.paste(im2, (im1.size[0], 0))
    
        return im

![image](merged_hopper.webp)

For more advanced tricks, the paste method can also take a transparency mask as an optional argument. In this mask, the value 255 indicates that the pasted image is opaque in that position (that is, the pasted image should be used as is). The value 0 means that the pasted image is completely transparent. Values in-between indicate different levels of transparency. For example, pasting an RGBA image and also using it as the mask would paste the opaque portion of the image but not its transparent background.

The Python Imaging Library also allows you to work with the individual bands of an multi-band image, such as an RGB image. The split method creates a set of new images, each containing one band from the original multi-band image. The merge function takes a mode and a tuple of images, and combines them into a new image. The following sample swaps the three bands of an RGB image:

### Splitting and merging bands

    r, g, b = im.split()
    im = Image.merge("RGB", (b, g, r))

Note that for a single-band image, :py\`\~PIL.Image.Image.split\` returns the image itself. To work with individual color bands, you may want to convert the image to “RGB” first.

![image](rebanded_hopper.webp)

## Geometrical transforms

The :py\`PIL.Image.Image\` class contains methods to :py\`\~PIL.Image.Image.resize\` and :py\`\~PIL.Image.Image.rotate\` an image. The former takes a tuple giving the new size, the latter the angle in degrees counter-clockwise.

### Simple geometry transforms

    out = im.resize((128, 128))
    out = im.rotate(45) # degrees counter-clockwise

![image](rotated_hopper_90.webp)

To rotate the image in 90 degree steps, you can either use the :py\`\~PIL.Image.Image.rotate\` method or the :py\`\~PIL.Image.Image.transpose\` method. The latter can also be used to flip an image around its horizontal or vertical axis.

### Transposing an image

    out = im.transpose(Image.Transpose.FLIP_LEFT_RIGHT)

![image](flip_left_right_hopper.webp)

    out = im.transpose(Image.Transpose.FLIP_TOP_BOTTOM)

![image](flip_top_bottom_hopper.webp)

    out = im.transpose(Image.Transpose.ROTATE_90)

![image](rotated_hopper_90.webp)

    out = im.transpose(Image.Transpose.ROTATE_180)

![image](rotated_hopper_180.webp)

    out = im.transpose(Image.Transpose.ROTATE_270)

![image](rotated_hopper_270.webp)

`transpose(ROTATE)` operations can also be performed identically with :py\`\~PIL.Image.Image.rotate\` operations, provided the `expand` flag is true, to provide for the same changes to the image's size.

A more general form of image transformations can be carried out via the :py\`\~PIL.Image.Image.transform\` method.

### Relative resizing

Instead of calculating the size of the new image when resizing, you can also choose to resize relative to a given size.

    from PIL import Image, ImageOps
    size = (100, 150)
    with Image.open("hopper.webp") as im:
        ImageOps.contain(im, size).save("imageops_contain.webp")
        ImageOps.cover(im, size).save("imageops_cover.webp")
        ImageOps.fit(im, size).save("imageops_fit.webp")
        ImageOps.pad(im, size, color="#f00").save("imageops_pad.webp")
    
        # thumbnail() can also be used,
        # but will modify the image object in place
        im.thumbnail(size)
        im.save("image_thumbnail.webp")

|                 | :py\`\~PIL.Image.Image.thumbnail\` | :py\`\~ | PIL.ImageOps.contain\` | :py\`\~PIL.Im     | ageOps.cover\` | :py\`\~PIL.ImageOps     | .fit\` | :py\`\~PIL.ImageOps.pad\`     |                                        |
| --------------- | -------------------------------------------- | ------------------------------------------ | ---------------------------------------- | -------------------------------------- | -------------------------------------- |
| Given size      | `(100, 150)`                                 | `(100, 150)`                               | `(100, 150)`                             | `(100, 150)`                           | `(100, 150)`                           |
| Resulting image | ![image](../example/image_thumbnail.webp)    | ![image](../example/imageops_contain.webp) | ![image](../example/imageops_cover.webp) | ![image](../example/imageops_fit.webp) | ![image](../example/imageops_pad.webp) |
| Resulting size  | `100×100`                                    | `100×100`                                  | `150×150`                                | `100×150`                              | `100×150`                              |

## Color transforms

The Python Imaging Library allows you to convert images between different pixel representations using the :py\`\~PIL.Image.Image.convert\` method.

### Converting between modes

    from PIL import Image
    
    with Image.open("hopper.ppm") as im:
        im = im.convert("L")

The library supports transformations between each supported mode and the “L” and “RGB” modes. To convert between other modes, you may have to use an intermediate image (typically an “RGB” image).

## Image enhancement

The Python Imaging Library provides a number of methods and modules that can be used to enhance images.

### Filters

The :py`~PIL.ImageFilter` module contains a number of pre-defined enhancement filters that can be used with the :py\`\~PIL.Image.Image.filter\` method.

#### Applying filters

    from PIL import ImageFilter
    out = im.filter(ImageFilter.DETAIL)

![image](enhanced_hopper.webp)

### Point Operations

The :py\`\~PIL.Image.Image.point\` method can be used to translate the pixel values of an image (e.g. image contrast manipulation). In most cases, a function object expecting one argument can be passed to this method. Each pixel is processed according to that function:

#### Applying point transforms

    # multiply each pixel by 20
    out = im.point(lambda i: i * 20)

![image](transformed_hopper.webp)

Using the above technique, you can quickly apply any simple expression to an image. You can also combine the :py\`\~PIL.Image.Image.point\` and :py\`\~PIL.Image.Image.paste\` methods to selectively modify an image:

#### Processing individual bands

    # split the image into individual bands
    source = im.split()
    
    R, G, B = 0, 1, 2
    
    # select regions where red is less than 100
    mask = source[R].point(lambda i: i < 100 and 255)
    
    # process the green band
    out = source[G].point(lambda i: i * 0.7)
    
    # paste the processed band back, but only where red was < 100
    source[G].paste(out, None, mask)
    
    # build a new multiband image
    im = Image.merge(im.mode, source)

Note the syntax used to create the mask:

    imout = im.point(lambda i: expression and 255)

![image](masked_hopper.webp)

Python only evaluates the portion of a logical expression as is necessary to determine the outcome, and returns the last value examined as the result of the expression. So if the expression above is false (0), Python does not look at the second operand, and thus returns 0. Otherwise, it returns 255.

### Enhancement

For more advanced image enhancement, you can use the classes in the :py`~PIL.ImageEnhance` module. Once created from an image, an enhancement object can be used to quickly try out different settings.

You can adjust contrast, brightness, color balance and sharpness in this way.

#### Enhancing images

    from PIL import ImageEnhance
    
    enh = ImageEnhance.Contrast(im)
    enh.enhance(1.3).show("30% more contrast")

![image](contrasted_hopper.jpg)

## Image sequences

The Python Imaging Library contains some basic support for image sequences (also called animation formats). Supported sequence formats include FLI/FLC, GIF, and a few experimental formats. TIFF files can also contain more than one frame.

When you open a sequence file, PIL automatically loads the first frame in the sequence. You can use the seek and tell methods to move between different frames:

### Reading sequences

    from PIL import Image
    
    with Image.open("animation.gif") as im:
        im.seek(1)  # skip to the second frame
    
        try:
            while 1:
                im.seek(im.tell() + 1)
                # do something to im
        except EOFError:
            pass  # end of sequence

As seen in this example, you’ll get an :py\`EOFError\` exception when the sequence ends.

### Writing sequences

You can create animated GIFs with Pillow, e.g.

    from PIL import Image
    
    # List of image filenames
    image_filenames = [
        "hopper.jpg",
        "rotated_hopper_270.jpg",
        "rotated_hopper_180.jpg",
        "rotated_hopper_90.jpg",
    ]
    
    # Open images and create a list
    images = [Image.open(filename) for filename in image_filenames]
    
    # Save the images as an animated GIF
    images[0].save(
        "animated_hopper.gif",
        save_all=True,
        append_images=images[1:],
        duration=500,  # duration of each frame in milliseconds
        loop=0,  # loop forever
    )

![image](animated_hopper.gif)

The following class lets you use the for-statement to loop over the sequence:

### Using the :py\`\~PIL.ImageSequence.Iterator\` class

    from PIL import ImageSequence
    for frame in ImageSequence.Iterator(im):
        # ...do something to frame...

## PostScript printing

The Python Imaging Library includes functions to print images, text and graphics on PostScript printers. Here’s a simple example:

### Drawing PostScript

    from PIL import Image, PSDraw
    import os
    
    # Define the PostScript file
    ps_file = open("hopper.ps", "wb")
    
    # Create a PSDraw object
    ps = PSDraw.PSDraw(ps_file)
    
    # Start the document
    ps.begin_document()
    
    # Set the text to be drawn
    text = "Hopper"
    
    # Define the PostScript font
    font_name = "Helvetica-Narrow-Bold"
    font_size = 36
    
    # Calculate text size (approximation as PSDraw doesn't provide direct method)
    # Assuming average character width as 0.6 of the font size
    text_width = len(text) * font_size * 0.6
    text_height = font_size
    
    # Set the position (top-center)
    page_width, page_height = 595, 842  # A4 size in points
    text_x = (page_width - text_width) // 2
    text_y = page_height - text_height - 50  # Distance from the top of the page
    
    # Load the image
    image_path = "hopper.ppm"  # Update this with your image path
    with Image.open(image_path) as im:
        # Resize the image if it's too large
        im.thumbnail((page_width - 100, page_height // 2))
    
        # Define the box where the image will be placed
        img_x = (page_width - im.width) // 2
        img_y = text_y + text_height - 200  # 200 points below the text
    
        # Draw the image (75 dpi)
        ps.image((img_x, img_y, img_x + im.width, img_y + im.height), im, 75)
    
    # Draw the text
    ps.setfont(font_name, font_size)
    ps.text((text_x, text_y), text)
    
    # End the document
    ps.end_document()
    ps_file.close()

![image](hopper_ps.webp)

\> **Note** \> PostScript converted to PDF for display purposes

## More on reading images

As described earlier, the :py\`\~PIL.Image.open\` function of the :py`~PIL.Image` module is used to open an image file. In most cases, you simply pass it the filename as an argument. `Image.open()` can be used as a context manager:

    from PIL import Image
    with Image.open("hopper.ppm") as im:
        ...

If everything goes well, the result is an :py\`PIL.Image.Image\` object. Otherwise, an <span class="title-ref">OSError</span> exception is raised.

You can use a file-like object instead of the filename. The object must implement `file.read`, `file.seek` and `file.tell` methods, and be opened in binary mode.

### Reading from an open file

    from PIL import Image
    
    with open("hopper.ppm", "rb") as fp:
        im = Image.open(fp)

To read an image from binary data, use the :py\`\~io.BytesIO\` class:

### Reading from binary data

    from PIL import Image
    import io
    
    im = Image.open(io.BytesIO(buffer))

Note that the library rewinds the file (using `seek(0)`) before reading the image header. In addition, seek will also be used when the image data is read (by the load method). If the image file is embedded in a larger file, such as a tar file, you can use the :py\`\~PIL.ContainerIO\` or :py\`\~PIL.TarIO\` modules to access it.

### Reading from URL

    from PIL import Image
    from urllib.request import urlopen
    url = "https://python-pillow.org/assets/images/pillow-logo.png"
    img = Image.open(urlopen(url))

### Reading from a tar archive

    from PIL import Image, TarIO
    
    fp = TarIO.TarIO("hopper.tar", "hopper.jpg")
    im = Image.open(fp)

### Batch processing

Operations can be applied to multiple image files. For example, all PNG images in the current directory can be saved as JPEGs at reduced quality.

    import glob
    from PIL import Image
    
    def compress_image(source_path: str, dest_path: str) -> None:
        with Image.open(source_path) as img:
            if img.mode != "RGB":
                img = img.convert("RGB")
            img.save(dest_path, "JPEG", optimize=True, quality=80)

    paths = glob.glob("*.png")
    for path in paths:
        compress_image(path, path[:-4] + ".jpg")

Since images can also be opened from a `Path` from the `pathlib` module, the example could be modified to use `pathlib` instead of the `glob` module.

    from pathlib import Path
    
    paths = Path(".").glob("*.png")
    for path in paths:
        compress_image(path, path.stem + ".jpg")

## Controlling the decoder

Some decoders allow you to manipulate the image while reading it from a file. This can often be used to speed up decoding when creating thumbnails (when speed is usually more important than quality) and printing to a monochrome laser printer (when only a grayscale version of the image is needed).

The :py\`\~PIL.Image.Image.draft\` method manipulates an opened but not yet loaded image so it as closely as possible matches the given mode and size. This is done by reconfiguring the image decoder.

### Reading in draft mode

This is only available for JPEG and MPO files.

    from PIL import Image
    
    with Image.open(file) as im:
        print("original =", im.mode, im.size)
    
        im.draft("L", (100, 100))
        print("draft =", im.mode, im.size)

This prints something like:

    original = RGB (512, 512)
    draft = L (128, 128)

Note that the resulting image may not exactly match the requested mode and size. To make sure that the image is not larger than the given size, use the thumbnail method instead.

---

writing-your-own-image-plugin.md

---

# Writing Your Own Image Plugin

Pillow uses a plugin model which allows you to add your own decoders and encoders to the library, without any changes to the library itself. Such plugins usually have names like `XxxImagePlugin.py`, where `Xxx` is a unique format name (usually an abbreviation).

<div class="warning">

<div class="title">

Warning

</div>

Pillow \>= 2.1.0 no longer automatically imports any file in the Python path with a name ending in `ImagePlugin.py`. You will need to import your image plugin manually.

</div>

Pillow decodes files in two stages:

1.  It loops over the available image plugins in the loaded order, and calls the plugin's `_accept` function with the first 16 bytes of the file. If the `_accept` function returns true, the plugin's `_open` method is called to set up the image metadata and image tiles. The `_open` method is not for decoding the actual image data.
2.  When the image data is requested, the `ImageFile.load` method is called, which sets up a decoder for each tile and feeds the data to it.

An image plugin should contain a format handler derived from the :py\`PIL.ImageFile.ImageFile\` base class. This class should provide an `_open` method, which reads the file header and set at least the internal `_size` and `_mode` attributes so that :py\`\~PIL.Image.Image.mode\` and :py\`\~PIL.Image.Image.size\` are populated. To be able to load the file, the method must also create a list of `tile` descriptors, which contain a decoder name, extents of the tile, and any decoder-specific data. The format handler class must be explicitly registered, via a call to the :py`~PIL.Image` module.

<div class="note">

<div class="title">

Note

</div>

For performance reasons, it is important that the `_open` method quickly rejects files that do not have the appropriate contents.

</div>

## Example

The following plugin supports a simple format, which has a 128-byte header consisting of the words “SPAM” followed by the width, height, and pixel size in bits. The header fields are separated by spaces. The image data follows directly after the header, and can be either bi-level, grayscale, or 24-bit true color.

**SpamImagePlugin.py**:

    from PIL import Image, ImageFile

    def _accept(prefix: bytes) -> bool:
        return prefix[:4] == b"SPAM"

    class SpamImageFile(ImageFile.ImageFile):
    
        format = "SPAM"
        format_description = "Spam raster image"
    
        def _open(self) -> None:
    
            header = self.fp.read(128).split()
    
            # size in pixels (width, height)
            self._size = int(header[1]), int(header[2])
    
            # mode setting
            bits = int(header[3])
            if bits == 1:
                self._mode = "1"
            elif bits == 8:
                self._mode = "L"
            elif bits == 24:
                self._mode = "RGB"
            else:
                msg = "unknown number of bits"
                raise SyntaxError(msg)
    
            # data descriptor
            self.tile = [ImageFile._Tile("raw", (0, 0) + self.size, 128, (self.mode, 0, 1))]

    Image.register_open(SpamImageFile.format, SpamImageFile, _accept)
    
    Image.register_extensions(
        SpamImageFile.format,
        [
            ".spam",
            ".spa",  # DOS version
        ],
    )

The format handler must always set the internal `_size` and `_mode` attributes so that :py\`\~PIL.Image.Image.size\` and :py\`\~PIL.Image.Image.mode\` are populated. If these are not set, the file cannot be opened. To simplify the plugin, the calling code considers exceptions like :py\`SyntaxError\`, :py\`KeyError\`, :py\`IndexError\`, :py\`EOFError\` and :py\`struct.error\` as a failure to identify the file.

Note that the image plugin must be explicitly registered using :py\`PIL.Image.register\_open\`. Although not required, it is also a good idea to register any extensions used by this format.

Once the plugin has been imported, it can be used:

    from PIL import Image
    import SpamImagePlugin
    
    with Image.open("hopper.spam") as im:
        pass

## The `tile` attribute

To be able to read the file as well as just identifying it, the `tile` attribute must also be set. This attribute consists of a list of tile descriptors, where each descriptor specifies how data should be loaded to a given region in the image.

In most cases, only a single descriptor is used, covering the full image. :py\`.PsdImagePlugin.PsdImageFile\` uses multiple tiles to combine channels within a single layer, given that the channels are stored separately, one after the other.

The tile descriptor is a 4-tuple with the following contents:

    (decoder, region, offset, parameters)

The fields are used as follows:

  - **decoder**  
    Specifies which decoder to use. The `raw` decoder used here supports uncompressed data, in a variety of pixel formats. For more information on this decoder, see the description below.
    
    A list of C decoders can be seen under codecs section of the function array in `_imaging.c`. Python decoders are registered within the relevant plugins.

  - **region**  
    A 4-tuple specifying where to store data in the image.

  - **offset**  
    Byte offset from the beginning of the file to image data.

  - **parameters**  
    Parameters to the decoder. The contents of this field depends on the decoder specified by the first field in the tile descriptor tuple. If the decoder doesn’t need any parameters, use <span class="title-ref">None</span> for this field.

Note that the `tile` attribute contains a list of tile descriptors, not just a single descriptor.

# Decoders

## The raw decoder

The `raw` decoder is used to read uncompressed data from an image file. It can be used with most uncompressed file formats, such as PPM, BMP, uncompressed TIFF, and many others. To use the raw decoder with the :py\`PIL.Image.frombytes\` function, use the following syntax:

    image = Image.frombytes(
        mode, size, data, "raw",
        raw_mode, stride, orientation
        )

When used in a tile descriptor, the parameter field should look like:

    (raw_mode, stride, orientation)

The fields are used as follows:

  - **raw\_mode**  
    The pixel layout used in the file, and is used to properly convert data to PIL’s internal layout. For a summary of the available formats, see the table below.

  - **stride**  
    The distance in bytes between two consecutive lines in the image. If 0, the image is assumed to be packed (no padding between lines). If omitted, the stride defaults to 0.

  - **orientation**  
    Whether the first line in the image is the top line on the screen (1), or the bottom line (-1). If omitted, the orientation defaults to 1.

The **raw mode** field is used to determine how the data should be unpacked to match PIL’s internal pixel layout. PIL supports a large set of raw modes; for a complete list, see the table in the `Unpack.c` module. The following table describes some commonly used **raw modes**:

<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr class="header">
<th>mode</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>1</code></td>
<td><div class="line-block">1-bit bilevel, stored with the leftmost pixel in the most<br />
significant bit. 0 means black, 1 means white.</div></td>
</tr>
<tr class="even">
<td><code>1;I</code></td>
<td><div class="line-block">1-bit inverted bilevel, stored with the leftmost pixel in the<br />
most significant bit. 0 means white, 1 means black.</div></td>
</tr>
<tr class="odd">
<td><code>1;R</code></td>
<td><div class="line-block">1-bit reversed bilevel, stored with the leftmost pixel in the<br />
least significant bit. 0 means black, 1 means white.</div></td>
</tr>
<tr class="even">
<td><code>L</code></td>
<td>8-bit grayscale. 0 means black, 255 means white.</td>
</tr>
<tr class="odd">
<td><code>L;I</code></td>
<td>8-bit inverted grayscale. 0 means white, 255 means black.</td>
</tr>
<tr class="even">
<td><code>P</code></td>
<td>8-bit palette-mapped image.</td>
</tr>
<tr class="odd">
<td><code>RGB</code></td>
<td>24-bit true colour, stored as (red, green, blue).</td>
</tr>
<tr class="even">
<td><code>BGR</code></td>
<td>24-bit true colour, stored as (blue, green, red).</td>
</tr>
<tr class="odd">
<td><code>RGBX</code></td>
<td><div class="line-block">24-bit true colour, stored as (red, green, blue, pad). The pad<br />
pixels may vary.</div></td>
</tr>
<tr class="even">
<td><code>RGB;L</code></td>
<td><div class="line-block">24-bit true colour, line interleaved (first all red pixels, then<br />
all green pixels, finally all blue pixels).</div></td>
</tr>
</tbody>
</table>

Note that for the most common cases, the raw mode is simply the same as the mode.

The Python Imaging Library supports many other decoders, including JPEG, PNG, and PackBits. For details, see the `decode.c` source file, and the standard plugin implementations provided with the library.

## Decoding floating point data

PIL provides some special mechanisms to allow you to load a wide variety of formats into a mode `F` (floating point) image memory.

You can use the `raw` decoder to read images where data is packed in any standard machine data type, using one of the following raw modes:

| mode     | description                            |
| -------- | -------------------------------------- |
| `F`      | 32-bit native floating point.          |
| `F;8`    | 8-bit unsigned integer.                |
| `F;8S`   | 8-bit signed integer.                  |
| `F;16`   | 16-bit little endian unsigned integer. |
| `F;16S`  | 16-bit little endian signed integer.   |
| `F;16B`  | 16-bit big endian unsigned integer.    |
| `F;16BS` | 16-bit big endian signed integer.      |
| `F;16N`  | 16-bit native unsigned integer.        |
| `F;16NS` | 16-bit native signed integer.          |
| `F;32`   | 32-bit little endian unsigned integer. |
| `F;32S`  | 32-bit little endian signed integer.   |
| `F;32B`  | 32-bit big endian unsigned integer.    |
| `F;32BS` | 32-bit big endian signed integer.      |
| `F;32N`  | 32-bit native unsigned integer.        |
| `F;32NS` | 32-bit native signed integer.          |
| `F;32F`  | 32-bit little endian floating point.   |
| `F;32BF` | 32-bit big endian floating point.      |
| `F;32NF` | 32-bit native floating point.          |
| `F;64F`  | 64-bit little endian floating point.   |
| `F;64BF` | 64-bit big endian floating point.      |
| `F;64NF` | 64-bit native floating point.          |

## The bit decoder

If the raw decoder cannot handle your format, PIL also provides a special “bit” decoder that can be used to read various packed formats into a floating point image memory.

To use the bit decoder with the :py\`PIL.Image.frombytes\` function, use the following syntax:

    image = Image.frombytes(
        mode, size, data, "bit",
        bits, pad, fill, sign, orientation
        )

When used in a tile descriptor, the parameter field should look like:

    (bits, pad, fill, sign, orientation)

The fields are used as follows:

  - **bits**  
    Number of bits per pixel (2-32). No default.

  - **pad**  
    Padding between lines, in bits. This is either 0 if there is no padding, or 8 if lines are padded to full bytes. If omitted, the pad value defaults to 8.

  - **fill**  
    Controls how data are added to, and stored from, the decoder bit buffer.

  - **fill=0**  
    Add bytes to the LSB end of the decoder buffer; store pixels from the MSB end.

  - **fill=1**  
    Add bytes to the MSB end of the decoder buffer; store pixels from the MSB end.

  - **fill=2**  
    Add bytes to the LSB end of the decoder buffer; store pixels from the LSB end.

  - **fill=3**  
    Add bytes to the MSB end of the decoder buffer; store pixels from the LSB end.
    
    If omitted, the fill order defaults to 0.

  - **sign**  
    If non-zero, bit fields are sign extended. If zero or omitted, bit fields are unsigned.

  - **orientation**  
    Whether the first line in the image is the top line on the screen (1), or the bottom line (-1). If omitted, the orientation defaults to 1.

# Writing Your Own File Codec in C

There are 3 stages in a file codec's lifetime:

1.  Setup: Pillow looks for a function in the decoder or encoder registry, falling back to a function named `[codecname]_decoder` or `[codecname]_encoder` on the internal core image object. That function is called with the `args` tuple from the `tile`.
2.  Transforming: The codec's `decode` or `encode` function is repeatedly called with chunks of image data.
3.  Cleanup: If the codec has registered a cleanup function, it will be called at the end of the transformation process, even if there was an exception raised.

## Setup

The current conventions are that the codec setup function is named `PyImaging_[codecname]DecoderNew` or `PyImaging_[codecname]EncoderNew` and defined in `decode.c` or `encode.c`. The Python binding for it is named `[codecname]_decoder` or `[codecname]_encoder` and is set up from within the `_imaging.c` file in the codecs section of the function array.

The setup function needs to call `PyImaging_DecoderNew` or `PyImaging_EncoderNew` and at the very least, set the `decode` or `encode` function pointer. The fields of interest in this object are:

  - **decode**/**encode**  
    Function pointer to the decode or encode function, which has access to `im`, `state`, and the buffer of data to be transformed.

  - **cleanup**  
    Function pointer to the cleanup function, has access to `state`.

  - **im**  
    The target image, will be set by Pillow.

  - **state**  
    An ImagingCodecStateInstance, will be set by Pillow. The `context` member is an opaque struct that can be used by the codec to store any format specific state or options.

  - **pulls\_fd**/**pushes\_fd**  
    If the decoder has `pulls_fd` or the encoder has `pushes_fd` set to 1, `state->fd` will be a pointer to the Python file like object. The codec may use the functions in `codec_fd.c` to read or write directly with the file like object rather than have the data pushed through a buffer.
    
    <div class="versionadded">
    
    3.3.0
    
    </div>

## Transforming

The decode or encode function is called with the target (core) image, the codec state structure, and a buffer of data to be transformed.

It is the codec's responsibility to pull as much data as possible out of the buffer and return the number of bytes consumed. The next call to the codec will include the previous unconsumed tail. The codec function will be called multiple times as the data processed.

Alternatively, if `pulls_fd` or `pushes_fd` is set, then the decode or encode function is called once, with an empty buffer. It is the codec's responsibility to transform the entire tile in that one call. Using this will provide a codec with more freedom, but that freedom may mean increased memory usage if the entire tile is held in memory at once by the codec.

If an error occurs, set `state->errcode` and return -1.

Return -1 on success, without setting the errcode.

## Cleanup

The cleanup function is called after the codec returns a negative value, or if there is an error. This function should free any allocated memory and release any resources from external libraries.

# Writing Your Own File Codec in Python

Python file decoders and encoders should derive from :py\`PIL.ImageFile.PyDecoder\` and :py\`PIL.ImageFile.PyEncoder\` respectively, and should at least override the decode or encode method. They should be registered using :py\`PIL.Image.register\_decoder\` and :py\`PIL.Image.register\_encoder\`. As in the C implementation of the file codecs, there are three stages in the lifetime of a Python-based file codec:

1.  Setup: Pillow looks for the codec in the decoder or encoder registry, then instantiates the class.

2.  Transforming: The instance's `decode` method is repeatedly called with a buffer of data to be interpreted, or the `encode` method is repeatedly called with the size of data to be output.
    
    Alternatively, if the decoder's `_pulls_fd` property (or the encoder's `_pushes_fd` property) is set to `True`, then `decode` and `encode` will only be called once. In the decoder, `self.fd` can be used to access the file-like object. Using this will provide a codec with more freedom, but that freedom may mean increased memory usage if entire file is held in memory at once by the codec.
    
    In `decode`, once the data has been interpreted, `set_as_raw` can be used to populate the image.

3.  Cleanup: The instance's `cleanup` method is called once the transformation is complete. This can be used to clean up any resources used by the codec.
    
    If you set `_pulls_fd` or `_pushes_fd` to `True` however, then you probably chose to perform any cleanup tasks at the end of `decode` or `encode`.

For an example :py\`PIL.ImageFile.PyDecoder\`, see [DdsImagePlugin](https://github.com/python-pillow/Pillow/blob/main/docs/example/DdsImagePlugin.py). For a plugin that uses both :py\`PIL.ImageFile.PyDecoder\` and :py\`PIL.ImageFile.PyEncoder\`, see [BlpImagePlugin](https://github.com/python-pillow/Pillow/blob/main/src/PIL/BlpImagePlugin.py)

---

index.md

---

# Pillow

Pillow is the friendly PIL fork by [Jeffrey A. Clark and contributors](https://github.com/python-pillow/Pillow/graphs/contributors). PIL is the Python Imaging Library by Fredrik Lundh and contributors.

Pillow for enterprise is available via the Tidelift Subscription. [Learn more](https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pypi-pillow&utm_medium=docs&utm_campaign=enterprise).

[![Documentation Status](https://readthedocs.org/projects/pillow/badge/?version=latest)](https://pillow.readthedocs.io/?badge=latest)

[![GitHub Actions build status (Lint)](https://github.com/python-pillow/Pillow/workflows/Lint/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/lint.yml)

[![GitHub Actions build status (Test Docker)](https://github.com/python-pillow/Pillow/workflows/Test%20Docker/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/test-docker.yml)

[![GitHub Actions build status (Test Linux and macOS)](https://github.com/python-pillow/Pillow/workflows/Test/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/test.yml)

[![GitHub Actions build status (Test Windows)](https://github.com/python-pillow/Pillow/workflows/Test%20Windows/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/test-windows.yml)

[![GitHub Actions build status (Test MinGW)](https://github.com/python-pillow/Pillow/workflows/Test%20MinGW/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/test-mingw.yml)

[![GitHub Actions build status (Test Cygwin)](https://github.com/python-pillow/Pillow/workflows/Test%20Cygwin/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/test-cygwin.yml)

[![AppVeyor CI build status (Windows)](https://img.shields.io/appveyor/build/python-pillow/Pillow/main.svg?label=Windows%20build)](https://ci.appveyor.com/project/python-pillow/Pillow)

[![GitHub Actions build status (Wheels)](https://github.com/python-pillow/Pillow/workflows/Wheels/badge.svg)](https://github.com/python-pillow/Pillow/actions/workflows/wheels.yml)

[![Code coverage](https://codecov.io/gh/python-pillow/Pillow/branch/main/graph/badge.svg)](https://app.codecov.io/gh/python-pillow/Pillow)

[![Zenodo](https://zenodo.org/badge/17549/python-pillow/Pillow.svg)](https://zenodo.org/badge/latestdoi/17549/python-pillow/Pillow)

[![Tidelift](https://tidelift.com/badges/package/pypi/pillow?style=flat)](https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pypi-pillow&utm_medium=badge)

[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/pillow.svg)](https://issues.oss-fuzz.com/issues?q=title:pillow)

[![Latest PyPI version](https://img.shields.io/pypi/v/pillow.svg)](https://pypi.org/project/pillow/)

[![Number of PyPI downloads](https://img.shields.io/pypi/dm/pillow.svg)](https://pypi.org/project/pillow/)

[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/6331/badge)](https://www.bestpractices.dev/projects/6331)

[![Join the chat at https://gitter.im/python-pillow/Pillow](https://badges.gitter.im/python-pillow/Pillow.svg)](https://gitter.im/python-pillow/Pillow?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

[![Follow on https://fosstodon.org/@pillow](https://img.shields.io/badge/publish-on%20Mastodon-595aff.svg)](https://fosstodon.org/@pillow)

<link rel="me" href="https://fosstodon.org/@pillow">

# Overview

The Python Imaging Library adds image processing capabilities to your Python interpreter.

This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.

The core image library is designed for fast access to data stored in a few basic pixel formats. It should provide a solid foundation for a general image processing tool.

<div class="toctree" data-maxdepth="2">

installation/index.rst handbook/index.rst reference/index.rst porting.rst about.rst releasenotes/index.rst deprecations.rst

</div>

# Indices and tables

  - \[genindex\](\#genindex)
  - \[modindex\](\#modindex)

---

basic-installation.md

---

<script>
document.addEventListener('DOMContentLoaded', function() {
  activateTab(getOS());
});
</script>

# Basic Installation

\> **Note** \> The following instructions will install Pillow with support for most common image formats. See \[external-libraries\](\#external-libraries) for a full list of external libraries supported.

Install Pillow with `pip`:

    python3 -m pip install --upgrade pip
    python3 -m pip install --upgrade Pillow

Optionally, install `defusedxml` for Pillow to read XMP data, and `olefile` for Pillow to read FPX and MIC images:

    python3 -m pip install --upgrade defusedxml olefile

<div class="tab">

Linux

We provide binaries for Linux for each of the supported Python versions in the manylinux wheel format. These include support for all optional libraries except libimagequant. Raqm support requires FriBiDi to be installed separately:

    python3 -m pip install --upgrade pip
    python3 -m pip install --upgrade Pillow

Most major Linux distributions, including Fedora, Ubuntu and ArchLinux also include Pillow in packages that previously contained PIL e.g. `python-imaging`. Debian splits it into two packages, `python3-pil` and `python3-pil.imagetk`.

</div>

<div class="tab">

macOS

We provide binaries for macOS for each of the supported Python versions in the wheel format. These include support for all optional libraries except libimagequant. Raqm support requires FriBiDi to be installed separately:

    python3 -m pip install --upgrade pip
    python3 -m pip install --upgrade Pillow

While we provide binaries for both x86-64 and arm64, we do not provide universal2 binaries. However, it is simple to combine our current binaries to create one:

    python3 -m pip download --only-binary=:all: --platform macosx_10_10_x86_64 Pillow
    python3 -m pip download --only-binary=:all: --platform macosx_11_0_arm64 Pillow
    python3 -m pip install delocate

Then, with the names of the downloaded wheels, use Python to combine them:

    from delocate.fuse import fuse_wheels
    fuse_wheels('Pillow-9.4.0-2-cp39-cp39-macosx_10_10_x86_64.whl', 'Pillow-9.4.0-cp39-cp39-macosx_11_0_arm64.whl', 'Pillow-9.4.0-cp39-cp39-macosx_11_0_universal2.whl')

</div>

<div class="tab">

Windows

We provide Pillow binaries for Windows compiled for the matrix of supported Pythons in the wheel format. These include x86, x86-64 and arm64 versions. These binaries include support for all optional libraries except libimagequant and libxcb. Raqm support requires FriBiDi to be installed separately:

    python3 -m pip install --upgrade pip
    python3 -m pip install --upgrade Pillow

To install Pillow in MSYS2, see \[building-from-source\](\#building-from-source).

</div>

<div class="tab">

FreeBSD

Pillow can be installed on FreeBSD via the official Ports or Packages systems:

**Ports**:

    cd /usr/ports/graphics/py-pillow && make install clean

**Packages**:

    pkg install py38-pillow

\> **Note**

</div>

\> The [Pillow FreeBSD port](https://www.freshports.org/graphics/py-pillow/) and packages are tested by the ports team with all supported FreeBSD versions.

---

building-from-source.md

---

<script>
document.addEventListener('DOMContentLoaded', function() {
  activateTab(getOS());
});
</script>

# Building From Source

## External Libraries

\> **Note** \> You **do not need to install all supported external libraries** to use Pillow's basic features. **Zlib** and **libjpeg** are required by default.

<div class="note">

<div class="title">

Note

</div>

There are Dockerfiles in our [Docker images repo](https://github.com/python-pillow/docker-images) to install the dependencies for some operating systems.

</div>

Many of Pillow's features require external libraries:

  - **libjpeg** provides JPEG functionality.
      - Pillow has been tested with libjpeg versions **6b**, **8**, **9-9d** and libjpeg-turbo version **8**.
      - Starting with Pillow 3.0.0, libjpeg is required by default. It can be disabled with the `-C jpeg=disable` flag.
  - **zlib** provides access to compressed PNGs
      - Starting with Pillow 3.0.0, zlib is required by default. It can be disabled with the `-C zlib=disable` flag.
  - **libtiff** provides compressed TIFF functionality
      - Pillow has been tested with libtiff versions **3.x** and **4.0-4.6.0**
  - **libfreetype** provides type related services
  - **littlecms** provides color management
      - Pillow version 2.2.1 and below uses liblcms1, Pillow 2.3.0 and above uses liblcms2. Tested with **1.19** and **2.7-2.16**.
  - **libwebp** provides the WebP format.
  - **openjpeg** provides JPEG 2000 functionality.
      - Pillow has been tested with openjpeg **2.0.0**, **2.1.0**, **2.3.1**, **2.4.0**, **2.5.0** and **2.5.2**.
      - Pillow does **not** support the earlier **1.5** series which ships with Debian Jessie.
  - **libimagequant** provides improved color quantization
      - Pillow has been tested with libimagequant **2.6-4.3.3**
      - Libimagequant is licensed GPLv3, which is more restrictive than the Pillow license, therefore we will not be distributing binaries with libimagequant support enabled.
  - **libraqm** provides complex text layout support.
      - libraqm provides bidirectional text support (using FriBiDi), shaping (using HarfBuzz), and proper script itemization. As a result, Raqm can support most writing systems covered by Unicode.
      - libraqm depends on the following libraries: FreeType, HarfBuzz, FriBiDi, make sure that you install them before installing libraqm if not available as package in your system.
      - Setting text direction or font features is not supported without libraqm.
      - Pillow wheels since version 8.2.0 include a modified version of libraqm that loads libfribidi at runtime if it is installed. On Windows this requires compiling FriBiDi and installing `fribidi.dll` into a directory listed in the [Dynamic-link library search order (Microsoft Learn)](https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-unpackaged-apps) (`fribidi-0.dll` or `libfribidi-0.dll` are also detected). See [Build Options](#build-options) to see how to build this version.
      - Previous versions of Pillow (5.0.0 to 8.1.2) linked libraqm dynamically at runtime.
  - **libxcb** provides X11 screengrab support.

<div class="tab">

Linux

If you didn't build Python from source, make sure you have Python's development libraries installed.

In Debian or Ubuntu:

    sudo apt-get install python3-dev python3-setuptools

In Fedora, the command is:

    sudo dnf install python3-devel redhat-rpm-config

In Alpine, the command is:

    sudo apk add python3-dev py3-setuptools

<div class="note">

<div class="title">

Note

</div>

`redhat-rpm-config` is required on Fedora 23, but not earlier versions.

</div>

Prerequisites for **Ubuntu 16.04 LTS - 22.04 LTS** are installed with:

    sudo apt-get install libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev \
        libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python3-tk \
        libharfbuzz-dev libfribidi-dev libxcb1-dev

To install libraqm, `sudo apt-get install meson` and then see `depends/install_raqm.sh`.

Prerequisites are installed on recent **Red Hat**, **CentOS** or **Fedora** with:

    sudo dnf install libtiff-devel libjpeg-devel openjpeg2-devel zlib-devel \
        freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel \
        harfbuzz-devel fribidi-devel libraqm-devel libimagequant-devel libxcb-devel

Note that the package manager may be yum or DNF, depending on the exact distribution.

Prerequisites are installed for **Alpine** with:

    sudo apk add tiff-dev jpeg-dev openjpeg-dev zlib-dev freetype-dev lcms2-dev \
        libwebp-dev tcl-dev tk-dev harfbuzz-dev fribidi-dev libimagequant-dev \
        libxcb-dev libpng-dev

See also the `Dockerfile`s in the Test Infrastructure repo (<https://github.com/python-pillow/docker-images>) for a known working install process for other tested distros.

</div>

<div class="tab">

macOS

The Xcode command line tools are required to compile portions of Pillow. The tools are installed by running `xcode-select --install` from the command line. The command line tools are required even if you have the full Xcode package installed. It may be necessary to run `sudo xcodebuild -license` to accept the license prior to using the tools.

The easiest way to install external libraries is via [Homebrew](https://brew.sh/). After you install Homebrew, run:

    brew install libjpeg libtiff little-cms2 openjpeg webp

To install libraqm on macOS use Homebrew to install its dependencies:

    brew install freetype harfbuzz fribidi

Then see `depends/install_raqm_cmake.sh` to install libraqm.

</div>

<div class="tab">

Windows

We recommend you use prebuilt wheels from PyPI. If you wish to compile Pillow manually, you can use the build scripts in the `winbuild` directory used for CI testing and development. These scripts require Visual Studio 2017 or newer and NASM.

The scripts also install Pillow from the local copy of the source code, so the [Installing](#installing) instructions will not be necessary afterwards.

</div>

<div class="tab">

Windows using MSYS2/MinGW

To build Pillow using MSYS2, make sure you run the **MSYS2 MinGW 32-bit** or **MSYS2 MinGW 64-bit** console, *not* **MSYS2** directly.

The following instructions target the 64-bit build, for 32-bit replace all occurrences of `mingw-w64-x86_64-` with `mingw-w64-i686-`.

Make sure you have Python and GCC installed:

    pacman -S \
        mingw-w64-x86_64-gcc \
        mingw-w64-x86_64-python3 \
        mingw-w64-x86_64-python3-pip \
        mingw-w64-x86_64-python3-setuptools

Prerequisites are installed on **MSYS2 MinGW 64-bit** with:

    pacman -S \
        mingw-w64-x86_64-libjpeg-turbo \
        mingw-w64-x86_64-zlib \
        mingw-w64-x86_64-libtiff \
        mingw-w64-x86_64-freetype \
        mingw-w64-x86_64-lcms2 \
        mingw-w64-x86_64-libwebp \
        mingw-w64-x86_64-openjpeg2 \
        mingw-w64-x86_64-libimagequant \
        mingw-w64-x86_64-libraqm

<https://www.msys2.org/docs/python/> states that setuptools \>= 60 does not work with MSYS2. To workaround this, before installing Pillow you must run:

    export SETUPTOOLS_USE_DISTUTILS=stdlib

</div>

<div class="tab">

FreeBSD

<div class="note">

<div class="title">

Note

</div>

Only FreeBSD 10 and 11 tested

</div>

Make sure you have Python's development libraries installed:

    sudo pkg install python3

Prerequisites are installed on **FreeBSD 10 or 11** with:

    sudo pkg install jpeg-turbo tiff webp lcms2 freetype2 openjpeg harfbuzz fribidi libxcb

Then see `depends/install_raqm_cmake.sh` to install libraqm.

</div>

<div class="tab">

Android

Basic Android support has been added for compilation within the Termux environment. The dependencies can be installed by:

    pkg install -y python ndk-sysroot clang make \
        libjpeg-turbo

This has been tested within the Termux app on ChromeOS, on x86.

</div>

## Installing

Once you have installed the prerequisites, to install Pillow from the source code on PyPI, run:

    python3 -m pip install --upgrade pip
    python3 -m pip install --upgrade Pillow --no-binary :all:

If the prerequisites are installed in the standard library locations for your machine (e.g. `/usr` or `/usr/local`), no additional configuration should be required. If they are installed in a non-standard location, you may need to configure setuptools to use those locations by editing `setup.py` or `pyproject.toml`, or by adding environment variables on the command line:

    CFLAGS="-I/usr/pkg/include" python3 -m pip install --upgrade Pillow --no-binary :all:

If Pillow has been previously built without the required prerequisites, it may be necessary to manually clear the pip cache or build without cache using the `--no-cache-dir` option to force a build with newly installed external libraries.

If you would like to install from a local copy of the source code instead, you can clone from GitHub with `git clone https://github.com/python-pillow/Pillow` or download and extract the [compressed archive from PyPI](https://pypi.org/project/pillow/#files).

After navigating to the Pillow directory, run:

    python3 -m pip install --upgrade pip
    python3 -m pip install .

### Build Options

  - Config setting: `-C parallel=n`. Can also be given with environment variable: `MAX_CONCURRENCY=n`. Pillow can use multiprocessing to build the extension. Setting `-C parallel=n` sets the number of CPUs to use to `n`, or can disable parallel building by using a setting of 1. By default, it uses 4 CPUs, or if 4 are not available, as many as are present.
  - Config settings: `-C zlib=disable`, `-C jpeg=disable`, `-C tiff=disable`, `-C freetype=disable`, `-C raqm=disable`, `-C lcms=disable`, `-C webp=disable`, `-C jpeg2000=disable`, `-C imagequant=disable`, `-C xcb=disable`. Disable building the corresponding feature even if the development libraries are present on the building machine.
  - Config settings: `-C zlib=enable`, `-C jpeg=enable`, `-C tiff=enable`, `-C freetype=enable`, `-C raqm=enable`, `-C lcms=enable`, `-C webp=enable`, `-C jpeg2000=enable`, `-C imagequant=enable`, `-C xcb=enable`. Require that the corresponding feature is built. The build will raise an exception if the libraries are not found. Tcl and Tk must be used together.
  - Config settings: `-C raqm=vendor`, `-C fribidi=vendor`. These flags are used to compile a modified version of libraqm and a shim that dynamically loads libfribidi at runtime. These are used to compile the standard Pillow wheels. Compiling libraqm requires a C99-compliant compiler.
  - Config setting: `-C platform-guessing=disable`. Skips all of the platform dependent guessing of include and library directories for automated build systems that configure the proper paths in the environment variables (e.g. Buildroot).
  - Config setting: `-C debug=true`. Adds a debugging flag to the include and library search process to dump all paths searched for and found to stdout.

Sample usage:

    python3 -m pip install --upgrade Pillow -C [feature]=enable

# Old Versions

You can download old distributions from the [release history at PyPI](https://pypi.org/project/pillow/#history) and by direct URL access eg. <https://pypi.org/project/pillow/1.0/>.

---

index.md

---

# Installation

<div class="toctree" data-maxdepth="2">

basic-installation python-support platform-support building-from-source

</div>

---

platform-support.md

---

# Platform Support

Current platform support for Pillow. Binary distributions are contributed for each release on a volunteer basis, but the source should compile and run everywhere platform support is listed. In general, we aim to support all current versions of Linux, macOS, and Windows.

## Continuous Integration Targets

These platforms are built and tested for every change.

<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 33%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Operating system</th>
<th>Tested Python versions</th>
<th>Tested architecture</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Alpine</td>
<td>3.12</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Amazon Linux 2</td>
<td>3.9</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Amazon Linux 2023</td>
<td>3.9</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Arch</td>
<td>3.12</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>CentOS Stream 9</td>
<td>3.9</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Debian 12 Bookworm</td>
<td>3.11</td>
<td>x86, x86-64</td>
</tr>
<tr class="odd">
<td>Fedora 40</td>
<td>3.12</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Fedora 41</td>
<td>3.13</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Gentoo</td>
<td>3.12</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>macOS 13 Ventura</td>
<td>3.9</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>macOS 14 Sonoma</td>
<td>3.10, 3.11, 3.12, 3.13, PyPy3</td>
<td>arm64</td>
</tr>
<tr class="even">
<td><p>Ubuntu Linux 22.04 LTS (Jammy)</p>
<blockquote>
<ul>
<li></li>
</ul>
</blockquote></td>
<td><blockquote>
<p>3.9, 3.10, 3.11, 3.12, 3.13, PyPy3</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.10</p>
</dd>
</dl></td>
<td><blockquote>
<p>x86-64</p>
</blockquote>
<dl>
<dt>---------------------+</dt>
<dd><p>arm64v8</p>
</dd>
</dl></td>
</tr>
<tr class="odd">
<td>Ubuntu Linux 24.04 LTS (Noble)</td>
<td>3.12</td>
<td>x86-64, ppc64le, s390x</td>
</tr>
<tr class="even">
<td>Windows Server 2019</td>
<td>3.9</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td><p>Windows Server 2022</p>
<blockquote>
<ul>
<li></li>
<li></li>
<li></li>
</ul>
</blockquote></td>
<td><blockquote>
<p>3.9, 3.10, 3.11, 3.12, 3.13, PyPy3</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.13</p>
</dd>
<dt>----------------------------+</dt>
<dd><p>3.9 (MinGW)</p>
</dd>
<dt>----------------------------+</dt>
<dd><p>3.9 (Cygwin)</p>
</dd>
</dl></td>
<td><blockquote>
<p>x86-64</p>
</blockquote>
<dl>
<dt>---------------------+</dt>
<dd><p>x86</p>
</dd>
<dt>---------------------+</dt>
<dd><p>x86-64</p>
</dd>
<dt>---------------------+</dt>
<dd><p>x86-64</p>
</dd>
</dl></td>
</tr>
</tbody>
</table>

## Other Platforms

These platforms have been reported to work at the versions mentioned.

\> **Note** \> Contributors please test Pillow on your platform then update this document and send a pull request.

<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 29%" />
<col style="width: 19%" />
<col style="width: 15%" />
</colgroup>
<thead>
<tr class="header">
<th>Operating system</th>
<th><div class="line-block">Tested Python</div>
| versions</th>
<th><div class="line-block">Latest tested</div>
| Pillow version</th>
<th><div class="line-block">Tested</div>
| processors</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><dl>
<dt>macOS 15 Sequoia</dt>
<dd><ul>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>3.9, 3.10, 3.11, 3.12, 3.13</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.8</p>
</dd>
</dl></td>
<td><blockquote>
<p>11.0.0</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>10.4.0</p>
</dd>
</dl></td>
<td>arm</td>
</tr>
<tr class="even">
<td>macOS 14 Sonoma</td>
<td>3.8, 3.9, 3.10, 3.11, 3.12</td>
<td>10.4.0</td>
<td>arm</td>
</tr>
<tr class="odd">
<td><dl>
<dt>macOS 13 Ventura</dt>
<dd><ul>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>3.8, 3.9, 3.10, 3.11</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.7</p>
</dd>
</dl></td>
<td><blockquote>
<p>10.0.1</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>9.5.0</p>
</dd>
</dl></td>
<td>arm</td>
</tr>
<tr class="even">
<td>macOS 12 Monterey</td>
<td>3.7, 3.8, 3.9, 3.10, 3.11</td>
<td>9.3.0</td>
<td>arm</td>
</tr>
<tr class="odd">
<td><dl>
<dt>macOS 11 Big Sur</dt>
<dd><ul>
<li></li>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>3.7, 3.8, 3.9, 3.10</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.7, 3.8, 3.9, 3.10, 3.11</p>
</dd>
<dt>----------------------------+</dt>
<dd><p>3.6</p>
</dd>
</dl></td>
<td><blockquote>
<p>8.4.0</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>9.4.0</p>
</dd>
<dt>------------------+</dt>
<dd><p>8.4.0</p>
</dd>
</dl></td>
<td>arm --------------+ x86-64</td>
</tr>
<tr class="even">
<td><dl>
<dt>macOS 10.15 Catalina</dt>
<dd><ul>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>3.6, 3.7, 3.8, 3.9</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.5</p>
</dd>
</dl></td>
<td><blockquote>
<p>8.3.2</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>7.2.0</p>
</dd>
</dl></td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td><dl>
<dt>macOS 10.14 Mojave</dt>
<dd><ul>
<li></li>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>3.5, 3.6, 3.7, 3.8</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>2.7</p>
</dd>
<dt>----------------------------+</dt>
<dd><p>3.4</p>
</dd>
</dl></td>
<td><blockquote>
<p>7.2.0</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>6.0.0</p>
</dd>
<dt>------------------+</dt>
<dd><p>5.4.1</p>
</dd>
</dl></td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>macOS 10.13 High Sierra</td>
<td>2.7, 3.4, 3.5, 3.6</td>
<td>4.2.1</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>macOS 10.12 Sierra</td>
<td>2.7, 3.4, 3.5, 3.6</td>
<td>4.1.1</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td><dl>
<dt>Mac OS X 10.11 El Capitan</dt>
<dd><ul>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>2.7, 3.4, 3.5, 3.6, 3.7</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>3.3</p>
</dd>
</dl></td>
<td><blockquote>
<p>5.4.1</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>4.1.0</p>
</dd>
</dl></td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Mac OS X 10.9 Mavericks</td>
<td>2.7, 3.2, 3.3, 3.4</td>
<td>3.0.0</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Mac OS X 10.8 Mountain Lion</td>
<td>2.6, 2.7, 3.2, 3.3</td>
<td></td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Redhat Linux 6</td>
<td>2.6</td>
<td></td>
<td>x86</td>
</tr>
<tr class="even">
<td>CentOS 6.3</td>
<td>2.7, 3.3</td>
<td></td>
<td>x86</td>
</tr>
<tr class="odd">
<td>CentOS 8</td>
<td>3.9</td>
<td>9.0.0</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Fedora 23</td>
<td>2.7, 3.4</td>
<td>3.1.0</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td><p>Ubuntu Linux 12.04 LTS (Precise)</p>
<blockquote>
<ul>
<li></li>
<li></li>
</ul>
</blockquote></td>
<td><blockquote>
<div class="line-block">2.6, 3.2, 3.3, 3.4, 3.5<br />
PyPy5.3.1, PyPy3 v2.4.0</div>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>2.7</p>
</dd>
<dt>----------------------------+</dt>
<dd><p>2.7, 3.2</p>
</dd>
</dl></td>
<td><blockquote>
<p>3.4.1</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>4.3.0</p>
</dd>
<dt>------------------+</dt>
<dd><p>3.4.1</p>
</dd>
</dl></td>
<td><p>x86,x86-64</p>
<p>--------------+ x86-64 --------------+ ppc</p></td>
</tr>
<tr class="even">
<td>Ubuntu Linux 10.04 LTS (Lucid)</td>
<td>2.6</td>
<td>2.3.0</td>
<td>x86,x86-64</td>
</tr>
<tr class="odd">
<td>Debian 8.2 Jessie</td>
<td>2.7, 3.4</td>
<td>3.1.0</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Raspbian Jessie</td>
<td>2.7, 3.4</td>
<td>3.1.0</td>
<td>arm</td>
</tr>
<tr class="odd">
<td>Raspbian Stretch</td>
<td>2.7, 3.5</td>
<td>4.0.0</td>
<td>arm</td>
</tr>
<tr class="even">
<td><dl>
<dt>Raspberry Pi OS</dt>
<dd><ul>
<li></li>
</ul>
</dd>
</dl></td>
<td><blockquote>
<p>3.6, 3.7, 3.8, 3.9</p>
</blockquote>
<dl>
<dt>----------------------------+</dt>
<dd><p>2.7</p>
</dd>
</dl></td>
<td><blockquote>
<p>8.2.0</p>
</blockquote>
<dl>
<dt>------------------+</dt>
<dd><p>6.2.2</p>
</dd>
</dl></td>
<td>arm</td>
</tr>
<tr class="odd">
<td>Gentoo Linux</td>
<td>2.7, 3.2</td>
<td>2.1.0</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>FreeBSD 11.1</td>
<td>2.7, 3.4, 3.5, 3.6</td>
<td>4.3.0</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>FreeBSD 10.3</td>
<td>2.7, 3.4, 3.5</td>
<td>4.2.0</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>FreeBSD 10.2</td>
<td>2.7, 3.4</td>
<td>3.1.0</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Windows 11 23H2</td>
<td>3.9, 3.10, 3.11, 3.12, 3.13</td>
<td>11.0.0</td>
<td>arm64</td>
</tr>
<tr class="even">
<td>Windows 11 Pro</td>
<td>3.11, 3.12</td>
<td>10.2.0</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Windows 10</td>
<td>3.7</td>
<td>7.1.0</td>
<td>x86-64</td>
</tr>
<tr class="even">
<td>Windows 10/Cygwin 3.3</td>
<td>3.6, 3.7, 3.8, 3.9</td>
<td>8.4.0</td>
<td>x86-64</td>
</tr>
<tr class="odd">
<td>Windows 8.1 Pro</td>
<td>2.6, 2.7, 3.2, 3.3, 3.4</td>
<td>2.4.0</td>
<td>x86,x86-64</td>
</tr>
<tr class="even">
<td>Windows 8 Pro</td>
<td>2.6, 2.7, 3.2, 3.3, 3.4a3</td>
<td>2.2.0</td>
<td>x86,x86-64</td>
</tr>
<tr class="odd">
<td>Windows 7 Professional</td>
<td>3.7</td>
<td>7.0.0</td>
<td>x86,x86-64</td>
</tr>
<tr class="even">
<td>Windows Server 2008 R2 Enterprise</td>
<td>3.3</td>
<td></td>
<td>x86-64</td>
</tr>
</tbody>
</table>

---

python-support.md

---

```rst
.. _python-support:

Python Support
==============

Pillow supports these Python versions.

.. csv-table:: Newer versions
   :file: newer-versions.csv
   :header-rows: 1

.. csv-table:: Older versions
   :file: older-versions.csv
   :header-rows: 1

```

---

installation.md

---

- orphan

# Installation

## Basic Installation

<div class="note">

<div class="title">

Note

</div>

This section has moved to \[basic-installation\](\#basic-installation). Please update references accordingly.

</div>

## Python Support

<div class="note">

<div class="title">

Note

</div>

This section has moved to \[python-support\](\#python-support). Please update references accordingly.

</div>

## Platform Support

<div class="note">

<div class="title">

Note

</div>

This section has moved to \[platform-support\](\#platform-support). Please update references accordingly.

</div>

## Building From Source

<div class="note">

<div class="title">

Note

</div>

This section has moved to \[building-from-source\](\#building-from-source). Please update references accordingly.

</div>

## Old Versions

<div class="note">

<div class="title">

Note

</div>

This section has moved to \[old-versions\](\#old-versions). Please update references accordingly.

</div>

---

porting.md

---

# Porting

**Porting existing PIL-based code to Pillow**

Pillow is a functional drop-in replacement for the Python Imaging Library.

PIL is Python 2 only. Pillow dropped support for Python 2 in Pillow 7.0. So if you would like to run the latest version of Pillow, you will first and foremost need to port your code from Python 2 to 3.

To run your existing PIL-compatible code with Pillow, it needs to be modified to import the `Image` module from the `PIL` namespace *instead* of the global namespace. Change this:

    import Image

to this:

    from PIL import Image

The :py`PIL._imaging` module has been moved to :py`PIL.Image.core`. You can now import it like this:

    from PIL.Image import core as _imaging

The image plugin loading mechanism has changed. Pillow no longer automatically imports any file in the Python path with a name ending in `ImagePlugin.py`. You will need to import your image plugin manually.

Pillow will raise an exception if the core extension can't be loaded for any reason, including a version mismatch between the Python and extension code. Previously PIL allowed Python only code to run if the core extension was not available.

---

ExifTags.md

---

# :py`~PIL.ExifTags` Module

The :py`~PIL.ExifTags` module exposes several :py\`enum.IntEnum\` classes which provide constants and clear-text names for various well-known EXIF tags.

Two of these values are also exposed as dictionaries.

---

Image.md

---

# :py`~PIL.Image` Module

The :py`~PIL.Image` module provides a class with the same name which is used to represent a PIL image. The module also provides a number of factory functions, including functions to load images from files, and to create new images.

## Examples

### Open, rotate, and display an image (using the default viewer)

The following script loads an image, rotates it 45 degrees, and displays it using an external viewer (usually xv on Unix, and the Paint program on Windows). :

    from PIL import Image
    with Image.open("hopper.jpg") as im:
        im.rotate(45).show()

### Create thumbnails

The following script creates nice thumbnails of all JPEG images in the current directory preserving aspect ratios with 128x128 max resolution. :

    from PIL import Image
    import glob, os
    
    size = 128, 128
    
    for infile in glob.glob("*.jpg"):
        file, ext = os.path.splitext(infile)
        with Image.open(infile) as im:
            im.thumbnail(size)
            im.save(file + ".thumbnail", "JPEG")

## Functions

<div class="autofunction">

open

<div class="warning">

<div class="title">

Warning

</div>

To protect against potential DOS attacks caused by "[decompression bombs]()" (i.e. malicious files which decompress into a huge amount of data and are designed to crash or cause disruption by using up a lot of memory), Pillow will issue a `DecompressionBombWarning` if the number of pixels in an image is over a certain limit, :py\`MAX\_IMAGE\_PIXELS\`.

This threshold can be changed by setting :py\`MAX\_IMAGE\_PIXELS\`. It can be disabled by setting `Image.MAX_IMAGE_PIXELS = None`.

If desired, the warning can be turned into an error with `warnings.simplefilter('error', Image.DecompressionBombWarning)` or suppressed entirely with `warnings.simplefilter('ignore', Image.DecompressionBombWarning)`. See also [the logging documentation]() to have warnings output to the logging facility instead of stderr.

If the number of pixels is greater than twice :py\`MAX\_IMAGE\_PIXELS\`, then a `DecompressionBombError` will be raised instead.

</div>

</div>

### Image processing

<div class="autofunction">

alpha\_composite

</div>

<div class="autofunction">

blend

</div>

<div class="autofunction">

composite

</div>

<div class="autofunction">

eval

</div>

<div class="autofunction">

merge

</div>

### Constructing images

<div class="autofunction">

new

</div>

<div class="autofunction">

fromarray

</div>

<div class="autofunction">

frombytes

</div>

<div class="autofunction">

frombuffer

</div>

### Generating images

<div class="autofunction">

effect\_mandelbrot

</div>

<div class="autofunction">

effect\_noise

</div>

<div class="autofunction">

linear\_gradient

</div>

<div class="autofunction">

radial\_gradient

</div>

### Registering plugins

<div class="autofunction">

preinit

</div>

<div class="autofunction">

init

</div>

\> **Note** \> These functions are for use by plugin authors. They are called when a plugin is loaded as part of :py\`\~preinit()<span class="title-ref"> or :py</span>\~init()\`. Application authors can ignore them.

<div class="autofunction">

register\_open

</div>

<div class="autofunction">

register\_mime

</div>

<div class="autofunction">

register\_save

</div>

<div class="autofunction">

register\_save\_all

</div>

<div class="autofunction">

register\_extension

</div>

<div class="autofunction">

register\_extensions

</div>

<div class="autofunction">

registered\_extensions

</div>

<div class="autofunction">

register\_decoder

</div>

<div class="autofunction">

register\_encoder

</div>

## The Image Class

<div class="autoclass">

PIL.Image.Image

</div>

An instance of the :py\`\~PIL.Image.Image\` class has the following methods. Unless otherwise stated, all methods return a new instance of the :py\`\~PIL.Image.Image\` class, holding the resulting image.

<div class="automethod">

PIL.Image.Image.alpha\_composite

</div>

<div class="automethod">

PIL.Image.Image.apply\_transparency

</div>

<div class="automethod">

PIL.Image.Image.convert

</div>

The following example converts an RGB image (linearly calibrated according to ITU-R 709, using the D65 luminant) to the CIE XYZ color space:

    rgb2xyz = (
        0.412453, 0.357580, 0.180423, 0,
        0.212671, 0.715160, 0.072169, 0,
        0.019334, 0.119193, 0.950227, 0)
    out = im.convert("RGB", rgb2xyz)

<div class="automethod">

PIL.Image.Image.copy

</div>

<div class="automethod">

PIL.Image.Image.crop

</div>

This crops the input image with the provided coordinates:

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
    
        # The crop method from the Image module takes four coordinates as input.
        # The right can also be represented as (left+width)
        # and lower can be represented as (upper+height).
        (left, upper, right, lower) = (20, 20, 100, 100)
    
        # Here the image "im" is cropped and assigned to new variable im_crop
        im_crop = im.crop((left, upper, right, lower))

<div class="automethod">

PIL.Image.Image.draft

</div>

<div class="automethod">

PIL.Image.Image.effect\_spread

</div>

<div class="automethod">

PIL.Image.Image.entropy

</div>

<div class="automethod">

PIL.Image.Image.filter

</div>

This blurs the input image using a filter from the `ImageFilter` module:

    from PIL import Image, ImageFilter
    
    with Image.open("hopper.jpg") as im:
    
        # Blur the input image using the filter ImageFilter.BLUR
        im_blurred = im.filter(filter=ImageFilter.BLUR)

<div class="automethod">

PIL.Image.Image.frombytes

</div>

<div class="automethod">

PIL.Image.Image.getbands

</div>

This helps to get the bands of the input image:

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
        print(im.getbands())  # Returns ('R', 'G', 'B')

<div class="automethod">

PIL.Image.Image.getbbox

</div>

This helps to get the bounding box coordinates of the input image:

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
        print(im.getbbox())
        # Returns four coordinates in the format (left, upper, right, lower)

<div class="automethod">

PIL.Image.Image.getchannel

</div>

<div class="automethod">

PIL.Image.Image.getcolors

</div>

<div class="automethod">

PIL.Image.Image.getdata

</div>

<div class="automethod">

PIL.Image.Image.getexif

</div>

<div class="automethod">

PIL.Image.Image.getextrema

</div>

<div class="automethod">

PIL.Image.Image.getpalette

</div>

<div class="automethod">

PIL.Image.Image.getpixel

</div>

<div class="automethod">

PIL.Image.Image.getprojection

</div>

<div class="automethod">

PIL.Image.Image.getxmp

</div>

<div class="automethod">

PIL.Image.Image.histogram

</div>

<div class="automethod">

PIL.Image.Image.paste

</div>

<div class="automethod">

PIL.Image.Image.point

</div>

<div class="automethod">

PIL.Image.Image.putalpha

</div>

<div class="automethod">

PIL.Image.Image.putdata

</div>

<div class="automethod">

PIL.Image.Image.putpalette

</div>

<div class="automethod">

PIL.Image.Image.putpixel

</div>

<div class="automethod">

PIL.Image.Image.quantize

</div>

<div class="automethod">

PIL.Image.Image.reduce

</div>

<div class="automethod">

PIL.Image.Image.remap\_palette

</div>

<div class="automethod">

PIL.Image.Image.resize

</div>

This resizes the given image from `(width, height)` to `(width/2, height/2)`:

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
    
        # Provide the target width and height of the image
        (width, height) = (im.width // 2, im.height // 2)
        im_resized = im.resize((width, height))

<div class="automethod">

PIL.Image.Image.rotate

</div>

This rotates the input image by `theta` degrees counter clockwise:

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
    
        # Rotate the image by 60 degrees counter clockwise
        theta = 60
        # Angle is in degrees counter clockwise
        im_rotated = im.rotate(angle=theta)

<div class="automethod">

PIL.Image.Image.save

</div>

<div class="automethod">

PIL.Image.Image.seek

</div>

<div class="automethod">

PIL.Image.Image.show

</div>

<div class="automethod">

PIL.Image.Image.split

</div>

<div class="automethod">

PIL.Image.Image.tell

</div>

<div class="automethod">

PIL.Image.Image.thumbnail

</div>

<div class="automethod">

PIL.Image.Image.tobitmap

</div>

<div class="automethod">

PIL.Image.Image.tobytes

</div>

<div class="automethod">

PIL.Image.Image.transform

</div>

<div class="automethod">

PIL.Image.Image.transpose

</div>

This flips the input image by using the <span class="title-ref">Transpose.FLIP\_LEFT\_RIGHT</span> method. :

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
    
        # Flip the image from left to right
        im_flipped = im.transpose(method=Image.Transpose.FLIP_LEFT_RIGHT)
        # To flip the image from top to bottom,
        # use the method "Image.Transpose.FLIP_TOP_BOTTOM"

<div class="automethod">

PIL.Image.Image.verify

</div>

<div class="automethod">

PIL.Image.Image.load

</div>

<div class="automethod">

PIL.Image.Image.close

</div>

## Image Attributes

Instances of the :py\`Image\` class have the following attributes:

<div class="autoattribute">

PIL.Image.Image.has\_transparency\_data

</div>

## Classes

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.Image.Exif

</div>

<div class="autoclass">

PIL.Image.ImagePointHandler

</div>

<div class="autoclass">

PIL.Image.ImagePointTransform

</div>

<div class="autoclass">

PIL.Image.ImageTransformHandler

</div>

## Protocols

<div class="autoclass" data-show-inheritance="">

SupportsArrayInterface

</div>

<div class="autoclass" data-show-inheritance="">

SupportsGetData

</div>

## Constants

<div class="data">

NONE

</div>

<div class="data">

MAX\_IMAGE\_PIXELS

Set to 89,478,485, approximately 0.25GB for a 24-bit (3 bpp) image. See :py\`\~PIL.Image.open\` for more information about how this is used.

</div>

<div class="data">

WARN\_POSSIBLE\_FORMATS

Set to false. If true, when an image cannot be identified, warnings will be raised from formats that attempted to read the data.

</div>

### Transpose methods

Used to specify the <span class="title-ref">Image.transpose</span> method to use.

<div class="autoclass" data-members="" data-undoc-members="">

Transpose

</div>

### Transform methods

Used to specify the <span class="title-ref">Image.transform</span> method to use.

### Resampling filters

See \[concept-filters\](\#concept-filters) for details.

<div class="autoclass" data-members="" data-undoc-members="">

Resampling

</div>

### Dither modes

Used to specify the dithering method to use for the <span class="title-ref">\~Image.convert</span> and <span class="title-ref">\~Image.quantize</span> methods.

### Palettes

Used to specify the palette to use for the <span class="title-ref">\~Image.convert</span> method.

<div class="autoclass" data-members="" data-undoc-members="">

Palette

</div>

### Quantization methods

Used to specify the quantization method to use for the <span class="title-ref">\~Image.quantize</span> method.

---

ImageChops.md

---

# :py`~PIL.ImageChops` ("Channel Operations") Module

The :py`~PIL.ImageChops` module contains a number of arithmetical image operations, called channel operations (“chops”). These can be used for various purposes, including special effects, image compositions, algorithmic painting, and more.

For more pre-made operations, see :py`~PIL.ImageOps`.

At this time, most channel operations are only implemented for 8-bit images (e.g. “L” and “RGB”).

## Functions

Most channel operations take one or two image arguments and returns a new image. Unless otherwise noted, the result of a channel operation is always clipped to the range 0 to MAX (which is 255 for all modes supported by the operations in this module).

<div class="autofunction">

PIL.ImageChops.add

</div>

<div class="autofunction">

PIL.ImageChops.add\_modulo

</div>

<div class="autofunction">

PIL.ImageChops.blend

</div>

<div class="autofunction">

PIL.ImageChops.composite

</div>

<div class="autofunction">

PIL.ImageChops.constant

</div>

<div class="autofunction">

PIL.ImageChops.darker

</div>

<div class="autofunction">

PIL.ImageChops.difference

</div>

<div class="autofunction">

PIL.ImageChops.duplicate

</div>

<div class="autofunction">

PIL.ImageChops.invert

</div>

<div class="autofunction">

PIL.ImageChops.lighter

</div>

<div class="autofunction">

PIL.ImageChops.logical\_and

</div>

<div class="autofunction">

PIL.ImageChops.logical\_or

</div>

<div class="autofunction">

PIL.ImageChops.logical\_xor

</div>

<div class="autofunction">

PIL.ImageChops.multiply

</div>

<div class="autofunction">

PIL.ImageChops.soft\_light

</div>

<div class="autofunction">

PIL.ImageChops.hard\_light

</div>

<div class="autofunction">

PIL.ImageChops.overlay

</div>

<div class="autofunction">

PIL.ImageChops.offset

</div>

<div class="autofunction">

PIL.ImageChops.screen

</div>

<div class="autofunction">

PIL.ImageChops.subtract

</div>

<div class="autofunction">

PIL.ImageChops.subtract\_modulo

</div>

---

ImageCms.md

---

# :py`~PIL.ImageCms` Module

The :py`~PIL.ImageCms` module provides color profile management support using the LittleCMS2 color management engine, based on Kevin Cazabon's PyCMS library.

<div class="autoclass" data-members="" data-special-members="__init__">

ImageCmsProfile

</div>

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

ImageCmsTransform

</div>

<div class="autoexception">

PyCMSError

</div>

## Constants

<div class="autoclass" data-members="" data-member-order="bysource" data-undoc-members="" data-show-inheritance="">

Intent

</div>

<div class="autoclass" data-members="" data-member-order="bysource" data-undoc-members="" data-show-inheritance="">

Direction

</div>

<div class="autoclass" data-members="" data-member-order="bysource" data-undoc-members="" data-show-inheritance="">

Flags

</div>

## Functions

<div class="autofunction">

applyTransform

</div>

<div class="autofunction">

buildProofTransform

</div>

<div class="autofunction">

buildProofTransformFromOpenProfiles

</div>

<div class="autofunction">

buildTransform

</div>

<div class="autofunction">

buildTransformFromOpenProfiles

</div>

<div class="autofunction">

createProfile

</div>

<div class="autofunction">

getDefaultIntent

</div>

<div class="autofunction">

getOpenProfile

</div>

<div class="autofunction">

getProfileCopyright

</div>

<div class="autofunction">

getProfileDescription

</div>

<div class="autofunction">

getProfileInfo

</div>

<div class="autofunction">

getProfileManufacturer

</div>

<div class="autofunction">

getProfileModel

</div>

<div class="autofunction">

getProfileName

</div>

<div class="autofunction">

get\_display\_profile

</div>

<div class="autofunction">

isIntentSupported

</div>

<div class="autofunction">

profileToProfile

</div>

<div class="autofunction">

versions

</div>

## CmsProfile

The ICC color profiles are wrapped in an instance of the class :py\`\~core.CmsProfile\`. The specification ICC.1:2010 contains more information about the meaning of the values in ICC profiles.

For convenience, all XYZ-values are also given as xyY-values (so they can be easily displayed in a chromaticity diagram, for example).

---

ImageColor.md

---

# :py`~PIL.ImageColor` Module

The :py`~PIL.ImageColor` module contains color tables and converters from CSS3-style color specifiers to RGB tuples. This module is used by :py\`PIL.Image.new\` and the :py`~PIL.ImageDraw` module, among others.

## Color Names

The ImageColor module supports the following string formats:

  - Hexadecimal color specifiers, given as `#rgb`, `#rgba`, `#rrggbb` or `#rrggbbaa`, where `r` is red, `g` is green, `b` is blue and `a` is alpha (also called 'opacity'). For example, `#ff0000` specifies pure red, and `#ff0000cc` specifies red with 80% opacity (`cc` is 204 in decimal form, and 204 / 255 = 0.8).
  - RGB functions, given as `rgb(red, green, blue)` where the color values are integers in the range 0 to 255. Alternatively, the color values can be given as three percentages (0% to 100%). For example, `rgb(255,0,0)` and `rgb(100%,0%,0%)` both specify pure red.
  - Hue-Saturation-Lightness (HSL) functions, given as `hsl(hue, saturation%, lightness%)` where hue is the color given as an angle between 0 and 360 (red=0, green=120, blue=240), saturation is a value between 0% and 100% (gray=0%, full color=100%), and lightness is a value between 0% and 100% (black=0%, normal=50%, white=100%). For example, `hsl(0,100%,50%)` is pure red.
  - Hue-Saturation-Value (HSV) functions, given as `hsv(hue, saturation%, value%)` where hue and saturation are the same as HSL, and value is between 0% and 100% (black=0%, normal=100%). For example, `hsv(0,100%,100%)` is pure red. This format is also known as Hue-Saturation-Brightness (HSB), and can be given as `hsb(hue, saturation%, brightness%)`, where each of the values are used as they are in HSV.
  - Common HTML color names. The :py`~PIL.ImageColor` module provides some 140 standard color names, based on the colors supported by the X Window system and most web browsers. color names are case insensitive. For example, `red` and `Red` both specify pure red.

## Functions

---

ImageDraw.md

---

# :py`~PIL.ImageDraw` Module

The :py`~PIL.ImageDraw` module provides simple 2D graphics for :py\`\~PIL.Image.Image\` objects. You can use this module to create new images, annotate or retouch existing images, and to generate graphics on the fly for web use.

For a more advanced drawing library for PIL, see the [aggdraw module](https://github.com/pytroll/aggdraw).

## Example: Draw a gray cross over an image

    import sys
    from PIL import Image, ImageDraw
    
    with Image.open("hopper.jpg") as im:
    
        draw = ImageDraw.Draw(im)
        draw.line((0, 0) + im.size, fill=128)
        draw.line((0, im.size[1], im.size[0], 0), fill=128)
    
        # write to stdout
        im.save(sys.stdout, "PNG")

## Concepts

### Coordinates

The graphics interface uses the same coordinate system as PIL itself, with (0, 0) in the upper left corner. Any pixels drawn outside of the image bounds will be discarded.

### Colors

To specify colors, you can use numbers or tuples just as you would use with :py\`PIL.Image.new\` or :py\`PIL.Image.Image.putpixel\`. For “1”, “L”, and “I” images, use integers. For “RGB” images, use a 3-tuple containing integer values. For “F” images, use integer or floating point values.

For palette images (mode “P”), use integers as color indexes. In 1.1.4 and later, you can also use RGB 3-tuples or color names (see below). The drawing layer will automatically assign color indexes, as long as you don’t draw with more than 256 colors.

### Color Names

See \[color-names\](\#color-names) for the color names supported by Pillow.

### Fonts

PIL can use bitmap fonts or OpenType/TrueType fonts.

Bitmap fonts are stored in PIL's own format, where each font typically consists of two files, one named .pil and the other usually named .pbm. The former contains font metrics, the latter raster data.

To load a bitmap font, use the load functions in the :py`~PIL.ImageFont` module.

To load a OpenType/TrueType font, use the truetype function in the :py`~PIL.ImageFont` module. Note that this function depends on third-party libraries, and may not available in all PIL builds.

## Example: Draw Partial Opacity Text

    from PIL import Image, ImageDraw, ImageFont
    
    # get an image
    with Image.open("Pillow/Tests/images/hopper.png").convert("RGBA") as base:
    
        # make a blank image for the text, initialized to transparent text color
        txt = Image.new("RGBA", base.size, (255, 255, 255, 0))
    
        # get a font
        fnt = ImageFont.truetype("Pillow/Tests/fonts/FreeMono.ttf", 40)
        # get a drawing context
        d = ImageDraw.Draw(txt)
    
        # draw text, half opacity
        d.text((10, 10), "Hello", font=fnt, fill=(255, 255, 255, 128))
        # draw text, full opacity
        d.text((10, 60), "World", font=fnt, fill=(255, 255, 255, 255))
    
        out = Image.alpha_composite(base, txt)
    
        out.show()

## Example: Draw Multiline Text

    from PIL import Image, ImageDraw, ImageFont
    
    # create an image
    out = Image.new("RGB", (150, 100), (255, 255, 255))
    
    # get a font
    fnt = ImageFont.truetype("Pillow/Tests/fonts/FreeMono.ttf", 40)
    # get a drawing context
    d = ImageDraw.Draw(out)
    
    # draw multiline text
    d.multiline_text((10, 10), "Hello\nWorld", font=fnt, fill=(0, 0, 0))
    
    out.show()

## Functions

## Attributes

## Methods

<div class="autofunction">

PIL.ImageDraw.floodfill

</div>

---

ImageEnhance.md

---

# :py`~PIL.ImageEnhance` Module

The :py`~PIL.ImageEnhance` module contains a number of classes that can be used for image enhancement.

## Example: Vary the sharpness of an image

    from PIL import ImageEnhance
    
    enhancer = ImageEnhance.Sharpness(image)
    
    for i in range(8):
        factor = i / 4.0
        enhancer.enhance(factor).show(f"Sharpness {factor:f}")

Also see the `enhancer.py` demo program in the `Scripts/` directory.

## Classes

All enhancement classes implement a common interface, containing a single method:

<div id="enhancement-factor">

</div>

---

ImageFile.md

---

# :py`~PIL.ImageFile` Module

The :py`~PIL.ImageFile` module provides support functions for the image open and save functions.

In addition, it provides a :py\`Parser\` class which can be used to decode an image piece by piece (e.g. while receiving it over a network connection). This class implements the same consumer interface as the standard **sgmllib** and **xmllib** modules.

## Example: Parse an image

    from PIL import ImageFile
    
    fp = open("hopper.ppm", "rb")
    
    p = ImageFile.Parser()
    
    while 1:
        s = fp.read(1024)
        if not s:
            break
        p.feed(s)
    
    im = p.close()
    
    im.save("copy.jpg")

## Classes

<div class="autoclass" data-member-order="bysource" data-members="" data-show-inheritance="">

PIL.ImageFile.\_Tile()

</div>

<div class="autoclass" data-members="">

PIL.ImageFile.Parser()

</div>

<div class="autoclass" data-members="">

PIL.ImageFile.PyCodec()

</div>

<div class="autoclass" data-members="" data-show-inheritance="">

PIL.ImageFile.PyDecoder()

</div>

<div class="autoclass" data-members="" data-show-inheritance="">

PIL.ImageFile.PyEncoder()

</div>

<div class="autoclass" data-member-order="bysource" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.ImageFile.ImageFile()

</div>

<div class="autoclass" data-members="" data-show-inheritance="">

PIL.ImageFile.StubHandler()

</div>

<div class="autoclass" data-members="" data-show-inheritance="">

PIL.ImageFile.StubImageFile()

</div>

## Constants

<div class="autodata">

PIL.ImageFile.LOAD\_TRUNCATED\_IMAGES

</div>

<div class="autodata" data-annotation="">

PIL.ImageFile.ERRORS

</div>

---

ImageFilter.md

---

# :py`~PIL.ImageFilter` Module

The :py`~PIL.ImageFilter` module contains definitions for a pre-defined set of filters, which can be be used with the :py\`Image.filter() \<PIL.Image.Image.filter\>\` method.

## Example: Filter an image

    from PIL import ImageFilter
    
    im1 = im.filter(ImageFilter.BLUR)
    
    im2 = im.filter(ImageFilter.MinFilter(3))
    im3 = im.filter(ImageFilter.MinFilter)  # same as MinFilter(3)

## Filters

Pillow provides the following set of predefined image enhancement filters:

  - **BLUR**
  - **CONTOUR**
  - **DETAIL**
  - **EDGE\_ENHANCE**
  - **EDGE\_ENHANCE\_MORE**
  - **EMBOSS**
  - **FIND\_EDGES**
  - **SHARPEN**
  - **SMOOTH**
  - **SMOOTH\_MORE**

<div class="autoclass" data-members="">

PIL.ImageFilter.Color3DLUT

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.BoxBlur

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.GaussianBlur

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.UnsharpMask

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.Kernel

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.RankFilter

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.MedianFilter

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.MinFilter

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.MaxFilter

</div>

<div class="autoclass" data-members="">

PIL.ImageFilter.ModeFilter

</div>

<div class="Filter">

An abstract mixin used for filtering images (for use with :py\`\~PIL.Image.Image.filter\`).

Implementors must provide the following method:

<div class="method">

filter(self, image)

Applies a filter to a single-band image, or a single band of an image.

  - returns  
    A filtered copy of the image.

</div>

</div>

<div class="MultibandFilter">

An abstract mixin used for filtering multi-band images (for use with :py\`\~PIL.Image.Image.filter\`).

Implementors must provide the following method:

<div class="method">

filter(self, image)

Applies a filter to a multi-band image.

  - returns  
    A filtered copy of the image.

</div>

</div>

---

ImageFont.md

---

# :py`~PIL.ImageFont` Module

The :py`~PIL.ImageFont` module defines a class with the same name. Instances of this class store bitmap fonts, and are used with the :py\`PIL.ImageDraw.ImageDraw.text\` method.

PIL uses its own font file format to store bitmap fonts, limited to 256 characters. You can use [pilfont.py](https://github.com/python-pillow/pillow-scripts/blob/main/Scripts/pilfont.py) from `pillow-scripts` to convert BDF and PCF font descriptors (X window font formats) to this format.

Starting with version 1.1.4, PIL can be configured to support TrueType and OpenType fonts (as well as other font formats supported by the FreeType library). For earlier versions, TrueType support is only available as part of the imToolkit package.

<div class="warning">

<div class="title">

Warning

</div>

To protect against potential DOS attacks when using arbitrary strings as text input, Pillow will raise a :py\`ValueError\` if the number of characters is over a certain limit, :py\`MAX\_STRING\_LENGTH\`.

This threshold can be changed by setting :py\`MAX\_STRING\_LENGTH\`. It can be disabled by setting `ImageFont.MAX_STRING_LENGTH = None`.

</div>

## Example

    from PIL import ImageFont, ImageDraw
    
    draw = ImageDraw.Draw(image)
    
    # use a bitmap font
    font = ImageFont.load("arial.pil")
    
    draw.text((10, 10), "hello", font=font)
    
    # use a truetype font
    font = ImageFont.truetype("arial.ttf", 15)
    
    draw.text((10, 25), "world", font=font)

## Functions

<div class="autofunction">

PIL.ImageFont.load

</div>

<div class="autofunction">

PIL.ImageFont.load\_path

</div>

<div class="autofunction">

PIL.ImageFont.truetype

</div>

<div class="autofunction">

PIL.ImageFont.load\_default

</div>

<div class="autofunction">

PIL.ImageFont.load\_default\_imagefont

</div>

## Methods

<div class="autoclass" data-members="">

PIL.ImageFont.ImageFont

</div>

<div class="autoclass" data-members="">

PIL.ImageFont.FreeTypeFont

</div>

<div class="autoclass" data-members="" data-undoc-members="">

PIL.ImageFont.TransposedFont

</div>

## Constants

<div class="Layout">

</div>

<div class="data">

MAX\_STRING\_LENGTH

Set to 1,000,000, to protect against potential DOS attacks. Pillow will raise a :py\`ValueError\` if the number of characters is over this limit. The check can be disabled by setting `ImageFont.MAX_STRING_LENGTH = None`.

</div>

## Dictionaries

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

Axis

</div>

---

ImageGrab.md

---

# :py`~PIL.ImageGrab` Module

The :py`~PIL.ImageGrab` module can be used to copy the contents of the screen or the clipboard to a PIL image memory.

<div class="versionadded">

1.1.3

</div>

---

ImageMath.md

---

# :py`~PIL.ImageMath` Module

The :py`~PIL.ImageMath` module can be used to evaluate “image expressions”, that can take a number of images and generate a result.

:py`~PIL.ImageMath` only supports single-layer images. To process multi-band images, use the :py\`\~PIL.Image.Image.split\` method or :py\`\~PIL.Image.merge\` function.

## Example: Using the :py`~PIL.ImageMath` module

    from PIL import Image, ImageMath
    
    with Image.open("image1.jpg") as im1:
        with Image.open("image2.jpg") as im2:
            out = ImageMath.lambda_eval(
              lambda args: args["convert"](args["min"](args["a"], args["b"]), 'L'),
              a=im1,
              b=im2
            )
            out = ImageMath.unsafe_eval(
              "convert(min(a, b), 'L')",
              a=im1,
              b=im2
            )

## Expression syntax

  - :py\`lambda\_eval\` expressions are functions that receive a dictionary containing images and operators.
  - :py\`unsafe\_eval\` expressions are standard Python expressions, but they’re evaluated in a non-standard environment.

<div class="danger">

<div class="title">

Danger

</div>

:py\`unsafe\_eval\` uses Python's `eval()` function to process the expression string, and carries the security risks of doing so. It is not recommended to process expressions without considering this. :py\`lambda\_eval\` is a more secure alternative.

</div>

### Standard Operators

You can use standard arithmetical operators for addition (+), subtraction (-), multiplication (\*), and division (/).

The module also supports unary minus (-), modulo (%), and power (\*\*) operators.

Note that all operations are done with 32-bit integers or 32-bit floating point values, as necessary. For example, if you add two 8-bit images, the result will be a 32-bit integer image. If you add a floating point constant to an 8-bit image, the result will be a 32-bit floating point image.

You can force conversion using the `convert()`, `float()`, and `int()` functions described below.

### Bitwise Operators

The module also provides operations that operate on individual bits. This includes and (&), or (|), and exclusive or (^). You can also invert (\~) all pixel bits.

Note that the operands are converted to 32-bit signed integers before the bitwise operation is applied. This means that you’ll get negative values if you invert an ordinary grayscale image. You can use the and (&) operator to mask off unwanted bits.

Bitwise operators don’t work on floating point images.

### Logical Operators

Logical operators like `and`, `or`, and `not` work on entire images, rather than individual pixels.

An empty image (all pixels zero) is treated as false. All other images are treated as true.

Note that `and` and `or` return the last evaluated operand, while not always returns a boolean value.

### Built-in Functions

These functions are applied to each individual pixel.

---

ImageMorph.md

---

# :py`~PIL.ImageMorph` Module

The :py`~PIL.ImageMorph` module provides morphology operations on images.

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="" data-noindex="">

PIL.ImageMorph

</div>

---

ImageOps.md

---

# :py`~PIL.ImageOps` Module

The :py`~PIL.ImageOps` module contains a number of ‘ready-made’ image processing operations. This module is somewhat experimental, and most operators only work on L and RGB images.

<div class="versionadded">

1.1.3

</div>

<div class="autofunction">

autocontrast

</div>

<div class="autofunction">

colorize

</div>

<div class="autofunction">

crop

</div>

<div class="autofunction">

scale

</div>

<div class="autoclass" data-show-inheritance="">

SupportsGetMesh

</div>

<div class="autofunction">

deform

</div>

<div class="autofunction">

equalize

</div>

<div class="autofunction">

expand

</div>

<div class="autofunction">

flip

</div>

<div class="autofunction">

grayscale

</div>

<div class="autofunction">

invert

</div>

<div class="autofunction">

mirror

</div>

<div class="autofunction">

posterize

</div>

<div class="autofunction">

solarize

</div>

<div class="autofunction">

exif\_transpose

</div>

## Resize relative to a given size

    from PIL import Image, ImageOps
    size = (100, 150)
    with Image.open("Tests/images/hopper.webp") as im:
        ImageOps.contain(im, size).save("imageops_contain.webp")
        ImageOps.cover(im, size).save("imageops_cover.webp")
        ImageOps.fit(im, size).save("imageops_fit.webp")
        ImageOps.pad(im, size, color="#f00").save("imageops_pad.webp")
    
        # thumbnail() can also be used,
        # but will modify the image object in place
        im.thumbnail(size)
        im.save("image_thumbnail.webp")

|                 | :py\`\~PIL.Image.Image.thumbnail\` | :py\`\~ | PIL.ImageOps.contain\` | :py\`\~PIL.Im     | ageOps.cover\` | :py\`\~PIL.ImageOps     | .fit\` | :py\`\~PIL.ImageOps.pad\`     |                                        |
| --------------- | -------------------------------------------- | ------------------------------------------ | ---------------------------------------- | -------------------------------------- | -------------------------------------- |
| Given size      | `(100, 150)`                                 | `(100, 150)`                               | `(100, 150)`                             | `(100, 150)`                           | `(100, 150)`                           |
| Resulting image | ![image](../example/image_thumbnail.webp)    | ![image](../example/imageops_contain.webp) | ![image](../example/imageops_cover.webp) | ![image](../example/imageops_fit.webp) | ![image](../example/imageops_pad.webp) |
| Resulting size  | `100×100`                                    | `100×100`                                  | `150×150`                                | `100×150`                              | `100×150`                              |

<div class="autofunction">

contain

</div>

<div class="autofunction">

cover

</div>

<div class="autofunction">

fit

</div>

<div class="autofunction">

pad

</div>

---

ImagePalette.md

---

# :py`~PIL.ImagePalette` Module

The :py`~PIL.ImagePalette` module contains a class of the same name to represent the color palette of palette mapped images.

\> **Note** \> The :py\`\~PIL.ImagePalette.ImagePalette\` class has several methods, but they are all marked as "experimental." Read that as you will. The `[source]` link is there for a reason.

<div class="autoclass" data-members="">

PIL.ImagePalette.ImagePalette

</div>

---

ImagePath.md

---

# :py`~PIL.ImagePath` Module

The :py`~PIL.ImagePath` module is used to store and manipulate 2-dimensional vector data. Path objects can be passed to the methods on the :py`~PIL.ImageDraw` module.

---

ImageQt.md

---

# :py`~PIL.ImageQt` Module

The :py`~PIL.ImageQt` module contains support for creating PyQt6 or PySide6 QImage objects from PIL images.

<div class="versionadded">

1.1.6

</div>

---

ImageSequence.md

---

# :py`~PIL.ImageSequence` Module

The :py`~PIL.ImageSequence` module contains a wrapper class that lets you iterate over the frames of an image sequence.

## Extracting frames from an animation

    from PIL import Image, ImageSequence
    
    with Image.open("animation.fli") as im:
        index = 1
        for frame in ImageSequence.Iterator(im):
            frame.save(f"frame{index}.png")
            index += 1

## The :py\`\~PIL.ImageSequence.Iterator\` class

<div class="autoclass" data-members="">

PIL.ImageSequence.Iterator

</div>

## Functions

<div class="autofunction">

PIL.ImageSequence.all\_frames

</div>

---

ImageShow.md

---

# :py`~PIL.ImageShow` Module

The :py`~PIL.ImageShow` Module is used to display images. All default viewers convert the image to be shown to PNG format.

<div class="autofunction">

PIL.ImageShow.show

</div>

<div class="autoclass">

IPythonViewer

</div>

<div class="autoclass">

WindowsViewer

</div>

<div class="autoclass">

MacViewer

</div>

<div class="UnixViewer">

The following viewers may be registered on Unix-based systems, if the given command is found:

<div class="autoclass">

PIL.ImageShow.XDGViewer

</div>

<div class="autoclass">

PIL.ImageShow.DisplayViewer

</div>

<div class="autoclass">

PIL.ImageShow.GmDisplayViewer

</div>

<div class="autoclass">

PIL.ImageShow.EogViewer

</div>

<div class="autoclass">

PIL.ImageShow.XVViewer

</div>

To provide maximum functionality on Unix-based systems, temporary files created from images will not be automatically removed by Pillow.

</div>

<div class="autofunction">

PIL.ImageShow.register

</div>

<div class="autoclass" data-member-order="bysource" data-members="" data-undoc-members="">

PIL.ImageShow.Viewer

</div>

---

ImageStat.md

---

# :py`~PIL.ImageStat` Module

The :py`~PIL.ImageStat` module calculates global statistics for an image, or for a region of an image.

<div class="autoclass" data-members="" data-special-members="__init__">

Stat

</div>

---

ImageTk.md

---

# :py`~PIL.ImageTk` Module

The :py`~PIL.ImageTk` module contains support to create and modify Tkinter BitmapImage and PhotoImage objects from PIL images.

For examples, see the demo programs in the Scripts directory.

<div class="autoclass" data-members="">

PIL.ImageTk.BitmapImage

</div>

<div class="autoclass" data-members="">

PIL.ImageTk.PhotoImage

</div>

---

ImageTransform.md

---

# :py`~PIL.ImageTransform` Module

The :py`~PIL.ImageTransform` module contains implementations of :py\`\~PIL.Image.ImageTransformHandler\` for some of the builtin :py\`.Image.Transform\` methods.

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

Transform

</div>

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

AffineTransform

</div>

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

PerspectiveTransform

</div>

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

ExtentTransform

</div>

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

QuadTransform

</div>

<div class="autoclass" data-members="" data-undoc-members="" data-show-inheritance="">

MeshTransform

</div>

---

ImageWin.md

---

# :py`~PIL.ImageWin` Module (Windows-only)

The :py`~PIL.ImageWin` module contains support to create and display images on Windows.

ImageWin can be used with PythonWin and other user interface toolkits that provide access to Windows device contexts or window handles. For example, Tkinter makes the window handle available via the winfo\_id method:

    from PIL import ImageWin
    
    dib = ImageWin.Dib(...)
    
    hwnd = ImageWin.HWND(widget.winfo_id())
    dib.draw(hwnd, xy)

<div class="autoclass" data-members="">

PIL.ImageWin.Dib

</div>

<div class="autoclass" data-members="">

PIL.ImageWin.HDC

</div>

<div class="autoclass" data-members="">

PIL.ImageWin.HWND

</div>

---

JpegPresets.md

---

# :py`~PIL.JpegPresets` Module

<div class="automodule">

PIL.JpegPresets

<div class="data" type="dict">

presets

A dictionary of all supported presets.

</div>

</div>

---

PSDraw.md

---

# :py`~PIL.PSDraw` Module

The :py`~PIL.PSDraw` module provides simple print support for PostScript printers. You can print text, graphics and images through this module.

<div class="autoclass" data-members="">

PIL.PSDraw.PSDraw

</div>

---

PixelAccess.md

---

# :py\`PixelAccess\` Class

The PixelAccess class provides read and write access to :py\`PIL.Image\` data at a pixel level.

<div class="note">

<div class="title">

Note

</div>

Accessing individual pixels is fairly slow. If you are looping over all of the pixels in an image, there is likely a faster way using other parts of the Pillow API.

`~PIL.Image`, `~PIL.ImageChops` and `~PIL.ImageOps` have methods for many standard operations. If you wish to perform a custom mapping, check out :py\`\~PIL.Image.Image.point\`.

</div>

## Example

The following script loads an image, accesses one pixel from it, then changes it. :

    from PIL import Image
    
    with Image.open("hopper.jpg") as im:
        px = im.load()
    print(px[4, 4])
    px[4, 4] = (0, 0, 0)
    print(px[4, 4])

Results in the following:

    (23, 24, 68)
    (0, 0, 0)

Access using negative indexes is also possible. :

    px[-1, -1] = (0, 0, 0)
    print(px[-1, -1])

## :py\`PixelAccess\` Class

<div class="PixelAccess" data-canonical="PIL.Image.core.PixelAccess">

<div class="method">

\_\_getitem\_\_(self, xy: tuple\[int, int\]) -\> float | tuple\[int, ...\]

Returns the pixel at x,y. The pixel is returned as a single value for single band images or a tuple for multi-band images.

  - param xy  
    The pixel coordinate, given as (x, y).

  - returns  
    a pixel value for single band images, a tuple of pixel values for multiband images.

</div>

<div class="method">

\_\_setitem\_\_(self, xy: tuple\[int, int\], color: float | tuple\[int, ...\]) -\> None

Modifies the pixel at x,y. The color is given as a single numerical value for single band images, and a tuple for multi-band images.

  - param xy  
    The pixel coordinate, given as (x, y).

  - param color  
    The pixel value according to its mode, e.g. tuple (r, g, b) for RGB mode.

</div>

</div>

---

TiffTags.md

---

# :py`~PIL.TiffTags` Module

The :py`~PIL.TiffTags` module exposes many of the standard TIFF metadata tag numbers, names, and type information.

<div class="method">

lookup(tag)

  - param tag  
    Integer tag number

  - param group  
    Which :py\`\~PIL.TiffTags.TAGS\_V2\_GROUPS\` to look in

<div class="versionadded">

8.3.0

</div>

  - returns  
    Taginfo namedtuple, From the :py\`\~PIL.TiffTags.TAGS\_V2\` info if possible, otherwise just populating the value and name from :py\`\~PIL.TiffTags.TAGS\`. If the tag is not recognized, "unknown" is returned for the name

</div>

<div class="versionadded">

3.1.0

</div>

<div class="TagInfo">

<div class="method">

\_\_init\_\_(self, value=None, name="unknown", type=None, length=0, enum=None)

  - param value  
    Integer Tag Number

  - param name  
    Tag Name

  - param type  
    Integer type from :py\`PIL.TiffTags.TYPES\`

  - param length  
    Array length: 0 == variable, 1 == single value, n = fixed

  - param enum  
    Dict of name:integer value options for an enumeration

</div>

<div class="method">

cvt\_enum(self, value)

  - param value  
    The enumerated value name

  - returns  
    The integer corresponding to the name.

</div>

</div>

<div class="versionadded">

3.0.0

</div>

<div class="versionadded">

3.0.0

</div>

<div class="versionadded">

8.3.0

</div>

---

block_allocator.md

---

# Block Allocator

## Previous Design

Historically there have been two image allocators in Pillow: `ImagingAllocateBlock` and `ImagingAllocateArray`. The first works for images smaller than 16MB of data and allocates one large chunk of memory of `im->linesize * im->ysize` bytes. The second works for large images and makes one allocation for each scan line of size `im->linesize` bytes. This makes for a very sharp transition between one allocation and potentially thousands of small allocations, leading to unpredictable performance penalties around the transition.

## New Design

`ImagingAllocateArray` now allocates space for images as a chain of blocks with a maximum size of 16MB. If there is a memory allocation error, it falls back to allocating a 4KB block, or at least one scan line. This is now the default for all internal allocations.

`ImagingAllocateBlock` is now only used for those cases when we are specifically requesting a single segment of memory for sharing with other code.

## Memory Pools

There is now a memory pool to contain a supply of recently freed blocks, which can then be reused without going back to the OS for a fresh allocation. This caching of free blocks is currently disabled by default, but can be enabled and tweaked using three environment variables:

>   - `PILLOW_ALIGNMENT`, in bytes. Specifies the alignment of memory allocations. Valid values are powers of 2 between 1 and 128, inclusive. Defaults to 1.
>   - `PILLOW_BLOCK_SIZE`, in bytes, K, or M. Specifies the maximum block size for `ImagingAllocateArray`. Valid values are integers, with an optional `k` or `m` suffix. Defaults to 16M.
>   - `PILLOW_BLOCKS_MAX` Specifies the number of freed blocks to retain to fill future memory requests. Any freed blocks over this threshold will be returned to the OS immediately. Defaults to 0.

---

c_extension_debugging.md

---

# C Extension debugging on Linux, with gbd/valgrind.

## Install the tools

You need some basics in addition to the basic tools to build pillow. These are what's required on Ubuntu, YMMV for other distributions.

  - `python3-dbg` package for the gdb extensions and python symbols
  - `gdb` and `valgrind`
  - Potentially debug symbols for libraries. On Ubuntu you can follow those instructions to install the corresponding packages: [Debug Symbol Packages](https://wiki.ubuntu.com/Debug%20Symbol%20Packages#Getting_-dbgsym.ddeb_packages)

Then `sudo apt-get install libtiff5-dbgsym`

  - There's a bug with the `python3-dbg` package for at least Python 3.8 on Ubuntu 20.04, and you need to add a new link or two to make it autoload when running python:

<!-- end list -->

    cd /usr/share/gdb/auto-load/usr/bin
    ln -s python3.8m-gdb.py python3.8d-gdb.py

  - In Ubuntu 18.04, it's actually including the path to the virtualenv in the search for the `python3.*-gdb.py` file, but you can helpfully put in the same directory as the binary.
  - I also find that history is really useful for gdb, so I added this to my `~/.gdbinit` file:

<!-- end list -->

    set history filename ~/.gdb_history
    set history save on

  - If the python stack isn't working in gdb, then `set debug auto-load` can also be helpful in `.gdbinit`.
  - Make a virtualenv with the debug python and activate it, then install whatever dependencies are required and build. You want to build with the debug python so you get symbols for your extension.

<!-- end list -->

    virtualenv -p python3.8-dbg ~/vpy38-dbg
    source ~/vpy38-dbg/bin/activate
    cd ~/Pillow && make install

## Test Case

Take your test image, and make a really simple harness.

    from PIL import Image
    
    with Image.open(path) as im:
        im.load()

  - Run this through valgrind, but note that python triggers some issues on its own, so you're looking for items within the Pillow hierarchy that don't look like they're solely in the python call chain. In this example, the ones we're interested are after the warnings, and have `decode.c` and `TiffDecode.c` in the call stack:

<!-- end list -->

    (vpy38-dbg) ubuntu@primary:~/Home/tests$ valgrind python test_tiff.py
    ==51890== Memcheck, a memory error detector
    ==51890== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
    ==51890== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
    ==51890== Command: python test_tiff.py
    ==51890==
    ==51890== Invalid read of size 4
    ==51890==    at 0x472E3D: address_in_range (obmalloc.c:1401)
    ==51890==    by 0x472EEA: pymalloc_free (obmalloc.c:1677)
    ==51890==    by 0x474960: _PyObject_Free (obmalloc.c:1896)
    ==51890==    by 0x473BAC: _PyMem_DebugRawFree (obmalloc.c:2187)
    ==51890==    by 0x473BD4: _PyMem_DebugFree (obmalloc.c:2318)
    ==51890==    by 0x474C08: PyObject_Free (obmalloc.c:709)
    ==51890==    by 0x45DD60: dictresize (dictobject.c:1259)
    ==51890==    by 0x45DD76: insertion_resize (dictobject.c:1019)
    ==51890==    by 0x464F30: PyDict_SetDefault (dictobject.c:2924)
    ==51890==    by 0x4D03BE: PyUnicode_InternInPlace (unicodeobject.c:15289)
    ==51890==    by 0x4D0700: PyUnicode_InternFromString (unicodeobject.c:15322)
    ==51890==    by 0x64D2FC: descr_new (descrobject.c:857)
    ==51890==  Address 0x4c1b020 is 384 bytes inside a block of size 1,160 free'd
    ==51890==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==51890==    by 0x4735D3: _PyMem_RawFree (obmalloc.c:127)
    ==51890==    by 0x473BAC: _PyMem_DebugRawFree (obmalloc.c:2187)
    ==51890==    by 0x474941: PyMem_RawFree (obmalloc.c:595)
    ==51890==    by 0x47496E: _PyObject_Free (obmalloc.c:1898)
    ==51890==    by 0x473BAC: _PyMem_DebugRawFree (obmalloc.c:2187)
    ==51890==    by 0x473BD4: _PyMem_DebugFree (obmalloc.c:2318)
    ==51890==    by 0x474C08: PyObject_Free (obmalloc.c:709)
    ==51890==    by 0x45DD60: dictresize (dictobject.c:1259)
    ==51890==    by 0x45DD76: insertion_resize (dictobject.c:1019)
    ==51890==    by 0x464F30: PyDict_SetDefault (dictobject.c:2924)
    ==51890==    by 0x4D03BE: PyUnicode_InternInPlace (unicodeobject.c:15289)
    ==51890==  Block was alloc'd at
    ==51890==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==51890==    by 0x473646: _PyMem_RawMalloc (obmalloc.c:99)
    ==51890==    by 0x473529: _PyMem_DebugRawAlloc (obmalloc.c:2120)
    ==51890==    by 0x473565: _PyMem_DebugRawMalloc (obmalloc.c:2153)
    ==51890==    by 0x4748B1: PyMem_RawMalloc (obmalloc.c:572)
    ==51890==    by 0x475909: _PyObject_Malloc (obmalloc.c:1628)
    ==51890==    by 0x473529: _PyMem_DebugRawAlloc (obmalloc.c:2120)
    ==51890==    by 0x473565: _PyMem_DebugRawMalloc (obmalloc.c:2153)
    ==51890==    by 0x4736B0: _PyMem_DebugMalloc (obmalloc.c:2303)
    ==51890==    by 0x474B78: PyObject_Malloc (obmalloc.c:685)
    ==51890==    by 0x45C435: new_keys_object (dictobject.c:558)
    ==51890==    by 0x45DA95: dictresize (dictobject.c:1202)
    ==51890==
    ==51890== Invalid read of size 4
    ==51890==    at 0x472E3D: address_in_range (obmalloc.c:1401)
    ==51890==    by 0x47594A: pymalloc_realloc (obmalloc.c:1929)
    ==51890==    by 0x475A02: _PyObject_Realloc (obmalloc.c:1982)
    ==51890==    by 0x473DCA: _PyMem_DebugRawRealloc (obmalloc.c:2240)
    ==51890==    by 0x473FF8: _PyMem_DebugRealloc (obmalloc.c:2326)
    ==51890==    by 0x4749FB: PyMem_Realloc (obmalloc.c:623)
    ==51890==    by 0x44A6FC: list_resize (listobject.c:70)
    ==51890==    by 0x44A872: app1 (listobject.c:340)
    ==51890==    by 0x44FD65: PyList_Append (listobject.c:352)
    ==51890==    by 0x514315: r_ref (marshal.c:945)
    ==51890==    by 0x516034: r_object (marshal.c:1139)
    ==51890==    by 0x516C70: r_object (marshal.c:1389)
    ==51890==  Address 0x4c41020 is 32 bytes before a block of size 1,600 in arena "client"
    ==51890==
    ==51890== Conditional jump or move depends on uninitialised value(s)
    ==51890==    at 0x472E46: address_in_range (obmalloc.c:1403)
    ==51890==    by 0x47594A: pymalloc_realloc (obmalloc.c:1929)
    ==51890==    by 0x475A02: _PyObject_Realloc (obmalloc.c:1982)
    ==51890==    by 0x473DCA: _PyMem_DebugRawRealloc (obmalloc.c:2240)
    ==51890==    by 0x473FF8: _PyMem_DebugRealloc (obmalloc.c:2326)
    ==51890==    by 0x4749FB: PyMem_Realloc (obmalloc.c:623)
    ==51890==    by 0x44A6FC: list_resize (listobject.c:70)
    ==51890==    by 0x44A872: app1 (listobject.c:340)
    ==51890==    by 0x44FD65: PyList_Append (listobject.c:352)
    ==51890==    by 0x5E3321: _posix_listdir (posixmodule.c:3823)
    ==51890==    by 0x5E33A8: os_listdir_impl (posixmodule.c:3879)
    ==51890==    by 0x5E4D77: os_listdir (posixmodule.c.h:1197)
    ==51890==
    ==51890== Use of uninitialised value of size 8
    ==51890==    at 0x472E59: address_in_range (obmalloc.c:1403)
    ==51890==    by 0x47594A: pymalloc_realloc (obmalloc.c:1929)
    ==51890==    by 0x475A02: _PyObject_Realloc (obmalloc.c:1982)
    ==51890==    by 0x473DCA: _PyMem_DebugRawRealloc (obmalloc.c:2240)
    ==51890==    by 0x473FF8: _PyMem_DebugRealloc (obmalloc.c:2326)
    ==51890==    by 0x4749FB: PyMem_Realloc (obmalloc.c:623)
    ==51890==    by 0x44A6FC: list_resize (listobject.c:70)
    ==51890==    by 0x44A872: app1 (listobject.c:340)
    ==51890==    by 0x44FD65: PyList_Append (listobject.c:352)
    ==51890==    by 0x5E3321: _posix_listdir (posixmodule.c:3823)
    ==51890==    by 0x5E33A8: os_listdir_impl (posixmodule.c:3879)
    ==51890==    by 0x5E4D77: os_listdir (posixmodule.c.h:1197)
    ==51890==
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 16908288 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67895296 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1572864 bytes but only got 0. Skipping tag 42
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 116647 bytes but only got 4867. Skipping tag 42738
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3468830728 bytes but only got 4851. Skipping tag 279
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2198732800 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67239937 bytes but only got 4125. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33947764 bytes but only got 0. Skipping tag 139
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 17170432 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 80478208 bytes but only got 0. Skipping tag 1
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 787460 bytes but only got 4882. Skipping tag 20
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1075 bytes but only got 0. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 120586240 bytes but only got 0. Skipping tag 194
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 65536 bytes but only got 0. Skipping tag 3
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 198656 bytes but only got 0. Skipping tag 279
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 206848 bytes but only got 0. Skipping tag 64512
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 130968 bytes but only got 4882. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 77848 bytes but only got 4689. Skipping tag 64270
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 262156 bytes but only got 0. Skipping tag 257
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33624064 bytes but only got 0. Skipping tag 49152
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67178752 bytes but only got 4627. Skipping tag 50688
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33632768 bytes but only got 0. Skipping tag 56320
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 134386688 bytes but only got 4115. Skipping tag 2048
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33912832 bytes but only got 0. Skipping tag 7168
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 151966208 bytes but only got 4627. Skipping tag 10240
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 119032832 bytes but only got 3859. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 46535680 bytes but only got 0. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 35651584 bytes but only got 0. Skipping tag 42
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 524288 bytes but only got 0. Skipping tag 0
      warnings.warn(
    _TIFFVSetField: tempfile.tif: Null count for "Tag 769" (type 1, writecount -3, passcount 1).
    _TIFFVSetField: tempfile.tif: Null count for "Tag 42754" (type 1, writecount -3, passcount 1).
    _TIFFVSetField: tempfile.tif: Null count for "Tag 769" (type 1, writecount -3, passcount 1).
    _TIFFVSetField: tempfile.tif: Null count for "Tag 42754" (type 1, writecount -3, passcount 1).
    ZIPDecode: Decoding error at scanline 0, incorrect header check.
    ==51890== Invalid write of size 4
    ==51890==    at 0x61C39E6: putcontig8bitYCbCr22tile (tif_getimage.c:2146)
    ==51890==    by 0x61C5865: gtStripContig (tif_getimage.c:977)
    ==51890==    by 0x6094317: ReadStrip (TiffDecode.c:269)
    ==51890==    by 0x6094749: ImagingLibTiffDecode (TiffDecode.c:479)
    ==51890==    by 0x60615D1: _decode (decode.c:136)
    ==51890==    by 0x64BF47: method_vectorcall_VARARGS (descrobject.c:300)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==    by 0x43627B: function_code_fastcall (call.c:283)
    ==51890==    by 0x436D21: _PyFunction_Vectorcall (call.c:410)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==  Address 0x6f456d4 is 0 bytes after a block of size 68 alloc'd
    ==51890==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==51890==    by 0x60946D0: ImagingLibTiffDecode (TiffDecode.c:469)
    ==51890==    by 0x60615D1: _decode (decode.c:136)
    ==51890==    by 0x64BF47: method_vectorcall_VARARGS (descrobject.c:300)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==    by 0x43627B: function_code_fastcall (call.c:283)
    ==51890==    by 0x436D21: _PyFunction_Vectorcall (call.c:410)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==    by 0x4DFDFB: _PyEval_EvalCodeWithName (ceval.c:4298)
    ==51890==    by 0x436C40: _PyFunction_Vectorcall (call.c:435)
    ==51890==
    ==51890== Invalid write of size 4
    ==51890==    at 0x61C39B5: putcontig8bitYCbCr22tile (tif_getimage.c:2145)
    ==51890==    by 0x61C5865: gtStripContig (tif_getimage.c:977)
    ==51890==    by 0x6094317: ReadStrip (TiffDecode.c:269)
    ==51890==    by 0x6094749: ImagingLibTiffDecode (TiffDecode.c:479)
    ==51890==    by 0x60615D1: _decode (decode.c:136)
    ==51890==    by 0x64BF47: method_vectorcall_VARARGS (descrobject.c:300)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==    by 0x43627B: function_code_fastcall (call.c:283)
    ==51890==    by 0x436D21: _PyFunction_Vectorcall (call.c:410)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==  Address 0x6f456d8 is 4 bytes after a block of size 68 alloc'd
    ==51890==    at 0x483DFAF: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==51890==    by 0x60946D0: ImagingLibTiffDecode (TiffDecode.c:469)
    ==51890==    by 0x60615D1: _decode (decode.c:136)
    ==51890==    by 0x64BF47: method_vectorcall_VARARGS (descrobject.c:300)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==    by 0x43627B: function_code_fastcall (call.c:283)
    ==51890==    by 0x436D21: _PyFunction_Vectorcall (call.c:410)
    ==51890==    by 0x4EB73C: _PyObject_Vectorcall (abstract.h:127)
    ==51890==    by 0x4EB73C: call_function (ceval.c:4963)
    ==51890==    by 0x4EB73C: _PyEval_EvalFrameDefault (ceval.c:3486)
    ==51890==    by 0x4DF2EE: PyEval_EvalFrameEx (ceval.c:741)
    ==51890==    by 0x4DFDFB: _PyEval_EvalCodeWithName (ceval.c:4298)
    ==51890==    by 0x436C40: _PyFunction_Vectorcall (call.c:435)
    ==51890==
    TIFFFillStrip: Invalid strip byte count 0, strip 1.
    Traceback (most recent call last):
      File "test_tiff.py", line 8, in <module>
        im.load()
      File "/home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py", line 1087, in load
        return self._load_libtiff()
      File "/home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py", line 1191, in _load_libtiff
        raise OSError(err)
    OSError: -2
    sys:1: ResourceWarning: unclosed file <_io.BufferedReader name='crash-2020-10-test.tiff'>
    ==51890==
    ==51890== HEAP SUMMARY:
    ==51890==     in use at exit: 748,734 bytes in 444 blocks
    ==51890==   total heap usage: 6,320 allocs, 5,876 frees, 69,142,969 bytes allocated
    ==51890==
    ==51890== LEAK SUMMARY:
    ==51890==    definitely lost: 0 bytes in 0 blocks
    ==51890==    indirectly lost: 0 bytes in 0 blocks
    ==51890==      possibly lost: 721,538 bytes in 372 blocks
    ==51890==    still reachable: 27,196 bytes in 72 blocks
    ==51890==         suppressed: 0 bytes in 0 blocks
    ==51890== Rerun with --leak-check=full to see details of leaked memory
    ==51890==
    ==51890== Use --track-origins=yes to see where uninitialised values come from
    ==51890== For lists of detected and suppressed errors, rerun with: -s
    ==51890== ERROR SUMMARY: 2556 errors from 6 contexts (suppressed: 0 from 0)
    (vpy38-dbg) ubuntu@primary:~/Home/tests$

  - Now that we've confirmed that there's something odd/bad going on, it's time to gdb.
  - Start with `gdb python`
  - Set a break point starting with the valgrind stack trace. `b TiffDecode.c:269`
  - Run the script with `r test_tiff.py`
  - When the break point is hit, explore the state with `info locals`, `bt`, `py-bt`, or `p [variable]`. For pointers, `p *[variable]` is useful.

<!-- end list -->

    (vpy38-dbg) ubuntu@primary:~/Home/tests$ gdb python
    GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
    Copyright (C) 2020 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.
    Type "show copying" and "show warranty" for details.
    This GDB was configured as "x86_64-linux-gnu".
    Type "show configuration" for configuration details.
    For bug reporting instructions, please see:
    <http://www.gnu.org/software/gdb/bugs/>.
    Find the GDB manual and other documentation resources online at:
        <https://www.gnu.org/software/gdb/documentation/>.
    
    For help, type "help".
    Type "apropos word" to search for commands related to "word"...
    Reading symbols from python...
    (gdb) b TiffDecode.c:269
    No source file named TiffDecode.c.
    Make breakpoint pending on future shared library load? (y or [n]) y
    Breakpoint 1 (TiffDecode.c:269) pending.
    (gdb) r test_tiff.py
    Starting program: /home/ubuntu/vpy38-dbg/bin/python test_tiff.py
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 16908288 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67895296 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1572864 bytes but only got 0. Skipping tag 42
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 116647 bytes but only got 4867. Skipping tag 42738
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 3468830728 bytes but only got 4851. Skipping tag 279
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 2198732800 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67239937 bytes but only got 4125. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33947764 bytes but only got 0. Skipping tag 139
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 17170432 bytes but only got 0. Skipping tag 0
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 80478208 bytes but only got 0. Skipping tag 1
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 787460 bytes but only got 4882. Skipping tag 20
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 1075 bytes but only got 0. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 120586240 bytes but only got 0. Skipping tag 194
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 65536 bytes but only got 0. Skipping tag 3
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 198656 bytes but only got 0. Skipping tag 279
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 206848 bytes but only got 0. Skipping tag 64512
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 130968 bytes but only got 4882. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 77848 bytes but only got 4689. Skipping tag 64270
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 262156 bytes but only got 0. Skipping tag 257
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33624064 bytes but only got 0. Skipping tag 49152
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 67178752 bytes but only got 4627. Skipping tag 50688
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33632768 bytes but only got 0. Skipping tag 56320
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 134386688 bytes but only got 4115. Skipping tag 2048
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 33912832 bytes but only got 0. Skipping tag 7168
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 151966208 bytes but only got 4627. Skipping tag 10240
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 119032832 bytes but only got 3859. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 46535680 bytes but only got 0. Skipping tag 256
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 35651584 bytes but only got 0. Skipping tag 42
      warnings.warn(
    /home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data.  Expecting to read 524288 bytes but only got 0. Skipping tag 0
      warnings.warn(
    _TIFFVSetField: tempfile.tif: Null count for "Tag 769" (type 1, writecount -3, passcount 1).
    _TIFFVSetField: tempfile.tif: Null count for "Tag 42754" (type 1, writecount -3, passcount 1).
    _TIFFVSetField: tempfile.tif: Null count for "Tag 769" (type 1, writecount -3, passcount 1).
    _TIFFVSetField: tempfile.tif: Null count for "Tag 42754" (type 1, writecount -3, passcount 1).
    
    Breakpoint 1, ReadStrip (tiff=tiff@entry=0xae9b90, row=0, buffer=0xac2eb0) at src/libImaging/TiffDecode.c:269
    269                 ok = TIFFRGBAImageGet(&img, buffer, img.width, rows_to_read);
    (gdb) p img
    $1 = {tif = 0xae9b90, stoponerr = 0, isContig = 1, alpha = 0, width = 20, height = 1536, bitspersample = 8, samplesperpixel = 3,
      orientation = 1, req_orientation = 1, photometric = 6, redcmap = 0x0, greencmap = 0x0, bluecmap = 0x0, get =
        0x7ffff71d0710 <gtStripContig>, put = {any = 0x7ffff71ce550 <putcontig8bitYCbCr22tile>,
        contig = 0x7ffff71ce550 <putcontig8bitYCbCr22tile>, separate = 0x7ffff71ce550 <putcontig8bitYCbCr22tile>}, Map = 0x0,
      BWmap = 0x0, PALmap = 0x0, ycbcr = 0xaf24b0, cielab = 0x0, UaToAa = 0x0, Bitdepth16To8 = 0x0, row_offset = 0, col_offset = 0}
    (gdb) up
    #1  0x00007ffff736174a in ImagingLibTiffDecode (im=0xac1f90, state=0x7ffff76767e0, buffer=<optimized out>, bytes=<optimized out>)
        at src/libImaging/TiffDecode.c:479
    479                 if (ReadStrip(tiff, state->y, (UINT32 *)state->buffer) == -1) {
    (gdb) p *state
    $2 = {count = 0, state = 0, errcode = 0, x = 0, y = 0, ystep = 0, xsize = 17, ysize = 108, xoff = 0, yoff = 0,
      shuffle = 0x7ffff735f411 <copy4>, bits = 32, bytes = 68, buffer = 0xac2eb0 "P\354\336\367\377\177", context = 0xa75440, fd = 0x0}
    (gdb) py-bt
    Traceback (most recent call first):
      File "/home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py", line 1428, in _load_libtiff
    
      File "/home/ubuntu/vpy38-dbg/lib/python3.8/site-packages/Pillow-8.0.1-py3.8-linux-x86_64.egg/PIL/TiffImagePlugin.py", line 1087, in load
        return self._load_libtiff()
      File "test_tiff.py", line 8, in <module>
        im.load()

  - Poke around till you understand what's going on. In this case, state-\>xsize and img.width are different, which led to an out of bounds write, as the receiving buffer was sized for the smaller of the two.

## Caveats

  - If your program is running/hung in a docker container and your host has the appropriate tools, you can run gdb as the superuser in the host and you may be able to get a trace of where the process is hung. You probably won't have the capability to do that from within the docker container, as the trace capacity isn't allowed by default.
  - Variations of this are possible on the mac/windows, but the details are going to be different.
  - IIRC, Fedora has the gdb bits working by default. Ubuntu has always been a bit of a battle to make it work.

---

features.md

---

# :py`~PIL.features` Module

The :py`PIL.features` module can be used to detect which Pillow features are available on your system.

<div class="autofunction">

PIL.features.pilinfo

</div>

<div class="autofunction">

PIL.features.check

</div>

<div class="autofunction">

PIL.features.version

</div>

<div class="autofunction">

PIL.features.get\_supported

</div>

## Modules

Support for the following modules can be checked:

  - `pil`: The Pillow core module, required for all functionality.
  - `tkinter`: Tkinter support.
  - `freetype2`: FreeType font support via :py\`PIL.ImageFont.truetype\`.
  - `littlecms2`: LittleCMS 2 support via :py`PIL.ImageCms`.
  - `webp`: WebP image support.

<div class="autofunction">

PIL.features.check\_module

</div>

<div class="autofunction">

PIL.features.version\_module

</div>

<div class="autofunction">

PIL.features.get\_supported\_modules

</div>

## Codecs

Support for these is only checked during Pillow compilation. If the required library was uninstalled from the system, the `pil` core module may fail to load instead. Except for `jpg`, the version number is checked at run-time.

Support for the following codecs can be checked:

  - `jpg`: (compile time) Libjpeg support, required for JPEG based image formats. Only compile time version number is available.
  - `jpg_2000`: (compile time) OpenJPEG support, required for JPEG 2000 image formats.
  - `zlib`: (compile time) Zlib support, required for zlib compressed formats, such as PNG.
  - `libtiff`: (compile time) LibTIFF support, required for TIFF based image formats.

<div class="autofunction">

PIL.features.check\_codec

</div>

<div class="autofunction">

PIL.features.version\_codec

</div>

<div class="autofunction">

PIL.features.get\_supported\_codecs

</div>

## Features

Some of these are only checked during Pillow compilation. If the required library was uninstalled from the system, the relevant module may fail to load instead. Feature version numbers are available only where stated.

Support for the following features can be checked:

  - `libjpeg_turbo`: (compile time) Whether Pillow was compiled against the libjpeg-turbo version of libjpeg. Compile-time version number is available.
  - `raqm`: Raqm library, required for `ImageFont.Layout.RAQM` in :py\`PIL.ImageFont.truetype\`. Run-time version number is available for Raqm 0.7.0 or newer.
  - `libimagequant`: (compile time) ImageQuant quantization support in :py\`PIL.Image.Image.quantize\`. Run-time version number is available.
  - `xcb`: (compile time) Support for X11 in :py\`PIL.ImageGrab.grab\` via the XCB library.
  - `transp_webp`: Deprecated. Always `True` if WebP module is installed.
  - `webp_mux`: Deprecated. Always `True` if WebP module is installed.
  - `webp_anim`: Deprecated. Always `True` if WebP module is installed.

<div class="autofunction">

PIL.features.check\_feature

</div>

<div class="autofunction">

PIL.features.version\_feature

</div>

<div class="autofunction">

PIL.features.get\_supported\_features

</div>

---

index.md

---

# Reference

<div class="toctree" data-maxdepth="2">

Image ImageChops ImageCms ImageColor ImageDraw ImageEnhance ImageFile ImageFilter ImageFont ImageGrab ImageMath ImageMorph ImageOps ImagePalette ImagePath ImageQt ImageSequence ImageShow ImageStat ImageTk ImageTransform ImageWin ExifTags TiffTags JpegPresets PSDraw PixelAccess features ../PIL plugins internal\_design

</div>

---

internal_design.md

---

# Internal Reference

<div class="toctree" data-maxdepth="2">

open\_files limits block\_allocator internal\_modules c\_extension\_debugging

</div>

---

internal_modules.md

---

# Internal Modules

## `~PIL._binary` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.\_binary

</div>

## `~PIL._deprecate` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.\_deprecate

</div>

## `~PIL._tkinter_finder` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.\_tkinter\_finder

</div>

## `~PIL._typing` Module

<div class="module">

PIL.\_typing

</div>

Provides a convenient way to import type hints that are not available on some Python versions.

## `~PIL._util` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.\_util

</div>

## `~PIL._version` Module

<div class="module">

PIL.\_version

</div>

<div class="data" data-annotation="" type="str">

\_\_version\_\_

This is the master version number for Pillow, all other uses reference this module.

</div>

## `PIL.Image.core` Module

<div class="module">

PIL.\_imaging

</div>

<div class="module">

PIL.Image.core

</div>

An internal interface module previously known as `~PIL._imaging`, implemented in `_imaging.c`.

---

limits.md

---

# Limits

This page is documentation to the various fundamental size limits in the Pillow implementation.

## Internal Limits

  - Image sizes cannot be negative. These are checked both in `Storage.c` and `Image.py`
  - Image sizes may be 0. (Although not in 3.4)
  - Maximum pixel dimensions are limited to INT32, or 2^31 by the sizes in the image header.
  - Individual allocations are limited to 2GB in `Storage.c`
  - The 2GB allocation puts an upper limit to the xsize of the image of either 2^31 for 'L' or 2^29 for 'RGB'
  - Individual memory mapped segments are limited to 2GB in map.c based on the overflow checks. This requires that any memory mapped image is smaller than 2GB, as calculated by `y*stride` (so 2Gpx for 'L' images, and .5Gpx for 'RGB'

## Format Size Limits

  - ICO: Max size is 256x256
  - Webp: 16383x16383 (underlying library size limit: <https://developers.google.com/speed/webp/docs/api>)

---

open_files.md

---

# File Handling in Pillow

When opening a file as an image, Pillow requires a filename, `os.PathLike` object, or a file-like object. Pillow uses the filename or `Path` to open a file, so for the rest of this article, they will all be treated as a file-like object.

The following are all equivalent:

    from PIL import Image
    import io
    import pathlib
    
    with Image.open("test.jpg") as im:
        ...
    
    with Image.open(pathlib.Path("test.jpg")) as im2:
        ...
    
    with open("test.jpg", "rb") as f:
        im3 = Image.open(f)
        ...
    
    with open("test.jpg", "rb") as f:
        im4 = Image.open(io.BytesIO(f.read()))
        ...

If a filename or a path-like object is passed to Pillow, then the resulting file object opened by Pillow may also be closed by Pillow after the `Image.Image.load()` method is called, provided the associated image does not have multiple frames.

Pillow cannot in general close and reopen a file, so any access to that file needs to be prior to the close.

## Image Lifecycle

  - `Image.open()` Filenames and `Path` objects are opened as a file. Metadata is read from the open file. The file is left open for further usage.

  - `Image.Image.load()` When the pixel data from the image is required, `load()` is called. The current frame is read into memory. The image can now be used independently of the underlying image file.
    
    Any Pillow method that creates a new image instance based on another will internally call `load()` on the original image and then read the data. The new image instance will not be associated with the original image file.
    
    If a filename or a `Path` object was passed to `Image.open()`, then the file object was opened by Pillow and is considered to be used exclusively by Pillow. So if the image is a single-frame image, the file will be closed in this method after the frame is read. If the image is a multi-frame image, (e.g. multipage TIFF and animated GIF) the image file is left open so that `Image.Image.seek()` can load the appropriate frame.

  - `Image.Image.close()` Closes the file and destroys the core image object.
    
    The Pillow context manager will also close the file, but will not destroy the core image object. e.g.:
    
        with Image.open("test.jpg") as img:
            img.load()
        assert img.fp is None
        img.save("test.png")

The lifecycle of a single-frame image is relatively simple. The file must remain open until the `load()` or `close()` function is called or the context manager exits.

Multi-frame images are more complicated. The `load()` method is not a terminal method, so it should not close the underlying file. In general, Pillow does not know if there are going to be any requests for additional data until the caller has explicitly closed the image.

## Complications

  - `TiffImagePlugin` has some code to pass the underlying file descriptor into libtiff (if working on an actual file). Since libtiff closes the file descriptor internally, it is duplicated prior to passing it into libtiff.

  - After a file has been closed, operations that require file access will fail:
    
        with open("test.jpg", "rb") as f:
            im5 = Image.open(f)
        im5.load()  # FAILS, closed file
        
        with Image.open("test.jpg") as im6:
            pass
        im6.load()  # FAILS, closed file

## Proposed File Handling

  - `Image.Image.load()` should close the image file, unless there are multiple frames.
  - `Image.Image.seek()` should never close the image file.
  - Users of the library should use a context manager or call `Image.Image.close()` on any image opened with a filename or `Path` object to ensure that the underlying file is closed.

---

plugins.md

---

# Plugin reference

## `~PIL.BmpImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.BmpImagePlugin

</div>

## `~PIL.BufrStubImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.BufrStubImagePlugin

</div>

## `~PIL.CurImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.CurImagePlugin

</div>

## `~PIL.DcxImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.DcxImagePlugin

</div>

## `~PIL.DdsImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.DdsImagePlugin

</div>

## `~PIL.EpsImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.EpsImagePlugin

</div>

## `~PIL.FitsImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.FitsImagePlugin

</div>

## `~PIL.FliImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.FliImagePlugin

</div>

## `~PIL.FpxImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.FpxImagePlugin

</div>

## `~PIL.GbrImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.GbrImagePlugin

</div>

## `~PIL.GifImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.GifImagePlugin

</div>

## `~PIL.GribStubImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.GribStubImagePlugin

</div>

## `~PIL.Hdf5StubImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.Hdf5StubImagePlugin

</div>

## `~PIL.IcnsImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.IcnsImagePlugin

</div>

## `~PIL.IcoImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.IcoImagePlugin

</div>

## `~PIL.ImImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.ImImagePlugin

</div>

## `~PIL.ImtImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.ImtImagePlugin

</div>

## `~PIL.IptcImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.IptcImagePlugin

</div>

## `~PIL.JpegImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.JpegImagePlugin

</div>

## `~PIL.Jpeg2KImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.Jpeg2KImagePlugin

</div>

## `~PIL.McIdasImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.McIdasImagePlugin

</div>

## `~PIL.MicImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.MicImagePlugin

</div>

## `~PIL.MpegImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.MpegImagePlugin

</div>

## `~PIL.MpoImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.MpoImagePlugin

</div>

## `~PIL.MspImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.MspImagePlugin

</div>

## `~PIL.PalmImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PalmImagePlugin

</div>

## `~PIL.PcdImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PcdImagePlugin

</div>

## `~PIL.PcxImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PcxImagePlugin

</div>

## `~PIL.PdfImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PdfImagePlugin

</div>

## `~PIL.PixarImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PixarImagePlugin

</div>

## `~PIL.PngImagePlugin` Module

<div class="automodule" data-members="ChunkStream, PngImageFile, PngStream, getchunks, is_cid, putchunk,
Blend, Disposal, MAX_TEXT_CHUNK, MAX_TEXT_MEMORY
:undoc-members:
:show-inheritance:
:member-order: groupwise">

PIL.PngImagePlugin

</div>

## `~PIL.PpmImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PpmImagePlugin

</div>

## `~PIL.PsdImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.PsdImagePlugin

</div>

## `~PIL.SgiImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.SgiImagePlugin

</div>

## `~PIL.SpiderImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.SpiderImagePlugin

</div>

## `~PIL.SunImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.SunImagePlugin

</div>

## `~PIL.TgaImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.TgaImagePlugin

</div>

## `~PIL.TiffImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.TiffImagePlugin

</div>

## `~PIL.WebPImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.WebPImagePlugin

</div>

## `~PIL.WmfImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.WmfImagePlugin

</div>

## `~PIL.XVThumbImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.XVThumbImagePlugin

</div>

## `~PIL.XbmImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.XbmImagePlugin

</div>

## `~PIL.XpmImagePlugin` Module

<div class="automodule" data-members="" data-undoc-members="" data-show-inheritance="">

PIL.XpmImagePlugin

</div>

---

10.0.0.md

---

# 10.0.0

## Security

### Limit size even if one dimension is zero

When performing decompression bomb checks, Pillow did not reject images with excessive width and zero height, or zero width and excessive height. That has now been fixed.

This effectively dates to the PIL fork, since problem images would still have been processed before Pillow started checking for decompression bombs.

### `2023-44271`: Added ImageFont.MAX\_STRING\_LENGTH

To protect against potential DOS attacks when using arbitrary strings as text input, Pillow will now raise a :py\`ValueError\` if the number of characters passed into ImageFont methods is over a certain limit, :py\`PIL.ImageFont.MAX\_STRING\_LENGTH\`.

This threshold can be changed by setting :py\`PIL.ImageFont.MAX\_STRING\_LENGTH\`. It can be disabled by setting `ImageFont.MAX_STRING_LENGTH = None`.

## Backwards Incompatible Changes

### Categories

`im.category` has been removed, along with the related `Image.NORMAL`, `Image.SEQUENCE` and `Image.CONTAINER` attributes.

To determine if an image has multiple frames or not, `getattr(im, "is_animated", False)` can be used instead.

### Tk/Tcl 8.4

Support for Tk/Tcl 8.4 has been removed.

### JpegImagePlugin.convert\_dict\_qtables

Since deprecation in Pillow 8.3.0, the `convert_dict_qtables` method no longer performed any operations on the data given to it, and has been removed.

### ImagePalette size parameter

Before Pillow 8.3.0, `ImagePalette` required palette data of particular lengths by default, and the `size` parameter could be used to override that. Pillow 8.3.0 removed the default required length, also removing the need for the `size` parameter.

### ImageShow.Viewer.show\_file file argument

The `file` argument in :py\`\~PIL.ImageShow.Viewer.show\_file()<span class="title-ref"> has been removed and replaced by </span><span class="title-ref">path</span>\`.

In effect, `viewer.show_file("test.jpg")` will continue to work unchanged.

### Constants

A number of constants have been removed. Instead, :py\`enum.IntEnum\` classes have been added.

| Removed                                             | Use instead                                     |
| --------------------------------------------------- | ----------------------------------------------- |
| `Image.LINEAR`                                      | `Image.BILINEAR` or `Image.Resampling.BILINEAR` |
| `Image.CUBIC`                                       | `Image.BICUBIC` or `Image.Resampling.BICUBIC`   |
| `Image.ANTIALIAS`                                   | `Image.LANCZOS` or `Image.Resampling.LANCZOS`   |
| `ImageCms.INTENT_PERCEPTUAL`                        | `ImageCms.Intent.PERCEPTUAL`                    |
| `ImageCms.INTENT_RELATIVE_COLORMETRIC`              | `ImageCms.Intent.RELATIVE_COLORMETRIC`          |
| `ImageCms.INTENT_SATURATION`                        | `ImageCms.Intent.SATURATION`                    |
| `ImageCms.INTENT_ABSOLUTE_COLORIMETRIC`             | `ImageCms.Intent.ABSOLUTE_COLORIMETRIC`         |
| `ImageCms.DIRECTION_INPUT`                          | `ImageCms.Direction.INPUT`                      |
| `ImageCms.DIRECTION_OUTPUT`                         | `ImageCms.Direction.OUTPUT`                     |
| `ImageCms.DIRECTION_PROOF`                          | `ImageCms.Direction.PROOF`                      |
| `ImageFont.LAYOUT_BASIC`                            | `ImageFont.Layout.BASIC`                        |
| `ImageFont.LAYOUT_RAQM`                             | `ImageFont.Layout.RAQM`                         |
| `BlpImagePlugin.BLP_FORMAT_JPEG`                    | `BlpImagePlugin.Format.JPEG`                    |
| `BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED`          | `BlpImagePlugin.Encoding.UNCOMPRESSED`          |
| `BlpImagePlugin.BLP_ENCODING_DXT`                   | `BlpImagePlugin.Encoding.DXT`                   |
| `BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA` | `BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA` |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1`            | `BlpImagePlugin.AlphaEncoding.DXT1`             |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3`            | `BlpImagePlugin.AlphaEncoding.DXT3`             |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5`            | `BlpImagePlugin.AlphaEncoding.DXT5`             |
| `FtexImagePlugin.FORMAT_DXT1`                       | `FtexImagePlugin.Format.DXT1`                   |
| `FtexImagePlugin.FORMAT_UNCOMPRESSED`               | `FtexImagePlugin.Format.UNCOMPRESSED`           |
| `PngImagePlugin.APNG_DISPOSE_OP_NONE`               | `PngImagePlugin.Disposal.OP_NONE`               |
| `PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND`         | `PngImagePlugin.Disposal.OP_BACKGROUND`         |
| `PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS`           | `PngImagePlugin.Disposal.OP_PREVIOUS`           |
| `PngImagePlugin.APNG_BLEND_OP_SOURCE`               | `PngImagePlugin.Blend.OP_SOURCE`                |
| `PngImagePlugin.APNG_BLEND_OP_OVER`                 | `PngImagePlugin.Blend.OP_OVER`                  |

### FitsStubImagePlugin

The stub image plugin `FitsStubImagePlugin` has been removed. FITS images can be read without a handler through `~PIL.FitsImagePlugin` instead.

#### Font size and offset methods

Several functions for computing the size and offset of rendered text have been removed:

| Removed                                                     | Use instead                                                                                        |
| ----------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |
| `FreeTypeFont.getsize()` and `FreeTypeFont.getoffset()`     | :py\`.FreeTypeFont.getbbox\` and :py\`.FreeTypeFont.getlength\`                                    |
| `FreeTypeFont.getsize_multiline()`                          | :py\`.ImageDraw.multiline\_textbbox\`                                                              |
| `ImageFont.getsize()`                                       | :py\`.ImageFont.getbbox\` and :py\`.ImageFont.getlength\`                                          |
| `TransposedFont.getsize()`                                  | :py\`.TransposedFont.getbbox\` and :py\`.TransposedFont.getlength\`                                |
| `ImageDraw.textsize()` and `ImageDraw.multiline_textsize()` | :py\`.ImageDraw.textbbox\`, :py\`.ImageDraw.textlength\` and :py\`.ImageDraw.multiline\_textbbox\` |
| `ImageDraw2.Draw.textsize()`                                | :py\`.ImageDraw2.Draw.textbbox\` and :py\`.ImageDraw2.Draw.textlength\`                            |

### FreeTypeFont.getmask2 fill parameter

The undocumented `fill` parameter of :py\`.FreeTypeFont.getmask2\` has been removed.

### PhotoImage.paste box parameter

The `box` parameter was unused and has been removed.

### PyQt5 and PySide2

[Qt 5 reached end-of-life](https://www.qt.io/blog/qt-5.15-released) on 2020-12-08 for open-source users (and will reach EOL on 2023-12-08 for commercial licence holders).

Support for PyQt5 and PySide2 has been removed from `ImageQt`. Upgrade to [PyQt6](https://www.riverbankcomputing.com/static/Docs/PyQt6/) or [PySide6](https://doc.qt.io/qtforpython-6/) instead.

### Image.coerce\_e

This undocumented method has been removed.

## Deprecations

### PyAccess and Image.USE\_CFFI\_ACCESS

Since Pillow's C API is now faster than PyAccess on PyPy, :py`!PyAccess` has been deprecated and will be removed in Pillow 11.0.0 (2024-10-15). Pillow's C API will now be used by default on PyPy instead.

`Image.USE_CFFI_ACCESS`, for switching from the C API to PyAccess, is similarly deprecated.

## API Changes

### Added line width parameter to ImageDraw regular\_polygon

An optional line `width` parameter has been added to `ImageDraw.Draw.regular_polygon`.

## API Additions

### Added `alpha_only` argument to `getbbox()`

:py\`\~PIL.Image.Image.getbbox\` now accepts a keyword argument of `alpha_only`. This is an optional flag, defaulting to `True`. If `True` and the image has an alpha channel, trim transparent pixels. Otherwise, trim pixels when all channels are zero.

## Other Changes

### 32-bit wheels

32-bit wheels are no longer provided.

### Support display\_jpeg() in IPython

In addition to `display()` and `display_png`, `display_jpeg()` can now also be used to display images in IPython:

    from PIL import Image
    from IPython.display import display_jpeg
    
    im = Image.new("RGB", (100, 100), (255, 0, 0))
    display_jpeg(im)

### Support reading signed 8-bit TIFF images

TIFF images with signed integer data, 8 bits per sample and a photometric interpretation of BlackIsZero can now be read.

---

10.0.1.md

---

# 10.0.1

## Security

### `2023-4863`: Updated install script and updated wheels

This release provides an updated install script and updated wheels to include libwebp 1.3.2, preventing a potential heap buffer overflow in WebP.

## Other Changes

### Updated tests to pass with latest zlib version

The release of zlib 1.3 caused one of the tests in the Pillow test suite to fail.

---

10.1.0.md

---

# 10.1.0

## API Changes

### Setting image mode

If you attempt to set the mode of an image directly, e.g. `im.mode = "RGBA"`, you will now receive an :py\`AttributeError\`. This is not about removing existing functionality, but instead about raising an explicit error to prevent later consequences. The `convert` method is the correct way to change an image's mode.

### Accept a list in getpixel()

:py\`\~PIL.Image.Image.getpixel\` now accepts a list of coordinates, as well as a tuple. :

    from PIL import Image
    im = Image.new("RGB", (1, 1))
    im.getpixel((0, 0))
    im.getpixel([0, 0])

### BoxBlur and GaussianBlur allow for different x and y radii

:py\`\~PIL.ImageFilter.BoxBlur\` and :py\`\~PIL.ImageFilter.GaussianBlur\` now allow a sequence of x and y radii to be specified, rather than a single number for both dimensions. :

    from PIL import ImageFilter
    ImageFilter.BoxBlur((2, 5))
    ImageFilter.GaussianBlur((2, 5))

## API Additions

### EpsImagePlugin.gs\_binary

`EpsImagePlugin.gs_windows_binary` stores the name of the Ghostscript executable on Windows. `EpsImagePlugin.gs_binary` has now been added for all platforms, and can be used to customise the name of the executable, or disable use entirely through `EpsImagePlugin.gs_binary = False`.

### has\_transparency\_data

Images now have :py\`\~PIL.Image.Image.has\_transparency\_data\` to indicate whether the image has transparency data, whether in the form of an alpha channel, a palette with an alpha channel, or a "transparency" key in the :py\`\~PIL.Image.Image.info\` dictionary.

Even if this attribute is true, the image might still appear solid, if all of the values shown within are opaque.

### ImageOps.cover

Returns a resized version of the image, so that the requested size is covered, while maintaining the original aspect ratio.

See \[relative-resize\](\#relative-resize) for a comparison between this and similar `ImageOps` methods.

### size and font\_size arguments when using default font

Pillow has had a "better than nothing" default font, which can only be drawn at one font size. Now, if FreeType support is available, a version of [Aileron Regular](https://dotcolon.net/font/aileron) is loaded, which can be drawn at chosen font sizes.

The following `size` and `font_size` arguments can now be used to specify a font size for this new builtin font:

    ImageFont.load_default(size=24)
    draw.text((0, 0), "test", font_size=24)
    draw.textlength((0, 0), "test", font_size=24)
    draw.textbbox((0, 0), "test", font_size=24)
    draw.multiline_text((0, 0), "test", font_size=24)
    draw.multiline_textbbox((0, 0), "test", font_size=24)

## Other Changes

### Python 3.12

Pillow 10.0.0 had wheels built against Python 3.12 beta, available as a preview to help others prepare for 3.12, and to ensure Pillow could be used immediately at the release of 3.12.0 final (2023-10-02, `693`).

Pillow 10.1.0 now officially supports Python 3.12.

### Added support for DDS BC5U and 8-bit color indexed images

Support has been added to read BC5U DDS files as RGB images, and PALETTEINDEXED8 DDS files as P mode images.

### Support reading signed 8-bit YCbCr TIFF images

TIFF images with unsigned integer data, 8 bits per sample and a photometric interpretation of YCbCr can now be read.

---

10.2.0.md

---

# 10.2.0

## Security

### ImageFont.getmask: Applied ImageFont.MAX\_STRING\_LENGTH

To protect against potential DOS attacks when using arbitrary strings as text input, Pillow will now raise a :py\`ValueError\` if the number of characters passed into :py\`PIL.ImageFont.ImageFont.getmask\` is over a certain limit, :py\`PIL.ImageFont.MAX\_STRING\_LENGTH\`.

This threshold can be changed by setting :py\`PIL.ImageFont.MAX\_STRING\_LENGTH\`. It can be disabled by setting `ImageFont.MAX_STRING_LENGTH = None`.

A decompression bomb check has also been added to :py\`PIL.ImageFont.ImageFont.getmask\`.

### ImageFont.getmask: Trim glyph size

To protect against potential DOS attacks when using PIL fonts, :py\`PIL.ImageFont.ImageFont\` now trims the size of individual glyphs so that they do not extend beyond the bitmap image.

### `2023-50447`: ImageMath.eval: Restricted environment keys

If an attacker has control over the keys passed to the `environment` argument of :py\`\!PIL.ImageMath.eval\`, they may be able to execute arbitrary code. To prevent this, keys matching the names of builtins and keys containing double underscores will now raise a :py\`ValueError\`.

## Deprecations

### ImageFile.raise\_oserror

`ImageFile.raise_oserror()` has been deprecated and will be removed in Pillow 12.0.0 (2025-10-15). The function is undocumented and is only useful for translating error codes returned by a codec's `decode()` method, which ImageFile already does automatically.

### IptcImageFile helper functions

The functions `IptcImageFile.dump` and `IptcImageFile.i`, and the constant `IptcImageFile.PAD` have been deprecated and will be removed in Pillow 12.0.0 (2025-10-15). These are undocumented helper functions intended for internal use, so there is no replacement. They can each be replaced by a single line of code using builtin functions in Python.

## API Changes

### Zero or negative font size error

When creating a :py\`\~PIL.ImageFont.FreeTypeFont\` instance, either directly or through :py\`\~PIL.ImageFont.truetype\`, if the font size is zero or less, a :py\`ValueError\` will now be raised.

## API Additions

### Added DdsImagePlugin enums

:py\`\~PIL.DdsImagePlugin.DDSD\`, :py\`\~PIL.DdsImagePlugin.DDSCAPS\`, :py\`\~PIL.DdsImagePlugin.DDSCAPS2\`, :py\`\~PIL.DdsImagePlugin.DDPF\`, :py\`\~PIL.DdsImagePlugin.DXGI\_FORMAT\` and :py\`\~PIL.DdsImagePlugin.D3DFMT\` enums have been added to :py\`PIL.DdsImagePlugin\`.

### JPEG RGB color space

When saving JPEG files, `keep_rgb` can now be set to `True`. This will store RGB images in the RGB color space instead of being converted to YCbCr automatically by libjpeg. When this option is enabled, attempting to chroma-subsample RGB images with the `subsampling` option will raise an :py\`OSError\`.

### JPEG restart marker interval

When saving JPEG files, `restart_marker_blocks` and `restart_marker_rows` can now be used to emit restart markers whenever the specified number of MCU blocks or rows have been produced.

### JPEG tables-only streamtype

When saving JPEG files, `streamtype` can now be set to 1, for tables-only. This will output only the quantization and Huffman tables for the image.

## Other Changes

### Added DDS BC4U and DX10 BC1 and BC4 reading

Support has been added to read the BC4U format of DDS images.

Support has also been added to read DX10 BC1 and BC4, whether UNORM or TYPELESS.

### Support arbitrary masks for uncompressed RGB DDS images

All masks are now supported when reading DDS images with uncompressed RGB data, allowing for bit counts other than 24 and 32.

### Saving TIFF tag RowsPerStrip

When saving TIFF images, the TIFF tag RowsPerStrip can now be one of the tags set by the user, rather than always being calculated by Pillow.

### Optimized ImageColor.getrgb and getcolor

The color calculations of :py\`\~PIL.ImageColor.getrgb\` and :py\`\~PIL.ImageColor.getcolor\` are now cached using :py\`functools.lru\_cache\`. Cached calls of `getrgb` are 3.1 - 91.4 times as fast and `getcolor` are 5.1 - 19.6 times as fast.

### Optimized ImageMode.getmode

The lookups made by :py\`\~PIL.ImageMode.getmode\` are now cached using :py\`functools.lru\_cache\` instead of a custom cache. Cached calls are 1.2 times as fast.

### Optimized ImageStat.Stat count and extrema

Calculating the :py\`\~PIL.ImageStat.Stat.count\` and :py\`\~PIL.ImageStat.Stat.extrema\` statistics is now faster. After the histogram is created in `st = ImageStat.Stat(im)`, `st.count` is 3 times as fast on average and `st.extrema` is 12 times as fast on average.

### Encoder errors now report error detail as string

:py\`OSError\` exceptions from image encoders now include a textual description of the error instead of a numeric error code.

### Type hints

Work has begun to add type annotations to Pillow, including:

  - :py`~PIL.ContainerIO`
  - :py`~PIL.FontFile`, :py`~PIL.BdfFontFile` and :py`~PIL.PcfFontFile`
  - :py`~PIL.ImageChops`
  - :py`~PIL.ImageMode`
  - :py`~PIL.ImageSequence`
  - :py`~PIL.ImageTransform`
  - :py`~PIL.TarIO`

---

10.3.0.md

---

# 10.3.0

## Security

### ImageMath eval()

<div class="danger">

<div class="title">

Danger

</div>

`ImageMath.eval()` uses Python's `eval()` function to process the expression string, and carries the security risks of doing so. A direct replacement for this is the new :py\`\~PIL.ImageMath.unsafe\_eval\`, but that carries the same risks. It is not recommended to process expressions without considering this. :py\`\~PIL.ImageMath.lambda\_eval\` is a more secure alternative.

</div>

### `2024-28219`: Fix buffer overflow in `_imagingcms.c`

In `_imagingcms.c`, two `strcpy` calls were able to copy too much data into fixed length strings. This has been fixed by using `strncpy` instead.

## Deprecations

### ImageCms constants and versions() function

A number of constants and a function in :py`.ImageCms` have been deprecated. This includes a table of flags based on LittleCMS version 1 which has been replaced with a new class :py\`.ImageCms.Flags\` based on LittleCMS 2 flags.

| Deprecated                                 | Use instead                                                                                                                            |
| ------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------- |
| `ImageCms.DESCRIPTION`                     | No replacement                                                                                                                         |
| `ImageCms.VERSION`                         | `PIL.__version__`                                                                                                                      |
| `ImageCms.FLAGS["MATRIXINPUT"]`            | :py\`.ImageCms.Flags.CLUT\_POST\_LINEARIZATION\`                                                                                       |
| `ImageCms.FLAGS["MATRIXOUTPUT"]`           | :py\`.ImageCms.Flags.FORCE\_CLUT\`                                                                                                     |
| `ImageCms.FLAGS["MATRIXONLY"]`             | No replacement                                                                                                                         |
| `ImageCms.FLAGS["NOWHITEONWHITEFIXUP"]`    | :py\`.ImageCms.Flags.NOWHITEONWHITEFIXUP\`                                                                                             |
| `ImageCms.FLAGS["NOPRELINEARIZATION"]`     | :py\`.ImageCms.Flags.CLUT\_PRE\_LINEARIZATION\`                                                                                        |
| `ImageCms.FLAGS["GUESSDEVICECLASS"]`       | :py\`.ImageCms.Flags.GUESSDEVICECLASS\`                                                                                                |
| `ImageCms.FLAGS["NOTCACHE"]`               | :py\`.ImageCms.Flags.NOCACHE\`                                                                                                         |
| `ImageCms.FLAGS["NOTPRECALC"]`             | :py\`.ImageCms.Flags.NOOPTIMIZE\`                                                                                                      |
| `ImageCms.FLAGS["NULLTRANSFORM"]`          | :py\`.ImageCms.Flags.NULLTRANSFORM\`                                                                                                   |
| `ImageCms.FLAGS["HIGHRESPRECALC"]`         | :py\`.ImageCms.Flags.HIGHRESPRECALC\`                                                                                                  |
| `ImageCms.FLAGS["LOWRESPRECALC"]`          | :py\`.ImageCms.Flags.LOWRESPRECALC\`                                                                                                   |
| `ImageCms.FLAGS["GAMUTCHECK"]`             | :py\`.ImageCms.Flags.GAMUTCHECK\`                                                                                                      |
| `ImageCms.FLAGS["WHITEBLACKCOMPENSATION"]` | :py\`.ImageCms.Flags.BLACKPOINTCOMPENSATION\`                                                                                          |
| `ImageCms.FLAGS["BLACKPOINTCOMPENSATION"]` | :py\`.ImageCms.Flags.BLACKPOINTCOMPENSATION\`                                                                                          |
| `ImageCms.FLAGS["SOFTPROOFING"]`           | :py\`.ImageCms.Flags.SOFTPROOFING\`                                                                                                    |
| `ImageCms.FLAGS["PRESERVEBLACK"]`          | :py\`.ImageCms.Flags.NONEGATIVES\`                                                                                                     |
| `ImageCms.FLAGS["NODEFAULTRESOURCEDEF"]`   | :py\`.ImageCms.Flags.NODEFAULTRESOURCEDEF\`                                                                                            |
| `ImageCms.FLAGS["GRIDPOINTS"]`             | :py\`.ImageCms.Flags.GRIDPOINTS()\`                                                                                                    |
| `ImageCms.versions()`                      | :py\`PIL.features.version\_module\` with `feature="littlecms2"`, :py\`sys.version\` or :py\`sys.version\_info\`, and `PIL.__version__` |

### ImageMath.eval()

`ImageMath.eval()` has been deprecated. Use :py\`\~PIL.ImageMath.lambda\_eval\` or :py\`\~PIL.ImageMath.unsafe\_eval\` instead. See earlier security notes for more information.

## API Changes

### Added alpha\_quality argument when saving WebP images

When saving WebP images, an `alpha_quality` argument can be passed to the encoder. It is an integer value between 0 to 100, where values other than 100 will provide lossy compression.

### Negative kmeans error

When calling :py\`\~PIL.Image.Image.quantize\`, a negative `kmeans` will now raise a :py\`ValueError\`, unless a palette is supplied to make the value redundant.

### Negative P1-P3 PPM value error

If a P1-P3 PPM image contains a negative value, a :py\`ValueError\` will now be raised.

## API Additions

### Added PerspectiveTransform

:py\`\~PIL.ImageTransform.PerspectiveTransform\` has been added, meaning that all of the :py\`\~PIL.Image.Transform\` values now have a corresponding subclass of :py\`\~PIL.ImageTransform.Transform\`.

## Other Changes

### Portable FloatMap (PFM) images

Support has been added for reading and writing grayscale (Pf format) Portable FloatMap (PFM) files containing `F` data.

### Release GIL when fetching WebP frames

Python's Global Interpreter Lock is now released when fetching WebP frames from the libwebp decoder.

### Type hints

Pillow now has type hints for a large part of its modules, and the package includes a `py.typed` file and the `Typing :: Typed` Trove classifier.

---

10.4.0.md

---

# 10.4.0

## Security

### ImageShow.WindowsViewer.show\_file

If an attacker has control over the `path` passed to `ImageShow.WindowsViewer.show_file()`, they may be able to execute arbitrary shell commands.

To prevent this, a :py\`FileNotFoundError\` will be raised if the `path` does not exist as a file. To provide a consistent experience, the error has been added to all :py\`\~PIL.ImageShow\` viewers.

## Deprecations

### BGR;15, BGR 16 and BGR;24

The experimental BGR;15, BGR;16 and BGR;24 modes have been deprecated.

### Non-image modes in ImageCms

The use in :py`.ImageCms` of input modes and output modes that are not Pillow image modes has been deprecated. Defaulting to "L" or "1" if the mode cannot be mapped is also deprecated.

### Support for LibTIFF earlier than 4

Support for LibTIFF earlier than version 4 has been deprecated. Upgrade to a newer version of LibTIFF instead.

### ImageDraw.getdraw hints parameter

The `hints` parameter in :py\`\~PIL.ImageDraw.getdraw()\` has been deprecated.

## API Additions

### ImageDraw.circle

Added :py\`\~PIL.ImageDraw.ImageDraw.circle\`. It provides the same functionality as :py\`\~PIL.ImageDraw.ImageDraw.ellipse\`, but instead of taking a bounding box, it takes a center point and radius.

## Other Changes

### Python 3.13 beta

To help others prepare for Python 3.13, wheels have been built against the 3.13 beta as a preview. This is not official support for Python 3.13, but simply an opportunity for users to test how Pillow works with the beta and report any problems.

---

11.0.0.md

---

# 11.0.0

## Backwards Incompatible Changes

### Python 3.8

Pillow has dropped support for Python 3.8, which reached end-of-life in October 2024.

### Python 3.12 on macOS \<= 10.12

The latest version of Python 3.12 only supports macOS versions 10.13 and later, and so Pillow has also updated the deployment target for its prebuilt Python 3.12 wheels.

### PSFile

The :py\`\!PSFile\` class was removed in Pillow 11 (2024-10-15). This class was only made as a helper to be used internally, so there is no replacement. If you need this functionality though, it is a very short class that can easily be recreated in your own code.

#### PyAccess and Image.USE\_CFFI\_ACCESS

Since Pillow's C API is now faster than PyAccess on PyPy, `PyAccess` has been removed. Pillow's C API will now be used on PyPy instead.

`Image.USE_CFFI_ACCESS`, for switching from the C API to PyAccess, was similarly removed.

### TiffImagePlugin IFD\_LEGACY\_API

An unused setting, `TiffImagePlugin.IFD_LEGACY_API`, has been removed.

### WebP 0.4

Support for WebP 0.4 and earlier has been removed; WebP 0.5 is the minimum supported.

## Deprecations

### FreeType 2.9.0

<div class="deprecated">

11.0.0

</div>

Support for FreeType 2.9.0 is deprecated and will be removed in Pillow 12.0.0 (2025-10-15), when FreeType 2.9.1 will be the minimum supported.

We recommend upgrading to at least FreeType [2.10.4](https://sourceforge.net/projects/freetype/files/freetype2/2.10.4/), which fixed a severe vulnerability introduced in FreeType 2.6 (`2020-15999`).

### Get internal pointers to objects

<div class="deprecated">

11.0.0

</div>

`Image.core.ImagingCore.id` and `Image.core.ImagingCore.unsafe_ptrs` have been deprecated and will be removed in Pillow 12 (2025-10-15). They were used for obtaining raw pointers to `ImagingCore` internals. To interact with C code, you can use `Image.Image.getim()`, which returns a `Capsule` object.

### ICNS (width, height, scale) sizes

<div class="deprecated">

11.0.0

</div>

Setting an ICNS image size to `(width, height, scale)` before loading has been deprecated. Instead, `load(scale)` can be used.

### Image isImageType()

<div class="deprecated">

11.0.0

</div>

`Image.isImageType(im)` has been deprecated. Use `isinstance(im, Image.Image)` instead.

### ImageMath.lambda\_eval and ImageMath.unsafe\_eval options parameter

<div class="deprecated">

11.0.0

</div>

The `options` parameter in :py\`\~PIL.ImageMath.lambda\_eval()<span class="title-ref"> and :py</span>\~PIL.ImageMath.unsafe\_eval()\` has been deprecated. One or more keyword arguments can be used instead.

### JpegImageFile.huffman\_ac and JpegImageFile.huffman\_dc

<div class="deprecated">

11.0.0

</div>

The `huffman_ac` and `huffman_dc` dictionaries on JPEG images were unused. They have been deprecated, and will be removed in Pillow 12 (2025-10-15).

### Specific WebP Feature Checks

<div class="deprecated">

11.0.0

</div>

`features.check("transp_webp")`, `features.check("webp_mux")` and `features.check("webp_anim")` are now deprecated. They will always return `True` if the WebP module is installed, until they are removed in Pillow 12.0.0 (2025-10-15).

## API Changes

### Default resampling filter for I;16\* image modes

The default resampling filter for I;16, I;16L, I;16B and I;16N has been changed from `Image.NEAREST` to `Image.BICUBIC`, to match the majority of modes.

## API Additions

### Writing XMP bytes to JPEG and MPO

XMP data can now be saved to JPEG files using an `xmp` argument:

    im.save("out.jpg", xmp=b"test")

The data can also be set through :py\`\~PIL.Image.Image.info\`, for use when saving either JPEG or MPO images:

    im.info["xmp"] = b"test"
    im.save("out.jpg")

## Other Changes

### Python 3.13

Pillow 10.4.0 had wheels built against Python 3.13 beta, available as a preview to help others prepare for 3.13, and to ensure Pillow could be used immediately at the release of 3.13.0 final (2024-10-07, `719`).

Pillow 11.0.0 now officially supports Python 3.13.

Support has also been added for the experimental free-threaded mode of `703`.

Python 3.13 only supports macOS versions 10.13 and later.

### C-level Flags

Some compiling flags like `WITH_THREADING`, `WITH_IMAGECHOPS`, and other `WITH_*` were removed. These flags were not available through the build system, but they could be edited in the C source.

---

2.3.1.md

---

# 2.3.1

## Security

These issues were reported in [Debian bug \#737059](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=737059).

### `2014-1932`: Fix insecure use of :py\`tempfile.mktemp\`

The (1) `load_djpeg` function in `JpegImagePlugin.py`, (2) Ghostscript function in `EpsImagePlugin.py`, (3) `load` function in `IptcImagePlugin.py`, and (4) `_copy` function in `Image.py` in Pillow before 2.3.1 do not properly create temporary files, which allow local users to overwrite arbitrary files and obtain sensitive information via a symlink attack on the temporary file.

### `2014-1933`: Fix insecure use of :py\`tempfile.mktemp\`

The (1) `JpegImagePlugin.py` and (2) `EpsImagePlugin.py` scripts in Pillow before 2.3.1 uses the names of temporary files on the command line, which makes it easier for local users to conduct symlink attacks by listing the processes.

---

2.3.2.md

---

# 2.3.2

## Security

### `2014-3589`: Fix DOS attack

`PIL/IcnsImagePlugin.py` in Pillow before 2.3.2 and 2.5.x before 2.5.2 allows remote attackers to cause a denial of service via a crafted block size.

Found and reported by Andrew Drake of [Dropbox](https://www.dropbox.com/).

---

2.5.2.md

---

# 2.5.2

## Security

### `2014-3589`: Fix DOS attack

`PIL/IcnsImagePlugin.py` in Pillow before 2.3.2 and 2.5.x before 2.5.2 allows remote attackers to cause a denial of service via a crafted block size.

Found and reported by Andrew Drake of [Dropbox](https://www.dropbox.com/).

---

2.6.0.md

---

# 2.6.0

## Security

### `2014-3589`: Fix DOS attack

`PIL/IcnsImagePlugin.py` in Pillow before 2.3.2 and 2.5.x before 2.5.2 allows remote attackers to cause a denial of service via a crafted block size.

Found and reported by Andrew Drake of [Dropbox](https://www.dropbox.com/).

---

2.7.0.md

---

# 2.7.0

## Sane Plugin

The Sane plugin has now been split into its own repo: <https://github.com/python-pillow/Sane> .

## Png text chunk size limits

To prevent potential denial of service attacks using compressed text chunks, there are now limits to the decompressed size of text chunks decoded from PNG images. If the limits are exceeded when opening a PNG image a :py\`ValueError\` will be raised.

Individual text chunks are limited to :py\`PIL.PngImagePlugin.MAX\_TEXT\_CHUNK\`, set to 1MB by default. The total decompressed size of all text chunks is limited to :py\`PIL.PngImagePlugin.MAX\_TEXT\_MEMORY\`, which defaults to 64MB. These values can be changed prior to opening PNG images if you know that there are large text blocks that are desired.

## Image resizing filters

Image resizing methods :py\`\~PIL.Image.Image.resize\` and :py\`\~PIL.Image.Image.thumbnail\` take a `resample` argument, which tells which filter should be used for resampling. Possible values are: `NEAREST`, `BILINEAR`, `BICUBIC` and `ANTIALIAS`. Almost all of them were changed in this version.

### Bicubic and bilinear downscaling

From the beginning `BILINEAR` and `BICUBIC` filters were based on affine transformations and used a fixed number of pixels from the source image for every destination pixel (2x2 pixels for `BILINEAR` and 4x4 for `BICUBIC`). This gave an unsatisfactory result for downscaling. At the same time, a high quality convolutions-based algorithm with flexible kernel was used for `ANTIALIAS` filter.

Starting from Pillow 2.7.0, a high quality convolutions-based algorithm is used for all of these three filters.

If you have previously used any tricks to maintain quality when downscaling with `BILINEAR` and `BICUBIC` filters (for example, reducing within several steps), they are unnecessary now.

### Antialias renamed to Lanczos

A new `LANCZOS` constant was added instead of `ANTIALIAS`.

When `ANTIALIAS` was initially added, it was the only high-quality filter based on convolutions. It's name was supposed to reflect this. Starting from Pillow 2.7.0 all resize method are based on convolutions. All of them are antialias from now on. And the real name of the `ANTIALIAS` filter is Lanczos filter.

The `ANTIALIAS` constant is left for backward compatibility and is an alias for `LANCZOS`.

### Lanczos upscaling quality

The image upscaling quality with `LANCZOS` filter was almost the same as `BILINEAR` due to a bug. This has been fixed.

### Bicubic upscaling quality

The `BICUBIC` filter for affine transformations produced sharp, slightly pixelated image for upscaling. Bicubic for convolutions is more soft.

### Resize performance

In most cases, convolution is more a expensive algorithm for downscaling because it takes into account all the pixels of source image. Therefore `BILINEAR` and `BICUBIC` filters' performance can be lower than before. On the other hand the quality of `BILINEAR` and `BICUBIC` was close to `NEAREST`. So if such quality is suitable for your tasks you can switch to `NEAREST` filter for downscaling, which will give a huge improvement in performance.

At the same time performance of convolution resampling for downscaling has been improved by around a factor of two compared to the previous version. The upscaling performance of the `LANCZOS` filter has remained the same. For `BILINEAR` filter it has improved by 1.5 times and for `BICUBIC` by four times.

### Default filter for thumbnails

In Pillow 2.5 the default filter for :py\`\~PIL.Image.Image.thumbnail\` was changed from `NEAREST` to `ANTIALIAS`. Antialias was chosen because all the other filters gave poor quality for reduction. Starting from Pillow 2.7.0, `ANTIALIAS` has been replaced with `BICUBIC`, because it's faster and `ANTIALIAS` doesn't give any advantages after downscaling with libjpeg, which uses supersampling internally, not convolutions.

### Image transposition

A new method `TRANSPOSE` has been added for the :py\`\~PIL.Image.Image.transpose\` operation in addition to `FLIP_LEFT_RIGHT`, `FLIP_TOP_BOTTOM`, `ROTATE_90`, `ROTATE_180`, `ROTATE_270`. `TRANSPOSE` is an algebra transpose, with an image reflected across its main diagonal.

The speed of `ROTATE_90`, `ROTATE_270` and `TRANSPOSE` has been significantly improved for large images which don't fit in the processor cache.

## Gaussian blur and unsharp mask

The :py\`\~PIL.ImageFilter.GaussianBlur\` implementation has been replaced with a sequential application of box filters. The new implementation is based on "Theoretical foundations of Gaussian convolution by extended box filtering" from the Mathematical Image Analysis Group. As :py\`\~PIL.ImageFilter.UnsharpMask\` implementations use Gaussian blur internally, all changes from this chapter are also applicable to it.

### Blur radius

There was an error in the previous version of Pillow, where blur radius (the standard deviation of Gaussian) actually meant blur diameter. For example, to blur an image with actual radius 5 you were forced to use value 10. This has been fixed. Now the meaning of the radius is the same as in other software.

If you used a Gaussian blur with some radius value, you need to divide this value by two.

### Blur performance

Box filter computation time is constant relative to the radius and depends on source image size only. Because the new Gaussian blur implementation is based on box filter, its computation time also doesn't depend on the blur radius.

For example, previously, if the execution time for a given test image was 1 second for radius 1, 3.6 seconds for radius 10 and 17 seconds for 50, now blur with any radius on same image is executed for 0.2 seconds.

### Blur quality

The previous implementation takes into account only source pixels within 2 \* standard deviation radius for every destination pixel. This was not enough, so the quality was worse compared to other Gaussian blur software.

The new implementation does not have this drawback.

## TIFF Parameter Changes

Several kwarg parameters for saving TIFF images were previously specified as strings with included spaces (e.g. 'x resolution'). This was difficult to use as kwargs without constructing and passing a dictionary. These parameters now use the underscore character instead of space. (e.g. 'x\_resolution')

---

2.8.0.md

---

# 2.8.0

## Open HTTP response objects with Image.open

HTTP response objects returned from `urllib2.urlopen(url)` or `requests.get(url, stream=True).raw` are 'file-like' but do not support `.seek()` operations. As a result PIL was unable to open them as images, requiring a wrap in `cStringIO` or `BytesIO`.

Now new functionality has been added to `Image.open()` by way of an `.seek(0)` check and catch on exception :py\`AttributeError\` or :py\`io.UnsupportedOperation\`. If this is caught we attempt to wrap the object using `io.BytesIO` (which will only work on buffer-file-like objects).

This allows opening of files using both `urllib2` and `requests`, e.g.:

    Image.open(urllib2.urlopen(url))
    Image.open(requests.get(url, stream=True).raw)

If the response uses content-encoding (compression, either gzip or deflate) then this will fail as both the urllib2 and requests raw file object will produce compressed data in that case. Using Content-Encoding on images is rather non-sensical as most images are already compressed, but it can still happen.

For requests the work-around is to set the decode\_content attribute on the raw object to True:

    response = requests.get(url, stream=True)
    response.raw.decode_content = True
    image = Image.open(response.raw)

---

3.0.0.md

---

# 3.0.0

## Backwards Incompatible Changes

Several methods that have been marked as deprecated for many releases have been removed in this release:

  - `Image.tostring()`
  - `Image.fromstring()`
  - `Image.offset()`
  - `ImageDraw.setink()`
  - `ImageDraw.setfill()`
  - The `ImageFileIO` module
  - The `ImageFont.FreeTypeFont` and `ImageFont.truetype` `file` keyword arg
  - The `ImagePalette` private `_make` functions
  - `ImageWin.fromstring()`
  - `ImageWin.tostring()`

## Other Changes

### Saving Multipage Images

There is now support for saving multipage images in the `GIF` and `PDF` formats. To enable this functionality, pass in `save_all=True` as a keyword argument to the save:

    im.save('test.pdf', save_all=True)

### Tiff ImageFileDirectory Rewrite

The Tiff ImageFileDirectory metadata code has been rewritten. Where previously it returned a somewhat arbitrary set of values and tuples, it now returns bare values where appropriate and tuples when the metadata item is a sequence or collection.

The original metadata is still available in the TiffImage.tags, the new values are available in the TiffImage.tags\_v2 member. The old structures will be deprecated at some point in the future. When saving Tiff metadata, new code should use the TiffImagePlugin.ImageFileDirectory\_v2 class.

### LibJpeg and Zlib are required by default

The external dependencies on libjpeg and zlib are now required by default. If the headers or libraries are not found, then installation will abort with an error. This behaviour can be disabled with the `--disable-libjpeg` and `--disable-zlib` flags.

---

3.1.0.md

---

# 3.1.0

## ImageDraw arc, chord and pieslice can now use floats

There is no longer a need to ensure that the start and end arguments for `arc`, `chord` and `pieslice` are integers.

Note that these numbers are not simply rounded internally, but are actually utilised in the drawing process.

## Consistent multiline text spacing

When using the `ImageDraw` multiline methods, the spacing between lines was inconsistent, based on the combination on ascenders and descenders.

This has now been fixed, so that lines are offset by their baselines, not the absolute height of each line.

There is also now a default spacing of 4px between lines.

## Exif, Jpeg and Tiff Metadata

There were major changes in the TIFF ImageFileDirectory support in Pillow 3.0 that led to a number of regressions. Some of them have been fixed in Pillow 3.1, and some of them have been extended to have different behavior.

### TiffImagePlugin.IFDRational

Pillow 3.0 changed rational metadata to use a float. In Pillow 3.1, this has changed to allow the expression of 0/0 as a valid piece of rational metadata to reflect usage in the wild.

Rational metadata is now encapsulated in an `IFDRational` instance. This class extends the Rational class to allow a denominator of 0. It compares as a float or a number, but does allow access to the raw numerator and denominator values through attributes.

When used in a `ImageFileDirectory_v1`, a 2 item tuple is returned of the numerator and denominator, as was done previously.

This class should be used when adding a rational value to an ImageFileDirectory for saving to image metadata.

### JpegImagePlugin.\_getexif

In Pillow 3.0, the dictionary returned from the private, experimental, but generally widely used `_getexif` function changed to reflect the ImageFileDirectory\_v2 format, without a fallback to the previous format.

In Pillow 3.1, `_getexif` now returns a dictionary compatible with Pillow 2.9 and earlier, built with `ImageFileDirectory_v1` instances. Additionally, any single item tuples have been unwrapped and return a bare element.

The format returned by Pillow 3.0 has been abandoned. A more fully featured interface for EXIF is anticipated in a future release.

### Out of Spec Metadata

In Pillow 3.0 and 3.1, images that contain metadata that is internally consistent, but not in agreement with the TIFF spec, may cause an exception when reading the metadata. This can happen when a tag that is specified to have a single value is stored with an array of values.

It is anticipated that this behavior will change in future releases.

---

3.1.1.md

---

# 3.1.1

## Security

### `2016-0740`: Buffer overflow in `TiffDecode.c`

Pillow 3.1.0 and earlier when linked against libtiff \>= 4.0.0 on x64 may overflow a buffer when reading a specially crafted tiff file.

Specifically, libtiff \>= 4.0.0 changed the return type of `TIFFScanlineSize` from `int32` to machine dependent `int32|64`. If the scanline is sized so that it overflows an `int32`, it may be interpreted as a negative number, which will then pass the size check in `TiffDecode.c` line 236. To do this, the logical scanline size has to be \> 2gb, and for the test file, the allocated buffer size is 64k against a roughly 4gb scan line size. Any image data over 64k is written over the heap, causing a segfault.

This issue was found by security researcher FourOne.

### `2016-0775`: Buffer overflow in `FliDecode.c`

In all versions of Pillow, dating back at least to the last PIL 1.1.7 release, FliDecode.c has a buffer overflow error (`2016-0775`).

Around line 192:

`` `c   case 16:       /* COPY chunk */       for (y = 0; y < state->ysize; y++) {           UINT8* buf = (UINT8*) im->image[y];           memcpy(buf+x, data, state->xsize);           data += state->xsize;       }       break;   The memcpy has error where ``x`is added to the target buffer`<span class="title-ref"> address. </span><span class="title-ref">X</span><span class="title-ref"> is used in several internal temporary variable roles, but can take a value up to the width of the image. </span><span class="title-ref">Im-\>image\[y\]</span><span class="title-ref"> is a set of row pointers to segments of memory that are the size of the row. At the max </span><span class="title-ref">y</span>\`, this will write the contents of the line off the end of the memory buffer, causing a segfault.

This issue was found by Alyssa Besseling at Atlassian.

### `2016-2533`: Buffer overflow in `PcdDecode.c`

In all versions of Pillow, dating back at least to the last PIL 1.1.7 release, `PcdDecode.c` has a buffer overflow error (`2016-2533`).

The `state.buffer` for `PcdDecode.c` is allocated based on a 3 bytes per pixel sizing, where `PcdDecode.c` wrote into the buffer assuming 4 bytes per pixel. This writes 768 bytes beyond the end of the buffer into other Python object storage. In some cases, this causes a segfault, in others an internal Python malloc error.

### Integer overflow in `Resample.c`

If a large value was passed into the new size for an image, it is possible to overflow an `int32` value passed into malloc.

`` `c     kk = malloc(xsize * kmax * sizeof(float));     ...     xbounds = malloc(xsize * 2 * sizeof(int)); ``xsize`is trusted user input. These multiplications can overflow,`<span class="title-ref"> leading the </span><span class="title-ref">malloc</span>\`'d buffer to be undersized. These allocations are followed by a loop that writes out of bounds. This can lead to corruption on the heap of the Python process with attacker controlled float data.

This issue was found by Ned Williamson.

---

3.1.2.md

---

# 3.1.2

## Security

### `2016-3076`: Buffer overflow in Jpeg2KEncode.c

Pillow between 2.5.0 and 3.1.1 may overflow a buffer when writing large Jpeg2000 files, allowing for code execution or other memory corruption.

This occurs specifically in the function `j2k_encode_entry`, at the line:

`` `c     state->buffer = malloc (tile_width * tile_height * components * prec / 8);   This vulnerability requires a particular value for ``height \* width`  `<span class="title-ref"> such that </span><span class="title-ref">height \* width \* components \* precision</span><span class="title-ref"> overflows, at which point the malloc will be for a smaller value than expected. The buffer that is allocated will be </span><span class="title-ref">((height \* width \* components \* precision) mod (2^31) / 8)</span><span class="title-ref">, where components is 1-4 and precision is either 8 or 16. Common values would be 4 components at precision 8 for a standard </span><span class="title-ref">RGBA</span>\` image.

The unpackers then split an image that is laid out:

    RGBARGBARGBA....

into:

    RRR.
    GGG.
    BBB.
    AAA.

If this buffer is smaller than expected, the jpeg2k unpacker functions will write outside the allocation and onto the heap, corrupting memory.

This issue was found by Alyssa Besseling at Atlassian.

---

3.2.0.md

---

# 3.2.0

## New DDS and FTEX Image Plugins

The `DdsImagePlugin` reading DXT1 and DXT5 encoded `.dds` images was added. DXT3 images are not currently supported.

The `FtexImagePlugin` reads textures used for 3D objects in Independence War 2: Edge Of Chaos. The plugin reads a single texture per file, in the `.ftc` (compressed) and `.ftu` (uncompressed) formats.

## Updates to the GbrImagePlugin

The `GbrImagePlugin` (GIMP brush format) has been updated to fix support for version 1 files and add support for version 2 files.

## Passthrough Parameters for ImageDraw.text

`ImageDraw.multiline_text` and `ImageDraw.multiline_size` take extra spacing parameters above what are used in `ImageDraw.text` and `ImageDraw.size`. These parameters can now be passed into `ImageDraw.text` and `ImageDraw.size` and they will be passed through to the corresponding multiline functions.

## ImageSequence.Iterator changes

`ImageSequence.Iterator` is now an actual iterator implementing the Iterator protocol. It is also now possible to seek to the first image of the file when using direct indexing.

---

3.3.0.md

---

# 3.3.0

## Libimagequant support

There is now support for using libimagequant as a higher quality quantization option in `Image.quantize()` on Unix-like platforms. This support requires building Pillow from source against libimagequant. We cannot distribute binaries due to licensing differences.

## New Setup.py options

There are two new options to control the `build_ext` task in `setup.py`:

  - `--debug` dumps all of the directories and files that are checked when searching for libraries or headers when building the extensions.
  - `--disable-platform-guessing` removes many of the directories that are checked for libraries and headers for build systems or cross compilers that specify that information in via environment variables.

## Resizing

Image resampling for 8-bit per channel images was rewritten using only integer computings. This is faster on most platforms and doesn't introduce precision errors on the wide range of scales. With other performance improvements, this makes resampling 60% faster on average.

Color calculation for images in the `LA` mode on semitransparent pixels was fixed.

## Rotation

Rotation for angles divisible by 90 degrees now always uses transposition. This greatly improves both quality and performance in this case. Also, the bug with wrong image size calculation when rotating by 90 degrees was fixed.

## Image Metadata

The return type for binary data in version 2 Exif and Tiff metadata has been changed from a tuple of integers to bytes. This is a change from the behavior since 3.0.0.

---

3.3.2.md

---

# 3.3.2

## Security

### Integer overflow in Map.c

Pillow prior to 3.3.2 may experience integer overflow errors in map.c when reading specially crafted image files. This may lead to memory disclosure or corruption.

Specifically, when parameters from the image are passed into `Image.core.map_buffer`, the size of the image was calculated with `xsize` \* `ysize` \* `bytes_per_pixel`. This will overflow if the result is larger than SIZE\_MAX. This is possible on a 32-bit system.

Furthermore this `size` value was added to a potentially attacker provided `offset` value and compared to the size of the buffer without checking for overflow or negative values.

These values were then used for creating pointers, at which point Pillow could read the memory and include it in other images. The image was marked readonly, so Pillow would not ordinarily write to that memory without duplicating the image first.

This issue was found by Cris Neckar at Divergent Security.

### Sign Extension in Storage.c

Pillow prior to 3.3.2 and PIL 1.1.7 (at least) do not check for negative image sizes in `ImagingNew` in `Storage.c`. A negative image size can lead to a smaller allocation than expected, leading to arbitrary writes.

This issue was found by Cris Neckar at Divergent Security.

---

3.4.0.md

---

# 3.4.0

## Backwards Incompatible Changes

### Image.core.open\_ppm removed

The nominally private/debugging function `Image.core.open_ppm` has been removed. If you were using this function, please use `Image.open` instead.

## Deprecations

### Deprecation Warning when Saving JPEGs

JPEG images cannot contain an alpha channel. Pillow prior to 3.4.0 silently drops the alpha channel. With this release Pillow will now issue a :py\`DeprecationWarning\` when attempting to save a `RGBA` mode image as a JPEG. This will become an error in Pillow 4.2.

## API Additions

### New resizing filters

Two new filters available for `Image.resize()` and `Image.thumbnail()` functions: `BOX` and `HAMMING`. `BOX` is the high-performance filter with two times shorter window than `BILINEAR`. It can be used for image reduction 3 and more times and produces a sharper result than `BILINEAR`.

`HAMMING` filter has the same performance as `BILINEAR` filter while providing the image downscaling quality comparable to `BICUBIC`. Both new filters don't show good quality for the image upscaling.

### New DDS Decoders

Pillow can now decode DXT3 images, as well as the previously supported DXT1 and DXT5 formats. All three formats are now decoded in C code for better performance.

### Append images to GIF

Additional frames can now be appended when saving a GIF file, through the `append_images` argument. The new frames are passed in as a list of images, which may be have multiple frames themselves.

Note that the `append_images` argument is only used if `save_all` is also in effect, e.g.:

    im.save(out, save_all=True, append_images=[im1, im2, ...])

### Save multiple frame TIFF

Multiple frames can now be saved in a TIFF file by using the `save_all` option. e.g.:

    im.save("filename.tiff", format="TIFF", save_all=True)

---

4.0.0.md

---

# 4.0.0

## Python 2.6 and 3.2 Dropped

Pillow 4.0 no longer supports Python 2.6 and 3.2. We will not be creating binaries, testing, or retaining compatibility with these releases. This release removes some workarounds for those Python releases, so the final working version of Pillow on 2.6 or 3.2 is 3.4.2.

## Support added for Python 3.6

Pillow 4.0 supports Python 3.6.

## OleFileIO.py

`OleFileIO.py` has been removed as a vendored file and is now installed from the upstream `olefile` PyPI package. All internal dependencies are redirected to the olefile package. Direct accesses to `PIL.OlefileIO` raises a deprecation warning, then patches the upstream olefile into `sys.modules` in its place.

## SGI image save

It is now possible to save images in modes `L`, `RGB`, and `RGBA` to the uncompressed SGI image format.

## Zero sized images

Pillow 3.4.0 removed support for creating images with (0,0) size. This has been reenabled, restoring pre 3.4 behavior.

## Internal handles\_eof flag

The `handles_eof flag` for decoding images has been removed, as there were no internal users of the flag. Anyone maintaining image decoders outside of the Pillow source tree should consider using the cleanup function pointers instead.

## Image.core.stretch removed

The stretch function on the core image object has been removed. This used to be for enlarging the image, but has been aliased to resize recently.

---

4.1.0.md

---

# 4.1.0

## Deprecations

Several deprecated items have been removed.

  - Support for spaces in tiff kwargs in the parameters for 'x resolution', 'y resolution', 'resolution unit', and 'date time' has been removed. Underscores should be used instead.
  - The methods `PIL.ImageDraw.ImageDraw.setink`, `PIL.ImageDraw.ImageDraw.setfill`, and `PIL.ImageDraw.ImageDraw.setfont` have been removed.

## Other Changes

### Closing Files When Opening Images

The file handling when opening images has been overhauled. Previously, Pillow would attempt to close some, but not all image formats after loading the image data. Now, the following behavior is specified:

  - For images where an open file is passed in, it is the responsibility of the calling code to close the file.
  - For images where Pillow opens the file and the file is known to have only one frame, the file is closed after loading.
  - If the file has more than one frame, or if it can't be determined, then the file is left open to permit seeking to subsequent frames. It will be closed, eventually, in the `close` or `__del__` methods.
  - If the image is memory mapped, then we can't close the mapping to the underlying file until we are done with the image. The mapping will be closed in the `close` or `__del__` method.

### Changes to GIF Handling When Saving

The :py\`PIL.GifImagePlugin\` code has been refactored to fix the flow when saving images. There are two external changes that arise from this:

  - An :py\`PIL.ImagePalette.ImagePalette\` object is now accepted as a specified palette argument in :py\`PIL.Image.Image.save()\`.
  - The image to be saved is no longer modified in place by any of the operations of the save function. Previously it was modified when optimizing the image palette.

This refactor fixed some bugs with palette handling when saving multiple frame GIFs.

### New Method: Image.remap\_palette

The method :py\`PIL.Image.Image.remap\_palette()\` has been added. This method was hoisted from the GifImagePlugin code used to optimize the palette.

### Added Decoder Registry and Support for Python Based Decoders

There is now a decoder registry similar to the image plugin registries. Image plugins can register a decoder, and it will be called when the decoding is requested. This allows for the creation of pure Python decoders. While the Python decoders will not be as fast as their C based counterparts, they may be easier and quicker to develop or safer to run.

### Tests

Many tests have been added, including correctness tests for image formats that have been previously untested.

We are now running automated tests in Docker containers against more Linux versions than are provided on Travis CI, which is currently Ubuntu 14.04 x64. This Pillow release is tested on 64-bit Alpine, Arch, Ubuntu 12.04 and 16.04, and 32-bit Debian Stretch and Ubuntu 14.04. This also covers a wider range of dependency versions than are provided on Travis natively.

---

4.1.1.md

---

# 4.1.1

## Fix Regression with reading DPI from EXIF data

Some JPEG images don't contain DPI information in the image metadata, but do contain it in the EXIF data. A patch was added in 4.1.0 to read from the EXIF data, but it did not accept all possible types that could be included there. This fix adds the ability to read ints as well as rational values.

## Incompatibility between 3.6.0 and 3.6.1

CPython 3.6.1 added a new symbol, PySlice\_GetIndicesEx, which was not present in 3.6.0. This had the effect of causing binaries compiled on CPython 3.6.1 to not work on installations of C-Python 3.6.0. This fix undefines PySlice\_GetIndicesEx if it exists to restore compatibility with both 3.6.0 and 3.6.1. See <https://bugs.python.org/issue29943> for more details.

---

4.2.0.md

---

# 4.2.0

## Backwards Incompatible Changes

### Several deprecated items have been removed

  - The methods `PIL.ImageWin.Dib.fromstring`, `PIL.ImageWin.Dib.tostring` and `PIL.TiffImagePlugin.ImageFileDirectory_v2.as_dict` have been removed.
  - Before Pillow 4.2.0, attempting to save an RGBA image as JPEG would discard the alpha channel. From Pillow 3.4.0, a deprecation warning was shown. From Pillow 4.2.0, the deprecation warning is removed and an :py\`IOError\` is raised.

### Removed Core Image Function

The unused function `Image.core.new_array` was removed. This is an internal function that should not have been used by user code, but it was accessible from the python layer.

## Other Changes

### Added Complex Text Rendering

Pillow now supports complex text rendering for scripts requiring glyph composition and bidirectional flow. This optional feature adds three dependencies: harfbuzz, fribidi, and raqm. See the \[install documentation \<../installation\>\](install documentation \<../installation\>.md) for further details. This feature is tested and works on Unix and Mac, but has not yet been built on Windows platforms.

### New Optional Parameters

  -   - py\`PIL.ImageDraw.floodfill\` has a new optional parameter
    
    threshold. This specifies a tolerance for the color to replace with the flood fill.

  - The TIFF and PDF image writers now support the `append_images` optional parameter for specifying additional images to create multipage outputs.

### New DecompressionBomb Warning

:py\`PIL.Image.Image.crop\` now may raise a DecompressionBomb warning if the crop region enlarges the image over the threshold specified by :py\`PIL.Image.MAX\_IMAGE\_PIXELS\`.

---

4.2.1.md

---

# 4.2.1

There are no functional changes in this release.

## Fixed Windows PyPy Build

A change in the 4.2.0 cycle broke the Windows PyPy build. This has been fixed, and PyPy is now part of the Windows CI matrix.

---

4.3.0.md

---

# 4.3.0

## API Changes

### Deprecations

Several undocumented functions in ImageOps have been deprecated: `gaussian_blur`, `gblur`, `unsharp_mask`, `usm` and `box_blur`. Use the equivalent operations in `ImageFilter` instead. These functions will be removed in a future release.

### TIFF Metadata Changes

  - TIFF tags with unknown type/quantity now default to being bare values if they are 1 element, where previously they would be a single element tuple. This is only with the new api, not the legacy api. This normalizes the handling of fields, so that the metadata with inferred or image specified counts are handled the same as metadata with count specified in the TIFF spec.
  - The `PhotoshopInfo`, `XMP`, and `JPEGTables` tags now have a defined type (bytes) and a count of 1.
  - The `ImageJMetaDataByteCounts` tag now has an arbitrary number of items, as there can be multiple items, one for UTF-8, and one for UTF-16.

### Core Image API Changes

These are internal functions that should not have been used by user code, but they were accessible from the python layer.

Debugging code within `Image.core.grabclipboard` was removed. It had been marked as `will be removed in future versions` since PIL. When enabled, it identified the format of the clipboard data.

The `PIL.Image.core.copy` and `PIL.Image.Image.im.copy2` methods have been removed.

The `PIL.Image.core.getcount` methods have been removed, use `PIL.Image.core.get_stats()['new_count']` property instead.

## API Additions

### Get One Channel From Image

A new method :py\`PIL.Image.Image.getchannel\` has been added to return a single channel by index or name. For example, `image.getchannel("A")` will return alpha channel as separate image. `getchannel` should work up to 6 times faster than `image.split()[0]` in previous Pillow versions.

### Box Blur

A new filter, :py\`PIL.ImageFilter.BoxBlur\`, has been added. This is a filter with similar results to a Gaussian blur, but is much faster.

### Partial Resampling

Added new argument `box` for :py\`PIL.Image.Image.resize\`. This argument defines a source rectangle from within the source image to be resized. This is very similar to the `image.crop(box).resize(size)` sequence except that `box` can be specified with subpixel accuracy.

### New Transpose Operation

The `Image.TRANSVERSE` operation has been added to :py\`PIL.Image.Image.transpose\`. This is equivalent to a transpose operation about the opposite diagonal.

### Multiband Filters

There is a new :py\`PIL.ImageFilter.MultibandFilter\` base class for image filters that can run on all channels of an image in one operation. The original :py\`PIL.ImageFilter.Filter\` class remains for image filters that can process only single band images, or require splitting of channels prior to filtering.

## Other Changes

### Loading 16-bit TIFF Images

Pillow now can read 16-bit multichannel TIFF files including files with alpha transparency. The image data is truncated to 8-bit precision.

Pillow now can read 16-bit signed integer single channel TIFF files. The image data is promoted to 32-bit for storage and processing.

### SGI Images

Pillow can now read and write uncompressed 16-bit multichannel SGI images to and from RGB and RGBA formats. The image data is truncated to 8-bit precision.

Pillow can now read RLE encoded SGI images in both 8 and 16-bit precision.

### Performance

This release contains several performance improvements:

  - Many memory bandwidth-bounded operations such as crop, image allocation, conversion, split into bands and merging from bands are up to 2x faster.
  - Upscaling of multichannel images (such as RGB) is accelerated by 5-10%
  - JPEG loading is accelerated up to 15% and JPEG saving up to 20% when using a recent version of libjpeg-turbo.
  - `Image.transpose` has been accelerated 15% or more by using a cache friendly algorithm.
  - ImageFilters based on Kernel convolution are significantly faster due to the new :py\`\~PIL.ImageFilter.MultibandFilter\` feature.
  - All memory allocation for images is now done in blocks, rather than falling back to an allocation for each scan line for images larger than the block size.

### CMYK Conversion

The basic CMYK-\>RGB conversion has been tweaked to match the formula from Google Chrome. This produces an image that is generally lighter than the previous formula, and more in line with what color managed applications produce.

---

5.0.0.md

---

# 5.0.0

## Backwards Incompatible Changes

### Python 3.3 Dropped

Python 3.3 is EOL and no longer supported due to moving testing from nose, which is deprecated, to pytest, which doesn't support Python 3.3. We will not be creating binaries, testing, or retaining compatibility with this version. The final version of Pillow for Python 3.3 is 4.3.0.

### Decompression Bombs now raise Exceptions

Pillow has previously emitted warnings for images that are unexpectedly large and may be a denial of service. These warnings are now upgraded to `DecompressionBombError`s for images that are twice the size of images that trigger the `DecompressionBombWarning`. The default threshold is 128Mpx, or 0.5GB for an `RGB` or `RGBA` image. This can be disabled or changed by setting `Image.MAX_IMAGE_PIXELS = None`.

### Scripts

The scripts formerly installed by Pillow have been split into a separate package, pillow-scripts, living at <https://github.com/python-pillow/pillow-scripts>.

## API Changes

### OleFileIO.py

The `olefile` module is no longer a required dependency when installing Pillow. Support for plugins requiring olefile will not be loaded if it is not installed. This allows library consumers to avoid installing this dependency if they choose. Some library consumers have little interest in the format support and would like to keep dependencies to a minimum.

Further, the vendored version was removed in Pillow 4.0.0 and replaced with a deprecation warning that PIL.OleFileIO would be removed in a future version. This warning has been upgraded to an import error pending future removal.

### Check parameter on \_save

Several image plugins supported a named `check` parameter on their nominally private `_save` method to preflight if the image could be saved in that format. That parameter has been removed.

## API Additions

### Image.transform

A new named parameter, `fillcolor`, has been added to `Image.transform`. This color specifies the background color to use in the area outside the transformed area in the output image. This parameter takes the same color specifications as used in `Image.new`.

### GIF Disposal

Multiframe GIF images now take an optional disposal parameter to specify the disposal option for changed pixels.

## Other Changes

### Compressed TIFF Images

Previously, there were some compression modes (JPEG, Packbits, and LZW) that were supported with Pillow's internal TIFF decoder. All compressed TIFFs are now read using the `libtiff` decoder, as it implements the compression schemes more correctly.

### Libraqm is now Dynamically Linked

The libraqm dependency for complex text scripts is now linked dynamically at runtime rather than at packaging time. This allows us to release binaries with support for libraqm if it is installed on the user's machine.

### Source Layout Changes

The Pillow source is now stored within the `src` directory of the distribution. This prevents accidental imports of the PIL directory when running Python from the project directory.

### Setup.py Changes

Multiarch support on Linux should be more robust, especially on Debian derivatives on ARM platforms. Debian's multiarch platform configuration is run in preference to the sniffing of machine platform and architecture.

---

5.1.0.md

---

# 5.1.0

## API Changes

### Optional channels for TIFF files

Pillow can now open TIFF files with base modes of `RGB`, `YCbCr`, and `CMYK` with up to 6 8-bit channels, discarding any extra channels if the content is tagged as UNSPECIFIED. Pillow still does not store more than 4 8-bit channels of image data.

## API Additions

### Append to PDF Files

Images can now be appended to PDF files in place by passing in `append=True` when saving the image.

### New BLP File Format

Pillow now supports reading the BLP "Blizzard Mipmap" file format used for tiles in Blizzard's engine.

## Other Changes

### WebP memory leak

A memory leak when opening `WebP` files has been fixed.

---

5.2.0.md

---

# 5.2.0

## API Changes

### Deprecations

These version constants have been deprecated. `VERSION` will be removed in Pillow 6.0.0, and `PILLOW_VERSION` will be removed after that.

  - `PIL.VERSION` (old PIL version 1.1.7)
  - `PIL.PILLOW_VERSION`
  - `PIL.Image.VERSION`
  - `PIL.Image.PILLOW_VERSION`

Use `PIL.__version__` instead.

## API Additions

### 3D color lookup tables

Support for 3D color lookup table transformations has been added.

  - <https://en.wikipedia.org/wiki/3D_lookup_table>

`Color3DLUT.generate` transforms 3-channel pixels using the values of the channels as coordinates in the 3D lookup table and interpolating the nearest elements.

It allows you to apply almost any color transformation in constant time by using pre-calculated decimated tables.

`Color3DLUT.transform()` allows altering table values with a callback.

If NumPy is installed, the performance of argument conversion is dramatically improved when a source table supports buffer interface (NumPy && arrays in Python \>= 3).

### ImageColor.getrgb

Previously `Image.rotate` only supported HSL color strings. Now HSB and HSV strings are also supported, as well as float values. For example, `ImageColor.getrgb("hsv(180,100%,99.5%)")`.

### ImageFile.get\_format\_mimetype

`ImageFile.get_format_mimetype` has been added to return the MIME type of an image file, where available. For example, `Image.open("hopper.jpg").get_format_mimetype()` returns `"image/jpeg"`.

### ImageFont.getsize\_multiline

A new method to return the size of multiline text, for example `font.getsize_multiline("ABC\nAaaa")`

### Image.rotate

A new named parameter, `fillcolor`, has been added to `Image.rotate`. This color specifies the background color to use in the area outside the rotated image. This parameter takes the same color specifications as used in `Image.new`.

### TGA file format

Pillow can now read and write LA data (in addition to L, P, RGB and RGBA), and write RLE data (in addition to uncompressed).

## Other Changes

### Support added for Python 3.7

Pillow 5.2 supports Python 3.7.

### Build macOS wheels with Xcode 6.4, supporting older macOS versions

The macOS wheels for Pillow 5.1.0 were built with Xcode 9.2, meaning 10.12 Sierra was the lowest supported version.

Prior to Pillow 5.1.0, Xcode 8 was used, supporting El Capitan 10.11.

Instead, Pillow 5.2.0 is built with the oldest available Xcode 6.4 to support at least 10.10 Yosemite.

### Fix \_i2f compilation with some GCC versions

For example, this allows compilation with GCC 4.8 on NetBSD.

### Resolve confusion getting PIL / Pillow version string

Re: "version constants deprecated" listed above, as user gnbl notes in \#3082:

  - it's confusing that PIL.VERSION returns the version string of the former PIL instead of Pillow's
  - ReadTheDocs documentation is missing for some version branches (why is this, will it ever change, ...)
  - it's confusing that PIL.version is a module and does not return the version information directly or hints on how to get it
  - the package information header is essentially useless (placeholder, does not even mention Pillow, nor the version)
  - PIL.\_version module documentation comment could explain how to access the version information

We have attempted to resolve these issues in \#3083, \#3090 and \#3218.

---

5.3.0.md

---

# 5.3.0

## API Changes

### Image size

If you attempt to set the size of an image directly, e.g. `im.size = (100, 100)`, you will now receive an :py\`AttributeError\`. This is not about removing existing functionality, but instead about raising an explicit error to prevent later consequences. The `resize` method is the correct way to change an image's size.

The exceptions to this are:

  - The ICO and ICNS image formats, which use `im.size = (100, 100)` to select a subimage.
  - The TIFF image format, which now has a :py\`DeprecationWarning\` for this action, as direct image size setting was previously necessary to work around an issue with tile extents.

## API Additions

### Added line width parameter to rectangle and ellipse-based shapes

An optional line `width` parameter has been added to `ImageDraw.Draw.arc`, `chord`, `ellipse`, `pieslice` and `rectangle`.

### Curved joints for line sequences

`ImageDraw.Draw.line` draws a line, or lines, between points. Previously, when multiple points are given, for a larger `width`, the joints between these lines looked unsightly. There is now an additional optional argument, `joint`, defaulting to <span class="title-ref">None</span>. When it is set to `curved`, the joints between the lines will become rounded.

### ImageOps.colorize

Previously `ImageOps.colorize` only supported two-color mapping with `black` and `white` arguments being mapped to 0 and 255 respectively. Now it supports three-color mapping with the optional `mid` parameter, and the positions for all three color arguments can each be optionally specified (`blackpoint`, `whitepoint` and `midpoint`). For example, with all optional arguments:

    ImageOps.colorize(im, black=(32, 37, 79), white='white', mid=(59, 101, 175),
                          blackpoint=15, whitepoint=240, midpoint=100)

### ImageOps.pad

While `ImageOps.fit` allows users to crop images to a requested aspect ratio and size, new method `ImageOps.pad` pads images to fill a requested aspect ratio and size, filling new space with a provided `color` and positioning the image within the new area through a `centering` argument.

## Other Changes

Added support for reading tiled TIFF images through LibTIFF. Compressed TIFF images are now read through LibTIFF.

RGB WebP images are now read as RGB mode, rather than RGBX.

---

5.4.0.md

---

# 5.4.0

## API Changes

### APNG extension to PNG plugin

Animated Portable Network Graphics (APNG) images are not fully supported but can be opened via the PNG plugin to get some basic info:

    im = Image.open("image.apng")
    print(im.mode)  # "RGBA"
    print(im.size)  # (245, 245)
    im.show()  # Shows a single frame

### Check for libjpeg-turbo

You can check if Pillow has been built against the libjpeg-turbo version of the libjpeg library:

    from PIL import features
    features.check_feature("libjpeg_turbo")  # True or False

### Negative indexes in pixel access

When accessing individual image pixels, negative indexes are now also accepted. For example, to get or set the farthest pixel in the lower right of an image:

    px = im.load()
    print(px[-1, -1])
    px[-1, -1] = (0, 0, 0)

### New custom TIFF tags

TIFF images can now be saved with custom integer, float and string TIFF tags:

    im = Image.new("RGB", (200, 100))
    custom = {
        37000: 4,
        37001: 4.2,
        37002: "custom tag value",
        37003: u"custom tag value",
        37004: b"custom tag value",
    }
    im.save("output.tif", tiffinfo=custom)
    
    im2 = Image.open("output.tif")
    print(im2.tag_v2[37000])  # 4
    print(im2.tag_v2[37002])  # "custom tag value"
    print(im2.tag_v2[37004])  # b"custom tag value"

## Other Changes

### ImageOps.fit

Now uses one resize operation with `box` parameter internally instead of a crop and scale operations sequence. This improves the performance and accuracy of cropping since the `box` parameter accepts float values.

---

5.4.1.md

---

# 5.4.1

This release fixes regressions in 5.4.0.

## Installation on Termux

A change to the way Pillow detects libraries during installed prevented installation on Termux, which does not have `/sbin/ldconfig`. This is now fixed.

## PNG: Handle IDAT chunks after image end

Some PNG images have multiple IDAT chunks. In some cases, Pillow will stop reading image data before the IDAT chunks finish. A regression caused an :py\`EOFError\` exception when previously there was none. This is now fixed, and file reading continues in case there are subsequent text chunks.

## PNG: MIME type

The addition of limited APNG support to the PNG plugin also overwrote the MIME type for PNG files, causing "image/apng" to be returned as the MIME type of both APNG and PNG files. This has been fixed so the MIME type of PNG files is "image/png".

## File closing

A regression caused an unsupported image file to report a `ValueError: seek of closed file` exception instead of an :py\`OSError\`. This has been fixed by ensuring that image plugins only close their internal `__fp` if they are not the same as `ImageFile`'s `fp`, allowing each to manage their own file pointers.

---

6.0.0.md

---

# 6.0.0

## Backwards Incompatible Changes

### Python 3.4 dropped

Python 3.4 is EOL since 2019-03-16 and no longer supported. We will not be creating binaries, testing, or retaining compatibility with this version. The final version of Pillow for Python 3.4 is 5.4.1.

### Removed deprecated PIL.OleFileIO

`PIL.OleFileIO` was removed as a vendored file and in Pillow 4.0.0 (2017-01) in favour of the upstream `olefile` Python package, and replaced with an :py\`ImportError\`. The deprecated file has now been removed from Pillow. If needed, install from PyPI (eg. `python3 -m pip install olefile`).

### Removed deprecated ImageOps functions

Several undocumented functions in `ImageOps` were deprecated in Pillow 4.3.0 (2017-10) and have now been removed: `gaussian_blur`, `gblur`, `unsharp_mask`, `usm` and `box_blur`. Use the equivalent operations in `ImageFilter` instead.

### Removed deprecated VERSION

`VERSION` (the old PIL version, always 1.1.7) has been removed. Use `__version__` instead.

## API Changes

### Deprecations

#### Python 2.7

Python 2.7 reaches end-of-life on 2020-01-01.

Pillow 7.0.0 will be released on 2020-01-01 and will drop support for Python 2.7, making Pillow 6.x the last series to support Python 2.

#### PyQt4 and PySide

Qt 4 reached end-of-life on 2015-12-19. Its Python bindings are also EOL: PyQt4 since 2018-08-31 and PySide since 2015-10-14.

Support for PyQt4 and PySide has been deprecated from `ImageQt` and will be removed in a future version. Please upgrade to PyQt5 or PySide2.

#### PIL.\*ImagePlugin.\_\_version\_\_ attributes

These version constants have been deprecated and will be removed in a future version.

  - `BmpImagePlugin.__version__`
  - `CurImagePlugin.__version__`
  - `DcxImagePlugin.__version__`
  - `EpsImagePlugin.__version__`
  - `FliImagePlugin.__version__`
  - `FpxImagePlugin.__version__`
  - `GdImageFile.__version__`
  - `GifImagePlugin.__version__`
  - `IcoImagePlugin.__version__`
  - `ImImagePlugin.__version__`
  - `ImtImagePlugin.__version__`
  - `IptcImagePlugin.__version__`
  - `Jpeg2KImagePlugin.__version__`
  - `JpegImagePlugin.__version__`
  - `McIdasImagePlugin.__version__`
  - `MicImagePlugin.__version__`
  - `MpegImagePlugin.__version__`
  - `MpoImagePlugin.__version__`
  - `MspImagePlugin.__version__`
  - `PalmImagePlugin.__version__`
  - `PcdImagePlugin.__version__`
  - `PcxImagePlugin.__version__`
  - `PdfImagePlugin.__version__`
  - `PixarImagePlugin.__version__`
  - `PngImagePlugin.__version__`
  - `PpmImagePlugin.__version__`
  - `PsdImagePlugin.__version__`
  - `SgiImagePlugin.__version__`
  - `SunImagePlugin.__version__`
  - `TgaImagePlugin.__version__`
  - `TiffImagePlugin.__version__`
  - `WmfImagePlugin.__version__`
  - `XbmImagePlugin.__version__`
  - `XpmImagePlugin.__version__`
  - `XVThumbImagePlugin.__version__`

Use `PIL.__version__` instead.

#### ImageCms.CmsProfile attributes

Some attributes in `ImageCms.CmsProfile` have been deprecated since Pillow 3.2.0. From 6.0.0, they issue a :py\`DeprecationWarning\`:

| Deprecated             | Use instead                   |
| ---------------------- | ----------------------------- |
| `color_space`          | Padded `xcolor_space`         |
| `pcs`                  | Padded `connection_space`     |
| `product_copyright`    | Unicode `copyright`           |
| `product_desc`         | Unicode `profile_description` |
| `product_description`  | Unicode `profile_description` |
| `product_manufacturer` | Unicode `manufacturer`        |
| `product_model`        | Unicode `model`               |

### MIME type improvements

Previously, all JPEG2000 images had the MIME type "image/jpx". This has now been corrected. After the file format drivers have been loaded, `Image.MIME["JPEG2000"]` will return "image/jp2". `ImageFile.get_format_mimetype` will return "image/jpx" if a JPX profile is present, or "image/jp2" otherwise.

Previously, all SGI images had the MIME type "image/rgb". This has now been corrected. After the file format drivers have been loaded, `Image.MIME["SGI"]` will return "image/sgi". `ImageFile.get_format_mimetype` will return "image/rgb" if RGB image data is present, or "image/sgi" otherwise.

MIME types have been added to the PPM format. After the file format drivers have been loaded, `Image.MIME["PPM"]` will now return the generic "image/x-portable-anymap". `ImageFile.get_format_mimetype` will return a MIME type specific to the color type.

The TGA, PCX and ICO formats also now have MIME types: "image/x-tga", "image/x-pcx" and "image/x-icon" respectively.

## API Additions

### DIB file format

Pillow now supports reading and writing the Device Independent Bitmap file format.

### Image.quantize

The `dither` option is now a customisable parameter (was previously hardcoded to `1`). This parameter takes the same values used in :py\`\~PIL.Image.Image.convert\`.

### New language parameter

These text-rendering functions now accept a `language` parameter to request language-specific glyphs and ligatures from the font:

  - `ImageDraw.ImageDraw.multiline_text()`
  - `ImageDraw.ImageDraw.multiline_textsize()`
  - `ImageDraw.ImageDraw.text()`
  - `ImageDraw.ImageDraw.textsize()`
  - `ImageFont.ImageFont.getmask()`
  - `ImageFont.ImageFont.getsize_multiline()`
  - `ImageFont.ImageFont.getsize()`

### Added EXIF class

:py\`\~PIL.Image.Image.getexif\` has been added, which returns an :py\`\~PIL.Image.Exif\` instance. Values can be retrieved and set like a dictionary. When saving JPEG, PNG or WEBP, the instance can be passed as an `exif` argument to include any changes in the output image.

### Added ImageOps.exif\_transpose

:py\`\~PIL.ImageOps.exif\_transpose\` returns a copy of an image, transposed according to its EXIF Orientation tag.

### PNG EXIF data

EXIF data can now be read from and saved to PNG images. However, unlike other image formats, EXIF data is not guaranteed to be present in :py\`\~PIL.Image.Image.info\` until :py\`\~PIL.Image.Image.load\` has been called.

## Other Changes

### Reading new DDS image format

Pillow can now read uncompressed RGB data from DDS images.

### Reading TIFF with old-style JPEG compression

Added support reading TIFF files with old-style JPEG compression through LibTIFF. All YCbCr TIFF images are now always read as RGB.

### TIFF compression codecs

Support has been added for the LZMA, Zstd and WebP TIFF compression codecs.

### Improved support for transposing I;16 images

I;16, I;16L and I;16B are now supported image modes for all :py\`\~PIL.Image.Image.transpose\` operations.

---

6.1.0.md

---

# 6.1.0

## Deprecations

### Image.\_\_del\_\_

<div class="deprecated">

6.1.0

</div>

Implicitly closing the image's underlying file in `Image.__del__` has been deprecated. Use a context manager or call `Image.close()` instead to close the file in a deterministic way.

Deprecated:

    im = Image.open("hopper.png")
    im.save("out.jpg")

Use instead:

    with Image.open("hopper.png") as im:
        im.save("out.jpg")

## API Additions

### Image.entropy

Calculates and returns the entropy for the image. A bilevel image (mode "1") is treated as a grayscale ("L") image by this method. If a mask is provided, the method employs the histogram for those parts of the image where the mask image is non-zero. The mask image must have the same size as the image, and be either a bi-level image (mode "1") or a grayscale image ("L").

### ImageGrab.grab

An optional `include_layered_windows` parameter has been added to `ImageGrab.grab`, defaulting to `False`. If true, layered windows will be included in the resulting image on Windows.

### ImageSequence.all\_frames

A new method to facilitate applying a given function to all frames in an image, or to all frames in a list of images. The frames are returned as a list of separate images. For example, `ImageSequence.all_frames(im, lambda im_frame: im_frame.rotate(90))` could be used to return all frames from an image, each rotated 90 degrees.

### Variation fonts

Variation fonts are now supported, allowing for different styles from the same font file. `ImageFont.FreeTypeFont` has four new methods, :py\`PIL.ImageFont.FreeTypeFont.get\_variation\_names\` and :py\`PIL.ImageFont.FreeTypeFont.set\_variation\_by\_name\` for using named styles, and :py\`PIL.ImageFont.FreeTypeFont.get\_variation\_axes\` and :py\`PIL.ImageFont.FreeTypeFont.set\_variation\_by\_axes\` for using font axes instead. An :py\`IOError\` will be raised if the font is not a variation font. FreeType 2.9.1 or greater is required.

## Other Changes

### ImageTk.getimage

This function is now supported. It returns the contents of an `ImageTk.PhotoImage` as an RGBA `Image.Image` instance.

### Image quality for JPEG compressed TIFF

The TIFF encoder accepts a `quality` parameter for `jpeg` compressed TIFF files. A value from 0 (worst) to 100 (best) controls the image quality, similar to the JPEG encoder. The default is 75. For example:

    im.save("out.tif", compression="jpeg", quality=85)

### Improve encoding of TIFF tags

The TIFF encoder supports more types, especially arrays. This is required for the GeoTIFF format which encodes geospatial information.

  - Pass `tagtype` from v2 directory to libtiff encoder, instead of autodetecting type.
  - Use explicit types eg. `uint32_t` for `TIFF_LONG` to fix issues on platforms with 64-bit longs.
  - Add support for multiple values (arrays). Requires type in v2 directory and values must be passed as a tuple.
  - Add support for signed types eg. `TIFFTypes.TIFF_SIGNED_SHORT`.

### Respect PKG\_CONFIG environment variable when building

This variable is commonly used by other build systems and using it can help with cross-compiling. Falls back to `pkg-config` as before.

### Top-to-bottom complex text rendering

Drawing text in the 'ttb' direction with `ImageFont` has been significantly improved and requires Raqm 0.7 or greater.

---

6.2.0.md

---

# 6.2.0

## Security

This release catches several buffer overruns and fixes `2019-16865`.

### Buffer overruns

In `RawDecode.c`, an error is now thrown if skip is calculated to be less than zero. It is intended to skip padding between lines, not to go backwards.

In `PsdImagePlugin`, if the combined sizes of the individual parts is larger than the declared size of the extra data field, then it looked for the next layer by seeking backwards. This is now corrected by seeking to (the start of the layer + the size of the extra data field) instead of (the read parts of the layer + the rest of the layer).

Decompression bomb checks have been added to GIF and ICO formats.

An error is now raised if a TIFF dimension is a string, rather than trying to perform operations on it.

### `2019-16865`: Fix DOS attack

The CVE is regarding DOS problems, such as consuming large amounts of memory, or taking a large amount of time to process an image.

## API Changes

### Image.getexif

To allow for lazy loading of Exif data, `Image.getexif()` now returns a shared instance of `Image.Exif`.

### Deprecations

#### Image.frombuffer

There has been a longstanding warning that the defaults of `Image.frombuffer` may change in the future for the "raw" decoder. The change will now take place in Pillow 7.0.

## API Additions

### Text stroking

`stroke_width` and `stroke_fill` arguments have been added to text drawing operations. They allow text to be outlined, setting the width of the stroke and and the color respectively. If not provided, `stroke_fill` will default to the `fill` parameter. :

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf", 40)
    font.getsize_multiline("A", stroke_width=2)
    font.getsize("ABC\nAaaa", stroke_width=2)
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    draw.textsize("A", font, stroke_width=2)
    draw.multiline_textsize("ABC\nAaaa", font, stroke_width=2)
    draw.text((10, 10), "A", "#f00", font, stroke_width=2, stroke_fill="#0f0")
    draw.multiline_text((10, 10), "A\nB", "#f00", font,
                        stroke_width=2, stroke_fill="#0f0")

For example, :

    from PIL import Image, ImageDraw, ImageFont
    
    im = Image.new("RGB", (120, 130))
    draw = ImageDraw.Draw(im)
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf", 120)
    draw.text((10, 10), "A", "#f00", font, stroke_width=2, stroke_fill="#0f0")

creates the following image:

![image](../../Tests/images/imagedraw_stroke_different.png)

### ImageGrab on multi-monitor Windows

An `all_screens` argument has been added to `ImageGrab.grab`. If `True`, all monitors will be included in the created image.

## Other Changes

### Removed bdist\_wininst .exe installers

.exe installers fell out of favour with `527`, and will be deprecated in Python 3.8. Pillow will no longer be distributing them. Wheels should be used instead.

### Flags for libwebp in wheels

When building libwebp for inclusion in wheels, Pillow now adds the `-O3` and `-DNDEBUG` CFLAGS. These flags would be used by default if building libwebp without debugging, and using them fixes a significant decrease in speed when a wheel-installed copy of Pillow performs libwebp operations.

---

6.2.1.md

---

# 6.2.1

## API Changes

### Deprecations

#### Python 2.7

Python 2.7 reaches end-of-life on 2020-01-01.

Pillow 7.0.0 will be released on 2020-01-01 and will drop support for Python 2.7, making Pillow 6.2.x the last release series to support Python 2.

## Other Changes

### Support added for Python 3.8

Pillow 6.2.1 supports Python 3.8.

---

6.2.2.md

---

# 6.2.2

## Security

This release fixes several buffer overflow issues and a DOS attack vulnerability.

### `2020-5310`, `2020-5311`, `2020-5312`, `2020-5313`: Overflow checks added

Overflow checks have been added when calculating the size of a memory block to be reallocated in the processing of TIFF, SGI, PCX and FLI images.

### `2019-19911`: DOS attack vulnerability

If an FPX image reports that it has a large number of bands, a large amount of resources will be used when trying to process the image. This is fixed by limiting the number of bands to those usable by Pillow.

---

7.0.0.md

---

# 7.0.0

## Backwards Incompatible Changes

### Python 2.7

Pillow has dropped support for Python 2.7, which reached end-of-life on 2020-01-01.

### PILLOW\_VERSION constant

`PILLOW_VERSION` has been removed. Use `__version__` instead.

### PIL.\*ImagePlugin.\_\_version\_\_ attributes

The version constants of individual plugins have been removed. Use `PIL.__version__` instead.

| Removed                                                    | Removed                                                     | Removed                          |
| ---------------------------------------------------------- | ----------------------------------------------------------- | -------------------------------- |
| `BmpImagePlugin.__version__`                               | `Jpeg2KImagePlugin.__version__`                             | `PngImagePlugin.__version__`     |
| `CurImagePlugin.__version__`                               | `JpegImagePlugin.__version__`                               | `PpmImagePlugin.__version__`     |
| `DcxImagePlugin.__version__`                               | `McIdasImagePlugin.__version__`                             | `PsdImagePlugin.__version__`     |
| `EpsImagePlugin.__version__`                               | `MicImagePlugin.__version__`                                | `SgiImagePlugin.__version__`     |
| `FliImagePlugin.__version__`                               | `MpegImagePlugin.__version__`                               | `SunImagePlugin.__version__`     |
| `FpxImagePlugin.__version__`                               | `MpoImagePlugin.__version__`                                | `TgaImagePlugin.__version__`     |
| `GdImageFile.__version__`                                  | `MspImagePlugin.__version__`                                | `TiffImagePlugin.__version__`    |
| `GifImagePlugin.__version__`                               | `PalmImagePlugin.__version__`                               | `WmfImagePlugin.__version__`     |
| `IcoImagePlugin.__version__`                               | `PcdImagePlugin.__version__`                                | `XbmImagePlugin.__version__`     |
| `ImImagePlugin.__version__`                                | `PcxImagePlugin.__version__`                                | `XpmImagePlugin.__version__`     |
| `ImtImagePlugin.__version__` `IptcImagePlugin.__version__` | `PdfImagePlugin.__version__` `PixarImagePlugin.__version__` | `XVThumbImagePlugin.__version__` |

### PyQt4 and PySide

Qt 4 reached end-of-life on 2015-12-19. Its Python bindings are also EOL: PyQt4 since 2018-08-31 and PySide since 2015-10-14.

Support for PyQt4 and PySide has been removed from `ImageQt`. Please upgrade to PyQt5 or PySide2.

### Setting the size of TIFF images

Setting the size of a TIFF image directly (eg. `im.size = (256, 256)`) throws an error. Use `Image.resize` instead.

### Default resampling filter

The default resampling filter has been changed to the high-quality convolution `Image.BICUBIC` instead of `Image.NEAREST`, for the :py\`\~PIL.Image.Image.resize\` method and the :py\`\~PIL.ImageOps.pad\`, :py\`\~PIL.ImageOps.scale\` and :py\`\~PIL.ImageOps.fit\` functions. `Image.NEAREST` is still always used for images in "P" and "1" modes. See \[concept-filters\](\#concept-filters) to learn the difference. In short, `Image.NEAREST` is a very fast filter, but simple and low-quality.

### Image.draft() return value

If the :py\`\~PIL.Image.Image.draft\` method has no effect, it returns <span class="title-ref">None</span>. If it does have an effect, then it previously returned the image itself. However, unlike other [chain methods](https://en.wikipedia.org/wiki/Method_chaining), :py\`\~PIL.Image.Image.draft\` does not return a modified version of the image, but modifies it in-place. So instead, if :py\`\~PIL.Image.Image.draft\` has an effect, Pillow will now return a tuple of the image mode and a co-ordinate box. The box is the original coordinates in the bounds of resulting image. This may be useful in a subsequent :py\`\~PIL.Image.Image.resize\` call.

## API Additions

### Custom unidentified image error

Pillow will now throw a custom `UnidentifiedImageError` when an image cannot be identified. For backwards compatibility, this will inherit from :py\`OSError\`.

### New argument `reducing_gap` for Image.resize() and Image.thumbnail() methods

Speeds up resizing by resizing the image in two steps. The bigger `reducing_gap`, the closer the result to the fair resampling. The smaller `reducing_gap`, the faster resizing. With `reducing_gap` greater or equal to 3.0, the result is indistinguishable from fair resampling.

The default value for :py\`\~PIL.Image.Image.resize\` is <span class="title-ref">None</span>, which means that the optimization is turned off by default.

The default value for :py\`\~PIL.Image.Image.thumbnail\` is 2.0, which is very close to fair resampling while still being faster in many cases. In addition, the same gap is applied when :py\`\~PIL.Image.Image.thumbnail\` calls :py\`\~PIL.Image.Image.draft\`, which may greatly improve the quality of JPEG thumbnails. As a result, :py\`\~PIL.Image.Image.thumbnail\` in the new version provides equally high speed and high quality from any source (JPEG or arbitrary images).

### New Image.reduce() method

:py\`\~PIL.Image.Image.reduce\` is a highly efficient operation to reduce an image by integer times. Normally, it shouldn't be used directly. Used internally by :py\`\~PIL.Image.Image.resize\` and :py\`\~PIL.Image.Image.thumbnail\` methods to speed up resize when a new argument `reducing_gap` is set.

### Loading WMF images at a given DPI

On Windows, Pillow can read WMF files, with a default DPI of 72. An image can now also be loaded at another resolution:

    from PIL import Image
    with Image.open("drawing.wmf") as im:
        im.load(dpi=144)

## Other Changes

### Image.\_\_del\_\_

Implicitly closing the image's underlying file in `Image.__del__` has been removed. Use a context manager or call :py\`\~PIL.Image.Image.close\` instead to close the file in a deterministic way.

Previous method:

    im = Image.open("hopper.png")
    im.save("out.jpg")

Use instead:

    with Image.open("hopper.png") as im:
        im.save("out.jpg")

### Better thumbnail geometry

When calculating the new dimensions in :py\`\~PIL.Image.Image.thumbnail\`, round to the nearest integer, instead of always rounding down. This better preserves the original aspect ratio.

When the image width or height is not divisible by 8 the last row and column in the image get the correct weight after JPEG DCT scaling.

---

7.1.0.md

---

# 7.1.0

## Security

This release includes many security fixes.

### `2020-10177`: Multiple out-of-bounds reads in FLI decoding

Pillow before 7.1.0 has multiple out-of-bounds reads in `libImaging/FliDecode.c`.

### `2020-10378`: Bounds overflow in PCX decoding

In `libImaging/PcxDecode.c` in Pillow before 7.1.0, an out-of-bounds read can occur when reading PCX files where `state->shuffle` is instructed to read beyond `state->buffer`.

### `2020-10379`: Two buffer overflows in TIFF decoding

In Pillow before 7.1.0, there are two buffer overflows in `libImaging/TiffDecode.c`.

### `2020-10994`: Bounds overflow in JPEG 2000 decoding

In `libImaging/Jpeg2KDecode.c` in Pillow before 7.1.0, there are multiple out-of-bounds reads via a crafted JP2 file.

### `2020-11538`: Buffer overflow in SGI-RLE decoding

In `libImaging/SgiRleDecode.c` in Pillow through 7.0.0, a number of out-of-bounds reads exist in the parsing of SGI image files, a different issue than `2020-5311`.

## API Changes

### Allow saving of zero quality JPEG images

If no quality was specified when saving a JPEG, Pillow internally used a value of zero to indicate that the default quality should be used. However, this removed the ability to actually save a JPEG with zero quality. This has now been resolved. :

    from PIL import Image
    im = Image.open("hopper.jpg")
    im.save("out.jpg", quality=0)

## API Additions

### New channel operations

Three new channel operations have been added: :py\`\~PIL.ImageChops.soft\_light\`, :py\`\~PIL.ImageChops.hard\_light\` and :py\`\~PIL.ImageChops.overlay\`.

### PILLOW\_VERSION constant

`PILLOW_VERSION` has been re-added but is deprecated and will be removed in a future release. Use `__version__` instead.

It was initially removed in Pillow 7.0.0, but brought back in 7.1.0 to give projects more time to upgrade.

### Reading JPEG comments

When opening a JPEG image, the comment may now be read into :py\`\~PIL.Image.Image.info\`.

### Support for different charset encodings in PcfFontFile

Previously `PcfFontFile` output only bitmap PIL fonts with ISO 8859-1 encoding, even though the PCF format supports Unicode, making it hard to work with Pillow with bitmap fonts in languages which use different character sets.

Now it's possible to set a different charset encoding in `PcfFontFile`'s class constructor. By default, it generates a PIL font file with ISO 8859-1 as before. The generated PIL font file still contains up to 256 characters, but the character set is different depending on the selected encoding.

To use such a font with `ImageDraw.text`, call it with a bytes object with the same encoding as the font file.

### X11 ImageGrab.grab()

Support has been added for `ImageGrab.grab()` on Linux using the X server with the XCB library.

An optional `xdisplay` parameter has been added to select the X server, with the default value of <span class="title-ref">None</span> using the default X server.

Passing a different value on Windows or macOS will force taking a snapshot using the selected X server; pass an empty string to use the default X server. XCB support is not included in pre-compiled wheels for Windows and macOS.

## Other Changes

### If present, only use alpha channel for bounding box

When the :py\`\~PIL.Image.Image.getbbox\` method calculates the bounding box, for an RGB image it trims black pixels. Similarly, for an RGBA image it would trim black transparent pixels. This is now changed so that if an image has an alpha channel (RGBA, RGBa, PA, LA, La), any transparent pixels are trimmed.

### Improved APNG support

Added support for reading and writing Animated Portable Network Graphics (APNG) images. The PNG plugin now supports using the :py\`\~PIL.Image.Image.seek\` method and the :py\`\~PIL.ImageSequence.Iterator\` class to read APNG frame sequences. The PNG plugin also now supports using the `append_images` argument to write APNG frame sequences. See \[apng-sequences\](\#apng-sequences) for further details.

---

7.1.1.md

---

# 7.1.1

## Fix regression seeking PNG files

This fixes a regression introduced in 7.1.0 when adding support for APNG files when calling `seek` and `tell`:

`` `pycon >>> from PIL import Image >>> with Image.open("Tests/images/hopper.png") as im: ...     im.seek(0) ... Traceback (most recent call last):   File "<stdin>", line 2, in <module>   File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/PIL/PngImagePlugin.py", line 739, in seek     if not self._seek_check(frame):   File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/PIL/ImageFile.py", line 306, in _seek_check     return self.tell() != frame   File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/PIL/PngImagePlugin.py", line 827, in tell     return self.__frame AttributeError: 'PngImageFile' object has no attribute '_PngImageFile__frame' >>> ``\`

---

7.1.2.md

---

# 7.1.2

## Fix another regression seeking PNG files

This fixes a regression introduced in 7.1.0 when adding support for APNG files.

When calling `seek(n)` on a regular PNG where `n > 0`, it failed to raise an :py\`EOFError\` as it should have done, resulting in:

`` `pycon     AttributeError: 'NoneType' object has no attribute 'read'  Pillow 7.1.2 now raises the correct exception. ``\`

---

7.2.0.md

---

# 7.2.0

## API Changes

### Replaced TiffImagePlugin DEBUG with logging

`TiffImagePlugin.DEBUG = True` has been a way to print various debugging information when interacting with TIFF images. This has now been removed in favour of Python's `logging` module, already used in other places in the Pillow source code.

### Corrected default offset when writing EXIF data

Previously, the default `offset` argument for :py\`\~PIL.Image.Exif.tobytes\` was 0, which did not include the magic header. It is now 8.

### Moved to ImageFileDirectory\_v2 in Image.Exif

Moved from the legacy :py\`PIL.TiffImagePlugin.ImageFileDirectory\_v1\` to :py\`PIL.TiffImagePlugin.ImageFileDirectory\_v2\` in :py\`PIL.Image.Exif\`. This means that Exif RATIONALs and SIGNED\_RATIONALs are now read as :py\`PIL.TiffImagePlugin.IFDRational\`, instead of as a tuple with a numerator and a denominator.

### TIFF BYTE tags format

TIFF BYTE tags were previously read as a tuple containing a bytestring. They are now read as just a single bytestring.

### Deprecations

#### Image.show command parameter

The `command` parameter was deprecated and will be removed in a future release. Use a subclass of :py\`PIL.ImageShow.Viewer\` instead.

#### Image.\_showxv

`Image._showxv` has been deprecated. Use :py\`\~PIL.Image.Image.show\` instead. If custom behaviour is required, use :py\`\~PIL.ImageShow.register\` to add a custom :py\`\~PIL.ImageShow.Viewer\` class.

#### ImageFile.raise\_ioerror

:py\`IOError\` was merged into :py\`OSError\` in Python 3.3. So, `ImageFile.raise_ioerror` is now deprecated and will be removed in a future release. Use `ImageFile.raise_oserror` instead.

---

8.0.0.md

---

# 8.0.0

## Backwards Incompatible Changes

### Python 3.5

Pillow has dropped support for Python 3.5, which reached end-of-life on 2020-09-13.

### PyPy 7.1.x

Pillow has dropped support for PyPy3 7.1.1. PyPy3 7.2.0, released on 2019-10-14, is now the minimum compatible version.

### im.offset

`im.offset()` has been removed, call :py\`.ImageChops.offset()\` instead.

### Image.fromstring, im.fromstring and im.tostring

  - `Image.fromstring()` has been removed, call :py\`.Image.frombytes()\` instead.
  - `im.fromstring()` has been removed, call :py\`\~PIL.Image.Image.frombytes()\` instead.
  - `im.tostring()` has been removed, call :py\`\~PIL.Image.Image.tobytes()\` instead.

### ImageCms.CmsProfile attributes

Some attributes in :py\`PIL.ImageCms.core.CmsProfile\` have been removed:

| Removed                | Use instead                                       |
| ---------------------- | ------------------------------------------------- |
| `color_space`          | Padded :py\`\~.CmsProfile.xcolor\_space\`         |
| `pcs`                  | Padded :py\`\~.CmsProfile.connection\_space\`     |
| `product_copyright`    | Unicode :py\`\~.CmsProfile.copyright\`            |
| `product_desc`         | Unicode :py\`\~.CmsProfile.profile\_description\` |
| `product_description`  | Unicode :py\`\~.CmsProfile.profile\_description\` |
| `product_manufacturer` | Unicode :py\`\~.CmsProfile.manufacturer\`         |
| `product_model`        | Unicode :py\`\~.CmsProfile.model\`                |

## API Changes

### ImageDraw.text: stroke\_width

Fixed issue where passing `stroke_width` with a non-zero value to :py\`.ImageDraw.text\` would cause the text to be offset by that amount.

### ImageDraw.text: anchor

The `anchor` parameter of :py\`.ImageDraw.text\` has been implemented.

Use this parameter to change the position of text relative to the specified `xy` point. See \[text-anchors\](\#text-anchors) for details.

### Add MIME type to PsdImagePlugin

"image/vnd.adobe.photoshop" is now registered as the :py\`.PsdImagePlugin.PsdImageFile\` MIME type.

## API Additions

### Image.open: add formats parameter

Added a new `formats` parameter to :py\`.Image.open\`:

  - A list or tuple of formats to attempt to load the file in. This can be used to restrict the set of formats checked. Pass `None` to try all supported formats. You can print the set of available formats by running `python3 -m PIL` or using the :py\`PIL.features.pilinfo\` function.

### ImageOps.autocontrast: add mask parameter

  - py\`.ImageOps.autocontrast\` can now take a `mask` parameter

<!-- end list -->

  - Histogram used in contrast operation is computed using pixels within the mask. If no mask is given the entire image is used for histogram computation.

### ImageOps.autocontrast cutoffs

Previously, the `cutoff` parameter of :py\`.ImageOps.autocontrast\` could only be a single number, used as the percent to cut off from the histogram on the low and high ends.

Now, it can also be a tuple `(low, high)`.

### ImageDraw.regular\_polygon

A new method :py\`.ImageDraw.regular\_polygon\`, draws a regular polygon of `n_sides`, inscribed in a `bounding_circle`.

For example `draw.regular_polygon(((100, 100), 50), 5)` draws a pentagon centered at the point `(100, 100)` with a polygon radius of `50`.

### ImageDraw.text: embedded\_color

The methods :py\`.ImageDraw.text\` and :py\`.ImageDraw.multiline\_text\` now support fonts with embedded color data.

To render text with embedded color data, use the parameter `embedded_color=True`.

Support for CBDT fonts requires FreeType 2.5 compiled with libpng. Support for SBIX fonts requires FreeType 2.5.1 compiled with libpng. Support for COLR fonts requires FreeType 2.10. SVG fonts are not yet supported.

### ImageDraw.textlength

Two new methods :py\`.ImageDraw.textlength\` and :py\`.FreeTypeFont.getlength\` were added, returning the exact advance length of text with 1/64 pixel precision.

These can be used for word-wrapping or rendering text in parts.

### ImageDraw.textbbox

Three new methods :py\`.ImageDraw.textbbox\`, :py\`.ImageDraw.multiline\_textbbox\`, and :py\`.FreeTypeFont.getbbox\` return the bounding box of rendered text.

These functions accept an `anchor` parameter, see \[text-anchors\](\#text-anchors) for details.

## Other Changes

### Improved ellipse-drawing algorithm

The ellipse-drawing algorithm has been changed from drawing a 360-sided polygon to one which resembles Bresenham's algorithm for circles. It should be faster and produce smoother curves, especially for smaller ellipses.

### ImageDraw.text and ImageDraw.multiline\_text

Fixed multiple issues in methods :py\`.ImageDraw.text\` and :py\`.ImageDraw.multiline\_text\` sometimes causing unexpected text alignment issues.

The `align` parameter of :py\`.ImageDraw.multiline\_text\` now gives better results in some cases.

TrueType fonts with embedded bitmaps are now supported.

### Added writing of subIFDs

When saving EXIF data, Pillow is now able to write subIFDs, such as the GPS IFD. This should happen automatically when saving an image using the EXIF data that it was opened with, such as in :py\`\~PIL.ImageOps.exif\_transpose\`.

Previously, the code of the first tag of the subIFD was incorrectly written as the offset.

### Error for large BMP files

Previously, if a BMP file was too large, an :py\`OSError\` would be raised. Now, `DecompressionBombError` is used instead, as Pillow already uses for other formats.

### Dark theme for docs

The <https://pillow.readthedocs.io> documentation will use a dark theme if the user has requested the system use one. Uses the `prefers-color-scheme` CSS media query.

---

8.0.1.md

---

# 8.0.1

## Security

### `2020-15999`: Update FreeType in wheels to [2.10.4](https://sourceforge.net/projects/freetype/files/freetype2/2.10.4/)

  - A heap buffer overflow has been found in the handling of embedded PNG bitmaps, introduced in FreeType version 2.6.
  - If you use option `FT_CONFIG_OPTION_USE_PNG` you should upgrade immediately.

We strongly recommend updating to Pillow 8.0.1 if you are using Pillow 8.0.0, which improved support for bitmap fonts.

In Pillow 7.2.0 and earlier bitmap fonts were disabled with `FT_LOAD_NO_BITMAP`, but it is not clear if this prevents the exploit and we recommend updating to Pillow 8.0.1.

Pillow 8.0.0 and earlier are potentially vulnerable releases, including the last release to support Python 2.7, namely Pillow 6.2.2.

---

8.1.0.md

---

# 8.1.0

## Security

This release includes security fixes.

  - An out-of-bounds read when saving TIFFs with custom metadata through LibTIFF
  - An out-of-bounds read when saving a GIF of 1px width

### `2020-35653`: Buffer read overrun in PCX decoding

The PCX image decoder used the reported image stride to calculate the row buffer, rather than calculating it from the image size. This issue dates back to the PIL fork. Thanks to Google's [OSS-Fuzz](https://github.com/google/oss-fuzz) project for finding this.

### `2020-35654`: TIFF out-of-bounds write error

Out-of-bounds write in `TiffDecode.c` when reading corrupt YCbCr files in some LibTIFF versions (4.1.0/Ubuntu 20.04, but not 4.0.9/Ubuntu 18.04). In some cases LibTIFF's interpretation of the file is different when reading in RGBA mode, leading to an out-of-bounds write in `TiffDecode.c`. This potentially affects Pillow versions from 6.0.0 to 8.0.1, depending on the version of LibTIFF. This was reported through [Tidelift](https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pillow&utm_medium=referral&utm_campaign=docs).

### `2020-35655`: SGI Decode buffer overrun

4 byte read overflow in `SgiRleDecode.c`, where the code was not correctly checking the offsets and length tables. Independently reported through [Tidelift](https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pillow&utm_medium=referral&utm_campaign=docs) and Google's [OSS-Fuzz](https://github.com/google/oss-fuzz). This vulnerability covers Pillow versions 4.3.0-\>8.0.1.

### Dependencies

OpenJPEG in the macOS and Linux wheels has been updated from 2.3.1 to 2.4.0, including security fixes.

LibTIFF in the macOS and Linux wheels has been updated from 4.1.0 to 4.2.0, including security fixes discovered by fuzzers.

## Deprecations

### FreeType 2.7

Support for FreeType 2.7 is deprecated and will be removed in Pillow 9.0.0 (2022-01-02), when FreeType 2.8 will be the minimum supported.

We recommend upgrading to at least FreeType [2.10.4](https://sourceforge.net/projects/freetype/files/freetype2/2.10.4/), which fixed a severe vulnerability introduced in FreeType 2.6 (`2020-15999`).

### Makefile

The `install-venv` target has been deprecated.

## API Additions

### Append images to ICO

When saving an ICO image, the file may contain versions of the image at different sizes. By default, Pillow will scale down the main image to create these copies.

With this release, a list of images can be provided to the `append_images` parameter when saving, to replace the scaled down versions. This is the same functionality that already exists for the ICNS format.

## Other Changes

### Makefile

The `co` target has been removed.

### PyPy wheels

Wheels have been added for PyPy 3.7.

### PySide6

Support has been added for PySide6. If it is installed, it will be used instead of PyQt5 or PySide2, since it is based on a newer Qt.

---

8.1.1.md

---

# 8.1.1

## Security

### `2021-25289`: Correct the fix for `2020-35654`

The previous fix for `2020-35654` was insufficient due to incorrect error checking in `TiffDecode.c`.

### `2021-25290`: Fix buffer overflow in `TiffDecode.c`

In `TiffDecode.c`, there is a negative-offset `memcpy` with an invalid size.

### `2021-25291`: Fix buffer overflow in `TIFFReadRGBATile`

In `TiffDecode.c`, invalid tile boundaries could lead to an out-of-bounds read in `TIFFReadRGBATile`.

### `2021-25292`: Fix DOS attack

The PDF parser has a catastrophic backtracking regex that could be used as a DOS attack.

### `2021-25293`: Fix buffer overflow in `SgiRleDecode.c`

There is an out-of-bounds read in `SgiRleDecode.c` since Pillow 4.3.0.

## Other Changes

A crash with the feature flags for libimagequant, libjpeg-turbo, WebP and XCB on unreleased Python 3.10 has been fixed (`5193`).

---

8.1.2.md

---

# 8.1.2

## Security

### `2021-27921`, `2021-27922`, `2021-27923`: Fix DOS attacks

There is an exhaustion of memory DOS attack in BLP, ICNS, ICO images where Pillow did not properly check the reported size of the contained image. These images could cause arbitrarily large memory allocations.

These issues were reported by Jiayi Lin, Luke Shaffer, Xinran Xie and Akshay Ajayan of [Arizona State University](https://www.asu.edu/).

---

8.2.0.md

---

# 8.2.0

## Security

These issues were all found with [OSS-Fuzz](https://github.com/google/oss-fuzz).

### `2021-25287`, `2021-25288`: OOB read in Jpeg2KDecode

  - For J2k images with multiple bands, it's legal to have different widths for each band, e.g. 1 byte for `L`, 4 bytes for `A`.
  - This dates to Pillow 2.4.0.

### `2021-28675`: DOS attack in PsdImagePlugin

  - :py\`.PsdImagePlugin.PsdImageFile\` did not sanity check the number of input layers with regard to the size of the data block, this could lead to a denial-of-service on :py\`\~PIL.Image.open\` prior to :py\`\~PIL.Image.Image.load\`.
  - This dates to the PIL fork.

### `2021-28676`: FLI image DOS attack

  - `FliDecode.c` did not properly check that the block advance was non-zero, potentially leading to an infinite loop on load.
  - This dates to the PIL fork.

### `2021-28677`: EPS DOS on \_open

  - The readline used in EPS has to deal with any combination of `\r` and `\n` as line endings. It accidentally used a quadratic method of accumulating lines while looking for a line ending.
  - A malicious EPS file could use this to perform a denial-of-service of Pillow in the open phase, before an image was accepted for opening.
  - This dates to the PIL fork.

### `2021-28678`: BLP DOS attack

  - `BlpImagePlugin` did not properly check that reads after jumping to file offsets returned data. This could lead to a denial-of-service where the decoder could be run a large number of times on empty data.
  - This dates to Pillow 5.1.0.

### Fix memory DOS in ImageFont

  - A corrupt or specially crafted TTF font could have font metrics that lead to unreasonably large sizes when rendering text in font. `ImageFont.py` did not check the image size before allocating memory for it.
  - This dates to the PIL fork.

## Deprecations

### Categories

`im.category` is deprecated and will be removed in Pillow 10.0.0 (2023-07-01), along with the related `Image.NORMAL`, `Image.SEQUENCE` and `Image.CONTAINER` attributes.

To determine if an image has multiple frames or not, `getattr(im, "is_animated", False)` can be used instead.

### Tk/Tcl 8.4

Support for Tk/Tcl 8.4 is deprecated and will be removed in Pillow 10.0.0 (2023-07-01), when Tk/Tcl 8.5 will be the minimum supported.

## API Changes

### Image.alpha\_composite: dest

When calling :py\`\~PIL.Image.Image.alpha\_composite\`, the `dest` argument now accepts negative co-ordinates, like the upper left corner of the `box` argument of :py\`\~PIL.Image.Image.paste\` can be negative. Naturally, this has effect of cropping the overlaid image.

### Image.getexif: EXIF and GPS IFD

Previously, :py\`\~PIL.Image.Image.getexif\` flattened the EXIF IFD into the rest of the data, losing information. This information is now kept separate, moved under `im.getexif().get_ifd(0x8769)`.

Direct access to the GPS IFD dictionary was possible through `im.getexif()[0x8825]`. This is now consistent with other IFDs, and must be accessed through `im.getexif().get_ifd(0x8825)`.

These changes only affect :py\`\~PIL.Image.Image.getexif\`, introduced in Pillow 6.0. The older `_getexif()` methods are unaffected.

### Image.\_MODEINFO

This internal dictionary had been deprecated by a comment since PIL, and is now removed. Instead, `Image.getmodebase()`, `Image.getmodetype()`, `Image.getmodebandnames()`, `Image.getmodebands()` or `ImageMode.getmode()` can be used.

## API Additions

### getxmp() for JPEG images

A new method has been added to return [XMP data](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform) for JPEG images. It reads the XML data into a dictionary of names and values.

For example:

    >>> from PIL import Image
    >>> with Image.open("Tests/images/xmp_test.jpg") as im:
    >>>     print(im.getxmp())
    {'RDF': {}, 'Description': {'Version': '10.4', 'ProcessVersion': '10.0', ...}, ...}

### ImageDraw.rounded\_rectangle

Added :py\`\~PIL.ImageDraw.ImageDraw.rounded\_rectangle\`. It works the same as :py\`\~PIL.ImageDraw.ImageDraw.rectangle\`, except with an additional `radius` argument. `radius` is limited to half of the width or the height, so that users can create a circle, but not any other ellipse. :

    from PIL import Image, ImageDraw
    im = Image.new("RGB", (200, 200))
    draw = ImageDraw.Draw(im)
    draw.rounded_rectangle(xy=(10, 20, 190, 180), radius=30, fill="red")

### ImageOps.autocontrast: preserve\_tone

The default behaviour of :py\`\~PIL.ImageOps.autocontrast\` is to normalize separate histograms for each color channel, changing the tone of the image. The new `preserve_tone` argument keeps the tone unchanged by using one luminance histogram for all channels.

### ImageShow.GmDisplayViewer

If GraphicsMagick is present, this new :py\`PIL.ImageShow.Viewer\` subclass will be registered. It uses [GraphicsMagick](http://www.graphicsmagick.org/), an [ImageMagick](https://imagemagick.org/) fork, to display images.

The GraphicsMagick based viewer has a lower priority than its ImageMagick counterpart. Thus, if both ImageMagick and GraphicsMagick are installed, `im.show()` and :py\`.ImageShow.show()\` prefer the viewer based on ImageMagick, i.e the behaviour stays the same for Pillow users having ImageMagick installed.

### ImageShow.IPythonViewer

If IPython is present, this new :py\`PIL.ImageShow.Viewer\` subclass will be registered. It displays images on all IPython frontends. This will be helpful to users of Google Colab, allowing `im.show()` to display images.

It is lower in priority than the other default :py\`PIL.ImageShow.Viewer\` instances, so it will only be used by `im.show()` or :py\`.ImageShow.show()<span class="title-ref"> if none of the other viewers are available. This means that the behaviour of :py\`PIL.ImageShow</span> will stay the same for most Pillow users.

### Saving TIFF with ICC profile

As is already possible for JPEG, PNG and WebP, the ICC profile for TIFF files can now be specified through a keyword argument:

    im.save("out.tif", icc_profile=...)

## Other Changes

### GIF writer uses LZW encoding

GIF files are now written using LZW encoding, which will generate smaller files, typically about 70% of the size generated by the older encoder.

The pixel data is encoded using the format specified in the [CompuServe GIF standard](https://www.w3.org/Graphics/GIF/spec-gif89a.txt).

The older encoder used a variant of run-length encoding that was compatible but less efficient.

### GraphicsMagick

The test suite can now be run on systems which have [GraphicsMagick](http://www.graphicsmagick.org/) but not [ImageMagick](https://imagemagick.org/) installed. If both are installed, the tests prefer ImageMagick.

### Libraqm and FriBiDi linking

The way the libraqm dependency for complex text scripts is linked has been changed:

Source builds will now link against the system version of libraqm at build time rather than at runtime by default.

Binary wheels now include a statically linked modified version of libraqm that links against FriBiDi at runtime instead. This change is intended to address issues with the previous implementation on some platforms. These are created by building Pillow with the new build flags `--vendor-raqm --vendor-fribidi`.

Windows users will now need to install `fribidi.dll` (or `fribidi-0.dll`) only, `libraqm.dll` is no longer used.

See \[installation documentation\<../installation\>\](installation documentation\<../installation\>.md) for more information.

### PyQt6

Support has been added for PyQt6. If it is installed, it will be used instead of PySide6, PyQt5 or PySide2.

---

8.3.0.md

---

# 8.3.0

## Security

### `2021-34552`: Fix buffer overflow

PIL since 1.1.4 and Pillow since 1.0 allowed parameters passed into a convert function to trigger buffer overflow in `Convert.c`.

### Parsing XML

Pillow previously parsed XMP data using Python's `xml` module. However, this module is not secure.

  - :py\`\~PIL.Image.Image.getexif\` has used `xml` to potentially retrieve orientation data since Pillow 7.2.0. It has been refactored to use `re` instead.
  - `getxmp()` was added to :py\`\~PIL.JpegImagePlugin.JpegImageFile\` in Pillow 8.2.0. It will now use `defusedxml` instead. If the dependency is not present, an empty dictionary will be returned and a warning raised.

## Deprecations

### JpegImagePlugin.convert\_dict\_qtables

JPEG `quantization` is now automatically converted, but still returned as a dictionary. The `convert_dict_qtables` method no longer performs any operations on the data given to it, has been deprecated and will be removed in Pillow 10.0.0 (2023-07-01).

## API Changes

### Changed WebP default "method" value when saving

Previously, it was 0, for the best speed. The default has now been changed to 4, to match WebP's default, for higher quality with still some speed optimisation.

### Default resampling filter for special image modes

Pillow 7.0 changed the default resampling filter to `Image.BICUBIC`. However, as this is not supported yet for images with a custom number of bits, the default filter for those modes has been reverted to `Image.NEAREST`.

### ImageMorph incorrect mode errors

For `apply()`, `match()` and `get_on_pixels()`, if the image mode is not L, an :py\`Exception\` was thrown. This has now been changed to a :py\`ValueError\`.

### getxmp()

[XMP data](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform) can now be returned for PNG and TIFF images, through `getxmp()` for each format.

The returned dictionary will start from the base of the XML, meaning that the top level should contain an "xmpmeta" key. JPEG's `getxmp()` method has also been updated to this structure.

### TIFF getexif()

TIFF :py\`\~PIL.TiffImagePlugin.TiffImageFile.tag\_v2\` data can now be accessed through :py\`\~PIL.Image.Image.getexif\`. This also provides access to the GPS and EXIF IFDs, through `im.getexif().get_ifd(0x8825)` and `im.getexif().get_ifd(0x8769)` respectively.

## API Additions

### ImageOps.contain

Returns a resized version of the image, set to the maximum width and height within `size`, while maintaining the original aspect ratio.

To compare it to other ImageOps methods:

  - :py\`\~PIL.ImageOps.fit\` expands an image until is fills `size`, cropping the parts of the image that do not fit.
  - :py\`\~PIL.ImageOps.pad\` expands an image to fill `size`, without cropping, but instead filling the extra space with `color`.
  - :py\`\~PIL.ImageOps.contain\` is similar to :py\`\~PIL.ImageOps.pad\`, but it does not fill the extra space. Instead, the original aspect ratio is maintained. So unlike the other two methods, it is not guaranteed to return an image of `size`.

### ICO saving: bitmap\_format argument

By default, Pillow saves ICO files in the PNG format. They can now also be saved in BMP format, through the new `bitmap_format` argument:

    im.save("out.ico", bitmap_format="bmp")

## Other Changes

### Added DDS BC5 reading and uncompressed saving

Support has been added to read the BC5 format of DDS images, whether UNORM, SNORM or TYPELESS.

Support has also been added to write the uncompressed format of DDS images.

---

8.3.1.md

---

# 8.3.1

## Fixed regression converting to NumPy arrays

This fixes a regression introduced in 8.3.0 when converting an image to a NumPy array with a `dtype` argument.

`` `pycon     >>> from PIL import Image     >>> import numpy     >>> im = Image.new("RGB", (100, 100))     >>> numpy.array(im, dtype=numpy.float64)     Traceback (most recent call last):       File "<stdin>", line 1, in <module>     TypeError: __array__() takes 1 positional argument but 2 were given     >>>  Catch OSError when checking if destination is sys.stdout ``\` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In 8.3.0, a check to see if the destination was `sys.stdout` when saving an image was updated. This lead to an :py\`OSError\` being raised if the environment restricted access.

The :py\`OSError\` is now silently caught.

## Fixed removing orientation in ImageOps.exif\_transpose

In 8.3.0, :py\`\~PIL.ImageOps.exif\_transpose\` was changed to ensure that the original image EXIF data was not modified, and the orientation was only removed from the modified copy.

However, for certain images the orientation was already missing from the modified image, leading to a :py\`KeyError\`.

This error has been resolved, and the copying of metadata to the modified image improved.

---

8.3.2.md

---

# 8.3.2

## Security

### `2021-23437`: Avoid potential ReDoS (regular expression denial of service)

Avoid a potential ReDoS (regular expression denial of service) in :py\`\~PIL.ImageColor\`'s :py\`\~PIL.ImageColor.getrgb\` by raising :py\`ValueError\` if the color specifier is too long. Present since Pillow 5.2.0.

### Fix 6-byte out-of-bounds (OOB) read

Fix 6-byte out-of-bounds (OOB) read. The previous bounds check in `FliDecode.c` incorrectly calculated the required read buffer size when copying a chunk, potentially reading six extra bytes off the end of the allocated buffer from the heap. Present since Pillow 7.1.0.

This bug was found by Google's [OSS-Fuzz](https://github.com/google/oss-fuzz) [CIFuzz](https://google.github.io/oss-fuzz/getting-started/continuous-integration/) runs.

## Other Changes

### Python 3.10 wheels

Pillow now includes binary wheels for Python 3.10.

The Python 3.10 release candidate was released on 2021-08-03 with the final release due 2021-10-04 (`619`). The CPython core team strongly encourages maintainers of third-party Python projects to prepare for 3.10 compatibility. And as there are [no ABI changes](https://www.python.org/downloads/release/python-3100rc1/) planned we are releasing wheels to help others prepare for 3.10, and ensure Pillow can be used immediately on release day of 3.10.0 final.

### Fixed regressions

  - Ensure TIFF `RowsPerStrip` is multiple of 8 for JPEG compression (`5588`).
  - Updates for :py\`\~PIL.ImagePalette\` channel order (`5599`).
  - Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library (`5651`).

---

8.4.0.md

---

# 8.4.0

## Deprecations

### ImagePalette size parameter

The `size` parameter will be removed in Pillow 10.0.0 (2023-07-01).

Before Pillow 8.3.0, `ImagePalette` required palette data of particular lengths by default, and the size parameter could be used to override that. Pillow 8.3.0 removed the default required length, also removing the need for the size parameter.

## API Additions

### Added "transparency" argument for loading EPS images

This new argument switches the Ghostscript device from "ppmraw" to "pngalpha", generating an RGBA image with a transparent background instead of an RGB image with a white background. :

    with Image.open("sample.eps") as im:
        im.load(transparency=True)

### Added WalImageFile class

:py\`PIL.WalImageFile.open()<span class="title-ref"> previously returned a generic :py\`PIL.Image.Image</span> instance. It now returns a dedicated :py\`PIL.WalImageFile.WalImageFile\` class.

## Other Changes

### Speed improvement when rotating square images

Starting with Pillow 3.3.0, the speed of rotating images by 90 or 270 degrees was improved by quickly returning :py\`\~PIL.Image.Image.transpose\` instead, if the rotate operation allowed for expansion and did not specify a center or post-rotate translation.

Since the `expand` flag makes no difference for square images though, Pillow now uses this faster method for square images without the `expand` flag as well.

---

9.0.0.md

---

# 9.0.0

## Fredrik Lundh

This release is dedicated to the memory of Fredrik Lundh, aka Effbot, who died in November 2021. Fredrik created PIL in 1995 and he was instrumental in the early success of Python.

[Guido wrote](https://mail.python.org/archives/list/python-dev@python.org/thread/36Q5QBILL3QIFIA3KHNGFBNJQKXKN7SD/):

> Fredrik was an early Python contributor (e.g. Elementtree and the 're' module) and his enthusiasm for the language and community were inspiring for all who encountered him or his work. He spent countless hours on comp.lang.python answering questions from newbies and advanced users alike.
> 
> He also co-founded an early Python startup, Secret Labs AB, which among other software released an IDE named PythonWorks. Fredrik also created the Python Imaging Library (PIL) which is still THE way to interact with images in Python, now most often through its Pillow fork. His effbot.org site was a valuable resource for generations of Python users, especially its Tkinter documentation.

Thank you, Fredrik.

## Security

### Ensure JpegImagePlugin stops at the end of a truncated file

`JpegImagePlugin` may append an EOF marker to the end of a truncated file, so that the last segment of the data will still be processed by the decoder.

If the EOF marker is not detected as such however, this could lead to an infinite loop where `JpegImagePlugin` keeps trying to end the file.

### Remove consecutive duplicate tiles that only differ by their offset

To prevent attempts to slow down loading times for images, if an image has consecutive duplicate tiles that only differ by their offset, only load the last tile. Credit to Google's [OSS-Fuzz](https://github.com/google/oss-fuzz) project for finding this issue.

### `2022-22817`: Restrict builtins available to ImageMath.eval

To limit :py\`PIL.ImageMath\` to working with images, Pillow will now restrict the builtins available to :py\`\!PIL.ImageMath.eval\`. This will help prevent problems arising if users evaluate arbitrary expressions, such as `ImageMath.eval("exec(exit())")`.

### `2022-22815`, `2022-22816`: ImagePath.Path array handling

`2022-22815` (`126`) and `2022-22816` (`665`) were found when initializing `ImagePath.Path`.

## Backwards Incompatible Changes

### Python 3.6

Pillow has dropped support for Python 3.6, which reached end-of-life on 2021-12-23.

### PILLOW\_VERSION constant

`PILLOW_VERSION` has been removed. Use `__version__` instead.

### FreeType 2.7

Support for FreeType 2.7 has been removed; FreeType 2.8 is the minimum supported.

We recommend upgrading to at least [FreeType](https://freetype.org/) 2.10.4, which fixed a severe vulnerability introduced in FreeType 2.6 (`2020-15999`).

### Image.show command parameter

The `command` parameter has been removed. Use a subclass of :py\`PIL.ImageShow.Viewer\` instead.

### Image.\_showxv

`Image._showxv` has been removed. Use :py\`\~PIL.Image.Image.show\` instead. If custom behaviour is required, use :py\`\~PIL.ImageShow.register\` to add a custom :py\`\~PIL.ImageShow.Viewer\` class.

### ImageFile.raise\_ioerror

:py\`IOError\` was merged into :py\`OSError\` in Python 3.3. So, `ImageFile.raise_ioerror` has been removed. Use `ImageFile.raise_oserror` instead.

## API Changes

### Added line width parameter to ImageDraw polygon

An optional line `width` parameter has been added to `ImageDraw.Draw.polygon`.

## API Additions

### ImageShow.XDGViewer

If `xdg-open` is present on Linux, this new :py\`PIL.ImageShow.Viewer\` subclass will be registered. It displays images using the application selected by the system.

It is higher in priority than the other default :py\`PIL.ImageShow.Viewer\` instances, so it will be preferred by `im.show()` or :py\`.ImageShow.show()\`.

### Added support for "title" argument to DisplayViewer

Support has been added for the "title" argument in :py\`\~PIL.ImageShow.UnixViewer.DisplayViewer\`, so that when `im.show()` or :py\`.ImageShow.show()<span class="title-ref"> use the </span><span class="title-ref">display</span><span class="title-ref"> command line tool, the "title" argument will also now be supported, e.g. </span><span class="title-ref">im.show(title="My Image")</span><span class="title-ref"> and </span><span class="title-ref">ImageShow.show(im, title="My Image")</span>\`.

## Other Changes

### Convert subsequent GIF frames to RGB or RGBA

Since each frame of a GIF can have up to 256 colors, after the first frame it is possible for there to be too many colors to fit in a P mode image. To allow for this, seeking to any subsequent GIF frame will now convert the image to RGB or RGBA, depending on whether or not the first frame had transparency.

### Switched to libjpeg-turbo in macOS and Linux wheels

The Pillow wheels from PyPI for macOS and Linux have switched from libjpeg to libjpeg-turbo. It is a fork of libjpeg, popular for its speed.

Because different JPEG decoders load images differently, JPEG pixels may be altered slightly with this change.

### Added support for pickling TrueType fonts

TrueType fonts may now be pickled and unpickled. For example:

    import pickle
    from PIL import ImageFont
    
    font = ImageFont.truetype("arial.ttf", size=30)
    pickled_font = pickle.dumps(font, protocol=pickle.HIGHEST_PROTOCOL)
    
    # Later...
    unpickled_font = pickle.loads(pickled_font)

### Added support for additional TGA orientations

TGA images with top right or bottom right orientations are now supported.

---

9.0.1.md

---

# 9.0.1

## Security

This release addresses several security problems.

### `2022-24303`: Temp image removal

If the path to the temporary directory on Linux or macOS contained a space, this would break removal of the temporary image file after `im.show()` (and related actions), and potentially remove an unrelated file. This has been present since PIL.

### `2022-22817`: Restrict lambda expressions

While Pillow 9.0 restricted top-level builtins available to :py\`\!PIL.ImageMath.eval\`, it did not prevent builtins available to lambda expressions. These are now also restricted.

## Other Changes

Pillow 9.0 added support for `xdg-open` as an image viewer, but there have been reports that the temporary image file was removed too quickly to be loaded into the final application. A delay has been added.

---

9.1.0.md

---

# 9.1.0

## Deprecations

### Constants

A number of constants have been deprecated and will be removed in Pillow 10.0.0 (2023-07-01). Instead, :py\`enum.IntEnum\` classes have been added.

\> **Note** \> Some of these deprecations were restored in Pillow 9.4.0. See \[restored-image-constants\](\#restored-image-constants)

| Deprecated                                          | Use instead                                              |
| --------------------------------------------------- | -------------------------------------------------------- |
| `Image.NONE`                                        | Either `Image.Dither.NONE` or `Image.Resampling.NEAREST` |
| `Image.NEAREST`                                     | Either `Image.Dither.NONE` or `Image.Resampling.NEAREST` |
| `Image.ORDERED`                                     | `Image.Dither.ORDERED`                                   |
| `Image.RASTERIZE`                                   | `Image.Dither.RASTERIZE`                                 |
| `Image.FLOYDSTEINBERG`                              | `Image.Dither.FLOYDSTEINBERG`                            |
| `Image.WEB`                                         | `Image.Palette.WEB`                                      |
| `Image.ADAPTIVE`                                    | `Image.Palette.ADAPTIVE`                                 |
| `Image.AFFINE`                                      | `Image.Transform.AFFINE`                                 |
| `Image.EXTENT`                                      | `Image.Transform.EXTENT`                                 |
| `Image.PERSPECTIVE`                                 | `Image.Transform.PERSPECTIVE`                            |
| `Image.QUAD`                                        | `Image.Transform.QUAD`                                   |
| `Image.MESH`                                        | `Image.Transform.MESH`                                   |
| `Image.FLIP_LEFT_RIGHT`                             | `Image.Transpose.FLIP_LEFT_RIGHT`                        |
| `Image.FLIP_TOP_BOTTOM`                             | `Image.Transpose.FLIP_TOP_BOTTOM`                        |
| `Image.ROTATE_90`                                   | `Image.Transpose.ROTATE_90`                              |
| `Image.ROTATE_180`                                  | `Image.Transpose.ROTATE_180`                             |
| `Image.ROTATE_270`                                  | `Image.Transpose.ROTATE_270`                             |
| `Image.TRANSPOSE`                                   | `Image.Transpose.TRANSPOSE`                              |
| `Image.TRANSVERSE`                                  | `Image.Transpose.TRANSVERSE`                             |
| `Image.BOX`                                         | `Image.Resampling.BOX`                                   |
| `Image.BILINEAR`                                    | `Image.Resampling.BILINEAR`                              |
| `Image.LINEAR`                                      | `Image.Resampling.BILINEAR`                              |
| `Image.HAMMING`                                     | `Image.Resampling.HAMMING`                               |
| `Image.BICUBIC`                                     | `Image.Resampling.BICUBIC`                               |
| `Image.CUBIC`                                       | `Image.Resampling.BICUBIC`                               |
| `Image.LANCZOS`                                     | `Image.Resampling.LANCZOS`                               |
| `Image.ANTIALIAS`                                   | `Image.Resampling.LANCZOS`                               |
| `Image.MEDIANCUT`                                   | `Image.Quantize.MEDIANCUT`                               |
| `Image.MAXCOVERAGE`                                 | `Image.Quantize.MAXCOVERAGE`                             |
| `Image.FASTOCTREE`                                  | `Image.Quantize.FASTOCTREE`                              |
| `Image.LIBIMAGEQUANT`                               | `Image.Quantize.LIBIMAGEQUANT`                           |
| `ImageCms.INTENT_PERCEPTUAL`                        | `ImageCms.Intent.PERCEPTUAL`                             |
| `ImageCms.INTENT_RELATIVE_COLORMETRIC`              | `ImageCms.Intent.RELATIVE_COLORMETRIC`                   |
| `ImageCms.INTENT_SATURATION`                        | `ImageCms.Intent.SATURATION`                             |
| `ImageCms.INTENT_ABSOLUTE_COLORIMETRIC`             | `ImageCms.Intent.ABSOLUTE_COLORIMETRIC`                  |
| `ImageCms.DIRECTION_INPUT`                          | `ImageCms.Direction.INPUT`                               |
| `ImageCms.DIRECTION_OUTPUT`                         | `ImageCms.Direction.OUTPUT`                              |
| `ImageCms.DIRECTION_PROOF`                          | `ImageCms.Direction.PROOF`                               |
| `ImageFont.LAYOUT_BASIC`                            | `ImageFont.Layout.BASIC`                                 |
| `ImageFont.LAYOUT_RAQM`                             | `ImageFont.Layout.RAQM`                                  |
| `BlpImagePlugin.BLP_FORMAT_JPEG`                    | `BlpImagePlugin.Format.JPEG`                             |
| `BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED`          | `BlpImagePlugin.Encoding.UNCOMPRESSED`                   |
| `BlpImagePlugin.BLP_ENCODING_DXT`                   | `BlpImagePlugin.Encoding.DXT`                            |
| `BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA` | `BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA`          |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1`            | `BlpImagePlugin.AlphaEncoding.DXT1`                      |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3`            | `BlpImagePlugin.AlphaEncoding.DXT3`                      |
| `BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5`            | `BlpImagePlugin.AlphaEncoding.DXT5`                      |
| `FtexImagePlugin.FORMAT_DXT1`                       | `FtexImagePlugin.Format.DXT1`                            |
| `FtexImagePlugin.FORMAT_UNCOMPRESSED`               | `FtexImagePlugin.Format.UNCOMPRESSED`                    |
| `PngImagePlugin.APNG_DISPOSE_OP_NONE`               | `PngImagePlugin.Disposal.OP_NONE`                        |
| `PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND`         | `PngImagePlugin.Disposal.OP_BACKGROUND`                  |
| `PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS`           | `PngImagePlugin.Disposal.OP_PREVIOUS`                    |
| `PngImagePlugin.APNG_BLEND_OP_SOURCE`               | `PngImagePlugin.Blend.OP_SOURCE`                         |
| `PngImagePlugin.APNG_BLEND_OP_OVER`                 | `PngImagePlugin.Blend.OP_OVER`                           |

### ImageShow.Viewer.show\_file file argument

The `file` argument in :py\`\~PIL.ImageShow.Viewer.show\_file()<span class="title-ref"> has been deprecated and will be removed in Pillow 10.0.0 (2023-07-01). It has been replaced by </span><span class="title-ref">path</span>\`.

In effect, `viewer.show_file("test.jpg")` will continue to work unchanged. `viewer.show_file(file="test.jpg")` will raise a deprecation warning, and suggest `viewer.show_file(path="test.jpg")` instead.

### FitsStubImagePlugin

<div class="deprecated">

9.1.0

</div>

The stub image plugin `FitsStubImagePlugin` has been deprecated and will be removed in Pillow 10.0.0 (2023-07-01). FITS images can be read without a handler through `~PIL.FitsImagePlugin` instead.

## API Changes

### Raise an error when performing a negative crop

Performing a negative crop on an image previously just returned a `(0, 0)` image. Now it will raise a :py\`ValueError\`, to help reduce confusion if a user has unintentionally provided the wrong arguments.

### Added specific error if path coordinate type is incorrect

Rather than returning a :py\`SystemError\`, passing the incorrect types of coordinates into a path will now raise a more specific :py\`ValueError\`, with the message "incorrect coordinate type".

### Replace requirements.txt with extras

Rather than installing all dependencies for docs and tests via `requirements.txt`, `extras_require` is used instead. This installs only those needed and at the same time as installing Pillow.

For example:

`` `bash     # Install with dependencies for tests:     python3 -m pip install .[tests]      # Or for building docs:     python3 -m pip install .[docs]      # Or for all:     python3 -m pip install .[docs,tests]  On macOS, the last argument may need to be wrapped in quotes, e.g. ``<span class="title-ref"> </span><span class="title-ref">python3 -m pip install ".\[tests\]"</span>\`

Therefore `requirements.txt` has been removed along with the `make install-req` command for installing its contents.

## API Additions

### Added get\_photoshop\_blocks() to parse Photoshop TIFF tag

:py\`\~PIL.TiffImagePlugin.TiffImageFile.get\_photoshop\_blocks\` has been added, to allow users to determine what Photoshop "Image Resource Blocks" are contained within an image. The keys of the returned dictionary are the image resource IDs.

At present, the information within each block is merely returned as a dictionary with a "data" entry. This will allow more useful information to be added in the future without breaking backwards compatibility.

### Added mct and no\_jp2 options for saving JPEG 2000

The :py\`PIL.Image.Image.save\` method now supports the following options for JPEG 2000:

  - **mct**  
    If `1` then enable multiple component transformation when encoding, otherwise use `0` for no component transformation (default). If MCT is enabled and `irreversible` is `True` then the Irreversible Color Transformation will be applied, otherwise encoding will use the Reversible Color Transformation. MCT works best with a `mode` of `RGB` and is only applicable when the image data has 3 components.

  - **no\_jp2**  
    If `True` then don't wrap the raw codestream in the JP2 file format when saving, otherwise the extension of the filename will be used to determine the format (default).

### Added PyEncoder

:py\`\~PIL.ImageFile.PyEncoder\` has been added, allowing for file encoders to be written in Python. See \[Writing Your Own File Codec in Python\<file-codecs-py\>\](\#writing-your-own-file-codec-in-python\<file-codecs-py\>) for more information.

### GifImagePlugin loading strategy

Pillow 9.0.0 introduced the conversion of subsequent GIF frames to `RGB` or `RGBA`. This behaviour can now be changed so that the first `P` frame is converted to `RGB` as well. :

    from PIL import GifImagePlugin
    GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_ALWAYS

Or subsequent frames can be kept in `P` mode as long as there is only a single palette. :

    from PIL import GifImagePlugin
    GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_AFTER_DIFFERENT_PALETTE_ONLY

## Other Changes

### musllinux wheels

Pillow now builds binary wheels for musllinux, suitable for Linux distributions based on the musl C standard library such as Alpine (rather than the glibc library used by manylinux wheels). See `656`.

### ImageShow temporary files on Unix

When calling :py\`\~PIL.Image.Image.show\` or using :py`~PIL.ImageShow`, a temporary file is created from the image. On Unix, Pillow will no longer delete these files, and instead leave it to the operating system to do so.

### Image.\_[repr\_pretty]()

`im._repr_pretty_` has been added to provide a representation of an image without the identity of the object. This allows Jupyter to describe an image and have that description stay the same on subsequent executions of the same code.

### Added BigTIFF reading

Support has been added for reading BigTIFF images.

### Added BLP saving

Support has been added for saving BLP images. `blp_version` can be used to specify whether the image should be saved as BLP1 or BLP2, e.g. `im.save("out.blp", blp_version="BLP1")`. By default, BLP2 will be used.

---

9.1.1.md

---

# 9.1.1

## Security

This release addresses several security issues.

### `2022-30595`: Heap buffer overflow

When reading a TGA file with RLE packets that cross scan lines, Pillow reads the information past the end of the first line without deducting that from the length of the remaining file data. This vulnerability was introduced in Pillow 9.1.0, and can cause a heap buffer overflow.

### Decompression bomb check fix

Opening an image with a zero or negative height has been found to bypass a decompression bomb check. This will now raise a :py\`SyntaxError\` instead, in turn raising a `PIL.UnidentifiedImageError`.

---

9.2.0.md

---

# 9.2.0

## Security

An additional decompression bomb check has been added for the GIF format.

## Deprecations

### PyQt5 and PySide2

<div class="deprecated">

9.2.0

</div>

[Qt 5 reached end-of-life](https://www.qt.io/blog/qt-5.15-released) on 2020-12-08 for open-source users (and will reach EOL on 2023-12-08 for commercial licence holders).

Support for PyQt5 and PySide2 has been deprecated from `ImageQt` and will be removed in Pillow 10 (2023-07-01). Upgrade to [PyQt6](https://www.riverbankcomputing.com/static/Docs/PyQt6/) or [PySide6](https://doc.qt.io/qtforpython-6/) instead.

### FreeTypeFont.getmask2 fill parameter

<div class="deprecated">

9.2.0

</div>

The undocumented `fill` parameter of :py\`.FreeTypeFont.getmask2\` has been deprecated and will be removed in Pillow 10 (2023-07-01).

### PhotoImage.paste box parameter

<div class="deprecated">

9.2.0

</div>

The `box` parameter is unused. It will be removed in Pillow 10.0.0 (2023-07-01).

### Image.coerce\_e

<div class="deprecated">

9.2.0

</div>

This undocumented method has been deprecated and will be removed in Pillow 10 (2023-07-01).

### Font size and offset methods

<div class="deprecated">

9.2.0

</div>

Several functions for computing the size and offset of rendered text have been deprecated and will be removed in Pillow 10 (2023-07-01):

| Deprecated                                                  | Use instead                                                                                        |
| ----------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |
| `FreeTypeFont.getsize()` and `FreeTypeFont.getoffset()`     | :py\`.FreeTypeFont.getbbox\` and :py\`.FreeTypeFont.getlength\`                                    |
| `FreeTypeFont.getsize_multiline()`                          | :py\`.ImageDraw.multiline\_textbbox\`                                                              |
| `ImageFont.getsize()`                                       | :py\`.ImageFont.getbbox\` and :py\`.ImageFont.getlength\`                                          |
| `TransposedFont.getsize()`                                  | :py\`.TransposedFont.getbbox\` and :py\`.TransposedFont.getlength\`                                |
| `ImageDraw.textsize()` and `ImageDraw.multiline_textsize()` | :py\`.ImageDraw.textbbox\`, :py\`.ImageDraw.textlength\` and :py\`.ImageDraw.multiline\_textbbox\` |
| `ImageDraw2.Draw.textsize()`                                | :py\`.ImageDraw2.Draw.textbbox\` and :py\`.ImageDraw2.Draw.textlength\`                            |

Previous code:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    width, height = font.getsize("Hello world")
    left, top = font.getoffset("Hello world")
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    width, height = draw.textsize("Hello world", font)
    
    width, height = font.getsize_multiline("Hello\nworld")
    width, height = draw.multiline_textsize("Hello\nworld", font)

Use instead:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    left, top, right, bottom = font.getbbox("Hello world")
    width, height = right - left, bottom - top
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    width = draw.textlength("Hello world", font)
    
    left, top, right, bottom = draw.multiline_textbbox((0, 0), "Hello\nworld", font)
    width, height = right - left, bottom - top

Previously, the `size` methods returned a `height` that included the vertical offset of the text, while the new `bbox` methods distinguish this as a `top` offset.

![In bbox methods, top measures the vertical distance above the text, while bottom measures that plus the vertical distance of the text itself. In size methods, height also measures the vertical distance above the text plus the vertical distance of the text itself.](../example/size_vs_bbox.webp)

If you are using these methods for aligning text, consider using \[text-anchors\](\#text-anchors) instead which avoid issues that can occur with non-English text or unusual fonts. For example, instead of the following code:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    width, height = draw.textsize("Hello world", font)
    x, y = (100 - width) / 2, (100 - height) / 2
    draw.text((x, y), "Hello world", font=font)

Use instead:

    from PIL import Image, ImageDraw, ImageFont
    
    font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
    
    im = Image.new("RGB", (100, 100))
    draw = ImageDraw.Draw(im)
    draw.text((100 / 2, 100 / 2), "Hello world", font=font, anchor="mm")

## API Additions

### Image.apply\_transparency

Added :py\`\~PIL.Image.Image.apply\_transparency\`, a method to take a P mode image with "transparency" in `im.info`, and apply the transparency to the palette instead. The image's palette mode will become "RGBA", and "transparency" will be removed from `im.info`.

## Other Changes

### Using gnome-screenshot on Linux

In :py\`\~PIL.ImageGrab.grab\` on Linux, if `xdisplay` is `None` then `gnome-screenshot` will be used to capture the display if it is installed. To capture the default X11 display instead, pass `xdisplay=""`.

---

9.3.0.md

---

# 9.3.0

## Security

### Initialize libtiff buffer when saving

When saving a TIFF image to a file object using libtiff, the buffer was not initialized. This behaviour introduced in Pillow 2.0.0, and has now been fixed.

### Decode JPEG compressed BLP1 data in original mode

Within the BLP image format, BLP1 data may use JPEG compression. Instead of telling the JPEG library that this data is in BGRX mode, Pillow will now decode the data in its natural CMYK mode, then convert it to RGB and rearrange the channels afterwards. Trying to load the data in an incorrect mode could result in a segmentation fault. This issue was introduced in Pillow 9.1.0.

### Limit SAMPLESPERPIXEL to avoid runtime DOS

A large value in the `SAMPLESPERPIXEL` tag could lead to a memory and runtime DOS in `TiffImagePlugin.py` when setting up the context for image decoding. This was introduced in Pillow 9.2.0, found with [OSS-Fuzz](https://github.com/google/oss-fuzz) and fixed by limiting `SAMPLESPERPIXEL` to the number of planes that we can decode.

## API Additions

### Allow default ImageDraw font to be set

Rather than specifying a font when calling text-related ImageDraw methods, or setting a font on each ImageDraw instance, the default font can now be set for all future ImageDraw operations:

    from PIL import ImageDraw, ImageFont
    ImageDraw.ImageDraw.font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

### Saving multiple MPO frames

Multiple MPO frames can now be saved. Using the `save_all` argument, all of an image's frames will be saved to file:

    from PIL import Image
    im = Image.open("frozenpond.mpo")
    im.save(out, save_all=True)

Additional images can also be appended when saving, by combining the `save_all` argument with the `append_images` argument:

    im.save(out, save_all=True, append_images=[im1, im2, ...])

### Added ExifTags enums

The data from :py\`\~PIL.ExifTags.TAGS\` and :py\`\~PIL.ExifTags.GPSTAGS\` is now also exposed as :py\`enum.IntEnum\` classes: :py\`\~PIL.ExifTags.Base\` and :py\`\~PIL.ExifTags.GPS\`.

## Other Changes

### Python 3.11 wheels

Pillow 9.2.0 had wheels built against Python 3.11 beta, available as a preview to help others prepare for 3.11, and ensure Pillow can be used immediately on release day of 3.11.0 final (2022-10-24, `664`).

Pillow 9.3.0 now officially includes binary wheels for Python 3.11 final.

### Windows wheels

This release contains wheels for Windows built using GitHub Actions.

Previously they were built by [Christoph Gohlke](https://www.cgohlke.com/).

A huge thanks to Christoph for building Windows binaries for us for around a decade, plus testing, and fixing over a hundred bug fixes along the way, in addition to building and hosting unofficial Windows binaries for hundreds of Python projects\!

### Added DDS ATI1, ATI2 and BC6H reading

Support has been added to read the ATI1, ATI2 and BC6H formats of DDS images.

### Release GIL when converting images using matrix operations

Python's Global Interpreter Lock is now released when converting images using matrix operations.

### Show all frames with ImageShow

When calling :py\`\~PIL.Image.Image.show\` or using :py`~PIL.ImageShow`, all frames will now be shown.

---

9.4.0.md

---

# 9.4.0

## Security

### Fix memory DOS in ImageFont

A corrupt or specially crafted TTF font could have font metrics that lead to unreasonably large sizes when rendering text in font. `ImageFont.py` did not check the image size before allocating memory for it. This dates to the PIL fork. Pillow 8.2.0 added a check for large sizes, but did not consider the case where one dimension is zero.

### Null pointer dereference crash in ImageFont

Pillow attempted to dereference a null pointer in `ImageFont`, leading to a crash. An error is now raised instead. This has been present since Pillow 8.0.0.

## API Additions

### Added start position for getmask and getmask2

Text may render differently when starting at fractional coordinates, so :py\`.FreeTypeFont.getmask\` and :py\`.FreeTypeFont.getmask2\` now support a `start` argument. This tuple of horizontal and vertical offset will be used internally by :py\`.ImageDraw.text\` to more accurately place text at the `xy` coordinates.

### Added the `exact` encoding option for WebP

The `exact` encoding option for WebP is now supported. The WebP encoder removes the hidden RGB values for better compression by default in libwebp 0.5 or later. By setting this option to `True`, the encoder will keep the hidden RGB values.

### Added `signed` option when saving JPEG2000

If the `signed` keyword argument is present and true when saving JPEG2000 images, then tell the encoder to save the image as signed.

### Added IFD, Interop and LightSource ExifTags enums

:py\`\~PIL.ExifTags.IFD\` has been added, allowing enums to be used with :py\`\~PIL.Image.Exif.get\_ifd\`:

    from PIL import Image, ExifTags
    im = Image.open("Tests/images/flower.jpg")
    print(im.getexif().get_ifd(ExifTags.IFD.Exif))

`IFD1` can also be used with :py\`\~PIL.Image.Exif.get\_ifd\`, but it should not be used in other contexts, as the enum value is only internally meaningful.

:py\`\~PIL.ExifTags.Interop\` has been added for tags within the Interop IFD:

    from PIL import Image, ExifTags
    im = Image.open("Tests/images/flower.jpg")
    interop_ifd = im.getexif().get_ifd(ExifTags.IFD.Interop)
    print(interop_ifd.get(ExifTags.Interop.InteropIndex))  # R98

:py\`\~PIL.ExifTags.LightSource\` has been added for values within the LightSource tag:

    from PIL import Image, ExifTags
    im = Image.open("Tests/images/iptc.jpg")
    exif_ifd = im.getexif().get_ifd(ExifTags.IFD.Exif)
    print(ExifTags.LightSource(exif_ifd[0x9208]))  # LightSource.Unknown

### getxmp()

[XMP data](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform) can now be decoded for WEBP images through `getxmp()`.

### Writing JPEG comments

When saving a JPEG image, a comment can now be written from :py\`\~PIL.Image.Image.info\`, or by using an argument when saving:

    im.save(out, comment="Test comment")

## Other Changes

### Added support for DDS L and LA images

Support has been added to read and write L and LA DDS images in the uncompressed format, known as "luminance" textures.

### Constants

In Pillow 9.1.0, the following constants were deprecated. That has been reversed and these constants will now remain available.

  - `Image.NONE`
  - `Image.NEAREST`
  - `Image.ORDERED`
  - `Image.RASTERIZE`
  - `Image.FLOYDSTEINBERG`
  - `Image.WEB`
  - `Image.ADAPTIVE`
  - `Image.AFFINE`
  - `Image.EXTENT`
  - `Image.PERSPECTIVE`
  - `Image.QUAD`
  - `Image.MESH`
  - `Image.FLIP_LEFT_RIGHT`
  - `Image.FLIP_TOP_BOTTOM`
  - `Image.ROTATE_90`
  - `Image.ROTATE_180`
  - `Image.ROTATE_270`
  - `Image.TRANSPOSE`
  - `Image.TRANSVERSE`
  - `Image.BOX`
  - `Image.BILINEAR`
  - `Image.HAMMING`
  - `Image.BICUBIC`
  - `Image.LANCZOS`
  - `Image.MEDIANCUT`
  - `Image.MAXCOVERAGE`
  - `Image.FASTOCTREE`
  - `Image.LIBIMAGEQUANT`

---

9.5.0.md

---

# 9.5.0

## Security

### Clear PPM half token after use

Image files that are small on disk are often prevented from expanding to be big images consuming a large amount of resources simply because they lack the data to populate those resources.

PpmImagePlugin might hold onto the last data read for a pixel value in case the pixel value has not been finished yet. However, that data was not being cleared afterwards, meaning that infinite data could be available to fill any image size. This has been present since Pillow 9.2.0.

That data is now cleared after use.

### Saving TIFF tag ImageSourceData

If Pillow incorrectly saved the TIFF tag ImageSourceData as ASCII instead of UNDEFINED, a segmentation fault was triggered.

The correct tag type will now be used by default instead.

## Deprecations

### PSFile

The :py\`\!PSFile\` class has been deprecated and will be removed in Pillow 11 (2024-10-15). This class was only made as a helper to be used internally, so there is no replacement. If you need this functionality though, it is a very short class that can easily be recreated in your own code.

## API Additions

### QOI file format

Pillow can now read images in Quite OK Image format.

### Added `dpi` argument when saving PDFs

When saving a PDF, resolution could already be specified using the `resolution` argument. Now, a tuple of `(x_resolution, y_resolution)` can be provided as `dpi`. If both are provided, `dpi` will override `resolution`.

### Added `corners` argument to `ImageDraw.rounded_rectangle()`

:py\`.ImageDraw.rounded\_rectangle\` now accepts a keyword argument of `corners`. This a tuple of Booleans, specifying whether to round each corner, `(top_left, top_right, bottom_right, bottom_left)`.

### JPEG2000 comments and PLT marker

When opening a JPEG2000 image, the comment may now be read into :py\`\~PIL.Image.Image.info\`. The `comment` keyword argument can be used to save it back again.

If OpenJPEG 2.4.0 or later is available and the `plt` keyword argument is present and true when saving JPEG2000 images, tell the encoder to generate PLT markers.

## Other Changes

### Added support for saving PDFs in RGBA mode

Using the JPXDecode filter, PDFs can now be saved in RGBA mode.

### Improved I;16N support

Support has been added for I;16N access, packing and unpacking. Conversion to and from L mode has also been added.

### BGR;\* modes

It is now possible to create new BGR;15, BGR;16 and BGR;24 images. Conversely, BGR;32 has been removed from ImageMode and its associated methods, dropping the little support Pillow had for the mode.

With that, all modes listed under \[concept-modes\](\#concept-modes) can now be used to create a new image.

---

index.md

---

# Release Notes

Pillow is released quarterly on January 2nd, April 1st, July 1st and October 15th. Patch releases are created if the latest release contains severe bugs, or if security fixes are put together before a scheduled release. See \[versioning\](\#versioning) for more information.

Please use the latest version of Pillow. Functionality and security fixes should not be expected to be backported to earlier versions.

<div class="note">

<div class="title">

Note

</div>

Contributors please include release notes as needed or appropriate with your bug fixes, feature additions and tests.

</div>

<div class="toctree" data-maxdepth="2">

11.0.0 10.4.0 10.3.0 10.2.0 10.1.0 10.0.1 10.0.0 9.5.0 9.4.0 9.3.0 9.2.0 9.1.1 9.1.0 9.0.1 9.0.0 8.4.0 8.3.2 8.3.1 8.3.0 8.2.0 8.1.2 8.1.1 8.1.0 8.0.1 8.0.0 7.2.0 7.1.2 7.1.1 7.1.0 7.0.0 6.2.2 6.2.1 6.2.0 6.1.0 6.0.0 5.4.1 5.4.0 5.3.0 5.2.0 5.1.0 5.0.0 4.3.0 4.2.1 4.2.0 4.1.1 4.1.0 4.0.0 3.4.0 3.3.2 3.3.0 3.2.0 3.1.2 3.1.1 3.1.0 3.0.0 2.8.0 2.7.0 2.6.0 2.5.2 2.3.2 2.3.1 versioning

</div>

---

template.md

---

# xx.y.z

## Security

### TODO

TODO

### `YYYY-XXXXX`: TODO

TODO

## Backwards Incompatible Changes

### TODO

## Deprecations

### TODO

TODO

## API Changes

### TODO

TODO

## API Additions

### TODO

TODO

## Other Changes

### TODO

TODO

---

versioning.md

---

# Versioning

Pillow follows [Semantic Versioning](https://semver.org/):

> Given a version number MAJOR.MINOR.PATCH, increment the:
> 
> 1.  MAJOR version when you make incompatible API changes,
> 2.  MINOR version when you add functionality in a backwards compatible manner, and
> 3.  PATCH version when you make backwards compatible bug fixes.

Quarterly releases ("[Main Release](https://github.com/python-pillow/Pillow/blob/main/RELEASING.md#user-content-main-release)") bump at least the MINOR version, as new functionality has likely been added in the prior three months.

A quarterly release bumps the MAJOR version when incompatible API changes are made, such as removing deprecated APIs or dropping an EOL Python version. In practice, these occur every 12-18 months, guided by [Python's EOL schedule](https://devguide.python.org/#status-of-python-branches), and any APIs that have been deprecated for at least a year are removed at the same time.

PATCH versions ("[Point Release](https://github.com/python-pillow/Pillow/blob/main/RELEASING.md#user-content-point-release)" or "[Embargoed Release](https://github.com/python-pillow/Pillow/blob/main/RELEASING.md#user-content-embargoed-release)") are for security, installation or critical bug fixes. These are less common as it is preferred to stick to quarterly releases.

Between quarterly releases, `.dev0` is appended to the `main` branch, indicating that this is not a formally released copy.

---

CHANGES.rst

---

Changelog (Pillow)
==================

11.1.0 (unreleased)
-------------------

-   Removed use of os.path.realpath \#8545 \[radarhere\]
-   Allow linking to zlib import library on Windows \#8519 \[cubanpit, nulano\]
-   Detach PyQt6 QPixmap instance before returning \#8509 \[radarhere\]
-   Corrected EMF DPI \#8485 \[radarhere\]
-   Fix IFDRational with a zero denominator \#8474 \[radarhere\]
-   Fixed disabling a feature during install \#8469 \[radarhere\]

11.0.0 (2024-10-15)
-------------------

-   Update licence to MIT-CMU \#8460 \[hugovk\]
-   Conditionally define ImageCms type hint to avoid requiring core \#8197 \[radarhere\]
-   Support writing LONG8 offsets in AppendingTiffWriter \#8417 \[radarhere\]
-   Use ImageFile.MAXBLOCK when saving TIFF images \#8461 \[radarhere\]
-   Do not close provided file handles with libtiff when saving \#8458 \[radarhere\]
-   Support ImageFilter.BuiltinFilter for I;16\* images \#8438 \[radarhere\]
-   Use ImagingCore.ptr instead of ImagingCore.id \#8341 \[homm, radarhere, hugovk\]
-   Updated EPS mode when opening images without transparency \#8281 \[Yay295, radarhere\]
-   Use transparency when combining P frames from APNGs \#8443 \[radarhere\]
-   Support all resampling filters when resizing I;16\* images \#8422 \[radarhere\]
-   Free memory on early return \#8413 \[radarhere\]
-   Cast int before potentially exceeding INT\_MAX \#8402 \[radarhere\]
-   Check image value before use \#8400 \[radarhere\]
-   Improved copying imagequant libraries \#8420 \[radarhere\]
-   Use Capsule for WebP saving \#8386 \[homm, radarhere\]
-   Fixed writing multiple StripOffsets to TIFF \#8317 \[Yay295, radarhere\]
-   Fix dereference before checking for NULL in ImagingTransformAffine \#8398 \[PavlNekrasov\]
-   Use transposed size after opening for TIFF images \#8390 \[radarhere, homm\]
-   Improve ImageFont error messages \#8338 \[yngvem, radarhere, hugovk\]
-   Mention MAX\_TEXT\_CHUNK limit in PNG error message \#8391 \[radarhere\]
-   Cast Dib handle to int \#8385 \[radarhere\]
-   Accept float stroke widths \#8369 \[radarhere\]
-   Deprecate ICNS (width, height, scale) sizes in favour of load(scale) \#8352 \[radarhere\]
-   Improved handling of RGBA palettes when saving GIF images \#8366 \[radarhere\]
-   Deprecate isImageType \#8364 \[radarhere\]
-   Support converting more modes to LAB by converting to RGBA first \#8358 \[radarhere\]
-   Deprecate support for FreeType 2.9.0 \#8356 \[hugovk, radarhere\]
-   Removed unused TiffImagePlugin IFD\_LEGACY\_API \#8355 \[radarhere\]
-   Handle duplicate EXIF header \#8350 \[zakajd, radarhere\]
-   Return early from BoxBlur if either width or height is zero \#8347 \[radarhere\]
-   Check text is either string or bytes \#8308 \[radarhere\]
-   Added writing XMP bytes to JPEG \#8286 \[radarhere\]
-   Support JPEG2000 RGBA palettes \#8256 \[radarhere\]
-   Expand C image to match GIF frame image size \#8237 \[radarhere\]
-   Allow saving I;16 images as PPM \#8231 \[radarhere\]
-   When IFD is missing, connect get\_ifd() dictionary to Exif \#8230 \[radarhere\]
-   Skip truncated ICO mask if LOAD\_TRUNCATED\_IMAGES is enabled \#8180 \[radarhere\]
-   Treat unknown JPEG2000 colorspace as unspecified \#8343 \[radarhere\]
-   Updated error message when saving WebP with invalid width or height \#8322 \[radarhere, hugovk\]
-   Remove warning if NumPy failed to raise an error during conversion \#8326 \[radarhere\]
-   If left and right sides meet in ImageDraw.rounded\_rectangle(), do not draw rectangle to fill gap \#8304 \[radarhere\]
-   Remove WebP support without anim, mux/demux, and with buggy alpha \#8213 \[homm, radarhere\]
-   Add missing TIFF CMYK;16B reader \#8298 \[homm\]
-   Remove all [WITH]()\* flags from \_imaging.c and other flags \#8211 \[homm\]
-   Improve ImageDraw2 shape methods \#8265 \[radarhere\]
-   Lock around usages of imaging memory arenas \#8238 \[lysnikolaou\]
-   Deprecate JpegImageFile huffman\_ac and huffman\_dc \#8274 \[radarhere\]
-   Deprecate ImageMath lambda\_eval and unsafe\_eval options argument \#8242 \[radarhere\]
-   Changed ContainerIO to subclass IO \#8240 \[radarhere\]
-   Move away from APIs that use borrowed references under the free-threaded build \#8216 \[hugovk, lysnikolaou\]
-   Allow size argument to resize() to be a NumPy array \#8201 \[radarhere\]
-   Drop support for Python 3.8 \#8183 \[hugovk, radarhere\]
-   Add support for Python 3.13 \#8181 \[hugovk, radarhere\]
-   Fix incompatibility with NumPy 1.20 \#8187 \[neutrinoceros, radarhere\]
-   Remove PSFile, PyAccess and USE\_CFFI\_ACCESS \#8182 \[hugovk, radarhere\]

10.4.0 (2024-07-01)
-------------------

-   Raise FileNotFoundError if show\_file() path does not exist \#8178 \[radarhere\]
-   Improved reading 16-bit TGA images with colour \#7965 \[Yay295, radarhere\]
-   Deprecate non-image ImageCms modes \#8031 \[radarhere\]
-   Fixed processing multiple JPEG EXIF markers \#8127 \[radarhere\]
-   Do not preserve EXIFIFD tag by default when saving TIFF images \#8110 \[radarhere\]
-   Added ImageFont.load\_default\_imagefont() \#8086 \[radarhere\]
-   Added Image.WARN\_POSSIBLE\_FORMATS \#8063 \[radarhere\]
-   Remove zero-byte end padding when parsing any XMP data \#8171 \[radarhere\]
-   Do not detect Ultra HDR images as MPO \#8056 \[radarhere\]
-   Raise SyntaxError specific to JP2 \#8146 \[Yay295, radarhere\]
-   Do not use first frame duration for other frames when saving APNG images \#8104 \[radarhere\]
-   Consider I;16 pixel size when using a 1 mode mask \#8112 \[radarhere\]
-   When saving multiple PNG frames, convert to mode rather than raw mode \#8087 \[radarhere\]
-   Added byte support to FreeTypeFont \#8141 \[radarhere\]
-   Allow float center for rotate operations \#8114 \[radarhere\]
-   Do not read layers immediately when opening PSD images \#8039 \[radarhere\]
-   Restore original thread state \#8065 \[radarhere\]
-   Read IM and TIFF images as RGB, rather than RGBX \#7997 \[radarhere\]
-   Only preserve TIFF IPTC\_NAA\_CHUNK tag if type is BYTE or UNDEFINED \#7948 \[radarhere\]
-   Clarify ImageDraw2 error message when size is missing \#8165 \[radarhere\]
-   Support unpacking more rawmodes to RGBA palettes \#7966 \[radarhere\]
-   Removed support for Qt 5 \#8159 \[radarhere\]
-   Improve `ImageFont.freetype` support for XDG directories on Linux \#8135 \[mamg22, radarhere\]
-   Improved consistency of XMP handling \#8069 \[radarhere\]
-   Use pkg-config to help find libwebp and raqm \#8142 \[radarhere\]
-   Accept \'t\' suffix for libtiff version \#8126, \#8129 \[radarhere\]
-   Deprecate ImageDraw.getdraw hints parameter \#8124 \[radarhere, hugovk\]
-   Added ImageDraw circle() \#8085 \[void4, hugovk, radarhere\]
-   Add mypy target to Makefile \#8077 \[Yay295\]
-   Added more modes to Image.MODES \#7984 \[radarhere\]
-   Deprecate BGR;15, BGR;16 and BGR;24 modes \#7978 \[radarhere, hugovk\]
-   Fix ImagingAccess for I;16N on big-endian \#7921 \[Yay295, radarhere\]
-   Support reading P mode TIFF images with padding \#7996 \[radarhere\]
-   Deprecate support for libtiff \< 4 \#7998 \[radarhere, hugovk\]
-   Corrected ImageShow UnixViewer command \#7987 \[radarhere\]
-   Use functools.cached\_property in ImageStat \#7952 \[nulano, hugovk, radarhere\]
-   Add support for reading BITMAPV2INFOHEADER and BITMAPV3INFOHEADER \#7956 \[Cirras, radarhere\]
-   Support reading CMYK JPEG2000 images \#7947 \[radarhere\]

10.3.0 (2024-04-01)
-------------------

-   CVE-2024-28219: Use `strncpy` to avoid buffer overflow \#7928 \[radarhere, hugovk\]
-   Deprecate `eval()`, replacing it with `lambda_eval()` and `unsafe_eval()` \#7927 \[radarhere, hugovk\]
-   Raise `ValueError` if seeking to greater than offset-sized integer in TIFF \#7883 \[radarhere\]
-   Add `--report` argument to `__main__.py` to omit supported formats \#7818 \[nulano, radarhere, hugovk\]
-   Added RGB to I;16, I;16L, I;16B and I;16N conversion \#7918, \#7920 \[radarhere\]
-   Fix editable installation with custom build backend and configuration options \#7658 \[nulano, radarhere\]
-   Fix putdata() for I;16N on big-endian \#7209 \[Yay295, hugovk, radarhere\]
-   Determine MPO size from markers, not EXIF data \#7884 \[radarhere\]
-   Improved conversion from RGB to RGBa, LA and La \#7888 \[radarhere\]
-   Support FITS images with GZIP\_1 compression \#7894 \[radarhere\]
-   Use I;16 mode for 9-bit JPEG 2000 images \#7900 \[scaramallion, radarhere\]
-   Raise ValueError if kmeans is negative \#7891 \[radarhere\]
-   Remove TIFF tag OSUBFILETYPE when saving using libtiff \#7893 \[radarhere\]
-   Raise ValueError for negative values when loading P1-P3 PPM images \#7882 \[radarhere\]
-   Added reading of JPEG2000 palettes \#7870 \[radarhere\]
-   Added alpha\_quality argument when saving WebP images \#7872 \[radarhere\]
-   Fixed joined corners for ImageDraw rounded\_rectangle() non-integer dimensions \#7881 \[radarhere\]
-   Stop reading EPS image at EOF marker \#7753 \[radarhere\]
-   PSD layer co-ordinates may be negative \#7706 \[radarhere\]
-   Use subprocess with CREATE\_NO\_WINDOW flag in ImageShow WindowsViewer \#7791 \[radarhere\]
-   When saving GIF frame that restores to background color, do not fill identical pixels \#7788 \[radarhere\]
-   Fixed reading PNG iCCP compression method \#7823 \[radarhere\]
-   Allow writing IFDRational to UNDEFINED tag \#7840 \[radarhere\]
-   Fix logged tag name when loading Exif data \#7842 \[radarhere\]
-   Use maximum frame size in IHDR chunk when saving APNG images \#7821 \[radarhere\]
-   Prevent opening P TGA images without a palette \#7797 \[radarhere\]
-   Use palette when loading ICO images \#7798 \[radarhere\]
-   Use consistent arguments for load\_read and load\_seek \#7713 \[radarhere\]
-   Turn off nullability warnings for macOS SDK \#7827 \[radarhere\]
-   Fix shift-sign issue in Convert.c \#7838 \[r-barnes, radarhere\]
-   Open 16-bit grayscale PNGs as I;16 \#7849 \[radarhere\]
-   Handle truncated chunks at the end of PNG images \#7709 \[lajiyuan, radarhere\]
-   Match mask size to pasted image size in GifImagePlugin \#7779 \[radarhere\]
-   Release GIL while calling `WebPAnimDecoderGetNext` \#7782 \[evanmiller, radarhere\]
-   Fixed reading FLI/FLC images with a prefix chunk \#7804 \[twolife\]
-   Update wl-paste handling and return None for some errors in grabclipboard() on Linux \#7745 \[nik012003, radarhere\]
-   Remove execute bit from `setup.py` \#7760 \[hugovk\]
-   Do not support using test-image-results to upload images after test failures \#7739 \[radarhere\]
-   Changed ImageMath.ops to be static \#7721 \[radarhere\]
-   Fix APNG info after seeking backwards more than twice \#7701 \[esoma, radarhere\]
-   Deprecate ImageCms constants and versions() function \#7702 \[nulano, radarhere\]
-   Added PerspectiveTransform \#7699 \[radarhere\]
-   Add support for reading and writing grayscale PFM images \#7696 \[nulano, hugovk\]
-   Add LCMS2 flags to ImageCms \#7676 \[nulano, radarhere, hugovk\]
-   Rename x64 to AMD64 in winbuild \#7693 \[nulano\]

10.2.0 (2024-01-02)
-------------------

-   Add `keep_rgb` option when saving JPEG to prevent conversion of RGB colorspace \#7553 \[bgilbert, radarhere\]
-   Trim glyph size in ImageFont.getmask() \#7669, \#7672 \[radarhere, nulano\]
-   Deprecate IptcImagePlugin helpers \#7664 \[nulano, hugovk, radarhere\]
-   Allow uncompressed TIFF images to be saved in chunks \#7650 \[radarhere\]
-   Concatenate multiple JPEG EXIF markers \#7496 \[radarhere\]
-   Changed IPTC tile tuple to match other plugins \#7661 \[radarhere\]
-   Do not assign new fp attribute when exiting context manager \#7566 \[radarhere\]
-   Support arbitrary masks for uncompressed RGB DDS images \#7589 \[radarhere, akx\]
-   Support setting ROWSPERSTRIP tag \#7654 \[radarhere\]
-   Apply ImageFont.MAX\_STRING\_LENGTH to ImageFont.getmask() \#7662 \[radarhere\]
-   Optimise `ImageColor` using `functools.lru_cache` \#7657 \[hugovk\]
-   Restricted environment keys for ImageMath.eval() \#7655 \[wiredfool, radarhere\]
-   Optimise `ImageMode.getmode` using `functools.lru_cache` \#7641 \[hugovk, radarhere\]
-   Fix incorrect color blending for overlapping glyphs \#7497 \[ZachNagengast, nulano, radarhere\]
-   Attempt memory mapping when tile args is a string \#7565 \[radarhere\]
-   Fill identical pixels with transparency in subsequent frames when saving GIF \#7568 \[radarhere\]
-   Corrected duration when combining multiple GIF frames into single frame \#7521 \[radarhere\]
-   Handle disposing GIF background from outside palette \#7515 \[radarhere\]
-   Seek past the data when skipping a PSD layer \#7483 \[radarhere\]
-   Import plugins relative to the module \#7576 \[deliangyang, jaxx0n\]
-   Translate encoder error codes to strings; deprecate `ImageFile.raise_oserror()` \#7609 \[bgilbert, radarhere\]
-   Support reading BC4U and DX10 BC1 images \#6486 \[REDxEYE, radarhere, hugovk\]
-   Optimize ImageStat.Stat.extrema \#7593 \[florath, radarhere\]
-   Handle pathlib.Path in FreeTypeFont \#7578 \[radarhere, hugovk, nulano\]
-   Added support for reading DX10 BC4 DDS images \#7603 \[sambvfx, radarhere\]
-   Optimized ImageStat.Stat.count \#7599 \[florath\]
-   Correct PDF palette size when saving \#7555 \[radarhere\]
-   Fixed closing file pointer with olefile 0.47 \#7594 \[radarhere\]
-   Raise ValueError when TrueType font size is not greater than zero \#7584, \#7587 \[akx, radarhere\]
-   If absent, do not try to close fp when closing image \#7557 \[RaphaelVRossi, radarhere\]
-   Allow configuring JPEG restart marker interval on save \#7488 \[bgilbert, radarhere\]
-   Decrement reference count for PyObject \#7549 \[radarhere\]
-   Implement `streamtype=1` option for tables-only JPEG encoding \#7491 \[bgilbert, radarhere\]
-   If save\_all PNG only has one frame, do not create animated image \#7522 \[radarhere\]
-   Fixed frombytes() for images with a zero dimension \#7493 \[radarhere\]

10.1.0 (2023-10-15)
-------------------

-   Added TrueType default font to allow for different sizes \#7354 \[radarhere\]
-   Fixed invalid argument warning \#7442 \[radarhere\]
-   Added ImageOps cover method \#7412 \[radarhere, hugovk\]
-   Catch struct.error from truncated EXIF when reading JPEG DPI \#7458 \[radarhere\]
-   Consider default image when selecting mode for PNG save\_all \#7437 \[radarhere\]
-   Support BGR;15, BGR;16 and BGR;24 access, unpacking and putdata \#7303 \[radarhere\]
-   Added CMYK to RGB unpacker \#7310 \[radarhere\]
-   Improved flexibility of XMP parsing \#7274 \[radarhere\]
-   Support reading 8-bit YCbCr TIFF images \#7415 \[radarhere\]
-   Allow saving I;16B images as PNG \#7302 \[radarhere\]
-   Corrected drawing I;16 points and writing I;16 text \#7257 \[radarhere\]
-   Set blue channel to 128 for BC5S \#7413 \[radarhere\]
-   Increase flexibility when reading IPTC fields \#7319 \[radarhere\]
-   Set C palette to be empty by default \#7289 \[radarhere\]
-   Added gs\_binary to control Ghostscript use on all platforms \#7392 \[radarhere\]
-   Read bounding box information from the trailer of EPS files if specified \#7382 \[nopperl, radarhere\]
-   Added reading 8-bit color DDS images \#7426 \[radarhere\]
-   Added has\_transparency\_data \#7420 \[radarhere, hugovk\]
-   Fixed bug when reading BC5S DDS images \#7401 \[radarhere\]
-   Prevent TIFF orientation from being applied more than once \#7383 \[radarhere\]
-   Use previous pixel alpha for QOI\_OP\_RGB \#7357 \[radarhere\]
-   Added BC5U reading \#7358 \[radarhere\]
-   Allow getpixel() to accept a list \#7355 \[radarhere, homm\]
-   Allow GaussianBlur and BoxBlur to accept a sequence of x and y radii \#7336 \[radarhere\]
-   Expand JPEG buffer size when saving optimized or progressive \#7345 \[radarhere\]
-   Added session type check for Linux in ImageGrab.grabclipboard() \#7332 \[TheNooB2706, radarhere, hugovk\]
-   Allow \"loop=None\" when saving GIF images \#7329 \[radarhere\]
-   Fixed transparency when saving P mode images to PDF \#7323 \[radarhere\]
-   Added saving LA images as PDFs \#7299 \[radarhere\]
-   Set SMaskInData to 1 for PDFs with alpha \#7316, \#7317 \[radarhere\]
-   Changed Image mode property to be read-only by default \#7307 \[radarhere\]
-   Silence exceptions in \_[repr\_jpeg]() and \_[repr\_png]() \#7266 \[mtreinish, radarhere\]
-   Do not use transparency when saving GIF if it has been removed when normalizing mode \#7284 \[radarhere\]
-   Fix missing symbols when libtiff depends on libjpeg \#7270 \[heitbaum\]

10.0.1 (2023-09-15)
-------------------

-   Updated libwebp to 1.3.2 \#7395 \[radarhere\]
-   Updated zlib to 1.3 \#7344 \[radarhere\]

10.0.0 (2023-07-01)
-------------------

-   Fixed deallocating mask images \#7246 \[radarhere\]
-   Added ImageFont.MAX\_STRING\_LENGTH \#7244 \[radarhere, hugovk\]
-   Fix Windows build with pyproject.toml \#7230 \[hugovk, nulano, radarhere\]
-   Do not close provided file handles with libtiff \#7199 \[radarhere\]
-   Convert to HSV if mode is HSV in getcolor() \#7226 \[radarhere\]
-   Added alpha\_only argument to getbbox() \#7123 \[radarhere. hugovk\]
-   Prioritise speed in \_[repr\_png]() \#7242 \[radarhere\]
-   Do not use CFFI access by default on PyPy \#7236 \[radarhere\]
-   Limit size even if one dimension is zero in decompression bomb check \#7235 \[radarhere\]
-   Use \--config-settings instead of deprecated \--global-option \#7171 \[radarhere\]
-   Better C integer definitions \#6645 \[Yay295, hugovk\]
-   Fixed finding dependencies on Cygwin \#7175 \[radarhere\]
-   Changed grabclipboard() to use PNG instead of JPG compression on macOS \#7219 \[abey79, radarhere\]
-   Added in\_place argument to ImageOps.exif\_transpose() \#7092 \[radarhere\]
-   Fixed calling putpalette() on L and LA images before load() \#7187 \[radarhere\]
-   Fixed saving TIFF multiframe images with LONG8 tag types \#7078 \[radarhere\]
-   Fixed combining single duration across duplicate APNG frames \#7146 \[radarhere\]
-   Remove temporary file when error is raised \#7148 \[radarhere\]
-   Do not use temporary file when grabbing clipboard on Linux \#7200 \[radarhere\]
-   If the clipboard fails to open on Windows, wait and try again \#7141 \[radarhere\]
-   Fixed saving multiple 1 mode frames to GIF \#7181 \[radarhere\]
-   Replaced absolute PIL import with relative import \#7173 \[radarhere\]
-   Replaced deprecated Py\_FileSystemDefaultEncoding for Python \>= 3.12 \#7192 \[radarhere\]
-   Improved wl-paste mimetype handling in ImageGrab \#7094 \[rrcgat, radarhere\]
-   Added \_[repr\_jpeg]()() for IPython display\_jpeg \#7135 \[n3011, radarhere, nulano\]
-   Use \"/sbin/ldconfig\" if ldconfig is not found \#7068 \[radarhere\]
-   Prefer screenshots using XCB over gnome-screenshot \#7143 \[nulano, radarhere\]
-   Fixed joined corners for ImageDraw rounded\_rectangle() odd dimensions \#7151 \[radarhere\]
-   Support reading signed 8-bit TIFF images \#7111 \[radarhere\]
-   Added width argument to ImageDraw regular\_polygon \#7132 \[radarhere\]
-   Support I mode for ImageFilter.BuiltinFilter \#7108 \[radarhere\]
-   Raise error from stderr of Linux ImageGrab.grabclipboard() command \#7112 \[radarhere\]
-   Added unpacker from I;16B to I;16 \#7125 \[radarhere\]
-   Support float font sizes \#7107 \[radarhere\]
-   Use later value for duplicate xref entries in PdfParser \#7102 \[radarhere\]
-   Load before getting size in \_\_getstate\_\_ \#7105 \[bigcat88, radarhere\]
-   Fixed type handling for include and lib directories \#7069 \[adisbladis, radarhere\]
-   Remove deprecations for Pillow 10.0.0 \#7059, \#7080 \[hugovk, radarhere\]
-   Drop support for soon-EOL Python 3.7 \#7058 \[hugovk, radarhere\]

9.5.0 (2023-04-01)
------------------

-   Added ImageSourceData to TAGS\_V2 \#7053 \[radarhere\]
-   Clear PPM half token after use \#7052 \[radarhere\]
-   Removed absolute path to ldconfig \#7044 \[radarhere\]
-   Support custom comments and PLT markers when saving JPEG2000 images \#6903 \[joshware, radarhere, hugovk\]
-   Load before getting size in \_\_array\_interface\_\_ \#7034 \[radarhere\]
-   Support creating BGR;15, BGR;16 and BGR;24 images, but drop support for BGR;32 \#7010 \[radarhere\]
-   Consider transparency when applying APNG blend mask \#7018 \[radarhere\]
-   Round duration when saving animated WebP images \#6996 \[radarhere\]
-   Added reading of JPEG2000 comments \#6909 \[radarhere\]
-   Decrement reference count \#7003 \[radarhere, nulano\]
-   Allow libtiff\_support\_custom\_tags to be missing \#7020 \[radarhere\]
-   Improved I;16N support \#6834 \[radarhere\]
-   Added QOI reading \#6852 \[radarhere, hugovk\]
-   Added saving RGBA images as PDFs \#6925 \[radarhere\]
-   Do not raise an error if os.environ does not contain PATH \#6935 \[radarhere, hugovk\]
-   Close OleFileIO instance when closing or exiting FPX or MIC \#7005 \[radarhere\]
-   Added \_\_int\_\_ to IFDRational for Python \>= 3.11 \#6998 \[radarhere\]
-   Added memoryview support to Dib.frombytes() \#6988 \[radarhere, nulano\]
-   Close file pointer copy in the libtiff encoder if still open \#6986 \[fcarron, radarhere\]
-   Raise an error if ImageDraw co-ordinates are incorrectly ordered \#6978 \[radarhere\]
-   Added \"corners\" argument to ImageDraw rounded\_rectangle() \#6954 \[radarhere\]
-   Added memoryview support to frombytes() \#6974 \[radarhere\]
-   Allow comments in FITS images \#6973 \[radarhere\]
-   Support saving PDF with different X and Y resolutions \#6961 \[jvanderneutstulen, radarhere, hugovk\]
-   Fixed writing int as UNDEFINED tag \#6950 \[radarhere\]
-   Raise an error if EXIF data is too long when saving JPEG \#6939 \[radarhere\]
-   Handle more than one directory returned by pkg-config \#6896 \[sebastic, radarhere\]
-   Do not retry past formats when loading all formats for the first time \#6902 \[radarhere\]
-   Do not retry specified formats if they failed when opening \#6893 \[radarhere\]
-   Do not unintentionally load TIFF format at first \#6892 \[radarhere\]
-   Stop reading when EPS line becomes too long \#6897 \[radarhere\]
-   Allow writing IFDRational to BYTE tag \#6890 \[radarhere\]
-   Raise ValueError for BoxBlur filter with negative radius \#6874 \[hugovk, radarhere\]
-   Support arbitrary number of loaded modules on Windows \#6761 \[javidcf, radarhere, nulano\]

9.4.0 (2023-01-02)
------------------

-   Fixed null pointer dereference crash with malformed font \#6846 \[wiredfool, radarhere\]
-   Return from ImagingFill early if image has a zero dimension \#6842 \[radarhere\]
-   Reversed deprecations for Image constants, except for duplicate Resampling attributes \#6830 \[radarhere\]
-   Improve exception traceback readability \#6836 \[hugovk, radarhere\]
-   Do not attempt to read IFD1 if absent \#6840 \[radarhere\]
-   Fixed writing int as ASCII tag \#6800 \[radarhere\]
-   If available, use wl-paste or xclip for grabclipboard() on Linux \#6783 \[radarhere\]
-   Added signed option when saving JPEG2000 images \#6709 \[radarhere\]
-   Patch OpenJPEG to include ARM64 fix \#6718 \[radarhere\]
-   Added support for I;16 modes in putdata() \#6825 \[radarhere\]
-   Added conversion from RGBa to RGB \#6708 \[radarhere\]
-   Added DDS support for uncompressed L and LA images \#6820 \[radarhere, REDxEYE\]
-   Added LightSource tag values to ExifTags \#6749 \[radarhere\]
-   Fixed PyAccess after changing ICO size \#6821 \[radarhere\]
-   Do not use EXIF from info when saving PNG images \#6819 \[radarhere\]
-   Fixed saving EXIF data to MPO \#6817 \[radarhere\]
-   Added Exif hide\_offsets() \#6762 \[radarhere\]
-   Only compare to previous frame when checking for duplicate GIF frames while saving \#6787 \[radarhere\]
-   Always initialize all plugins in registered\_extensions() \#6811 \[radarhere\]
-   Ignore non-opaque WebP background when saving as GIF \#6792 \[radarhere\]
-   Only set tile in ImageFile \_\_setstate\_\_ \#6793 \[radarhere\]
-   When reading BLP, do not trust JPEG decoder to determine image is CMYK \#6767 \[radarhere\]
-   Added IFD enum to ExifTags \#6748 \[radarhere\]
-   Fixed bug combining GIF frame durations \#6779 \[radarhere\]
-   Support saving JPEG comments \#6774 \[smason, radarhere\]
-   Added getxmp() to WebPImagePlugin \#6758 \[radarhere\]
-   Added \"exact\" option when saving WebP \#6747 \[ashafaei, radarhere\]
-   Use fractional coordinates when drawing text \#6722 \[radarhere\]
-   Fixed writing int as BYTE tag \#6740 \[radarhere\]
-   Added MP Format Version when saving MPO \#6735 \[radarhere\]
-   Added Interop to ExifTags \#6724 \[radarhere\]
-   CVE-2007-4559 patch when building on Windows \#6704 \[TrellixVulnTeam, nulano, radarhere\]
-   Fix compiler warning: accessing 64 bytes in a region of size 48 \#6714 \[wiredfool\]
-   Use verbose flag for pip install \#6713 \[wiredfool, radarhere\]

9.3.0 (2022-10-29)
------------------

-   Limit SAMPLESPERPIXEL to avoid runtime DOS \#6700 \[wiredfool\]
-   Initialize libtiff buffer when saving \#6699 \[radarhere\]
-   Inline fname2char to fix memory leak \#6329 \[nulano\]
-   Fix memory leaks related to text features \#6330 \[nulano\]
-   Use double quotes for version check on old CPython on Windows \#6695 \[hugovk\]
-   Remove backup implementation of Round for Windows platforms \#6693 \[cgohlke\]
-   Fixed set\_variation\_by\_name offset \#6445 \[radarhere\]
-   Fix malloc in \_imagingft.c:font\_setvaraxes \#6690 \[cgohlke\]
-   Release Python GIL when converting images using matrix operations \#6418 \[hmaarrfk\]
-   Added ExifTags enums \#6630 \[radarhere\]
-   Do not modify previous frame when calculating delta in PNG \#6683 \[radarhere\]
-   Added support for reading BMP images with RLE4 compression \#6674 \[npjg, radarhere\]
-   Decode JPEG compressed BLP1 data in original mode \#6678 \[radarhere\]
-   Added GPS TIFF tag info \#6661 \[radarhere\]
-   Added conversion between RGB/RGBA/RGBX and LAB \#6647 \[radarhere\]
-   Do not attempt normalization if mode is already normal \#6644 \[radarhere\]
-   Fixed seeking to an L frame in a GIF \#6576 \[radarhere\]
-   Consider all frames when selecting mode for PNG save\_all \#6610 \[radarhere\]
-   Don\'t reassign crc on ChunkStream close \#6627 \[wiredfool, radarhere\]
-   Raise a warning if NumPy failed to raise an error during conversion \#6594 \[radarhere\]
-   Show all frames in ImageShow \#6611 \[radarhere\]
-   Allow FLI palette chunk to not be first \#6626 \[radarhere\]
-   If first GIF frame has transparency for RGB\_ALWAYS loading strategy, use RGBA mode \#6592 \[radarhere\]
-   Round box position to integer when pasting embedded color \#6517 \[radarhere, nulano\]
-   Removed EXIF prefix when saving WebP \#6582 \[radarhere\]
-   Pad IM palette to 768 bytes when saving \#6579 \[radarhere\]
-   Added DDS BC6H reading \#6449 \[ShadelessFox, REDxEYE, radarhere\]
-   Added support for opening WhiteIsZero 16-bit integer TIFF images \#6642 \[JayWiz, radarhere\]
-   Raise an error when allocating translucent color to RGB palette \#6654 \[jsbueno, radarhere\]
-   Added reading of TIFF child images \#6569 \[radarhere\]
-   Improved ImageOps palette handling \#6596 \[PososikTeam, radarhere\]
-   Defer parsing of palette into colors \#6567 \[radarhere\]
-   Apply transparency to P images in ImageTk.PhotoImage \#6559 \[radarhere\]
-   Use rounding in ImageOps contain() and pad() \#6522 \[bibinhashley, radarhere\]
-   Fixed GIF remapping to palette with duplicate entries \#6548 \[radarhere\]
-   Allow remap\_palette() to return an image with less than 256 palette entries \#6543 \[radarhere\]
-   Corrected BMP and TGA palette size when saving \#6500 \[radarhere\]
-   Do not call load() before draft() in Image.thumbnail \#6539 \[radarhere\]
-   Copy palette when converting from P to PA \#6497 \[radarhere\]
-   Allow RGB and RGBA values for PA image putpixel \#6504 \[radarhere\]
-   Removed support for tkinter in PyPy before Python 3.6 \#6551 \[nulano\]
-   Do not use CCITTFaxDecode filter if libtiff is not available \#6518 \[radarhere\]
-   Fallback to not using mmap if buffer is not large enough \#6510 \[radarhere\]
-   Fixed writing bytes as ASCII tag \#6493 \[radarhere\]
-   Open 1 bit EPS in mode 1 \#6499 \[radarhere\]
-   Removed support for tkinter before Python 1.5.2 \#6549 \[radarhere\]
-   Allow default ImageDraw font to be set \#6484 \[radarhere, hugovk\]
-   Save 1 mode PDF using CCITTFaxDecode filter \#6470 \[radarhere\]
-   Added support for RGBA PSD images \#6481 \[radarhere\]
-   Parse orientation from XMP tag contents \#6463 \[bigcat88, radarhere\]
-   Added support for reading ATI1/ATI2 (BC4/BC5) DDS images \#6457 \[REDxEYE, radarhere\]
-   Do not clear GIF tile when checking number of frames \#6455 \[radarhere\]
-   Support saving multiple MPO frames \#6444 \[radarhere\]
-   Do not double quote Pillow version for setuptools \>= 60 \#6450 \[radarhere\]
-   Added ABGR BMP mask mode \#6436 \[radarhere\]
-   Fixed PSDraw rectangle \#6429 \[radarhere\]
-   Raise ValueError if PNG sRGB chunk is truncated \#6431 \[radarhere\]
-   Handle missing Python executable in ImageShow on macOS \#6416 \[bryant1410, radarhere\]

9.2.0 (2022-07-01)
------------------

-   Deprecate ImageFont.getsize and related functions \#6381 \[nulano, radarhere\]
-   Fixed null check for fribidi\_version\_info in FriBiDi shim \#6376 \[nulano\]
-   Added GIF decompression bomb check \#6402 \[radarhere\]
-   Handle PCF fonts files with less than 256 characters \#6386 \[dawidcrivelli, radarhere\]
-   Improved GIF optimize condition \#6378 \[raygard, radarhere\]
-   Reverted to \_\_array\_interface\_\_ with the release of NumPy 1.23 \#6394 \[radarhere\]
-   Pad PCX palette to 768 bytes when saving \#6391 \[radarhere\]
-   Fixed bug with rounding pixels to palette colors \#6377 \[btrekkie, radarhere\]
-   Use gnome-screenshot on Linux if available \#6361 \[radarhere, nulano\]
-   Fixed loading L mode BMP RLE8 images \#6384 \[radarhere\]
-   Fixed incorrect operator in ImageCms error \#6370 \[LostBenjamin, hugovk, radarhere\]
-   Limit FPX tile size to avoid extending outside image \#6368 \[radarhere\]
-   Added support for decoding plain PPM formats \#5242 \[Piolie, radarhere\]
-   Added apply\_transparency() \#6352 \[radarhere\]
-   Fixed behaviour change from endian fix \#6197 \[radarhere\]
-   Allow remapping P images with RGBA palettes \#6350 \[radarhere\]
-   Fixed drawing translucent 1px high polygons \#6278 \[radarhere\]
-   Pad COLORMAP to 768 items when saving TIFF \#6232 \[radarhere\]
-   Fix P -\> PA conversion \#6337 \[RedShy, radarhere\]
-   Once exif data is parsed, do not reload unless it changes \#6335 \[radarhere\]
-   Only try to connect discontiguous corners at the end of edges \#6303 \[radarhere\]
-   Improve transparency handling when saving GIF images \#6176 \[radarhere\]
-   Do not update GIF frame position until local image is found \#6219 \[radarhere\]
-   Netscape GIF extension belongs after the global color table \#6211 \[radarhere\]
-   Only write GIF comments at the beginning of the file \#6300 \[raygard, radarhere\]
-   Separate multiple GIF comment blocks with newlines \#6294 \[raygard, radarhere\]
-   Always use GIF89a for comments \#6292 \[raygard, radarhere\]
-   Ignore compression value from BMP info dictionary when saving as TIFF \#6231 \[radarhere\]
-   If font is file-like object, do not re-read from object to get variant \#6234 \[radarhere\]
-   Raise ValueError when trying to access internal fp after close \#6213 \[radarhere\]
-   Support more affine expression forms in im.point() \#6254 \[benrg, radarhere\]
-   Populate Python palette in fromarray() \#6283 \[radarhere\]
-   Raise ValueError if PNG chunks are truncated \#6253 \[radarhere\]
-   Use durations from each frame by default when saving GIFs \#6265 \[radarhere\]
-   Adjust BITSPERSAMPLE to match SAMPLESPERPIXEL when opening TIFFs \#6270 \[radarhere\]
-   Search pkgconf system libs/cflags \#6138 \[jameshilliard, radarhere\]
-   Raise ValueError for invalid PPM maxval \#6242 \[radarhere\]
-   Corrected screencapture argument in ImageGrab.grab() \#6244 \[axt-one\]
-   Deprecate support for Qt 5 (PyQt5 and PySide2) \#6237 \[hugovk, radarhere\]
-   Increase wait time of temporary file deletion on Windows \#6224 \[AlexTedeschi\]
-   Deprecate FreeTypeFont.getmask2 fill parameter \#6220 \[nulano, radarhere, hugovk\]
-   Round lut values where necessary \#6188 \[radarhere\]
-   Load before getting size in resize() \#6190 \[radarhere\]
-   Load image before performing size calculations in thumbnail() \#6186 \[radarhere\]
-   Deprecated PhotoImage.paste() box parameter \#6178 \[radarhere\]

9.1.1 (2022-05-17)
------------------

-   When reading past the end of a TGA scan line, reduce bytes left. CVE-2022-30595 \[radarhere\]
-   Do not open images with zero or negative height \#6269 \[radarhere\]

9.1.0 (2022-04-01)
------------------

-   Add support for multiple component transformation to JPEG2000 \#5500 \[scaramallion, radarhere, hugovk\]
-   Fix loading FriBiDi on Alpine \#6165 \[nulano\]
-   Added setting for converting GIF P frames to RGB \#6150 \[radarhere\]
-   Allow 1 mode images to be inverted \#6034 \[radarhere\]
-   Raise ValueError when trying to save empty JPEG \#6159 \[radarhere\]
-   Always save TIFF with contiguous planar configuration \#5973 \[radarhere\]
-   Connected discontiguous polygon corners \#5980 \[radarhere\]
-   Ensure Tkinter hook is activated for getimage() \#6032 \[radarhere\]
-   Use screencapture arguments to crop on macOS \#6152 \[radarhere\]
-   Do not mark L mode JPEG as 1 bit in PDF \#6151 \[radarhere\]
-   Added support for reading I;16R TIFF images \#6132 \[radarhere\]
-   If an error occurs after creating a file, remove the file \#6134 \[radarhere\]
-   Fixed calling DisplayViewer or XVViewer without a title \#6136 \[radarhere\]
-   Retain RGBA transparency when saving multiple GIF frames \#6128 \[radarhere\]
-   Save additional ICO frames with other bit depths if supplied \#6122 \[radarhere\]
-   Handle EXIF data truncated to just the header \#6124 \[radarhere\]
-   Added support for reading BMP images with RLE8 compression \#6102 \[radarhere\]
-   Support Python distributions where \_tkinter is compiled in \#6006 \[lukegb\]
-   Added support for PPM arbitrary maxval \#6119 \[radarhere\]
-   Added BigTIFF reading \#6097 \[radarhere\]
-   When converting, clip I;16 to be unsigned, not signed \#6112 \[radarhere\]
-   Fixed loading L mode GIF with transparency \#6086 \[radarhere\]
-   Improved handling of PPM header \#5121 \[Piolie, radarhere\]
-   Reset size when seeking away from \"Large Thumbnail\" MPO frame \#6101 \[radarhere\]
-   Replace requirements.txt with extras \#6072 \[hugovk, radarhere\]
-   Added PyEncoder and support BLP saving \#6069 \[radarhere\]
-   Handle TGA images with packets that cross scan lines \#6087 \[radarhere\]
-   Added FITS reading \#6056 \[radarhere, hugovk\]
-   Added rawmode argument to Image.getpalette() \#6061 \[radarhere\]
-   Fixed BUFR, GRIB and HDF5 stub saving \#6071 \[radarhere\]
-   Do not automatically remove temporary ImageShow files on Unix \#6045 \[radarhere\]
-   Correctly read JPEG compressed BLP images \#4685 \[Meithal, radarhere\]
-   Merged \_MODE\_CONV typ into ImageMode as typestr \#6057 \[radarhere\]
-   Consider palette size when converting and in getpalette() \#6060 \[radarhere\]
-   Added enums \#5954 \[radarhere\]
-   Ensure image is opaque after converting P to PA with RGB palette \#6052 \[radarhere\]
-   Attach RGBA palettes from putpalette() when suitable \#6054 \[radarhere\]
-   Added get\_photoshop\_blocks() to parse Photoshop TIFF tag \#6030 \[radarhere\]
-   Drop excess values in BITSPERSAMPLE \#6041 \[mikhail-iurkov\]
-   Added unpacker from RGBA;15 to RGB \#6031 \[radarhere\]
-   Enable arm64 for MSVC on Windows \#5811 \[gaborkertesz-linaro, gaborkertesz\]
-   Keep IPython/Jupyter text/plain output stable \#5891 \[shamrin, radarhere\]
-   Raise an error when performing a negative crop \#5972 \[radarhere, hugovk\]
-   Deprecated show\_file \"file\" argument in favour of \"path\" \#5959 \[radarhere\]
-   Fixed SPIDER images for use with Bio-formats library \#5956 \[radarhere\]
-   Ensure duplicated file pointer is closed \#5946 \[radarhere\]
-   Added specific error if path coordinate type is incorrect \#5942 \[radarhere\]
-   Return an empty bytestring from tobytes() for an empty image \#5938 \[radarhere\]
-   Remove readonly from Image.\_\_eq\_\_ \#5930 \[hugovk\]

9.0.1 (2022-02-03)
------------------

-   In show\_file, use os.remove to remove temporary images. CVE-2022-24303 \#6010 \[radarhere, hugovk\]
-   Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 \#6009 \[radarhere\]

9.0.0 (2022-01-02)
------------------

-   Restrict builtins for ImageMath.eval(). CVE-2022-22817 \#5923 \[radarhere\]
-   Ensure JpegImagePlugin stops at the end of a truncated file \#5921 \[radarhere\]
-   Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 \#5920 \[radarhere\]
-   Remove consecutive duplicate tiles that only differ by their offset \#5919 \[radarhere\]
-   Improved I;16 operations on big endian \#5901 \[radarhere\]
-   Limit quantized palette to number of colors \#5879 \[radarhere\]
-   Fixed palette index for zeroed color in FASTOCTREE quantize \#5869 \[radarhere\]
-   When saving RGBA to GIF, make use of first transparent palette entry \#5859 \[radarhere\]
-   Pass SAMPLEFORMAT to libtiff \#5848 \[radarhere\]
-   Added rounding when converting P and PA \#5824 \[radarhere\]
-   Improved putdata() documentation and data handling \#5910 \[radarhere\]
-   Exclude carriage return in PDF regex to help prevent ReDoS \#5912 \[hugovk\]
-   Fixed freeing pointer in ImageDraw.Outline.transform \#5909 \[radarhere\]
-   Added ImageShow support for xdg-open \#5897 \[m-shinder, radarhere\]
-   Support 16-bit grayscale ImageQt conversion \#5856 \[cmbruns, radarhere\]
-   Convert subsequent GIF frames to RGB or RGBA \#5857 \[radarhere\]
-   Do not prematurely return in ImageFile when saving to stdout \#5665 \[infmagic2047, radarhere\]
-   Added support for top right and bottom right TGA orientations \#5829 \[radarhere\]
-   Corrected ICNS file length in header \#5845 \[radarhere\]
-   Block tile TIFF tags when saving \#5839 \[radarhere\]
-   Added line width argument to polygon \#5694 \[radarhere\]
-   Do not redeclare class each time when converting to NumPy \#5844 \[radarhere\]
-   Only prevent repeated polygon pixels when drawing with transparency \#5835 \[radarhere\]
-   Add support for pickling TrueType fonts \#5826 \[hugovk, radarhere\]
-   Only prefer command line tools SDK on macOS over default MacOSX SDK \#5828 \[radarhere\]
-   Drop support for soon-EOL Python 3.6 \#5768 \[hugovk, nulano, radarhere\]
-   Fix compilation on 64-bit Termux \#5793 \[landfillbaby\]
-   Use title for display in ImageShow \#5788 \[radarhere\]
-   Remove support for FreeType 2.7 and older \#5777 \[hugovk, radarhere\]
-   Fix for PyQt6 \#5775 \[hugovk, radarhere\]
-   Removed deprecated PILLOW\_VERSION, Image.show command parameter, Image.\_showxv and ImageFile.raise\_ioerror \#5776 \[radarhere\]

8.4.0 (2021-10-15)
------------------

-   Prefer global transparency in GIF when replacing with background color \#5756 \[radarhere\]
-   Added \"exif\" keyword argument to TIFF saving \#5575 \[radarhere\]
-   Copy Python palette to new image in quantize() \#5696 \[radarhere\]
-   Read ICO AND mask from end \#5667 \[radarhere\]
-   Actually check the framesize in FliDecode.c \#5659 \[wiredfool\]
-   Determine JPEG2000 mode purely from ihdr header box \#5654 \[radarhere\]
-   Fixed using info dictionary when writing multiple APNG frames \#5611 \[radarhere\]
-   Allow saving 1 and L mode TIFF with PhotometricInterpretation 0 \#5655 \[radarhere\]
-   For GIF save\_all with palette, do not include palette with each frame \#5603 \[radarhere\]
-   Keep transparency when converting from P to LA or PA \#5606 \[radarhere\]
-   Copy palette to new image in transform() \#5647 \[radarhere\]
-   Added \"transparency\" argument to EpsImagePlugin load() \#5620 \[radarhere\]
-   Corrected pathlib.Path detection when saving \#5633 \[radarhere\]
-   Added WalImageFile class \#5618 \[radarhere\]
-   Consider I;16 pixel size when drawing text \#5598 \[radarhere\]
-   If default conversion from P is RGB with transparency, convert to RGBA \#5594 \[radarhere\]
-   Speed up rotating square images by 90 or 270 degrees \#5646 \[radarhere\]
-   Add support for reading DPI information from JPEG2000 images \[rogermb, radarhere\]
-   Catch TypeError from corrupted DPI value in EXIF \#5639 \[homm, radarhere\]
-   Do not close file pointer when saving SGI images \#5645 \[farizrahman4u, radarhere\]
-   Deprecate ImagePalette size parameter \#5641 \[radarhere, hugovk\]
-   Prefer command line tools SDK on macOS \#5624 \[radarhere\]
-   Added tags when saving YCbCr TIFF \#5597 \[radarhere\]
-   PSD layer count may be negative \#5613 \[radarhere\]
-   Fixed ImageOps expand with tuple border on P image \#5615 \[radarhere\]
-   Fixed error saving APNG with duplicate frames and different duration times \#5609 \[thak1411, radarhere\]

8.3.2 (2021-09-02)
------------------

-   CVE-2021-23437 Raise ValueError if color specifier is too long \[hugovk, radarhere\]
-   Fix 6-byte OOB read in FliDecode \[wiredfool\]
-   Add support for Python 3.10 \#5569, \#5570 \[hugovk, radarhere\]
-   Ensure TIFF `RowsPerStrip` is multiple of 8 for JPEG compression \#5588 \[kmilos, radarhere\]
-   Updates for `ImagePalette` channel order \#5599 \[radarhere\]
-   Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library \#5651 \[nulano\]

8.3.1 (2021-07-06)
------------------

-   Catch OSError when checking if fp is sys.stdout \#5585 \[radarhere\]
-   Handle removing orientation from alternate types of EXIF data \#5584 \[radarhere\]
-   Make Image.\_\_array\_\_ take optional dtype argument \#5572 \[t-vi, radarhere\]

8.3.0 (2021-07-01)
------------------

-   Use snprintf instead of sprintf. CVE-2021-34552 \#5567 \[radarhere\]
-   Limit TIFF strip size when saving with LibTIFF \#5514 \[kmilos\]
-   Allow ICNS save on all operating systems \#4526 \[baletu, radarhere, newpanjing, hugovk\]
-   De-zigzag JPEG\'s DQT when loading; deprecate convert\_dict\_qtables \#4989 \[gofr, radarhere\]
-   Replaced xml.etree.ElementTree \#5565 \[radarhere\]
-   Moved CVE image to pillow-depends \#5561 \[radarhere\]
-   Added tag data for IFD groups \#5554 \[radarhere\]
-   Improved ImagePalette \#5552 \[radarhere\]
-   Add DDS saving \#5402 \[radarhere\]
-   Improved getxmp() \#5455 \[radarhere\]
-   Convert to float for comparison with float in IFDRational \_\_eq\_\_ \#5412 \[radarhere\]
-   Allow getexif() to access TIFF tag\_v2 data \#5416 \[radarhere\]
-   Read FITS image mode and size \#5405 \[radarhere\]
-   Merge parallel horizontal edges in ImagingDrawPolygon \#5347 \[radarhere, hrdrq\]
-   Use transparency behind first GIF frame and when disposing to background \#5557 \[radarhere, zewt\]
-   Avoid unstable nature of qsort in Quant.c \#5367 \[radarhere\]
-   Copy palette to new images in ImageOps expand \#5551 \[radarhere\]
-   Ensure palette string matches RGB mode \#5549 \[radarhere\]
-   Do not modify EXIF of original image instance in exif\_transpose() \#5547 \[radarhere\]
-   Fixed default numresolution for small JPEG2000 images \#5540 \[radarhere\]
-   Added DDS BC5 reading \#5501 \[radarhere\]
-   Raise an error if ImageDraw.textbbox is used without a TrueType font \#5510 \[radarhere\]
-   Added ICO saving in BMP format \#5513 \[radarhere\]
-   Ensure PNG seeks to end of previous chunk at start of load\_end \#5493 \[radarhere\]
-   Do not allow TIFF to seek to a past frame \#5473 \[radarhere\]
-   Avoid race condition when displaying images with eog \#5507 \[mconst\]
-   Added specific error messages when ink has incorrect number of bands \#5504 \[radarhere\]
-   Allow converting an image to a numpy array to raise errors \#5379 \[radarhere\]
-   Removed DPI rounding from BMP, JPEG, PNG and WMF loading \#5476, \#5470 \[radarhere\]
-   Remove spikes when drawing thin pieslices \#5460 \[xtsm\]
-   Updated default value for SAMPLESPERPIXEL TIFF tag \#5452 \[radarhere\]
-   Removed TIFF DPI rounding \#5446 \[radarhere, hugovk\]
-   Include code in WebP error \#5471 \[radarhere\]
-   Do not alter pixels outside mask when drawing text on an image with transparency \#5434 \[radarhere\]
-   Reset handle when seeking backwards in TIFF \#5443 \[radarhere\]
-   Replace sys.stdout with sys.stdout.buffer when saving \#5437 \[radarhere\]
-   Fixed UNDEFINED TIFF tag of length 0 being changed in roundtrip \#5426 \[radarhere\]
-   Fixed bug when checking FreeType2 version if it is not installed \#5445 \[radarhere\]
-   Do not round dimensions when saving PDF \#5459 \[radarhere\]
-   Added ImageOps contain() \#5417 \[radarhere, hugovk\]
-   Changed WebP default \"method\" value to 4 \#5450 \[radarhere\]
-   Switched to saving 1-bit PDFs with DCTDecode \#5430 \[radarhere\]
-   Use bpp from ICO header \#5429 \[radarhere\]
-   Corrected JPEG APP14 transform value \#5408 \[radarhere\]
-   Changed TIFF tag 33723 length to 1 \#5425 \[radarhere\]
-   Changed ImageMorph incorrect mode errors to ValueError \#5414 \[radarhere\]
-   Add EXIF tags specified in EXIF 2.32 \#5419 \[gladiusglad\]
-   Treat previous contents of first GIF frame as transparent \#5391 \[radarhere\]
-   For special image modes, revert default resize resampling to NEAREST \#5411 \[radarhere\]
-   JPEG2000: Support decoding subsampled RGB and YCbCr images \#4996 \[nulano, radarhere\]
-   Stop decoding BC1 punchthrough alpha in BC2&3 \#4144 \[jansol\]
-   Use zero if GIF background color index is missing \#5390 \[radarhere\]
-   Fixed ensuring that GIF previous frame was loaded \#5386 \[radarhere\]
-   Valgrind fixes \#5397 \[wiredfool\]
-   Round down the radius in rounded\_rectangle \#5382 \[radarhere\]
-   Fixed reading uncompressed RGB data from DDS \#5383 \[radarhere\]

8.2.0 (2021-04-01)
------------------

-   Added getxmp() method \#5144 \[UrielMaD, radarhere\]
-   Add ImageShow support for GraphicsMagick \#5349 \[latosha-maltba, radarhere\]
-   Do not load transparent pixels from subsequent GIF frames \#5333 \[zewt, radarhere\]
-   Use LZW encoding when saving GIF images \#5291 \[raygard\]
-   Set all transparent colors to be equal in quantize() \#5282 \[radarhere\]
-   Allow PixelAccess to use Python \_\_int\_\_ when parsing x and y \#5206 \[radarhere\]
-   Removed Image.\_MODEINFO \#5316 \[radarhere\]
-   Add preserve\_tone option to autocontrast \#5350 \[elejke, radarhere\]
-   Fixed linear\_gradient and radial\_gradient I and F modes \#5274 \[radarhere\]
-   Add support for reading TIFFs with PlanarConfiguration=2 \#5364 \[kkopachev, wiredfool, nulano\]
-   Deprecated categories \#5351 \[radarhere\]
-   Do not premultiply alpha when resizing with Image.NEAREST resampling \#5304 \[nulano\]
-   Dynamically link FriBiDi instead of Raqm \#5062 \[nulano\]
-   Allow fewer PNG palette entries than the bit depth maximum when saving \#5330 \[radarhere\]
-   Use duration from info dictionary when saving WebP \#5338 \[radarhere\]
-   Stop flattening EXIF IFD into getexif() \#4947 \[radarhere, kkopachev\]
-   Replaced tiff\_deflate with tiff\_adobe\_deflate compression when saving TIFF images \#5343 \[radarhere\]
-   Save ICC profile from TIFF encoderinfo \#5321 \[radarhere\]
-   Moved RGB fix inside ImageQt class \#5268 \[radarhere\]
-   Allow alpha\_composite destination to be negative \#5313 \[radarhere\]
-   Ensure file is closed if it is opened by ImageQt.ImageQt \#5260 \[radarhere\]
-   Added ImageDraw rounded\_rectangle method \#5208 \[radarhere\]
-   Added IPythonViewer \#5289 \[radarhere, Kipkurui-mutai\]
-   Only draw each rectangle outline pixel once \#5183 \[radarhere\]
-   Use mmap instead of built-in Win32 mapper \#5224 \[radarhere, cgohlke\]
-   Handle PCX images with an odd stride \#5214 \[radarhere\]
-   Only read different sizes for \"Large Thumbnail\" MPO frames \#5168 \[radarhere\]
-   Added PyQt6 support \#5258 \[radarhere\]
-   Changed Image.open formats parameter to be case-insensitive \#5250 \[Piolie, radarhere\]
-   Deprecate Tk/Tcl 8.4, to be removed in Pillow 10 (2023-07-01) \#5216 \[radarhere\]
-   Added tk version to pilinfo \#5226 \[radarhere, nulano\]
-   Support for ignoring tests when running valgrind \#5150 \[wiredfool, radarhere, hugovk\]
-   OSS-Fuzz support \#5189 \[wiredfool, radarhere\]

8.1.2 (2021-03-06)
------------------

-   Fix Memory DOS in BLP (CVE-2021-27921), ICNS (CVE-2021-27922) and ICO (CVE-2021-27923) Image Plugins \[wiredfool\]

8.1.1 (2021-03-01)
------------------

-   Use more specific regex chars to prevent ReDoS. CVE-2021-25292 \[hugovk\]
-   Fix OOB Read in TiffDecode.c, and check the tile validity before reading. CVE-2021-25291 \[wiredfool\]
-   Fix negative size read in TiffDecode.c. CVE-2021-25290 \[wiredfool\]
-   Fix OOB read in SgiRleDecode.c. CVE-2021-25293 \[wiredfool\]
-   Incorrect error code checking in TiffDecode.c. CVE-2021-25289 \[wiredfool\]
-   PyModule\_AddObject fix for Python 3.10 \#5194 \[radarhere\]

8.1.0 (2021-01-02)
------------------

-   Fix TIFF OOB Write error. CVE-2020-35654 \#5175 \[wiredfool\]
-   Fix for Read Overflow in PCX Decoding. CVE-2020-35653 \#5174 \[wiredfool, radarhere\]
-   Fix for SGI Decode buffer overrun. CVE-2020-35655 \#5173 \[wiredfool, radarhere\]
-   Fix OOB Read when saving GIF of xsize=1 \#5149 \[wiredfool\]
-   Makefile updates \#5159 \[wiredfool, radarhere\]
-   Add support for PySide6 \#5161 \[hugovk\]
-   Use disposal settings from previous frame in APNG \#5126 \[radarhere\]
-   Added exception explaining that \_[repr\_png]() saves to PNG \#5139 \[radarhere\]
-   Use previous disposal method in GIF load\_end \#5125 \[radarhere\]
-   Allow putpalette to accept 1024 integers to include alpha values \#5089 \[radarhere\]
-   Fix OOB Read when writing TIFF with custom Metadata \#5148 \[wiredfool\]
-   Added append\_images support for ICO \#4568 \[ziplantil, radarhere\]
-   Block TIFFTAG\_SUBIFD \#5120 \[radarhere\]
-   Fixed dereferencing potential null pointers \#5108, \#5111 \[cgohlke, radarhere\]
-   Deprecate FreeType 2.7 \#5098 \[hugovk, radarhere\]
-   Moved warning to end of execution \#4965 \[radarhere\]
-   Removed unused fromstring and tostring C methods \#5026 \[radarhere\]
-   init() if one of the formats is unrecognised \#5037 \[radarhere\]
-   Moved string\_dimension CVE image to pillow-depends \#4993 \[radarhere\]
-   Support raw rgba8888 for DDS \#4760 \[qiankanglai\]

8.0.1 (2020-10-22)
------------------

-   Update FreeType used in binary wheels to 2.10.4 to fix CVE-2020-15999. \[radarhere\]
-   Moved string\_dimension image to pillow-depends \#4993 \[radarhere\]

8.0.0 (2020-10-15)
------------------

-   Drop support for EOL Python 3.5 \#4746, \#4794 \[hugovk, radarhere, nulano\]
-   Drop support for PyPy3 \< 7.2.0 \#4964 \[nulano\]
-   Remove ImageCms.CmsProfile attributes deprecated since 3.2.0 \#4768 \[hugovk, radarhere\]
-   Remove long-deprecated Image.py functions \#4798 \[hugovk, nulano, radarhere\]
-   Add support for 16-bit precision JPEG quantization values \#4918 \[gofr\]
-   Added reading of IFD tag type \#4979 \[radarhere\]
-   Initialize offset memory for PyImagingPhotoPut \#4806 \[nqbit\]
-   Fix TiffDecode comparison warnings \#4756 \[nulano\]
-   Docs: Add dark mode \#4968 \[hugovk, nulano\]
-   Added macOS SDK install path to library and include directories \#4974 \[radarhere, fxcoudert\]
-   Imaging.h: prevent confusion with system \#4923 \[ax3l, ,radarhere\]
-   Avoid using pkg\_resources in PIL.features.pilinfo \#4975 \[nulano\]
-   Add getlength and getbbox functions for TrueType fonts \#4959 \[nulano, radarhere, hugovk\]
-   Allow tuples with one item to give single color value in getink \#4927 \[radarhere, nulano\]
-   Add support for CBDT and COLR fonts \#4955 \[nulano, hugovk\]
-   Removed OSError in favour of DecompressionBombError for BMP \#4966 \[radarhere\]
-   Implemented another ellipse drawing algorithm \#4523 \[xtsm, radarhere\]
-   Removed unused JpegImagePlugin.\_fixup\_dict function \#4957 \[radarhere\]
-   Added reading and writing of private PNG chunks \#4292 \[radarhere\]
-   Implement anchor for TrueType fonts \#4930 \[nulano, hugovk\]
-   Fixed bug in Exif \_\_delitem\_\_ \#4942 \[radarhere\]
-   Fix crash in ImageTk.PhotoImage on MinGW 64-bit \#4946 \[nulano\]
-   Moved CVE images to pillow-depends \#4929 \[radarhere\]
-   Refactor font\_getsize and font\_render \#4910 \[nulano\]
-   Fixed loading profile with non-ASCII path on Windows \#4914 \[radarhere\]
-   Fixed effect\_spread bug for zero distance \#4908 \[radarhere, hugovk\]
-   Added formats parameter to Image.open \#4837 \[nulano, radarhere\]
-   Added regular\_polygon draw method \#4846 \[comhar\]
-   Raise proper TypeError in putpixel \#4882 \[nulano, hugovk\]
-   Added writing of subIFDs \#4862 \[radarhere\]
-   Fix IFDRational \_\_eq\_\_ bug \#4888 \[luphord, radarhere\]
-   Fixed duplicate variable name \#4885 \[liZe, radarhere\]
-   Added homebrew zlib include directory \#4842 \[radarhere\]
-   Corrected inverted PDF CMYK colors \#4866 \[radarhere\]
-   Do not try to close file pointer if file pointer is empty \#4823 \[radarhere\]
-   ImageOps.autocontrast: add mask parameter \#4843 \[navneeth, hugovk\]
-   Read EXIF data tEXt chunk into info as bytes instead of string \#4828 \[radarhere\]
-   Replaced distutils with setuptools \#4797, \#4809, \#4814, \#4817, \#4829, \#4890 \[hugovk, radarhere\]
-   Add MIME type to PsdImagePlugin \#4788 \[samamorgan\]
-   Allow ImageOps.autocontrast to specify low and high cutoffs separately \#4749 \[millionhz, radarhere\]

7.2.0 (2020-07-01)
------------------

-   Do not convert I;16 images when showing PNGs \#4744 \[radarhere\]
-   Fixed ICNS file pointer saving \#4741 \[radarhere\]
-   Fixed loading non-RGBA mode APNGs with dispose background \#4742 \[radarhere\]
-   Deprecated \_showxv \#4714 \[radarhere\]
-   Deprecate Image.show(command=\"\...\") \#4646 \[nulano, hugovk, radarhere\]
-   Updated JPEG magic number \#4707 \[Cykooz, radarhere\]
-   Change STRIPBYTECOUNTS to LONG if necessary when saving \#4626 \[radarhere, hugovk\]
-   Write JFIF header when saving JPEG \#4639 \[radarhere\]
-   Replaced tiff\_jpeg with jpeg compression when saving TIFF images \#4627 \[radarhere\]
-   Writing TIFF tags: improved BYTE, added UNDEFINED \#4605 \[radarhere\]
-   Consider transparency when pasting text on an RGBA image \#4566 \[radarhere\]
-   Added method argument to single frame WebP saving \#4547 \[radarhere\]
-   Use ImageFileDirectory\_v2 in Image.Exif \#4637 \[radarhere\]
-   Corrected reading EXIF metadata without prefix \#4677 \[radarhere\]
-   Fixed drawing a jointed line with a sequence of numeric values \#4580 \[radarhere\]
-   Added support for 1-D NumPy arrays \#4608 \[radarhere\]
-   Parse orientation from XMP tags \#4560 \[radarhere\]
-   Speed up text layout by not rendering glyphs \#4652 \[nulano\]
-   Fixed ZeroDivisionError in Image.thumbnail \#4625 \[radarhere\]
-   Replaced TiffImagePlugin DEBUG with logging \#4550 \[radarhere\]
-   Fix repeatedly loading .gbr \#4620 \[ElinksFr, radarhere\]
-   JPEG: Truncate icclist instead of setting to None \#4613 \[homm\]
-   Fixes default offset for Exif \#4594 \[rodrigob, radarhere\]
-   Fixed bug when unpickling TIFF images \#4565 \[radarhere\]
-   Fix pickling WebP \#4561 \[hugovk, radarhere\]
-   Replace IOError and WindowsError aliases with OSError \#4536 \[hugovk, radarhere\]

7.1.2 (2020-04-25)
------------------

-   Raise an EOFError when seeking too far in PNG \#4528 \[radarhere\]

7.1.1 (2020-04-02)
------------------

-   Fix regression seeking and telling PNGs \#4512 \#4514 \[hugovk, radarhere\]

7.1.0 (2020-04-01)
------------------

-   Fix multiple OOB reads in FLI decoding \#4503 \[wiredfool\]
-   Fix buffer overflow in SGI-RLE decoding \#4504 \[wiredfool, hugovk\]
-   Fix bounds overflow in JPEG 2000 decoding \#4505 \[wiredfool\]
-   Fix bounds overflow in PCX decoding \#4506 \[wiredfool\]
-   Fix 2 buffer overflows in TIFF decoding \#4507 \[wiredfool\]
-   Add APNG support \#4243 \[pmrowla, radarhere, hugovk\]
-   ImageGrab.grab() for Linux with XCB \#4260 \[nulano, radarhere\]
-   Added three new channel operations \#4230 \[dwastberg, radarhere\]
-   Prevent masking of Image reduce method in Jpeg2KImagePlugin \#4474 \[radarhere, homm\]
-   Added reading of earlier ImageMagick PNG EXIF data \#4471 \[radarhere\]
-   Fixed endian handling for I;16 getextrema \#4457 \[radarhere\]
-   Release buffer if function returns prematurely \#4381 \[radarhere\]
-   Add JPEG comment to info dictionary \#4455 \[radarhere\]
-   Fix size calculation of Image.thumbnail() \#4404 \[orlnub123\]
-   Fixed stroke on FreeType \< 2.9 \#4401 \[radarhere\]
-   If present, only use alpha channel for bounding box \#4454 \[radarhere\]
-   Warn if an unknown feature is passed to features.check() \#4438 \[jdufresne\]
-   Fix Name field length when saving IM images \#4424 \[hugovk, radarhere\]
-   Allow saving of zero quality JPEG images \#4440 \[radarhere\]
-   Allow explicit zero width to hide outline \#4334 \[radarhere\]
-   Change ContainerIO return type to match file object mode \#4297 \[jdufresne, radarhere\]
-   Only draw each polygon pixel once \#4333 \[radarhere\]
-   Add support for shooting situation Exif IFD tags \#4398 \[alexagv\]
-   Handle multiple and malformed JPEG APP13 markers \#4370 \[homm\]
-   Depends: Update libwebp to 1.1.0 \#4342, libjpeg to 9d \#4352 \[radarhere\]

7.0.0 (2020-01-02)
------------------

-   Drop support for EOL Python 2.7 \#4109 \[hugovk, radarhere, jdufresne\]
-   Fix rounding error on RGB to L conversion \#4320 \[homm\]
-   Exif writing fixes: Rational boundaries and signed/unsigned types \#3980 \[kkopachev, radarhere\]
-   Allow loading of WMF images at a given DPI \#4311 \[radarhere\]
-   Added reduce operation \#4251 \[homm\]
-   Raise ValueError for io.StringIO in Image.open \#4302 \[radarhere, hugovk\]
-   Fix thumbnail geometry when DCT scaling is used \#4231 \[homm, radarhere\]
-   Use default DPI when exif provides invalid x\_resolution \#4147 \[beipang2, radarhere\]
-   Change default resize resampling filter from NEAREST to BICUBIC \#4255 \[homm\]
-   Fixed black lines on upscaled images with the BOX filter \#4278 \[homm\]
-   Better thumbnail aspect ratio preservation \#4256 \[homm\]
-   Add La mode packing and unpacking \#4248 \[homm\]
-   Include tests in coverage reports \#4173 \[hugovk\]
-   Handle broken Photoshop data \#4239 \[radarhere\]
-   Raise a specific exception if no data is found for an MPO frame \#4240 \[radarhere\]
-   Fix Unicode support for PyPy \#4145 \[nulano\]
-   Added UnidentifiedImageError \#4182 \[radarhere, hugovk\]
-   Remove deprecated \_\_version\_\_ from plugins \#4197 \[hugovk, radarhere\]
-   Fixed freeing unallocated pointer when resizing with height too large \#4116 \[radarhere\]
-   Copy info in Image.transform \#4128 \[radarhere\]
-   Corrected DdsImagePlugin setting info gamma \#4171 \[radarhere\]
-   Depends: Update libtiff to 4.1.0 \#4195, Tk Tcl to 8.6.10 \#4229, libimagequant to 2.12.6 \#4318 \[radarhere\]
-   Improve handling of file resources \#3577 \[jdufresne\]
-   Removed CI testing of Fedora 29 \#4165 \[hugovk\]
-   Added pypy3 to tox envlist \#4137 \[jdufresne\]
-   Drop support for EOL PyQt4 and PySide \#4108 \[hugovk, radarhere\]
-   Removed deprecated setting of TIFF image sizes \#4114 \[radarhere\]
-   Removed deprecated PILLOW\_VERSION \#4107 \[hugovk\]
-   Changed default frombuffer raw decoder args \#1730 \[radarhere\]

6.2.2 (2020-01-02)
------------------

-   This is the last Pillow release to support Python 2.7 \#3642
-   Overflow checks for realloc for tiff decoding. CVE-2020-5310 \[wiredfool, radarhere\]
-   Catch SGI buffer overrun. CVE-2020-5311 \[radarhere\]
-   Catch PCX P mode buffer overrun. CVE-2020-5312 \[radarhere\]
-   Catch FLI buffer overrun. CVE-2020-5313 \[radarhere\]
-   Raise an error for an invalid number of bands in FPX image. CVE-2019-19911 \[wiredfool, radarhere\]

6.2.1 (2019-10-21)
------------------

-   Add support for Python 3.8 \#4141 \[hugovk\]

6.2.0 (2019-10-01)
------------------

-   Catch buffer overruns \#4104 \[radarhere\]
-   Initialize rows\_per\_strip when RowsPerStrip tag is missing \#4034 \[cgohlke, radarhere\]
-   Raise error if TIFF dimension is a string \#4103 \[radarhere\]
-   Added decompression bomb checks \#4102 \[radarhere\]
-   Fix ImageGrab.grab DPI scaling on Windows 10 version 1607+ \#4000 \[nulano, radarhere\]
-   Corrected negative seeks \#4101 \[radarhere\]
-   Added argument to capture all screens on Windows \#3950 \[nulano, radarhere\]
-   Updated warning to specify when Image.frombuffer defaults will change \#4086 \[radarhere\]
-   Changed WindowsViewer format to PNG \#4080 \[radarhere\]
-   Use TIFF orientation \#4063 \[radarhere\]
-   Raise the same error if a truncated image is loaded a second time \#3965 \[radarhere\]
-   Lazily use ImageFileDirectory\_v1 values from Exif \#4031 \[radarhere\]
-   Improved HSV conversion \#4004 \[radarhere\]
-   Added text stroking \#3978 \[radarhere, hugovk\]
-   No more deprecated bdist\_wininst .exe installers \#4029 \[hugovk\]
-   Do not allow floodfill to extend into negative coordinates \#4017 \[radarhere\]
-   Fixed arc drawing bug for a non-whole number of degrees \#4014 \[radarhere\]
-   Fix bug when merging identical images to GIF with a list of durations \#4003 \[djy0, radarhere\]
-   Fix bug in TIFF loading of BufferedReader \#3998 \[chadawagner\]
-   Added fallback for finding ld on MinGW Cygwin \#4019 \[radarhere\]
-   Remove indirect dependencies from requirements.txt \#3976 \[hugovk\]
-   Depends: Update libwebp to 1.0.3 \#3983, libimagequant to 2.12.5 \#3993, freetype to 2.10.1 \#3991 \[radarhere\]
-   Change overflow check to use PY\_SSIZE\_T\_MAX \#3964 \[radarhere\]
-   Report reason for pytest skips \#3942 \[hugovk\]

6.1.0 (2019-07-01)
------------------

-   Deprecate Image.\_\_del\_\_ \#3929 \[jdufresne\]
-   Tiff: Add support for JPEG quality \#3886 \[olt\]
-   Respect the PKG\_CONFIG environment variable when building \#3928 \[chewi\]
-   Use explicit memcpy() to avoid unaligned memory accesses \#3225 \[DerDakon\]
-   Improve encoding of TIFF tags \#3861 \[olt\]
-   Update Py\_UNICODE to Py\_UCS4 \#3780 \[nulano\]
-   Consider I;16 pixel size when drawing \#3899 \[radarhere\]
-   Add TIFFTAG\_SAMPLEFORMAT to blocklist \#3926 \[cgohlke, radarhere\]
-   Create GIF deltas from background colour of GIF frames if disposal mode is 2 \#3708 \[sircinnamon, radarhere\]
-   Added ImageSequence all\_frames \#3778 \[radarhere\]
-   Use unsigned int to store TIFF IFD offsets \#3923 \[cgohlke\]
-   Include CPPFLAGS when searching for libraries \#3819 \[jefferyto\]
-   Updated TIFF tile descriptors to match current decoding functionality \#3795 \[dmnisson\]
-   Added an `image.entropy()` method (second revision) \#3608 \[fish2000\]
-   Pass the correct types to PyArg\_ParseTuple \#3880 \[QuLogic\]
-   Fixed crash when loading non-font bytes \#3912 \[radarhere\]
-   Fix SPARC memory alignment issues in Pack/Unpack functions \#3858 \[kulikjak\]
-   Added CMYK;16B and CMYK;16N unpackers \#3913 \[radarhere\]
-   Fixed bugs in calculating text size \#3864 \[radarhere\]
-   Add \_\_main\_\_.py to output basic format and support information \#3870 \[jdufresne\]
-   Added variation font support \#3802 \[radarhere\]
-   Do not down-convert if image is LA when showing with PNG format \#3869 \[radarhere\]
-   Improve handling of PSD frames \#3759 \[radarhere\]
-   Improved ICO and ICNS loading \#3897 \[radarhere\]
-   Changed Preview application path so that it is no longer static \#3896 \[radarhere\]
-   Corrected ttb text positioning \#3856 \[radarhere\]
-   Handle unexpected ICO image sizes \#3836 \[radarhere\]
-   Fixed bits value for RGB;16N unpackers \#3837 \[kkopachev\]
-   Travis CI: Add Fedora 30, remove Fedora 28 \#3821 \[hugovk\]
-   Added reading of CMYK;16L TIFF images \#3817 \[radarhere\]
-   Fixed dimensions of 1-bit PDFs \#3827 \[radarhere\]
-   Fixed opening mmap image through Path on Windows \#3825 \[radarhere\]
-   Fixed ImageDraw arc gaps \#3824 \[radarhere\]
-   Expand GIF to include frames with extents outside the image size \#3822 \[radarhere\]
-   Fixed ImageTk getimage \#3814 \[radarhere\]
-   Fixed bug in decoding large images \#3791 \[radarhere\]
-   Fixed reading APP13 marker without Photoshop data \#3771 \[radarhere\]
-   Added option to include layered windows in ImageGrab.grab on Windows \#3808 \[radarhere\]
-   Detect libimagequant when installed by pacman on MingW \#3812 \[radarhere\]
-   Fixed raqm layout bug \#3787 \[radarhere\]
-   Fixed loading font with non-Unicode path on Windows \#3785 \[radarhere\]
-   Travis CI: Upgrade PyPy from 6.0.0 to 7.1.1 \#3783 \[hugovk, johnthagen\]
-   Depends: Updated openjpeg to 2.3.1 \#3794, raqm to 0.7.0 \#3877, libimagequant to 2.12.3 \#3889 \[radarhere\]
-   Fix numpy bool bug \#3790 \[radarhere\]

6.0.0 (2019-04-01)
------------------

-   Python 2.7 support will be removed in Pillow 7.0.0 \#3682 \[hugovk\]
-   Add EXIF class \#3625 \[radarhere\]
-   Add ImageOps exif\_transpose method \#3687 \[radarhere\]
-   Added warnings to deprecated CMSProfile attributes \#3615 \[hugovk\]
-   Documented reading TIFF multiframe images \#3720 \[akuchling\]
-   Improved speed of opening an MPO file \#3658 \[Glandos\]
-   Update palette in quantize \#3721 \[radarhere\]
-   Improvements to TIFF is\_animated and n\_frames \#3714 \[radarhere\]
-   Fixed incompatible pointer type warnings \#3754 \[radarhere\]
-   Improvements to PA and LA conversion and palette operations \#3728 \[radarhere\]
-   Consistent DPI rounding \#3709 \[radarhere\]
-   Change size of MPO image to match frame \#3588 \[radarhere\]
-   Read Photoshop resolution data \#3701 \[radarhere\]
-   Ensure image is mutable before saving \#3724 \[radarhere\]
-   Correct remap\_palette documentation \#3740 \[radarhere\]
-   Promote P images to PA in putalpha \#3726 \[radarhere\]
-   Allow RGB and RGBA values for new P images \#3719 \[radarhere\]
-   Fixed TIFF bug when seeking backwards and then forwards \#3713 \[radarhere\]
-   Cache EXIF information \#3498 \[Glandos\]
-   Added transparency for all PNG grayscale modes \#3744 \[radarhere\]
-   Fix deprecation warnings in Python 3.8 \#3749 \[radarhere\]
-   Fixed GIF bug when rewinding to a non-zero frame \#3716 \[radarhere\]
-   Only close original fp in \_\_del\_\_ and \_\_exit\_\_ if original fp is exclusive \#3683 \[radarhere\]
-   Fix BytesWarning in Tests/test\_numpy.py \#3725 \[jdufresne\]
-   Add missing MIME types and extensions \#3520 \[pirate486743186\]
-   Add I;16 PNG save \#3566 \[radarhere\]
-   Add support for BMP RGBA bitfield compression \#3705 \[radarhere\]
-   Added ability to set language for text rendering \#3693 \[iwsfutcmd\]
-   Only close exclusive fp on Image \_\_exit\_\_ \#3698 \[radarhere\]
-   Changed EPS subprocess stdout from devnull to None \#3635 \[radarhere\]
-   Add reading old-JPEG compressed TIFFs \#3489 \[kkopachev\]
-   Add EXIF support for PNG \#3674 \[radarhere\]
-   Add option to set dither param on quantize \#3699 \[glasnt\]
-   Add reading of DDS uncompressed RGB data \#3673 \[radarhere\]
-   Correct length of Tiff BYTE tags \#3672 \[radarhere\]
-   Add DIB saving and loading through Image open \#3691 \[radarhere\]
-   Removed deprecated VERSION \#3624 \[hugovk\]
-   Fix \'BytesWarning: Comparison between bytes and string\' in PdfDict \#3580 \[jdufresne\]
-   Do not resize in Image.thumbnail if already the destination size \#3632 \[radarhere\]
-   Replace .seek() magic numbers with [io.SEEK]()\* constants \#3572 \[jdufresne\]
-   Make ContainerIO.isatty() return a bool, not int \#3568 \[jdufresne\]
-   Add support to all transpose operations for I;16 modes \#3563, \#3741 \[radarhere\]
-   Deprecate support for PyQt4 and PySide \#3655 \[hugovk, radarhere\]
-   Add TIFF compression codecs: LZMA, Zstd, WebP \#3555 \[cgohlke\]
-   Fixed pickling of iTXt class with protocol \> 1 \#3537 \[radarhere\]
-   \_util.isPath returns True for pathlib.Path objects \#3616 \[wbadart\]
-   Remove unnecessary unittest.main() boilerplate from test files \#3631 \[jdufresne\]
-   Exif: Seek to IFD offset \#3584 \[radarhere\]
-   Deprecate PIL.\*ImagePlugin.\_\_version\_\_ attributes \#3628 \[jdufresne\]
-   Docs: Add note about ImageDraw operations that exceed image bounds \#3620 \[radarhere\]
-   Allow for unknown PNG chunks after image data \#3558 \[radarhere\]
-   Changed EPS subprocess stdin from devnull to None \#3611 \[radarhere\]
-   Fix possible integer overflow \#3609 \[cgohlke\]
-   Catch BaseException for resource cleanup handlers \#3574 \[jdufresne\]
-   Improve pytest configuration to allow specific tests as CLI args \#3579 \[jdufresne\]
-   Drop support for Python 3.4 \#3596 \[hugovk\]
-   Remove deprecated PIL.OleFileIO \#3598 \[hugovk\]
-   Remove deprecated ImageOps undocumented functions \#3599 \[hugovk\]
-   Depends: Update libwebp to 1.0.2 \#3602 \[radarhere\]
-   Detect MIME types \#3525 \[radarhere\]

5.4.1 (2019-01-06)
------------------

-   File closing: Only close \_\_fp if not fp \#3540 \[radarhere\]
-   Fix build for Termux \#3529 \[pslacerda\]
-   PNG: Detect MIME types \#3525 \[radarhere\]
-   PNG: Handle IDAT chunks after image end \#3532 \[radarhere\]

5.4.0 (2019-01-01)
------------------

-   Docs: Improved ImageChops documentation \#3522 \[radarhere\]
-   Allow RGB and RGBA values for P image putpixel \#3519 \[radarhere\]
-   Add APNG extension to PNG plugin \#3501 \[pirate486743186, radarhere\]
-   Lookup ld.so.cache instead of hardcoding search paths \#3245 \[pslacerda\]
-   Added custom string TIFF tags \#3513 \[radarhere\]
-   Improve setup.py configuration \#3395 \[diorcety\]
-   Read textual chunks located after IDAT chunks for PNG \#3506 \[radarhere\]
-   Performance: Don\'t try to hash value if enum is empty \#3503 \[Glandos\]
-   Added custom int and float TIFF tags \#3350 \[radarhere\]
-   Fixes for issues reported by static code analysis \#3393 \[frenzymadness\]
-   GIF: Wait until mode is normalized to copy im.info into encoderinfo \#3187 \[radarhere\]
-   Docs: Add page of deprecations and removals \#3486 \[hugovk\]
-   Travis CI: Upgrade PyPy from 5.8.0 to 6.0 \#3488 \[hugovk\]
-   Travis CI: Allow lint job to fail \#3467 \[hugovk\]
-   Resolve \_\_fp when closing and deleting \#3261 \[radarhere\]
-   Close exclusive fp before discarding \#3461 \[radarhere\]
-   Updated open files documentation \#3490 \[radarhere\]
-   Added libjpeg\_turbo to check\_feature \#3493 \[radarhere\]
-   Change color table index background to tuple when saving as WebP \#3471 \[radarhere\]
-   Allow arbitrary number of comment extension subblocks \#3479 \[radarhere\]
-   Ensure previous FLI frame is loaded before seeking to the next \#3478 \[radarhere\]
-   ImageShow improvements \#3450 \[radarhere\]
-   Depends: Update libimagequant to 2.12.2 \#3442, libtiff to 4.0.10 \#3458, libwebp to 1.0.1 \#3468, Tk Tcl to 8.6.9 \#3465 \[radarhere\]
-   Check quality\_layers type \#3464 \[radarhere\]
-   Add context manager, \_\_del\_\_ and close methods to TarIO \#3455 \[radarhere\]
-   Test: Do not play sound when running screencapture command \#3454 \[radarhere\]
-   Close exclusive fp on open exception \#3456 \[radarhere\]
-   Only close existing fp in WebP if fp is exclusive \#3418 \[radarhere\]
-   Docs: Re-add the downloads badge \#3443 \[hugovk\]
-   Added negative index to PixelAccess \#3406 \[Nazime\]
-   Change tuple background to global color table index when saving as GIF \#3385 \[radarhere\]
-   Test: Improved ImageGrab tests \#3424 \[radarhere\]
-   Flake8 fixes \#3422, \#3440 \[radarhere, hugovk\]
-   Only ask for YCbCr-\>RGB libtiff conversion for jpeg-compressed tiffs \#3417 \[kkopachev\]
-   Optimise ImageOps.fit by combining resize and crop \#3409 \[homm\]

5.3.0 (2018-10-01)
------------------

-   Changed Image size property to be read-only by default \#3203 \[radarhere\]
-   Add warnings if image file identification fails due to lack of WebP support \#3169 \[radarhere, hugovk\]
-   Hide the Ghostscript progress dialog popup on Windows \#3378 \[hugovk\]
-   Adding support to reading tiled and YcbCr jpeg tiffs through libtiff \#3227 \[kkopachev\]
-   Fixed None as TIFF compression argument \#3310 \[radarhere\]
-   Changed GIF seek to remove previous info items \#3324 \[radarhere\]
-   Improved PDF document info \#3274 \[radarhere\]
-   Add line width parameter to rectangle and ellipse-based shapes \#3094 \[hugovk, radarhere\]
-   Fixed decompression bomb check in \_crop \#3313 \[dinkolubina, hugovk\]
-   Added support to ImageDraw.floodfill for non-RGB colors \#3377 \[radarhere\]
-   Tests: Avoid catching unexpected exceptions in tests \#2203 \[jdufresne\]
-   Use TextIOWrapper.detach() instead of NoCloseStream \#2214 \[jdufresne\]
-   Added transparency to matrix conversion \#3205 \[radarhere\]
-   Added ImageOps pad method \#3364 \[radarhere\]
-   Give correct extrema for I;16 format images \#3359 \[bz2\]
-   Added PySide2 \#3279 \[radarhere\]
-   Corrected TIFF tags \#3369 \[radarhere\]
-   CI: Install CFFI and pycparser without any PYTHONOPTIMIZE \#3374 \[hugovk\]
-   Read/Save RGB webp as RGB (instead of RGBX) \#3298 \[kkopachev\]
-   ImageDraw: Add line joints \#3250 \[radarhere\]
-   Improved performance of ImageDraw floodfill method \#3294 \[yo1995\]
-   Fix builds with \--parallel \#3272 \[hsoft\]
-   Add more raw Tiff modes (RGBaX, RGBaXX, RGBAX, RGBAXX) \#3335 \[homm\]
-   Close existing WebP fp before setting new fp \#3341 \[radarhere\]
-   Add orientation, compression and id\_section as TGA save keyword arguments \#3327 \[radarhere\]
-   Convert int values of RATIONAL TIFF tags to floats \#3338 \[radarhere, wiredfool\]
-   Fix code for PYTHONOPTIMIZE \#3233 \[hugovk\]
-   Changed ImageFilter.Kernel to subclass ImageFilter.BuiltinFilter, instead of the other way around \#3273 \[radarhere\]
-   Remove unused draw.draw\_line, draw.draw\_point and font.getabc methods \#3232 \[hugovk\]
-   Tests: Added ImageFilter tests \#3295 \[radarhere\]
-   Tests: Added ImageChops tests \#3230 \[hugovk, radarhere\]
-   AppVeyor: Download lib if not present in pillow-depends \#3316 \[radarhere\]
-   Travis CI: Add Python 3.7 and Xenial \#3234 \[hugovk\]
-   Docs: Added documentation for NumPy conversion \#3301 \[radarhere\]
-   Depends: Update libimagequant to 2.12.1 \#3281 \[radarhere\]
-   Add three-color support to ImageOps.colorize \#3242 \[tsennott\]
-   Tests: Add LA to TGA test modes \#3222 \[danpla\]
-   Skip outline if the draw operation fills with the same colour \#2922 \[radarhere\]
-   Flake8 fixes \#3173, \#3380 \[radarhere\]
-   Avoid deprecated \'U\' mode when opening files \#2187 \[jdufresne\]

5.2.0 (2018-07-01)
------------------

-   Fixed saving a multiframe image as a single frame PDF \#3137 \[radarhere\]
-   If a Qt version is already imported, attempt to use it first \#3143 \[radarhere\]
-   Fix transform fill color for alpha images \#3147 \[fozcode\]
-   TGA: Add support for writing RLE data \#3186 \[danpla\]
-   TGA: Read and write LA data \#3178 \[danpla\]
-   QuantOctree.c: Remove erroneous attempt to average over an empty range \#3196 \[tkoeppe\]
-   Changed ICNS format tests to pass on OS X 10.11 \#3202 \[radarhere\]
-   Fixed bug in ImageDraw.multiline\_textsize() \#3114 \[tianyu139\]
-   Added getsize\_multiline support for PIL.ImageFont \#3113 \[tianyu139\]
-   Added ImageFile get\_format\_mimetype method \#3190 \[radarhere\]
-   Changed mmap file pointer to use context manager \#3216 \[radarhere\]
-   Changed ellipse point calculations to be more evenly distributed \#3142 \[radarhere\]
-   Only extract first Exif segment \#2946 \[hugovk\]
-   Tests: Test ImageDraw2, WalImageFile \#3135, \#2989 \[hugovk\]
-   Remove unnecessary \'\#if 0\' code \#3075 \[hugovk\]
-   Tests: Added GD tests \#1817 \[radarhere\]
-   Fix collections ABCs DeprecationWarning in Python 3.7 \#3123 \[hugovk\]
-   unpack\_from is faster than unpack of slice \#3201 \[landfillbaby\]
-   Docs: Add coordinate system links and file handling links in documentation \#3204, \#3214 \[radarhere\]
-   Tests: TestFilePng: Fix test\_save\_l\_transparency() \#3182 \[danpla\]
-   Docs: Correct argument name \#3171 \[radarhere\]
-   Docs: Update CMake download URL \#3166 \[radarhere\]
-   Docs: Improve Image.transform documentation \#3164 \[radarhere\]
-   Fix transform fillcolor argument when image mode is RGBA or LA \#3163 \[radarhere\]
-   Tests: More specific Exception testing \#3158 \[radarhere\]
-   Add getrgb HSB/HSV color strings \#3148 \[radarhere\]
-   Allow float values in getrgb HSL color string \#3146 \[radarhere\]
-   AppVeyor: Upgrade to Python 2.7.15 and 3.4.4 \#3140 \[radarhere\]
-   AppVeyor: Upgrade to PyPy 6.0.0 \#3133 \[hugovk\]
-   Deprecate PILLOW\_VERSION and VERSION \#3090 \[hugovk\]
-   Support Python 3.7 \#3076 \[hugovk\]
-   Depends: Update freetype to 2.9.1, libjpeg to 9c, libwebp to 1.0.0 \#3121, \#3136, \#3108 \[radarhere\]
-   Build macOS wheels with Xcode 6.4, supporting older macOS versions \#3068 \[wiredfool\]
-   Fix \_i2f compilation on some GCC versions \#3067 \[homm\]
-   Changed encoderinfo to have priority over info when saving GIF images \#3086 \[radarhere\]
-   Rename PIL.version to PIL.\_version and remove it from module \#3083 \[homm\]
-   Enable background colour parameter on rotate \#3057 \[storesource\]
-   Remove unnecessary `#if 1` directive \#3072 \[jdufresne\]
-   Remove unused Python class, Path \#3070 \[jdufresne\]
-   Fix dereferencing type-punned pointer will break strict-aliasing \#3069 \[jdufresne\]

5.1.0 (2018-04-02)
------------------

-   Close fp before return in ImagingSavePPM \#3061 \[kathryndavies\]
-   Added documentation for ICNS append\_images \#3051 \[radarhere\]
-   Docs: Move intro text below its header \#3021 \[hugovk\]
-   CI: Rename appveyor.yml as .appveyor.yml \#2978 \[hugovk\]
-   Fix TypeError for JPEG2000 parser feed \#3042 \[hugovk\]
-   Certain corrupted jpegs can result in no data read \#3023 \[kkopachev\]
-   Add support for BLP file format \#3007 \[jleclanche\]
-   Simplify version checks \#2998 \[hugovk\]
-   Fix \"invalid escape sequence\" warning on Python 3.6+ \#2996 \[timgraham\]
-   Allow append\_images to set .icns scaled images \#3005 \[radarhere\]
-   Support appending to existing PDFs \#2965 \[vashek\]
-   Fix and improve efficient saving of ICNS on macOS \#3004 \[radarhere\]
-   Build: Enable pip cache in AppVeyor build \#3009 \[thijstriemstra\]
-   Trim trailing whitespace \#2985 \[Metallicow\]
-   Docs: Correct reference to Image.new method \#3000 \[radarhere\]
-   Rearrange ImageFilter classes into alphabetical order \#2990 \[radarhere\]
-   Test: Remove duplicate line \#2983 \[radarhere\]
-   Build: Update AppVeyor PyPy version \#3003 \[radarhere\]
-   Tiff: Open 8 bit Tiffs with 5 or 6 channels, discarding extra channels \#2938 \[homm\]
-   Readme: Added Twitter badge \#2930 \[hugovk\]
-   Removed \_\_main\_\_ code from ImageCms \#2942 \[radarhere\]
-   Test: Changed assert statements to unittest calls \#2961 \[radarhere\]
-   Depends: Update libimagequant to 2.11.10, raqm to 0.5.0, freetype to 2.9 \#3036, \#3017, \#2957 \[radarhere\]
-   Remove \_imaging.crc32 in favor of builtin Python crc32 implementation \#2935 \[wiredfool\]
-   Move Tk directory to src directory \#2928 \[hugovk\]
-   Enable pip cache in Travis CI \#2933 \[jdufresne\]
-   Remove unused and duplicate imports \#2927 \[radarhere\]
-   Docs: Changed documentation references to 2.x to 2.7 \#2921 \[radarhere\]
-   Fix memory leak when opening webp files \#2974 \[wiredfool\]
-   Setup: Fix \"TypeError: \'NoneType\' object is not iterable\" for PPC and CRUX \#2951 \[hugovk\]
-   Setup: Add libdirs for ppc64le and armv7l \#2968 \[nehaljwani\]

5.0.0 (2018-01-01)
------------------

-   Docs: Added docstrings from documentation \#2914 \[radarhere\]
-   Test: Switch from nose to pytest \#2815 \[hugovk\]
-   Rework Source directory layout, preventing accidental import of PIL. \#2911 \[wiredfool\]
-   Dynamically link libraqm \#2753 \[wiredfool\]
-   Removed scripts directory \#2901 \[wiredfool\]
-   TIFF: Run all compressed tiffs through libtiff decoder \#2899 \[wiredfool\]
-   GIF: Add disposal option when saving GIFs \#2902 \[linnil1, wiredfool\]
-   EPS: Allow for an empty line in EPS header data \#2903 \[radarhere\]
-   PNG: Add support for sRGB and cHRM chunks, permit sRGB when no iCCP chunk present \#2898 \[wiredfool\]
-   Dependencies: Update Tk Tcl to 8.6.8 \#2905 \[radarhere\]
-   Decompression bomb error now raised for images 2x larger than a decompression bomb warning \#2583 \[wiredfool\]
-   Test: avoid random failure in test\_effect\_noise \#2894 \[hugovk\]
-   Increased epsilon for test\_file\_eps.py:test\_showpage due to Arch update. \#2896 \[wiredfool\]
-   Removed check parameter from \_save in BmpImagePlugin, PngImagePlugin, ImImagePlugin, PalmImagePlugin, and PcxImagePlugin. \#2873 \[radarhere\]
-   Make PngImagePlugin.add\_text() zip argument type bool \#2890 \[jdufresne\]
-   Depends: Updated libwebp to 0.6.1 \#2880 \[radarhere\]
-   Remove unnecessary bool() calls in Image.registered\_extensions and skipKnownBadTests \#2891 \[jdufresne\]
-   Fix count of BITSPERSAMPLE items in broken TIFF files \#2883 \[homm\]
-   Fillcolor parameter for Image.Transform \#2852 \[wiredfool\]
-   Test: Display differences for test failures \#2862 \[wiredfool\]
-   Added executable flag to file with shebang line \#2884 \[radarhere\]
-   Setup: Specify compatible Python versions for pip \#2877 \[hugovk\]
-   Dependencies: Updated libimagequant to 2.11.4 \#2878 \[radarhere\]
-   Setup: Warn if trying to install for Py3.7 on Windows \#2855 \[hugovk\]
-   Doc: Fonts can be loaded from a file-like object, not just filename \#2861 \[robin-norwood\]
-   Add eog support for Ubuntu Image Viewer \#2864 \[NafisFaysal\]
-   Test: Test on 3.7-dev on Travis CI \#2870 \[hugovk\]
-   Dependencies: Update libtiff to 4.0.9 \#2871 \[radarhere\]
-   Setup: Replace deprecated platform.dist with file existence check \#2869 \[wiredfool\]
-   Build: Fix setup.py on Debian \#2853 \[wiredfool\]
-   Docs: Correct error in ImageDraw documentation \#2858 \[meribold\]
-   Test: Drop Ubuntu Precise, Fedora 24, Fedora 25, add Fedora 27, Centos 7, Amazon v2 CI Support \#2854, \#2843, \#2895, \#2897 \[wiredfool\]
-   Dependencies: Updated libimagequant to 2.11.3 \#2849 \[radarhere\]
-   Test: Fix test\_image.py to use tempfile \#2841 \[radarhere\]
-   Replace PIL.OleFileIO deprecation warning with descriptive ImportError \#2833 \[hugovk\]
-   WebP: Add support for animated WebP files \#2761 \[jd20\]
-   PDF: Set encoderinfo for images when saving multi-page PDF. Fixes \#2804. \#2805 \[ixio\]
-   Allow the olefile dependency to be optional \#2789 \[jdufresne\]
-   GIF: Permit LZW code lengths up to 12 bits in GIF decode \#2813 \[wiredfool\]
-   Fix unterminated string and unchecked exception in \_font\_text\_asBytes. \#2825 \[wiredfool\]
-   PPM: Use fixed list of whitespace, rather relying on locale, fixes \#272. \#2831 \[markmiscavage\]
-   Added support for generators when using append\_images \#2829, \#2835 \[radarhere\]
-   Doc: Correct PixelAccess.rst \#2824 \[hasahmed\]
-   Depends: Update raqm to 0.3.0 \#2822 \[radarhere\]
-   Docs: Link to maintained version of aggdraw \#2809 \[hugovk\]
-   Include license file in the generated wheel packages \#2801 \[jdufresne\]
-   Depends: Update openjpeg to 2.3.0 \#2791 \[radarhere\]
-   Add option to Makefile to build and install with C coverage \#2781 \[hugovk\]
-   Add context manager support to ImageFile.Parser and PngImagePlugin.ChunkStream \#2793 \[radarhere\]
-   ImageDraw.textsize: fix zero length error \#2788 \[wiredfool, hugovk\]

4.3.0 (2017-10-02)
------------------

-   Fix warning on pointer cast in isblock \#2775, \#2778 \[cgohlke\]
-   Doc: Added macOS High Sierra tested Pillow version \#2777 \[radarhere\]
-   Use correct Windows handle type on 64 bit in imagingcms \#2774 \[cgohlke\]
-   64 Bit Windows fix for block storage \#2773 \[cgohlke\]
-   Fix \"expression result unused\" warning \#2764 \[radarhere\]
-   Add 16bit Read/Write and RLE read support to SgiImageFile \#2769 \[jbltx, wiredfool\]
-   Block & array hybrid storage \#2738 \[homm\]
-   Common seek frame position check \#1849 \[radarhere\]
-   Doc: Add note about aspect ratio to Image thumbnail script \#2281 \[wilsonge\]
-   Fix ValueError: invalid version number \'1.0.0rc1\' in scipy release candidate \#2771 \[cgohlke\]
-   Unfreeze requirements.txt \#2766 \[hugovk\]
-   Test: ResourceWarning tests \#2756 \[hugovk\]
-   Use n\_frames to determine is\_animated if possible \#2315 \[radarhere\]
-   Doc: Corrected parameters in documentation \#2768 \[radarhere\]
-   Avoid unnecessary Image operations \#1891 \[radarhere\]
-   Added register\_extensions method \#1860 \[radarhere\]
-   Fix TIFF support for I;16S, I;16BS, and I;32BS rawmodes \#2748 \[wiredfool\]
-   Fixed doc syntax in ImageDraw \#2752 \[radarhere\]
-   Fixed support for building on Windows/msys2. Added Appveyor CI coverage for python3 on msys2 \#2746 \[wiredfool\]
-   Fix ValueError in Exif/Tiff IFD \#2719 \[wiredfool\]
-   Use pathlib2 for Path objects on Python \< 3.4 \#2291 \[asergi\]
-   Export only required properties in unsafe\_ptrs \#2740 \[homm\]
-   Alpha composite fixes \#2709 \[homm\]
-   Faster Transpose operations, added \'Transverse\' option \#2730 \[homm\]
-   Deprecate ImageOps undocumented functions gaussian\_blur, gblur, unsharp\_mask, usm and box\_blur in favor of ImageFilter implementations \#2735 \[homm\]
-   Dependencies: Updated freetype to 2.8.1 \#2741 \[radarhere\]
-   Bug: Player skipped first image \#2742 \[radarhere\]
-   Faster filter operations for Kernel, Gaussian, and Unsharp Mask filters \#2679 \[homm\]
-   EPS: Add showpage to force rendering of some EPS images \#2636 \[kaplun\]
-   DOC: Fix type of palette parameter in Image.quantize. \#2703 \[kkopachev\]
-   DOC: Fix Ico docs to match code \#2712 \[hugovk\]
-   Added file pointer save to SpiderImagePlugin \#2647 \[radarhere\]
-   Add targa version 2 footer \#2713 \[jhultgre\]
-   Removed redundant lines \#2714 \[radarhere\]
-   Travis CI: Use default pypy/pypy3 \#2721 \[hugovk\]
-   Fix for SystemError when rendering an empty string, added in 4.2.0 \#2706 \[wiredfool\]
-   Fix for memory leaks in font handling added in 4.2.0 \#2634 \[wiredfool\]
-   Tests: cleanup, more tests. Fixed WMF save handler \#2689 \[radarhere\]
-   Removed debugging interface for Image.core.grabclipboard \#2708 \[radarhere\]
-   Doc syntax fix \#2710 \[radarhere\]
-   Faster packing and unpacking for RGB, LA, and related storage modes \#2693 \[homm\]
-   Use RGBX rawmode for RGB JPEG images where possible \#1989 \[homm\]
-   Remove palettes from non-palette modes in \_new \#2704 \[wiredfool\]
-   Delete transparency info when convert\'ing RGB/L to RGBA \#2633 \[olt\]
-   Code tweaks to ease type annotations \#2687 \[neiljp\]
-   Fixed incorrect use of \'s\#\' to byteslike object \#2691 \[wiredfool\]
-   Fix JPEG subsampling labels for subsampling=2 \#2698 \[homm\]
-   Region of interest (box) for resampling \#2254 \[homm\]
-   Basic support for Termux (android) in setup.py \#2684 \[wiredfool\]
-   Bug: Fix Image.fromarray for numpy.bool type. \#2683 \[wiredfool\]
-   CI: Add Fedora 24 and 26 to Docker tests \[wiredfool\]
-   JPEG: Fix ZeroDivisionError when EXIF contains invalid DPI (0/0). \#2667 \[vytisb\]
-   Depends: Updated openjpeg to 2.2.0 \#2669 \[radarhere\]
-   Depends: Updated Tk Tcl to 8.6.7 \#2668 \[radarhere\]
-   Depends: Updated libimagequant to 2.10.2 \#2660 \[radarhere\]
-   Test: Added test for ImImagePlugin tell() \#2675 \[radarhere\]
-   Test: Additional tests for SGIImagePlugin \#2659 \[radarhere\]
-   New Image.getchannel method \#2661 \[homm\]
-   Remove unused im.copy2 and core.copy methods \#2657 \[homm\]
-   Fast Image.merge() \#2677 \[homm\]
-   Fast Image.split() \#2676 \[homm\]
-   Fast image allocation \#2655 \[homm\]
-   Storage cleanup \#2654 \[homm\]
-   FLI: Use frame count from FLI header \#2674 \[radarhere\]
-   Test: Test animated FLI file \#2650 \[hugovk\]
-   Bug: Fixed uninitialized memory in bc5 decoding \#2648 \[ifeherva\]
-   Moved SgiImagePlugin save error to before the start of write operations \#2646 \[radarhere\]
-   Move createfontdatachunk.py so isn\'t installed globally \#2645 \[hugovk\]
-   Bug: Fix unexpected keyword argument \'align\' \#2641 \[hugovk\]
-   Add newlines to error message for clarity \#2640 \[hugovk\]
-   Docs: Updated redirected URL \#2637 \[radarhere\]
-   Bug: Fix JPEG DPI when EXIF is invalid \#2632 \[wiredfool\]
-   Bug: Fix for font getsize on empty string \#2624 \[radarhere\]
-   Docs: Improved ImageDraw documentation \#2626 \[radarhere\]
-   Docs: Corrected alpha\_composite args documentation \#2627 \[radarhere\]
-   Docs: added the description of the filename attribute to images.rst \#2621 \[dasdachs\]
-   Dependencies: Updated libimagequant to 2.10.1 \#2616 \[radarhere\]
-   PDF: Renamed parameter to not shadow built-in dict \#2612 \[kijeong\]

4.2.1 (2017-07-06)
------------------

-   CI: Fix version specification and test on CI for PyPy/Windows \#2608 \[wiredfool\]

4.2.0 (2017-07-01)
------------------

-   Doc: Clarified Image.save:append\_images documentation \#2604 \[radarhere\]
-   CI: Amazon Linux and Centos6 docker images added to Travis CI \#2585 \[wiredfool\]
-   Image.alpha\_composite added \#2595 \[wiredfool\]
-   Complex Text Support \#2576 \[ShamsaHamed, Fahad-Alsaidi, wiredfool\]
-   Added threshold parameter to ImageDraw.floodfill \#2599 \[nediamond\]
-   Added dBATCH parameter to ghostscript command \#2588 \[radarhere\]
-   JPEG: Adjust buffer size when icc\_profile \> MAXBLOCK \#2596 \[Darou\]
-   Specify Pillow Version in one place \#2517 \[wiredfool\]
-   CI: Change the owner of the TRAVIS\_BUILD\_DIR, fixing broken docker runs \#2587 \[wiredfool\]
-   Fix truncated PNG loading for some images, Fix memory leak on truncated PNG images. \#2541, \#2598 \[homm\]
-   Add decompression bomb check to Image.crop \#2410 \[wiredfool\]
-   ImageFile: Ensure that the `err_code` variable is initialized in case of exception. \#2363 \[alexkiro\]
-   Tiff: Support append\_images for saving multipage TIFFs \#2406 \[blochl\]
-   Doc: Clarify that draft is only implemented for JPEG and PCD \#2409 \[wiredfool\]
-   Test: MicImagePlugin \#2447 \[hugovk\]
-   Use round() instead of floor() to eliminate zero coefficients in resample \#2558 \[homm\]
-   Remove deprecated code \#2549 \[hugovk\]
-   Added append\_images to PDF saving \#2526 \[radarhere\]
-   Remove unused function core image function new\_array \#2548 \[hugovk\]
-   Remove unnecessary calls to dict.keys() \#2551 \[jdufresne\]
-   Add more ImageDraw.py tests and remove unused Draw.c code \#2533 \[hugovk\]
-   Test: More tests for ImageMorph \#2554 \[hugovk\]
-   Test: McIDAS area file \#2552 \[radarhere\]
-   Update Feature Detection \#2520 \[wiredfool\]
-   CI: Update pypy on Travis CI \#2573 \[hugovk\]
-   ImageMorph: Fix wrong expected size of MRLs read from disk \#2561 \[dov\]
-   Docs: Update install docs for FreeBSD \#2546 \[wiredfool\]
-   Build: Ignore OpenJpeg 1.5 on FreeBSD \#2544 \[melvyn-sopacua\]
-   Remove \'not yet implemented\' methods from PIL 1.1.4 \#2538 \[hugovk\]
-   Dependencies: Update FreeType to 2.8, LibTIFF to 4.0.8 and libimagequant to 2.9.1 \#2535 \#2537 \#2540 \[radarhere\]
-   Raise TypeError and not also UnboundLocalError in ImageFile.Parser() \#2525 \[joshblum\]
-   Test: Use Codecov for coverage \#2528 \[hugovk\]
-   Use PNG for Image.show() \#2527 \[HinTak, wiredfool\]
-   Remove WITH\_DEBUG compilation flag \#2522 \[wiredfool\]
-   Fix return value on parameter parse error in \_webp.c \#2521 \[adw1n\]
-   Set executable flag on scripts with shebang line \#2295 \[radarhere\]
-   Flake8 \#2460 \[radarhere\]
-   Doc: Release Process Changes \#2516 \[wiredfool\]
-   CI: Added region for s3 deployment on appveyor \#2515 \[wiredfool\]
-   Doc: Updated references to point to existing files \#2507 \[radarhere\]
-   Return copy on Image crop if crop dimensions match the image \#2471 \[radarhere\]
-   Test: Optimize CI speed \#2464, \#2466 \[hugovk\]

4.1.1 (2017-04-28)
------------------

-   Undef PySlice\_GetIndicesEx, see <https://bugs.python.org/issue29943> \#2493 \[cgohlke\]
-   Fix for file with DPI in EXIF but not metadata, and XResolution is an int rather than tuple \#2484 \[hugovk\]
-   Docs: Removed broken download counter badge \#2487 \[hugovk\]
-   Docs: Fixed rst syntax error \#2477 \[thebjorn\]

4.1.0 (2017-04-03)
------------------

-   Close files after loading if possible \#2330 \[homm, wiredfool\]
-   Fix Image Access to be reloadable when embedding the Python interpreter \#2296 \[wiredfool, cgohlke\]
-   Fetch DPI from EXIF if not specified in JPEG header \#2449, \#2472 \[hugovk\]
-   Removed winbuild checksum verification \#2468 \[radarhere\]
-   Git: Set ContainerIO test file as binary \#2469 \[cgohlke\]
-   Remove superfluous import of FixTk \#2455 \[cgohlke)
-   Fix import of tkinter/Tkinter \#2456 \[cgohlke)
-   Pure Python Decoders, including Python decoder to fix for MSP images \#1938 \[wiredfool, hugovk\]
-   Reorganized GifImagePlugin, fixes \#2314. \#2374 \[radarhere, wiredfool\]
-   Doc: Reordered operating systems in Compatibility Matrix \#2436 \[radarhere\]
-   Test: Additional tests for BufrStub, Eps, Container, GribStub, IPTC, Wmf, XVThumb, ImageDraw, ImageMorph, ImageShow \#2425 \[radarhere\]
-   Health fixes \#2437 \[radarhere\]
-   Test: Correctness tests ContainerIO, XVThumbImagePlugin, BufrStubImagePlugin, GribStubImagePlugin, FitsStubImagePlugin, Hdf5StubImagePlugin, PixarImageFile, PsdImageFile \#2443, \#2442, \#2441, \#2440, \#2431, \#2430, \#2428, \#2427 \[hugovk\]
-   Remove unused imports \#1822 \[radarhere\]
-   Replaced KeyError catch with dictionary get method \#2424 \[radarhere\]
-   Test: Removed unrunnable code in test\_image\_toqimage \#2415 \[hugovk\]
-   Removed use of spaces in TIFF kwargs names, deprecated in 2.7 \#1390 \[radarhere\]
-   Removed deprecated ImageDraw setink, setfill, setfont methods \#2220 \[jdufresne\]
-   Send unwanted subprocess output to /dev/null \#2253 \[jdufresne\]
-   Fix division by zero when creating 0x0 image from numpy array \#2419 \[hugovk\]
-   Test: Added matrix convert tests \#2381 \[hugovk\]
-   Replaced broken URL to partners.adobe.com \#2413 \[radarhere\]
-   Removed unused private functions in setup.py and build\_dep.py \#2414 \[radarhere\]
-   Test: Fixed Qt tests for QT5 and saving 1 bit PNG \#2394 \[wiredfool\]
-   Test: docker builds for Arch and Debian Stretch \#2394 \[wiredfool\]
-   Updated libwebp to 0.6.0 on appveyor \#2395 \[radarhere\]
-   More explicit error message when saving to a file with invalid extension \#2399 \[ces42\]
-   Docs: Update some http urls to https \#2403 \[hugovk\]
-   Preserve aux/alpha channels when performing Imagecms transforms \#2355 \[gunjambi\]
-   Test linear and radial gradient effects \#2382 \[hugovk\]
-   Test ImageDraw.Outline and and ImageDraw.Shape \#2389 \[hugovk\]
-   Added PySide to ImageQt documentation \#2392 \[radarhere\]
-   BUG: Empty image mode no longer causes a crash \#2380 \[evalapply\]
-   Exclude .travis and contents from manifest \#2386 \[radarhere\]
-   Remove \'MIT-like\' from license \#2145 \[wiredfool\]
-   Tests: Add tests for several Image operations \#2379 \[radarhere\]
-   PNG: Moved iCCP chunk before PLTE chunk when saving as PNG, restricted chunks known value/ordering \#2347 \[radarhere\]
-   Default to inch-interpretation for missing ResolutionUnit in TiffImagePlugin \#2365 \[lambdafu\]
-   Bug: Fixed segfault when using ImagingTk on pypy Issue \#2376, \#2359. \[wiredfool\]
-   Bug: Fixed Integer overflow using ImagingTk on 32 bit platforms \#2359 \[wiredfool, QuLogic\]
-   Tests: Added docker images for testing alternate platforms. See also <https://github.com/python-pillow/docker-images>. \#2368 \[wiredfool\]
-   Removed PIL 1.0 era TK readme that concerns Windows 95/NT \#2360 \[wiredfool\]
-   Prevent `nose -v` printing docstrings \#2369 \[hugovk\]
-   Replaced absolute PIL imports with relative imports \#2349 \[radarhere\]
-   Added context managers for file handling \#2307 \[radarhere\]
-   Expose registered file extensions in Image \#2343 \[iggomez, radarhere\]
-   Make mode descriptor cache initialization thread-safe. \#2351 \[gunjambi\]
-   Updated Windows test dependencies: Freetype 2.7.1, zlib 1.2.11 \#2331, \#2332, \#2357 \[radarhere\]
-   Followed upstream pngquant packaging reorg to libimagquant \#2354 \[radarhere\]
-   Fix invalid string escapes \#2352 \[hugovk\]
-   Add test for crop operation with no argument \#2333 \[radarhere\]

4.0.0 (2017-01-01)
------------------

-   Refactor out postprocessing hack to load\_end in PcdImageFile \[wiredfool\]
-   Add center and translate option to Image.rotate. \#2328 \[lambdafu\]
-   Test: Relax WMF test condition, fixes \#2323. \#2327 \[wiredfool\]
-   Allow 0 size images, Fixes \#2259, Reverts to pre-3.4 behavior. \#2262 \[wiredfool\]
-   SGI: Save uncompressed SGI/BW/RGB/RGBA files \#2325 \[jbltx\]
-   Depends: Updated pngquant to 2.8.2 \#2319 \[radarhere\]
-   Test: Added correctness tests for opening SGI images \#2324 \[wiredfool\]
-   Allow passing a list or tuple of individual frame durations when saving a GIF \#2298 \[Xdynix\]
-   Unified different GIF optimize conditions \#2196 \[radarhere\]
-   Build: Refactor dependency installation \#2305 \[hugovk\]
-   Test: Add python 3.6 to travis, tox \#2304 \[hugovk\]
-   Test: Fix coveralls coverage for Python+C \#2300 \[hugovk\]
-   Remove executable bit and shebang from OleFileIO.py \#2308 \[jwilk, radarhere\]
-   PyPy: Buffer interface workaround \#2294 \[wiredfool\]
-   Test: Switch to Ubuntu Trusty 14.04 on Travis CI \#2294
-   Remove vendored version of olefile Python package in favor of upstream \#2199 \[jdufresne\]
-   Updated comments to use print as a function \#2234 \[radarhere\]
-   Set executable flag on selftest.py, setup.py and added shebang line \#2282, \#2277 \[radarhere, homm\]
-   Test: Increase epsilon for FreeType 2.7 as rendering is slightly different. \#2286 \[hugovk\]
-   Test: Faster assert\_image\_similar \#2279 \[homm\]
-   Removed deprecated internal \"stretch\" method \#2276 \[homm\]
-   Removed the handles\_eof flag in decode.c \#2223 \[wiredfool\]
-   Tiff: Fix for writing Tiff to BytesIO using libtiff \#2263 \[wiredfool\]
-   Doc: Design docs \#2269 \[wiredfool\]
-   Test: Move tests requiring libtiff to test\_file\_libtiff \#2273 \[wiredfool\]
-   Update Maxblock heuristic \#2275 \[wiredfool\]
-   Fix for 2-bit palette corruption \#2274 \[pdknsk, wiredfool\]
-   Tiff: Update info.icc\_profile when using libtiff reader. \#2193 \[lambdafu\]
-   Test: Fix bug in test\_ifd\_rational\_save when libtiff is not available \#2270 \[ChristopherHogan\]
-   ICO: Only save relevant sizes \#2267 \[hugovk\]
-   ICO: Allow saving .ico files of 256x256 instead of 255x255 \#2265 \[hugovk\]
-   Fix TIFFImagePlugin ICC color profile saving. \#2087 \[cskau\]
-   Doc: Improved description of ImageOps.deform resample parameter \#2256 \[radarhere\]
-   EMF: support negative bounding box coordinates \#2249 \[glexey\]
-   Close file if opened in WalImageFile \#2216 \[radarhere\]
-   Use Image.\_new() instead of \_makeself() \#2248 \[homm\]
-   SunImagePlugin fixes \#2241 \[wiredfool\]
-   Use minimal scale for jpeg drafts \#2240 \[homm\]
-   Updated dependency scripts to use FreeType 2.7, OpenJpeg 2.1.2, WebP 0.5.2 and Tcl/Tk 8.6.6 \#2235, \#2236, \#2237, \#2290, \#2302 \[radarhere\]
-   Fix \"invalid escape sequence\" bytestring warnings in Python 3.6 \#2186 \[timgraham\]
-   Removed support for Python 2.6 and Python 3.2 \#2192 \[jdufresne\]
-   Setup: Raise custom exceptions when required/requested dependencies are not found \#2213 \[wiredfool\]
-   Use a context manager in FontFile.save() to ensure file is always closed \#2226 \[jdufresne\]
-   Fixed bug in saving to fp-objects in Python \>= 3.4 \#2227 \[radarhere\]
-   Use a context manager in ImageFont.\_load\_pilfont() to ensure file is always closed \#2232 \[jdufresne\]
-   Use generator expressions instead of list comprehension \#2225 \[jdufresne\]
-   Close file after reading in ImagePalette.load() \#2215 \[jdufresne\]
-   Changed behaviour of default box argument for paste method to match docs \#2211 \[radarhere\]
-   Add support for another BMP bitfield \#2221 \[jmerdich\]
-   Added missing top-level test \_\_main\_\_ \#2222 \[radarhere\]
-   Replaced range(len()) \#2197 \[radarhere\]
-   Fix for ImageQt Segfault, fixes \#1370 \#2182 \[wiredfool\]
-   Setup: Close file in setup.py after finished reading \#2208 \[jdufresne\]
-   Setup: optionally use pkg-config (when present) to detect dependencies \#2074 \[garbas\]
-   Search for tkinter first in builtins \#2210 \[matthew-brett\]
-   Tests: Replace try/except/fail pattern with TestCase.assertRaises() \#2200 \[jdufresne\]
-   Tests: Remove unused, open files at top level of tests \#2188 \[jdufresne\]
-   Replace type() equality checks with isinstance \#2184 \[jdufresne\]
-   Doc: Move ICO out of the list of read-only file formats \#2180 \[alexwlchan\]
-   Doc: Fix formatting, too-short title underlines and malformed table \#2175 \[hugovk\]
-   Fix BytesWarnings \#2172 \[jdufresne\]
-   Use Integer division to eliminate deprecation warning. \#2168 \[mastermatt\]
-   Doc: Update compatibility matrix \[daavve, wiredfool\]

3.4.2 (2016-10-18)
------------------

-   Fix Resample coefficient calculation \#2162 \[homm\]

3.4.1 (2016-10-04)
------------------

-   Allow lists as arguments for Image.new() \#2149 \[homm\]
-   Fix fix for map.c overflow \#2151 (also in 3.3.3) \[wiredfool\]

3.4.0 (2016-10-03)
------------------

-   Removed Image.core.open\_ppm, added negative image size checks in Image.py. \#2146 \[wiredfool\]
-   Windows build: fetch dependencies from pillow-depends \#2095 \[hugovk\]
-   Add TIFF save\_all writer. \#2140 \[lambdafu, vashek\]
-   Move libtiff fd duplication to \_load\_libtiff \#2141 \[sekrause\]
-   Speed up GIF save optimization step, fixes \#2093. \#2133 \[wiredfool\]
-   Fix for ImageCms Segfault, Issue \#2037. \#2131 \[wiredfool\]
-   Make Image.crop an immediate operation, not lazy. \#2138 \[wiredfool\]
-   Skip empty values in ImageFileDirectory \#2024 \[homm\]
-   Force reloading palette when using mmap in ImageFile. \#2139 \[lambdafu\]
-   Fix \"invalid escape sequence\" warning in Python 3.6 \#2136 \[timgraham\]
-   Update documentation about drafts \#2137 \[radarhere\]
-   Converted documentation parameter format, comments to docstrings \#2021 \[radarhere\]
-   Fixed typos \#2128 \#2142 \[radarhere\]
-   Renamed references to OS X to macOS \#2125 2130 \[radarhere\]
-   Use truth value when checking for progressive and optimize option on save \#2115, \#2129 \[radarhere\]
-   Convert DPI to ints when saving as JPEG \#2102 \[radarhere\]
-   Added append\_images parameter to GIF saving \#2103 \[radarhere\]
-   Speedup paste with masks up to 80% \#2015 \[homm\]
-   Rewrite DDS decoders in C, add DXT3 and BC7 decoders \#2068 \[Mischanix\]
-   Fix PyArg\_ParseTuple format in getink() \#2070 \[arjennienhuis\]
-   Fix saving originally missing TIFF tags. \#2111 \[anntzer\]
-   Allow pathlib.Path in Image.open on Python 2.7 \#2110 \[patricksnape\]
-   Use modern base64 interface over deprecated \#2121 \[hugovk\]
-   ImageColor.getrgb hexadecimal RGBA \#2114 \[homm\]
-   Test fix for bigendian machines \#2092 \[wiredfool\]
-   Resampling lookups, trailing empty coefficients, precision \#2008 \[homm\]
-   Add (un)packing between RGBA and BGRa \#2057 \[arjennienhuis\]
-   Added return for J2k (and fpx) Load to return a pixel access object \#2061 \[wiredfool\]
-   Skip failing numpy tests on Pypy \<= 5.3.1 \#2090 \[arjennienhuis\]
-   Show warning when trying to save RGBA image as JPEG \#2010 \[homm\]
-   Respect pixel centers during transform \#2022 \[homm\]
-   TOC for supported file formats \#2056 \[polarize\]
-   Fix conversion of bit images to numpy arrays Fixes \#350, \#2058 \[matthew-brett\]
-   Add ImageOps.scale to expand or contract a PIL image by a factor \#2011 \[vlmath\]
-   Flake8 fixes \#2050 \[hugovk\]
-   Updated freetype to 2.6.5 on Appveyor builds \#2035 \[radarhere\]
-   PCX encoder fixes \#2023, pr \#2041 \[homm\]
-   Docs: Windows console prompts are \> \#2031 \[techtonik\]
-   Expose Pillow package version as PIL.\_\_version\_\_ \#2027 \[techtonik\]
-   Add Box and Hamming filters for resampling \#1959 \[homm\]
-   Retain a reference to core image object in PyAccess \#2009 \[homm\]

3.3.3 (2016-10-04)
------------------

-   Fix fix for map.c overflow \#2151 \[wiredfool\]

3.3.2 (2016-10-03)
------------------

-   Fix negative image sizes in Storage.c \#2146 \[wiredfool\]
-   Fix integer overflow in map.c \#2146 \[wiredfool\]

3.3.1 (2016-08-18)
------------------

-   Fix C90 compilation error for Tcl / Tk rewrite \#2033 \[matthew-brett\]
-   Fix image loading when rotating by 0 deg \#2052 \[homm\]

3.3.0 (2016-07-01)
------------------

-   Fixed enums for Resolution Unit and Predictor in TiffTags.py \#1998 \[wiredfool\]
-   Fix issue converting P mode to LA \#1986 \[didrix\]
-   Moved test\_j2k\_overflow to check\_j2k\_overflow, prevent DOS of our 32bit testing machines \#1995 \[wiredfool\]
-   Skip CRC checks in PNG files when LOAD\_TRUNCATED\_IMAGES is enabled \#1991 \[kkopachev\]
-   Added CMYK mode for opening EPS files \#1826 \[radarhere\]
-   Docs: OSX build instruction clarification \#1994 \[wiredfool\]
-   Docs: Filter comparison table \#1993 \[homm\]
-   Removal of pthread based Incremental.c, new interface for file decoders/encoders to access the python file. Fixes assorted J2k Hangs. \#1934 \[wiredfool\]
-   Skip unnecessary passes when resizing \#1954 \[homm\]
-   Removed duplicate code in ImagePalette \#1832 \[radarhere\]
-   test\_imagecms: Reduce precision of extended info due to 32 bit machine precision \#1990 \[AbdealiJK\]
-   Binary Tiff Metadata/ICC profile. \#1988 \[wiredfool\]
-   Ignore large text blocks in PNG if LOAD\_TRUNCATED\_IMAGES is enabled \#1970 \[homm\]
-   Replace index = index+1 in docs with +=1 \[cclauss\]
-   Skip extra 0xff00 in jpeg \#1977 \[kkopachev\]
-   Use bytearray for palette mutable storage \#1985 \[radarhere, wiredfool\]
-   Added additional uint modes for Image.fromarray, more extensive tests of fromarray \#1984 \[mairsbw, wiredfool\]
-   Fix for program importing PyQt4 when PyQt5 also installed \#1942 \[hugovk\]
-   Changed depends/[install]()\*.sh urls to point to github pillow-depends repo \#1983 \[wiredfool\]
-   Allow ICC profile from `encoderinfo` while saving PNGs \#1909 \[homm\]
-   Fix integer overflow on ILP32 systems (32-bit Linux). \#1975 \[lambdafu\]
-   Change function declaration to match Tcl\_CmdProc type \#1966 \[homm\]
-   Integer overflow checks on all calls to \*alloc \#1781 \[wiredfool\]
-   Change equals method on Image so it short circuits \#1967 \[mattBoros\]
-   Runtime loading of TCL/TK libraries, eliminating build time dependency. \#1932 \[matthew-brett\]
-   Cleanup of transform methods \#1941 \[homm\]
-   Fix \"Fatal Python error: UNREF invalid object\" in debug builds \#1936 \[wiredfool\]
-   Setup fixes for Alpine linux \#1937 \[wiredfool\]
-   Split resample into horizontal + vertical passes \#1933 \[homm\]
-   Box blur with premultiplied alpha \#1914 \[homm\]
-   Add libimagequant support in quantize() \#1889 \[rr-\]
-   Added internal Premultiplied luminosity (La) mode \#1912 \[homm\]
-   Fixed point integer resample \#1881 \[homm\]
-   Removed docs/BUILDME script \#1924 \[radarhere\]
-   Moved comments to docstrings \#1926 \[hugovk\]
-   Include Python.h before wchar.h so \_GNU\_SOURCE is set consistently \#1906 \[hugovk\]
-   Updated example decoder in documentation \#1899 \[radarhere\]
-   Added support for GIF comment extension \#1896 \[radarhere\]
-   Removed support for pre- 1.5.2 list form of Image info in Image.new \#1897 \[radarhere\]
-   Fix typos in TIFF tags \#1918 \[radarhere\]
-   Skip tests that require libtiff if it is not installed \#1893 (fixes \#1866) \[wiredfool\]
-   Skip test when icc profile is not available, fixes \#1887. \#1892 \[doko42\]
-   Make deprecated functions raise NotImplementedError instead of Exception. \#1862, \#1890 \[daniel-leicht, radarhere\]
-   Replaced os.system with subprocess.call in setup.py \#1879 \[radarhere\]
-   Corrected Image show documentation \#1886 \[radarhere\]
-   Added check for executable permissions to ImageShow \#1880 \[radarhere\]
-   Fixed tutorial code and added explanation \#1877 \[radarhere\]
-   Added OS X support for ImageGrab grabclipboard \#1837 \[radarhere\]
-   Combined duplicate code in ImageTk \#1856 \[radarhere\]
-   Added \--disable-platform-guessing option to setup.py build extension \#1861 \[angeloc\]
-   Fixed loading Transparent PNGs with a transparent black color \#1840 \[olt\]
-   Add support for LA mode in Image.fromarray \#1865 \[pierriko\]
-   Make ImageFile load images in read-only mode \#1864 \[hdante\]
-   Added \_accept hook for XVThumbImagePlugin \#1853 \[radarhere\]
-   Test TIFF with LZW compression \#1855, TGA RLE file \#1854 \[hugovk\]
-   Improved SpiderImagePlugin help text \#1863 \[radarhere\]
-   Updated Sphinx project description \#1870 \[radarhere\]
-   Remove support for Python 3.0 from \_imaging.c \#1851 \[radarhere\]
-   Jpeg qtables are unsigned chars \#1814, \#1921 \[thebostik\]
-   Added additional EXIF tags \#1841, TIFF Tags \#1821 \[radarhere\]
-   Changed documentation to refer to ImageSequence Iterator \#1833 \[radarhere\]
-   Fix Fedora prerequisites in installation docs, depends script \#1842 \[living180\]
-   Added \_accept hook for PixarImagePlugin \#1843 \[radarhere\]
-   Removed outdated scanner classifier \#1823 \[radarhere\]
-   Combined identical error messages in \_imaging \#1825 \[radarhere\]
-   Added debug option for setup.py to trace header and library finding \#1790 \[wiredfool\]
-   Fix doc building on travis \#1820, \#1844 \[wiredfool\]
-   Fix for DIB/BMP images \#1813, \#1847 \[wiredfool\]
-   Add PixarImagePlugin file extension \#1809 \[radarhere\]
-   Catch struct.errors when verifying png files \#1805 \[wiredfool\]
-   SpiderImagePlugin: raise an error when seeking in a non-stack file \#1794 \[radarhere, jmichalon\]
-   Added support for 2/4 bpp Tiff grayscale images \#1789 \[zwhfly\]
-   Removed unused variable from selftest \#1788 \[radarhere\]
-   Added warning for as\_dict method (deprecated in 3.0.0) \#1799 \[radarhere\]
-   Removed powf support for older Python versions \#1784 \[radarhere\]
-   Health fixes \#1625 \#1903 \[radarhere\]

3.2.0 (2016-04-01)
------------------

-   Added install docs for Fedora 23 and FreeBSD \#1729, \#1739, \#1792 \[koobs, zandermartin, wiredfool\]
-   Fixed TIFF multiframe load when the frames have different compression types \#1782 \[radarhere, geka000\]
-   Added \_\_copy\_\_ method to Image \#1772 \[radarhere\]
-   Updated dates in PIL license in OleFileIO README \#1787 \[radarhere\]
-   Corrected Tiff tag names \#1786 \[radarhere\]
-   Fixed documented name of JPEG property \#1783 \[radarhere\]
-   Fixed UnboundLocalError when loading a corrupt jpeg2k file \#1780 \[wiredfool\]
-   Fixed integer overflow in path.c \#1773 \[wiredfool, nedwill\]
-   Added debug to command line help text for pilprint \#1766 \[radarhere\]
-   Expose many more fields in ICC Profiles \#1756 \[lambdafu\]
-   Documentation changes, URL update, transpose, release checklist \[radarhere\]
-   Fixed saving to nonexistent files specified by pathlib.Path objects \#1748 (fixes \#1747) \[radarhere\]
-   Round Image.crop arguments to the nearest integer \#1745 (fixes \#1744) \[hugovk\]
-   Fix uninitialized variable warning in \_imaging.c:getink \#1663 (fixes \#486) \[wiredfool\]
-   Disable multiprocessing install on cygwin \#1700 (fixes \#1690) \[wiredfool\]
-   Fix the error reported when libz is not found \#1764 \[wiredfool\]
-   More general error check to avoid Symbol not found: \_PyUnicodeUCS2\_AsLatin1String on OS X \#1761 \[wiredfool\]
-   Added py35 to tox envlist \#1724 \[radarhere\]
-   Fix EXIF tag name typos \#1736 \[zarlant, radarhere\]
-   Updated freetype to 2.6.3, Tk/Tcl to 8.6.5 and 8.5.19 \#1725, \#1752 \[radarhere\]
-   Add a loader for the FTEX format from Independence War 2: Edge of Chaos \#1688 \[jleclanche\]
-   Improved alpha\_composite documentation \#1698 \[radarhere\]
-   Extend ImageDraw.text method to pass on multiline\_text method specific arguments \#1647 \[radarhere\]
-   Allow ImageSequence to seek to zero \#1686 \[radarhere\]
-   ImageSequence Iterator is now an iterator \#1649 \[radarhere\]
-   Updated windows test builds to jpeg9b \#1673 \[radarhere\]
-   Fixed support for .gbr version 1 images, added support for version 2 in GbrImagePlugin \#1653 \[wiredfool\]
-   Clarified which YCbCr format is used \#1677 \[radarhere\]
-   Added TiffTags documentation, Moved windows build documentation to winbuild/ \#1667 \[wiredfool\]
-   Add tests for OLE file based formats \#1678 \[radarhere\]
-   Add TIFF IFD test \#1671 \[radarhere\]
-   Add a basic DDS image plugin with more tests \#1654 \[jleclanche, hugovk, wiredfool\]
-   Fix incorrect conditional in encode.c \#1638 \[manisandro\]

3.1.2 (2016-04-01)
------------------

-   Fixed an integer overflow in Jpeg2KEncode.c causing a buffer overflow. CVE-2016-3076 \[wiredfool\]

3.1.1 (2016-02-04)
------------------

-   Fixed an integer overflow in Resample.c causing writes in the Python heap. \[nedwill\]
-   Fixed a buffer overflow in PcdDecode.c causing a segfault when opening PhotoCD files. CVE-2016-2533 \[wiredfool\]
-   Fixed a buffer overflow in FliDecode.c causing a segfault when opening FLI files. CVE-2016-0775 \[wiredfool\]
-   Fixed a buffer overflow in TiffDecode.c causing an arbitrary amount of memory to be overwritten when opening a specially crafted invalid TIFF file. CVE-2016-0740 \[wiredfool\]

3.1.0 (2016-01-04)
------------------

-   Fixing test failures on Python 2.6/Windows \#1633 \[wiredfool\]
-   Limit metadata tags when writing using libtiff \#1620 \[wiredfool\]
-   Rolling back exif support to pre-3.0 format \#1627 \[wiredfool\]
-   Fix Divide by zero in Exif, add IFDRational class \#1531 \[wiredfool\]
-   Catch the IFD error near the source \#1622 \[wiredfool\]
-   Added release notes for 3.1.0 \#1623 \[radarhere\]
-   Updated spacing to be consistent between multiline methods \#1624 \[radarhere\]
-   Let EditorConfig take care of some basic formatting \#1489 \[hugovk\]
-   Restore gpsexif data to the v1 form \#1619 \[wiredfool\]
-   Add /usr/local include and library directories for freebsd \#1613 \[leforestier\]
-   Updated installation docs for new versions of dependencies \#1611 \[radarhere\]
-   Removed unrunnable test file \#1610 \[radarhere\]
-   Changed register calls to use format property \#1608 \[radarhere\]
-   Added field type constants to TiffTags \#1596 \[radarhere\]
-   Allow saving RowsPerStrip with libtiff \#1594 \[wiredfool\]
-   Enabled conversion to numpy array for HSV images \#1578 \[cartisan\]
-   Changed some urls in the docs to use https \#1580 \[hugovk\]
-   Removed logger.exception from ImageFile.py \#1590 \[radarhere\]
-   Removed warnings module check \#1587 \[radarhere\]
-   Changed arcs, chords and pie slices to use floats \#1577 \[radarhere\]
-   Update unit test asserts \#1584, \#1598 \[radarhere\]
-   Fix command to invoke ghostscript for eps files \#1478 \[baumatron, radarhere\]
-   Consistent multiline text spacing \#1574 \[wiredfool, hugovk\]
-   Removed unused lines in BDFFontFile \#1530 \[radarhere\]
-   Changed ImageQt import of Image \#1560 \[radarhere, ericfrederich\]
-   Throw TypeError if no cursors were found in .cur file \#1556 \[radarhere\]
-   Fix crash in ImageTk.PhotoImage on win-amd64 \#1553 \[cgohlke\]
-   ExtraSamples tag should be a SHORT, not a BYTE \#1555 \[Nexuapex\]
-   Docs and code health fixes \#1565 \#1566 \#1581 \#1586 \#1591 \#1621 \[radarhere\]
-   Updated freetype to 2.6.2 \#1564 \[radarhere\]
-   Updated WebP to 0.5.0 for Travis \#1515 \#1609 \[radarhere\]
-   Fix missing \'version\' key value in \_\_array\_interface\_\_ \#1519 \[mattip\]
-   Replaced os.popen with subprocess.Popen to pilprint script \#1523 \[radarhere\]
-   Catch OverflowError in SpiderImagePlugin \#1545 \[radarhere, MrShark\]
-   Fix the definition of icc\_profile in TiffTags \#1539 \[wiredfool\]
-   Remove old \_imagingtiff.c and pilplus stuff \#1499 \[hugovk\]
-   Fix Exception when requiring jpeg \#1501 \[hansmosh\]
-   Dependency scripts for Debian and Ubuntu \#1486 \[wiredfool\]
-   Added Usage message to painter script \#1482 \[radarhere\]
-   Add tag info for iccprofile, fixes \#1462. \#1465 \[wiredfool\]
-   Added some requirements for make release-test \#1451 \[wiredfool\]
-   Flatten tiff metadata value SAMPLEFORMAT to initial value \#1467 (fixes \#1466) \[wiredfool\]
-   Fix handling of pathlib in Image.save \#1464 (fixes \#1460) \[wiredfool\]
-   Make tests more robust \#1469 \[hugovk\]
-   Use correctly sized pointers for windows handle types \#1458 \[nu744\]

3.0.0 (2015-10-01)
------------------

-   Check flush method existence for file-like object \#1398 \[mrTable, radarhere\]
-   Added PDF multipage saving \#1445 \[radarhere\]
-   Removed deprecated code, Image.tostring, Image.fromstring, Image.offset, ImageDraw.setink, ImageDraw.setfill, ImageFileIO, ImageFont.FreeTypeFont and ImageFont.truetype `file` kwarg, ImagePalette private \_make functions, ImageWin.fromstring and ImageWin.tostring \#1343 \[radarhere\]
-   Load more broken images \#1428 \[homm\]
-   Require zlib and libjpeg \#1439 \[wiredfool\]
-   Preserve alpha when converting from a QImage to a Pillow Image by using png instead of ppm \#1429 \[ericfrederich\]
-   Qt needs 32 bit aligned image data \#1430 \[ericfrederich\]
-   Tiff ImageFileDirectory rewrite \#1419 \[anntzer, wiredfool, homm\]
-   Removed spammy debug logging \#1423 \[wiredfool\]
-   Save as GiF89a with support for animation parameters \#1384 \[radarhere\]
-   Correct convert matrix docs \#1426 \[wiredfool\]
-   Catch TypeError in \_getexif \#1414 \[radarhere, wiredfool\]
-   Fix for UnicodeDecodeError in TiffImagePlugin \#1416 \[bogdan199, wiredfool\]
-   Dedup code in image.open \#1415 \[wiredfool\]
-   Skip any number extraneous chars at the end of JPEG chunks \#1337 \[homm\]
-   Single threaded build for pypy3, refactor \#1413 \[wiredfool\]
-   Fix loading of truncated images with LOAD\_TRUNCATED\_IMAGES enabled \#1366 \[homm\]
-   Documentation update for concepts: bands \#1406 \[merriam\]
-   Add Solaris/SmartOS include and library directories \#1356 \[njones11\]
-   Improved handling of getink color \#1387 \[radarhere\]
-   Disable compiler optimizations for topalette and tobilevel functions for all msvc versions \#1402 (fixes \#1357) \[cgohlke\]
-   Skip ImageFont\_bitmap test if \_imagingft C module is not installed \#1409 \[homm\]
-   Add param documentation to ImagePalette \#1381 \[bwrsandman\]
-   Corrected scripts path \#1407 \[radarhere\]
-   Updated libtiff to 4.0.6 \#1405, \#1421 \[radarhere\]
-   Updated Platform Support for Yosemite \#1403 \[radarhere\]
-   Fixed infinite loop on truncated file \#1401 \[radarhere\]
-   Check that images are L mode in ImageMorph methods \#1400 \[radarhere\]
-   In tutorial of pasting images, add to mask text \#1389 \[merriam\]
-   Style/health fixes \#1391, \#1397, \#1417, \#1418 \[radarhere\]
-   Test on Python 3.5 dev and 3.6 nightly \#1361 \[hugovk\]
-   Fix fast rotate operations \#1373 \[radarhere\]
-   Added support for pathlib Path objects to open and save \#1372 \[radarhere\]
-   Changed register calls to use format property \#1333 \[radarhere\]
-   Added support for ImageGrab.grab to OS X \#1367, \#1443 \[radarhere, hugovk\]
-   Fixed PSDraw stdout Python 3 compatibility \#1365 \[radarhere\]
-   Added Python 3.3 to AppVeyor \#1363 \[radarhere\]
-   Treat MPO with unknown header as base JPEG file \#1350 \[hugovk, radarhere\]
-   Added various tests \#1330, \#1344 \[radarhere\]
-   More ImageFont tests \#1327 \[hugovk\]
-   Use logging instead of print \#1207 \[anntzer\]

2.9.0 (2015-07-01)
------------------

-   Added test for GimpPaletteFile \#1324 \[radarhere\]
-   Merged gifmaker script to allow saving of multi-frame GIF images \#1320 \[radarhere\]
-   Added is\_animated property to multi-frame formats \#1319 \[radarhere\]
-   Fixed ValueError in Python 2.6 \#1315 \#1316 \[cgohlke, radarhere\]
-   Fixed tox test script path \#1308 \[radarhere\]
-   Added width and height properties \#1304 \[radarhere\]
-   Update tiff and tk tcl 8.5 versions \#1303 \[radarhere, wiredfool\]
-   Add functions to convert: Image \<-\> QImage; Image \<-\> QPixmap \#1217 \[radarhere, rominf\]
-   Remove duplicate code in gifmaker script \#1294 \[radarhere\]
-   Multiline text in ImageDraw \#1177 \[allo-, radarhere\]
-   Automated Windows CI/build support \#1278 \[wiredfool\]
-   Removed support for Tk versions earlier than 8.4 \#1288 \[radarhere\]
-   Fixed polygon edge drawing \#1255 (fixes \#1252) \[radarhere\]
-   Check prefix length in \_accept methods \#1267 \[radarhere\]
-   Register MIME type for BMP \#1277 \[coldmind\]
-   Adjusted ImageQt use of unicode() for 2/3 compatibility \#1218 \[radarhere\]
-   Identify XBM file created with filename including underscore \#1230 (fixes \#1229) \[hugovk\]
-   Copy image when saving in GifImagePlugin \#1231 (fixes \#718) \[radarhere\]
-   Removed support for FreeType 2.0 \#1247 \[radarhere\]
-   Added background saving to GifImagePlugin \#1273 \[radarhere\]
-   Provide n\_frames attribute to multi-frame formats \#1261 \[anntzer, radarhere\]
-   Add duration and loop set to GifImagePlugin \#1172, \#1269 \[radarhere\]
-   Ico files are little endian \#1232 \[wiredfool\]
-   Upgrade olefile from 0.30 to 0.42b \#1226 \[radarhere, decalage2\]
-   Setting transparency value to 0 when the tRNS contains only null byte(s) \#1239 \[juztin\]
-   Separated out feature checking from selftest \#1233 \[radarhere\]
-   Style/health fixes \[radarhere\]
-   Update WebP from 0.4.1 to 0.4.3 \#1235 \[radarhere\]
-   Release GIL during image load (decode) \#1224 \[lkesteloot\]
-   Added icns save \#1185 \[radarhere\]
-   Fix putdata memory leak \#1196 \[benoit-pierre\]
-   Keep user-specified ordering of icon sizes \#1193 \[karimbahgat\]
-   Tiff: allow writing floating point tag values \#1113 \[bpedersen2\]

2.8.2 (2015-06-06)
------------------

-   Bug fix: Fixed Tiff handling of bad EXIF data \[radarhere\]

2.8.1 (2015-04-02)
------------------

-   Bug fix: Catch struct.error on invalid JPEG, fixes \#1163. \#1165 \[wiredfool, hugovk\]

2.8.0 (2015-04-01)
------------------

-   Fix 32-bit BMP loading (RGBA or RGBX) \#1125 \[artscoop\]
-   Fix UnboundLocalError in ImageFile \#1131 \[davarisg\]
-   Re-enable test image caching \#982 \[hugovk, homm\]
-   Fix: Cannot identify EPS images \#1152 (fixes \#1104) \[hugovk\]
-   Configure setuptools to run nosetests, fixes \#729 \[aclark4life\]
-   Style/health fixes \[radarhere, hugovk\]
-   Add support for HTTP response objects to Image.open() \#1151 \[mfitzp\]
-   Improve reference docs for PIL.ImageDraw.Draw.pieslice() \#1145 \[audreyr\]
-   Added copy method font\_variant() and accessible properties to truetype() \#1123 \[radarhere\]
-   Fix ImagingEffectNoise \#1128 \[hugovk\]
-   Remove unreachable code \#1126 \[hugovk\]
-   Let Python do the endian stuff + tests \#1121 \[amoibos, radarhere\]
-   Fix webp decode memory leak \#1114 \[benoit-pierre\]
-   Fast path for opaque pixels in RGBa unpacker \#1088 \[bgilbert\]
-   Enable basic support for \'RGBa\' raw encoding/decoding \#1096 \[immerrr\]
-   Fix pickling L mode images with no palette, \#1095 \[hugovk\]
-   iPython display hook \#1091 \[wiredfool\]
-   Adjust buffer size when quality=keep \#1079 (fixes \#148 again) \[wiredfool\]
-   Fix for corrupted bitmaps embedded in truetype fonts \#1072 \[jackyyf, wiredfool\]

2.7.0 (2015-01-01)
------------------

-   Split Sane into a separate repo: <https://github.com/python-pillow/Sane> \[hugovk\]
-   Look for OS X and Linux fonts in common places \#1054 \[charleslaw\]
-   Fix CVE-2014-9601, potential PNG decompression DOS \#1060 \[wiredfool\]
-   Use underscores, not spaces, in TIFF tag kwargs \#1044, \#1058 \[anntzer, hugovk\]
-   Update PSDraw for Python3, add tests \#1055 \[hugovk\]
-   Use Bicubic filtering by default for thumbnails. Don\'t use Jpeg Draft mode for thumbnails \#1029 \[homm\]
-   Fix MSVC compiler error: Use Py\_ssize\_t instead of ssize\_t \#1051 \[cgohlke\]
-   Fix compiler error: MSVC needs variables defined at the start of the block \#1048 \[cgohlke\]
-   The GIF Palette optimization algorithm is only applicable to mode=\'P\' or \'L\' \#993 \[moriyoshi\]
-   Use PySide as an alternative to PyQt4/5 \#1024 \[holg\]
-   Replace affine-based im.resize implementation with convolution-based im.stretch \#997 \[homm\]
-   Replace Gaussian Blur implementation with iterated fast box blur. \#961 Note: Radius parameter is interpreted differently than before. \[homm\]
-   Better docs explaining import \_imaging failure \#1016, build \#1017, mode \#1018, PyAccess, PixelAccess objects \#1019 Image.quantize \#1020 and Image.save \#1021 \[wiredfool\]
-   Fix for saving TIFF image into an io.BytesIO buffer \#1011 \[mfergie\]
-   Fix antialias compilation on debug versions of Python \#1010 \[wiredfool\]
-   Fix for Image.putdata segfault \#1009 \[wiredfool\]
-   Ico save, additional tests \#1007 \[exherb\]
-   Use PyQt4 if it has already been imported, otherwise prefer PyQt5 \#1003 \[AurelienBallier\]
-   Speedup resample implementation up to 2.5 times \#977 \[homm\]
-   Speed up rotation by using cache aware loops, added transpose to rotations \#994 \[homm\]
-   Fix Bicubic interpolation \#970 \[homm\]
-   Support for 4-bit grayscale TIFF images \#980 \[hugovk\]
-   Updated manifest \#957 \[wiredfool\]
-   Fix PyPy 2.4 regression \#958 \[wiredfool\]
-   Webp Metadata Skip Test comments \#954 \[wiredfool\]
-   Fixes for things rpmlint complains about \#942 \[manisandro\]

2.6.2 (2015-01-01)
------------------

-   Fix CVE-2014-9601, potential PNG decompression DOS \#1060 \[wiredfool\]
-   Fix Regression in PyPy 2.4 in streamio \#958 \[wiredfool\]

2.6.1 (2014-10-11)
------------------

-   Fix SciPy regression in Image.resize \#945 \[wiredfool\]
-   Fix manifest to include all test files. \[aclark4life\]

2.6.0 (2014-10-01)
------------------

-   Relax precision of ImageDraw tests for x86, GimpGradient for PPC \#930 \[wiredfool\]

2.6.0-rc1 (2014-09-29)
----------------------

-   Use redistributable image for testing \#884 \[hugovk\]
-   Use redistributable ICC profiles for testing, skip if not available \#923 \[wiredfool\]
-   Additional documentation for JPEG info and save options \#922 \[wiredfool\]
-   Fix JPEG Encoding memory leak when exif or qtables were specified \#921 \[wiredfool\]
-   Image.tobytes() and Image.tostring() documentation update \#916 \#917 \[mgedmin\]
-   On Windows, do not execute convert.exe without specifying path \#912 \[cgohlke\]
-   Fix msvc build error \#911 \[cgohlke\]
-   Fix for handling P + transparency -\> RGBA conversions \#904 \[wiredfool\]
-   Retain alpha in ImageEnhance operations \#909 \[wiredfool\]
-   Jpeg2k Decode/encode memory leak fix \#898 \[joshware, wiredfool\]
-   EpsFilePlugin Speed improvements \#886 \[wiredfool, karstenw\]
-   Don\'t resize if already the right size \#892 \[radarhere\]
-   Fix for reading multipage TIFFs \#885 \[kostrom, wiredfool\]
-   Correctly handle saving gray and CMYK JPEGs with quality=keep \#857 \[etienned\]
-   Correct duplicate Tiff Metadata and Exif tag values \[hugovk\]
-   Windows fixes \#871 \[wiredfool\]
-   Fix TGA files with image ID field \#856 \[megabuz\]
-   Fixed wrong P-mode of small, unoptimized L-mode GIF \#843 \[uvNikita\]
-   Fixed CVE-2014-3598, a DOS in the Jpeg2KImagePlugin \[Andrew Drake\]
-   Fixed CVE-2014-3589, a DOS in the IcnsImagePlugin \[Andrew Drake\]
-   setup.py: Close open file handle before deleting \#844 \[divergentdave\]
-   Return Profile with Transformed Images \#837 \[wiredfool\]
-   Changed docstring to refer to the correct function \#836 \[MatMoore\]
-   Adding coverage support for C code tests \#833 \[wiredfool\]
-   PyPy performance improvements \#821 \[wiredfool\]
-   Added support for reading MPO files \#822 \[Feneric\]
-   Added support for encoding and decoding iTXt chunks \#818 \[dolda2000\]
-   HSV Support \#816 \[wiredfool\]
-   Removed unusable ImagePalette.new() \[hugovk\]
-   Fix Scrambled XPM \#808 \[wiredfool\]
-   Doc cleanup \[wiredfool\]
-   Fix `ImageStat` docs \#796 \[akx\]
-   Added docs for ExifTags \#794 \[Wintermute3\]
-   More tests for CurImagePlugin, DcxImagePlugin, Effects.c, GimpGradientFile, ImageFont, ImageMath, ImagePalette, IptcImagePlugin, SpiderImagePlugin, SgiImagePlugin, XpmImagePlugin and \_util \[hugovk\]
-   Fix return value of FreeTypeFont.textsize() does not include font offsets \#784 \[tk0miya\]
-   Fix dispose calculations for animated GIFs \#765 \[larsjsol\]
-   Added class checking to Image \_\_eq\_\_ function \#775 \[radarhere, hugovk\]
-   Test PalmImagePlugin and method to skip known bad tests \#776 \[hugovk, wiredfool\]

2.5.3 (2014-08-18)
------------------

-   Fixed CVE-2014-3598, a DOS in the Jpeg2KImagePlugin (backport) \[Andrew Drake\]

2.5.2 (2014-08-13)
------------------

-   Fixed CVE-2014-3589, a DOS in the IcnsImagePlugin (backport) \[Andrew Drake\]

2.5.1 (2014-07-10)
------------------

-   Fixed install issue if Multiprocessing.Pool is not available \[wiredfool\]
-   32bit mult overflow fix \#782 \[wiredfool\]

2.5.0 (2014-07-01)
------------------

-   Imagedraw rewrite \#737 \[terseus, wiredfool\]
-   Add support for multithreaded test execution \#755 \[wiredfool\]
-   Prevent shell injection \#748 \[mbrown1413, wiredfool\]
-   Support for Resolution in BMP files \#734 \[gcq\]
-   Fix error in setup.py for Python 3 \#744 \[matthew-brett\]
-   Pyroma fix and add Python 3.4 to setup metadata \#742 \[wirefool\]
-   Top level flake8 fixes \#741 \[aclark4life\]
-   Remove obsolete Animated Raster Graphics (ARG) support \#736 \[hugovk\]
-   Fix test\_imagedraw failures \#727 \[cgohlke\]
-   Fix AttributeError: class Image has no attribute \'DEBUG\' \#726 \[cgohlke\]
-   Fix msvc warning: \'inline\' : macro redefinition \#725 \[cgohlke\]
-   Cleanup \#654 \[dvska, hugovk, wiredfool\]
-   16-bit monochrome support for JPEG2000 \#730 \[videan42\]
-   Fixed ImagePalette.save \[brightpisces\]
-   Support JPEG qtables \#677 \[csinchok\]
-   Add binary morphology addon \[dov, wiredfool\]
-   Decompression bomb protection \#674 \[hugovk\]
-   Put images in a single directory \#708 \[hugovk\]
-   Support OpenJpeg 2.1 \#681 \[al45tair, wiredfool\]
-   Remove unistd.h \#include for all platforms \#704 \[wiredfool\]
-   Use unittest for tests \[hugovk\]
-   ImageCms fixes \[hugovk\]
-   Added more ImageDraw tests \[hugovk\]
-   Added tests for Spider files \[hugovk\]
-   Use libtiff to write any compressed tiff files \#669 \[wiredfool\]
-   Support for pickling Image objects \[hugovk\]
-   Fixed resolution handling for EPS thumbnails \#619 \[eliempje\]
-   Fixed rendering of some binary EPS files (Issue \#302) \[eliempje\]
-   Rename variables not to use built-in function names \#670 \[hugovk\]
-   Ignore junk JPEG markers \[hugovk\]
-   Change default interpolation for Image.thumbnail to Image.ANTIALIAS \[hugovk\]
-   Add tests and fixes for saving PDFs \[hugovk\]
-   Remove transparency resource after P-\>RGBA conversion \[hugovk\]
-   Clean up preprocessor cruft for Windows \#652 \[CounterPillow\]
-   Adjust Homebrew freetype detection logic \#656 \[jacknagel\]
-   Added Image.close, context manager support \[wiredfool\]
-   Added support for 16 bit PGM files \[wiredfool\]
-   Updated OleFileIO to version 0.30 from upstream \#618 \[hugovk\]
-   Added support for additional TIFF floating point format \[Hijackal\]
-   Have the tempfile use a suffix with a dot \[wiredfool\]
-   Fix variable name used for transparency manipulations \#604 \[nijel\]

2.4.0 (2014-04-01)
------------------

-   Indexed Transparency handled for conversions between L, RGB, and P modes \#574 (fixes \#510) \[wiredfool\]
-   Conversions enabled from RGBA-\>P \#574 (fixes \#544) \[wiredfool\]
-   Improved icns support \#565 \[al45tair\]
-   Fix libtiff leaking open files \#580 (fixes \#526) \[wiredfool\]
-   Fixes for Jpeg encoding in Python 3 \#578 (fixes \#577) \[wiredfool\]
-   Added support for JPEG 2000 \#547 \[al45tair\]
-   Add more detailed error messages to Image.py \#566 \[larsmans\]
-   Avoid conflicting \_expand functions in PIL & MINGW, fixes \#538 \[aclark4life\]
-   Merge from Philippe Lagadec's OleFileIO\_PL fork \#512 \[vadmium\]
-   Fix ImageColor.getcolor \#534 \[homm\]
-   Make ICO files work with the ImageFile.Parser interface \#525 (fixes \#522) \[wiredfool\]
-   Handle 32bit compiled python on 64bit architecture \#521 \[choppsv1\]
-   Fix support for characters \>128 using .pcf or .pil fonts in Py3k \#517 (fixes \#505) \[wiredfool\]
-   Skip CFFI test earlier if it\'s not installed \#516 \[wiredfool\]
-   Fixed opening and saving odd sized .pcx files \#535 (fixes \#523) \[wiredfool\]
-   Fixed palette handling when converting from mode P-\>RGB-\>P \[d-schmidt\]
-   Fixed saving mode P image as a PNG with transparency = palette color 0 \[d-schmidt\]
-   Improve heuristic used when saving progressive and optimized JPEGs with high quality values \#504 \[e98cuenc\]
-   Fixed DOS with invalid palette size or invalid image size in BMP file \[wiredfool\]
-   Added support for BMP version 4 and 5 \[eddwardo, wiredfool\]
-   Fix segfault in getfont when passed a memory resident font \[wiredfool\]
-   Fix crash on Saving a PNG when icc-profile is None \#496 \[brutasse\]
-   Cffi+Python implementation of the PixelAccess object \[wiredfool\]
-   PixelAccess returns unsigned ints for I16 mode \[wiredfool\]
-   Minor patch on booleans + Travis \#474 \[sciunto\]
-   Look in multiarch paths in GNU platforms \#511 \[pinotree\]
-   Add arch support for pcc64, s390, s390x, armv7l, aarch64 \#475 \[manisandro\]
-   Add arch support for ppc \[wiredfool\]
-   Correctly quote file names for WindowsViewer command \[cgohlke\]
-   Prefer homebrew freetype over X11 freetype (but still allow both) \#466 \[dmckeone\]

2.3.2 (2014-08-13)
------------------

-   Fixed CVE-2014-3589, a DOS in the IcnsImagePlugin (backport) \[Andrew Drake\]

2.3.1 (2014-03-14)
------------------

-   Fix insecure use of tempfile.mktemp (CVE-2014-1932 CVE-2014-1933) \[wiredfool\]

2.3.0 (2014-01-01)
------------------

-   Stop leaking filename parameter passed to getfont \#459 \[jpharvey\]
-   Report availability of LIBTIFF during setup and selftest \[cgohlke\]
-   Fix msvc build error C1189: \"No Target Architecture\" \#460 \[cgohlke\]
-   Fix memory leak in font\_getsize \[wiredfool\]
-   Correctly prioritize include and library paths \#442 \[ohanar\]
-   Image.point fixes for numpy.array and docs \#441 \[wiredfool\]
-   Save the transparency header by default for PNGs \#424 \[wiredfool\]
-   Support for PNG tRNS header when converting from RGB-\>RGBA \#423 \[wiredfool\]
-   PyQT5 Support \#418 \[wiredfool\]
-   Updates for saving color tiffs w/compression using libtiff \#417 \[wiredfool\]
-   2gigapix image fixes and redux \[wiredfool\]
-   Save arbitrary tags in Tiff image files \#369 \[wiredfool\]
-   Quote filenames and title before using on command line \#398 \[tmccombs\]
-   Fixed Viewer.show to return properly \#399 \[tmccombs\]
-   Documentation fixes \[wiredfool\]
-   Fixed memory leak saving images as webp when webpmux is available \#429 \[cezarsa\]
-   Fix compiling with FreeType 2.5.1 \#427 \[stromnov\]
-   Adds directories for NetBSD \#411 \[deepy\]
-   Support RGBA TIFF with missing ExtraSamples tag \#393 \[cgohlke\]
-   Lossless WEBP Support \#390 \[wiredfool\]
-   Take compression as an option in the save call for tiffs \#389 \[wiredfool\]
-   Add support for saving lossless WebP. Just pass \'lossless=True\' to save() \#386 \[liftoff\]
-   LCMS support upgraded from version 1 to version 2 \#380 (fixes \#343) \[wiredfool\]
-   Added more raw decoder 16 bit pixel formats \#379 \[svanheulen\]
-   Document remaining Image\* modules listed in PIL handbook \[irksep\]
-   Document ImageEnhance, ImageFile, ImageFilter, ImageFont, ImageGrab, ImageMath, and ImageOps \[irksep\]
-   Port and update docs for Image, ImageChops, ImageColor, and ImageDraw \[irksep\]
-   Move or copy content from README.rst to docs/ \[irksep\]
-   Respect CFLAGS/LDFLAGS when searching for headers/libs \[iElectric\]
-   Port PIL Handbook tutorial and appendices \[irksep\]
-   Alpha Premultiplication support for transform and resize \#364 \[wiredfool\]
-   Fixes to make Pypy 2.1.0 work on Ubuntu 12.04/64 \#359 \[wiredfool\]

2.2.2 (2013-12-11)
------------------

-   Fix compiling with FreeType 2.5.1 \#427 \[stromnov\]

2.2.1 (2013-10-02)
------------------

-   Error installing Pillow 2.2.0 on Mac OS X (due to hard dep on brew) \#357 (fixes \#356) \[wiredfool\]

2.2.0 (2013-10-02)
------------------

-   Bug in image transformations resulting from uninitialized memory \#348 (fixes \#254) \[nikmolnar\]
-   Fix for encoding of b\_whitespace \#346 (similar to closed issue \#272) \[mhogg\]
-   Add numpy array interface support for 16 and 32 bit integer modes \#347 (fixes \#273) \[cgohlke\]
-   Partial fix for \#290: Add preliminary support for TIFF tags. \[wiredfool\]
-   Fix \#251 and \#326: circumvent classification of pngtest\_bad.png as malware \[cgohlke\]
-   Add typedef uint64\_t for MSVC \#339 \[cgohlke\]
-   setup.py: better support for C\_INCLUDE\_PATH, LD\_RUN\_PATH, etc. \#336 (fixes \#329) \[nu774\]
-   \_imagingcms.c: include windef.h to fix build issue on MSVC \#335 (fixes \#328) \[nu774\]
-   Automatically discover homebrew include/ and lib/ paths on OS X \#330 \[donspaulding\]
-   Fix bytes which should be bytearray \#325 \[manisandro\]
-   Add respective paths for C\_INCLUDE\_PATH, LD\_RUN\_PATH (rpath) to build if specified as environment variables \#324 \[seanupton\]
-   Fix \#312 + gif optimize improvement \[d-schmidt\]
-   Be more tolerant of tag read failures \#320 \[ericbuehl\]
-   Catch truncated zTXt errors \#321 (fixes \#318) \[vytisb\]
-   Fix IOError when saving progressive JPEGs \#313 \[e98cuenc\]
-   Add RGBA support to ImageColor \#309 \[yoavweiss\]
-   Test for `str`, not `"utf-8"` \#306 (fixes \#304) \[mjpieters\]
-   Fix missing import os in \_util.py \#303 \[mnowotka\]
-   Added missing exif tags \#300 \[freyes\]
-   Fail on all import errors \#298, \#299 (fixes \#297) \[macfreek, wiredfool\]
-   Fixed Windows fallback (wasn\'t using correct file in Windows fonts) \#295 \[lmollea\]
-   Moved ImageFile and ImageFileIO comments to docstrings \#293 \[freyes\]
-   Restore compatibility with ISO C \#289 \[cgohlke\]
-   Use correct format character for C int type \#288 \[cgohlke\]
-   Allocate enough memory to hold pointers in encode.c \#287 \[cgohlke\]
-   Fillorder double shuffling bug when FillOrder ==2 and decoding using libtiff \#284 (fixes \#279) \[wiredfool\]
-   Moved Image module comments to docstrings. \[freyes\]
-   Add 16-bit TIFF support \#277 (fixes \#274) \[wiredfool\]
-   Ignore high ascii characters in string.whitespace \#276 (fixes \#272) \[wiredfool\]
-   Added clean/build to tox to make it behave like Travis \#275 \[freyes\]
-   Adding support for metadata in webp images \#271 \[heynemann\]

2.1.0 (2013-07-02)
------------------

-   Add /usr/bin/env python shebangs to all scripts in /Scripts \#197 \[mgorny\]
-   Add several TIFF decoders and encoders \#268 \[megabuz\]
-   Added support for alpha transparent webp images.
-   Adding Python 3 support for StringIO.
-   Adding Python3 basestring compatibility without changing basestring.
-   Fix webp encode errors on win-amd64 \#259 \[cgohlke\]
-   Better fix for ZeroDivisionError in ImageOps.fit for image.size height is 1 \#267 \[chrispbailey\]
-   Better support for ICO images.
-   Changed PY\_VERSION\_HEX \#190 (fixes \#166)
-   Changes to put everything under the PIL namespace \#191 \[wiredfool\]
-   Changing StringIO to BytesIO.
-   Cleanup whitespace. \[Arfrever\]
-   Don\'t skip \'import site\' on initialization when running tests for inplace builds. \[cgohlke\]
-   Enable warnings for test suite \#227 \[wiredfool\]
-   Fix for ZeroDivisionError in ImageOps.fit for image.size == (1,1) \#255 \[pterk\]
-   Fix for if isinstance(filter, collections.Callable) crash. Python bug \#7624 on \<2.6.6
-   Remove double typedef declaration \#194 (fixes \#193) \[evertrol\]
-   Fix msvc compile errors (\#230).
-   Fix rendered characters have been chipped for some TrueType fonts \[tk0miya\]
-   Fix usage of pilfont.py script \#184 \[fabiomcosta\]
-   Fresh start for docs, generated by sphinx-apidoc.
-   Introduce \--enable-x and fail if it is given and x is not available.
-   Partial work to add a wrapper for WebPGetFeatures to correctly support \#220 (fixes \#204)
-   Significant performance improvement of `alpha_composite` function \#156 \[homm\]
-   Support explicitly disabling features via \--disable-\* options \#240 \[mgorny\]
-   Support selftest.py \--installed, fixes \#263
-   Transparent WebP Support \#220 (fixes \#204) \[euangoddard, wiredfool\]
-   Use PyCapsule for py3.1 \#238 (fixes \#237) \[wiredfool\]
-   Workaround for: <https://bugs.python.org/issue16754> in 3.2.x \< 3.2.4 and 3.3.0.

2.0.0 (2013-03-15)
------------------

::: {.note}
::: {.title}
Note
:::

Special thanks to Christoph Gohlke and Eric Soroos for assisting with a pre-PyCon 2013 release!
:::

-   Many other bug fixes and enhancements by many other people.
-   Add Python 3 support. (Pillow \>= 2.0.0 supports Python 2.6, 2.7, 3.2, 3.3. Pillow \< 2.0.0 supports Python 2.4, 2.5, 2.6, 2.7.) \[fluggo\]
-   Add PyPy support (experimental, please see \#67)
-   Add WebP support \#96 \[lqs\]
-   Add Tiff G3/G4 support (experimental) \[wiredfool\]
-   Backport PIL\'s PNG/Zip improvements \#95, \#97 \[olt\]
-   Various 64-bit and Windows fixes. \[cgohlke\]
-   Add testing suite. \[cgohlke, fluggo\]
-   Added support for PNG images with transparency palette. \[d-schmidt\]

1.7.8 (2012-11-01)
------------------

-   Removed doctests.py that made tests of other packages fail. \[thomasdesvenain\]
-   Fix opening psd files with RGBA layers when A mode is not of type 65535 but 3. Fixes \#3 \[thomasdesvenain\]

1.7.7 (2012-04-04)
------------------

-   UNDEF more types before including windows headers \[mattip\]

1.7.6 (2012-01-20)
------------------

-   Bug fix: freetype not found on Mac OS X with case-sensitive filesystem \[gjo\]
-   Bug fix: Backport fix to split() after open() (regression introduced in PIL 1.1.7). \[sfllaw\]

1.7.5 (2011-09-07)
------------------

-   Fix for sys.platform = \"linux3\" \[blueyed\]
-   Package cleanup and additional documentation \[aclark4life\]

1.7.4 (2011-07-21)
------------------

-   Fix brown bag release \[aclark4life\]

1.7.3 (2011-07-20)
------------------

-   Fix : resize need int values, append int conversion in thumbnail method \[harobed\]

1.7.2 (2011-06-02)
------------------

-   Bug fix: Python 2.4 compat \[aclark4life\]

1.7.1 (2011-05-31)
------------------

-   More multi-arch support \[SteveM, regebro, barry, aclark4life\]

1.7.0 (2011-05-27)
------------------

-   Add support for multi-arch library directory /usr/lib/x86\_64-linux-gnu \[aclark4life\]

1.6 (12/01/2010)
----------------

-   Bug fix: /usr/x11/include should be added to include\_dirs not library\_dirs \[elro\]
-   Doc fixes \[aclark4life\]

1.5 (11/28/2010)
----------------

-   Module and package fixes \[aclark4life\]

1.4 (11/28/2010)
----------------

-   Doc fixes \[aclark4life\]

1.3 (11/28/2010)
----------------

-   Add support for /lib64 and /usr/lib64 library directories on Linux \[aclark4life\]
-   Doc fixes \[aclark4life\]

1.2 (08/02/2010)
----------------

-   On OS X also check for freetype2 in the X11 path \[jezdez\]
-   Doc fixes \[aclark4life\]

1.1 (07/31/2010)
----------------

-   Removed setuptools\_hg requirement \[aclark4life\]
-   Doc fixes \[aclark4life\]

1.0 (07/30/2010)
----------------

-   Remove support for `import Image`. `from PIL import Image` now required.
-   Forked PIL based on [Chris McDonough and Hanno Schlichting\'s setuptools compatible re-packaging](https://dist.plone.org/thirdparty/PIL-1.1.7.tar.gz) \[aclark4life\]

Pre-fork
========

0.2b5-1.1.7
-----------

    -*- coding: utf-8 -*-

    The Python Imaging Library
    $Id$

    ACKNOWLEDGEMENTS: PIL wouldn't be what it is without the help of:
    David Ascher, Phil Austin, Douglas Bagnall, Larry Bates, Anthony
    Baxter, William Baxter, Denis Benoit, Jan Blom, Duncan Booth, Alexey
    Borzenkov, Jeff Breidenbach, Roger Burnham, Zac Burns, Gene Cash,
    Kevin Cazabon, Fred Clare, Greg Coats, Chris Cogdon, Greg Couch, Bill
    Crutchfield, Abel Deuring, Tim Docker, Fred Drake, Graham Dumpleton,
    Matthew Ellis, Eric Etheridge, Daniel Fetchinson, Robin Friedrich,
    Pier Paolo Glave, Federico Di Gregorio, Markus Gritsch, Daniel
    Haertle, Greg Hamilton, Mark Hammond, Bernhard Herzog, Rob Hooft, Bob
    Ippolito, Jack Jansen, Bill Janssen, Edward Jones, Richard Jones,
    Håkan Karlsson, Robert Kern, David Kirtley, Bob Klimek, Matthias
    Klose, Andrew Kuchling, Magnus Källström, Victor Lacina, Ben Last,
    Hamish Lawson, Cesare Leonardi, Andrew MacIntyre, Jan Matejek, Naveen
    Michaud-Agrawal, Gordon McMillan, Skip Montanaro, Fredrik Nehr,
    Russell Nelson, Luciano Nocera, Travis Oliphant, Piet van Oostrum,
    Richard Oudkerk, Paul Pharr, Andres Polit, Conrado Porto Lopes Gouvêa,
    Eric Raymond, Victor Reijs, Bertil Reinhammar, Nicholas Riley, Don
    Rozenberg, Toby Sargeant, Barry Scott, Les Schaffer, Joel Shprentz,
    Klamer Shutte, Gene Skonicki, Niki Spahiev, D. Alan Stewart, Perry
    Stoll, Paul Svensson, Ulrik Svensson, Miki Tebeka, Michael van
    Tellingen, Ivan Tkatchev, Dan Torop, Adam Twardoch, Rune Uhlin, Dmitry
    Vasiliev, Sasha Voynow, Charles Waldman, Collin Winter, Dan Wolfe,
    Ka-Ping Yee, and many others (if your name should be on this list, let
    me know.)

1.1.6 to 1.1.7
--------------

This section may not be fully complete. For changes since this file was last updated, see the repository revision history: <http://svn.effbot.org/public/pil/>

1.1.7 final
-----------

-   Set GIF loop info property to the number of iterations if a NETSCAPE loop extension is present, instead of always setting it to 1 (from Valentino Volonghi).

1.1.7c1
-------

-   Improved PNG compression (from Alexey Borzenkov).

-   Read interlaced PNG files (from Conrado Porto Lopes Gouvêa)

-   Added various TGA improvements from Alexey Borzenkov, including support for specifying image orientation.

-   Bumped block threshold to 16 megabytes, made size estimation a bit more accurate. This speeds up allocation of large images.

-   Fixed rounding error in ImagingDrawWideLine.

    \"gormish\" writes: ImagingDrawWideLine() in Draw.c has a bug in every version I\'ve seen, which leads to different width lines depending on the order of the points in the line. This is especially bad at some angles where a \'width=2\' line can completely disappear.

-   Added support for RGBA mode to the SGI module (based on code by Karsten Hiddemann).

-   Handle repeated IPTC tags (adapted from a patch by Eric Bruning).

    Eric writes: According to the specification, some IPTC tags can be repeated, e.g., tag 2:25 (keywords). PIL 1.1.6 only retained the last instance of that tag. Below is a patch to store all tags. If there are multiple tag instances, they are stored in a (python) list. Single tag instances remain as strings.

-   Fixed potential crash in ImageFilter for small target images (reported by Zac Burns and Daniel Fetchinson).

-   Use BMP instead of JPEG as temporary show format on Mac OS X.

-   Fixed putpixel/new for I;16 with colors \> 255.

-   Added integer power support to ImagingMath.

-   Added limited support for I;16L mode (explicit little endian).

-   Moved WMF support into Image.core; enable WMF rendering by default if renderer is available.

-   Mark the ARG plugin as obsolete.

-   Added version query mechanism to ImageCms and ImageFont, for debugging.

-   Added (experimental) ImageCms function for fetching the ICC profile for the current display (currently Windows only).

    Added HWND/HDC support to ImageCms.get\_display\_profile().

-   Added WMF renderer (Windows only).

-   Added ImagePointHandler and ImageTransformHandler mixins; made ImageCmsTransform work with im.point.

-   Fixed potential endless loop in the XVThumbnail reader (from Nikolai Ugelvik).

-   Added Kevin Cazabon\'s pyCMS package.

    The C code has been moved to \_imagingcms.c, the Python interface module is installed as PIL.ImageCMS.

    Added support for in-memory ICC profiles.

    Unified buildTransform and buildTransformFromOpenProfiles.

    The profile can now be either a filename, a profile object, or a file-like object containing an in-memory profile.

    Additional fixes from Florian Böch:

    > Very nice - it just needs LCMS flags support so we can use black point compensation and softproofing :) See attached patches. They also fix a naming issue which could cause confusion - display profile (ImageCms wording) actually means proof profile (lcms wording), so I changed variable names and docstrings where applicable. Patches are tested under Python 2.6.

-   Improved support for layer names in PSD files (from Sylvain Baubeau)

    Sylvain writes: I needed to be able to retrieve the names of the layers in a PSD files. But PsdImagePlugin.py didn\'t do the job so I wrote this very small patch.

-   Improved RGBA support for ImageTk for 8.4 and newer (from Con Radchenko).

    This replaces the slow run-length based encoding model with true compositing at the Tk level.

-   Added support for 16- and 32-bit images to McIdas loader.

    Based on file samples and stand-alone reader code provided by Craig Swank.

-   Added ImagePalette support to putpalette.

-   Fixed problem with incremental parsing of PNG files.

-   Make selftest.py report non-zero status on failure (from Mark Sienkiewicz)

-   Add big endian save support and multipage infrastructure to the TIFF writer (from Sebastian Haase).

-   Handle files with GPS IFD but no basic EXIF IFD (reported by Kurt Schwehr).

-   Added zTXT support (from Andrew Kuchling via Lowell Alleman).

-   Fixed potential infinite loop bug in ImageFont (from Guilherme Polo).

-   Added sample ICC profiles (from Kevin Cazabon)

-   Fixed array interface for I, F, and RGBA/RGBX images.

-   Added Chroma subsampling support for JPEG (from Justin Huff).

    Justin writes: Attached is a patch (against PIL 1.1.6) to provide control over the chroma subsampling done by the JPEG encoder. This is often useful for reducing compression artifacts around edges of clipart and text.

-   Added USM/Gaussian Blur code from Kevin Cazabon.

-   Fixed bug w. uninitialized image data when cropping outside the source image.

-   Use ImageShow to implement the Image.show method.

    Most notably, this picks the \'display\' utility when available. It also allows application code to register new display utilities via the ImageShow registry.

-   Release the GIL in the PNG compressor (from Michael van Tellingen).

-   Revised JPEG CMYK handling.

    Always assume Adobe behaviour, both when reading and writing (based on a patch by Kevin Cazabon, and test data by Tim V. and Charlie Clark, and additional debugging by Michael van Tellingen).

-   Support for preserving ICC profiles (by Florian Böch via Tim Hatch).

    Florian writes:

    > It\'s a beta, so still needs some testing, but should allow you to:
    >
    > -   retain embedded ICC profiles when saving from/to JPEG, PNG, TIFF. Existing code doesn\'t need to be changed.
    > -   access embedded profiles in JPEG, PNG, PSD, TIFF.
    >
    > It also includes patches for TIFF to retain IPTC, Photoshop and XMP metadata when saving as TIFF again, read/write TIFF resolution information correctly, and to correct inverted CMYK JPEG files.

-   Fixed potential memory leak in median cut quantizer (from Evgeny Salmin).

-   Fixed OverflowError when reading upside-down BMP images.

-   Added resolution save option for PDF files.

    Andreas Kostyrka writes: I\'ve included a patched PdfImagePlugin.py based on 1.1.6 as included in Ubuntu, that supports a \"resolution\" save option. Not great, but it makes the PDF saving more useful by allowing PDFs that are not exactly 72dpi.

-   Look for Tcl/Tk include files in version-specific include directory (from Encolpe Degoute).

-   Fixed grayscale rounding error in ImageColor.getcolor (from Tim Hatch).

-   Fixed calculation of mean value in ImageEnhance.Contrast (reported by \"roop\" and Scott David Daniels).

-   Fixed truetype positioning when first character has a negative left bearing (from Ned Batchelder):

    Ned writes: In PIL 1.1.6, ImageDraw.text will position the string incorrectly if the first character has a negative left bearing. To see the problem, show a string like \"///\" in an italic font. The first slash will be clipped at the left, and the string will be mis-positioned.

-   Fixed resolution unit bug in tiff reader/writer (based on code by Florian Höch, Gary Bloom, and others).

-   Added simple transparency support for RGB images (reported by Sebastian Spaeth).

-   Added support for Unicode filenames in ImageFont.truetype (from Donn Ingle).

-   Fixed potential crash in ImageFont.getname method (from Donn Ingle).

-   Fixed encoding issue in PIL/WalImageFile (from Santiago M. Mola).

1.1.6
-----

-   Fixed some 64-bit compatibility warnings for Python 2.5.
-   Added threading support for the Sane driver (from Abel Deuring).

1.1.6b2
-------

-   Added experimental \"floodfill\" function to the ImageDraw module (based on code by Eric Raymond).

-   The default arguments for \"frombuffer\" doesn\'t match \"fromstring\" and the documentation; this is a bug, and will most likely be fixed in a future version. In this release, PIL prints a warning message instead. To silence the warning, change any calls of the form \"frombuffer(mode, size, data)\" to:

        frombuffer(mode, size, data, "raw", mode, 0, 1)

-   Added \"fromarray\" function, which takes an object implementing the NumPy array interface and creates a PIL Image from it. (from Travis Oliphant).

-   Added NumPy array interface support (\_\_array\_interface\_\_) to the Image class (based on code by Travis Oliphant).

    This allows you to easily convert between PIL image memories and NumPy arrays:

        import numpy, Image
        im = Image.open('hopper.jpg')
        a = numpy.asarray(im) # a is readonly
        im = Image.fromarray(a)

-   Fixed CMYK polarity for JPEG images, by treating all images as \"Adobe CMYK\" images. (thanks to Cesare Leonardi and Kevin Cazabon for samples, debugging, and patches).

1.1.6b1
-------

-   Added \'expand\' option to the Image \'rotate\' method. If true, the output image is made large enough to hold the entire rotated image.
-   Changed the ImageDraw \'line\' method to always draw the last pixel in a polyline, independent of line angle.
-   Fixed bearing calculation and clipping in the ImageFont truetype renderer; this could lead to clipped text, or crashes in the low-level \_imagingft module. (based on input from Adam Twardoch and others).
-   Added ImageQt wrapper module, for converting PIL Image objects to QImage objects in an efficient way.
-   Fixed \'getmodebands\' to return the number of bands also for \"PA\" and \"LA\" modes. Added \'getmodebandnames\' helper that return the band names.

1.1.6a2
-------

-   Added float/double support to the TIFF loader (from Russell Nelson).
-   Fixed broken use of realloc() in path.c (from Jan Matejek)
-   Added save support for Spider images (from William Baxter).
-   Fixed broken \'paste\' and \'resize\' operations in pildriver (from Bill Janssen).
-   Added support for duplex scanning to the Sane interface (Abel Deuring).

1.1.6a1
-------

-   Fixed a memory leak in \"convert(mode)\", when converting from L to P.

-   Added pixel access object. The \"load\" method now returns a access object that can be used to directly get and set pixel values, using ordinary \[x, y\] notation:

        pixel = im.load()
        v = pixel[x, y]
        pixel[x, y] = v

    If you\'re accessing more than a few pixels, this is a lot faster than using getpixel/putpixel.

-   Fixed building on Cygwin (from Miki Tebeka).

-   Fixed \"point(callable)\" on unloaded images (reported by Håkan Karlsson).

-   Fixed size bug in ImageWin.ImageWindow constructor (from Victor Reijs)

-   Fixed ImageMath float() and int() operations for Python 2.4 (reported by Don Rozenberg).

-   Fixed \"RuntimeError: encoder error -8 in tostring\" problem for wide \"RGB\", \"I\", and \"F\" images.

-   Fixed line width calculation.

1.1.6a0
-------

-   Fixed byte order issue in Image.paste(ink) (from Ka-Ping Yee).
-   Fixed off-by-0.5 errors in the ANTIALIAS code (based on input from Douglas Bagnall).
-   Added buffer interface support to the Path constructor. If a buffer is provided, it is assumed to contain a flat array of float coordinates (e.g. array.array(\'f\', seq)).
-   Added new ImageMath module.
-   Fixed ImageOps.equalize when used with a small number of distinct values (reported by David Kirtley).
-   Fixed potential integer division in PSDraw.image (from Eric Etheridge).

1.1.5c2 and 1.1.5 final
-----------------------

-   Added experimental PERSPECTIVE transform method (from Jeff Breidenbach).

1.1.5c1
-------

-   Make sure \"thumbnail\" never generates zero-wide or zero-high images (reported by Gene Skonicki)
-   Fixed a \"getcolors\" bug that could result in a zero count for some colors (reported by Richard Oudkerk).
-   Changed default \"convert\" palette to avoid \"rounding errors\" when round-tripping white source pixels (reported by Henryk Gerlach and Jeff Epler).

1.1.5b3
-------

-   Don\'t crash in \"quantize\" method if the number of colors requested is larger than 256. This release raises a ValueError exception; future versions may return a mode \"RGB\" image instead (reported by Richard Oudkerk).
-   Added WBMP read/write support (based on code by Duncan Booth).

1.1.5b2
-------

-   Added DPI read/write support to the PNG codec. The decoder sets the info\[\"dpi\"\] attribute for PNG files with appropriate resolution settings. The encoder uses the \"dpi\" option (based on code by Niki Spahiev).
-   Added limited support for \"point\" mappings from mode \"I\" to mode \"L\". Only 16-bit values are supported (other values are clipped), the lookup table must contain exactly 65536 entries, and the mode argument must be set to \"L\".
-   Added support for Mac OS X icns files (based on code by Bob Ippolito).
-   Added \"ModeFilter\" support to the ImageFilter module.
-   Added support for Spider images (from William Baxter). See the comments in PIL/SpiderImagePlugin.py for more information on this format.

1.1.5b1
-------

-   Added new Sane release (from Ralph Heinkel). See the Sane/README and Sane/CHANGES files for more information.
-   Added experimental PngInfo chunk container to the PngImageFile module. This can be used to add arbitrary chunks to a PNG file. Create a PngInfo instance, use \"add\" or \"add\_text\" to add chunks, and pass the instance as the \"pnginfo\" option when saving the file.
-   Added \"getpalette\" method. This returns the palette as a list, or None if the image has no palette. To modify the palette, use \"getpalette\" to fetch the current palette, modify the list, and put it back using \"putpalette\".
-   Added optional flattening to the ImagePath \"tolist\" method. tolist() or tolist(0) returns a list of 2-tuples, as before. tolist(1) returns a flattened list instead.

1.1.5a5
-------

-   Fixed BILINEAR/BICUBIC/ANTIALIAS filtering for mode \"LA\".

-   Added \"getcolors()\" method. This is similar to the existing histogram method, but looks at color values instead of individual layers, and returns an unsorted list of (count, color) tuples.

    By default, the method returns None if finds more than 256 colors. If you need to look for more colors, you can pass in a limit (this is used to allocate internal tables, so you probably don\'t want to pass in too large values).

-   Build improvements: Fixed building under AIX, improved detection of FreeType2 and Mac OS X framework libraries, and more. Many thanks to everyone who helped test the new \"setup.py\" script!

1.1.5a4
-------

-   The \"save\" method now looks for a file format driver before creating the file.

-   Don\'t use antialiased truetype fonts when drawing in mode \"P\", \"I\", and \"F\" images.

-   Rewrote the \"setup.py\" file. The new version scans for available support libraries, and configures both the libImaging core library and the bindings in one step.

    To use specific versions of the libraries, edit the ROOT variables in the setup.py file.

-   Removed threaded \"show\" viewer; use the old \"show\" implementation instead (Windows).

-   Added deprecation warnings to Image.offset, ImageDraw.setink, and ImageDraw.setfill.

-   Added width option to ImageDraw.line(). The current implementation works best for straight lines; it does not support line joins, so polylines won\'t look good.

-   ImageDraw.Draw is now a factory function instead of a class. If you need to create custom draw classes, inherit from the ImageDraw class. All other code should use the factory function.

-   Fixed loading of certain PCX files (problem reported by Greg Hamilton, who also provided samples).

-   Changed \_imagingft.c to require FreeType 2.1 or newer. The module can still be built with earlier versions; see comments in \_imagingft.c for details.

1.1.5a3
-------

-   Added \'getim\' method, which returns a PyCObject wrapping an Imaging pointer. The description string is set to IMAGING\_MAGIC. See Imaging.h for pointer and string declarations.
-   Fixed reading of TIFF JPEG images (problem reported by Ulrik Svensson).
-   Made ImageColor work under Python 1.5.2
-   Fixed division by zero \"equalize\" on very small images (from Douglas Bagnall).

1.1.5a2
-------

-   The \"paste\" method now supports the alternative \"paste(im, mask)\" syntax (in this case, the box defaults to im\'s bounding box).
-   The \"ImageFile.Parser\" class now works also for PNG files with more than one IDAT block.
-   Added DPI read/write to the TIFF codec, and fixed writing of rational values. The decoder sets the info\[\"dpi\"\] attribute for TIFF files with appropriate resolution settings. The encoder uses the \"dpi\" option.
-   Disable interlacing for small (or narrow) GIF images, to work around what appears to be a hard-to-find bug in PIL\'s GIF encoder.
-   Fixed writing of mode \"P\" PDF images. Made mode \"1\" PDF images smaller.
-   Made the XBM reader a bit more robust; the file may now start with a few whitespace characters.
-   Added support for enhanced metafiles to the WMF driver. The separate PILWMF kit lets you render both placeable WMF files and EMF files as raster images. See <http://effbot.org/downloads#pilwmf>

1.1.5a1
-------

-   Replaced broken WMF driver with a WMF stub plugin (see below).

-   Fixed writing of mode \"1\", \"L\", and \"CMYK\" PDF images (based on input from Nicholas Riley and others).

-   Fixed adaptive palette conversion for zero-width or zero-height images (from Chris Cogdon)

-   Fixed reading of PNG images from QuickTime 6 (from Paul Pharr)

-   Added support for StubImageFile plugins, including stub plugins for BUFR, FITS, GRIB, and HDF5 files. A stub plugin can identify a given file format, but relies on application code to open and save files in that format.

-   Added optional \"encoding\" argument to the ImageFont.truetype factory. This argument can be used to specify non-Unicode character maps for fonts that support that. For example, to draw text using the Microsoft Symbol font, use:

        font = ImageFont.truetype("symbol.ttf", 16, encoding="symb")
        draw.text((0, 0), unichr(0xF000 + 0xAA))

    (note that the symbol font uses characters in the 0xF000-0xF0FF range)

    Common encodings are \"unic\" (Unicode), \"symb\" (Microsoft Symbol), \"ADOB\" (Adobe Standard), \"ADBE\" (Adobe Expert), and \"armn\" (Apple Roman). See the FreeType documentation for more information.

-   Made \"putalpha\" a bit more robust; you can now attach an alpha layer to a plain \"L\" or \"RGB\" image, and you can also specify constant alphas instead of alpha layers (using integers or colour names).

-   Added experimental \"LA\" mode support.

    An \"LA\" image is an \"L\" image with an attached transparency layer. Note that support for \"LA\" is not complete; some operations may fail or produce unexpected results.

-   Added \"RankFilter\", \"MinFilter\", \"MedianFilter\", and \"MaxFilter\" classes to the ImageFilter module.

-   Improved support for applications using multiple threads; PIL now releases the global interpreter lock for many CPU-intensive operations (based on work by Kevin Cazabon).

-   Ignore Unicode characters in the PCF loader (from Andres Polit)

-   Fixed typo in OleFileIO.loadfat, which could affect loading of FlashPix and Image Composer images (Daniel Haertle)

-   Fixed building on platforms that have Freetype but don\'t have Tcl/Tk (Jack Jansen, Luciano Nocera, Piet van Oostrum and others)

-   Added EXIF GPSInfo read support for JPEG files. To extract GPSInfo information, open the file, extract the exif dictionary, and check for the key 0x8825 (GPSInfo). If present, it contains a dictionary mapping GPS keys to GPS values. For a list of keys, see the EXIF specification.

    The \"ExifTags\" module contains a GPSTAGS dictionary mapping GPS tags to tag names.

-   Added DPI read support to the PCX and DCX codecs (info\[\"dpi\"\]).

-   The \"show\" methods now uses a built-in image viewer on Windows. This viewer creates an instance of the ImageWindow class (see below) and keeps it running in a separate thread. NOTE: This was disabled in 1.1.5a4.

-   Added experimental \"Window\" and \"ImageWindow\" classes to the ImageWin module. These classes allow you to create a WCK-style toplevel window, and use it to display raster data.

-   Fixed some Python 1.5.2 issues (to build under 1.5.2, use the Makefile.pre.in/Setup.in approach)

-   Added support for the TIFF FillOrder tag. PIL can read mode \"1\", \"L\", \"P\" and \"RGB\" images with non-standard FillOrder (based on input from Jeff Breidenbach).

1.1.4 final
-----------

-   Fixed ImageTk build problem on Unix.

1.1.4b2
-------

-   Improved building on Mac OS X (from Jack Jansen).
-   Improved building on Windows with MinGW (from Klamer Shutte).
-   If no font is specified, ImageDraw now uses the embedded default font. Use the \"load\" or \"truetype\" methods to load a real font.
-   Added embedded default font to the ImageFont module (currently an 8-pixel Courier font, taken from the X window distribution).

1.1.4b1
-------

-   Added experimental EXIF support for JPEG files. To extract EXIF information from a JPEG file, open the file as usual, and call the \"\_getexif\" method. If successful, this method returns a dictionary mapping EXIF TIFF tags to values. If the file does not contain EXIF data, the \"\_getexif\" method returns None.

    The \"ExifTags\" module contains a dictionary mapping tags to tag names.

    This interface will most likely change in future versions.

-   Fixed a bug when using the \"transparency\" option with the GIF writer.

-   Added limited support for \"bitfield compression\" in BMP files and DIB buffers, for 15-bit, 16-bit, and 32-bit images. This also fixes a problem with ImageGrab module when copying screendumps from the clipboard on 15/16/32-bit displays.

-   Added experimental WAL (Quake 2 textures) loader. To use this loader, import WalImageFile and call the \"open\" method in that module.

1.1.4a4
-------

-   Added updated SANE driver (Andrew Kuchling, Abel Deuring)
-   Use Python\'s \"mmap\" module on non-Windows platforms to read some uncompressed formats using memory mapping. Also added a \"frombuffer\" function that allows you to access the contents of an existing string or buffer object as if it were an image object.
-   Fixed a memory leak that could appear when processing mode \"P\" images (from Pier Paolo Glave)
-   Ignore Unicode characters in the BDF loader (from Graham Dumpleton)

1.1.4a3 released; Windows only
------------------------------

-   Added experimental RGBA-on-RGB drawing support. To use RGBA colours on an RGB image, pass \"RGBA\" as the second string to the ImageDraw.Draw constructor.
-   Added support for non-ASCII strings (Latin-1) and Unicode to the truetype font renderer.
-   The ImageWin \"Dib\" object can now be constructed directly from an image object.
-   The ImageWin module now allows you use window handles as well as device contexts. To use a window handle, wrap the handle in an ImageWin.HWND object, and pass in this object instead of the device context.

1.1.4a2
-------

-   Improved support for 16-bit unsigned integer images (mode \"I;16\"). This includes TIFF reader support, and support for \"getextrema\" and \"point\" (from Klamer Shutte).
-   Made the BdfFontFile reader a bit more robust (from Kevin Cazabon and Dmitry Vasiliev)
-   Changed TIFF writer to always write Compression tag, even when using the default compression (from Greg Couch).
-   Added \"show\" support for Mac OS X (from Dan Wolfe).
-   Added clipboard support to the \"ImageGrab\" module (Windows only). The \"grabclipboard\" function returns an Image object, a list of filenames (not in 1.1.4), or None if neither was found.

1.1.4a1
-------

-   Improved support for drawing RGB data in palette images. You can now use RGB tuples or colour names (see below) when drawing in a mode \"P\" image. The drawing layer automatically assigns color indexes, as long as you don\'t use more than 256 unique colours.

-   Moved self test from MiniTest/test.py to ./selftest.py.

-   Added support for CSS3-style color strings to most places that accept colour codes/tuples. This includes the \"ImageDraw\" module, the Image \"new\" function, and the Image \"paste\" method.

    Colour strings can use one of the following formats: \"\#f00\", \"\#ff0000\", \"rgb(255,0,0)\", \"rgb(100%,0%,0%)\", \"hsl(0, 100%, 50%)\", or \"red\" (most X11-style colour names are supported). See the documentation for the \"ImageColor\" module for more information.

-   Fixed DCX decoder (based on input from Larry Bates)

-   Added \"IptcImagePlugin.getiptcinfo\" helper to extract IPTC/NAA newsphoto properties from JPEG, TIFF, or IPTC files.

-   Support for TrueType/OpenType fonts has been added to the standard distribution. You need the freetype 2.0 library.

-   Made the PCX reader a bit more robust when reading 2-bit and 4-bit PCX images with odd image sizes.

-   Added \"Kernel\" class to the ImageFilter module. This class allows you to filter images with user-defined 3x3 and 5x5 convolution kernels.

-   Added \"putdata\" support for mode \"I\", \"F\" and \"RGB\".

-   The GIF writer now supports the transparency option (from Denis Benoit).

-   A HTML version of the module documentation is now shipped with the source code distribution. You\'ll find the files in the Doc subdirectory.

-   Added support for Palm pixmaps (from Bill Janssen). This change was listed for 1.1.3, but the \"PalmImagePlugin\" driver didn\'t make it into the distribution.

-   Improved decoder error messages.

1.1.3 final
-----------

-   Made setup.py look for old versions of zlib. For some background, see: <https://zlib.net/advisory-2002-03-11.txt>

1.1.3c2
-------

-   Added setup.py file (tested on Unix and Windows). You still need to build libImaging/imaging.lib in the traditional way, but the setup.py script takes care of the rest.

    The old Setup.in/Makefile.pre.in build method is still supported.

-   Fixed segmentation violation in ANTIALIAS filter (an internal buffer wasn\'t properly allocated).

1.1.3c1
-------

-   Added ANTIALIAS downsampling filter for high-quality \"resize\" and \"thumbnail\" operations. Also added filter option to the \"thumbnail\" operation; the default value is NEAREST, but this will most likely change in future versions.

-   Fixed plugin loader to be more robust if the \_\_file\_\_ variable isn\'t set.

-   Added seek/tell support (for layers) to the PhotoShop loader. Layer 0 is the main image.

-   Added new (but experimental) \"ImageOps\" module, which provides shortcuts for commonly used operations on entire images.

-   Don\'t mess up when loading PNG images if the decoder leaves data in the output buffer. This could cause internal errors on some PNG images, with some versions of ZLIB. (Bug report and patch provided by Bernhard Herzog.)

-   Don\'t mess up on Unicode filenames.

-   Don\'t mess up when drawing on big endian platforms.

-   Made the TIFF loader a bit more robust; it can now read some more slightly broken TIFF files (based on input from Ted Wright, Bob Klimek, and D. Alan Stewart)

-   Added OS/2 EMX build files (from Andrew MacIntyre)

-   Change \"ImageFont\" to reject image files if they don\'t have the right mode. Older versions could leak memory for \"P\" images. (Bug reported by Markus Gritsch).

-   Renamed some internal functions to avoid potential build problem on Mac OS X.

-   Added DL\_EXPORT where relevant (for Cygwin, based on input from Robert Yodlowski)

-   (re)moved bogus \_\_init\_\_ call in BdfFontFile (bug spotted by Fred Clare)

-   Added \"ImageGrab\" support (Windows only)

-   Added support for XBM hotspots (based on code contributed by Bernhard Herzog).

-   Added write support for more TIFF tags, namely the Artist, Copyright, DateTime, ResolutionUnit, Software, XResolution and YResolution tags (from Greg Couch)

-   Added TransposedFont wrapper to ImageFont module

-   Added \"optimize\" flag to GIF encoder. If optimize is present and non-zero, PIL will work harder to create a small file.

-   Raise \"EOFError\" (not IndexError) when reading beyond the end of a TIFF sequence.

-   Support rewind (\"seek(0)\") for GIF and TIFF sequences.

-   Load grayscale GIF images as mode \"L\"

-   Added DPI read/write support to the JPEG codec. The decoder sets the info\[\"dpi\"\] attribute for JPEG files with JFIF dpi settings. The encoder uses the \"dpi\" option:

        im = Image.open("file.jpg")
        dpi = im.info["dpi"] # raises KeyError if DPI not known
        im.save("out.jpg", dpi=dpi)

    Note that PIL doesn\'t always preserve the \"info\" attribute for normal image operations.

1.1.2c1 and 1.1.2 final
-----------------------

-   Adapted to Python 2.1. Among other things, all uses of the \"regex\" module have been replaced with \"re\".
-   Fixed attribute error when reading large PNG files (this bug was introduced in maintenance code released after the 1.1.1 release)
-   Ignore non-string objects in sys.path
-   Fixed Image.transform(EXTENT) for negative xoffsets
-   Fixed loading of image plugins if PIL is installed as a package. (The plugin loader now always looks in the directory where the Image.py module itself is found, even if that directory isn\'t on the standard search path)
-   The Png plugin has been added to the list of preloaded standard formats
-   Fixed bitmap/text drawing in fill mode.
-   Fixed \"getextrema\" to work also for multiband images.
-   Added transparency support for L and P images to the PNG codec.
-   Improved support for read-only images. The \"load\" method now sets the \"readonly\" attribute for memory-mapped images. Operations that modifies an image in place (such as \"paste\" and drawing operations) creates an in-memory copy of the image, if necessary. (before this change, any attempt to modify a memory-mapped image resulted in a core dump\...)
-   Added special cases for lists everywhere PIL expects a sequence. This should speed up things like \"putdata\" and drawing operations.
-   The Image.offset method is deprecated. Use the ImageChops.offset function instead.
-   Changed ImageChops operators to copy palette and info dictionary from the first image argument.

1.1.1
-----

-   Additional fixes for Python 1.6/2.0, including TIFF \"save\" bug.
-   Changed \"init\" to properly load plugins when PIL is used as a package.
-   Fixed broken \"show\" method (on Unix)

1.0 to 1.1
----------

-   Adapted to Python 1.6 (\"append\" and other method changes)
-   Fixed Image.paste when pasting with solid colour and matte layers (\"L\" or \"RGBA\" masks) (bug reported by Robert Kern)
-   To make it easier to distribute prebuilt versions of PIL, the tkinit binding stuff has been moved to a separate extension module, named \"\_imagingtk\".

0.3b2 to 1.0 final
------------------

-   If there\'s no 16-bit integer (like on a Cray T3E), set INT16 to the smallest integer available. Most of the library works just fine anyway (from Bill Crutchfield)
-   Tweaks to make drawing work on big-endian platforms.

1.0c2
-----

-   If PIL is built with the WITH\_TKINTER flag, ImageTk can automatically hook into a standard Tkinter build. You no longer need to build your own Tkinter to use the ImageTk module.

    The old way still works, though. For more information, see Tk/install.txt.

-   Some tweaks to ImageTk to support multiple Tk interpreters (from Greg Couch).

-   ImageFont \"load\_path\" now scans directory mentioned in .pth files (from Richard Jones).

1.0c1
-----

-   The TIFF plugin has been rewritten. The new plugin fully supports all major PIL image modes (including F and I).
-   The ImageFile module now includes a Parser class, which can be used to incrementally decode an image file (while downloading it from the net, for example). See the handbook for details.
-   \"show\" now converts non-standard modes to \"L\" or \"RGB\" (as appropriate), rather than writing weird things to disk for \"xv\" to choke upon. (bug reported by Les Schaffer).

1.0b2
-----

-   Major speedups for rotate, transform(EXTENT), and transform(AFFINE) when using nearest neighbour resampling.

-   Modified ImageDraw to be compatible with the Arrow graphics interface. See the handbook for details.

-   PIL now automatically loads file codecs when used as a package (from The Dragon De Monsyne). Also included an \_\_init\_\_.py file in the standard distribution.

-   The GIF encoder has been modified to produce much smaller files.

    PIL now uses a run-length encoding method to encode GIF files. On a random selection of GIF images grabbed from the web, this version makes the images about twice as large as the original LZW files, where the earlier version made them over 5 times larger. YMMV, of course.

-   Added PCX write support (works with \"1\", \"P\", \"L\", and \"RGB\")

-   Added \"bitmap\" and \"textsize\" methods to ImageDraw.

-   Improved font rendering code. Fixed a bug or two, and moved most of the time critical stuff to C.

-   Removed \"bdf2pil.py\". Use \"pilfont.py\" instead!

-   Improved 16-bit support (still experimental, though).

    The following methods now support \"I;16\" and \"I;16B\" images: \"getpixel\", \"copy\", \"convert\" (to and from mode \"I\"), \"resize\", \"rotate\", and \"transform\" with nearest neighbour filters, and \"save\" using the IM format. The \"new\" and \"open\" functions also work as expected. On Windows, 16-bit files are memory mapped.

    NOTE: ALL other operations are still UNDEFINED on 16-bit images.

-   The \"paste\" method now supports constant sources.

    Just pass a colour value (a number or a tuple, depending on the target image mode) instead of the source image.

    This was in fact implemented in an inefficient way in earlier versions (the \"paste\" method generated a temporary source image if you passed it a colour instead of an image). In this version, this is handled on the C level instead.

-   Added experimental \"RGBa\" mode support.

    An \"RGBa\" image is an RGBA image where the colour components have have been premultiplied with the alpha value. PIL allows you to convert an RGBA image to an RGBa image, and to paste RGBa images on top of RGB images. Since this saves a bunch of multiplications and shifts, it is typically about twice as fast an ordinary RGBA paste.

-   Eliminated extra conversion step when pasting \"RGBA\" or \"RGBa\" images on top of \"RGB\" images.

-   Fixed Image.BICUBIC resampling for \"RGB\" images.

-   Fixed PCX image file handler to properly read 8-bit PCX files (bug introduced in 1.0b1, reported by Bernhard Herzog)

-   Fixed PSDraw \"image\" method to restore the coordinate system.

-   Fixed \"blend\" problem when applied to images that was not already loaded (reported by Edward C. Jones)

-   Fixed -f option to \"pilconvert.py\" (from Anthony Baxter)

1.0b1
-----

-   Added Toby J. Sargeant\'s quantization package. To enable quantization, use the \"palette\" option to \"convert\":

        imOut = im.convert("P", palette=Image.ADAPTIVE)

    This can be used with \"L\", \"P\", and \"RGB\" images. In this version, dithering cannot be used with adaptive palettes.

    Note: ADAPTIVE currently maps to median cut quantization with 256 colours. The quantization package also contains a maximum coverage quantizer, which will be supported by future versions of PIL.

-   Added Eric S. Raymond\'s \"pildriver\" image calculator to the distribution. See the docstring for more information.

-   The \"offset\" method no longer dumps core if given positive offsets (from Charles Waldman).

-   Fixed a resource leak that could cause ImageWin to run out of GDI resources (from Roger Burnham).

-   Added \"arc\", \"chord\", and \"pieslice\" methods to ImageDraw (inspired by code contributed by Richard Jones).

-   Added experimental 16-bit support, via modes \"I;16\" (little endian data) and \"I;16B\" (big endian). Only a few methods properly support such images (see above).

-   Added XV thumbnail file handler (from Gene Cash).

-   Fixed BMP image file handler to handle palette images with small palettes (from Rob Hooft).

-   Fixed Sun raster file handler for palette images (from Charles Waldman).

-   Improved various internal error messages.

-   Fixed Path constructor to handle arbitrary sequence objects. This also affects the ImageDraw class (from Richard Jones).

-   Fixed a bug in JpegDecode that caused PIL to report \"decoder error -2\" for some progressive JPEG files (reported by Magnus Källström, who also provided samples).

-   Fixed a bug in JpegImagePlugin that caused PIL to hang when loading JPEG files using 16-bit quantization tables.

-   The Image \"transform\" method now supports Image.QUAD transforms. The data argument is an 8-tuple giving the upper left, lower left, lower right, and upper right corner of the source quadrilateral. Also added Image.MESH transform which takes a list of quadrilaterals.

-   The Image \"resize\", \"rotate\", and \"transform\" methods now support Image.BILINEAR (2x2) and Image.BICUBIC (4x4) resampling filters. Filters can be used with all transform methods.

-   The ImageDraw \"rectangle\" method now includes both the right and the bottom edges when drawing filled rectangles.

-   The TGA decoder now works properly for runlength encoded images which have more than one byte per pixel.

-   \"getbands\" on an YCbCr image now returns (\"Y\", \"Cb\", \"Cr\")

-   Some file drivers didn\'t handle the optional \"modify\" argument to the load method. This resulted in exceptions when you used \"paste\" (and other methods that modify an image in place) on a newly opened file.

0.3b2
-----

The test suite includes 825 individual tests.

-   An Image \"getbands\" method has been added. It returns a tuple containing the individual band names for this image. To figure out how many bands an image has, use \"len(im.getbands())\".

-   An Image \"putpixel\" method has been added.

-   The Image \"point\" method can now be used to convert \"L\" images to any other format, via a lookup table. That table should contain 256 values for each band in the output image.

-   Some file drivers (including FLI/FLC, GIF, and IM) accidentally overwrote the offset method with an internal attribute. All drivers have been updated to use private attributes where possible.

-   The Image \"histogram\" method now works for \"I\" and \"F\" images. For these modes, PIL divides the range between the min and max values used in the image into 256 bins. You can also pass in your own min and max values via the \"extrema\" option:

        h = im.histogram(extrema=(0, 255))

-   An Image \"getextrema\" method has been added. It returns the min and max values used in the image. In this release, this works for single band images only.

-   Changed the PNG driver to load and save mode \"I\" images as 16-bit images. When saving, values outside the range 0..65535 are clipped.

-   Fixed ImageFont.py to work with the new \"pilfont\" compiler.

-   Added JPEG \"save\" and \"draft\" support for mode \"YCbCr\" images. Note that if you save an \"YCbCr\" image as a JPEG file and read it back, it is read as an RGB file. To get around this, you can use the \"draft\" method:

        im = Image.open("color.jpg")
        im.draft("YCbCr", im.size)

-   Read \"RGBA\" TGA images. Also fixed the orientation bug; all images should now come out the right way.

-   Changed mode name (and internal representation) from \"YCrCb\" to \"YCbCr\" (!) **WARNING: MAY BREAK EXISTING CODE**

0.3b1
-----

The test suite includes 750 individual tests.

-   The \"pilfont\" package is now included in the standard PIL distribution. The pilfont utility can be used to convert X BDF and PCF raster font files to a format understood by the ImageFont module.

-   GIF files are now interlaced by default. To write a non-interlaced file, pass interlace=0 to the \"save\" method.

-   The default string format has changed for the \"fromstring\" and \"tostring\" methods. **WARNING: MAY BREAK EXISTING CODE**

    NOTE: If no extra arguments are given, the first line in the string buffer is the top line of the image, instead of the bottom line. For RGB images, the string now contains 3 bytes per pixel instead of 4. These changes were made to make the methods compatible with the \"fromstring\" factory function.

    To get the old behaviour, use the following syntax:

        data = im.tostring("raw", "RGBX", 0, -1)
        im.fromstring(data, "raw", "RGBX", 0, -1)

-   \"new\" no longer gives a MemoryError if the width or height is zero (this only happened on platforms where malloc(0) or calloc(0) returns NULL).

-   \"new\" now adds a default palette object to \"P\" images.

-   You can now convert directly between all modes supported by PIL. When converting colour images to \"P\", PIL defaults to a \"web\" palette and dithering. When converting grayscale images to \"1\", PIL uses a thresholding and dithering.

-   Added a \"dither\" option to \"convert\". By default, \"convert\" uses floyd-steinberg error diffusion for \"P\" and \"1\" targets, so this option is only used to *disable* dithering. Allowed values are NONE (no dithering) or FLOYDSTEINBERG (default). :

        imOut = im.convert("P", dither=Image.NONE)

-   Added a full set of \"I\" decoders. You can use \"fromstring\" (and file decoders) to read any standard integer type as an \"I\" image.

-   Added some support for \"YCbCr\" images (creation, conversion from/to \"L\" and \"RGB\", IM YCC load/save)

-   \"getpixel\" now works properly with fractional coordinates.

-   ImageDraw \"setink\" now works with \"I\", \"F\", \"RGB\", \"RGBA\", \"RGBX\", \"CMYK\", and \"YCbCr\" images.

-   ImImagePlugin no longer attaches palettes to \"RGB\" images.

-   Various minor fixes.

0.3a4
-----

-   Added experimental IPTC/NAA support.
-   Eliminated AttributeError exceptions after \"crop\" (from Skip Montanaro)
-   Reads some uncompressed formats via memory mapping (this is currently supported on Win32 only)
-   Fixed some last minute glitches in the last alpha release (Types instead of types in Image.py, version numbers, etc.)
-   Eliminated some more bogus compiler warnings.
-   Various fixes to make PIL compile and run smoother on Macs (from Jack Jansen).
-   Fixed \"fromstring\" and \"tostring\" for mode \"I\" images.

0.3a3
-----

The test suite includes 530 individual tests.

-   Eliminated unexpected side-effect in \"paste\" with matte. \"paste\" now works properly also if compiled with \"gcc\".
-   Adapted to Python 1.5 (build issues only)
-   Fixed the ImageDraw \"point\" method to draw also the last point (!).
-   Added \"I\" and \"RGBX\" support to Image.new.
-   The plugin path is now properly prepended to the module search path when a plugin module is imported.
-   Added \"draw\" method to the ImageWin.Dib class. This is used by Topaz to print images on Windows printers.
-   \"convert\" now supports conversions from \"P\" to \"1\" and \"F\".
-   \"paste\" can now take a colour instead of an image as the first argument. The colour must match the colour argument given to the new function, and match the mode of the target image.
-   Fixed \"paste\" to allow a mask also for mode \"F\" images.
-   The BMP driver now saves mode \"1\" images. When loading images, the mode is set to \"L\" for 8-bit files with grayscale palettes, and to \"P\" for other 8-bit files.
-   The IM driver now reads and saves \"1\" images (file modes \"0 1\" or \"L 1\").
-   The JPEG and GIF drivers now saves \"1\" images. For JPEG, the image is saved as 8-bit grayscale (it will load as mode \"L\"). For GIF, the image will be loaded as a \"P\" image.
-   Fixed a potential buffer overrun in the GIF encoder.

0.3a2
-----

The test suite includes 400 individual tests.

-   Improvements to the test suite revealed a number of minor bugs, which are all fixed. Note that crop/paste, 32-bit ImageDraw, and ImageFont are still weak spots in this release.
-   Added \"putpalette\" method to the Image class. You can use this to add or modify the palette for \"P\" and \"L\" images. If a palette is added to an \"L\" image, it is automatically converted to a \"P\" image.
-   Fixed ImageDraw to properly handle 32-bit image memories (\"RGB\", \"RGBA\", \"CMYK\", \"F\")
-   Fixed \"fromstring\" and \"tostring\" not to mess up the mode attribute in default mode.
-   Changed ImPlatform.h to work on CRAY\'s (don\'t have one at home, so I haven\'t tried it). The previous version assumed that either \"short\" or \"int\" were 16-bit wide. PIL still won\'t compile on platforms where neither \"short\", \"int\" nor \"long\" are 32-bit wide.
-   Added file= and data= keyword arguments to PhotoImage and BitmapImage. This allows you to use them as drop-in replacements for the corresponding Tkinter classes.
-   Removed bogus references to the crack coder (ImagingCrack).

0.3a1
-----

-   Make sure image is loaded in \"tostring\".
-   Added floating point packer (native 32-bit floats only).

0.1b1 to 0.2 (b5)
-----------------

-   Modified \"fromstring\" and \"tostring\" methods to use file codecs. Also added \"fromstring\" factory method to create an image directly from data in a string.
-   Added support for 32-bit floating point images (mode \"F\"). You can convert between \"L\" and \"F\" images, and apply a subset of the available image processing methods on the \"F\" image. You can also read virtually any data format into a floating point image memory; see the section on \"Decoding Floating Point Data\" in the handbook for more information.

0.2b5 released; on windows only
-------------------------------

-   Fixed the tobitmap() method to work properly for small bitmaps.

-   Added RMS and standard deviation to the ImageStat.Stat class. Also modified the constructor to take an optional feature mask, and also to accept either an image or a list containing the histogram data.

-   The BitmapImage code in ImageTk can now use a special bitmap decoder, which has to be patched into Tk. See the \"Tk/pilbitmap.txt\" file for details. If not installed, bitmaps are transferred to Tk as XBM strings.

-   The PhotoImage code in ImageTk now uses a Tcl command (\"PyImagingPaste\") instead of a special image type. This gives somewhat better performance, and also allows PIL to support transparency. **WARNING: TKAPPINIT MUST BE MODIFIED**

-   ImageTk now honours the alpha layer in RGBA images. Only fully transparent pixels are made transparent (that is, the alpha layer is treated as a mask). To treat the alpha laters as a matte, you must paste the image on the background before handing it over to ImageTk.

-   Added McIdas reader (supports 8-bit images only).

-   PIL now preloads drivers for BMP, GIF, JPEG, PPM, and TIFF. As long as you only load and save these formats, you don\'t have to wait for a full scan for drivers. To force scanning, call the Image.init() function.

-   The \"seek\" and \"tell\" methods are now always available, also for single-frame images.

-   Added optional mask argument to histogram method. The mask may be an \"1\" or \"L\" image with the same size as the original image. Only pixels where the mask is non-zero are included in the histogram.

-   The \"paste\" method now allows you to specify only the lower left corner (a 2-tuple), instead of the full region (a 4-tuple).

-   Reverted to old plugin scanning model; now scans all directory names in the path when looking for plugins.

-   Added PIXAR raster support. Only uncompressed (\"dumped\") RGB images can currently be read (based on information provided by Greg Coats).

-   Added FlashPix (FPX) read support. Reads all pixel formats, but only the highest resolution is read, and the viewing transform is currently ignored.

-   Made PNG encoding somewhat more efficient in \"optimize\" mode; a bug in 0.2b4 didn\'t enable all predictor filters when optimized storage were requested.

-   Added Microsoft Image Composer (MIC) read support. When opened, the first sprite in the file is loaded. You can use the seek method to load additional sprites from the file.

-   Properly reads \"P\" and \"CMYK\" PSD images.

-   \"pilconvert\" no longer optimizes by default; use the -o option to make the file as small as possible (at the expense of speed); use the -q option to set the quality when compressing to JPEG.

-   Fixed \"crop\" not to drop the palette for \"P\" images.

-   Added and verified FLC support.

-   Paste with \"L\" or \"RGBA\" alpha is now several times faster on most platforms.

-   Changed Image.new() to initialize the image to black, as described in the handbook. To get an uninitialized image, use None as the colour.

-   Fixed the PDF encoder to produce a valid header; Acrobat no longer complains when you load PDF images created by PIL.

-   PIL only scans fully-qualified directory names in the path when looking for plugins. **WARNING: MAY BREAK EXISTING CODE**

-   Faster implementation of \"save\" used when filename is given, or when file object has \"fileno\" and \"flush\" methods.

-   Don\'t crash in \"crop\" if region extends outside the source image.

-   Eliminated a massive memory leak in the \"save\" function.

-   The GIF decoder doesn\'t crash if the code size is set to an illegal value. This could happen since another bug didn\'t handle local palettes properly if they didn\'t have the same size as the global palette (not very common).

-   Added predictor support (TIFF 6.0 section 14) to the TIFF decoder.

-   Fixed palette and padding problems in BMP driver. Now properly writes \"1\", \"L\", \"P\" and \"RGB\" images.

-   Fixed getpixel()/getdata() to return correct pixel values.

-   Added PSD (PhotoShop) read support. Reads both uncompressed and compressed images of most types.

-   Added GIF write support (writes \"uncompressed\" GIF files only, due to unresolvable licensing issues). The \"gifmaker.py\" script can be used to create GIF animations.

-   Reads 8-bit \"L\" and \"P\" TGA images. Also reads 16-bit \"RGB\" images.

-   Added FLI read support. This driver has only been tested on a few FLI samples.

-   Reads 2-bit and 4-bit PCX images.

-   Added MSP read and write support. Both version 1 and 2 can be read, but only version 1 (uncompressed) files are written.

-   Fixed a bug in the FLI/FLC identification code that caused the driver to raise an exception when parsing valid FLI/FLC files.

-   Improved performance when loading file format plugins, and when opening files.

-   Added GIF animation support, via the \"seek\" and \"tell\" methods. You can use \"player.py\" to play an animated GIF file.

-   Removed MNG support, since the spec is changing faster than I can change the code. I\'ve added support for the experimental ARG format instead. Contact me for more information on this format.

-   Added keyword options to the \"save\" method. The following options are currently supported:

      ------------------------------------------------------------------------------------------------------------
      Format            Option            Description
      ----------------- ----------------- ------------------------------------------------------------------------
      JPEG              optimize          Minimize output file at the expense of compression speed.

      JPEG              progressive       Enable progressive output. The option value is ignored.

      JPEG              quality           Set compression quality (1-100). The default value is 75.

      JPEG              smooth            Smooth dithered images. Value is strength (1-100). Default is off (0).

      PNG               optimize          Minimize output file at the expense of compression speed.
      ------------------------------------------------------------------------------------------------------------

    Expect more options in future releases. Also note that file writers silently ignore unknown options.

-   Plugged memory leaks in the PNG and TIFF decoders.

-   Added PNG write support.

-   (internal) RGB unpackers and converters now set the pad byte to 255 (full opacity).

-   Properly handles the \"transparency\" property for GIF, PNG and XPM files.

-   Added a \"putalpha\" method, allowing you to attach a \"1\" or \"L\" image as the alpha layer to an \"RGBA\" image.

-   Various improvements to the sample scripts:

    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | pilconvert      | Carries out some extra tricks in order to make the resulting file as small as possible.                                                                                                                                  |
    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | explode         | (NEW) Split an image sequence into individual frames.                                                                                                                                                                    |
    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | gifmaker        | (NEW) Convert a sequence file into a GIF animation. Note that the GIF encoder create \"uncompressed\" GIF files, so animations created by this script are rather large (typically 2-5 times the compressed sizes).       |
    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | image2py        | (NEW) Convert a single image to a python module. See comments in this script for details.                                                                                                                                |
    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | player          | If multiple images are given on the command line, they are interpreted as frames in a sequence. The script assumes that they all have the same size. Also note that this script now can play FLI/FLC and GIF animations. |
    |                 |                                                                                                                                                                                                                          |
    |                 | This player can also execute embedded Python animation applets (ARG format only).                                                                                                                                        |
    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
    | viewer          | Transparent images (\"P\" with transparency property, and \"RGBA\") are superimposed on the standard Tk background.                                                                                                      |
    +-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

-   Fixed colour argument to \"new\". For multilayer images, pass a tuple: (Red, Green, Blue), (Red, Green, Blue, Alpha), or (Cyan, Magenta, Yellow, Black).

-   Added XPM (X pixmap) read support.

0.2b3
-----

-   Added MNG (multi-image network graphics) read support. \"Ming\" is a proposed animation standard, based on the PNG file format.

    You can use the \"player\" sample script to display some flavours of this format. The MNG standard is still under development, as is this driver. More information, including sample files, can be found at \<<ftp://swrinde.nde.swri.edu/pub/mng>\>

-   Added a \"verify\" method to images loaded from file. This method scans the file for errors, without actually decoding the image data, and raises a suitable exception if it finds any problems. Currently implemented for PNG and MNG files only.

-   Added support for interlaced GIF images.

-   Added PNG read support \-- if linked with the ZLIB compression library, PIL reads all kinds of PNG images, except interlaced files.

-   Improved PNG identification support \-- doesn\'t mess up on unknown chunks, identifies all possible PNG modes, and verifies checksum on PNG header chunks.

-   Added an experimental reader for placable Windows Meta Files (WMF). This reader is still very incomplete, but it illustrates how PIL\'s drawing capabilities can be used to render vector and metafile formats.

-   Added restricted drivers for images from Image Tools (grayscale only) and LabEye/IFUNC (common interchange modes only).

-   Some minor improvements to the sample scripts provided in the \"Scripts\" directory.

-   The test images have been moved to the \"Images\" directory.

0.2b2 released. 0.2b1 released for Windows only
-----------------------------------------------

-   Fixed filling of complex polygons. The ImageDraw \"line\" and \"polygon\" methods also accept Path objects.
-   The ImageTk \"PhotoImage\" object can now be constructed directly from an image. You can also pass the object itself to Tkinter, instead of using the \"image\" attribute. Finally, using \"paste\" on a displayed image automatically updates the display.
-   The ImageTk \"BitmapImage\" object allows you to create transparent overlays from 1-bit images. You can pass the object itself to Tkinter. The constructor takes the same arguments as the Tkinter BitmapImage class; use the \"foreground\" option to set the colour of the overlay.
-   Added a \"putdata\" method to the Image class. This can be used to load a 1-layer image with data from a sequence object or a string. An optional floating point scale and offset can be used to adjust the data to fit into the 8-bit pixel range. Also see the \"getdata\" method.
-   Added the EXTENT method to the Image \"transform\" method. This can be used to quickly crop, stretch, shrink, or mirror a subregion from another image.
-   Adapted to Python 1.4.
-   Added a project makefile for Visual C++ 4.x. This allows you to easily build a dynamically linked version of PIL for Windows 95 and NT.
-   A Tk \"booster\" patch for Windows is available. It gives dramatic performance improvements for some displays. Has been tested with Tk 4.2 only, but is likely to work with Tk 4.1 as well. See the Tk subdirectory for details.
-   You can now save 1-bit images in the XBM format. In addition, the Image class now provides a \"tobitmap\" method which returns a string containing an XBM representation of the image. Quite handy to use with Tk.
-   More conversions, including \"RGB\" to \"1\" and more.

0.2a1
-----

-   Where earlier versions accepted lists, this version accepts arbitrary Python sequences (including strings, in some cases). A few resource leaks were plugged in the process.
-   The Image \"paste\" method now allows the box to extend outside the target image. The size of the box, the image to be pasted, and the optional mask must still match.
-   The ImageDraw module now supports filled polygons, outlined and filled ellipses, and text. Font support is rudimentary, though.
-   The Image \"point\" method now takes an optional mode argument, allowing you to convert the image while translating it. Currently, this can only be used to convert \"L\" or \"P\" images to \"1\" images (creating thresholded images or \"matte\" masks).
-   An Image \"getpixel\" method has been added. For single band images, it returns the pixel value at a given position as an integer. For n-band images, it returns an n-tuple of integers.
-   An Image \"getdata\" method has been added. It returns a sequence object representing the image as a 1-dimensional array. Only len() and \[\] can be used with this sequence. This method returns a reference to the existing image data, so changes in the image will be immediately reflected in the sequence object.
-   Fixed alignment problems in the Windows BMP writer.
-   If converting an \"RGB\" image to \"RGB\" or \"L\", you can give a second argument containing a colour conversion matrix.
-   An Image \"getbbox\" method has been added. It returns the bounding box of data in an image, considering the value 0 as background.
-   An Image \"offset\" method has been added. It returns a new image where the contents of the image have been offset the given distance in X and/or Y direction. Data wraps between edges.
-   Saves PDF images. The driver creates a binary PDF 1.1 files, using JPEG compression for \"L\", \"RGB\", and \"CMYK\" images, and hex encoding (same as for PostScript) for other formats.
-   The \"paste\" method now accepts \"1\" masks. Zero means transparent, any other pixel value means opaque. This is faster than using an \"L\" transparency mask.
-   Properly writes EPS files (and properly prints images to PostScript printers as well).
-   Reads 4-bit BMP files, as well as 4 and 8-bit Windows ICO and CUR files. Cursor animations are not supported.
-   Fixed alignment problems in the Sun raster loader.
-   Added \"draft\" and \"thumbnail\" methods. The draft method is used to optimize loading of JPEG and PCD files, the thumbnail method is used to create a thumbnail representation of an image.
-   Added Windows display support, via the ImageWin class (see the handbook for details).
-   Added raster conversion for EPS files. This requires GNU or Aladdin Ghostscript, and probably works on UNIX only.
-   Reads PhotoCD (PCD) images. The base resolution (768x512) can be read from a PhotoCD file.
-   Eliminated some compiler warnings. Bindings now compile cleanly in C++ mode. Note that the Imaging library itself must be compiled in C mode.
-   Added \"bdf2pil.py\", which converts BDF fonts into images with associated metrics. This is definitely work in progress. For info, see description in script for details.
-   Fixed a bug in the \"ImageEnhance.py\" module.
-   Fixed a bug in the netpbm save hack in \"GifImagePlugin.py\"
-   Fixed 90 and 270 degree rotation of rectangular images.
-   Properly reads 8-bit TIFF palette-color images.
-   Reads plane separated RGB and CMYK TIFF images.
-   Added driver debug mode. This is enabled by setting Image.DEBUG to a non-zero value. Try the -D option to \"pilfile.py\" and see what happens.
-   Don\'t crash on \"atend\" constructs in PostScript files.
-   Only the Image module imports \_imaging directly. Other modules should refer to the binding module as \"Image.core\".

0.0 to 0.1 (b1)
---------------

-   A handbook is available (distributed separately).
-   The coordinate system is changed so that (0,0) is now located in the upper left corner. This is in compliance with ISO 12087 and 90% of all other image processing and graphics libraries.
-   Modes \"1\" (bilevel) and \"P\" (palette) have been introduced. Note that bilevel images are stored with one byte per pixel.
-   The Image \"crop\" and \"paste\" methods now accepts None as the box argument, to refer to the full image (self, that is).
-   The Image \"crop\" method now works properly.
-   The Image \"point\" method is now available. You can use either a lookup table or a function taking one argument.
-   The Image join function has been renamed to \"merge\".
-   An Image \"composite\" function has been added. It is identical to copy() followed by paste(mask).
-   An Image \"eval\" function has been added. It is currently identical to point(function); that is, only a single image can be processed.
-   A set of channel operations has been added. See the \"ImageChops\" module, test\_chops.py, and the handbook for details.
-   Added the \"pilconvert\" utility, which converts image files. Note that the number of output formats are still quite restricted.
-   Added the \"pilfile\" utility, which quickly identifies image files (without loading them, in most cases).
-   Added the \"pilprint\" utility, which prints image files to PostScript printers.
-   Added a rudimentary version of the \"pilview\" utility, which is simple image viewer based on Tk. Only File/Exit and Image/Next works properly.
-   An interface to Tk has been added. See \"Lib/ImageTk.py\" and README for details.
-   An interface to Jack Jansen\'s Img library has been added (thanks to Jack). This allows you to read images through the Img extensions file format handlers. See the file \"Lib/ImgExtImagePlugin.py\" for details.
-   PostScript printing is provided through the PSDraw module. See the handbook for details.


---

README.md

---

<p align="center">
    <img width="248" height="250" src="https://raw.githubusercontent.com/python-pillow/pillow-logo/main/pillow-logo-248x250.png" alt="Pillow logo">
</p>

# Pillow

## Python Imaging Library (Fork)

Pillow is the friendly PIL fork by [Jeffrey A. Clark and
contributors](https://github.com/python-pillow/Pillow/graphs/contributors).
PIL is the Python Imaging Library by Fredrik Lundh and contributors.
As of 2019, Pillow development is
[supported by Tidelift](https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pypi-pillow&utm_medium=readme&utm_campaign=enterprise).

<table>
    <tr>
        <th>docs</th>
        <td>
            <a href="https://pillow.readthedocs.io/?badge=latest"><img
                alt="Documentation Status"
                src="https://readthedocs.org/projects/pillow/badge/?version=latest"></a>
        </td>
    </tr>
    <tr>
        <th>tests</th>
        <td>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/lint.yml"><img
                alt="GitHub Actions build status (Lint)"
                src="https://github.com/python-pillow/Pillow/workflows/Lint/badge.svg"></a>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/test.yml"><img
                alt="GitHub Actions build status (Test Linux and macOS)"
                src="https://github.com/python-pillow/Pillow/workflows/Test/badge.svg"></a>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/test-windows.yml"><img
                alt="GitHub Actions build status (Test Windows)"
                src="https://github.com/python-pillow/Pillow/workflows/Test%20Windows/badge.svg"></a>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/test-mingw.yml"><img
                alt="GitHub Actions build status (Test MinGW)"
                src="https://github.com/python-pillow/Pillow/workflows/Test%20MinGW/badge.svg"></a>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/test-cygwin.yml"><img
                alt="GitHub Actions build status (Test Cygwin)"
                src="https://github.com/python-pillow/Pillow/workflows/Test%20Cygwin/badge.svg"></a>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/test-docker.yml"><img
                alt="GitHub Actions build status (Test Docker)"
                src="https://github.com/python-pillow/Pillow/workflows/Test%20Docker/badge.svg"></a>
            <a href="https://ci.appveyor.com/project/python-pillow/Pillow"><img
                alt="AppVeyor CI build status (Windows)"
                src="https://img.shields.io/appveyor/build/python-pillow/Pillow/main.svg?label=Windows%20build"></a>
            <a href="https://github.com/python-pillow/Pillow/actions/workflows/wheels.yml"><img
                alt="GitHub Actions build status (Wheels)"
                src="https://github.com/python-pillow/Pillow/workflows/Wheels/badge.svg"></a>
            <a href="https://app.codecov.io/gh/python-pillow/Pillow"><img
                alt="Code coverage"
                src="https://codecov.io/gh/python-pillow/Pillow/branch/main/graph/badge.svg"></a>
            <a href="https://issues.oss-fuzz.com/issues?q=title:pillow"><img
                alt="Fuzzing Status"
                src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/pillow.svg"></a>
        </td>
    </tr>
    <tr>
        <th>package</th>
        <td>
            <a href="https://zenodo.org/badge/latestdoi/17549/python-pillow/Pillow"><img
                alt="Zenodo"
                src="https://zenodo.org/badge/17549/python-pillow/Pillow.svg"></a>
            <a href="https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pypi-pillow&utm_medium=badge"><img
                alt="Tidelift"
                src="https://tidelift.com/badges/package/pypi/pillow?style=flat"></a>
            <a href="https://pypi.org/project/pillow/"><img
                alt="Newest PyPI version"
                src="https://img.shields.io/pypi/v/pillow.svg"></a>
            <a href="https://pypi.org/project/pillow/"><img
                alt="Number of PyPI downloads"
                src="https://img.shields.io/pypi/dm/pillow.svg"></a>
            <a href="https://www.bestpractices.dev/projects/6331"><img
                alt="OpenSSF Best Practices"
                src="https://www.bestpractices.dev/projects/6331/badge"></a>
        </td>
    </tr>
    <tr>
        <th>social</th>
        <td>
            <a href="https://gitter.im/python-pillow/Pillow?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"><img
                alt="Join the chat at https://gitter.im/python-pillow/Pillow"
                src="https://badges.gitter.im/python-pillow/Pillow.svg"></a>
            <a href="https://fosstodon.org/@pillow"><img
                alt="Follow on https://fosstodon.org/@pillow"
                src="https://img.shields.io/badge/publish-on%20Mastodon-595aff.svg"
                rel="me"></a>
        </td>
    </tr>
</table>

## Overview

The Python Imaging Library adds image processing capabilities to your Python interpreter.

This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.

The core image library is designed for fast access to data stored in a few basic pixel formats. It should provide a solid foundation for a general image processing tool.

## More Information

- [Documentation](https://pillow.readthedocs.io/)
  - [Installation](https://pillow.readthedocs.io/en/latest/installation/basic-installation.html)
  - [Handbook](https://pillow.readthedocs.io/en/latest/handbook/index.html)
- [Contribute](https://github.com/python-pillow/Pillow/blob/main/.github/CONTRIBUTING.md)
  - [Issues](https://github.com/python-pillow/Pillow/issues)
  - [Pull requests](https://github.com/python-pillow/Pillow/pulls)
- [Release notes](https://pillow.readthedocs.io/en/stable/releasenotes/index.html)
- [Changelog](https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst)
  - [Pre-fork](https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst#pre-fork)

## Report a Vulnerability

To report a security vulnerability, please follow the procedure described in the [Tidelift security policy](https://tidelift.com/docs/security).


---

RELEASING.md

---

# Release Checklist

See https://pillow.readthedocs.io/en/stable/releasenotes/versioning.html for
information about how the version numbers line up with releases.

## Main Release

Released quarterly on January 2nd, April 1st, July 1st and October 15th.

* [ ] Open a release ticket e.g. https://github.com/python-pillow/Pillow/issues/3154
* [ ] Develop and prepare release in `main` branch.
* [ ] Check [GitHub Actions](https://github.com/python-pillow/Pillow/actions) and [AppVeyor](https://ci.appveyor.com/project/python-pillow/Pillow) to confirm passing tests in `main` branch.
* [ ] Check that all the wheel builds pass the tests in the [GitHub Actions "Wheels" workflow](https://github.com/python-pillow/Pillow/actions/workflows/wheels.yml) jobs by manually triggering them.
* [ ] In compliance with [PEP 440](https://peps.python.org/pep-0440/), update version identifier in `src/PIL/_version.py`
* [ ] Update `CHANGES.rst`.
* [ ] Run pre-release check via `make release-test` in a freshly cloned repo.
* [ ] Create branch and tag for release e.g.:
  ```bash
  git branch 5.2.x
  git tag 5.2.0
  git push --tags
  ```
* [ ] Check the [GitHub Actions "Wheels" workflow](https://github.com/python-pillow/Pillow/actions/workflows/wheels.yml)
  has passed, including the "Upload release to PyPI" job. This will have been triggered
  by the new tag.
* [ ] Publish the [release on GitHub](https://github.com/python-pillow/Pillow/releases).
* [ ] In compliance with [PEP 440](https://peps.python.org/pep-0440/),
      increment and append `.dev0` to version identifier in `src/PIL/_version.py` and then:
  ```bash
  git push --all
   ```
## Point Release

Released as needed for security, installation or critical bug fixes.

* [ ] Make necessary changes in `main` branch.
* [ ] Update `CHANGES.rst`.
* [ ] Check out release branch e.g.:
  ```bash
  git checkout -t remotes/origin/5.2.x
  ```
* [ ] Cherry pick individual commits from `main` branch to release branch e.g. `5.2.x`, then `git push`.
* [ ] Check [GitHub Actions](https://github.com/python-pillow/Pillow/actions) and [AppVeyor](https://ci.appveyor.com/project/python-pillow/Pillow) to confirm passing tests in release branch e.g. `5.2.x`.
* [ ] In compliance with [PEP 440](https://peps.python.org/pep-0440/), update version identifier in `src/PIL/_version.py`
* [ ] Run pre-release check via `make release-test`.
* [ ] Create tag for release e.g.:
  ```bash
  git tag 5.2.1
  git push --tags
  ```
* [ ] Create and check source distribution:
  ```bash
  make sdist
  ```
* [ ] Check the [GitHub Actions "Wheels" workflow](https://github.com/python-pillow/Pillow/actions/workflows/wheels.yml)
  has passed, including the "Upload release to PyPI" job. This will have been triggered
  by the new tag.
* [ ] Publish the [release on GitHub](https://github.com/python-pillow/Pillow/releases) and then:
  ```bash
  git push
  ```

## Embargoed Release

Released as needed privately to individual vendors for critical security-related bug fixes.

* [ ] Prepare patch for all versions that will get a fix. Test against local installations.
* [ ] Commit against `main`, cherry pick to affected release branches.
* [ ] Run local test matrix on each release & Python version.
* [ ] Privately send to distros.
* [ ] Run pre-release check via `make release-test`
* [ ] Amend any commits with the CVE #
* [ ] On release date, tag and push to GitHub.
  ```bash
  git checkout 2.5.x
  git tag 2.5.3
  git push origin --tags
  ```
* [ ] Check the [GitHub Actions "Wheels" workflow](https://github.com/python-pillow/Pillow/actions/workflows/wheels.yml)
  has passed, including the "Upload release to PyPI" job. This will have been triggered
  by the new tag.
* [ ] Publish the [release on GitHub](https://github.com/python-pillow/Pillow/releases) and then:
  ```bash
  git push origin 2.5.x
  ```

## Publicize Release

* [ ] Announce release availability via [Mastodon](https://fosstodon.org/@pillow) e.g. https://fosstodon.org/@pillow/110639450470725321

## Documentation

* [ ] Make sure the [default version for Read the Docs](https://pillow.readthedocs.io/en/stable/) is up-to-date with the release changes

## Docker Images

* [ ] Update Pillow in the Docker Images repository
  ```bash
  git clone https://github.com/python-pillow/docker-images
  cd docker-images
  ./update-pillow-tag.sh [[release tag]]
  ```
