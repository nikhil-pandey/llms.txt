CHANGES.rst

---

CHANGES
=======

2.0.4 (2023-07-27)
------------------

-   Fixed an error when there are pending tasks while calling `.cache_clear()`.

2.0.3 (2023-07-07)
------------------

-   Fixed a `KeyError` that could occur when using `ttl` with `maxsize`.
-   Dropped `typing-extensions` dependency in Python 3.11+.


---

README.rst

---

async-lru
=========

info

:   Simple lru cache for asyncio

[![GitHub Actions CI/CD workflows status](https://github.com/aio-libs/async-lru/actions/workflows/ci-cd.yml/badge.svg?event=push)](https://github.com/aio-libs/async-lru/actions/workflows/ci-cd.yml?query=event:push)

[![async-lru @ PyPI](https://img.shields.io/pypi/v/async-lru.svg?logo=Python&logoColor=white)](https://pypi.org/project/async-lru)

[![image](https://codecov.io/gh/aio-libs/async-lru/branch/master/graph/badge.svg)](https://codecov.io/gh/aio-libs/async-lru)

[![Matrix Room --- \#aio-libs:matrix.org](https://img.shields.io/matrix/aio-libs:matrix.org?label=Discuss%20on%20Matrix%20at%20%23aio-libs%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat)](https://matrix.to/#/%23aio-libs:matrix.org)

[![Matrix Space --- \#aio-libs-space:matrix.org](https://img.shields.io/matrix/aio-libs-space:matrix.org?label=Discuss%20on%20Matrix%20at%20%23aio-libs-space%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat)](https://matrix.to/#/%23aio-libs-space:matrix.org)

Installation
------------

``` {.shell}
pip install async-lru
```

Usage
-----

This package is a port of Python\'s built-in [functools.lru\_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache) function for [asyncio](https://docs.python.org/3/library/asyncio.html). To better handle async behaviour, it also ensures multiple concurrent calls will only result in 1 call to the wrapped function, with all `await`s receiving the result of that call when it completes.

``` {.python}
import asyncio

import aiohttp
from async_lru import alru_cache


@alru_cache(maxsize=32)
async def get_pep(num):
    resource = 'http://www.python.org/dev/peps/pep-%04d/' % num
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(resource) as s:
                return await s.read()
        except aiohttp.ClientError:
            return 'Not Found'


async def main():
    for n in 8, 290, 308, 320, 8, 218, 320, 279, 289, 320, 9991:
        pep = await get_pep(n)
        print(n, len(pep))

    print(get_pep.cache_info())
    # CacheInfo(hits=3, misses=8, maxsize=32, currsize=8)

    # closing is optional, but highly recommended
    await get_pep.cache_close()


asyncio.run(main())
```

TTL (time-to-live, expiration on timeout) is supported by accepting [ttl]{.title-ref} configuration parameter (off by default):

``` {.python}
@alru_cache(ttl=5)
async def func(arg):
    return arg * 2
```

The library supports explicit invalidation for specific function call by \`cache\_invalidate()\`:

``` {.python}
@alru_cache(ttl=5)
async def func(arg1, arg2):
    return arg1 + arg2

func.cache_invalidate(1, arg2=2)
```

The method returns [True]{.title-ref} if corresponding arguments set was cached already, [False]{.title-ref} otherwise.

Python 3.8+ is required

Thanks
------

The library was donated by [Ocean S.A.](https://ocean.io/)

Thanks to the company for contribution.
